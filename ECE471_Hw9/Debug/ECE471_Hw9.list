
ECE471_Hw9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a674  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000058f8  0801a844  0801a844  0002a844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802013c  0802013c  000401dc  2**0
                  CONTENTS
  4 .ARM          00000008  0802013c  0802013c  0003013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020144  08020144  000401dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020144  08020144  00030144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020148  08020148  00030148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0802014c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000009c  080201e8  0004009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000013c  08020288  0004013c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d020  200001dc  08020328  000401dc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d1fc  08020328  0004d1fc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401dc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0004020c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003529f  00000000  00000000  0004024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000083fc  00000000  00000000  000754ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002870  00000000  00000000  0007d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fef  00000000  00000000  00080160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00039ace  00000000  00000000  0008214f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003fd95  00000000  00000000  000bbc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012133e  00000000  00000000  000fb9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b2b4  00000000  00000000  0021ccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00227fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a82c 	.word	0x0801a82c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0801a82c 	.word	0x0801a82c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200001f8 	.word	0x200001f8
 800060c:	2000024c 	.word	0x2000024c

08000610 <setPWM>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

		switch(value){	//set the duty cycle
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	2b06      	cmp	r3, #6
 8000626:	d866      	bhi.n	80006f6 <setPWM+0xe6>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <setPWM+0x20>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	0800064d 	.word	0x0800064d
 8000634:	08000661 	.word	0x08000661
 8000638:	08000677 	.word	0x08000677
 800063c:	08000691 	.word	0x08000691
 8000640:	080006a7 	.word	0x080006a7
 8000644:	080006c1 	.word	0x080006c1
 8000648:	080006dd 	.word	0x080006dd
			case 1:
				dutyCycle =(max/10);
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <setPWM+0x15c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a47      	ldr	r2, [pc, #284]	; (8000770 <setPWM+0x160>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	1092      	asrs	r2, r2, #2
 8000658:	17db      	asrs	r3, r3, #31
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	60fb      	str	r3, [r7, #12]
				break;
 800065e:	e056      	b.n	800070e <setPWM+0xfe>
			case 2:
				dutyCycle =2*(max/10);
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <setPWM+0x15c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a42      	ldr	r2, [pc, #264]	; (8000770 <setPWM+0x160>)
 8000666:	fb82 1203 	smull	r1, r2, r2, r3
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
				break;
 8000674:	e04b      	b.n	800070e <setPWM+0xfe>
			case 3:
				dutyCycle =3*(max/10);
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <setPWM+0x15c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a3d      	ldr	r2, [pc, #244]	; (8000770 <setPWM+0x160>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1092      	asrs	r2, r2, #2
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
				break;
 800068e:	e03e      	b.n	800070e <setPWM+0xfe>
			case 4:
				dutyCycle =4*(max/10);
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <setPWM+0x15c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a36      	ldr	r2, [pc, #216]	; (8000770 <setPWM+0x160>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1092      	asrs	r2, r2, #2
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
				break;
 80006a4:	e033      	b.n	800070e <setPWM+0xfe>
			case 5:
				dutyCycle =5*(max/10);
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <setPWM+0x15c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <setPWM+0x160>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1092      	asrs	r2, r2, #2
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
				break;
 80006be:	e026      	b.n	800070e <setPWM+0xfe>
			case 6:
				dutyCycle =6*(max/10);
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <setPWM+0x15c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <setPWM+0x160>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1092      	asrs	r2, r2, #2
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
				break;
 80006da:	e018      	b.n	800070e <setPWM+0xfe>
			case 7:
				dutyCycle =7*(max/10);
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <setPWM+0x15c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <setPWM+0x160>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1092      	asrs	r2, r2, #2
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	4613      	mov	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
				break;
 80006f4:	e00b      	b.n	800070e <setPWM+0xfe>
			default:
				dutyCycle =3*(max/10);
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <setPWM+0x15c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <setPWM+0x160>)
 80006fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000700:	1092      	asrs	r2, r2, #2
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1ad2      	subs	r2, r2, r3
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
		}
		//make sure duty cycle stays within the range
		if(value>7){
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b07      	cmp	r3, #7
 8000712:	dd0c      	ble.n	800072e <setPWM+0x11e>
			dutyCycle =7*(max/10);
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <setPWM+0x15c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a15      	ldr	r2, [pc, #84]	; (8000770 <setPWM+0x160>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1092      	asrs	r2, r2, #2
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00b      	b.n	8000746 <setPWM+0x136>
		}
		else if(value<1){
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dc08      	bgt.n	8000746 <setPWM+0x136>
			dutyCycle =(max/10);
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <setPWM+0x15c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <setPWM+0x160>)
 800073a:	fb82 1203 	smull	r1, r2, r2, r3
 800073e:	1092      	asrs	r2, r2, #2
 8000740:	17db      	asrs	r3, r3, #31
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	60fb      	str	r3, [r7, #12]
		}

		if(led == green){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d103      	bne.n	8000754 <setPWM+0x144>
			TIM3->CCR3 = dutyCycle;
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <setPWM+0x164>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		else if (led == red){
			TIM12->CCR1 = dutyCycle;
		}
}
 8000752:	e005      	b.n	8000760 <setPWM+0x150>
		else if (led == red){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <setPWM+0x150>
			TIM12->CCR1 = dutyCycle;
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <setPWM+0x168>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000004 	.word	0x20000004
 8000770:	66666667 	.word	0x66666667
 8000774:	40000400 	.word	0x40000400
 8000778:	40001800 	.word	0x40001800

0800077c <custom_SSI_handler>:
/* USER CODE BEGIN 0 */
#define custom_SSI_tag_num 1
const char* custom_SSI_tags[custom_SSI_tag_num] = {"ltemp"};

uint16_t custom_SSI_handler(const char* ssi_tag_name, char *pcInsert, int iInsertLen)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  if ( iInsertLen < 10 ) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b09      	cmp	r3, #9
 800078c:	dc02      	bgt.n	8000794 <custom_SSI_handler+0x18>
      // if the buffer size is smaller than the longest response then indicate an error
      return(-1);
 800078e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000792:	e01e      	b.n	80007d2 <custom_SSI_handler+0x56>
  }

  if (strcmp(ssi_tag_name, custom_SSI_tags[0])==0) {
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <custom_SSI_handler+0x60>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff fd38 	bl	8000210 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d113      	bne.n	80007ce <custom_SSI_handler+0x52>
	  char buffer[6];



          strcpy(pcInsert,itoa(temp, buffer,10));
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <custom_SSI_handler+0x64>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	220a      	movs	r2, #10
 80007b2:	4619      	mov	r1, r3
 80007b4:	f018 ff40 	bl	8019638 <itoa>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	68b8      	ldr	r0, [r7, #8]
 80007be:	f019 f9f7 	bl	8019bb0 <strcpy>

      return(strlen(pcInsert));
 80007c2:	68b8      	ldr	r0, [r7, #8]
 80007c4:	f7ff fd2e 	bl	8000224 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	e001      	b.n	80007d2 <custom_SSI_handler+0x56>
  }
else {
      // otherwise, return unrecognized tag error
    return(-1);
 80007ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }

}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	20000450 	.word	0x20000450

080007e4 <setRED>:
 * request being ignored.
 *
 */

const char * setRED(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]

	  if (iNumParams==1) {
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d10b      	bne.n	8000810 <setRED+0x2c>
	        setPWM(redLed, atoi(pcValue[0]));
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <setRED+0x38>)
 80007fa:	781c      	ldrb	r4, [r3, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f018 fefd 	bl	8019600 <atoi>
 8000806:	4603      	mov	r3, r0
 8000808:	4619      	mov	r1, r3
 800080a:	4620      	mov	r0, r4
 800080c:	f7ff ff00 	bl	8000610 <setPWM>
		}
    return("/index.shtml");
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <setRED+0x3c>)
}
 8000812:	4618      	mov	r0, r3
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	bf00      	nop
 800081c:	2000044c 	.word	0x2000044c
 8000820:	0801a84c 	.word	0x0801a84c

08000824 <setGRN>:

const char * setGRN(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	603b      	str	r3, [r7, #0]

    if (iNumParams==1) {
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d10b      	bne.n	8000850 <setGRN+0x2c>
        setPWM(greenLed, atoi(pcValue[0]));
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <setGRN+0x38>)
 800083a:	781c      	ldrb	r4, [r3, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4618      	mov	r0, r3
 8000842:	f018 fedd 	bl	8019600 <atoi>
 8000846:	4603      	mov	r3, r0
 8000848:	4619      	mov	r1, r3
 800084a:	4620      	mov	r0, r4
 800084c:	f7ff fee0 	bl	8000610 <setPWM>
	}

    return("/index.shtml");
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <setGRN+0x3c>)
}
 8000852:	4618      	mov	r0, r3
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	20000000 	.word	0x20000000
 8000860:	0801a84c 	.word	0x0801a84c

08000864 <setBLU>:

const char * setBLU(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d114      	bne.n	80008a2 <setBLU+0x3e>
        if (atoi(pcValue[0])==1) {
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4618      	mov	r0, r3
 800087e:	f018 febf 	bl	8019600 <atoi>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	d106      	bne.n	8000896 <setBLU+0x32>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <setBLU+0x48>)
 8000890:	f003 f9b4 	bl	8003bfc <HAL_GPIO_WritePin>
 8000894:	e005      	b.n	80008a2 <setBLU+0x3e>

        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800089c:	4803      	ldr	r0, [pc, #12]	; (80008ac <setBLU+0x48>)
 800089e:	f003 f9ad 	bl	8003bfc <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <setBLU+0x4c>)
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020400 	.word	0x40020400
 80008b0:	0801a84c 	.word	0x0801a84c

080008b4 <setALL>:

const char * setALL(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	603b      	str	r3, [r7, #0]
    // Warning: use atoi_r instead of atoi in case you also use this function inside a RTOS task
    for (int i=0; i<iNumParams; i++) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	e05c      	b.n	8000982 <setALL+0xce>
        if (strcmp(pcParam[i],"red")==0) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	4413      	add	r3, r2
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4930      	ldr	r1, [pc, #192]	; (8000994 <setALL+0xe0>)
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fc9b 	bl	8000210 <strcmp>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10f      	bne.n	8000900 <setALL+0x4c>

        	setPWM(redLed, atoi(pcValue[i]));
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <setALL+0xe4>)
 80008e2:	781c      	ldrb	r4, [r3, #0]
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f018 fe86 	bl	8019600 <atoi>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4619      	mov	r1, r3
 80008f8:	4620      	mov	r0, r4
 80008fa:	f7ff fe89 	bl	8000610 <setPWM>
 80008fe:	e03d      	b.n	800097c <setALL+0xc8>

        } else if (strcmp(pcParam[i],"green")==0) {
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4413      	add	r3, r2
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4924      	ldr	r1, [pc, #144]	; (800099c <setALL+0xe8>)
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc7f 	bl	8000210 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10f      	bne.n	8000938 <setALL+0x84>

			setPWM(greenLed, atoi(pcValue[i]));
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <setALL+0xec>)
 800091a:	781c      	ldrb	r4, [r3, #0]
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	683a      	ldr	r2, [r7, #0]
 8000922:	4413      	add	r3, r2
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f018 fe6a 	bl	8019600 <atoi>
 800092c:	4603      	mov	r3, r0
 800092e:	4619      	mov	r1, r3
 8000930:	4620      	mov	r0, r4
 8000932:	f7ff fe6d 	bl	8000610 <setPWM>
 8000936:	e021      	b.n	800097c <setALL+0xc8>


        } else if (strcmp(pcParam[i],"blue")==0) {
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4918      	ldr	r1, [pc, #96]	; (80009a4 <setALL+0xf0>)
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fc63 	bl	8000210 <strcmp>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d115      	bne.n	800097c <setALL+0xc8>
            if (atoi(pcValue[i])==1) {
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	4413      	add	r3, r2
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f018 fe50 	bl	8019600 <atoi>
 8000960:	4603      	mov	r3, r0
 8000962:	2b01      	cmp	r3, #1
 8000964:	d105      	bne.n	8000972 <setALL+0xbe>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	480f      	ldr	r0, [pc, #60]	; (80009a8 <setALL+0xf4>)
 800096c:	f003 f946 	bl	8003bfc <HAL_GPIO_WritePin>
 8000970:	e004      	b.n	800097c <setALL+0xc8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <setALL+0xf4>)
 8000978:	f003 f940 	bl	8003bfc <HAL_GPIO_WritePin>
    for (int i=0; i<iNumParams; i++) {
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	429a      	cmp	r2, r3
 8000988:	db9e      	blt.n	80008c8 <setALL+0x14>
            }
        } // else invalid parameters are simply ignored in this example
    }
    // we return the status page as confirmation in this example
    return("/index.shtml");
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <setALL+0xf8>)
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	0801a85c 	.word	0x0801a85c
 8000998:	2000044c 	.word	0x2000044c
 800099c:	0801a860 	.word	0x0801a860
 80009a0:	20000000 	.word	0x20000000
 80009a4:	0801a868 	.word	0x0801a868
 80009a8:	40020400 	.word	0x40020400
 80009ac:	0801a84c 	.word	0x0801a84c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fff9 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f825 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 fa17 	bl	8000df0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009c2:	f000 f9b7 	bl	8000d34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c6:	f000 f9e5 	bl	8000d94 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80009ca:	f000 f885 	bl	8000ad8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80009ce:	f000 f8d7 	bl	8000b80 <MX_TIM3_Init>
  MX_TIM12_Init();
 80009d2:	f000 f94d 	bl	8000c70 <MX_TIM12_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <main+0x50>)
 80009d8:	1d3c      	adds	r4, r7, #4
 80009da:	461d      	mov	r5, r3
 80009dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f007 f9e9 	bl	8007dc4 <osThreadCreate>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <main+0x54>)
 80009f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009f8:	f007 f9cd 	bl	8007d96 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x4c>
 80009fe:	bf00      	nop
 8000a00:	0801a8b4 	.word	0x0801a8b4
 8000a04:	20000ac4 	.word	0x20000ac4

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b094      	sub	sp, #80	; 0x50
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	2230      	movs	r2, #48	; 0x30
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f019 f831 	bl	8019a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a2c:	f003 fa48 	bl	8003ec0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	4b27      	ldr	r3, [pc, #156]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a26      	ldr	r2, [pc, #152]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <SystemClock_Config+0xc8>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a50:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <SystemClock_Config+0xcc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a64:	2301      	movs	r3, #1
 8000a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a68:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a7c:	2348      	movs	r3, #72	; 0x48
 8000a7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a84:	2303      	movs	r3, #3
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a88:	f107 0320 	add.w	r3, r7, #32
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fa27 	bl	8003ee0 <HAL_RCC_OscConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a98:	f000 fac7 	bl	800102a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fcb5 	bl	8004428 <HAL_RCC_ClockConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ac4:	f000 fab1 	bl	800102a <Error_Handler>
  }
}
 8000ac8:	bf00      	nop
 8000aca:	3750      	adds	r7, #80	; 0x50
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ade:	463b      	mov	r3, r7
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <MX_ADC1_Init+0x9c>)
 8000aee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <MX_ADC1_Init+0xa0>)
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b38:	f000 ff8a 	bl	8001a50 <HAL_ADC_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 fa72 	bl	800102a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <MX_ADC1_Init+0xa4>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	4619      	mov	r1, r3
 8000b56:	4806      	ldr	r0, [pc, #24]	; (8000b70 <MX_ADC1_Init+0x98>)
 8000b58:	f001 f924 	bl	8001da4 <HAL_ADC_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b62:	f000 fa62 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000454 	.word	0x20000454
 8000b74:	40012000 	.word	0x40012000
 8000b78:	0f000001 	.word	0x0f000001
 8000b7c:	10000012 	.word	0x10000012

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	; 0x38
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb2:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <MX_TIM3_Init+0xec>)
 8000bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb8:	4b2b      	ldr	r3, [pc, #172]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bc4:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd8:	4823      	ldr	r0, [pc, #140]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bda:	f004 fa6d 	bl	80050b8 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000be4:	f000 fa21 	bl	800102a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	481c      	ldr	r0, [pc, #112]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000bf6:	f004 febf 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c00:	f000 fa13 	bl	800102a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c04:	4818      	ldr	r0, [pc, #96]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000c06:	f004 fb27 	bl	8005258 <HAL_TIM_PWM_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c10:	f000 fa0b 	bl	800102a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4811      	ldr	r0, [pc, #68]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000c24:	f005 fb58 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c2e:	f000 f9fc 	bl	800102a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c32:	2360      	movs	r3, #96	; 0x60
 8000c34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c42:	463b      	mov	r3, r7
 8000c44:	2208      	movs	r2, #8
 8000c46:	4619      	mov	r1, r3
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000c4a:	f004 fd81 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c54:	f000 f9e9 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM3_Init+0xe8>)
 8000c5a:	f000 fa67 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000c5e:	bf00      	nop
 8000c60:	3738      	adds	r7, #56	; 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000049c 	.word	0x2000049c
 8000c6c:	40000400 	.word	0x40000400

08000c70 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c76:	f107 0320 	add.w	r3, r7, #32
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000c98:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <MX_TIM12_Init+0xc0>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cae:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000cbc:	481b      	ldr	r0, [pc, #108]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000cbe:	f004 f9fb 	bl	80050b8 <HAL_TIM_Base_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000cc8:	f000 f9af 	bl	800102a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000cda:	f004 fe4d 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000ce4:	f000 f9a1 	bl	800102a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000cea:	f004 fab5 	bl	8005258 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000cf4:	f000 f999 	bl	800102a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf8:	2360      	movs	r3, #96	; 0x60
 8000cfa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4807      	ldr	r0, [pc, #28]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000d10:	f004 fd1e 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000d1a:	f000 f986 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <MX_TIM12_Init+0xbc>)
 8000d20:	f000 fa04 	bl	800112c <HAL_TIM_MspPostInit>

}
 8000d24:	bf00      	nop
 8000d26:	3730      	adds	r7, #48	; 0x30
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200004e8 	.word	0x200004e8
 8000d30:	40001800 	.word	0x40001800

08000d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_USART3_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d78:	f005 fb5a 	bl	8006430 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f952 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000534 	.word	0x20000534
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da2:	2206      	movs	r2, #6
 8000da4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000da8:	2202      	movs	r2, #2
 8000daa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db4:	2202      	movs	r2, #2
 8000db6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	f002 ff29 	bl	8003c2e <HAL_PCD_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000de2:	f000 f922 	bl	800102a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200005bc 	.word	0x200005bc

08000df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	; 0x30
 8000df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e06:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b43      	ldr	r3, [pc, #268]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	4b40      	ldr	r3, [pc, #256]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a3f      	ldr	r2, [pc, #252]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a33      	ldr	r2, [pc, #204]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a27      	ldr	r2, [pc, #156]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <MX_GPIO_Init+0x130>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2140      	movs	r1, #64	; 0x40
 8000e9a:	4822      	ldr	r0, [pc, #136]	; (8000f24 <MX_GPIO_Init+0x134>)
 8000e9c:	f002 feae 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4820      	ldr	r0, [pc, #128]	; (8000f28 <MX_GPIO_Init+0x138>)
 8000ea6:	f002 fea9 	bl	8003bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481a      	ldr	r0, [pc, #104]	; (8000f2c <MX_GPIO_Init+0x13c>)
 8000ec2:	f002 fcef 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4811      	ldr	r0, [pc, #68]	; (8000f24 <MX_GPIO_Init+0x134>)
 8000ede:	f002 fce1 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0x134>)
 8000ef6:	f002 fcd5 	bl	80038a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_GPIO_Init+0x138>)
 8000f12:	f002 fcc7 	bl	80038a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f16:	bf00      	nop
 8000f18:	3730      	adds	r7, #48	; 0x30
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40021800 	.word	0x40021800
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800

08000f30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f38:	f006 f9c0 	bl	80072bc <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

   MX_TIM3_Init();
 8000f3c:	f7ff fe20 	bl	8000b80 <MX_TIM3_Init>
   MX_TIM12_Init();
 8000f40:	f7ff fe96 	bl	8000c70 <MX_TIM12_Init>
   HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000f44:	2108      	movs	r1, #8
 8000f46:	4825      	ldr	r0, [pc, #148]	; (8000fdc <StartDefaultTask+0xac>)
 8000f48:	f004 f9e8 	bl	800531c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <StartDefaultTask+0xb0>)
 8000f50:	f004 f9e4 	bl	800531c <HAL_TIM_PWM_Start>
   HAL_ADC_Start(&hadc1);
 8000f54:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <StartDefaultTask+0xb4>)
 8000f56:	f000 fdbf 	bl	8001ad8 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5e:	4821      	ldr	r0, [pc, #132]	; (8000fe4 <StartDefaultTask+0xb4>)
 8000f60:	f000 fe88 	bl	8001c74 <HAL_ADC_PollForConversion>

   uint32_t raw_temp = HAL_ADC_GetValue(&hadc1);
 8000f64:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <StartDefaultTask+0xb4>)
 8000f66:	f000 ff10 	bl	8001d8a <HAL_ADC_GetValue>
 8000f6a:	60f8      	str	r0, [r7, #12]
   uint32_t cht_voltage = (raw_temp * 3300U) / 4095U;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000f72:	fb03 f202 	mul.w	r2, r3, r2
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <StartDefaultTask+0xb8>)
 8000f78:	fba3 1302 	umull	r1, r3, r3, r2
 8000f7c:	1ad2      	subs	r2, r2, r3
 8000f7e:	0852      	lsrs	r2, r2, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	0adb      	lsrs	r3, r3, #11
 8000f84:	60bb      	str	r3, [r7, #8]
  	  temp = 25 + (cht_voltage * 10 - 7600U) / 25;
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	461a      	mov	r2, r3
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <StartDefaultTask+0xbc>)
 8000f94:	4413      	add	r3, r2
 8000f96:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <StartDefaultTask+0xc0>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	3319      	adds	r3, #25
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <StartDefaultTask+0xc4>)
 8000fa2:	6013      	str	r3, [r2, #0]
   setPWM(greenLed, 3);
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <StartDefaultTask+0xc8>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2103      	movs	r1, #3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fb30 	bl	8000610 <setPWM>
   setPWM(redLed, 3);
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <StartDefaultTask+0xcc>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fb2a 	bl	8000610 <setPWM>
  //set up the web server
  http_set_ssi_handler(custom_SSI_handler, custom_SSI_tags, custom_SSI_tag_num);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4910      	ldr	r1, [pc, #64]	; (8001000 <StartDefaultTask+0xd0>)
 8000fc0:	4810      	ldr	r0, [pc, #64]	; (8001004 <StartDefaultTask+0xd4>)
 8000fc2:	f00b fa99 	bl	800c4f8 <http_set_ssi_handler>
  http_set_cgi_handlers(custom_CGI_handlers, custon_CGI_handler_num);
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	480f      	ldr	r0, [pc, #60]	; (8001008 <StartDefaultTask+0xd8>)
 8000fca:	f00b fab5 	bl	800c538 <http_set_cgi_handlers>
  //start the web server after MX_LWIP_Init() is called
  httpd_init();
 8000fce:	f00b fa73 	bl	800c4b8 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f006 ff42 	bl	8007e5c <osDelay>
 8000fd8:	e7fb      	b.n	8000fd2 <StartDefaultTask+0xa2>
 8000fda:	bf00      	nop
 8000fdc:	2000049c 	.word	0x2000049c
 8000fe0:	200004e8 	.word	0x200004e8
 8000fe4:	20000454 	.word	0x20000454
 8000fe8:	00100101 	.word	0x00100101
 8000fec:	ffffe250 	.word	0xffffe250
 8000ff0:	51eb851f 	.word	0x51eb851f
 8000ff4:	20000450 	.word	0x20000450
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	2000044c 	.word	0x2000044c
 8001000:	20000008 	.word	0x20000008
 8001004:	0800077d 	.word	0x0800077d
 8001008:	0801da8c 	.word	0x0801da8c

0800100c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800101c:	d101      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101e:	f000 fcd3 	bl	80019c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102e:	b672      	cpsid	i
}
 8001030:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001032:	e7fe      	b.n	8001032 <Error_Handler+0x8>

08001034 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_MspInit+0x4c>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_MspInit+0x4c>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f001 f99f 	bl	80023b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x38>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d10b      	bne.n	80010ae <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001096:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_ADC_MspInit+0x3c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a09      	ldr	r2, [pc, #36]	; (80010c0 <HAL_ADC_MspInit+0x3c>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <HAL_ADC_MspInit+0x3c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40012000 	.word	0x40012000
 80010c0:	40023800 	.word	0x40023800

080010c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_TIM_Base_MspInit+0x5c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d10c      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80010ee:	e010      	b.n	8001112 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0x64>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10b      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_TIM_Base_MspInit+0x60>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40000400 	.word	0x40000400
 8001124:	40023800 	.word	0x40023800
 8001128:	40001800 	.word	0x40001800

0800112c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	; 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a22      	ldr	r2, [pc, #136]	; (80011d4 <HAL_TIM_MspPostInit+0xa8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d11c      	bne.n	8001188 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001176:	2302      	movs	r3, #2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4816      	ldr	r0, [pc, #88]	; (80011dc <HAL_TIM_MspPostInit+0xb0>)
 8001182:	f002 fb8f 	bl	80038a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001186:	e021      	b.n	80011cc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_TIM_MspPostInit+0xb4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d11c      	bne.n	80011cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_TIM_MspPostInit+0xac>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80011bc:	2309      	movs	r3, #9
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_TIM_MspPostInit+0xb0>)
 80011c8:	f002 fb6c 	bl	80038a4 <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40000400 	.word	0x40000400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40001800 	.word	0x40001800

080011e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0aa      	sub	sp, #168	; 0xa8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2284      	movs	r2, #132	; 0x84
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f018 fc3a 	bl	8019a7e <memset>
  if(huart->Instance==USART3)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a22      	ldr	r2, [pc, #136]	; (8001298 <HAL_UART_MspInit+0xb4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d13c      	bne.n	800128e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001218:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800121a:	2300      	movs	r3, #0
 800121c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fb58 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800122e:	f7ff fefc 	bl	800102a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_UART_MspInit+0xb8>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <HAL_UART_MspInit+0xb8>)
 8001238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_UART_MspInit+0xb8>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_MspInit+0xb8>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <HAL_UART_MspInit+0xb8>)
 8001250:	f043 0308 	orr.w	r3, r3, #8
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <HAL_UART_MspInit+0xb8>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001262:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001266:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001282:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001286:	4619      	mov	r1, r3
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <HAL_UART_MspInit+0xbc>)
 800128a:	f002 fb0b 	bl	80038a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800128e:	bf00      	nop
 8001290:	37a8      	adds	r7, #168	; 0xa8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40004800 	.word	0x40004800
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b0ac      	sub	sp, #176	; 0xb0
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0318 	add.w	r3, r7, #24
 80012c0:	2284      	movs	r2, #132	; 0x84
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f018 fbda 	bl	8019a7e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d159      	bne.n	8001388 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 faf7 	bl	80048d8 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012f0:	f7ff fe9b 	bl	800102a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_PCD_MspInit+0xec>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_PCD_MspInit+0xec>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_PCD_MspInit+0xec>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800130c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001326:	230a      	movs	r3, #10
 8001328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	4619      	mov	r1, r3
 8001332:	4818      	ldr	r0, [pc, #96]	; (8001394 <HAL_PCD_MspInit+0xf0>)
 8001334:	f002 fab6 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001350:	4619      	mov	r1, r3
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <HAL_PCD_MspInit+0xf0>)
 8001354:	f002 faa6 	bl	80038a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_PCD_MspInit+0xec>)
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_PCD_MspInit+0xec>)
 800135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001362:	6353      	str	r3, [r2, #52]	; 0x34
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_PCD_MspInit+0xec>)
 8001366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_PCD_MspInit+0xec>)
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	4a06      	ldr	r2, [pc, #24]	; (8001390 <HAL_PCD_MspInit+0xec>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800137a:	6453      	str	r3, [r2, #68]	; 0x44
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_PCD_MspInit+0xec>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001388:	bf00      	nop
 800138a:	37b0      	adds	r7, #176	; 0xb0
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000

08001398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_InitTick+0xe4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	4a33      	ldr	r2, [pc, #204]	; (800147c <HAL_InitTick+0xe4>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6413      	str	r3, [r2, #64]	; 0x40
 80013b4:	4b31      	ldr	r3, [pc, #196]	; (800147c <HAL_InitTick+0xe4>)
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c0:	f107 0210 	add.w	r2, r7, #16
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fa52 	bl	8004874 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013da:	f003 fa23 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 80013de:	6378      	str	r0, [r7, #52]	; 0x34
 80013e0:	e004      	b.n	80013ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013e2:	f003 fa1f 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 80013e6:	4603      	mov	r3, r0
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_InitTick+0xe8>)
 80013f0:	fba2 2303 	umull	r2, r3, r2, r3
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	3b01      	subs	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_InitTick+0xec>)
 80013fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001400:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001402:	4b20      	ldr	r3, [pc, #128]	; (8001484 <HAL_InitTick+0xec>)
 8001404:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001408:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <HAL_InitTick+0xec>)
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <HAL_InitTick+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_InitTick+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_InitTick+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <HAL_InitTick+0xec>)
 8001424:	f003 fe48 	bl	80050b8 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800142e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11b      	bne.n	800146e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001436:	4813      	ldr	r0, [pc, #76]	; (8001484 <HAL_InitTick+0xec>)
 8001438:	f003 fe96 	bl	8005168 <HAL_TIM_Base_Start_IT>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001442:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001446:	2b00      	cmp	r3, #0
 8001448:	d111      	bne.n	800146e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144a:	201c      	movs	r0, #28
 800144c:	f000 ffce 	bl	80023ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d808      	bhi.n	8001468 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001456:	2200      	movs	r2, #0
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	201c      	movs	r0, #28
 800145c:	f000 ffaa 	bl	80023b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_InitTick+0xf0>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e002      	b.n	800146e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800146e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001472:	4618      	mov	r0, r3
 8001474:	3738      	adds	r7, #56	; 0x38
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	431bde83 	.word	0x431bde83
 8001484:	20000ac8 	.word	0x20000ac8
 8001488:	20000010 	.word	0x20000010

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014bc:	4802      	ldr	r0, [pc, #8]	; (80014c8 <TIM2_IRQHandler+0x10>)
 80014be:	f004 f827 	bl	8005510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000ac8 	.word	0x20000ac8

080014cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <ETH_IRQHandler+0x10>)
 80014d2:	f001 fb13 	bl	8002afc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200054f4 	.word	0x200054f4

080014e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return 1;
 80014e4:	2301      	movs	r3, #1
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_kill>:

int _kill(int pid, int sig)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <_kill+0x20>)
 80014fc:	2216      	movs	r2, #22
 80014fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	2000d0ac 	.word	0x2000d0ac

08001514 <_exit>:

void _exit (int status)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffe5 	bl	80014f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001526:	e7fe      	b.n	8001526 <_exit+0x12>

08001528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
  }

  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e009      	b.n	8001588 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1c5a      	adds	r2, r3, #1
 8001578:	60ba      	str	r2, [r7, #8]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf1      	blt.n	8001574 <_write+0x12>
  }
  return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d205      	bcs.n	8001640 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <_sbrk+0x6c>)
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20050000 	.word	0x20050000
 8001664:	00000400 	.word	0x00000400
 8001668:	20000b14 	.word	0x20000b14
 800166c:	2000d200 	.word	0x2000d200
 8001670:	2000d0ac 	.word	0x2000d0ac

08001674 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f018 fa4d 	bl	8019b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff f971 	bl	80009b0 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80016dc:	0802014c 	.word	0x0802014c
  ldr r2, =_sbss
 80016e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80016e4:	2000d1fc 	.word	0x2000d1fc

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>

080016ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00b      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <LAN8742_RegisterBusIO+0x28>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e014      	b.n	8001742 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d17c      	bne.n	8001868 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e01c      	b.n	80017c2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	2112      	movs	r1, #18
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	4798      	blx	r3
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	da03      	bge.n	80017a4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800179c:	f06f 0304 	mvn.w	r3, #4
 80017a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80017a2:	e00b      	b.n	80017bc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d105      	bne.n	80017bc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
         break;
 80017ba:	e005      	b.n	80017c8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b1f      	cmp	r3, #31
 80017c6:	d9df      	bls.n	8001788 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	d902      	bls.n	80017d6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017d0:	f06f 0302 	mvn.w	r3, #2
 80017d4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d145      	bne.n	8001868 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6810      	ldr	r0, [r2, #0]
 80017e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017e8:	2100      	movs	r1, #0
 80017ea:	4798      	blx	r3
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db37      	blt.n	8001862 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6810      	ldr	r0, [r2, #0]
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	2100      	movs	r1, #0
 8001800:	4798      	blx	r3
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	db28      	blt.n	800185a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4798      	blx	r3
 800180e:	4603      	mov	r3, r0
 8001810:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001812:	e01c      	b.n	800184e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4798      	blx	r3
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001826:	d80e      	bhi.n	8001846 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6810      	ldr	r0, [r2, #0]
 8001830:	f107 0208 	add.w	r2, r7, #8
 8001834:	2100      	movs	r1, #0
 8001836:	4798      	blx	r3
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	da07      	bge.n	800184e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800183e:	f06f 0304 	mvn.w	r3, #4
 8001842:	613b      	str	r3, [r7, #16]
                 break;
 8001844:	e010      	b.n	8001868 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001846:	f06f 0301 	mvn.w	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
               break;
 800184c:	e00c      	b.n	8001868 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1dd      	bne.n	8001814 <LAN8742_Init+0xc6>
 8001858:	e006      	b.n	8001868 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800185a:	f06f 0304 	mvn.w	r3, #4
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	e002      	b.n	8001868 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001862:	f06f 0303 	mvn.w	r3, #3
 8001866:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d112      	bne.n	8001894 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4798      	blx	r3
 8001874:	4603      	mov	r3, r0
 8001876:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001878:	bf00      	nop
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	4798      	blx	r3
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800188c:	d9f5      	bls.n	800187a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001894:	693b      	ldr	r3, [r7, #16]
 }
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6810      	ldr	r0, [r2, #0]
 80018b2:	f107 020c 	add.w	r2, r7, #12
 80018b6:	2101      	movs	r1, #1
 80018b8:	4798      	blx	r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	da02      	bge.n	80018c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018c0:	f06f 0304 	mvn.w	r3, #4
 80018c4:	e06e      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6810      	ldr	r0, [r2, #0]
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	2101      	movs	r1, #1
 80018d4:	4798      	blx	r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da02      	bge.n	80018e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018dc:	f06f 0304 	mvn.w	r3, #4
 80018e0:	e060      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018ec:	2301      	movs	r3, #1
 80018ee:	e059      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6810      	ldr	r0, [r2, #0]
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	2100      	movs	r1, #0
 80018fe:	4798      	blx	r3
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	da02      	bge.n	800190c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001906:	f06f 0304 	mvn.w	r3, #4
 800190a:	e04b      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d11b      	bne.n	800194e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <LAN8742_GetLinkState+0x90>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800192a:	2302      	movs	r3, #2
 800192c:	e03a      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001938:	2303      	movs	r3, #3
 800193a:	e033      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001946:	2304      	movs	r3, #4
 8001948:	e02c      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800194a:	2305      	movs	r3, #5
 800194c:	e02a      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6810      	ldr	r0, [r2, #0]
 8001956:	f107 020c 	add.w	r2, r7, #12
 800195a:	211f      	movs	r1, #31
 800195c:	4798      	blx	r3
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	da02      	bge.n	800196a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001964:	f06f 0304 	mvn.w	r3, #4
 8001968:	e01c      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001974:	2306      	movs	r3, #6
 8001976:	e015      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 031c 	and.w	r3, r3, #28
 800197e:	2b18      	cmp	r3, #24
 8001980:	d101      	bne.n	8001986 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001982:	2302      	movs	r3, #2
 8001984:	e00e      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f003 031c 	and.w	r3, r3, #28
 800198c:	2b08      	cmp	r3, #8
 800198e:	d101      	bne.n	8001994 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001990:	2303      	movs	r3, #3
 8001992:	e007      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 031c 	and.w	r3, r3, #28
 800199a:	2b14      	cmp	r3, #20
 800199c:	d101      	bne.n	80019a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800199e:	2304      	movs	r3, #4
 80019a0:	e000      	b.n	80019a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019a2:	2305      	movs	r3, #5
    }				
  }
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 fcf4 	bl	800239e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	200f      	movs	r0, #15
 80019b8:	f7ff fcee 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fb3a 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000014 	.word	0x20000014
 80019ec:	20000b18 	.word	0x20000b18

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000b18 	.word	0x20000b18

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000014 	.word	0x20000014

08001a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e031      	b.n	8001aca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fb08 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_ADC_Init+0x84>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	f043 0202 	orr.w	r2, r3, #2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fad6 	bl	8002050 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f023 0303 	bic.w	r3, r3, #3
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8001aba:	e001      	b.n	8001ac0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	ffffeefd 	.word	0xffffeefd

08001ad8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Start+0x1a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e0ad      	b.n	8001c4e <HAL_ADC_Start+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d018      	beq.n	8001b3a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_ADC_Start+0x184>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <HAL_ADC_Start+0x188>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9a      	lsrs	r2, r3, #18
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d175      	bne.n	8001c34 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b4c:	4b45      	ldr	r3, [pc, #276]	; (8001c64 <HAL_ADC_Start+0x18c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d007      	beq.n	8001b76 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	f023 0206 	bic.w	r2, r3, #6
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b90:	e002      	b.n	8001b98 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ba8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_ADC_Start+0x190>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d143      	bne.n	8001c4c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e03a      	b.n	8001c4c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_ADC_Start+0x194>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d10e      	bne.n	8001bfe <HAL_ADC_Start+0x126>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bfc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <HAL_ADC_Start+0x190>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d120      	bne.n	8001c4c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_ADC_Start+0x198>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d11b      	bne.n	8001c4c <HAL_ADC_Start+0x174>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	e00b      	b.n	8001c4c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f043 0210 	orr.w	r2, r3, #16
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	431bde83 	.word	0x431bde83
 8001c64:	fffff8fe 	.word	0xfffff8fe
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	40012000 	.word	0x40012000
 8001c70:	40012200 	.word	0x40012200

08001c74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c90:	d113      	bne.n	8001cba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca0:	d10b      	bne.n	8001cba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e063      	b.n	8001d82 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001cba:	f7ff fe99 	bl	80019f0 <HAL_GetTick>
 8001cbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cc0:	e021      	b.n	8001d06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d01d      	beq.n	8001d06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_ADC_PollForConversion+0x6c>
 8001cd0:	f7ff fe8e 	bl	80019f0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d212      	bcs.n	8001d06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d00b      	beq.n	8001d06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e03d      	b.n	8001d82 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d1d6      	bne.n	8001cc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f06f 0212 	mvn.w	r2, #18
 8001d1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d123      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d11f      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x1c>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e136      	b.n	800202e <HAL_ADC_ConfigChannel+0x28a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b09      	cmp	r3, #9
 8001dce:	d93a      	bls.n	8001e46 <HAL_ADC_ConfigChannel+0xa2>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd8:	d035      	beq.n	8001e46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68d9      	ldr	r1, [r3, #12]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a8d      	ldr	r2, [pc, #564]	; (800203c <HAL_ADC_ConfigChannel+0x298>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10a      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68d9      	ldr	r1, [r3, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	061a      	lsls	r2, r3, #24
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1e:	e035      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	3b1e      	subs	r3, #30
 8001e3a:	409a      	lsls	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e44:	e022      	b.n	8001e8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6919      	ldr	r1, [r3, #16]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43da      	mvns	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	400a      	ands	r2, r1
 8001e68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6919      	ldr	r1, [r3, #16]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4403      	add	r3, r0
 8001e82:	409a      	lsls	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b06      	cmp	r3, #6
 8001e92:	d824      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b05      	subs	r3, #5
 8001ea6:	221f      	movs	r2, #31
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b05      	subs	r3, #5
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34
 8001edc:	e04c      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d824      	bhi.n	8001f30 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b23      	subs	r3, #35	; 0x23
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b23      	subs	r3, #35	; 0x23
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2e:	e023      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b41      	subs	r3, #65	; 0x41
 8001f42:	221f      	movs	r2, #31
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	3b41      	subs	r3, #65	; 0x41
 8001f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a30      	ldr	r2, [pc, #192]	; (8002040 <HAL_ADC_ConfigChannel+0x29c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1f4>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f8a:	d105      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a2c      	ldr	r2, [pc, #176]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f92:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f96:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_ADC_ConfigChannel+0x29c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b12      	cmp	r3, #18
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fb4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fb6:	4b23      	ldr	r3, [pc, #140]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a22      	ldr	r2, [pc, #136]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fc0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_ADC_ConfigChannel+0x29c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d12b      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x280>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	; (800203c <HAL_ADC_ConfigChannel+0x298>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x23a>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b11      	cmp	r3, #17
 8001fdc:	d122      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fe4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001fe8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ff4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a10      	ldr	r2, [pc, #64]	; (800203c <HAL_ADC_ConfigChannel+0x298>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d111      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_ADC_ConfigChannel+0x2a4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_ADC_ConfigChannel+0x2a8>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9a      	lsrs	r2, r3, #18
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002016:	e002      	b.n	800201e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3b01      	subs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f9      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	10000012 	.word	0x10000012
 8002040:	40012000 	.word	0x40012000
 8002044:	40012300 	.word	0x40012300
 8002048:	2000000c 	.word	0x2000000c
 800204c:	431bde83 	.word	0x431bde83

08002050 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002058:	4b78      	ldr	r3, [pc, #480]	; (800223c <ADC_Init+0x1ec>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a77      	ldr	r2, [pc, #476]	; (800223c <ADC_Init+0x1ec>)
 800205e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002062:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002064:	4b75      	ldr	r3, [pc, #468]	; (800223c <ADC_Init+0x1ec>)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4973      	ldr	r1, [pc, #460]	; (800223c <ADC_Init+0x1ec>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002080:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	021a      	lsls	r2, r3, #8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6859      	ldr	r1, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6899      	ldr	r1, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	4a58      	ldr	r2, [pc, #352]	; (8002240 <ADC_Init+0x1f0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d022      	beq.n	800212a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6899      	ldr	r1, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e00f      	b.n	800214a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002148:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0202 	bic.w	r2, r2, #2
 8002158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	005a      	lsls	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01b      	beq.n	80021b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002186:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002196:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6859      	ldr	r1, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	035a      	lsls	r2, r3, #13
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e007      	b.n	80021c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	3b01      	subs	r3, #1
 80021dc:	051a      	lsls	r2, r3, #20
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002202:	025a      	lsls	r2, r3, #9
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800221a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	029a      	lsls	r2, r3, #10
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40012300 	.word	0x40012300
 8002240:	0f000001 	.word	0x0f000001

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <__NVIC_SetPriorityGrouping+0x40>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	4313      	orrs	r3, r2
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x40>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00
 8002288:	05fa0000 	.word	0x05fa0000

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	db0b      	blt.n	80022d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	f003 021f 	and.w	r2, r3, #31
 80022c0:	4907      	ldr	r1, [pc, #28]	; (80022e0 <__NVIC_EnableIRQ+0x38>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	095b      	lsrs	r3, r3, #5
 80022c8:	2001      	movs	r0, #1
 80022ca:	fa00 f202 	lsl.w	r2, r0, r2
 80022ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000e100 	.word	0xe000e100

080022e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	6039      	str	r1, [r7, #0]
 80022ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	db0a      	blt.n	800230e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <__NVIC_SetPriority+0x4c>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	0112      	lsls	r2, r2, #4
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	440b      	add	r3, r1
 8002308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800230c:	e00a      	b.n	8002324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <__NVIC_SetPriority+0x50>)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3b04      	subs	r3, #4
 800231c:	0112      	lsls	r2, r2, #4
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	440b      	add	r3, r1
 8002322:	761a      	strb	r2, [r3, #24]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f1c3 0307 	rsb	r3, r3, #7
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf28      	it	cs
 8002356:	2304      	movcs	r3, #4
 8002358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3304      	adds	r3, #4
 800235e:	2b06      	cmp	r3, #6
 8002360:	d902      	bls.n	8002368 <NVIC_EncodePriority+0x30>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b03      	subs	r3, #3
 8002366:	e000      	b.n	800236a <NVIC_EncodePriority+0x32>
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	f04f 32ff 	mov.w	r2, #4294967295
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43da      	mvns	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	401a      	ands	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002380:	f04f 31ff 	mov.w	r1, #4294967295
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	43d9      	mvns	r1, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	4313      	orrs	r3, r2
         );
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff4c 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c6:	f7ff ff61 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	6978      	ldr	r0, [r7, #20]
 80023d2:	f7ff ffb1 	bl	8002338 <NVIC_EncodePriority>
 80023d6:	4602      	mov	r2, r0
 80023d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023dc:	4611      	mov	r1, r2
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff ff80 	bl	80022e4 <__NVIC_SetPriority>
}
 80023e4:	bf00      	nop
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff54 	bl	80022a8 <__NVIC_EnableIRQ>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06a      	b.n	80024f0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2223      	movs	r2, #35	; 0x23
 8002428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f005 fa6f 	bl	8007910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_ETH_Init+0xf0>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <HAL_ETH_Init+0xf0>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <HAL_ETH_Init+0xf0>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <HAL_ETH_Init+0xf4>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <HAL_ETH_Init+0xf4>)
 8002450:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002454:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_ETH_Init+0xf4>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	4927      	ldr	r1, [pc, #156]	; (80024fc <HAL_ETH_Init+0xf4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_ETH_Init+0xf4>)
 8002466:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800247e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002480:	f7ff fab6 	bl	80019f0 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002486:	e011      	b.n	80024ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002488:	f7ff fab2 	bl	80019f0 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002496:	d909      	bls.n	80024ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2204      	movs	r2, #4
 800249c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	22e0      	movs	r2, #224	; 0xe0
 80024a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e021      	b.n	80024f0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e4      	bne.n	8002488 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 ff4c 	bl	800335c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fff3 	bl	80034b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f001 f849 	bl	8003562 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	461a      	mov	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 ffb1 	bl	8003440 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800

08002500 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250e:	2b10      	cmp	r3, #16
 8002510:	d17b      	bne.n	800260a <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2223      	movs	r2, #35	; 0x23
 8002516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b35      	ldr	r3, [pc, #212]	; (8002614 <HAL_ETH_Start_IT+0x114>)
 800253e:	430b      	orrs	r3, r1
 8002540:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002554:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2204      	movs	r2, #4
 800255c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f9fc 	bl	800295c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0208 	orr.w	r2, r2, #8
 8002572:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff fa43 	bl	8001a08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0204 	orr.w	r2, r2, #4
 8002598:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff fa30 	bl	8001a08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fd74 	bl	800309e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	f043 0302 	orr.w	r3, r3, #2
 80025e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025e4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_ETH_Start_IT+0x118>)
 80025f6:	430b      	orrs	r3, r1
 80025f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025fc:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2223      	movs	r2, #35	; 0x23
 8002602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	00020060 	.word	0x00020060
 8002618:	0001a0c1 	.word	0x0001a0c1

0800261c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262a:	2b23      	cmp	r3, #35	; 0x23
 800262c:	d16e      	bne.n	800270c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2223      	movs	r2, #35	; 0x23
 8002632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	69d9      	ldr	r1, [r3, #28]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b34      	ldr	r3, [pc, #208]	; (8002718 <HAL_ETH_Stop_IT+0xfc>)
 8002646:	400b      	ands	r3, r1
 8002648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800264c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002660:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002664:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	f023 0302 	bic.w	r3, r3, #2
 8002678:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800267c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0204 	bic.w	r2, r2, #4
 800268c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002696:	2001      	movs	r0, #1
 8002698:	f7ff f9b6 	bl	8001a08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fcfa 	bl	800309e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff f9a0 	bl	8001a08 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e00e      	b.n	80026f4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	3212      	adds	r2, #18
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d9ed      	bls.n	80026d6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2210      	movs	r2, #16
 8002704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	fffe5f3e 	.word	0xfffe5f3e

0800271c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e045      	b.n	80027cc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002746:	2b23      	cmp	r3, #35	; 0x23
 8002748:	d13f      	bne.n	80027ca <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002752:	2201      	movs	r2, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 ff70 	bl	800363c <ETH_Prepare_Tx_Descriptors>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f043 0202 	orr.w	r2, r3, #2
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e02a      	b.n	80027cc <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002776:	f3bf 8f4f 	dsb	sy
}
 800277a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	2b03      	cmp	r3, #3
 800278c:	d904      	bls.n	8002798 <HAL_ETH_Transmit_IT+0x7c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	1f1a      	subs	r2, r3, #4
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	461a      	mov	r2, r3
 80027b4:	2304      	movs	r3, #4
 80027b6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c0:	461a      	mov	r2, r3
 80027c2:	2300      	movs	r3, #0
 80027c4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d109      	bne.n	8002800 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0a8      	b.n	8002952 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002806:	2b23      	cmp	r3, #35	; 0x23
 8002808:	d001      	beq.n	800280e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0a1      	b.n	8002952 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	3212      	adds	r2, #18
 800281a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002824:	f1c3 0304 	rsb	r3, r3, #4
 8002828:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800282a:	e06a      	b.n	8002902 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d007      	beq.n	8002848 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002850:	2b00      	cmp	r3, #0
 8002852:	d103      	bne.n	800285c <HAL_ETH_ReadData+0x88>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d040      	beq.n	80028de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002890:	3b04      	subs	r3, #4
 8002892:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80028b8:	461a      	mov	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f005 f9f3 	bl	8007ca8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	441a      	add	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2200      	movs	r2, #0
 80028dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d902      	bls.n	80028f0 <HAL_ETH_ReadData+0x11c>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b04      	subs	r3, #4
 80028ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	3212      	adds	r2, #18
 80028f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	3301      	adds	r3, #1
 8002900:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002906:	2b00      	cmp	r3, #0
 8002908:	db06      	blt.n	8002918 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d202      	bcs.n	8002918 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d089      	beq.n	800282c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f815 	bl	800295c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002968:	2301      	movs	r3, #1
 800296a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002970:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	3212      	adds	r2, #18
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002984:	e040      	b.n	8002a08 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d112      	bne.n	80029b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	4618      	mov	r0, r3
 8002994:	f005 f958 	bl	8007c48 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	74fb      	strb	r3, [r7, #19]
 80029a2:	e007      	b.n	80029b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	461a      	mov	r2, r3
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d026      	beq.n	8002a08 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <ETH_UpdateDescriptor+0xe4>)
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	e003      	b.n	80029d2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80029d0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80029d2:	f3bf 8f5f 	dmb	sy
}
 80029d6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d902      	bls.n	80029f6 <ETH_UpdateDescriptor+0x9a>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3b04      	subs	r3, #4
 80029f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	3212      	adds	r2, #18
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	617b      	str	r3, [r7, #20]
      desccount--;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <ETH_UpdateDescriptor+0xb8>
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1b8      	bne.n	8002986 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d00c      	beq.n	8002a38 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a26:	461a      	mov	r2, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	80004600 	.word	0x80004600

08002a44 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3318      	adds	r3, #24
 8002a50:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002a62:	e03f      	b.n	8002ae4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	3304      	adds	r3, #4
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	3301      	adds	r3, #1
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d028      	beq.n	8002ae4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68d9      	ldr	r1, [r3, #12]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	440b      	add	r3, r1
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db1b      	blt.n	8002ae0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	3304      	adds	r3, #4
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f005 f939 	bl	8007d2c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	3301      	adds	r3, #1
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ade:	e001      	b.n	8002ae4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_ETH_ReleaseTxPacket+0xac>
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1b9      	bne.n	8002a64 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d112      	bne.n	8002b3c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b40      	cmp	r3, #64	; 0x40
 8002b26:	d109      	bne.n	8002b3c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_ETH_IRQHandler+0x178>)
 8002b34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f004 fc4e 	bl	80073d8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d113      	bne.n	8002b76 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d10a      	bne.n	8002b76 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b68:	461a      	mov	r2, r3
 8002b6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002b6e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f004 fc41 	bl	80073f8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b88:	d14c      	bne.n	8002c24 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	d142      	bne.n	8002c24 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f043 0208 	orr.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <HAL_ETH_IRQHandler+0x17c>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6812      	ldr	r2, [r2, #0]
 8002be4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002be8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bec:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	22e0      	movs	r2, #224	; 0xe0
 8002bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002bf6:	e012      	b.n	8002c1e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c06:	4013      	ands	r3, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c16:	461a      	mov	r2, r3
 8002c18:	f248 6380 	movw	r3, #34432	; 0x8680
 8002c1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f004 fbfa 	bl	8007418 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d10e      	bne.n	8002c50 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f81c 	bl	8002c80 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <HAL_ETH_IRQHandler+0x180>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002c5c:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_ETH_IRQHandler+0x180>)
 8002c5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c62:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f815 	bl	8002c94 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	00010040 	.word	0x00010040
 8002c78:	007e2000 	.word	0x007e2000
 8002c7c:	40013c00 	.word	0x40013c00

08002c80 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 031c 	and.w	r3, r3, #28
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	02db      	lsls	r3, r3, #11
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0302 	bic.w	r3, r3, #2
 8002ce6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002cf8:	f7fe fe7a 	bl	80019f0 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cfe:	e00d      	b.n	8002d1c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002d00:	f7fe fe76 	bl	80019f0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d301      	bcc.n	8002d14 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e010      	b.n	8002d36 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ec      	bne.n	8002d00 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 031c 	and.w	r3, r3, #28
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	02db      	lsls	r3, r3, #11
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	019b      	lsls	r3, r3, #6
 8002d6c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d98:	f7fe fe2a 	bl	80019f0 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002d9e:	e00d      	b.n	8002dbc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002da0:	f7fe fe26 	bl	80019f0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dae:	d301      	bcc.n	8002db4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e009      	b.n	8002dc8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1ec      	bne.n	8002da0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0d9      	b.n	8002f98 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	bf14      	ite	ne
 8002df2:	2301      	movne	r3, #1
 8002df4:	2300      	moveq	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	bf14      	ite	ne
 8002ed6:	2301      	movne	r3, #1
 8002ed8:	2300      	moveq	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	0c1b      	lsrs	r3, r3, #16
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf14      	ite	ne
 8002f88:	2301      	movne	r3, #1
 8002f8a:	2300      	moveq	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e00b      	b.n	8002fd0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbe:	2b10      	cmp	r3, #16
 8002fc0:	d105      	bne.n	8002fce <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002fc2:	6839      	ldr	r1, [r7, #0]
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f88f 	bl	80030e8 <ETH_SetMACConfig>

    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e000      	b.n	8002fd0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f023 031c 	bic.w	r3, r3, #28
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ff0:	f001 fc0c 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8002ff4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d908      	bls.n	8003010 <HAL_ETH_SetMDIOClockRange+0x38>
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d804      	bhi.n	8003010 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	60fb      	str	r3, [r7, #12]
 800300e:	e027      	b.n	8003060 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d908      	bls.n	800302a <HAL_ETH_SetMDIOClockRange+0x52>
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d204      	bcs.n	800302a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f043 030c 	orr.w	r3, r3, #12
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e01a      	b.n	8003060 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4a12      	ldr	r2, [pc, #72]	; (8003078 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d303      	bcc.n	800303a <HAL_ETH_SetMDIOClockRange+0x62>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d911      	bls.n	800305e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4a0f      	ldr	r2, [pc, #60]	; (800307c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d908      	bls.n	8003054 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d804      	bhi.n	8003054 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e005      	b.n	8003060 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e000      	b.n	8003060 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800305e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	611a      	str	r2, [r3, #16]
}
 8003068:	bf00      	nop
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	01312cff 	.word	0x01312cff
 8003074:	02160ebf 	.word	0x02160ebf
 8003078:	03938700 	.word	0x03938700
 800307c:	05f5e0ff 	.word	0x05f5e0ff
 8003080:	08f0d17f 	.word	0x08f0d17f

08003084 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f7fe fc9a 	bl	8001a08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030de:	6193      	str	r3, [r2, #24]
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4b51      	ldr	r3, [pc, #324]	; (8003244 <ETH_SetMACConfig+0x15c>)
 80030fe:	4013      	ands	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	7c1b      	ldrb	r3, [r3, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <ETH_SetMACConfig+0x28>
 800310a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800310e:	e000      	b.n	8003112 <ETH_SetMACConfig+0x2a>
 8003110:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	7c5b      	ldrb	r3, [r3, #17]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <ETH_SetMACConfig+0x38>
 800311a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800311e:	e000      	b.n	8003122 <ETH_SetMACConfig+0x3a>
 8003120:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003122:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003128:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	7fdb      	ldrb	r3, [r3, #31]
 800312e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003130:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003136:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	7f92      	ldrb	r2, [r2, #30]
 800313c:	2a00      	cmp	r2, #0
 800313e:	d102      	bne.n	8003146 <ETH_SetMACConfig+0x5e>
 8003140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003144:	e000      	b.n	8003148 <ETH_SetMACConfig+0x60>
 8003146:	2200      	movs	r2, #0
                        macconf->Speed |
 8003148:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	7f1b      	ldrb	r3, [r3, #28]
 800314e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003150:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003156:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	791b      	ldrb	r3, [r3, #4]
 800315c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800315e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003166:	2a00      	cmp	r2, #0
 8003168:	d102      	bne.n	8003170 <ETH_SetMACConfig+0x88>
 800316a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316e:	e000      	b.n	8003172 <ETH_SetMACConfig+0x8a>
 8003170:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003172:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	7bdb      	ldrb	r3, [r3, #15]
 8003178:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800317a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003180:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003188:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800318a:	4313      	orrs	r3, r2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7fe fc30 	bl	8001a08 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80031be:	4013      	ands	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80031ce:	2a00      	cmp	r2, #0
 80031d0:	d101      	bne.n	80031d6 <ETH_SetMACConfig+0xee>
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	e000      	b.n	80031d8 <ETH_SetMACConfig+0xf0>
 80031d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031d8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80031e6:	2a01      	cmp	r2, #1
 80031e8:	d101      	bne.n	80031ee <ETH_SetMACConfig+0x106>
 80031ea:	2208      	movs	r2, #8
 80031ec:	e000      	b.n	80031f0 <ETH_SetMACConfig+0x108>
 80031ee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80031f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80031f8:	2a01      	cmp	r2, #1
 80031fa:	d101      	bne.n	8003200 <ETH_SetMACConfig+0x118>
 80031fc:	2204      	movs	r2, #4
 80031fe:	e000      	b.n	8003202 <ETH_SetMACConfig+0x11a>
 8003200:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003202:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800320a:	2a01      	cmp	r2, #1
 800320c:	d101      	bne.n	8003212 <ETH_SetMACConfig+0x12a>
 800320e:	2202      	movs	r2, #2
 8003210:	e000      	b.n	8003214 <ETH_SetMACConfig+0x12c>
 8003212:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003214:	4313      	orrs	r3, r2
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800322c:	2001      	movs	r0, #1
 800322e:	f7fe fbeb 	bl	8001a08 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	ff20810f 	.word	0xff20810f

08003248 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <ETH_SetDMAConfig+0x110>)
 8003262:	4013      	ands	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	7b1b      	ldrb	r3, [r3, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d102      	bne.n	8003274 <ETH_SetDMAConfig+0x2c>
 800326e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003272:	e000      	b.n	8003276 <ETH_SetDMAConfig+0x2e>
 8003274:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	7b5b      	ldrb	r3, [r3, #13]
 800327a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800327c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	7f52      	ldrb	r2, [r2, #29]
 8003282:	2a00      	cmp	r2, #0
 8003284:	d102      	bne.n	800328c <ETH_SetDMAConfig+0x44>
 8003286:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800328a:	e000      	b.n	800328e <ETH_SetDMAConfig+0x46>
 800328c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800328e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	7b9b      	ldrb	r3, [r3, #14]
 8003294:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003296:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800329c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7f1b      	ldrb	r3, [r3, #28]
 80032a2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80032a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	7f9b      	ldrb	r3, [r3, #30]
 80032aa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80032ac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80032b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032ba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80032bc:	4313      	orrs	r3, r2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032cc:	461a      	mov	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032de:	2001      	movs	r0, #1
 80032e0:	f7fe fb92 	bl	8001a08 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ec:	461a      	mov	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	791b      	ldrb	r3, [r3, #4]
 80032f6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032fc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003302:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003308:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003310:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003312:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800331a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003320:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800332a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800332e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800333c:	2001      	movs	r0, #1
 800333e:	f7fe fb63 	bl	8001a08 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6013      	str	r3, [r2, #0]
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	f8de3f23 	.word	0xf8de3f23

0800335c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b0a6      	sub	sp, #152	; 0x98
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003370:	2300      	movs	r3, #0
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003398:	2300      	movs	r3, #0
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80033ac:	2300      	movs	r3, #0
 80033ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80033be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80033c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80033d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff fe86 	bl	80030e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80033dc:	2301      	movs	r3, #1
 80033de:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80033e0:	2301      	movs	r3, #1
 80033e2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033fe:	2300      	movs	r3, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003408:	2301      	movs	r3, #1
 800340a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800340c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003410:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003416:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800341c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003424:	2300      	movs	r3, #0
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff08 	bl	8003248 <ETH_SetDMAConfig>
}
 8003438:	bf00      	nop
 800343a:	3798      	adds	r7, #152	; 0x98
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3305      	adds	r3, #5
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	3204      	adds	r2, #4
 8003458:	7812      	ldrb	r2, [r2, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <ETH_MACAddressConfig+0x68>)
 8003462:	4413      	add	r3, r2
 8003464:	461a      	mov	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3303      	adds	r3, #3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	061a      	lsls	r2, r3, #24
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3302      	adds	r3, #2
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3301      	adds	r3, #1
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	4313      	orrs	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <ETH_MACAddressConfig+0x6c>)
 8003492:	4413      	add	r3, r2
 8003494:	461a      	mov	r2, r3
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6013      	str	r3, [r2, #0]
}
 800349a:	bf00      	nop
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40028040 	.word	0x40028040
 80034ac:	40028044 	.word	0x40028044

080034b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e03e      	b.n	800353c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68d9      	ldr	r1, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	3206      	adds	r2, #6
 80034f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d80c      	bhi.n	8003520 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68d9      	ldr	r1, [r3, #12]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	440b      	add	r3, r1
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e004      	b.n	800352a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	461a      	mov	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3301      	adds	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d9bd      	bls.n	80034be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003554:	611a      	str	r2, [r3, #16]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e046      	b.n	80035fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6919      	ldr	r1, [r3, #16]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	440b      	add	r3, r1
 8003580:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2200      	movs	r2, #0
 800358c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80035b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	3212      	adds	r2, #18
 80035ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d80c      	bhi.n	80035ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6919      	ldr	r1, [r3, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	461a      	mov	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	e004      	b.n	80035f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b03      	cmp	r3, #3
 8003602:	d9b5      	bls.n	8003570 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800362e:	60da      	str	r2, [r3, #12]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800363c:	b480      	push	{r7}
 800363e:	b08d      	sub	sp, #52	; 0x34
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3318      	adds	r3, #24
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003666:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800367a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367e:	d007      	beq.n	8003690 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	3304      	adds	r3, #4
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	e0ff      	b.n	8003894 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	3301      	adds	r3, #1
 8003698:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4b7d      	ldr	r3, [pc, #500]	; (80038a0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	431a      	orrs	r2, r3
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	431a      	orrs	r2, r3
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0304 	and.w	r3, r3, #4
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8003716:	f3bf 8f5f 	dmb	sy
}
 800371a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003728:	e082      	b.n	8003830 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e005      	b.n	8003756 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003758:	3301      	adds	r3, #1
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	2b03      	cmp	r3, #3
 8003760:	d902      	bls.n	8003768 <ETH_Prepare_Tx_Descriptors+0x12c>
 8003762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003764:	3b04      	subs	r3, #4
 8003766:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800378a:	d007      	beq.n	800379c <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	3304      	adds	r3, #4
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4413      	add	r3, r2
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d029      	beq.n	80037f0 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	e019      	b.n	80037e4 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80037b0:	f3bf 8f5f 	dmb	sy
}
 80037b4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80037c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c4:	3301      	adds	r3, #1
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d902      	bls.n	80037d4 <ETH_Prepare_Tx_Descriptors+0x198>
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	3b04      	subs	r3, #4
 80037d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037dc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	3301      	adds	r3, #1
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3e1      	bcc.n	80037b0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80037ec:	2302      	movs	r3, #2
 80037ee:	e051      	b.n	8003894 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	3301      	adds	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800380c:	4013      	ands	r3, r2
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	6852      	ldr	r2, [r2, #4]
 8003812:	431a      	orrs	r2, r3
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	3301      	adds	r3, #1
 800381c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800381e:	f3bf 8f5f 	dmb	sy
}
 8003822:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f af78 	bne.w	800372a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e005      	b.n	800385a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	3304      	adds	r3, #4
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800387c:	b672      	cpsid	i
}
 800387e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800388e:	b662      	cpsie	i
}
 8003890:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3734      	adds	r7, #52	; 0x34
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	ffffe000 	.word	0xffffe000

080038a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	; 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80038b2:	2300      	movs	r3, #0
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
 80038c2:	e175      	b.n	8003bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80038c4:	2201      	movs	r2, #1
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	429a      	cmp	r2, r3
 80038de:	f040 8164 	bne.w	8003baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d005      	beq.n	80038fa <HAL_GPIO_Init+0x56>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d130      	bne.n	800395c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003930:	2201      	movs	r2, #1
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 0201 	and.w	r2, r3, #1
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f003 0303 	and.w	r3, r3, #3
 8003964:	2b03      	cmp	r3, #3
 8003966:	d017      	beq.n	8003998 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	2203      	movs	r2, #3
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d123      	bne.n	80039ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	220f      	movs	r2, #15
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	08da      	lsrs	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3208      	adds	r2, #8
 80039e6:	69b9      	ldr	r1, [r7, #24]
 80039e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	2203      	movs	r2, #3
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0203 	and.w	r2, r3, #3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80be 	beq.w	8003baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2e:	4b66      	ldr	r3, [pc, #408]	; (8003bc8 <HAL_GPIO_Init+0x324>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	4a65      	ldr	r2, [pc, #404]	; (8003bc8 <HAL_GPIO_Init+0x324>)
 8003a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a38:	6453      	str	r3, [r2, #68]	; 0x44
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_GPIO_Init+0x324>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003a46:	4a61      	ldr	r2, [pc, #388]	; (8003bcc <HAL_GPIO_Init+0x328>)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	089b      	lsrs	r3, r3, #2
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <HAL_GPIO_Init+0x32c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d037      	beq.n	8003ae2 <HAL_GPIO_Init+0x23e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a57      	ldr	r2, [pc, #348]	; (8003bd4 <HAL_GPIO_Init+0x330>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d031      	beq.n	8003ade <HAL_GPIO_Init+0x23a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a56      	ldr	r2, [pc, #344]	; (8003bd8 <HAL_GPIO_Init+0x334>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d02b      	beq.n	8003ada <HAL_GPIO_Init+0x236>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a55      	ldr	r2, [pc, #340]	; (8003bdc <HAL_GPIO_Init+0x338>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d025      	beq.n	8003ad6 <HAL_GPIO_Init+0x232>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a54      	ldr	r2, [pc, #336]	; (8003be0 <HAL_GPIO_Init+0x33c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01f      	beq.n	8003ad2 <HAL_GPIO_Init+0x22e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a53      	ldr	r2, [pc, #332]	; (8003be4 <HAL_GPIO_Init+0x340>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d019      	beq.n	8003ace <HAL_GPIO_Init+0x22a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a52      	ldr	r2, [pc, #328]	; (8003be8 <HAL_GPIO_Init+0x344>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d013      	beq.n	8003aca <HAL_GPIO_Init+0x226>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a51      	ldr	r2, [pc, #324]	; (8003bec <HAL_GPIO_Init+0x348>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_GPIO_Init+0x222>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a50      	ldr	r2, [pc, #320]	; (8003bf0 <HAL_GPIO_Init+0x34c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d007      	beq.n	8003ac2 <HAL_GPIO_Init+0x21e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4f      	ldr	r2, [pc, #316]	; (8003bf4 <HAL_GPIO_Init+0x350>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d101      	bne.n	8003abe <HAL_GPIO_Init+0x21a>
 8003aba:	2309      	movs	r3, #9
 8003abc:	e012      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003abe:	230a      	movs	r3, #10
 8003ac0:	e010      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	e00e      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ac6:	2307      	movs	r3, #7
 8003ac8:	e00c      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003aca:	2306      	movs	r3, #6
 8003acc:	e00a      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ace:	2305      	movs	r3, #5
 8003ad0:	e008      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ad2:	2304      	movs	r3, #4
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_Init+0x240>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	f002 0203 	and.w	r2, r2, #3
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4093      	lsls	r3, r2
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003af4:	4935      	ldr	r1, [pc, #212]	; (8003bcc <HAL_GPIO_Init+0x328>)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b02:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b26:	4a34      	ldr	r2, [pc, #208]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b2c:	4b32      	ldr	r3, [pc, #200]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b56:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	4013      	ands	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b7a:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <HAL_GPIO_Init+0x354>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3301      	adds	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f ae86 	bls.w	80038c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3724      	adds	r7, #36	; 0x24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40013800 	.word	0x40013800
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	40020400 	.word	0x40020400
 8003bd8:	40020800 	.word	0x40020800
 8003bdc:	40020c00 	.word	0x40020c00
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40021400 	.word	0x40021400
 8003be8:	40021800 	.word	0x40021800
 8003bec:	40021c00 	.word	0x40021c00
 8003bf0:	40022000 	.word	0x40022000
 8003bf4:	40022400 	.word	0x40022400
 8003bf8:	40013c00 	.word	0x40013c00

08003bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c0c:	787b      	ldrb	r3, [r7, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003c18:	e003      	b.n	8003c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	041a      	lsls	r2, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c30:	b08f      	sub	sp, #60	; 0x3c
 8003c32:	af0a      	add	r7, sp, #40	; 0x28
 8003c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e116      	b.n	8003e6e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fb22 	bl	80012a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2203      	movs	r2, #3
 8003c64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 f880 	bl	8006d84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	687e      	ldr	r6, [r7, #4]
 8003c8c:	466d      	mov	r5, sp
 8003c8e:	f106 0410 	add.w	r4, r6, #16
 8003c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ca2:	1d33      	adds	r3, r6, #4
 8003ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca6:	6838      	ldr	r0, [r7, #0]
 8003ca8:	f003 f814 	bl	8006cd4 <USB_CoreInit>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0d7      	b.n	8003e6e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 f86e 	bl	8006da6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	73fb      	strb	r3, [r7, #15]
 8003cce:	e04a      	b.n	8003d66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cd0:	7bfa      	ldrb	r2, [r7, #15]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	333d      	adds	r3, #61	; 0x3d
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ce4:	7bfa      	ldrb	r2, [r7, #15]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	333c      	adds	r3, #60	; 0x3c
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	b298      	uxth	r0, r3
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3344      	adds	r3, #68	; 0x44
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3340      	adds	r3, #64	; 0x40
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d24:	7bfa      	ldrb	r2, [r7, #15]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3348      	adds	r3, #72	; 0x48
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	334c      	adds	r3, #76	; 0x4c
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3354      	adds	r3, #84	; 0x54
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	3301      	adds	r3, #1
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	7bfa      	ldrb	r2, [r7, #15]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3af      	bcc.n	8003cd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e044      	b.n	8003e00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003da2:	7bfa      	ldrb	r2, [r7, #15]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d3b5      	bcc.n	8003d76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	687e      	ldr	r6, [r7, #4]
 8003e12:	466d      	mov	r5, sp
 8003e14:	f106 0410 	add.w	r4, r6, #16
 8003e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e24:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e28:	1d33      	adds	r3, r6, #4
 8003e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e2c:	6838      	ldr	r0, [r7, #0]
 8003e2e:	f003 f807 	bl	8006e40 <USB_DevInit>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e014      	b.n	8003e6e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d102      	bne.n	8003e62 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f80b 	bl	8003e78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 f9c5 	bl	80071f6 <USB_DevDisconnect>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_PCDEx_ActivateLPM+0x44>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	10000003 	.word	0x10000003

08003ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a04      	ldr	r2, [pc, #16]	; (8003edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40007000 	.word	0x40007000

08003ee0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e291      	b.n	800441a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8087 	beq.w	8004012 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f04:	4b96      	ldr	r3, [pc, #600]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d00c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f10:	4b93      	ldr	r3, [pc, #588]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d112      	bne.n	8003f42 <HAL_RCC_OscConfig+0x62>
 8003f1c:	4b90      	ldr	r3, [pc, #576]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2a:	4b8d      	ldr	r3, [pc, #564]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d06c      	beq.n	8004010 <HAL_RCC_OscConfig+0x130>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d168      	bne.n	8004010 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e26b      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x7a>
 8003f4c:	4b84      	ldr	r3, [pc, #528]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a83      	ldr	r2, [pc, #524]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	e02e      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x9c>
 8003f62:	4b7f      	ldr	r3, [pc, #508]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a7e      	ldr	r2, [pc, #504]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b7c      	ldr	r3, [pc, #496]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a7b      	ldr	r2, [pc, #492]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xc0>
 8003f86:	4b76      	ldr	r3, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a75      	ldr	r2, [pc, #468]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b73      	ldr	r3, [pc, #460]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a72      	ldr	r2, [pc, #456]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xd8>
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a6e      	ldr	r2, [pc, #440]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b6c      	ldr	r3, [pc, #432]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a6b      	ldr	r2, [pc, #428]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fd16 	bl	80019f0 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fd fd12 	bl	80019f0 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	; 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e21f      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b61      	ldr	r3, [pc, #388]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xe8>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fd02 	bl	80019f0 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fd fcfe 	bl	80019f0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e20b      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004002:	4b57      	ldr	r3, [pc, #348]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x110>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d069      	beq.n	80040f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800401e:	4b50      	ldr	r3, [pc, #320]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b4d      	ldr	r3, [pc, #308]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11c      	bne.n	8004070 <HAL_RCC_OscConfig+0x190>
 8004036:	4b4a      	ldr	r3, [pc, #296]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d116      	bne.n	8004070 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	4b47      	ldr	r3, [pc, #284]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_RCC_OscConfig+0x17a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e1df      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	493d      	ldr	r1, [pc, #244]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	e040      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d023      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004078:	4b39      	ldr	r3, [pc, #228]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a38      	ldr	r2, [pc, #224]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800407e:	f043 0301 	orr.w	r3, r3, #1
 8004082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd fcb4 	bl	80019f0 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800408c:	f7fd fcb0 	bl	80019f0 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1bd      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409e:	4b30      	ldr	r3, [pc, #192]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040aa:	4b2d      	ldr	r3, [pc, #180]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	4929      	ldr	r1, [pc, #164]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]
 80040be:	e018      	b.n	80040f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fc90 	bl	80019f0 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d4:	f7fd fc8c 	bl	80019f0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e199      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040e6:	4b1e      	ldr	r3, [pc, #120]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d038      	beq.n	8004170 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d019      	beq.n	800413a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004106:	4b16      	ldr	r3, [pc, #88]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410a:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004112:	f7fd fc6d 	bl	80019f0 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800411a:	f7fd fc69 	bl	80019f0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e176      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800412e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <HAL_RCC_OscConfig+0x23a>
 8004138:	e01a      	b.n	8004170 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 800413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413e:	4a08      	ldr	r2, [pc, #32]	; (8004160 <HAL_RCC_OscConfig+0x280>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fc53 	bl	80019f0 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fd fc4f 	bl	80019f0 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d903      	bls.n	8004164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e15c      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
 8004160:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ee      	bne.n	800414e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a4 	beq.w	80042c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a87      	ldr	r2, [pc, #540]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b85      	ldr	r3, [pc, #532]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a6:	4b82      	ldr	r3, [pc, #520]	; (80043b0 <HAL_RCC_OscConfig+0x4d0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041b2:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <HAL_RCC_OscConfig+0x4d0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a7e      	ldr	r2, [pc, #504]	; (80043b0 <HAL_RCC_OscConfig+0x4d0>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fd fc17 	bl	80019f0 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fd fc13 	bl	80019f0 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e120      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d8:	4b75      	ldr	r3, [pc, #468]	; (80043b0 <HAL_RCC_OscConfig+0x4d0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x31a>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80041f2:	f043 0301 	orr.w	r3, r3, #1
 80041f6:	6713      	str	r3, [r2, #112]	; 0x70
 80041f8:	e02d      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x33c>
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	4a69      	ldr	r2, [pc, #420]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	6713      	str	r3, [r2, #112]	; 0x70
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a66      	ldr	r2, [pc, #408]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004214:	f023 0304 	bic.w	r3, r3, #4
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	e01c      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0x35e>
 8004224:	4b61      	ldr	r3, [pc, #388]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a60      	ldr	r2, [pc, #384]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800422a:	f043 0304 	orr.w	r3, r3, #4
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	e00b      	b.n	8004256 <HAL_RCC_OscConfig+0x376>
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004242:	4a5a      	ldr	r2, [pc, #360]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	6713      	str	r3, [r2, #112]	; 0x70
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a57      	ldr	r2, [pc, #348]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004250:	f023 0304 	bic.w	r3, r3, #4
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fd fbc7 	bl	80019f0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004264:	e00a      	b.n	800427c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004266:	f7fd fbc3 	bl	80019f0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	f241 3288 	movw	r2, #5000	; 0x1388
 8004274:	4293      	cmp	r3, r2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e0ce      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427c:	4b4b      	ldr	r3, [pc, #300]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0ee      	beq.n	8004266 <HAL_RCC_OscConfig+0x386>
 8004288:	e014      	b.n	80042b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fbb1 	bl	80019f0 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fbad 	bl	80019f0 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ee      	bne.n	8004292 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ba:	4b3c      	ldr	r3, [pc, #240]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	4a3b      	ldr	r2, [pc, #236]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 80a4 	beq.w	8004418 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d0:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 030c 	and.w	r3, r3, #12
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d06b      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d149      	bne.n	8004378 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a30      	ldr	r2, [pc, #192]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80042ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd fb7e 	bl	80019f0 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f8:	f7fd fb7a 	bl	80019f0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e087      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	4b28      	ldr	r3, [pc, #160]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	019b      	lsls	r3, r3, #6
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	3b01      	subs	r3, #1
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	4313      	orrs	r3, r2
 800433c:	4a1b      	ldr	r2, [pc, #108]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800433e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004342:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800434a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800434e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fd fb4e 	bl	80019f0 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004358:	f7fd fb4a 	bl	80019f0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e057      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x478>
 8004376:	e04f      	b.n	8004418 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a0b      	ldr	r2, [pc, #44]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 800437e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fb34 	bl	80019f0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438c:	f7fd fb30 	bl	80019f0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e03d      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_RCC_OscConfig+0x4cc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x4ac>
 80043aa:	e035      	b.n	8004418 <HAL_RCC_OscConfig+0x538>
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80043b4:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x544>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d028      	beq.n	8004414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d121      	bne.n	8004414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11a      	bne.n	8004414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d111      	bne.n	8004414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	3b01      	subs	r3, #1
 80043fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d107      	bne.n	8004414 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023800 	.word	0x40023800

08004428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0d0      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b67      	ldr	r3, [pc, #412]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4965      	ldr	r1, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d040      	beq.n	800454c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d115      	bne.n	800450a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e073      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e06b      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800450a:	4b39      	ldr	r3, [pc, #228]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4936      	ldr	r1, [pc, #216]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004518:	4313      	orrs	r3, r2
 800451a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800451c:	f7fd fa68 	bl	80019f0 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004522:	e00a      	b.n	800453a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004524:	f7fd fa64 	bl	80019f0 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e053      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 020c 	and.w	r2, r3, #12
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	429a      	cmp	r2, r3
 800454a:	d1eb      	bne.n	8004524 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d210      	bcs.n	800457c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020f 	bic.w	r2, r3, #15
 8004562:	4922      	ldr	r1, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1c4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 f821 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1c8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1cc>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1d0>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1d4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fedc 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	0801daac 	.word	0x0801daac
 80045f8:	2000000c 	.word	0x2000000c
 80045fc:	20000010 	.word	0x20000010

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004604:	b094      	sub	sp, #80	; 0x50
 8004606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	647b      	str	r3, [r7, #68]	; 0x44
 800460c:	2300      	movs	r3, #0
 800460e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004610:	2300      	movs	r3, #0
 8004612:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004618:	4b79      	ldr	r3, [pc, #484]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 030c 	and.w	r3, r3, #12
 8004620:	2b08      	cmp	r3, #8
 8004622:	d00d      	beq.n	8004640 <HAL_RCC_GetSysClockFreq+0x40>
 8004624:	2b08      	cmp	r3, #8
 8004626:	f200 80e1 	bhi.w	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x34>
 800462e:	2b04      	cmp	r3, #4
 8004630:	d003      	beq.n	800463a <HAL_RCC_GetSysClockFreq+0x3a>
 8004632:	e0db      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004634:	4b73      	ldr	r3, [pc, #460]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004638:	e0db      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463a:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCC_GetSysClockFreq+0x208>)
 800463c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463e:	e0d8      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004640:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004648:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800464a:	4b6d      	ldr	r3, [pc, #436]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d063      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004656:	4b6a      	ldr	r3, [pc, #424]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	2200      	movs	r2, #0
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004660:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004668:	633b      	str	r3, [r7, #48]	; 0x30
 800466a:	2300      	movs	r3, #0
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	f04f 0000 	mov.w	r0, #0
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004684:	0150      	lsls	r0, r2, #5
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4621      	mov	r1, r4
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	6139      	str	r1, [r7, #16]
 8004690:	4629      	mov	r1, r5
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a4:	4659      	mov	r1, fp
 80046a6:	018b      	lsls	r3, r1, #6
 80046a8:	4651      	mov	r1, sl
 80046aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ae:	4651      	mov	r1, sl
 80046b0:	018a      	lsls	r2, r1, #6
 80046b2:	4651      	mov	r1, sl
 80046b4:	ebb2 0801 	subs.w	r8, r2, r1
 80046b8:	4659      	mov	r1, fp
 80046ba:	eb63 0901 	sbc.w	r9, r3, r1
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d2:	4690      	mov	r8, r2
 80046d4:	4699      	mov	r9, r3
 80046d6:	4623      	mov	r3, r4
 80046d8:	eb18 0303 	adds.w	r3, r8, r3
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	462b      	mov	r3, r5
 80046e0:	eb49 0303 	adc.w	r3, r9, r3
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f04f 0300 	mov.w	r3, #0
 80046ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f2:	4629      	mov	r1, r5
 80046f4:	024b      	lsls	r3, r1, #9
 80046f6:	4621      	mov	r1, r4
 80046f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046fc:	4621      	mov	r1, r4
 80046fe:	024a      	lsls	r2, r1, #9
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004706:	2200      	movs	r2, #0
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 800470a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800470c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004710:	f7fb fde6 	bl	80002e0 <__aeabi_uldivmod>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4613      	mov	r3, r2
 800471a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471c:	e058      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b38      	ldr	r3, [pc, #224]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	2200      	movs	r2, #0
 8004726:	4618      	mov	r0, r3
 8004728:	4611      	mov	r1, r2
 800472a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800472e:	623b      	str	r3, [r7, #32]
 8004730:	2300      	movs	r3, #0
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
 8004734:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	f04f 0000 	mov.w	r0, #0
 8004740:	f04f 0100 	mov.w	r1, #0
 8004744:	0159      	lsls	r1, r3, #5
 8004746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474a:	0150      	lsls	r0, r2, #5
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4641      	mov	r1, r8
 8004752:	ebb2 0a01 	subs.w	sl, r2, r1
 8004756:	4649      	mov	r1, r9
 8004758:	eb63 0b01 	sbc.w	fp, r3, r1
 800475c:	f04f 0200 	mov.w	r2, #0
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004768:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800476c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004770:	ebb2 040a 	subs.w	r4, r2, sl
 8004774:	eb63 050b 	sbc.w	r5, r3, fp
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	00eb      	lsls	r3, r5, #3
 8004782:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004786:	00e2      	lsls	r2, r4, #3
 8004788:	4614      	mov	r4, r2
 800478a:	461d      	mov	r5, r3
 800478c:	4643      	mov	r3, r8
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	464b      	mov	r3, r9
 8004794:	eb45 0303 	adc.w	r3, r5, r3
 8004798:	607b      	str	r3, [r7, #4]
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 0300 	mov.w	r3, #0
 80047a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047a6:	4629      	mov	r1, r5
 80047a8:	028b      	lsls	r3, r1, #10
 80047aa:	4621      	mov	r1, r4
 80047ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b0:	4621      	mov	r1, r4
 80047b2:	028a      	lsls	r2, r1, #10
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ba:	2200      	movs	r2, #0
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c4:	f7fb fd8c 	bl	80002e0 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4613      	mov	r3, r2
 80047ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	0c1b      	lsrs	r3, r3, #16
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	3301      	adds	r3, #1
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80047e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ea:	e002      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <HAL_RCC_GetSysClockFreq+0x204>)
 80047ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3750      	adds	r7, #80	; 0x50
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fe:	bf00      	nop
 8004800:	40023800 	.word	0x40023800
 8004804:	00f42400 	.word	0x00f42400
 8004808:	007a1200 	.word	0x007a1200

0800480c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004810:	4b03      	ldr	r3, [pc, #12]	; (8004820 <HAL_RCC_GetHCLKFreq+0x14>)
 8004812:	681b      	ldr	r3, [r3, #0]
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c

08004824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004828:	f7ff fff0 	bl	800480c <HAL_RCC_GetHCLKFreq>
 800482c:	4602      	mov	r2, r0
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	0a9b      	lsrs	r3, r3, #10
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	4903      	ldr	r1, [pc, #12]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483a:	5ccb      	ldrb	r3, [r1, r3]
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40023800 	.word	0x40023800
 8004848:	0801dabc 	.word	0x0801dabc

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004850:	f7ff ffdc 	bl	800480c <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0b5b      	lsrs	r3, r3, #13
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800
 8004870:	0801dabc 	.word	0x0801dabc

08004874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	220f      	movs	r2, #15
 8004882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048a8:	4b09      	ldr	r3, [pc, #36]	; (80048d0 <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <HAL_RCC_GetClockConfig+0x60>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	601a      	str	r2, [r3, #0]
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40023c00 	.word	0x40023c00

080048d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d012      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004900:	4b69      	ldr	r3, [pc, #420]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800490a:	6093      	str	r3, [r2, #8]
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	4964      	ldr	r1, [pc, #400]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d017      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004932:	4b5d      	ldr	r3, [pc, #372]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004938:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004940:	4959      	ldr	r1, [pc, #356]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004950:	d101      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004952:	2301      	movs	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800496e:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004974:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	494a      	ldr	r1, [pc, #296]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498c:	d101      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800498e:	2301      	movs	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 808b 	beq.w	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049bc:	4b3a      	ldr	r3, [pc, #232]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a39      	ldr	r2, [pc, #228]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
 80049c8:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049d4:	4b35      	ldr	r3, [pc, #212]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a34      	ldr	r2, [pc, #208]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e0:	f7fd f806 	bl	80019f0 <HAL_GetTick>
 80049e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e8:	f7fd f802 	bl	80019f0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e357      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80049fa:	4b2c      	ldr	r3, [pc, #176]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d035      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d02e      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3e:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a4c:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d114      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fc ffca 	bl	80019f0 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fc ffc6 	bl	80019f0 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e319      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a8e:	d111      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	4901      	ldr	r1, [pc, #4]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40007000 	.word	0x40007000
 8004ab0:	0ffffcff 	.word	0x0ffffcff
 8004ab4:	4baa      	ldr	r3, [pc, #680]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	4aa9      	ldr	r2, [pc, #676]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004abe:	6093      	str	r3, [r2, #8]
 8004ac0:	4ba7      	ldr	r3, [pc, #668]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004acc:	49a4      	ldr	r1, [pc, #656]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0310 	and.w	r3, r3, #16
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ade:	4ba0      	ldr	r3, [pc, #640]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae4:	4a9e      	ldr	r2, [pc, #632]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004aee:	4b9c      	ldr	r3, [pc, #624]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	4999      	ldr	r1, [pc, #612]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b0c:	4b94      	ldr	r3, [pc, #592]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b1a:	4991      	ldr	r1, [pc, #580]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b2e:	4b8c      	ldr	r3, [pc, #560]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b3c:	4988      	ldr	r1, [pc, #544]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b50:	4b83      	ldr	r3, [pc, #524]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5e:	4980      	ldr	r1, [pc, #512]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b72:	4b7b      	ldr	r3, [pc, #492]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4977      	ldr	r1, [pc, #476]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b94:	4b72      	ldr	r3, [pc, #456]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	496f      	ldr	r1, [pc, #444]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bb6:	4b6a      	ldr	r3, [pc, #424]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f023 020c 	bic.w	r2, r3, #12
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc4:	4966      	ldr	r1, [pc, #408]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	495e      	ldr	r1, [pc, #376]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bfa:	4b59      	ldr	r3, [pc, #356]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	4955      	ldr	r1, [pc, #340]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	494d      	ldr	r1, [pc, #308]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c3e:	4b48      	ldr	r3, [pc, #288]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	4944      	ldr	r1, [pc, #272]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c60:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c6e:	493c      	ldr	r1, [pc, #240]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c82:	4b37      	ldr	r3, [pc, #220]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c90:	4933      	ldr	r1, [pc, #204]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004caa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb2:	492b      	ldr	r1, [pc, #172]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d011      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ccc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd4:	4922      	ldr	r1, [pc, #136]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce4:	d101      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d06:	4b16      	ldr	r3, [pc, #88]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d14:	4912      	ldr	r1, [pc, #72]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d38:	4909      	ldr	r1, [pc, #36]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d006      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 80d9 	beq.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d54:	4b02      	ldr	r3, [pc, #8]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a01      	ldr	r2, [pc, #4]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d5e:	e001      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d60:	40023800 	.word	0x40023800
 8004d64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d66:	f7fc fe43 	bl	80019f0 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d6e:	f7fc fe3f 	bl	80019f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	; 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e194      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d80:	4b6c      	ldr	r3, [pc, #432]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f0      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d021      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d11d      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004da0:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dae:	4b61      	ldr	r3, [pc, #388]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	019a      	lsls	r2, r3, #6
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	061b      	lsls	r3, r3, #24
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	071b      	lsls	r3, r3, #28
 8004dd4:	4957      	ldr	r1, [pc, #348]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02e      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e06:	d129      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e08:	4b4a      	ldr	r3, [pc, #296]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	0f1b      	lsrs	r3, r3, #28
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	019a      	lsls	r2, r3, #6
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	071b      	lsls	r3, r3, #28
 8004e3c:	493d      	ldr	r1, [pc, #244]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e44:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4a:	f023 021f 	bic.w	r2, r3, #31
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	3b01      	subs	r3, #1
 8004e54:	4937      	ldr	r1, [pc, #220]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01d      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e68:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e6e:	0e1b      	lsrs	r3, r3, #24
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e76:	4b2f      	ldr	r3, [pc, #188]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7c:	0f1b      	lsrs	r3, r3, #28
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	019a      	lsls	r2, r3, #6
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	431a      	orrs	r2, r3
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	061b      	lsls	r3, r3, #24
 8004e96:	431a      	orrs	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	071b      	lsls	r3, r3, #28
 8004e9c:	4925      	ldr	r1, [pc, #148]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d011      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	019a      	lsls	r2, r3, #6
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	071b      	lsls	r3, r3, #28
 8004ecc:	4919      	ldr	r1, [pc, #100]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ed4:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a16      	ldr	r2, [pc, #88]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ede:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee0:	f7fc fd86 	bl	80019f0 <HAL_GetTick>
 8004ee4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee6:	e008      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ee8:	f7fc fd82 	bl	80019f0 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b64      	cmp	r3, #100	; 0x64
 8004ef4:	d901      	bls.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e0d7      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004efa:	4b0e      	ldr	r3, [pc, #56]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f0      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	f040 80cd 	bne.w	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f1a:	f7fc fd69 	bl	80019f0 <HAL_GetTick>
 8004f1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f22:	f7fc fd65 	bl	80019f0 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b64      	cmp	r3, #100	; 0x64
 8004f2e:	d903      	bls.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e0ba      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f38:	4b5e      	ldr	r3, [pc, #376]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f44:	d0ed      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02e      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d12a      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f6e:	4b51      	ldr	r3, [pc, #324]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	0c1b      	lsrs	r3, r3, #16
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f7c:	4b4d      	ldr	r3, [pc, #308]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	0f1b      	lsrs	r3, r3, #28
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	019a      	lsls	r2, r3, #6
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	071b      	lsls	r3, r3, #28
 8004fa2:	4944      	ldr	r1, [pc, #272]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004faa:	4b42      	ldr	r3, [pc, #264]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	493d      	ldr	r1, [pc, #244]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d022      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fd8:	d11d      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fda:	4b36      	ldr	r3, [pc, #216]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe0:	0e1b      	lsrs	r3, r3, #24
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe8:	4b32      	ldr	r3, [pc, #200]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fee:	0f1b      	lsrs	r3, r3, #28
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	019a      	lsls	r2, r3, #6
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	431a      	orrs	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	4929      	ldr	r1, [pc, #164]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d028      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005022:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005028:	0e1b      	lsrs	r3, r3, #24
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005030:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	0c1b      	lsrs	r3, r3, #16
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	019a      	lsls	r2, r3, #6
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	431a      	orrs	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	071b      	lsls	r3, r3, #28
 8005056:	4917      	ldr	r1, [pc, #92]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	4911      	ldr	r1, [pc, #68]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005074:	4b0f      	ldr	r3, [pc, #60]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0e      	ldr	r2, [pc, #56]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005080:	f7fc fcb6 	bl	80019f0 <HAL_GetTick>
 8005084:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005088:	f7fc fcb2 	bl	80019f0 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b64      	cmp	r3, #100	; 0x64
 8005094:	d901      	bls.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e007      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050a6:	d1ef      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3720      	adds	r7, #32
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800

080050b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb fff0 	bl	80010c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fd30 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b01      	cmp	r3, #1
 800517a:	d001      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e054      	b.n	800522a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a26      	ldr	r2, [pc, #152]	; (8005238 <HAL_TIM_Base_Start_IT+0xd0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d022      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d01d      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a22      	ldr	r2, [pc, #136]	; (800523c <HAL_TIM_Base_Start_IT+0xd4>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d018      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_TIM_Base_Start_IT+0xd8>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d013      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1f      	ldr	r2, [pc, #124]	; (8005244 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d00e      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1e      	ldr	r2, [pc, #120]	; (8005248 <HAL_TIM_Base_Start_IT+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1c      	ldr	r2, [pc, #112]	; (800524c <HAL_TIM_Base_Start_IT+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d004      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x80>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1b      	ldr	r2, [pc, #108]	; (8005250 <HAL_TIM_Base_Start_IT+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d115      	bne.n	8005214 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	4b19      	ldr	r3, [pc, #100]	; (8005254 <HAL_TIM_Base_Start_IT+0xec>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d015      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005200:	d011      	beq.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	e008      	b.n	8005226 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e000      	b.n	8005228 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005226:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40001800 	.word	0x40001800
 8005254:	00010007 	.word	0x00010007

08005258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e049      	b.n	80052fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f841 	bl	8005306 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3304      	adds	r3, #4
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f000 fc60 	bl	8005b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d109      	bne.n	8005340 <HAL_TIM_PWM_Start+0x24>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	bf14      	ite	ne
 8005338:	2301      	movne	r3, #1
 800533a:	2300      	moveq	r3, #0
 800533c:	b2db      	uxtb	r3, r3
 800533e:	e03c      	b.n	80053ba <HAL_TIM_PWM_Start+0x9e>
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d109      	bne.n	800535a <HAL_TIM_PWM_Start+0x3e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b01      	cmp	r3, #1
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
 8005358:	e02f      	b.n	80053ba <HAL_TIM_PWM_Start+0x9e>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d109      	bne.n	8005374 <HAL_TIM_PWM_Start+0x58>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b01      	cmp	r3, #1
 800536a:	bf14      	ite	ne
 800536c:	2301      	movne	r3, #1
 800536e:	2300      	moveq	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e022      	b.n	80053ba <HAL_TIM_PWM_Start+0x9e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d109      	bne.n	800538e <HAL_TIM_PWM_Start+0x72>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	bf14      	ite	ne
 8005386:	2301      	movne	r3, #1
 8005388:	2300      	moveq	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	e015      	b.n	80053ba <HAL_TIM_PWM_Start+0x9e>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b10      	cmp	r3, #16
 8005392:	d109      	bne.n	80053a8 <HAL_TIM_PWM_Start+0x8c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b01      	cmp	r3, #1
 800539e:	bf14      	ite	ne
 80053a0:	2301      	movne	r3, #1
 80053a2:	2300      	moveq	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	e008      	b.n	80053ba <HAL_TIM_PWM_Start+0x9e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e092      	b.n	80054e8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_PWM_Start+0xb6>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053d0:	e023      	b.n	800541a <HAL_TIM_PWM_Start+0xfe>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_PWM_Start+0xc6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053e0:	e01b      	b.n	800541a <HAL_TIM_PWM_Start+0xfe>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d104      	bne.n	80053f2 <HAL_TIM_PWM_Start+0xd6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f0:	e013      	b.n	800541a <HAL_TIM_PWM_Start+0xfe>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b0c      	cmp	r3, #12
 80053f6:	d104      	bne.n	8005402 <HAL_TIM_PWM_Start+0xe6>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005400:	e00b      	b.n	800541a <HAL_TIM_PWM_Start+0xfe>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b10      	cmp	r3, #16
 8005406:	d104      	bne.n	8005412 <HAL_TIM_PWM_Start+0xf6>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005410:	e003      	b.n	800541a <HAL_TIM_PWM_Start+0xfe>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2201      	movs	r2, #1
 8005420:	6839      	ldr	r1, [r7, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f000 ff32 	bl	800628c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <HAL_TIM_PWM_Start+0x1d4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_TIM_PWM_Start+0x120>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <HAL_TIM_PWM_Start+0x1d8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d101      	bne.n	8005440 <HAL_TIM_PWM_Start+0x124>
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <HAL_TIM_PWM_Start+0x126>
 8005440:	2300      	movs	r3, #0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005454:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <HAL_TIM_PWM_Start+0x1d4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d022      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d01d      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_TIM_PWM_Start+0x1dc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d018      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a20      	ldr	r2, [pc, #128]	; (80054fc <HAL_TIM_PWM_Start+0x1e0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1f      	ldr	r2, [pc, #124]	; (8005500 <HAL_TIM_PWM_Start+0x1e4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a19      	ldr	r2, [pc, #100]	; (80054f4 <HAL_TIM_PWM_Start+0x1d8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d009      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_PWM_Start+0x1e8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d004      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x18a>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <HAL_TIM_PWM_Start+0x1ec>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d115      	bne.n	80054d2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	4b17      	ldr	r3, [pc, #92]	; (800550c <HAL_TIM_PWM_Start+0x1f0>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	d015      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1c8>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054be:	d011      	beq.n	80054e4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d0:	e008      	b.n	80054e4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f042 0201 	orr.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e000      	b.n	80054e6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40010000 	.word	0x40010000
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40014000 	.word	0x40014000
 8005508:	40001800 	.word	0x40001800
 800550c:	00010007 	.word	0x00010007

08005510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b02      	cmp	r3, #2
 8005524:	d122      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11b      	bne.n	800556c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fae4 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 fad6 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fae7 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b04      	cmp	r3, #4
 8005578:	d122      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f06f 0204 	mvn.w	r2, #4
 8005590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 faba 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
 80055ac:	e005      	b.n	80055ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 faac 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fabd 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d122      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f003 0308 	and.w	r3, r3, #8
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d11b      	bne.n	8005614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0208 	mvn.w	r2, #8
 80055e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2204      	movs	r2, #4
 80055ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fa90 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
 8005600:	e005      	b.n	800560e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa82 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fa93 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b10      	cmp	r3, #16
 8005620:	d122      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b10      	cmp	r3, #16
 800562e:	d11b      	bne.n	8005668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa66 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa58 	bl	8005b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fa69 	bl	8005b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b01      	cmp	r3, #1
 8005674:	d10e      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fb fcbc 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d10e      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d107      	bne.n	80056c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fea4 	bl	8006408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d10e      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d107      	bne.n	80056ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fe97 	bl	800641c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d10e      	bne.n	800571a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d107      	bne.n	800571a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fa17 	bl	8005b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b20      	cmp	r3, #32
 8005726:	d10e      	bne.n	8005746 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d107      	bne.n	8005746 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f06f 0220 	mvn.w	r2, #32
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fe57 	bl	80063f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0ff      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b14      	cmp	r3, #20
 800577a:	f200 80f0 	bhi.w	800595e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800577e:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057d9 	.word	0x080057d9
 8005788:	0800595f 	.word	0x0800595f
 800578c:	0800595f 	.word	0x0800595f
 8005790:	0800595f 	.word	0x0800595f
 8005794:	08005819 	.word	0x08005819
 8005798:	0800595f 	.word	0x0800595f
 800579c:	0800595f 	.word	0x0800595f
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	0800585b 	.word	0x0800585b
 80057a8:	0800595f 	.word	0x0800595f
 80057ac:	0800595f 	.word	0x0800595f
 80057b0:	0800595f 	.word	0x0800595f
 80057b4:	0800589b 	.word	0x0800589b
 80057b8:	0800595f 	.word	0x0800595f
 80057bc:	0800595f 	.word	0x0800595f
 80057c0:	0800595f 	.word	0x0800595f
 80057c4:	080058dd 	.word	0x080058dd
 80057c8:	0800595f 	.word	0x0800595f
 80057cc:	0800595f 	.word	0x0800595f
 80057d0:	0800595f 	.word	0x0800595f
 80057d4:	0800591d 	.word	0x0800591d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fa5c 	bl	8005c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
      break;
 8005816:	e0a5      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 faae 	bl	8005d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
      break;
 8005858:	e084      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fb05 	bl	8005e70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0204 	bic.w	r2, r2, #4
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
      break;
 8005898:	e064      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fb5b 	bl	8005f5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69d9      	ldr	r1, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
      break;
 80058da:	e043      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fb92 	bl	800600c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800591a:	e023      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fbc4 	bl	80060b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005936:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005946:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800595c:	e002      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
      break;
 8005962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x1c>
 8005990:	2302      	movs	r3, #2
 8005992:	e0b4      	b.n	8005afe <HAL_TIM_ConfigClockSource+0x186>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <HAL_TIM_ConfigClockSource+0x190>)
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059cc:	d03e      	beq.n	8005a4c <HAL_TIM_ConfigClockSource+0xd4>
 80059ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d2:	f200 8087 	bhi.w	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	f000 8086 	beq.w	8005aea <HAL_TIM_ConfigClockSource+0x172>
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e2:	d87f      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059e4:	2b70      	cmp	r3, #112	; 0x70
 80059e6:	d01a      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0xa6>
 80059e8:	2b70      	cmp	r3, #112	; 0x70
 80059ea:	d87b      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059ec:	2b60      	cmp	r3, #96	; 0x60
 80059ee:	d050      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0x11a>
 80059f0:	2b60      	cmp	r3, #96	; 0x60
 80059f2:	d877      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059f4:	2b50      	cmp	r3, #80	; 0x50
 80059f6:	d03c      	beq.n	8005a72 <HAL_TIM_ConfigClockSource+0xfa>
 80059f8:	2b50      	cmp	r3, #80	; 0x50
 80059fa:	d873      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d058      	beq.n	8005ab2 <HAL_TIM_ConfigClockSource+0x13a>
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d86f      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a04:	2b30      	cmp	r3, #48	; 0x30
 8005a06:	d064      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a08:	2b30      	cmp	r3, #48	; 0x30
 8005a0a:	d86b      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	d060      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d867      	bhi.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05c      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d05a      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0x15a>
 8005a1c:	e062      	b.n	8005ae4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a2e:	f000 fc0d 	bl	800624c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	609a      	str	r2, [r3, #8]
      break;
 8005a4a:	e04f      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a5c:	f000 fbf6 	bl	800624c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a6e:	609a      	str	r2, [r3, #8]
      break;
 8005a70:	e03c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f000 fb6a 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2150      	movs	r1, #80	; 0x50
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fbc3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005a90:	e02c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f000 fb89 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2160      	movs	r1, #96	; 0x60
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fbb3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005ab0:	e01c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f000 fb4a 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fba3 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005ad0:	e00c      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f000 fb9a 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005ae2:	e003      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae8:	e000      	b.n	8005aec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	fffeff88 	.word	0xfffeff88

08005b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a40      	ldr	r2, [pc, #256]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7a:	d00f      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3d      	ldr	r2, [pc, #244]	; (8005c74 <TIM_Base_SetConfig+0x118>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00b      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3c      	ldr	r2, [pc, #240]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a3b      	ldr	r2, [pc, #236]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0x40>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a3a      	ldr	r2, [pc, #232]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d108      	bne.n	8005bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2f      	ldr	r2, [pc, #188]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bbc:	d027      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	; (8005c74 <TIM_Base_SetConfig+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d023      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a2b      	ldr	r2, [pc, #172]	; (8005c78 <TIM_Base_SetConfig+0x11c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d01f      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <TIM_Base_SetConfig+0x120>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d01b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d017      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <TIM_Base_SetConfig+0x128>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d013      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <TIM_Base_SetConfig+0x12c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00f      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a26      	ldr	r2, [pc, #152]	; (8005c8c <TIM_Base_SetConfig+0x130>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00b      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a25      	ldr	r2, [pc, #148]	; (8005c90 <TIM_Base_SetConfig+0x134>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d007      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a24      	ldr	r2, [pc, #144]	; (8005c94 <TIM_Base_SetConfig+0x138>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_Base_SetConfig+0xb2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a23      	ldr	r2, [pc, #140]	; (8005c98 <TIM_Base_SetConfig+0x13c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d108      	bne.n	8005c20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <TIM_Base_SetConfig+0x114>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0xf8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	; (8005c80 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d103      	bne.n	8005c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800
 8005c7c:	40000c00 	.word	0x40000c00
 8005c80:	40010400 	.word	0x40010400
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	40001800 	.word	0x40001800
 8005c94:	40001c00 	.word	0x40001c00
 8005c98:	40002000 	.word	0x40002000

08005c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f023 0201 	bic.w	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <TIM_OC1_SetConfig+0xd8>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0303 	bic.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 0302 	bic.w	r3, r3, #2
 8005ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a21      	ldr	r2, [pc, #132]	; (8005d78 <TIM_OC1_SetConfig+0xdc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_OC1_SetConfig+0x64>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a20      	ldr	r2, [pc, #128]	; (8005d7c <TIM_OC1_SetConfig+0xe0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10c      	bne.n	8005d1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0308 	bic.w	r3, r3, #8
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 0304 	bic.w	r3, r3, #4
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a16      	ldr	r2, [pc, #88]	; (8005d78 <TIM_OC1_SetConfig+0xdc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d003      	beq.n	8005d2a <TIM_OC1_SetConfig+0x8e>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <TIM_OC1_SetConfig+0xe0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d111      	bne.n	8005d4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	621a      	str	r2, [r3, #32]
}
 8005d68:	bf00      	nop
 8005d6a:	371c      	adds	r7, #28
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	fffeff8f 	.word	0xfffeff8f
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	40010400 	.word	0x40010400

08005d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	f023 0210 	bic.w	r2, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4b2e      	ldr	r3, [pc, #184]	; (8005e64 <TIM_OC2_SetConfig+0xe4>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0320 	bic.w	r3, r3, #32
 8005dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <TIM_OC2_SetConfig+0xe8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC2_SetConfig+0x68>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <TIM_OC2_SetConfig+0xec>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10d      	bne.n	8005e04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <TIM_OC2_SetConfig+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d003      	beq.n	8005e14 <TIM_OC2_SetConfig+0x94>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <TIM_OC2_SetConfig+0xec>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d113      	bne.n	8005e3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	feff8fff 	.word	0xfeff8fff
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40010400 	.word	0x40010400

08005e70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <TIM_OC3_SetConfig+0xe0>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0303 	bic.w	r3, r3, #3
 8005ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <TIM_OC3_SetConfig+0xe4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d003      	beq.n	8005ed6 <TIM_OC3_SetConfig+0x66>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a21      	ldr	r2, [pc, #132]	; (8005f58 <TIM_OC3_SetConfig+0xe8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10d      	bne.n	8005ef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <TIM_OC3_SetConfig+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_OC3_SetConfig+0x92>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a16      	ldr	r2, [pc, #88]	; (8005f58 <TIM_OC3_SetConfig+0xe8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d113      	bne.n	8005f2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	fffeff8f 	.word	0xfffeff8f
 8005f54:	40010000 	.word	0x40010000
 8005f58:	40010400 	.word	0x40010400

08005f5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <TIM_OC4_SetConfig+0xa4>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	031b      	lsls	r3, r3, #12
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a13      	ldr	r2, [pc, #76]	; (8006004 <TIM_OC4_SetConfig+0xa8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d003      	beq.n	8005fc4 <TIM_OC4_SetConfig+0x68>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a12      	ldr	r2, [pc, #72]	; (8006008 <TIM_OC4_SetConfig+0xac>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d109      	bne.n	8005fd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	019b      	lsls	r3, r3, #6
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	feff8fff 	.word	0xfeff8fff
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400

0800600c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <TIM_OC5_SetConfig+0x98>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800604c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <TIM_OC5_SetConfig+0x9c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d003      	beq.n	800606a <TIM_OC5_SetConfig+0x5e>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a11      	ldr	r2, [pc, #68]	; (80060ac <TIM_OC5_SetConfig+0xa0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d109      	bne.n	800607e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006070:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	021b      	lsls	r3, r3, #8
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	621a      	str	r2, [r3, #32]
}
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	fffeff8f 	.word	0xfffeff8f
 80060a8:	40010000 	.word	0x40010000
 80060ac:	40010400 	.word	0x40010400

080060b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4b1c      	ldr	r3, [pc, #112]	; (800614c <TIM_OC6_SetConfig+0x9c>)
 80060dc:	4013      	ands	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	021b      	lsls	r3, r3, #8
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	051b      	lsls	r3, r3, #20
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a13      	ldr	r2, [pc, #76]	; (8006150 <TIM_OC6_SetConfig+0xa0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC6_SetConfig+0x60>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a12      	ldr	r2, [pc, #72]	; (8006154 <TIM_OC6_SetConfig+0xa4>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d109      	bne.n	8006124 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	029b      	lsls	r3, r3, #10
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	4313      	orrs	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	621a      	str	r2, [r3, #32]
}
 800613e:	bf00      	nop
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	feff8fff 	.word	0xfeff8fff
 8006150:	40010000 	.word	0x40010000
 8006154:	40010400 	.word	0x40010400

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	f023 0210 	bic.w	r2, r3, #16
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e06d      	b.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a30      	ldr	r2, [pc, #192]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800632a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a20      	ldr	r2, [pc, #128]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d022      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d01d      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a1d      	ldr	r2, [pc, #116]	; (80063e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d018      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1c      	ldr	r2, [pc, #112]	; (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1a      	ldr	r2, [pc, #104]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d00e      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a15      	ldr	r2, [pc, #84]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d009      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d004      	beq.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10c      	bne.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400
 80063e0:	40000400 	.word	0x40000400
 80063e4:	40000800 	.word	0x40000800
 80063e8:	40000c00 	.word	0x40000c00
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40001800 	.word	0x40001800

080063f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e040      	b.n	80064c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fa fec6 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2224      	movs	r2, #36	; 0x24
 800645c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f82c 	bl	80064cc <UART_SetConfig>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e022      	b.n	80064c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fa84 	bl	8006994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800649a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fb0b 	bl	8006ad8 <UART_CheckIdleState>
 80064c2:	4603      	mov	r3, r0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b088      	sub	sp, #32
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064d4:	2300      	movs	r3, #0
 80064d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4ba6      	ldr	r3, [pc, #664]	; (8006790 <UART_SetConfig+0x2c4>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	430b      	orrs	r3, r1
 8006502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a94      	ldr	r2, [pc, #592]	; (8006794 <UART_SetConfig+0x2c8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d120      	bne.n	800658a <UART_SetConfig+0xbe>
 8006548:	4b93      	ldr	r3, [pc, #588]	; (8006798 <UART_SetConfig+0x2cc>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b03      	cmp	r3, #3
 8006554:	d816      	bhi.n	8006584 <UART_SetConfig+0xb8>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0x90>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	0800656d 	.word	0x0800656d
 8006560:	08006579 	.word	0x08006579
 8006564:	08006573 	.word	0x08006573
 8006568:	0800657f 	.word	0x0800657f
 800656c:	2301      	movs	r3, #1
 800656e:	77fb      	strb	r3, [r7, #31]
 8006570:	e150      	b.n	8006814 <UART_SetConfig+0x348>
 8006572:	2302      	movs	r3, #2
 8006574:	77fb      	strb	r3, [r7, #31]
 8006576:	e14d      	b.n	8006814 <UART_SetConfig+0x348>
 8006578:	2304      	movs	r3, #4
 800657a:	77fb      	strb	r3, [r7, #31]
 800657c:	e14a      	b.n	8006814 <UART_SetConfig+0x348>
 800657e:	2308      	movs	r3, #8
 8006580:	77fb      	strb	r3, [r7, #31]
 8006582:	e147      	b.n	8006814 <UART_SetConfig+0x348>
 8006584:	2310      	movs	r3, #16
 8006586:	77fb      	strb	r3, [r7, #31]
 8006588:	e144      	b.n	8006814 <UART_SetConfig+0x348>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a83      	ldr	r2, [pc, #524]	; (800679c <UART_SetConfig+0x2d0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d132      	bne.n	80065fa <UART_SetConfig+0x12e>
 8006594:	4b80      	ldr	r3, [pc, #512]	; (8006798 <UART_SetConfig+0x2cc>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d828      	bhi.n	80065f4 <UART_SetConfig+0x128>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0xdc>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065f5 	.word	0x080065f5
 80065b0:	080065f5 	.word	0x080065f5
 80065b4:	080065f5 	.word	0x080065f5
 80065b8:	080065e9 	.word	0x080065e9
 80065bc:	080065f5 	.word	0x080065f5
 80065c0:	080065f5 	.word	0x080065f5
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	080065e3 	.word	0x080065e3
 80065cc:	080065f5 	.word	0x080065f5
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065ef 	.word	0x080065ef
 80065dc:	2300      	movs	r3, #0
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e118      	b.n	8006814 <UART_SetConfig+0x348>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e115      	b.n	8006814 <UART_SetConfig+0x348>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e112      	b.n	8006814 <UART_SetConfig+0x348>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e10f      	b.n	8006814 <UART_SetConfig+0x348>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e10c      	b.n	8006814 <UART_SetConfig+0x348>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <UART_SetConfig+0x2d4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d120      	bne.n	8006646 <UART_SetConfig+0x17a>
 8006604:	4b64      	ldr	r3, [pc, #400]	; (8006798 <UART_SetConfig+0x2cc>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800660e:	2b30      	cmp	r3, #48	; 0x30
 8006610:	d013      	beq.n	800663a <UART_SetConfig+0x16e>
 8006612:	2b30      	cmp	r3, #48	; 0x30
 8006614:	d814      	bhi.n	8006640 <UART_SetConfig+0x174>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d009      	beq.n	800662e <UART_SetConfig+0x162>
 800661a:	2b20      	cmp	r3, #32
 800661c:	d810      	bhi.n	8006640 <UART_SetConfig+0x174>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <UART_SetConfig+0x15c>
 8006622:	2b10      	cmp	r3, #16
 8006624:	d006      	beq.n	8006634 <UART_SetConfig+0x168>
 8006626:	e00b      	b.n	8006640 <UART_SetConfig+0x174>
 8006628:	2300      	movs	r3, #0
 800662a:	77fb      	strb	r3, [r7, #31]
 800662c:	e0f2      	b.n	8006814 <UART_SetConfig+0x348>
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]
 8006632:	e0ef      	b.n	8006814 <UART_SetConfig+0x348>
 8006634:	2304      	movs	r3, #4
 8006636:	77fb      	strb	r3, [r7, #31]
 8006638:	e0ec      	b.n	8006814 <UART_SetConfig+0x348>
 800663a:	2308      	movs	r3, #8
 800663c:	77fb      	strb	r3, [r7, #31]
 800663e:	e0e9      	b.n	8006814 <UART_SetConfig+0x348>
 8006640:	2310      	movs	r3, #16
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e0e6      	b.n	8006814 <UART_SetConfig+0x348>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a56      	ldr	r2, [pc, #344]	; (80067a4 <UART_SetConfig+0x2d8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d120      	bne.n	8006692 <UART_SetConfig+0x1c6>
 8006650:	4b51      	ldr	r3, [pc, #324]	; (8006798 <UART_SetConfig+0x2cc>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006656:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800665a:	2bc0      	cmp	r3, #192	; 0xc0
 800665c:	d013      	beq.n	8006686 <UART_SetConfig+0x1ba>
 800665e:	2bc0      	cmp	r3, #192	; 0xc0
 8006660:	d814      	bhi.n	800668c <UART_SetConfig+0x1c0>
 8006662:	2b80      	cmp	r3, #128	; 0x80
 8006664:	d009      	beq.n	800667a <UART_SetConfig+0x1ae>
 8006666:	2b80      	cmp	r3, #128	; 0x80
 8006668:	d810      	bhi.n	800668c <UART_SetConfig+0x1c0>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <UART_SetConfig+0x1a8>
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d006      	beq.n	8006680 <UART_SetConfig+0x1b4>
 8006672:	e00b      	b.n	800668c <UART_SetConfig+0x1c0>
 8006674:	2300      	movs	r3, #0
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	e0cc      	b.n	8006814 <UART_SetConfig+0x348>
 800667a:	2302      	movs	r3, #2
 800667c:	77fb      	strb	r3, [r7, #31]
 800667e:	e0c9      	b.n	8006814 <UART_SetConfig+0x348>
 8006680:	2304      	movs	r3, #4
 8006682:	77fb      	strb	r3, [r7, #31]
 8006684:	e0c6      	b.n	8006814 <UART_SetConfig+0x348>
 8006686:	2308      	movs	r3, #8
 8006688:	77fb      	strb	r3, [r7, #31]
 800668a:	e0c3      	b.n	8006814 <UART_SetConfig+0x348>
 800668c:	2310      	movs	r3, #16
 800668e:	77fb      	strb	r3, [r7, #31]
 8006690:	e0c0      	b.n	8006814 <UART_SetConfig+0x348>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a44      	ldr	r2, [pc, #272]	; (80067a8 <UART_SetConfig+0x2dc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d125      	bne.n	80066e8 <UART_SetConfig+0x21c>
 800669c:	4b3e      	ldr	r3, [pc, #248]	; (8006798 <UART_SetConfig+0x2cc>)
 800669e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066aa:	d017      	beq.n	80066dc <UART_SetConfig+0x210>
 80066ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b0:	d817      	bhi.n	80066e2 <UART_SetConfig+0x216>
 80066b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066b6:	d00b      	beq.n	80066d0 <UART_SetConfig+0x204>
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066bc:	d811      	bhi.n	80066e2 <UART_SetConfig+0x216>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <UART_SetConfig+0x1fe>
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	d006      	beq.n	80066d6 <UART_SetConfig+0x20a>
 80066c8:	e00b      	b.n	80066e2 <UART_SetConfig+0x216>
 80066ca:	2300      	movs	r3, #0
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e0a1      	b.n	8006814 <UART_SetConfig+0x348>
 80066d0:	2302      	movs	r3, #2
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e09e      	b.n	8006814 <UART_SetConfig+0x348>
 80066d6:	2304      	movs	r3, #4
 80066d8:	77fb      	strb	r3, [r7, #31]
 80066da:	e09b      	b.n	8006814 <UART_SetConfig+0x348>
 80066dc:	2308      	movs	r3, #8
 80066de:	77fb      	strb	r3, [r7, #31]
 80066e0:	e098      	b.n	8006814 <UART_SetConfig+0x348>
 80066e2:	2310      	movs	r3, #16
 80066e4:	77fb      	strb	r3, [r7, #31]
 80066e6:	e095      	b.n	8006814 <UART_SetConfig+0x348>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a2f      	ldr	r2, [pc, #188]	; (80067ac <UART_SetConfig+0x2e0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d125      	bne.n	800673e <UART_SetConfig+0x272>
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <UART_SetConfig+0x2cc>)
 80066f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006700:	d017      	beq.n	8006732 <UART_SetConfig+0x266>
 8006702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006706:	d817      	bhi.n	8006738 <UART_SetConfig+0x26c>
 8006708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800670c:	d00b      	beq.n	8006726 <UART_SetConfig+0x25a>
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d811      	bhi.n	8006738 <UART_SetConfig+0x26c>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <UART_SetConfig+0x254>
 8006718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x260>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x26c>
 8006720:	2301      	movs	r3, #1
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e076      	b.n	8006814 <UART_SetConfig+0x348>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e073      	b.n	8006814 <UART_SetConfig+0x348>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e070      	b.n	8006814 <UART_SetConfig+0x348>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e06d      	b.n	8006814 <UART_SetConfig+0x348>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e06a      	b.n	8006814 <UART_SetConfig+0x348>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <UART_SetConfig+0x2e4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d138      	bne.n	80067ba <UART_SetConfig+0x2ee>
 8006748:	4b13      	ldr	r3, [pc, #76]	; (8006798 <UART_SetConfig+0x2cc>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006756:	d017      	beq.n	8006788 <UART_SetConfig+0x2bc>
 8006758:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800675c:	d82a      	bhi.n	80067b4 <UART_SetConfig+0x2e8>
 800675e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006762:	d00b      	beq.n	800677c <UART_SetConfig+0x2b0>
 8006764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006768:	d824      	bhi.n	80067b4 <UART_SetConfig+0x2e8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <UART_SetConfig+0x2aa>
 800676e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006772:	d006      	beq.n	8006782 <UART_SetConfig+0x2b6>
 8006774:	e01e      	b.n	80067b4 <UART_SetConfig+0x2e8>
 8006776:	2300      	movs	r3, #0
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e04b      	b.n	8006814 <UART_SetConfig+0x348>
 800677c:	2302      	movs	r3, #2
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e048      	b.n	8006814 <UART_SetConfig+0x348>
 8006782:	2304      	movs	r3, #4
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e045      	b.n	8006814 <UART_SetConfig+0x348>
 8006788:	2308      	movs	r3, #8
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e042      	b.n	8006814 <UART_SetConfig+0x348>
 800678e:	bf00      	nop
 8006790:	efff69f3 	.word	0xefff69f3
 8006794:	40011000 	.word	0x40011000
 8006798:	40023800 	.word	0x40023800
 800679c:	40004400 	.word	0x40004400
 80067a0:	40004800 	.word	0x40004800
 80067a4:	40004c00 	.word	0x40004c00
 80067a8:	40005000 	.word	0x40005000
 80067ac:	40011400 	.word	0x40011400
 80067b0:	40007800 	.word	0x40007800
 80067b4:	2310      	movs	r3, #16
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e02c      	b.n	8006814 <UART_SetConfig+0x348>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a72      	ldr	r2, [pc, #456]	; (8006988 <UART_SetConfig+0x4bc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d125      	bne.n	8006810 <UART_SetConfig+0x344>
 80067c4:	4b71      	ldr	r3, [pc, #452]	; (800698c <UART_SetConfig+0x4c0>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80067ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067d2:	d017      	beq.n	8006804 <UART_SetConfig+0x338>
 80067d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80067d8:	d817      	bhi.n	800680a <UART_SetConfig+0x33e>
 80067da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067de:	d00b      	beq.n	80067f8 <UART_SetConfig+0x32c>
 80067e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e4:	d811      	bhi.n	800680a <UART_SetConfig+0x33e>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <UART_SetConfig+0x326>
 80067ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067ee:	d006      	beq.n	80067fe <UART_SetConfig+0x332>
 80067f0:	e00b      	b.n	800680a <UART_SetConfig+0x33e>
 80067f2:	2300      	movs	r3, #0
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e00d      	b.n	8006814 <UART_SetConfig+0x348>
 80067f8:	2302      	movs	r3, #2
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e00a      	b.n	8006814 <UART_SetConfig+0x348>
 80067fe:	2304      	movs	r3, #4
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e007      	b.n	8006814 <UART_SetConfig+0x348>
 8006804:	2308      	movs	r3, #8
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e004      	b.n	8006814 <UART_SetConfig+0x348>
 800680a:	2310      	movs	r3, #16
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e001      	b.n	8006814 <UART_SetConfig+0x348>
 8006810:	2310      	movs	r3, #16
 8006812:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800681c:	d15b      	bne.n	80068d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800681e:	7ffb      	ldrb	r3, [r7, #31]
 8006820:	2b08      	cmp	r3, #8
 8006822:	d828      	bhi.n	8006876 <UART_SetConfig+0x3aa>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x360>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	08006877 	.word	0x08006877
 800683c:	08006867 	.word	0x08006867
 8006840:	08006877 	.word	0x08006877
 8006844:	08006877 	.word	0x08006877
 8006848:	08006877 	.word	0x08006877
 800684c:	0800686f 	.word	0x0800686f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fd ffe8 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 8006854:	61b8      	str	r0, [r7, #24]
        break;
 8006856:	e013      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006858:	f7fd fff8 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 800685c:	61b8      	str	r0, [r7, #24]
        break;
 800685e:	e00f      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b4b      	ldr	r3, [pc, #300]	; (8006990 <UART_SetConfig+0x4c4>)
 8006862:	61bb      	str	r3, [r7, #24]
        break;
 8006864:	e00c      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fd fecb 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 800686a:	61b8      	str	r0, [r7, #24]
        break;
 800686c:	e008      	b.n	8006880 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006872:	61bb      	str	r3, [r7, #24]
        break;
 8006874:	e004      	b.n	8006880 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77bb      	strb	r3, [r7, #30]
        break;
 800687e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d074      	beq.n	8006970 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	005a      	lsls	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	085b      	lsrs	r3, r3, #1
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	fbb2 f3f3 	udiv	r3, r2, r3
 800689a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b0f      	cmp	r3, #15
 80068a0:	d916      	bls.n	80068d0 <UART_SetConfig+0x404>
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a8:	d212      	bcs.n	80068d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	f023 030f 	bic.w	r3, r3, #15
 80068b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	b29a      	uxth	r2, r3
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	89fa      	ldrh	r2, [r7, #14]
 80068cc:	60da      	str	r2, [r3, #12]
 80068ce:	e04f      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77bb      	strb	r3, [r7, #30]
 80068d4:	e04c      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068d6:	7ffb      	ldrb	r3, [r7, #31]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d828      	bhi.n	800692e <UART_SetConfig+0x462>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <UART_SetConfig+0x418>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006909 	.word	0x08006909
 80068e8:	08006911 	.word	0x08006911
 80068ec:	08006919 	.word	0x08006919
 80068f0:	0800692f 	.word	0x0800692f
 80068f4:	0800691f 	.word	0x0800691f
 80068f8:	0800692f 	.word	0x0800692f
 80068fc:	0800692f 	.word	0x0800692f
 8006900:	0800692f 	.word	0x0800692f
 8006904:	08006927 	.word	0x08006927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006908:	f7fd ff8c 	bl	8004824 <HAL_RCC_GetPCLK1Freq>
 800690c:	61b8      	str	r0, [r7, #24]
        break;
 800690e:	e013      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fd ff9c 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8006914:	61b8      	str	r0, [r7, #24]
        break;
 8006916:	e00f      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006918:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <UART_SetConfig+0x4c4>)
 800691a:	61bb      	str	r3, [r7, #24]
        break;
 800691c:	e00c      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800691e:	f7fd fe6f 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 8006922:	61b8      	str	r0, [r7, #24]
        break;
 8006924:	e008      	b.n	8006938 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692a:	61bb      	str	r3, [r7, #24]
        break;
 800692c:	e004      	b.n	8006938 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	77bb      	strb	r3, [r7, #30]
        break;
 8006936:	bf00      	nop
    }

    if (pclk != 0U)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d018      	beq.n	8006970 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	085a      	lsrs	r2, r3, #1
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	441a      	add	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006950:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b0f      	cmp	r3, #15
 8006956:	d909      	bls.n	800696c <UART_SetConfig+0x4a0>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d205      	bcs.n	800696c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b29a      	uxth	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60da      	str	r2, [r3, #12]
 800696a:	e001      	b.n	8006970 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800697c:	7fbb      	ldrb	r3, [r7, #30]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40007c00 	.word	0x40007c00
 800698c:	40023800 	.word	0x40023800
 8006990:	00f42400 	.word	0x00f42400

08006994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00a      	beq.n	80069be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00a      	beq.n	80069e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00a      	beq.n	8006a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f003 0308 	and.w	r3, r3, #8
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00a      	beq.n	8006a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00a      	beq.n	8006a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01a      	beq.n	8006aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a92:	d10a      	bne.n	8006aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00a      	beq.n	8006acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	605a      	str	r2, [r3, #4]
  }
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ae8:	f7fa ff82 	bl	80019f0 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0308 	and.w	r3, r3, #8
 8006af8:	2b08      	cmp	r3, #8
 8006afa:	d10e      	bne.n	8006b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f81b 	bl	8006b46 <UART_WaitOnFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e011      	b.n	8006b3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	603b      	str	r3, [r7, #0]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b56:	e0a7      	b.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	f000 80a3 	beq.w	8006ca8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b62:	f7fa ff45 	bl	80019f0 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d302      	bcc.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d13f      	bne.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b8c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e6      	bne.n	8006b78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	f023 0301 	bic.w	r3, r3, #1
 8006bc0:	663b      	str	r3, [r7, #96]	; 0x60
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bca:	64ba      	str	r2, [r7, #72]	; 0x48
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e5      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e068      	b.n	8006cca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d050      	beq.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c14:	d148      	bne.n	8006ca8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	613b      	str	r3, [r7, #16]
   return(result);
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f023 0301 	bic.w	r3, r3, #1
 8006c68:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c72:	623a      	str	r2, [r7, #32]
 8006c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	69f9      	ldr	r1, [r7, #28]
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e010      	b.n	8006cca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	69da      	ldr	r2, [r3, #28]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	bf0c      	ite	eq
 8006cb8:	2301      	moveq	r3, #1
 8006cba:	2300      	movne	r3, #0
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	79fb      	ldrb	r3, [r7, #7]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	f43f af48 	beq.w	8006b58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3770      	adds	r7, #112	; 0x70
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b084      	sub	sp, #16
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	f107 001c 	add.w	r0, r7, #28
 8006ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d120      	bne.n	8006d2e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <USB_CoreInit+0xac>)
 8006cfe:	4013      	ands	r3, r2
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d105      	bne.n	8006d22 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa96 	bl	8007254 <USB_CoreReset>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e010      	b.n	8006d50 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fa8a 	bl	8007254 <USB_CoreReset>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10b      	bne.n	8006d6e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f043 0206 	orr.w	r2, r3, #6
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f043 0220 	orr.w	r2, r3, #32
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d7a:	b004      	add	sp, #16
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	ffbdffbf 	.word	0xffbdffbf

08006d84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 0201 	bic.w	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	460b      	mov	r3, r1
 8006db0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d115      	bne.n	8006df4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68db      	ldr	r3, [r3, #12]
 8006dcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	f7fa fe17 	bl	8001a08 <HAL_Delay>
      ms++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fa29 	bl	8007238 <USB_GetMode>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d01e      	beq.n	8006e2a <USB_SetCurrentMode+0x84>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b31      	cmp	r3, #49	; 0x31
 8006df0:	d9f0      	bls.n	8006dd4 <USB_SetCurrentMode+0x2e>
 8006df2:	e01a      	b.n	8006e2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d115      	bne.n	8006e26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e06:	2001      	movs	r0, #1
 8006e08:	f7fa fdfe 	bl	8001a08 <HAL_Delay>
      ms++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa10 	bl	8007238 <USB_GetMode>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USB_SetCurrentMode+0x84>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b31      	cmp	r3, #49	; 0x31
 8006e22:	d9f0      	bls.n	8006e06 <USB_SetCurrentMode+0x60>
 8006e24:	e001      	b.n	8006e2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e005      	b.n	8006e36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b32      	cmp	r3, #50	; 0x32
 8006e2e:	d101      	bne.n	8006e34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e40:	b084      	sub	sp, #16
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	e009      	b.n	8006e74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3340      	adds	r3, #64	; 0x40
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b0e      	cmp	r3, #14
 8006e78:	d9f2      	bls.n	8006e60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d11c      	bne.n	8006eba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e8e:	f043 0302 	orr.w	r3, r3, #2
 8006e92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	e005      	b.n	8006ec6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed8:	4619      	mov	r1, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	680b      	ldr	r3, [r1, #0]
 8006ee4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10c      	bne.n	8006f06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d104      	bne.n	8006efc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f965 	bl	80071c4 <USB_SetDevSpeed>
 8006efa:	e008      	b.n	8006f0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006efc:	2101      	movs	r1, #1
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f960 	bl	80071c4 <USB_SetDevSpeed>
 8006f04:	e003      	b.n	8006f0e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f06:	2103      	movs	r1, #3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f95b 	bl	80071c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f0e:	2110      	movs	r1, #16
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8f3 	bl	80070fc <USB_FlushTxFifo>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f91f 	bl	8007164 <USB_FlushRxFifo>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	461a      	mov	r2, r3
 8006f38:	2300      	movs	r3, #0
 8006f3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f42:	461a      	mov	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	461a      	mov	r2, r3
 8006f50:	2300      	movs	r3, #0
 8006f52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e043      	b.n	8006fe2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f70:	d118      	bne.n	8006fa4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e013      	b.n	8006fb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e008      	b.n	8006fb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	015a      	lsls	r2, r3, #5
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4413      	add	r3, r2
 8006fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d3b7      	bcc.n	8006f5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fea:	2300      	movs	r3, #0
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	e043      	b.n	8007078 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007002:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007006:	d118      	bne.n	800703a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	461a      	mov	r2, r3
 800701c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	e013      	b.n	800704c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007030:	461a      	mov	r2, r3
 8007032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e008      	b.n	800704c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007046:	461a      	mov	r2, r3
 8007048:	2300      	movs	r3, #0
 800704a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	461a      	mov	r2, r3
 800706c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007070:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3301      	adds	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	429a      	cmp	r2, r3
 800707e:	d3b7      	bcc.n	8006ff0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800708e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007092:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d105      	bne.n	80070b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f043 0210 	orr.w	r2, r3, #16
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <USB_DevInit+0x2b4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d005      	beq.n	80070d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f043 0208 	orr.w	r2, r3, #8
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80070d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d105      	bne.n	80070e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <USB_DevInit+0x2b8>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	803c3800 	.word	0x803c3800
 80070f8:	40000004 	.word	0x40000004

080070fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <USB_FlushTxFifo+0x64>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e01b      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	daf2      	bge.n	800710a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	019b      	lsls	r3, r3, #6
 800712c:	f043 0220 	orr.w	r2, r3, #32
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a08      	ldr	r2, [pc, #32]	; (8007160 <USB_FlushTxFifo+0x64>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d901      	bls.n	8007146 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e006      	b.n	8007154 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b20      	cmp	r3, #32
 8007150:	d0f0      	beq.n	8007134 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	00030d40 	.word	0x00030d40

08007164 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a11      	ldr	r2, [pc, #68]	; (80071c0 <USB_FlushRxFifo+0x5c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e018      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	daf2      	bge.n	8007170 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2210      	movs	r2, #16
 8007192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <USB_FlushRxFifo+0x5c>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d901      	bls.n	80071a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e006      	b.n	80071b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d0f0      	beq.n	8007194 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr
 80071c0:	00030d40 	.word	0x00030d40

080071c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e4:	4313      	orrs	r3, r2
 80071e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3714      	adds	r7, #20
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007210:	f023 0303 	bic.w	r3, r3, #3
 8007214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007224:	f043 0302 	orr.w	r3, r3, #2
 8007228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	f003 0301 	and.w	r3, r3, #1
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4a13      	ldr	r2, [pc, #76]	; (80072b8 <USB_CoreReset+0x64>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d901      	bls.n	8007272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e01b      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	daf2      	bge.n	8007260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f043 0201 	orr.w	r2, r3, #1
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	3301      	adds	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4a09      	ldr	r2, [pc, #36]	; (80072b8 <USB_CoreReset+0x64>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d901      	bls.n	800729c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e006      	b.n	80072aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d0f0      	beq.n	800728a <USB_CoreReset+0x36>

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	00030d40 	.word	0x00030d40

080072bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b08c      	sub	sp, #48	; 0x30
 80072c0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80072c2:	2100      	movs	r1, #0
 80072c4:	2000      	movs	r0, #0
 80072c6:	f003 fdc9 	bl	800ae5c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80072ca:	4b20      	ldr	r3, [pc, #128]	; (800734c <MX_LWIP_Init+0x90>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80072d0:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <MX_LWIP_Init+0x94>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80072d6:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <MX_LWIP_Init+0x98>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80072dc:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <MX_LWIP_Init+0x9c>)
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <MX_LWIP_Init+0xa0>)
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2300      	movs	r3, #0
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	4b1a      	ldr	r3, [pc, #104]	; (8007354 <MX_LWIP_Init+0x98>)
 80072ea:	4a19      	ldr	r2, [pc, #100]	; (8007350 <MX_LWIP_Init+0x94>)
 80072ec:	4917      	ldr	r1, [pc, #92]	; (800734c <MX_LWIP_Init+0x90>)
 80072ee:	481c      	ldr	r0, [pc, #112]	; (8007360 <MX_LWIP_Init+0xa4>)
 80072f0:	f005 ff3c 	bl	800d16c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80072f4:	481a      	ldr	r0, [pc, #104]	; (8007360 <MX_LWIP_Init+0xa4>)
 80072f6:	f006 f8f3 	bl	800d4e0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80072fa:	4b19      	ldr	r3, [pc, #100]	; (8007360 <MX_LWIP_Init+0xa4>)
 80072fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d003      	beq.n	8007314 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800730c:	4814      	ldr	r0, [pc, #80]	; (8007360 <MX_LWIP_Init+0xa4>)
 800730e:	f006 f8f7 	bl	800d500 <netif_set_up>
 8007312:	e002      	b.n	800731a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007314:	4812      	ldr	r0, [pc, #72]	; (8007360 <MX_LWIP_Init+0xa4>)
 8007316:	f006 f95f 	bl	800d5d8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800731a:	4912      	ldr	r1, [pc, #72]	; (8007364 <MX_LWIP_Init+0xa8>)
 800731c:	4810      	ldr	r0, [pc, #64]	; (8007360 <MX_LWIP_Init+0xa4>)
 800731e:	f006 f9f5 	bl	800d70c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007322:	4b11      	ldr	r3, [pc, #68]	; (8007368 <MX_LWIP_Init+0xac>)
 8007324:	1d3c      	adds	r4, r7, #4
 8007326:	461d      	mov	r5, r3
 8007328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800732a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007330:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007334:	1d3b      	adds	r3, r7, #4
 8007336:	490a      	ldr	r1, [pc, #40]	; (8007360 <MX_LWIP_Init+0xa4>)
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fd43 	bl	8007dc4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800733e:	4808      	ldr	r0, [pc, #32]	; (8007360 <MX_LWIP_Init+0xa4>)
 8007340:	f00e fa4a 	bl	80157d8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007344:	bf00      	nop
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bdb0      	pop	{r4, r5, r7, pc}
 800734c:	20000b54 	.word	0x20000b54
 8007350:	20000b58 	.word	0x20000b58
 8007354:	20000b5c 	.word	0x20000b5c
 8007358:	0800ad99 	.word	0x0800ad99
 800735c:	08007865 	.word	0x08007865
 8007360:	20000b1c 	.word	0x20000b1c
 8007364:	0800736d 	.word	0x0800736d
 8007368:	0801a8d8 	.word	0x0801a8d8

0800736c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007392:	2320      	movs	r3, #32
 8007394:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007396:	f3bf 8f4f 	dsb	sy
}
 800739a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800739c:	e00b      	b.n	80073b6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800739e:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <SCB_InvalidateDCache_by_Addr+0x54>)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	dcf0      	bgt.n	800739e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80073bc:	f3bf 8f4f 	dsb	sy
}
 80073c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80073c2:	f3bf 8f6f 	isb	sy
}
 80073c6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80073c8:	bf00      	nop
 80073ca:	371c      	adds	r7, #28
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	e000ed00 	.word	0xe000ed00

080073d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80073e0:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <HAL_ETH_RxCpltCallback+0x1c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fe37 	bl	8008058 <osSemaphoreRelease>
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	200054ec 	.word	0x200054ec

080073f8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <HAL_ETH_TxCpltCallback+0x1c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fe27 	bl	8008058 <osSemaphoreRelease>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200054f0 	.word	0x200054f0

08007418 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7fb fe2f 	bl	8003084 <HAL_ETH_GetDMAError>
 8007426:	4603      	mov	r3, r0
 8007428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d104      	bne.n	800743a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007430:	4b04      	ldr	r3, [pc, #16]	; (8007444 <HAL_ETH_ErrorCallback+0x2c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fe0f 	bl	8008058 <osSemaphoreRelease>
  }
}
 800743a:	bf00      	nop
 800743c:	3708      	adds	r7, #8
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	200054ec 	.word	0x200054ec

08007448 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007448:	b5b0      	push	{r4, r5, r7, lr}
 800744a:	b0a8      	sub	sp, #160	; 0xa0
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8007462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007466:	2264      	movs	r2, #100	; 0x64
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f012 fb07 	bl	8019a7e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007470:	4b85      	ldr	r3, [pc, #532]	; (8007688 <low_level_init+0x240>)
 8007472:	4a86      	ldr	r2, [pc, #536]	; (800768c <low_level_init+0x244>)
 8007474:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8007482:	23e1      	movs	r3, #225	; 0xe1
 8007484:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8007488:	2300      	movs	r3, #0
 800748a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800749a:	4a7b      	ldr	r2, [pc, #492]	; (8007688 <low_level_init+0x240>)
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80074a2:	4b79      	ldr	r3, [pc, #484]	; (8007688 <low_level_init+0x240>)
 80074a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80074aa:	4b77      	ldr	r3, [pc, #476]	; (8007688 <low_level_init+0x240>)
 80074ac:	4a78      	ldr	r2, [pc, #480]	; (8007690 <low_level_init+0x248>)
 80074ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80074b0:	4b75      	ldr	r3, [pc, #468]	; (8007688 <low_level_init+0x240>)
 80074b2:	4a78      	ldr	r2, [pc, #480]	; (8007694 <low_level_init+0x24c>)
 80074b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80074b6:	4b74      	ldr	r3, [pc, #464]	; (8007688 <low_level_init+0x240>)
 80074b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80074bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074be:	4872      	ldr	r0, [pc, #456]	; (8007688 <low_level_init+0x240>)
 80074c0:	f7fa ffa2 	bl	8002408 <HAL_ETH_Init>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80074ca:	2238      	movs	r2, #56	; 0x38
 80074cc:	2100      	movs	r1, #0
 80074ce:	4872      	ldr	r0, [pc, #456]	; (8007698 <low_level_init+0x250>)
 80074d0:	f012 fad5 	bl	8019a7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80074d4:	4b70      	ldr	r3, [pc, #448]	; (8007698 <low_level_init+0x250>)
 80074d6:	2221      	movs	r2, #33	; 0x21
 80074d8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80074da:	4b6f      	ldr	r3, [pc, #444]	; (8007698 <low_level_init+0x250>)
 80074dc:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80074e0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80074e2:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <low_level_init+0x250>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80074e8:	486c      	ldr	r0, [pc, #432]	; (800769c <low_level_init+0x254>)
 80074ea:	f005 fcf9 	bl	800cee0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2206      	movs	r2, #6
 80074f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80074f6:	4b64      	ldr	r3, [pc, #400]	; (8007688 <low_level_init+0x240>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	781a      	ldrb	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007502:	4b61      	ldr	r3, [pc, #388]	; (8007688 <low_level_init+0x240>)
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	785a      	ldrb	r2, [r3, #1]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800750e:	4b5e      	ldr	r3, [pc, #376]	; (8007688 <low_level_init+0x240>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	789a      	ldrb	r2, [r3, #2]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800751a:	4b5b      	ldr	r3, [pc, #364]	; (8007688 <low_level_init+0x240>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	78da      	ldrb	r2, [r3, #3]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007526:	4b58      	ldr	r3, [pc, #352]	; (8007688 <low_level_init+0x240>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	791a      	ldrb	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007532:	4b55      	ldr	r3, [pc, #340]	; (8007688 <low_level_init+0x240>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	795a      	ldrb	r2, [r3, #5]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007544:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800754c:	f043 030a 	orr.w	r3, r3, #10
 8007550:	b2da      	uxtb	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8007558:	2203      	movs	r2, #3
 800755a:	2100      	movs	r1, #0
 800755c:	2001      	movs	r0, #1
 800755e:	f001 f82d 	bl	80085bc <xQueueGenericCreate>
 8007562:	4603      	mov	r3, r0
 8007564:	4a4e      	ldr	r2, [pc, #312]	; (80076a0 <low_level_init+0x258>)
 8007566:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8007568:	2203      	movs	r2, #3
 800756a:	2100      	movs	r1, #0
 800756c:	2001      	movs	r0, #1
 800756e:	f001 f825 	bl	80085bc <xQueueGenericCreate>
 8007572:	4603      	mov	r3, r0
 8007574:	4a4b      	ldr	r2, [pc, #300]	; (80076a4 <low_level_init+0x25c>)
 8007576:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007578:	4b4b      	ldr	r3, [pc, #300]	; (80076a8 <low_level_init+0x260>)
 800757a:	f107 0408 	add.w	r4, r7, #8
 800757e:	461d      	mov	r5, r3
 8007580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	4618      	mov	r0, r3
 8007594:	f000 fc16 	bl	8007dc4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007598:	4944      	ldr	r1, [pc, #272]	; (80076ac <low_level_init+0x264>)
 800759a:	4845      	ldr	r0, [pc, #276]	; (80076b0 <low_level_init+0x268>)
 800759c:	f7fa f8a5 	bl	80016ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80075a0:	4843      	ldr	r0, [pc, #268]	; (80076b0 <low_level_init+0x268>)
 80075a2:	f7fa f8d4 	bl	800174e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80075a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d165      	bne.n	800767a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80075ae:	4840      	ldr	r0, [pc, #256]	; (80076b0 <low_level_init+0x268>)
 80075b0:	f7fa f975 	bl	800189e <LAN8742_GetLinkState>
 80075b4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80075b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075bc:	2b01      	cmp	r3, #1
 80075be:	dc06      	bgt.n	80075ce <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f006 f873 	bl	800d6ac <netif_set_link_down>
      netif_set_down(netif);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f006 f806 	bl	800d5d8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80075cc:	e057      	b.n	800767e <low_level_init+0x236>
      switch (PHYLinkState)
 80075ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075d2:	3b02      	subs	r3, #2
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d82b      	bhi.n	8007630 <low_level_init+0x1e8>
 80075d8:	a201      	add	r2, pc, #4	; (adr r2, 80075e0 <low_level_init+0x198>)
 80075da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075de:	bf00      	nop
 80075e0:	080075f1 	.word	0x080075f1
 80075e4:	08007603 	.word	0x08007603
 80075e8:	08007613 	.word	0x08007613
 80075ec:	08007623 	.word	0x08007623
        duplex = ETH_FULLDUPLEX_MODE;
 80075f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80075f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007600:	e01f      	b.n	8007642 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007602:	2300      	movs	r3, #0
 8007604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800760c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007610:	e017      	b.n	8007642 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800761a:	2300      	movs	r3, #0
 800761c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007620:	e00f      	b.n	8007642 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 800762e:	e008      	b.n	8007642 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007634:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8007638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800763c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007640:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007646:	4619      	mov	r1, r3
 8007648:	480f      	ldr	r0, [pc, #60]	; (8007688 <low_level_init+0x240>)
 800764a:	f7fb fbc1 	bl	8002dd0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800764e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007652:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8007654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007658:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800765a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800765e:	4619      	mov	r1, r3
 8007660:	4809      	ldr	r0, [pc, #36]	; (8007688 <low_level_init+0x240>)
 8007662:	f7fb fc9f 	bl	8002fa4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8007666:	4808      	ldr	r0, [pc, #32]	; (8007688 <low_level_init+0x240>)
 8007668:	f7fa ff4a 	bl	8002500 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f005 ff47 	bl	800d500 <netif_set_up>
    netif_set_link_up(netif);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f005 ffe2 	bl	800d63c <netif_set_link_up>
}
 8007678:	e001      	b.n	800767e <low_level_init+0x236>
    Error_Handler();
 800767a:	f7f9 fcd6 	bl	800102a <Error_Handler>
}
 800767e:	bf00      	nop
 8007680:	37a0      	adds	r7, #160	; 0xa0
 8007682:	46bd      	mov	sp, r7
 8007684:	bdb0      	pop	{r4, r5, r7, pc}
 8007686:	bf00      	nop
 8007688:	200054f4 	.word	0x200054f4
 800768c:	40028000 	.word	0x40028000
 8007690:	2000013c 	.word	0x2000013c
 8007694:	2000009c 	.word	0x2000009c
 8007698:	200055a4 	.word	0x200055a4
 800769c:	0801dac4 	.word	0x0801dac4
 80076a0:	200054ec 	.word	0x200054ec
 80076a4:	200054f0 	.word	0x200054f0
 80076a8:	0801a8fc 	.word	0x0801a8fc
 80076ac:	20000018 	.word	0x20000018
 80076b0:	200055dc 	.word	0x200055dc

080076b4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b092      	sub	sp, #72	; 0x48
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80076cc:	f107 030c 	add.w	r3, r7, #12
 80076d0:	2230      	movs	r2, #48	; 0x30
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f012 f9d2 	bl	8019a7e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	2230      	movs	r2, #48	; 0x30
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f012 f9cb 	bl	8019a7e <memset>

  for(q = p; q != NULL; q = q->next)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	643b      	str	r3, [r7, #64]	; 0x40
 80076ec:	e045      	b.n	800777a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80076ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d902      	bls.n	80076fa <low_level_output+0x46>
      return ERR_IF;
 80076f4:	f06f 030b 	mvn.w	r3, #11
 80076f8:	e065      	b.n	80077c6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80076fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007700:	4613      	mov	r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	3348      	adds	r3, #72	; 0x48
 800770a:	443b      	add	r3, r7
 800770c:	3b3c      	subs	r3, #60	; 0x3c
 800770e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007712:	895b      	ldrh	r3, [r3, #10]
 8007714:	4619      	mov	r1, r3
 8007716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007718:	4613      	mov	r3, r2
 800771a:	005b      	lsls	r3, r3, #1
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	3348      	adds	r3, #72	; 0x48
 8007722:	443b      	add	r3, r7
 8007724:	3b38      	subs	r3, #56	; 0x38
 8007726:	6019      	str	r1, [r3, #0]

    if(i>0)
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	2b00      	cmp	r3, #0
 800772c:	d011      	beq.n	8007752 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800772e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007730:	1e5a      	subs	r2, r3, #1
 8007732:	f107 000c 	add.w	r0, r7, #12
 8007736:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007738:	460b      	mov	r3, r1
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	440b      	add	r3, r1
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	18c1      	adds	r1, r0, r3
 8007742:	4613      	mov	r3, r2
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	3348      	adds	r3, #72	; 0x48
 800774c:	443b      	add	r3, r7
 800774e:	3b34      	subs	r3, #52	; 0x34
 8007750:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d109      	bne.n	800776e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800775a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800775c:	4613      	mov	r3, r2
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	3348      	adds	r3, #72	; 0x48
 8007766:	443b      	add	r3, r7
 8007768:	3b34      	subs	r3, #52	; 0x34
 800776a:	2200      	movs	r2, #0
 800776c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800776e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007770:	3301      	adds	r3, #1
 8007772:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	643b      	str	r3, [r7, #64]	; 0x40
 800777a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1b6      	bne.n	80076ee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	891b      	ldrh	r3, [r3, #8]
 8007784:	461a      	mov	r2, r3
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <low_level_output+0x11c>)
 8007788:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800778a:	4a11      	ldr	r2, [pc, #68]	; (80077d0 <low_level_output+0x11c>)
 800778c:	f107 030c 	add.w	r3, r7, #12
 8007790:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007792:	4a0f      	ldr	r2, [pc, #60]	; (80077d0 <low_level_output+0x11c>)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8007798:	6838      	ldr	r0, [r7, #0]
 800779a:	f006 fc0b 	bl	800dfb4 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800779e:	490c      	ldr	r1, [pc, #48]	; (80077d0 <low_level_output+0x11c>)
 80077a0:	480c      	ldr	r0, [pc, #48]	; (80077d4 <low_level_output+0x120>)
 80077a2:	f7fa ffbb 	bl	800271c <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80077a6:	bf00      	nop
 80077a8:	4b0b      	ldr	r3, [pc, #44]	; (80077d8 <low_level_output+0x124>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f04f 31ff 	mov.w	r1, #4294967295
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fc03 	bl	8007fbc <osSemaphoreWait>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f5      	bne.n	80077a8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80077bc:	4805      	ldr	r0, [pc, #20]	; (80077d4 <low_level_output+0x120>)
 80077be:	f7fb f941 	bl	8002a44 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80077c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3748      	adds	r7, #72	; 0x48
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	200055a4 	.word	0x200055a4
 80077d4:	200054f4 	.word	0x200054f4
 80077d8:	200054f0 	.word	0x200054f0

080077dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <low_level_input+0x2c>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80077f0:	f107 030c 	add.w	r3, r7, #12
 80077f4:	4619      	mov	r1, r3
 80077f6:	4805      	ldr	r0, [pc, #20]	; (800780c <low_level_input+0x30>)
 80077f8:	f7fa ffec 	bl	80027d4 <HAL_ETH_ReadData>
  }

  return p;
 80077fc:	68fb      	ldr	r3, [r7, #12]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	200054e8 	.word	0x200054e8
 800780c:	200054f4 	.word	0x200054f4

08007810 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007818:	2300      	movs	r3, #0
 800781a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <ethernetif_input+0x50>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f04f 31ff 	mov.w	r1, #4294967295
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fbc7 	bl	8007fbc <osSemaphoreWait>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1f5      	bne.n	8007820 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007834:	68b8      	ldr	r0, [r7, #8]
 8007836:	f7ff ffd1 	bl	80077dc <low_level_input>
 800783a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	4798      	blx	r3
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f006 fb08 	bl	800de68 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1ea      	bne.n	8007834 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800785e:	e7df      	b.n	8007820 <ethernetif_input+0x10>
 8007860:	200054ec 	.word	0x200054ec

08007864 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <ethernetif_init+0x1c>
 8007872:	4b0e      	ldr	r3, [pc, #56]	; (80078ac <ethernetif_init+0x48>)
 8007874:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007878:	490d      	ldr	r1, [pc, #52]	; (80078b0 <ethernetif_init+0x4c>)
 800787a:	480e      	ldr	r0, [pc, #56]	; (80078b4 <ethernetif_init+0x50>)
 800787c:	f012 f89a 	bl	80199b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2273      	movs	r2, #115	; 0x73
 8007884:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2274      	movs	r2, #116	; 0x74
 800788c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <ethernetif_init+0x54>)
 8007894:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a08      	ldr	r2, [pc, #32]	; (80078bc <ethernetif_init+0x58>)
 800789a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fdd3 	bl	8007448 <low_level_init>

  return ERR_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	0801a918 	.word	0x0801a918
 80078b0:	0801a934 	.word	0x0801a934
 80078b4:	0801a944 	.word	0x0801a944
 80078b8:	080176a5 	.word	0x080176a5
 80078bc:	080076b5 	.word	0x080076b5

080078c0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	4809      	ldr	r0, [pc, #36]	; (80078f4 <pbuf_free_custom+0x34>)
 80078d0:	f005 fbf6 	bl	800d0c0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80078d4:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <pbuf_free_custom+0x38>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d107      	bne.n	80078ec <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <pbuf_free_custom+0x38>)
 80078de:	2200      	movs	r2, #0
 80078e0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80078e2:	4b06      	ldr	r3, [pc, #24]	; (80078fc <pbuf_free_custom+0x3c>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 fbb6 	bl	8008058 <osSemaphoreRelease>
  }
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	0801dac4 	.word	0x0801dac4
 80078f8:	200054e8 	.word	0x200054e8
 80078fc:	200054ec 	.word	0x200054ec

08007900 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007904:	f7fa f874 	bl	80019f0 <HAL_GetTick>
 8007908:	4603      	mov	r3, r0
}
 800790a:	4618      	mov	r0, r3
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08e      	sub	sp, #56	; 0x38
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	609a      	str	r2, [r3, #8]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a52      	ldr	r2, [pc, #328]	; (8007a78 <HAL_ETH_MspInit+0x168>)
 800792e:	4293      	cmp	r3, r2
 8007930:	f040 809e 	bne.w	8007a70 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007934:	4b51      	ldr	r3, [pc, #324]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	4a50      	ldr	r2, [pc, #320]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800793a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800793e:	6313      	str	r3, [r2, #48]	; 0x30
 8007940:	4b4e      	ldr	r3, [pc, #312]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007948:	623b      	str	r3, [r7, #32]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	4b4b      	ldr	r3, [pc, #300]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800794e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007950:	4a4a      	ldr	r2, [pc, #296]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007952:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007956:	6313      	str	r3, [r2, #48]	; 0x30
 8007958:	4b48      	ldr	r3, [pc, #288]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007960:	61fb      	str	r3, [r7, #28]
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	4b45      	ldr	r3, [pc, #276]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	4a44      	ldr	r2, [pc, #272]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800796a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800796e:	6313      	str	r3, [r2, #48]	; 0x30
 8007970:	4b42      	ldr	r3, [pc, #264]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800797c:	4b3f      	ldr	r3, [pc, #252]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	4a3e      	ldr	r2, [pc, #248]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007982:	f043 0304 	orr.w	r3, r3, #4
 8007986:	6313      	str	r3, [r2, #48]	; 0x30
 8007988:	4b3c      	ldr	r3, [pc, #240]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007994:	4b39      	ldr	r3, [pc, #228]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	4a38      	ldr	r2, [pc, #224]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6313      	str	r3, [r2, #48]	; 0x30
 80079a0:	4b36      	ldr	r3, [pc, #216]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	613b      	str	r3, [r7, #16]
 80079aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079ac:	4b33      	ldr	r3, [pc, #204]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	4a32      	ldr	r2, [pc, #200]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079b2:	f043 0302 	orr.w	r3, r3, #2
 80079b6:	6313      	str	r3, [r2, #48]	; 0x30
 80079b8:	4b30      	ldr	r3, [pc, #192]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	60fb      	str	r3, [r7, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80079c4:	4b2d      	ldr	r3, [pc, #180]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	4a2c      	ldr	r2, [pc, #176]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ce:	6313      	str	r3, [r2, #48]	; 0x30
 80079d0:	4b2a      	ldr	r3, [pc, #168]	; (8007a7c <HAL_ETH_MspInit+0x16c>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	60bb      	str	r3, [r7, #8]
 80079da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80079dc:	2332      	movs	r3, #50	; 0x32
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e0:	2302      	movs	r3, #2
 80079e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80079e8:	2303      	movs	r3, #3
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80079ec:	230b      	movs	r3, #11
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079f4:	4619      	mov	r1, r3
 80079f6:	4822      	ldr	r0, [pc, #136]	; (8007a80 <HAL_ETH_MspInit+0x170>)
 80079f8:	f7fb ff54 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80079fc:	2386      	movs	r3, #134	; 0x86
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a00:	2302      	movs	r3, #2
 8007a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a0c:	230b      	movs	r3, #11
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a14:	4619      	mov	r1, r3
 8007a16:	481b      	ldr	r0, [pc, #108]	; (8007a84 <HAL_ETH_MspInit+0x174>)
 8007a18:	f7fb ff44 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a22:	2302      	movs	r3, #2
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a2e:	230b      	movs	r3, #11
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a36:	4619      	mov	r1, r3
 8007a38:	4813      	ldr	r0, [pc, #76]	; (8007a88 <HAL_ETH_MspInit+0x178>)
 8007a3a:	f7fb ff33 	bl	80038a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007a3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a44:	2302      	movs	r3, #2
 8007a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007a50:	230b      	movs	r3, #11
 8007a52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a58:	4619      	mov	r1, r3
 8007a5a:	480c      	ldr	r0, [pc, #48]	; (8007a8c <HAL_ETH_MspInit+0x17c>)
 8007a5c:	f7fb ff22 	bl	80038a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007a60:	2200      	movs	r2, #0
 8007a62:	2105      	movs	r1, #5
 8007a64:	203d      	movs	r0, #61	; 0x3d
 8007a66:	f7fa fca5 	bl	80023b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007a6a:	203d      	movs	r0, #61	; 0x3d
 8007a6c:	f7fa fcbe 	bl	80023ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007a70:	bf00      	nop
 8007a72:	3738      	adds	r7, #56	; 0x38
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40028000 	.word	0x40028000
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	40020800 	.word	0x40020800
 8007a84:	40020000 	.word	0x40020000
 8007a88:	40020400 	.word	0x40020400
 8007a8c:	40021800 	.word	0x40021800

08007a90 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007a94:	4802      	ldr	r0, [pc, #8]	; (8007aa0 <ETH_PHY_IO_Init+0x10>)
 8007a96:	f7fb fa9f 	bl	8002fd8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	200054f4 	.word	0x200054f4

08007aa4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  return 0;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	68f9      	ldr	r1, [r7, #12]
 8007ac6:	4807      	ldr	r0, [pc, #28]	; (8007ae4 <ETH_PHY_IO_ReadReg+0x30>)
 8007ac8:	f7fb f8ee 	bl	8002ca8 <HAL_ETH_ReadPHYRegister>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	e000      	b.n	8007ada <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200054f4 	.word	0x200054f4

08007ae8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	4807      	ldr	r0, [pc, #28]	; (8007b18 <ETH_PHY_IO_WriteReg+0x30>)
 8007afc:	f7fb f91f 	bl	8002d3e <HAL_ETH_WritePHYRegister>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8007b06:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0a:	e000      	b.n	8007b0e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200054f4 	.word	0x200054f4

08007b1c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b20:	f7f9 ff66 	bl	80019f0 <HAL_GetTick>
 8007b24:	4603      	mov	r3, r0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	bd80      	pop	{r7, pc}
	...

08007b2c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b0a0      	sub	sp, #128	; 0x80
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007b34:	f107 0308 	add.w	r3, r7, #8
 8007b38:	2264      	movs	r2, #100	; 0x64
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f011 ff9e 	bl	8019a7e <memset>
  int32_t PHYLinkState = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007b4e:	2300      	movs	r3, #0
 8007b50:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007b56:	483a      	ldr	r0, [pc, #232]	; (8007c40 <ethernet_link_thread+0x114>)
 8007b58:	f7f9 fea1 	bl	800189e <LAN8742_GetLinkState>
 8007b5c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b64:	089b      	lsrs	r3, r3, #2
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00c      	beq.n	8007b8a <ethernet_link_thread+0x5e>
 8007b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	dc09      	bgt.n	8007b8a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007b76:	4833      	ldr	r0, [pc, #204]	; (8007c44 <ethernet_link_thread+0x118>)
 8007b78:	f7fa fd50 	bl	800261c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007b7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b7e:	f005 fd2b 	bl	800d5d8 <netif_set_down>
    netif_set_link_down(netif);
 8007b82:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b84:	f005 fd92 	bl	800d6ac <netif_set_link_down>
 8007b88:	e055      	b.n	8007c36 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d14e      	bne.n	8007c36 <ethernet_link_thread+0x10a>
 8007b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	dd4b      	ble.n	8007c36 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ba0:	3b02      	subs	r3, #2
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d82a      	bhi.n	8007bfc <ethernet_link_thread+0xd0>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <ethernet_link_thread+0x80>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bbd 	.word	0x08007bbd
 8007bb0:	08007bcf 	.word	0x08007bcf
 8007bb4:	08007bdf 	.word	0x08007bdf
 8007bb8:	08007bef 	.word	0x08007bef
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bc0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bc6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007bcc:	e017      	b.n	8007bfe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8007bd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bd6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007bdc:	e00f      	b.n	8007bfe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007be2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007be4:	2300      	movs	r3, #0
 8007be6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007be8:	2301      	movs	r3, #1
 8007bea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007bec:	e007      	b.n	8007bfe <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8007bfa:	e000      	b.n	8007bfe <ethernet_link_thread+0xd2>
    default:
      break;
 8007bfc:	bf00      	nop
    }

    if(linkchanged)
 8007bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d018      	beq.n	8007c36 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007c04:	f107 0308 	add.w	r3, r7, #8
 8007c08:	4619      	mov	r1, r3
 8007c0a:	480e      	ldr	r0, [pc, #56]	; (8007c44 <ethernet_link_thread+0x118>)
 8007c0c:	f7fb f8e0 	bl	8002dd0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007c10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c12:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c16:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4809      	ldr	r0, [pc, #36]	; (8007c44 <ethernet_link_thread+0x118>)
 8007c20:	f7fb f9c0 	bl	8002fa4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007c24:	4807      	ldr	r0, [pc, #28]	; (8007c44 <ethernet_link_thread+0x118>)
 8007c26:	f7fa fc6b 	bl	8002500 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007c2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c2c:	f005 fc68 	bl	800d500 <netif_set_up>
      netif_set_link_up(netif);
 8007c30:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007c32:	f005 fd03 	bl	800d63c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007c36:	2064      	movs	r0, #100	; 0x64
 8007c38:	f000 f910 	bl	8007e5c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007c3c:	e78b      	b.n	8007b56 <ethernet_link_thread+0x2a>
 8007c3e:	bf00      	nop
 8007c40:	200055dc 	.word	0x200055dc
 8007c44:	200054f4 	.word	0x200054f4

08007c48 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007c50:	4812      	ldr	r0, [pc, #72]	; (8007c9c <HAL_ETH_RxAllocateCallback+0x54>)
 8007c52:	f005 f9c1 	bl	800cfd8 <memp_malloc_pool>
 8007c56:	60f8      	str	r0, [r7, #12]
  if (p)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d014      	beq.n	8007c88 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f103 0220 	add.w	r2, r3, #32
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a0d      	ldr	r2, [pc, #52]	; (8007ca0 <HAL_ETH_RxAllocateCallback+0x58>)
 8007c6c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007c76:	9201      	str	r2, [sp, #4]
 8007c78:	9300      	str	r3, [sp, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2241      	movs	r2, #65	; 0x41
 8007c7e:	2100      	movs	r1, #0
 8007c80:	2000      	movs	r0, #0
 8007c82:	f005 ff37 	bl	800daf4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007c86:	e005      	b.n	8007c94 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	0801dac4 	.word	0x0801dac4
 8007ca0:	080078c1 	.word	0x080078c1
 8007ca4:	200054e8 	.word	0x200054e8

08007ca8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	3b20      	subs	r3, #32
 8007cc6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	887a      	ldrh	r2, [r7, #2]
 8007cd8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d103      	bne.n	8007cea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	e003      	b.n	8007cf2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	e009      	b.n	8007d14 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	891a      	ldrh	r2, [r3, #8]
 8007d04:	887b      	ldrh	r3, [r7, #2]
 8007d06:	4413      	add	r3, r2
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	61fb      	str	r3, [r7, #28]
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f2      	bne.n	8007d00 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007d1a:	887b      	ldrh	r3, [r7, #2]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fb2e 	bl	8007380 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007d24:	bf00      	nop
 8007d26:	3720      	adds	r7, #32
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f006 f897 	bl	800de68 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007d3a:	bf00      	nop
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	4603      	mov	r3, r0
 8007d4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d54:	2b84      	cmp	r3, #132	; 0x84
 8007d56:	d005      	beq.n	8007d64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4413      	add	r3, r2
 8007d60:	3303      	adds	r3, #3
 8007d62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d64:	68fb      	ldr	r3, [r7, #12]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d78:	f3ef 8305 	mrs	r3, IPSR
 8007d7c:	607b      	str	r3, [r7, #4]
  return(result);
 8007d7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007d9a:	f001 fc73 	bl	8009684 <vTaskStartScheduler>
  
  return osOK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007da8:	f7ff ffe3 	bl	8007d72 <inHandlerMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007db2:	f001 fd87 	bl	80098c4 <xTaskGetTickCountFromISR>
 8007db6:	4603      	mov	r3, r0
 8007db8:	e002      	b.n	8007dc0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007dba:	f001 fd73 	bl	80098a4 <xTaskGetTickCount>
 8007dbe:	4603      	mov	r3, r0
  }
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dc6:	b089      	sub	sp, #36	; 0x24
 8007dc8:	af04      	add	r7, sp, #16
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <osThreadCreate+0x54>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d01c      	beq.n	8007e18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685c      	ldr	r4, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	691e      	ldr	r6, [r3, #16]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7ff ffa6 	bl	8007d42 <makeFreeRtosPriority>
 8007df6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e00:	9202      	str	r2, [sp, #8]
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	9100      	str	r1, [sp, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	4632      	mov	r2, r6
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f001 fa67 	bl	80092e0 <xTaskCreateStatic>
 8007e12:	4603      	mov	r3, r0
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	e01c      	b.n	8007e52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685c      	ldr	r4, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ff88 	bl	8007d42 <makeFreeRtosPriority>
 8007e32:	4602      	mov	r2, r0
 8007e34:	f107 030c 	add.w	r3, r7, #12
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	9200      	str	r2, [sp, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	4632      	mov	r2, r6
 8007e40:	4629      	mov	r1, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	f001 faaf 	bl	80093a6 <xTaskCreate>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d001      	beq.n	8007e52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e000      	b.n	8007e54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007e52:	68fb      	ldr	r3, [r7, #12]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <osDelay+0x16>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	e000      	b.n	8007e74 <osDelay+0x18>
 8007e72:	2301      	movs	r3, #1
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fbcf 	bl	8009618 <vTaskDelay>
  
  return osOK;
 8007e7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	f000 fc21 	bl	80086e2 <xQueueCreateMutexStatic>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	e003      	b.n	8007eac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	f000 fc04 	bl	80086b2 <xQueueCreateMutex>
 8007eaa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <osMutexWait+0x18>
    return osErrorParameter;
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	e03a      	b.n	8007f42 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d103      	bne.n	8007ee0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	e009      	b.n	8007ef4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <osMutexWait+0x40>
      ticks = 1;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007ef4:	f7ff ff3d 	bl	8007d72 <inHandlerMode>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d017      	beq.n	8007f2e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	461a      	mov	r2, r3
 8007f04:	2100      	movs	r1, #0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 f83c 	bl	8008f84 <xQueueReceiveFromISR>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d001      	beq.n	8007f16 <osMutexWait+0x62>
      return osErrorOS;
 8007f12:	23ff      	movs	r3, #255	; 0xff
 8007f14:	e015      	b.n	8007f42 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d011      	beq.n	8007f40 <osMutexWait+0x8c>
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <osMutexWait+0x98>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	e008      	b.n	8007f40 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007f2e:	68f9      	ldr	r1, [r7, #12]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 ff13 	bl	8008d5c <xQueueSemaphoreTake>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d001      	beq.n	8007f40 <osMutexWait+0x8c>
    return osErrorOS;
 8007f3c:	23ff      	movs	r3, #255	; 0xff
 8007f3e:	e000      	b.n	8007f42 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007f60:	f7ff ff07 	bl	8007d72 <inHandlerMode>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d016      	beq.n	8007f98 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007f6a:	f107 0308 	add.w	r3, r7, #8
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fd77 	bl	8008a64 <xQueueGiveFromISR>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d001      	beq.n	8007f80 <osMutexRelease+0x30>
      return osErrorOS;
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	e017      	b.n	8007fb0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d013      	beq.n	8007fae <osMutexRelease+0x5e>
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <osMutexRelease+0x68>)
 8007f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	e00a      	b.n	8007fae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007f98:	2300      	movs	r3, #0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fbba 	bl	8008718 <xQueueGenericSend>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d001      	beq.n	8007fae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007faa:	23ff      	movs	r3, #255	; 0xff
 8007fac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	e000ed04 	.word	0xe000ed04

08007fbc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007fd0:	2380      	movs	r3, #128	; 0x80
 8007fd2:	e03a      	b.n	800804a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fde:	d103      	bne.n	8007fe8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e009      	b.n	8007ffc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d006      	beq.n	8007ffc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <osSemaphoreWait+0x40>
      ticks = 1;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007ffc:	f7ff feb9 	bl	8007d72 <inHandlerMode>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d017      	beq.n	8008036 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	461a      	mov	r2, r3
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 ffb8 	bl	8008f84 <xQueueReceiveFromISR>
 8008014:	4603      	mov	r3, r0
 8008016:	2b01      	cmp	r3, #1
 8008018:	d001      	beq.n	800801e <osSemaphoreWait+0x62>
      return osErrorOS;
 800801a:	23ff      	movs	r3, #255	; 0xff
 800801c:	e015      	b.n	800804a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d011      	beq.n	8008048 <osSemaphoreWait+0x8c>
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <osSemaphoreWait+0x98>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	e008      	b.n	8008048 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fe8f 	bl	8008d5c <xQueueSemaphoreTake>
 800803e:	4603      	mov	r3, r0
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008044:	23ff      	movs	r3, #255	; 0xff
 8008046:	e000      	b.n	800804a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008068:	f7ff fe83 	bl	8007d72 <inHandlerMode>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d016      	beq.n	80080a0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fcf3 	bl	8008a64 <xQueueGiveFromISR>
 800807e:	4603      	mov	r3, r0
 8008080:	2b01      	cmp	r3, #1
 8008082:	d001      	beq.n	8008088 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008084:	23ff      	movs	r3, #255	; 0xff
 8008086:	e017      	b.n	80080b8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d013      	beq.n	80080b6 <osSemaphoreRelease+0x5e>
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <osSemaphoreRelease+0x68>)
 8008090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	e00a      	b.n	80080b6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80080a0:	2300      	movs	r3, #0
 80080a2:	2200      	movs	r2, #0
 80080a4:	2100      	movs	r1, #0
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fb36 	bl	8008718 <xQueueGenericSend>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d001      	beq.n	80080b6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80080b2:	23ff      	movs	r3, #255	; 0xff
 80080b4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80080b6:	68fb      	ldr	r3, [r7, #12]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	e000ed04 	.word	0xe000ed04

080080c4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80080c4:	b590      	push	{r4, r7, lr}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d011      	beq.n	80080fa <osMessageCreate+0x36>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6859      	ldr	r1, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2400      	movs	r4, #0
 80080f0:	9400      	str	r4, [sp, #0]
 80080f2:	f000 f9e1 	bl	80084b8 <xQueueGenericCreateStatic>
 80080f6:	4603      	mov	r3, r0
 80080f8:	e008      	b.n	800810c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	4619      	mov	r1, r3
 8008106:	f000 fa59 	bl	80085bc <xQueueGenericCreate>
 800810a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	bd90      	pop	{r4, r7, pc}

08008114 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <osMessagePut+0x1e>
    ticks = 1;
 800812e:	2301      	movs	r3, #1
 8008130:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008132:	f7ff fe1e 	bl	8007d72 <inHandlerMode>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d018      	beq.n	800816e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800813c:	f107 0210 	add.w	r2, r7, #16
 8008140:	f107 0108 	add.w	r1, r7, #8
 8008144:	2300      	movs	r3, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fbec 	bl	8008924 <xQueueGenericSendFromISR>
 800814c:	4603      	mov	r3, r0
 800814e:	2b01      	cmp	r3, #1
 8008150:	d001      	beq.n	8008156 <osMessagePut+0x42>
      return osErrorOS;
 8008152:	23ff      	movs	r3, #255	; 0xff
 8008154:	e018      	b.n	8008188 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d014      	beq.n	8008186 <osMessagePut+0x72>
 800815c:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <osMessagePut+0x7c>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	e00b      	b.n	8008186 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800816e:	f107 0108 	add.w	r1, r7, #8
 8008172:	2300      	movs	r3, #0
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 face 	bl	8008718 <xQueueGenericSend>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d001      	beq.n	8008186 <osMessagePut+0x72>
      return osErrorOS;
 8008182:	23ff      	movs	r3, #255	; 0xff
 8008184:	e000      	b.n	8008188 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008186:	2300      	movs	r3, #0
}
 8008188:	4618      	mov	r0, r3
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	e000ed04 	.word	0xe000ed04

08008194 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008194:	b590      	push	{r4, r7, lr}
 8008196:	b08b      	sub	sp, #44	; 0x2c
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10a      	bne.n	80081c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80081ae:	2380      	movs	r3, #128	; 0x80
 80081b0:	617b      	str	r3, [r7, #20]
    return event;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	461c      	mov	r4, r3
 80081b6:	f107 0314 	add.w	r3, r7, #20
 80081ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081c2:	e054      	b.n	800826e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80081c8:	2300      	movs	r3, #0
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d103      	bne.n	80081dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80081d4:	f04f 33ff 	mov.w	r3, #4294967295
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
 80081da:	e009      	b.n	80081f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d006      	beq.n	80081f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <osMessageGet+0x5c>
      ticks = 1;
 80081ec:	2301      	movs	r3, #1
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80081f0:	f7ff fdbf 	bl	8007d72 <inHandlerMode>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d01c      	beq.n	8008234 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80081fa:	f107 0220 	add.w	r2, r7, #32
 80081fe:	f107 0314 	add.w	r3, r7, #20
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	68b8      	ldr	r0, [r7, #8]
 8008208:	f000 febc 	bl	8008f84 <xQueueReceiveFromISR>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d102      	bne.n	8008218 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008212:	2310      	movs	r3, #16
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	e001      	b.n	800821c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01d      	beq.n	800825e <osMessageGet+0xca>
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <osMessageGet+0xe4>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	e014      	b.n	800825e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	3304      	adds	r3, #4
 800823a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823c:	4619      	mov	r1, r3
 800823e:	68b8      	ldr	r0, [r7, #8]
 8008240:	f000 fca6 	bl	8008b90 <xQueueReceive>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d102      	bne.n	8008250 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800824a:	2310      	movs	r3, #16
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e006      	b.n	800825e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <osMessageGet+0xc6>
 8008256:	2300      	movs	r3, #0
 8008258:	e000      	b.n	800825c <osMessageGet+0xc8>
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	461c      	mov	r4, r3
 8008262:	f107 0314 	add.w	r3, r7, #20
 8008266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800826a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	372c      	adds	r7, #44	; 0x2c
 8008272:	46bd      	mov	sp, r7
 8008274:	bd90      	pop	{r4, r7, pc}
 8008276:	bf00      	nop
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f103 0208 	add.w	r2, r3, #8
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f04f 32ff 	mov.w	r2, #4294967295
 8008294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f103 0208 	add.w	r2, r3, #8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f103 0208 	add.w	r2, r3, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082d6:	b480      	push	{r7}
 80082d8:	b085      	sub	sp, #20
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689a      	ldr	r2, [r3, #8]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	3714      	adds	r7, #20
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008334:	d103      	bne.n	800833e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	60fb      	str	r3, [r7, #12]
 800833c:	e00c      	b.n	8008358 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3308      	adds	r3, #8
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e002      	b.n	800834c <vListInsert+0x2e>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	429a      	cmp	r2, r3
 8008356:	d2f6      	bcs.n	8008346 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	3714      	adds	r7, #20
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	6892      	ldr	r2, [r2, #8]
 80083a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	6852      	ldr	r2, [r2, #4]
 80083b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d103      	bne.n	80083c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	1e5a      	subs	r2, r3, #1
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10c      	bne.n	8008412 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	b672      	cpsid	i
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	b662      	cpsie	i
 800840c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008412:	f002 f8bb 	bl	800a58c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	441a      	add	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008442:	3b01      	subs	r3, #1
 8008444:	68f9      	ldr	r1, [r7, #12]
 8008446:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008448:	fb01 f303 	mul.w	r3, r1, r3
 800844c:	441a      	add	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	22ff      	movs	r2, #255	; 0xff
 800845e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d114      	bne.n	8008492 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01a      	beq.n	80084a6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3310      	adds	r3, #16
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fb75 	bl	8009b64 <xTaskRemoveFromEventList>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d012      	beq.n	80084a6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008480:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <xQueueGenericReset+0xd0>)
 8008482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008486:	601a      	str	r2, [r3, #0]
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	e009      	b.n	80084a6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3310      	adds	r3, #16
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fef0 	bl	800827c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff feeb 	bl	800827c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084a6:	f002 f8a5 	bl	800a5f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80084aa:	2301      	movs	r3, #1
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000ed04 	.word	0xe000ed04

080084b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af02      	add	r7, sp, #8
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10c      	bne.n	80084e6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	b672      	cpsid	i
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	b662      	cpsie	i
 80084e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80084e2:	bf00      	nop
 80084e4:	e7fe      	b.n	80084e4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10c      	bne.n	8008506 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	b672      	cpsid	i
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	b662      	cpsie	i
 8008500:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008502:	bf00      	nop
 8008504:	e7fe      	b.n	8008504 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <xQueueGenericCreateStatic+0x5a>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <xQueueGenericCreateStatic+0x5e>
 8008512:	2301      	movs	r3, #1
 8008514:	e000      	b.n	8008518 <xQueueGenericCreateStatic+0x60>
 8008516:	2300      	movs	r3, #0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10c      	bne.n	8008536 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	b672      	cpsid	i
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	b662      	cpsie	i
 8008530:	623b      	str	r3, [r7, #32]
}
 8008532:	bf00      	nop
 8008534:	e7fe      	b.n	8008534 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d102      	bne.n	8008542 <xQueueGenericCreateStatic+0x8a>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <xQueueGenericCreateStatic+0x8e>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <xQueueGenericCreateStatic+0x90>
 8008546:	2300      	movs	r3, #0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10c      	bne.n	8008566 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	b672      	cpsid	i
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	b662      	cpsie	i
 8008560:	61fb      	str	r3, [r7, #28]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008566:	2348      	movs	r3, #72	; 0x48
 8008568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b48      	cmp	r3, #72	; 0x48
 800856e:	d00c      	beq.n	800858a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008574:	b672      	cpsid	i
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	b662      	cpsie	i
 8008584:	61bb      	str	r3, [r7, #24]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800858a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00d      	beq.n	80085b2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	2201      	movs	r2, #1
 800859a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800859e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	4613      	mov	r3, r2
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f847 	bl	8008640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3730      	adds	r7, #48	; 0x30
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	; 0x28
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	4613      	mov	r3, r2
 80085c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10c      	bne.n	80085ea <xQueueGenericCreate+0x2e>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	b672      	cpsid	i
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	b662      	cpsie	i
 80085e4:	613b      	str	r3, [r7, #16]
}
 80085e6:	bf00      	nop
 80085e8:	e7fe      	b.n	80085e8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	e004      	b.n	8008600 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	fb02 f303 	mul.w	r3, r2, r3
 80085fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	3348      	adds	r3, #72	; 0x48
 8008604:	4618      	mov	r0, r3
 8008606:	f002 f8ed 	bl	800a7e4 <pvPortMalloc>
 800860a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d011      	beq.n	8008636 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	3348      	adds	r3, #72	; 0x48
 800861a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008624:	79fa      	ldrb	r2, [r7, #7]
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	4613      	mov	r3, r2
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f805 	bl	8008640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008636:	69bb      	ldr	r3, [r7, #24]
	}
 8008638:	4618      	mov	r0, r3
 800863a:	3720      	adds	r7, #32
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d103      	bne.n	800865c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	e002      	b.n	8008662 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800866e:	2101      	movs	r1, #1
 8008670:	69b8      	ldr	r0, [r7, #24]
 8008672:	f7ff feb7 	bl	80083e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00e      	beq.n	80086aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800869e:	2300      	movs	r3, #0
 80086a0:	2200      	movs	r2, #0
 80086a2:	2100      	movs	r1, #0
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f837 	bl	8008718 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80086aa:	bf00      	nop
 80086ac:	3708      	adds	r7, #8
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b086      	sub	sp, #24
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	4603      	mov	r3, r0
 80086ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80086bc:	2301      	movs	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	2300      	movs	r3, #0
 80086c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6939      	ldr	r1, [r7, #16]
 80086ca:	6978      	ldr	r0, [r7, #20]
 80086cc:	f7ff ff76 	bl	80085bc <xQueueGenericCreate>
 80086d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff ffd3 	bl	800867e <prvInitialiseMutex>

		return xNewQueue;
 80086d8:	68fb      	ldr	r3, [r7, #12]
	}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b088      	sub	sp, #32
 80086e6:	af02      	add	r7, sp, #8
 80086e8:	4603      	mov	r3, r0
 80086ea:	6039      	str	r1, [r7, #0]
 80086ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80086ee:	2301      	movs	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	6939      	ldr	r1, [r7, #16]
 8008700:	6978      	ldr	r0, [r7, #20]
 8008702:	f7ff fed9 	bl	80084b8 <xQueueGenericCreateStatic>
 8008706:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f7ff ffb8 	bl	800867e <prvInitialiseMutex>

		return xNewQueue;
 800870e:	68fb      	ldr	r3, [r7, #12]
	}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08e      	sub	sp, #56	; 0x38
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008726:	2300      	movs	r3, #0
 8008728:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10c      	bne.n	800874e <xQueueGenericSend+0x36>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	b672      	cpsid	i
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	b662      	cpsie	i
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d103      	bne.n	800875c <xQueueGenericSend+0x44>
 8008754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <xQueueGenericSend+0x48>
 800875c:	2301      	movs	r3, #1
 800875e:	e000      	b.n	8008762 <xQueueGenericSend+0x4a>
 8008760:	2300      	movs	r3, #0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10c      	bne.n	8008780 <xQueueGenericSend+0x68>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	b672      	cpsid	i
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	b662      	cpsie	i
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d103      	bne.n	800878e <xQueueGenericSend+0x76>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <xQueueGenericSend+0x7a>
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <xQueueGenericSend+0x7c>
 8008792:	2300      	movs	r3, #0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10c      	bne.n	80087b2 <xQueueGenericSend+0x9a>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	b672      	cpsid	i
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	b662      	cpsie	i
 80087ac:	623b      	str	r3, [r7, #32]
}
 80087ae:	bf00      	nop
 80087b0:	e7fe      	b.n	80087b0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b2:	f001 fb9b 	bl	8009eec <xTaskGetSchedulerState>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <xQueueGenericSend+0xaa>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericSend+0xae>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericSend+0xb0>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10c      	bne.n	80087e6 <xQueueGenericSend+0xce>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	b672      	cpsid	i
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	b662      	cpsie	i
 80087e0:	61fb      	str	r3, [r7, #28]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e6:	f001 fed1 	bl	800a58c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <xQueueGenericSend+0xe4>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d129      	bne.n	8008850 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f000 fc5d 	bl	80090c0 <prvCopyDataToQueue>
 8008806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d010      	beq.n	8008832 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f9a5 	bl	8009b64 <xTaskRemoveFromEventList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b3f      	ldr	r3, [pc, #252]	; (8008920 <xQueueGenericSend+0x208>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	e00a      	b.n	8008848 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008838:	4b39      	ldr	r3, [pc, #228]	; (8008920 <xQueueGenericSend+0x208>)
 800883a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008848:	f001 fed4 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 800884c:	2301      	movs	r3, #1
 800884e:	e063      	b.n	8008918 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008856:	f001 fecd 	bl	800a5f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800885a:	2300      	movs	r3, #0
 800885c:	e05c      	b.n	8008918 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	4618      	mov	r0, r3
 800886a:	f001 f9df 	bl	8009c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008872:	f001 febf 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008876:	f000 ff69 	bl	800974c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800887a:	f001 fe87 	bl	800a58c <vPortEnterCritical>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888a:	d103      	bne.n	8008894 <xQueueGenericSend+0x17c>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800889a:	b25b      	sxtb	r3, r3
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x192>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088aa:	f001 fea3 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ae:	1d3a      	adds	r2, r7, #4
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 f9ce 	bl	8009c58 <xTaskCheckForTimeOut>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d124      	bne.n	800890c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c4:	f000 fcf4 	bl	80092b0 <prvIsQueueFull>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d018      	beq.n	8008900 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	3310      	adds	r3, #16
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f91e 	bl	8009b18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088de:	f000 fc7f 	bl	80091e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088e2:	f000 ff41 	bl	8009768 <xTaskResumeAll>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f47f af7c 	bne.w	80087e6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <xQueueGenericSend+0x208>)
 80088f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	e772      	b.n	80087e6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008902:	f000 fc6d 	bl	80091e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008906:	f000 ff2f 	bl	8009768 <xTaskResumeAll>
 800890a:	e76c      	b.n	80087e6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fc67 	bl	80091e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008912:	f000 ff29 	bl	8009768 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008918:	4618      	mov	r0, r3
 800891a:	3738      	adds	r7, #56	; 0x38
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10c      	bne.n	8008956 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	b672      	cpsid	i
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	b662      	cpsie	i
 8008950:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008952:	bf00      	nop
 8008954:	e7fe      	b.n	8008954 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d103      	bne.n	8008964 <xQueueGenericSendFromISR+0x40>
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <xQueueGenericSendFromISR+0x44>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <xQueueGenericSendFromISR+0x46>
 8008968:	2300      	movs	r3, #0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10c      	bne.n	8008988 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	b672      	cpsid	i
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	b662      	cpsie	i
 8008982:	623b      	str	r3, [r7, #32]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d103      	bne.n	8008996 <xQueueGenericSendFromISR+0x72>
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d101      	bne.n	800899a <xQueueGenericSendFromISR+0x76>
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <xQueueGenericSendFromISR+0x78>
 800899a:	2300      	movs	r3, #0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10c      	bne.n	80089ba <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	b672      	cpsid	i
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	b662      	cpsie	i
 80089b4:	61fb      	str	r3, [r7, #28]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089ba:	f001 fecf 	bl	800a75c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089be:	f3ef 8211 	mrs	r2, BASEPRI
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	b672      	cpsid	i
 80089c8:	f383 8811 	msr	BASEPRI, r3
 80089cc:	f3bf 8f6f 	isb	sy
 80089d0:	f3bf 8f4f 	dsb	sy
 80089d4:	b662      	cpsie	i
 80089d6:	61ba      	str	r2, [r7, #24]
 80089d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d302      	bcc.n	80089f0 <xQueueGenericSendFromISR+0xcc>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d12c      	bne.n	8008a4a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	68b9      	ldr	r1, [r7, #8]
 80089fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a00:	f000 fb5e 	bl	80090c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d112      	bne.n	8008a34 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d016      	beq.n	8008a44 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	3324      	adds	r3, #36	; 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 f8a2 	bl	8009b64 <xTaskRemoveFromEventList>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00e      	beq.n	8008a44 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00b      	beq.n	8008a44 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e007      	b.n	8008a44 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a38:	3301      	adds	r3, #1
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	b25a      	sxtb	r2, r3
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a44:	2301      	movs	r3, #1
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a48:	e001      	b.n	8008a4e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3738      	adds	r7, #56	; 0x38
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08e      	sub	sp, #56	; 0x38
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10c      	bne.n	8008a92 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	b672      	cpsid	i
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	b662      	cpsie	i
 8008a8c:	623b      	str	r3, [r7, #32]
}
 8008a8e:	bf00      	nop
 8008a90:	e7fe      	b.n	8008a90 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00c      	beq.n	8008ab4 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	b672      	cpsid	i
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	b662      	cpsie	i
 8008aae:	61fb      	str	r3, [r7, #28]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d103      	bne.n	8008ac4 <xQueueGiveFromISR+0x60>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <xQueueGiveFromISR+0x64>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e000      	b.n	8008aca <xQueueGiveFromISR+0x66>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	b672      	cpsid	i
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	b662      	cpsie	i
 8008ae2:	61bb      	str	r3, [r7, #24]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ae8:	f001 fe38 	bl	800a75c <vPortValidateInterruptPriority>
	__asm volatile
 8008aec:	f3ef 8211 	mrs	r2, BASEPRI
 8008af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af4:	b672      	cpsid	i
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	b662      	cpsie	i
 8008b04:	617a      	str	r2, [r7, #20]
 8008b06:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008b08:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b10:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d22b      	bcs.n	8008b74 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b36:	d112      	bne.n	8008b5e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d016      	beq.n	8008b6e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	3324      	adds	r3, #36	; 0x24
 8008b44:	4618      	mov	r0, r3
 8008b46:	f001 f80d 	bl	8009b64 <xTaskRemoveFromEventList>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00e      	beq.n	8008b6e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	601a      	str	r2, [r3, #0]
 8008b5c:	e007      	b.n	8008b6e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b62:	3301      	adds	r3, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	b25a      	sxtb	r2, r3
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
 8008b72:	e001      	b.n	8008b78 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
}
 8008b82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3738      	adds	r7, #56	; 0x38
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b08c      	sub	sp, #48	; 0x30
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10c      	bne.n	8008bc4 <xQueueReceive+0x34>
	__asm volatile
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	623b      	str	r3, [r7, #32]
}
 8008bc0:	bf00      	nop
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d103      	bne.n	8008bd2 <xQueueReceive+0x42>
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d101      	bne.n	8008bd6 <xQueueReceive+0x46>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e000      	b.n	8008bd8 <xQueueReceive+0x48>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10c      	bne.n	8008bf6 <xQueueReceive+0x66>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	b672      	cpsid	i
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	b662      	cpsie	i
 8008bf0:	61fb      	str	r3, [r7, #28]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bf6:	f001 f979 	bl	8009eec <xTaskGetSchedulerState>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <xQueueReceive+0x76>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <xQueueReceive+0x7a>
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <xQueueReceive+0x7c>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10c      	bne.n	8008c2a <xQueueReceive+0x9a>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	b672      	cpsid	i
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	b662      	cpsie	i
 8008c24:	61bb      	str	r3, [r7, #24]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c2a:	f001 fcaf 	bl	800a58c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d01f      	beq.n	8008c7a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c3a:	68b9      	ldr	r1, [r7, #8]
 8008c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c3e:	f000 faa9 	bl	8009194 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	1e5a      	subs	r2, r3, #1
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00f      	beq.n	8008c72 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	3310      	adds	r3, #16
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 ff84 	bl	8009b64 <xTaskRemoveFromEventList>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d007      	beq.n	8008c72 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c62:	4b3d      	ldr	r3, [pc, #244]	; (8008d58 <xQueueReceive+0x1c8>)
 8008c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c72:	f001 fcbf 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e069      	b.n	8008d4e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c80:	f001 fcb8 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e062      	b.n	8008d4e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c8e:	f107 0310 	add.w	r3, r7, #16
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 ffca 	bl	8009c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c9c:	f001 fcaa 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ca0:	f000 fd54 	bl	800974c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ca4:	f001 fc72 	bl	800a58c <vPortEnterCritical>
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb4:	d103      	bne.n	8008cbe <xQueueReceive+0x12e>
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d103      	bne.n	8008cd4 <xQueueReceive+0x144>
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cd4:	f001 fc8e 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cd8:	1d3a      	adds	r2, r7, #4
 8008cda:	f107 0310 	add.w	r3, r7, #16
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 ffb9 	bl	8009c58 <xTaskCheckForTimeOut>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d123      	bne.n	8008d34 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cee:	f000 fac9 	bl	8009284 <prvIsQueueEmpty>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d017      	beq.n	8008d28 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	3324      	adds	r3, #36	; 0x24
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 ff09 	bl	8009b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d08:	f000 fa6a 	bl	80091e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d0c:	f000 fd2c 	bl	8009768 <xTaskResumeAll>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d189      	bne.n	8008c2a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008d16:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <xQueueReceive+0x1c8>)
 8008d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	e780      	b.n	8008c2a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d2a:	f000 fa59 	bl	80091e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d2e:	f000 fd1b 	bl	8009768 <xTaskResumeAll>
 8008d32:	e77a      	b.n	8008c2a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d36:	f000 fa53 	bl	80091e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d3a:	f000 fd15 	bl	8009768 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d40:	f000 faa0 	bl	8009284 <prvIsQueueEmpty>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f43f af6f 	beq.w	8008c2a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3730      	adds	r7, #48	; 0x30
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	e000ed04 	.word	0xe000ed04

08008d5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08e      	sub	sp, #56	; 0x38
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10c      	bne.n	8008d92 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	b672      	cpsid	i
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	b662      	cpsie	i
 8008d8c:	623b      	str	r3, [r7, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00c      	beq.n	8008db4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	b672      	cpsid	i
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	b662      	cpsie	i
 8008dae:	61fb      	str	r3, [r7, #28]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008db4:	f001 f89a 	bl	8009eec <xTaskGetSchedulerState>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <xQueueSemaphoreTake+0x68>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <xQueueSemaphoreTake+0x6c>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <xQueueSemaphoreTake+0x6e>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10c      	bne.n	8008de8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	b672      	cpsid	i
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	b662      	cpsie	i
 8008de2:	61bb      	str	r3, [r7, #24]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008de8:	f001 fbd0 	bl	800a58c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d024      	beq.n	8008e42 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	1e5a      	subs	r2, r3, #1
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e08:	f001 fa36 	bl	800a278 <pvTaskIncrementMutexHeldCount>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00f      	beq.n	8008e3a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	3310      	adds	r3, #16
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 fea0 	bl	8009b64 <xTaskRemoveFromEventList>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d007      	beq.n	8008e3a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e2a:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <xQueueSemaphoreTake+0x224>)
 8008e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	f3bf 8f4f 	dsb	sy
 8008e36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e3a:	f001 fbdb 	bl	800a5f4 <vPortExitCritical>
				return pdPASS;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e099      	b.n	8008f76 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d113      	bne.n	8008e70 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00c      	beq.n	8008e68 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	b672      	cpsid	i
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	b662      	cpsie	i
 8008e62:	617b      	str	r3, [r7, #20]
}
 8008e64:	bf00      	nop
 8008e66:	e7fe      	b.n	8008e66 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e68:	f001 fbc4 	bl	800a5f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e082      	b.n	8008f76 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fed6 	bl	8009c2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e84:	f001 fbb6 	bl	800a5f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e88:	f000 fc60 	bl	800974c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e8c:	f001 fb7e 	bl	800a58c <vPortEnterCritical>
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9c:	d103      	bne.n	8008ea6 <xQueueSemaphoreTake+0x14a>
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d103      	bne.n	8008ebc <xQueueSemaphoreTake+0x160>
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ebc:	f001 fb9a 	bl	800a5f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ec0:	463a      	mov	r2, r7
 8008ec2:	f107 030c 	add.w	r3, r7, #12
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fec5 	bl	8009c58 <xTaskCheckForTimeOut>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d132      	bne.n	8008f3a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed6:	f000 f9d5 	bl	8009284 <prvIsQueueEmpty>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d026      	beq.n	8008f2e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d109      	bne.n	8008efc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008ee8:	f001 fb50 	bl	800a58c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 f819 	bl	8009f28 <xTaskPriorityInherit>
 8008ef6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008ef8:	f001 fb7c 	bl	800a5f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efe:	3324      	adds	r3, #36	; 0x24
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	4611      	mov	r1, r2
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fe07 	bl	8009b18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f0c:	f000 f968 	bl	80091e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f10:	f000 fc2a 	bl	8009768 <xTaskResumeAll>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f47f af66 	bne.w	8008de8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008f1c:	4b18      	ldr	r3, [pc, #96]	; (8008f80 <xQueueSemaphoreTake+0x224>)
 8008f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f22:	601a      	str	r2, [r3, #0]
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	e75c      	b.n	8008de8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f30:	f000 f956 	bl	80091e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f34:	f000 fc18 	bl	8009768 <xTaskResumeAll>
 8008f38:	e756      	b.n	8008de8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f3c:	f000 f950 	bl	80091e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f40:	f000 fc12 	bl	8009768 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f46:	f000 f99d 	bl	8009284 <prvIsQueueEmpty>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f43f af4b 	beq.w	8008de8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00d      	beq.n	8008f74 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008f58:	f001 fb18 	bl	800a58c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f5e:	f000 f897 	bl	8009090 <prvGetDisinheritPriorityAfterTimeout>
 8008f62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 f8e6 	bl	800a13c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f70:	f001 fb40 	bl	800a5f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3738      	adds	r7, #56	; 0x38
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	e000ed04 	.word	0xe000ed04

08008f84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08e      	sub	sp, #56	; 0x38
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	b672      	cpsid	i
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	b662      	cpsie	i
 8008fae:	623b      	str	r3, [r7, #32]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <xQueueReceiveFromISR+0x3e>
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <xQueueReceiveFromISR+0x42>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <xQueueReceiveFromISR+0x44>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10c      	bne.n	8008fe6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	b672      	cpsid	i
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	b662      	cpsie	i
 8008fe0:	61fb      	str	r3, [r7, #28]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fe6:	f001 fbb9 	bl	800a75c <vPortValidateInterruptPriority>
	__asm volatile
 8008fea:	f3ef 8211 	mrs	r2, BASEPRI
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	61ba      	str	r2, [r7, #24]
 8009004:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009006:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	d02f      	beq.n	8009076 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800901c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009020:	68b9      	ldr	r1, [r7, #8]
 8009022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009024:	f000 f8b6 	bl	8009194 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902a:	1e5a      	subs	r2, r3, #1
 800902c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009030:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009038:	d112      	bne.n	8009060 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800903a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d016      	beq.n	8009070 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	3310      	adds	r3, #16
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fd8c 	bl	8009b64 <xTaskRemoveFromEventList>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00e      	beq.n	8009070 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e007      	b.n	8009070 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009064:	3301      	adds	r3, #1
 8009066:	b2db      	uxtb	r3, r3
 8009068:	b25a      	sxtb	r2, r3
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009070:	2301      	movs	r3, #1
 8009072:	637b      	str	r3, [r7, #52]	; 0x34
 8009074:	e001      	b.n	800907a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009076:	2300      	movs	r3, #0
 8009078:	637b      	str	r3, [r7, #52]	; 0x34
 800907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	f383 8811 	msr	BASEPRI, r3
}
 8009084:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009088:	4618      	mov	r0, r3
 800908a:	3738      	adds	r7, #56	; 0x38
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d006      	beq.n	80090ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f1c3 0307 	rsb	r3, r3, #7
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	e001      	b.n	80090b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090b2:	68fb      	ldr	r3, [r7, #12]
	}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3714      	adds	r7, #20
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10d      	bne.n	80090fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d14d      	bne.n	8009182 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 ff9c 	bl	800a028 <xTaskPriorityDisinherit>
 80090f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	e043      	b.n	8009182 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d119      	bne.n	8009134 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6858      	ldr	r0, [r3, #4]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	461a      	mov	r2, r3
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	f010 fd58 	bl	8019bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	441a      	add	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	d32b      	bcc.n	8009182 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	e026      	b.n	8009182 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68d8      	ldr	r0, [r3, #12]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	461a      	mov	r2, r3
 800913e:	68b9      	ldr	r1, [r7, #8]
 8009140:	f010 fd3e 	bl	8019bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	425b      	negs	r3, r3
 800914e:	441a      	add	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	429a      	cmp	r2, r3
 800915e:	d207      	bcs.n	8009170 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009168:	425b      	negs	r3, r3
 800916a:	441a      	add	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d105      	bne.n	8009182 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	3b01      	subs	r3, #1
 8009180:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	1c5a      	adds	r2, r3, #1
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800918a:	697b      	ldr	r3, [r7, #20]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d018      	beq.n	80091d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	441a      	add	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68da      	ldr	r2, [r3, #12]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d303      	bcc.n	80091c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68d9      	ldr	r1, [r3, #12]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	461a      	mov	r2, r3
 80091d2:	6838      	ldr	r0, [r7, #0]
 80091d4:	f010 fcf4 	bl	8019bc0 <memcpy>
	}
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091e8:	f001 f9d0 	bl	800a58c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f4:	e011      	b.n	800921a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d012      	beq.n	8009224 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	3324      	adds	r3, #36	; 0x24
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fcae 	bl	8009b64 <xTaskRemoveFromEventList>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800920e:	f000 fd89 	bl	8009d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	3b01      	subs	r3, #1
 8009216:	b2db      	uxtb	r3, r3
 8009218:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800921a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800921e:	2b00      	cmp	r3, #0
 8009220:	dce9      	bgt.n	80091f6 <prvUnlockQueue+0x16>
 8009222:	e000      	b.n	8009226 <prvUnlockQueue+0x46>
					break;
 8009224:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	22ff      	movs	r2, #255	; 0xff
 800922a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800922e:	f001 f9e1 	bl	800a5f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009232:	f001 f9ab 	bl	800a58c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800923c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800923e:	e011      	b.n	8009264 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3310      	adds	r3, #16
 800924c:	4618      	mov	r0, r3
 800924e:	f000 fc89 	bl	8009b64 <xTaskRemoveFromEventList>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009258:	f000 fd64 	bl	8009d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	3b01      	subs	r3, #1
 8009260:	b2db      	uxtb	r3, r3
 8009262:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009268:	2b00      	cmp	r3, #0
 800926a:	dce9      	bgt.n	8009240 <prvUnlockQueue+0x60>
 800926c:	e000      	b.n	8009270 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800926e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	22ff      	movs	r2, #255	; 0xff
 8009274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009278:	f001 f9bc 	bl	800a5f4 <vPortExitCritical>
}
 800927c:	bf00      	nop
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800928c:	f001 f97e 	bl	800a58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009298:	2301      	movs	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e001      	b.n	80092a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800929e:	2300      	movs	r3, #0
 80092a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092a2:	f001 f9a7 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 80092a6:	68fb      	ldr	r3, [r7, #12]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092b8:	f001 f968 	bl	800a58c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d102      	bne.n	80092ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092c8:	2301      	movs	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	e001      	b.n	80092d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092d2:	f001 f98f 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 80092d6:	68fb      	ldr	r3, [r7, #12]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08e      	sub	sp, #56	; 0x38
 80092e4:	af04      	add	r7, sp, #16
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
 80092ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d10c      	bne.n	800930e <xTaskCreateStatic+0x2e>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	b672      	cpsid	i
 80092fa:	f383 8811 	msr	BASEPRI, r3
 80092fe:	f3bf 8f6f 	isb	sy
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	b662      	cpsie	i
 8009308:	623b      	str	r3, [r7, #32]
}
 800930a:	bf00      	nop
 800930c:	e7fe      	b.n	800930c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800930e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10c      	bne.n	800932e <xTaskCreateStatic+0x4e>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	61fb      	str	r3, [r7, #28]
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800932e:	2354      	movs	r3, #84	; 0x54
 8009330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	2b54      	cmp	r3, #84	; 0x54
 8009336:	d00c      	beq.n	8009352 <xTaskCreateStatic+0x72>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	b672      	cpsid	i
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	b662      	cpsie	i
 800934c:	61bb      	str	r3, [r7, #24]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009352:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01e      	beq.n	8009398 <xTaskCreateStatic+0xb8>
 800935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935c:	2b00      	cmp	r3, #0
 800935e:	d01b      	beq.n	8009398 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009368:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	2202      	movs	r2, #2
 800936e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009372:	2300      	movs	r3, #0
 8009374:	9303      	str	r3, [sp, #12]
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	9302      	str	r3, [sp, #8]
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f850 	bl	8009430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009392:	f000 f8d7 	bl	8009544 <prvAddNewTaskToReadyList>
 8009396:	e001      	b.n	800939c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009398:	2300      	movs	r3, #0
 800939a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800939c:	697b      	ldr	r3, [r7, #20]
	}
 800939e:	4618      	mov	r0, r3
 80093a0:	3728      	adds	r7, #40	; 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b08c      	sub	sp, #48	; 0x30
 80093aa:	af04      	add	r7, sp, #16
 80093ac:	60f8      	str	r0, [r7, #12]
 80093ae:	60b9      	str	r1, [r7, #8]
 80093b0:	603b      	str	r3, [r7, #0]
 80093b2:	4613      	mov	r3, r2
 80093b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fa12 	bl	800a7e4 <pvPortMalloc>
 80093c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00e      	beq.n	80093e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093c8:	2054      	movs	r0, #84	; 0x54
 80093ca:	f001 fa0b 	bl	800a7e4 <pvPortMalloc>
 80093ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	631a      	str	r2, [r3, #48]	; 0x30
 80093dc:	e005      	b.n	80093ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093de:	6978      	ldr	r0, [r7, #20]
 80093e0:	f001 faca 	bl	800a978 <vPortFree>
 80093e4:	e001      	b.n	80093ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093e6:	2300      	movs	r3, #0
 80093e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d017      	beq.n	8009420 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093f8:	88fa      	ldrh	r2, [r7, #6]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9303      	str	r3, [sp, #12]
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	9302      	str	r3, [sp, #8]
 8009402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f80e 	bl	8009430 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009414:	69f8      	ldr	r0, [r7, #28]
 8009416:	f000 f895 	bl	8009544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800941a:	2301      	movs	r3, #1
 800941c:	61bb      	str	r3, [r7, #24]
 800941e:	e002      	b.n	8009426 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009420:	f04f 33ff 	mov.w	r3, #4294967295
 8009424:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009426:	69bb      	ldr	r3, [r7, #24]
	}
 8009428:	4618      	mov	r0, r3
 800942a:	3720      	adds	r7, #32
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009448:	440b      	add	r3, r1
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	4413      	add	r3, r2
 800944e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	f023 0307 	bic.w	r3, r3, #7
 8009456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00c      	beq.n	800947c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	b672      	cpsid	i
 8009468:	f383 8811 	msr	BASEPRI, r3
 800946c:	f3bf 8f6f 	isb	sy
 8009470:	f3bf 8f4f 	dsb	sy
 8009474:	b662      	cpsie	i
 8009476:	617b      	str	r3, [r7, #20]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01f      	beq.n	80094c2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	e012      	b.n	80094ae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	4413      	add	r3, r2
 800948e:	7819      	ldrb	r1, [r3, #0]
 8009490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	4413      	add	r3, r2
 8009496:	3334      	adds	r3, #52	; 0x34
 8009498:	460a      	mov	r2, r1
 800949a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	4413      	add	r3, r2
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	3301      	adds	r3, #1
 80094ac:	61fb      	str	r3, [r7, #28]
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	2b0f      	cmp	r3, #15
 80094b2:	d9e9      	bls.n	8009488 <prvInitialiseNewTask+0x58>
 80094b4:	e000      	b.n	80094b8 <prvInitialiseNewTask+0x88>
			{
				break;
 80094b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094c0:	e003      	b.n	80094ca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	2b06      	cmp	r3, #6
 80094ce:	d901      	bls.n	80094d4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094d0:	2306      	movs	r3, #6
 80094d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80094e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e2:	2200      	movs	r2, #0
 80094e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	3304      	adds	r3, #4
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fe fee6 	bl	80082bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f2:	3318      	adds	r3, #24
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fe fee1 	bl	80082bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	f1c3 0207 	rsb	r2, r3, #7
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800950e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	2200      	movs	r2, #0
 8009514:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	68f9      	ldr	r1, [r7, #12]
 8009522:	69b8      	ldr	r0, [r7, #24]
 8009524:	f000 ff22 	bl	800a36c <pxPortInitialiseStack>
 8009528:	4602      	mov	r2, r0
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009538:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800953a:	bf00      	nop
 800953c:	3720      	adds	r7, #32
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800954c:	f001 f81e 	bl	800a58c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009550:	4b2a      	ldr	r3, [pc, #168]	; (80095fc <prvAddNewTaskToReadyList+0xb8>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	3301      	adds	r3, #1
 8009556:	4a29      	ldr	r2, [pc, #164]	; (80095fc <prvAddNewTaskToReadyList+0xb8>)
 8009558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800955a:	4b29      	ldr	r3, [pc, #164]	; (8009600 <prvAddNewTaskToReadyList+0xbc>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d109      	bne.n	8009576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009562:	4a27      	ldr	r2, [pc, #156]	; (8009600 <prvAddNewTaskToReadyList+0xbc>)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009568:	4b24      	ldr	r3, [pc, #144]	; (80095fc <prvAddNewTaskToReadyList+0xb8>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d110      	bne.n	8009592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009570:	f000 fbfc 	bl	8009d6c <prvInitialiseTaskLists>
 8009574:	e00d      	b.n	8009592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009576:	4b23      	ldr	r3, [pc, #140]	; (8009604 <prvAddNewTaskToReadyList+0xc0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800957e:	4b20      	ldr	r3, [pc, #128]	; (8009600 <prvAddNewTaskToReadyList+0xbc>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	429a      	cmp	r2, r3
 800958a:	d802      	bhi.n	8009592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <prvAddNewTaskToReadyList+0xbc>)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009592:	4b1d      	ldr	r3, [pc, #116]	; (8009608 <prvAddNewTaskToReadyList+0xc4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3301      	adds	r3, #1
 8009598:	4a1b      	ldr	r2, [pc, #108]	; (8009608 <prvAddNewTaskToReadyList+0xc4>)
 800959a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	2201      	movs	r2, #1
 80095a2:	409a      	lsls	r2, r3
 80095a4:	4b19      	ldr	r3, [pc, #100]	; (800960c <prvAddNewTaskToReadyList+0xc8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	4a18      	ldr	r2, [pc, #96]	; (800960c <prvAddNewTaskToReadyList+0xc8>)
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	4613      	mov	r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4a15      	ldr	r2, [pc, #84]	; (8009610 <prvAddNewTaskToReadyList+0xcc>)
 80095bc:	441a      	add	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f7fe fe86 	bl	80082d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095ca:	f001 f813 	bl	800a5f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095ce:	4b0d      	ldr	r3, [pc, #52]	; (8009604 <prvAddNewTaskToReadyList+0xc0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00e      	beq.n	80095f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095d6:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <prvAddNewTaskToReadyList+0xbc>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d207      	bcs.n	80095f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095e4:	4b0b      	ldr	r3, [pc, #44]	; (8009614 <prvAddNewTaskToReadyList+0xd0>)
 80095e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	200056fc 	.word	0x200056fc
 8009600:	200055fc 	.word	0x200055fc
 8009604:	20005708 	.word	0x20005708
 8009608:	20005718 	.word	0x20005718
 800960c:	20005704 	.word	0x20005704
 8009610:	20005600 	.word	0x20005600
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d019      	beq.n	800965e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800962a:	4b14      	ldr	r3, [pc, #80]	; (800967c <vTaskDelay+0x64>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00c      	beq.n	800964c <vTaskDelay+0x34>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	b672      	cpsid	i
 8009638:	f383 8811 	msr	BASEPRI, r3
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	b662      	cpsie	i
 8009646:	60bb      	str	r3, [r7, #8]
}
 8009648:	bf00      	nop
 800964a:	e7fe      	b.n	800964a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800964c:	f000 f87e 	bl	800974c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fe24 	bl	800a2a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009658:	f000 f886 	bl	8009768 <xTaskResumeAll>
 800965c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d107      	bne.n	8009674 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <vTaskDelay+0x68>)
 8009666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966a:	601a      	str	r2, [r3, #0]
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20005724 	.word	0x20005724
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009692:	463a      	mov	r2, r7
 8009694:	1d39      	adds	r1, r7, #4
 8009696:	f107 0308 	add.w	r3, r7, #8
 800969a:	4618      	mov	r0, r3
 800969c:	f7f6 ff9e 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	9202      	str	r2, [sp, #8]
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	2300      	movs	r3, #0
 80096b0:	460a      	mov	r2, r1
 80096b2:	4920      	ldr	r1, [pc, #128]	; (8009734 <vTaskStartScheduler+0xb0>)
 80096b4:	4820      	ldr	r0, [pc, #128]	; (8009738 <vTaskStartScheduler+0xb4>)
 80096b6:	f7ff fe13 	bl	80092e0 <xTaskCreateStatic>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4a1f      	ldr	r2, [pc, #124]	; (800973c <vTaskStartScheduler+0xb8>)
 80096be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096c0:	4b1e      	ldr	r3, [pc, #120]	; (800973c <vTaskStartScheduler+0xb8>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e001      	b.n	80096d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d118      	bne.n	800970a <vTaskStartScheduler+0x86>
	__asm volatile
 80096d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096dc:	b672      	cpsid	i
 80096de:	f383 8811 	msr	BASEPRI, r3
 80096e2:	f3bf 8f6f 	isb	sy
 80096e6:	f3bf 8f4f 	dsb	sy
 80096ea:	b662      	cpsie	i
 80096ec:	613b      	str	r3, [r7, #16]
}
 80096ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096f0:	4b13      	ldr	r3, [pc, #76]	; (8009740 <vTaskStartScheduler+0xbc>)
 80096f2:	f04f 32ff 	mov.w	r2, #4294967295
 80096f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096f8:	4b12      	ldr	r3, [pc, #72]	; (8009744 <vTaskStartScheduler+0xc0>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096fe:	4b12      	ldr	r3, [pc, #72]	; (8009748 <vTaskStartScheduler+0xc4>)
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009704:	f000 fec4 	bl	800a490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009708:	e010      	b.n	800972c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009710:	d10c      	bne.n	800972c <vTaskStartScheduler+0xa8>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	b672      	cpsid	i
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	b662      	cpsie	i
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <vTaskStartScheduler+0xa6>
}
 800972c:	bf00      	nop
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	0801a96c 	.word	0x0801a96c
 8009738:	08009d3d 	.word	0x08009d3d
 800973c:	20005720 	.word	0x20005720
 8009740:	2000571c 	.word	0x2000571c
 8009744:	20005708 	.word	0x20005708
 8009748:	20005700 	.word	0x20005700

0800974c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009750:	4b04      	ldr	r3, [pc, #16]	; (8009764 <vTaskSuspendAll+0x18>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	4a03      	ldr	r2, [pc, #12]	; (8009764 <vTaskSuspendAll+0x18>)
 8009758:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800975a:	bf00      	nop
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr
 8009764:	20005724 	.word	0x20005724

08009768 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009772:	2300      	movs	r3, #0
 8009774:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009776:	4b42      	ldr	r3, [pc, #264]	; (8009880 <xTaskResumeAll+0x118>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10c      	bne.n	8009798 <xTaskResumeAll+0x30>
	__asm volatile
 800977e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009782:	b672      	cpsid	i
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	b662      	cpsie	i
 8009792:	603b      	str	r3, [r7, #0]
}
 8009794:	bf00      	nop
 8009796:	e7fe      	b.n	8009796 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009798:	f000 fef8 	bl	800a58c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800979c:	4b38      	ldr	r3, [pc, #224]	; (8009880 <xTaskResumeAll+0x118>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	4a37      	ldr	r2, [pc, #220]	; (8009880 <xTaskResumeAll+0x118>)
 80097a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a6:	4b36      	ldr	r3, [pc, #216]	; (8009880 <xTaskResumeAll+0x118>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d161      	bne.n	8009872 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097ae:	4b35      	ldr	r3, [pc, #212]	; (8009884 <xTaskResumeAll+0x11c>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d05d      	beq.n	8009872 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097b6:	e02e      	b.n	8009816 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b8:	4b33      	ldr	r3, [pc, #204]	; (8009888 <xTaskResumeAll+0x120>)
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3318      	adds	r3, #24
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fde3 	bl	8008390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3304      	adds	r3, #4
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7fe fdde 	bl	8008390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	2201      	movs	r2, #1
 80097da:	409a      	lsls	r2, r3
 80097dc:	4b2b      	ldr	r3, [pc, #172]	; (800988c <xTaskResumeAll+0x124>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	4a2a      	ldr	r2, [pc, #168]	; (800988c <xTaskResumeAll+0x124>)
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ea:	4613      	mov	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4a27      	ldr	r2, [pc, #156]	; (8009890 <xTaskResumeAll+0x128>)
 80097f4:	441a      	add	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f7fe fd6a 	bl	80082d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	4b23      	ldr	r3, [pc, #140]	; (8009894 <xTaskResumeAll+0x12c>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	429a      	cmp	r2, r3
 800980e:	d302      	bcc.n	8009816 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009810:	4b21      	ldr	r3, [pc, #132]	; (8009898 <xTaskResumeAll+0x130>)
 8009812:	2201      	movs	r2, #1
 8009814:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009816:	4b1c      	ldr	r3, [pc, #112]	; (8009888 <xTaskResumeAll+0x120>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1cc      	bne.n	80097b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009824:	f000 fb42 	bl	8009eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <xTaskResumeAll+0x134>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d010      	beq.n	8009856 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009834:	f000 f858 	bl	80098e8 <xTaskIncrementTick>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800983e:	4b16      	ldr	r3, [pc, #88]	; (8009898 <xTaskResumeAll+0x130>)
 8009840:	2201      	movs	r2, #1
 8009842:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3b01      	subs	r3, #1
 8009848:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f1      	bne.n	8009834 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009850:	4b12      	ldr	r3, [pc, #72]	; (800989c <xTaskResumeAll+0x134>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <xTaskResumeAll+0x130>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d009      	beq.n	8009872 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800985e:	2301      	movs	r3, #1
 8009860:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <xTaskResumeAll+0x138>)
 8009864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009872:	f000 febf 	bl	800a5f4 <vPortExitCritical>

	return xAlreadyYielded;
 8009876:	68bb      	ldr	r3, [r7, #8]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20005724 	.word	0x20005724
 8009884:	200056fc 	.word	0x200056fc
 8009888:	200056bc 	.word	0x200056bc
 800988c:	20005704 	.word	0x20005704
 8009890:	20005600 	.word	0x20005600
 8009894:	200055fc 	.word	0x200055fc
 8009898:	20005710 	.word	0x20005710
 800989c:	2000570c 	.word	0x2000570c
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <xTaskGetTickCount+0x1c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098b0:	687b      	ldr	r3, [r7, #4]
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	20005700 	.word	0x20005700

080098c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098ca:	f000 ff47 	bl	800a75c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80098ce:	2300      	movs	r3, #0
 80098d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80098d2:	4b04      	ldr	r3, [pc, #16]	; (80098e4 <xTaskGetTickCountFromISR+0x20>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80098d8:	683b      	ldr	r3, [r7, #0]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20005700 	.word	0x20005700

080098e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f2:	4b4f      	ldr	r3, [pc, #316]	; (8009a30 <xTaskIncrementTick+0x148>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 808a 	bne.w	8009a10 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098fc:	4b4d      	ldr	r3, [pc, #308]	; (8009a34 <xTaskIncrementTick+0x14c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009904:	4a4b      	ldr	r2, [pc, #300]	; (8009a34 <xTaskIncrementTick+0x14c>)
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d122      	bne.n	8009956 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009910:	4b49      	ldr	r3, [pc, #292]	; (8009a38 <xTaskIncrementTick+0x150>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00c      	beq.n	8009934 <xTaskIncrementTick+0x4c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	b672      	cpsid	i
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	b662      	cpsie	i
 800992e:	603b      	str	r3, [r7, #0]
}
 8009930:	bf00      	nop
 8009932:	e7fe      	b.n	8009932 <xTaskIncrementTick+0x4a>
 8009934:	4b40      	ldr	r3, [pc, #256]	; (8009a38 <xTaskIncrementTick+0x150>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	4b40      	ldr	r3, [pc, #256]	; (8009a3c <xTaskIncrementTick+0x154>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a3e      	ldr	r2, [pc, #248]	; (8009a38 <xTaskIncrementTick+0x150>)
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	4a3e      	ldr	r2, [pc, #248]	; (8009a3c <xTaskIncrementTick+0x154>)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	4b3d      	ldr	r3, [pc, #244]	; (8009a40 <xTaskIncrementTick+0x158>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	4a3c      	ldr	r2, [pc, #240]	; (8009a40 <xTaskIncrementTick+0x158>)
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	f000 faab 	bl	8009eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009956:	4b3b      	ldr	r3, [pc, #236]	; (8009a44 <xTaskIncrementTick+0x15c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	429a      	cmp	r2, r3
 800995e:	d348      	bcc.n	80099f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009960:	4b35      	ldr	r3, [pc, #212]	; (8009a38 <xTaskIncrementTick+0x150>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d104      	bne.n	8009974 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <xTaskIncrementTick+0x15c>)
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	601a      	str	r2, [r3, #0]
					break;
 8009972:	e03e      	b.n	80099f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009974:	4b30      	ldr	r3, [pc, #192]	; (8009a38 <xTaskIncrementTick+0x150>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	429a      	cmp	r2, r3
 800998a:	d203      	bcs.n	8009994 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800998c:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <xTaskIncrementTick+0x15c>)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009992:	e02e      	b.n	80099f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f7fe fcf9 	bl	8008390 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d004      	beq.n	80099b0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3318      	adds	r3, #24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe fcf0 	bl	8008390 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	2201      	movs	r2, #1
 80099b6:	409a      	lsls	r2, r3
 80099b8:	4b23      	ldr	r3, [pc, #140]	; (8009a48 <xTaskIncrementTick+0x160>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4313      	orrs	r3, r2
 80099be:	4a22      	ldr	r2, [pc, #136]	; (8009a48 <xTaskIncrementTick+0x160>)
 80099c0:	6013      	str	r3, [r2, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4a1f      	ldr	r2, [pc, #124]	; (8009a4c <xTaskIncrementTick+0x164>)
 80099d0:	441a      	add	r2, r3
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f7fe fc7c 	bl	80082d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4b1b      	ldr	r3, [pc, #108]	; (8009a50 <xTaskIncrementTick+0x168>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d3b9      	bcc.n	8009960 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80099ec:	2301      	movs	r3, #1
 80099ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f0:	e7b6      	b.n	8009960 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099f2:	4b17      	ldr	r3, [pc, #92]	; (8009a50 <xTaskIncrementTick+0x168>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4914      	ldr	r1, [pc, #80]	; (8009a4c <xTaskIncrementTick+0x164>)
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	440b      	add	r3, r1
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d907      	bls.n	8009a1a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e004      	b.n	8009a1a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a10:	4b10      	ldr	r3, [pc, #64]	; (8009a54 <xTaskIncrementTick+0x16c>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	4a0f      	ldr	r2, [pc, #60]	; (8009a54 <xTaskIncrementTick+0x16c>)
 8009a18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a1a:	4b0f      	ldr	r3, [pc, #60]	; (8009a58 <xTaskIncrementTick+0x170>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009a22:	2301      	movs	r3, #1
 8009a24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a26:	697b      	ldr	r3, [r7, #20]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3718      	adds	r7, #24
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	20005724 	.word	0x20005724
 8009a34:	20005700 	.word	0x20005700
 8009a38:	200056b4 	.word	0x200056b4
 8009a3c:	200056b8 	.word	0x200056b8
 8009a40:	20005714 	.word	0x20005714
 8009a44:	2000571c 	.word	0x2000571c
 8009a48:	20005704 	.word	0x20005704
 8009a4c:	20005600 	.word	0x20005600
 8009a50:	200055fc 	.word	0x200055fc
 8009a54:	2000570c 	.word	0x2000570c
 8009a58:	20005710 	.word	0x20005710

08009a5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b087      	sub	sp, #28
 8009a60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a62:	4b28      	ldr	r3, [pc, #160]	; (8009b04 <vTaskSwitchContext+0xa8>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d003      	beq.n	8009a72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a6a:	4b27      	ldr	r3, [pc, #156]	; (8009b08 <vTaskSwitchContext+0xac>)
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a70:	e041      	b.n	8009af6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009a72:	4b25      	ldr	r3, [pc, #148]	; (8009b08 <vTaskSwitchContext+0xac>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <vTaskSwitchContext+0xb0>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	fab3 f383 	clz	r3, r3
 8009a84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a86:	7afb      	ldrb	r3, [r7, #11]
 8009a88:	f1c3 031f 	rsb	r3, r3, #31
 8009a8c:	617b      	str	r3, [r7, #20]
 8009a8e:	4920      	ldr	r1, [pc, #128]	; (8009b10 <vTaskSwitchContext+0xb4>)
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10c      	bne.n	8009abc <vTaskSwitchContext+0x60>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	607b      	str	r3, [r7, #4]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <vTaskSwitchContext+0x5e>
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4a12      	ldr	r2, [pc, #72]	; (8009b10 <vTaskSwitchContext+0xb4>)
 8009ac8:	4413      	add	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	605a      	str	r2, [r3, #4]
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	685a      	ldr	r2, [r3, #4]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	3308      	adds	r3, #8
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d104      	bne.n	8009aec <vTaskSwitchContext+0x90>
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	605a      	str	r2, [r3, #4]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	4a08      	ldr	r2, [pc, #32]	; (8009b14 <vTaskSwitchContext+0xb8>)
 8009af4:	6013      	str	r3, [r2, #0]
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20005724 	.word	0x20005724
 8009b08:	20005710 	.word	0x20005710
 8009b0c:	20005704 	.word	0x20005704
 8009b10:	20005600 	.word	0x20005600
 8009b14:	200055fc 	.word	0x200055fc

08009b18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10c      	bne.n	8009b42 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	b672      	cpsid	i
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	b662      	cpsie	i
 8009b3c:	60fb      	str	r3, [r7, #12]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <vTaskPlaceOnEventList+0x48>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3318      	adds	r3, #24
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fe fbe7 	bl	800831e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b50:	2101      	movs	r1, #1
 8009b52:	6838      	ldr	r0, [r7, #0]
 8009b54:	f000 fba4 	bl	800a2a0 <prvAddCurrentTaskToDelayedList>
}
 8009b58:	bf00      	nop
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200055fc 	.word	0x200055fc

08009b64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10c      	bne.n	8009b94 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	b672      	cpsid	i
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	b662      	cpsie	i
 8009b8e:	60fb      	str	r3, [r7, #12]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3318      	adds	r3, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7fe fbf9 	bl	8008390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9e:	4b1d      	ldr	r3, [pc, #116]	; (8009c14 <xTaskRemoveFromEventList+0xb0>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d11c      	bne.n	8009be0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fe fbf0 	bl	8008390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	409a      	lsls	r2, r3
 8009bb8:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <xTaskRemoveFromEventList+0xb4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <xTaskRemoveFromEventList+0xb4>)
 8009bc0:	6013      	str	r3, [r2, #0]
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <xTaskRemoveFromEventList+0xb8>)
 8009bd0:	441a      	add	r2, r3
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4610      	mov	r0, r2
 8009bda:	f7fe fb7c 	bl	80082d6 <vListInsertEnd>
 8009bde:	e005      	b.n	8009bec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	3318      	adds	r3, #24
 8009be4:	4619      	mov	r1, r3
 8009be6:	480e      	ldr	r0, [pc, #56]	; (8009c20 <xTaskRemoveFromEventList+0xbc>)
 8009be8:	f7fe fb75 	bl	80082d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <xTaskRemoveFromEventList+0xc0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d905      	bls.n	8009c06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <xTaskRemoveFromEventList+0xc4>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	601a      	str	r2, [r3, #0]
 8009c04:	e001      	b.n	8009c0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c0a:	697b      	ldr	r3, [r7, #20]
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20005724 	.word	0x20005724
 8009c18:	20005704 	.word	0x20005704
 8009c1c:	20005600 	.word	0x20005600
 8009c20:	200056bc 	.word	0x200056bc
 8009c24:	200055fc 	.word	0x200055fc
 8009c28:	20005710 	.word	0x20005710

08009c2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <vTaskInternalSetTimeOutState+0x24>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c3c:	4b05      	ldr	r3, [pc, #20]	; (8009c54 <vTaskInternalSetTimeOutState+0x28>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	605a      	str	r2, [r3, #4]
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	20005714 	.word	0x20005714
 8009c54:	20005700 	.word	0x20005700

08009c58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10c      	bne.n	8009c82 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	b672      	cpsid	i
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	b662      	cpsie	i
 8009c7c:	613b      	str	r3, [r7, #16]
}
 8009c7e:	bf00      	nop
 8009c80:	e7fe      	b.n	8009c80 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10c      	bne.n	8009ca2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	b672      	cpsid	i
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	b662      	cpsie	i
 8009c9c:	60fb      	str	r3, [r7, #12]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009ca2:	f000 fc73 	bl	800a58c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	; (8009d1c <xTaskCheckForTimeOut+0xc4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbe:	d102      	bne.n	8009cc6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e023      	b.n	8009d0e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <xTaskCheckForTimeOut+0xc8>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d007      	beq.n	8009ce2 <xTaskCheckForTimeOut+0x8a>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d302      	bcc.n	8009ce2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61fb      	str	r3, [r7, #28]
 8009ce0:	e015      	b.n	8009d0e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d20b      	bcs.n	8009d04 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff ff97 	bl	8009c2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	e004      	b.n	8009d0e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d0e:	f000 fc71 	bl	800a5f4 <vPortExitCritical>

	return xReturn;
 8009d12:	69fb      	ldr	r3, [r7, #28]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20005700 	.word	0x20005700
 8009d20:	20005714 	.word	0x20005714

08009d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <vTaskMissedYield+0x14>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	20005710 	.word	0x20005710

08009d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d44:	f000 f852 	bl	8009dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d48:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <prvIdleTask+0x28>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d9f9      	bls.n	8009d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <prvIdleTask+0x2c>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d60:	e7f0      	b.n	8009d44 <prvIdleTask+0x8>
 8009d62:	bf00      	nop
 8009d64:	20005600 	.word	0x20005600
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d72:	2300      	movs	r3, #0
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	e00c      	b.n	8009d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4a12      	ldr	r2, [pc, #72]	; (8009dcc <prvInitialiseTaskLists+0x60>)
 8009d84:	4413      	add	r3, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe fa78 	bl	800827c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	607b      	str	r3, [r7, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b06      	cmp	r3, #6
 8009d96:	d9ef      	bls.n	8009d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d98:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <prvInitialiseTaskLists+0x64>)
 8009d9a:	f7fe fa6f 	bl	800827c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d9e:	480d      	ldr	r0, [pc, #52]	; (8009dd4 <prvInitialiseTaskLists+0x68>)
 8009da0:	f7fe fa6c 	bl	800827c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009da4:	480c      	ldr	r0, [pc, #48]	; (8009dd8 <prvInitialiseTaskLists+0x6c>)
 8009da6:	f7fe fa69 	bl	800827c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009daa:	480c      	ldr	r0, [pc, #48]	; (8009ddc <prvInitialiseTaskLists+0x70>)
 8009dac:	f7fe fa66 	bl	800827c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009db0:	480b      	ldr	r0, [pc, #44]	; (8009de0 <prvInitialiseTaskLists+0x74>)
 8009db2:	f7fe fa63 	bl	800827c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <prvInitialiseTaskLists+0x78>)
 8009db8:	4a05      	ldr	r2, [pc, #20]	; (8009dd0 <prvInitialiseTaskLists+0x64>)
 8009dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <prvInitialiseTaskLists+0x7c>)
 8009dbe:	4a05      	ldr	r2, [pc, #20]	; (8009dd4 <prvInitialiseTaskLists+0x68>)
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20005600 	.word	0x20005600
 8009dd0:	2000568c 	.word	0x2000568c
 8009dd4:	200056a0 	.word	0x200056a0
 8009dd8:	200056bc 	.word	0x200056bc
 8009ddc:	200056d0 	.word	0x200056d0
 8009de0:	200056e8 	.word	0x200056e8
 8009de4:	200056b4 	.word	0x200056b4
 8009de8:	200056b8 	.word	0x200056b8

08009dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009df2:	e019      	b.n	8009e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009df4:	f000 fbca 	bl	800a58c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df8:	4b10      	ldr	r3, [pc, #64]	; (8009e3c <prvCheckTasksWaitingTermination+0x50>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe fac3 	bl	8008390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e0a:	4b0d      	ldr	r3, [pc, #52]	; (8009e40 <prvCheckTasksWaitingTermination+0x54>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4a0b      	ldr	r2, [pc, #44]	; (8009e40 <prvCheckTasksWaitingTermination+0x54>)
 8009e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e14:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <prvCheckTasksWaitingTermination+0x58>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4a0a      	ldr	r2, [pc, #40]	; (8009e44 <prvCheckTasksWaitingTermination+0x58>)
 8009e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e1e:	f000 fbe9 	bl	800a5f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f810 	bl	8009e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e28:	4b06      	ldr	r3, [pc, #24]	; (8009e44 <prvCheckTasksWaitingTermination+0x58>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e1      	bne.n	8009df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	200056d0 	.word	0x200056d0
 8009e40:	200056fc 	.word	0x200056fc
 8009e44:	200056e4 	.word	0x200056e4

08009e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d108      	bne.n	8009e6c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fd8a 	bl	800a978 <vPortFree>
				vPortFree( pxTCB );
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fd87 	bl	800a978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e6a:	e01a      	b.n	8009ea2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d103      	bne.n	8009e7e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fd7e 	bl	800a978 <vPortFree>
	}
 8009e7c:	e011      	b.n	8009ea2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d00c      	beq.n	8009ea2 <prvDeleteTCB+0x5a>
	__asm volatile
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	b672      	cpsid	i
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	b662      	cpsie	i
 8009e9c:	60fb      	str	r3, [r7, #12]
}
 8009e9e:	bf00      	nop
 8009ea0:	e7fe      	b.n	8009ea0 <prvDeleteTCB+0x58>
	}
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	; (8009ee4 <prvResetNextTaskUnblockTime+0x38>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d104      	bne.n	8009ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ec4:	e008      	b.n	8009ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ec6:	4b07      	ldr	r3, [pc, #28]	; (8009ee4 <prvResetNextTaskUnblockTime+0x38>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4a04      	ldr	r2, [pc, #16]	; (8009ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ed6:	6013      	str	r3, [r2, #0]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	200056b4 	.word	0x200056b4
 8009ee8:	2000571c 	.word	0x2000571c

08009eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <xTaskGetSchedulerState+0x34>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d102      	bne.n	8009f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009efa:	2301      	movs	r3, #1
 8009efc:	607b      	str	r3, [r7, #4]
 8009efe:	e008      	b.n	8009f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f00:	4b08      	ldr	r3, [pc, #32]	; (8009f24 <xTaskGetSchedulerState+0x38>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d102      	bne.n	8009f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	607b      	str	r3, [r7, #4]
 8009f0c:	e001      	b.n	8009f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f12:	687b      	ldr	r3, [r7, #4]
	}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20005708 	.word	0x20005708
 8009f24:	20005724 	.word	0x20005724

08009f28 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f34:	2300      	movs	r3, #0
 8009f36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d069      	beq.n	800a012 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f42:	4b36      	ldr	r3, [pc, #216]	; (800a01c <xTaskPriorityInherit+0xf4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d259      	bcs.n	800a000 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	db06      	blt.n	8009f62 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f54:	4b31      	ldr	r3, [pc, #196]	; (800a01c <xTaskPriorityInherit+0xf4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5a:	f1c3 0207 	rsb	r2, r3, #7
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	6959      	ldr	r1, [r3, #20]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4a2b      	ldr	r2, [pc, #172]	; (800a020 <xTaskPriorityInherit+0xf8>)
 8009f74:	4413      	add	r3, r2
 8009f76:	4299      	cmp	r1, r3
 8009f78:	d13a      	bne.n	8009ff0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7fe fa06 	bl	8008390 <uxListRemove>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d115      	bne.n	8009fb6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4924      	ldr	r1, [pc, #144]	; (800a020 <xTaskPriorityInherit+0xf8>)
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	440b      	add	r3, r1
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <xTaskPriorityInherit+0x8e>
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8009faa:	43da      	mvns	r2, r3
 8009fac:	4b1d      	ldr	r3, [pc, #116]	; (800a024 <xTaskPriorityInherit+0xfc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	4a1c      	ldr	r2, [pc, #112]	; (800a024 <xTaskPriorityInherit+0xfc>)
 8009fb4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fb6:	4b19      	ldr	r3, [pc, #100]	; (800a01c <xTaskPriorityInherit+0xf4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	409a      	lsls	r2, r3
 8009fc8:	4b16      	ldr	r3, [pc, #88]	; (800a024 <xTaskPriorityInherit+0xfc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	4a15      	ldr	r2, [pc, #84]	; (800a024 <xTaskPriorityInherit+0xfc>)
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd6:	4613      	mov	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	4413      	add	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4a10      	ldr	r2, [pc, #64]	; (800a020 <xTaskPriorityInherit+0xf8>)
 8009fe0:	441a      	add	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f7fe f974 	bl	80082d6 <vListInsertEnd>
 8009fee:	e004      	b.n	8009ffa <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <xTaskPriorityInherit+0xf4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	e008      	b.n	800a012 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <xTaskPriorityInherit+0xf4>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d201      	bcs.n	800a012 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a00e:	2301      	movs	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a012:	68fb      	ldr	r3, [r7, #12]
	}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	200055fc 	.word	0x200055fc
 800a020:	20005600 	.word	0x20005600
 800a024:	20005704 	.word	0x20005704

0800a028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a034:	2300      	movs	r3, #0
 800a036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d072      	beq.n	800a124 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a03e:	4b3c      	ldr	r3, [pc, #240]	; (800a130 <xTaskPriorityDisinherit+0x108>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	429a      	cmp	r2, r3
 800a046:	d00c      	beq.n	800a062 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	b672      	cpsid	i
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	b662      	cpsie	i
 800a05c:	60fb      	str	r3, [r7, #12]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10c      	bne.n	800a084 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	b672      	cpsid	i
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	b662      	cpsie	i
 800a07e:	60bb      	str	r3, [r7, #8]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a088:	1e5a      	subs	r2, r3, #1
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a096:	429a      	cmp	r2, r3
 800a098:	d044      	beq.n	800a124 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d140      	bne.n	800a124 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	3304      	adds	r3, #4
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe f972 	bl	8008390 <uxListRemove>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d115      	bne.n	800a0de <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b6:	491f      	ldr	r1, [pc, #124]	; (800a134 <xTaskPriorityDisinherit+0x10c>)
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	440b      	add	r3, r1
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10a      	bne.n	800a0de <xTaskPriorityDisinherit+0xb6>
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d2:	43da      	mvns	r2, r3
 800a0d4:	4b18      	ldr	r3, [pc, #96]	; (800a138 <xTaskPriorityDisinherit+0x110>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4013      	ands	r3, r2
 800a0da:	4a17      	ldr	r2, [pc, #92]	; (800a138 <xTaskPriorityDisinherit+0x110>)
 800a0dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	f1c3 0207 	rsb	r2, r3, #7
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	409a      	lsls	r2, r3
 800a0fa:	4b0f      	ldr	r3, [pc, #60]	; (800a138 <xTaskPriorityDisinherit+0x110>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <xTaskPriorityDisinherit+0x110>)
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4a08      	ldr	r2, [pc, #32]	; (800a134 <xTaskPriorityDisinherit+0x10c>)
 800a112:	441a      	add	r2, r3
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	3304      	adds	r3, #4
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	f7fe f8db 	bl	80082d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a120:	2301      	movs	r3, #1
 800a122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a124:	697b      	ldr	r3, [r7, #20]
	}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	200055fc 	.word	0x200055fc
 800a134:	20005600 	.word	0x20005600
 800a138:	20005704 	.word	0x20005704

0800a13c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b088      	sub	sp, #32
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a14a:	2301      	movs	r3, #1
 800a14c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	f000 8087 	beq.w	800a264 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10c      	bne.n	800a178 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	b672      	cpsid	i
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	b662      	cpsie	i
 800a172:	60fb      	str	r3, [r7, #12]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d902      	bls.n	800a188 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	e002      	b.n	800a18e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	429a      	cmp	r2, r3
 800a196:	d065      	beq.n	800a264 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d160      	bne.n	800a264 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a1a2:	4b32      	ldr	r3, [pc, #200]	; (800a26c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d10c      	bne.n	800a1c6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	b672      	cpsid	i
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	b662      	cpsie	i
 800a1c0:	60bb      	str	r3, [r7, #8]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	69fa      	ldr	r2, [r7, #28]
 800a1d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	db04      	blt.n	800a1e4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	f1c3 0207 	rsb	r2, r3, #7
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	6959      	ldr	r1, [r3, #20]
 800a1e8:	693a      	ldr	r2, [r7, #16]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4299      	cmp	r1, r3
 800a1f8:	d134      	bne.n	800a264 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fe f8c6 	bl	8008390 <uxListRemove>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d115      	bne.n	800a236 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20e:	4918      	ldr	r1, [pc, #96]	; (800a270 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	440b      	add	r3, r1
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	2201      	movs	r2, #1
 800a226:	fa02 f303 	lsl.w	r3, r2, r3
 800a22a:	43da      	mvns	r2, r3
 800a22c:	4b11      	ldr	r3, [pc, #68]	; (800a274 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4013      	ands	r3, r2
 800a232:	4a10      	ldr	r2, [pc, #64]	; (800a274 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a234:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	2201      	movs	r2, #1
 800a23c:	409a      	lsls	r2, r3
 800a23e:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4313      	orrs	r3, r2
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a24c:	4613      	mov	r3, r2
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4a06      	ldr	r2, [pc, #24]	; (800a270 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a256:	441a      	add	r2, r3
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe f839 	bl	80082d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a264:	bf00      	nop
 800a266:	3720      	adds	r7, #32
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	200055fc 	.word	0x200055fc
 800a270:	20005600 	.word	0x20005600
 800a274:	20005704 	.word	0x20005704

0800a278 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a27c:	4b07      	ldr	r3, [pc, #28]	; (800a29c <pvTaskIncrementMutexHeldCount+0x24>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d004      	beq.n	800a28e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <pvTaskIncrementMutexHeldCount+0x24>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a28a:	3201      	adds	r2, #1
 800a28c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a28e:	4b03      	ldr	r3, [pc, #12]	; (800a29c <pvTaskIncrementMutexHeldCount+0x24>)
 800a290:	681b      	ldr	r3, [r3, #0]
	}
 800a292:	4618      	mov	r0, r3
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	200055fc 	.word	0x200055fc

0800a2a0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2aa:	4b29      	ldr	r3, [pc, #164]	; (800a350 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2b0:	4b28      	ldr	r3, [pc, #160]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe f86a 	bl	8008390 <uxListRemove>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10b      	bne.n	800a2da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a2c2:	4b24      	ldr	r3, [pc, #144]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ce:	43da      	mvns	r2, r3
 800a2d0:	4b21      	ldr	r3, [pc, #132]	; (800a358 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	4a20      	ldr	r2, [pc, #128]	; (800a358 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e0:	d10a      	bne.n	800a2f8 <prvAddCurrentTaskToDelayedList+0x58>
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3304      	adds	r3, #4
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	481a      	ldr	r0, [pc, #104]	; (800a35c <prvAddCurrentTaskToDelayedList+0xbc>)
 800a2f2:	f7fd fff0 	bl	80082d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2f6:	e026      	b.n	800a346 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a300:	4b14      	ldr	r3, [pc, #80]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a308:	68ba      	ldr	r2, [r7, #8]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d209      	bcs.n	800a324 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a310:	4b13      	ldr	r3, [pc, #76]	; (800a360 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fd fffe 	bl	800831e <vListInsert>
}
 800a322:	e010      	b.n	800a346 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a324:	4b0f      	ldr	r3, [pc, #60]	; (800a364 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3304      	adds	r3, #4
 800a32e:	4619      	mov	r1, r3
 800a330:	4610      	mov	r0, r2
 800a332:	f7fd fff4 	bl	800831e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d202      	bcs.n	800a346 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a340:	4a09      	ldr	r2, [pc, #36]	; (800a368 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	6013      	str	r3, [r2, #0]
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20005700 	.word	0x20005700
 800a354:	200055fc 	.word	0x200055fc
 800a358:	20005704 	.word	0x20005704
 800a35c:	200056e8 	.word	0x200056e8
 800a360:	200056b8 	.word	0x200056b8
 800a364:	200056b4 	.word	0x200056b4
 800a368:	2000571c 	.word	0x2000571c

0800a36c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3b04      	subs	r3, #4
 800a37c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3b04      	subs	r3, #4
 800a38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f023 0201 	bic.w	r2, r3, #1
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3b04      	subs	r3, #4
 800a39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a39c:	4a0c      	ldr	r2, [pc, #48]	; (800a3d0 <pxPortInitialiseStack+0x64>)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3b14      	subs	r3, #20
 800a3a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3b04      	subs	r3, #4
 800a3b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f06f 0202 	mvn.w	r2, #2
 800a3ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3b20      	subs	r3, #32
 800a3c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3714      	adds	r7, #20
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	0800a3d5 	.word	0x0800a3d5

0800a3d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3de:	4b14      	ldr	r3, [pc, #80]	; (800a430 <prvTaskExitError+0x5c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d00c      	beq.n	800a402 <prvTaskExitError+0x2e>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	b672      	cpsid	i
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	b662      	cpsie	i
 800a3fc:	60fb      	str	r3, [r7, #12]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <prvTaskExitError+0x2c>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	b672      	cpsid	i
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	b662      	cpsie	i
 800a416:	60bb      	str	r3, [r7, #8]
}
 800a418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a41a:	bf00      	nop
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0fc      	beq.n	800a41c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	2000002c 	.word	0x2000002c
	...

0800a440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a440:	4b07      	ldr	r3, [pc, #28]	; (800a460 <pxCurrentTCBConst2>)
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	6808      	ldr	r0, [r1, #0]
 800a446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	f380 8809 	msr	PSP, r0
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8811 	msr	BASEPRI, r0
 800a45a:	4770      	bx	lr
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst2>:
 800a460:	200055fc 	.word	0x200055fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop

0800a468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a468:	4808      	ldr	r0, [pc, #32]	; (800a48c <prvPortStartFirstTask+0x24>)
 800a46a:	6800      	ldr	r0, [r0, #0]
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	f380 8808 	msr	MSP, r0
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8814 	msr	CONTROL, r0
 800a47a:	b662      	cpsie	i
 800a47c:	b661      	cpsie	f
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	df00      	svc	0
 800a488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a48a:	bf00      	nop
 800a48c:	e000ed08 	.word	0xe000ed08

0800a490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a496:	4b37      	ldr	r3, [pc, #220]	; (800a574 <xPortStartScheduler+0xe4>)
 800a498:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	4b2f      	ldr	r3, [pc, #188]	; (800a578 <xPortStartScheduler+0xe8>)
 800a4bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a4be:	4b2f      	ldr	r3, [pc, #188]	; (800a57c <xPortStartScheduler+0xec>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4c4:	e009      	b.n	800a4da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a4c6:	4b2d      	ldr	r3, [pc, #180]	; (800a57c <xPortStartScheduler+0xec>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <xPortStartScheduler+0xec>)
 800a4ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b80      	cmp	r3, #128	; 0x80
 800a4e4:	d0ef      	beq.n	800a4c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4e6:	4b25      	ldr	r3, [pc, #148]	; (800a57c <xPortStartScheduler+0xec>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f1c3 0307 	rsb	r3, r3, #7
 800a4ee:	2b04      	cmp	r3, #4
 800a4f0:	d00c      	beq.n	800a50c <xPortStartScheduler+0x7c>
	__asm volatile
 800a4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f6:	b672      	cpsid	i
 800a4f8:	f383 8811 	msr	BASEPRI, r3
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	b662      	cpsie	i
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a50c:	4b1b      	ldr	r3, [pc, #108]	; (800a57c <xPortStartScheduler+0xec>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	4a1a      	ldr	r2, [pc, #104]	; (800a57c <xPortStartScheduler+0xec>)
 800a514:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a516:	4b19      	ldr	r3, [pc, #100]	; (800a57c <xPortStartScheduler+0xec>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a51e:	4a17      	ldr	r2, [pc, #92]	; (800a57c <xPortStartScheduler+0xec>)
 800a520:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	b2da      	uxtb	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a52a:	4b15      	ldr	r3, [pc, #84]	; (800a580 <xPortStartScheduler+0xf0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a14      	ldr	r2, [pc, #80]	; (800a580 <xPortStartScheduler+0xf0>)
 800a530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a534:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a536:	4b12      	ldr	r3, [pc, #72]	; (800a580 <xPortStartScheduler+0xf0>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a11      	ldr	r2, [pc, #68]	; (800a580 <xPortStartScheduler+0xf0>)
 800a53c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a540:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a542:	f000 f8dd 	bl	800a700 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a546:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <xPortStartScheduler+0xf4>)
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a54c:	f000 f8fc 	bl	800a748 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a550:	4b0d      	ldr	r3, [pc, #52]	; (800a588 <xPortStartScheduler+0xf8>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a0c      	ldr	r2, [pc, #48]	; (800a588 <xPortStartScheduler+0xf8>)
 800a556:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a55a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a55c:	f7ff ff84 	bl	800a468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a560:	f7ff fa7c 	bl	8009a5c <vTaskSwitchContext>
	prvTaskExitError();
 800a564:	f7ff ff36 	bl	800a3d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	e000e400 	.word	0xe000e400
 800a578:	20005728 	.word	0x20005728
 800a57c:	2000572c 	.word	0x2000572c
 800a580:	e000ed20 	.word	0xe000ed20
 800a584:	2000002c 	.word	0x2000002c
 800a588:	e000ef34 	.word	0xe000ef34

0800a58c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	b672      	cpsid	i
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	b662      	cpsie	i
 800a5a6:	607b      	str	r3, [r7, #4]
}
 800a5a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5aa:	4b10      	ldr	r3, [pc, #64]	; (800a5ec <vPortEnterCritical+0x60>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	4a0e      	ldr	r2, [pc, #56]	; (800a5ec <vPortEnterCritical+0x60>)
 800a5b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <vPortEnterCritical+0x60>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d111      	bne.n	800a5e0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a5bc:	4b0c      	ldr	r3, [pc, #48]	; (800a5f0 <vPortEnterCritical+0x64>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00c      	beq.n	800a5e0 <vPortEnterCritical+0x54>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	b672      	cpsid	i
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	b662      	cpsie	i
 800a5da:	603b      	str	r3, [r7, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	e7fe      	b.n	800a5de <vPortEnterCritical+0x52>
	}
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	2000002c 	.word	0x2000002c
 800a5f0:	e000ed04 	.word	0xe000ed04

0800a5f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5fa:	4b13      	ldr	r3, [pc, #76]	; (800a648 <vPortExitCritical+0x54>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10c      	bne.n	800a61c <vPortExitCritical+0x28>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	b672      	cpsid	i
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	b662      	cpsie	i
 800a616:	607b      	str	r3, [r7, #4]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a61c:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <vPortExitCritical+0x54>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	3b01      	subs	r3, #1
 800a622:	4a09      	ldr	r2, [pc, #36]	; (800a648 <vPortExitCritical+0x54>)
 800a624:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a626:	4b08      	ldr	r3, [pc, #32]	; (800a648 <vPortExitCritical+0x54>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d105      	bne.n	800a63a <vPortExitCritical+0x46>
 800a62e:	2300      	movs	r3, #0
 800a630:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	f383 8811 	msr	BASEPRI, r3
}
 800a638:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	2000002c 	.word	0x2000002c
 800a64c:	00000000 	.word	0x00000000

0800a650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a650:	f3ef 8009 	mrs	r0, PSP
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <pxCurrentTCBConst>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f01e 0f10 	tst.w	lr, #16
 800a660:	bf08      	it	eq
 800a662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66a:	6010      	str	r0, [r2, #0]
 800a66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a674:	b672      	cpsid	i
 800a676:	f380 8811 	msr	BASEPRI, r0
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	b662      	cpsie	i
 800a684:	f7ff f9ea 	bl	8009a5c <vTaskSwitchContext>
 800a688:	f04f 0000 	mov.w	r0, #0
 800a68c:	f380 8811 	msr	BASEPRI, r0
 800a690:	bc09      	pop	{r0, r3}
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	f01e 0f10 	tst.w	lr, #16
 800a69e:	bf08      	it	eq
 800a6a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6a4:	f380 8809 	msr	PSP, r0
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop

0800a6b0 <pxCurrentTCBConst>:
 800a6b0:	200055fc 	.word	0x200055fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	b672      	cpsid	i
 800a6c4:	f383 8811 	msr	BASEPRI, r3
 800a6c8:	f3bf 8f6f 	isb	sy
 800a6cc:	f3bf 8f4f 	dsb	sy
 800a6d0:	b662      	cpsie	i
 800a6d2:	607b      	str	r3, [r7, #4]
}
 800a6d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6d6:	f7ff f907 	bl	80098e8 <xTaskIncrementTick>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6e0:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <SysTick_Handler+0x44>)
 800a6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	f383 8811 	msr	BASEPRI, r3
}
 800a6f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	e000ed04 	.word	0xe000ed04

0800a700 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a704:	4b0b      	ldr	r3, [pc, #44]	; (800a734 <vPortSetupTimerInterrupt+0x34>)
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a70a:	4b0b      	ldr	r3, [pc, #44]	; (800a738 <vPortSetupTimerInterrupt+0x38>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a710:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <vPortSetupTimerInterrupt+0x3c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a0a      	ldr	r2, [pc, #40]	; (800a740 <vPortSetupTimerInterrupt+0x40>)
 800a716:	fba2 2303 	umull	r2, r3, r2, r3
 800a71a:	099b      	lsrs	r3, r3, #6
 800a71c:	4a09      	ldr	r2, [pc, #36]	; (800a744 <vPortSetupTimerInterrupt+0x44>)
 800a71e:	3b01      	subs	r3, #1
 800a720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a722:	4b04      	ldr	r3, [pc, #16]	; (800a734 <vPortSetupTimerInterrupt+0x34>)
 800a724:	2207      	movs	r2, #7
 800a726:	601a      	str	r2, [r3, #0]
}
 800a728:	bf00      	nop
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	e000e010 	.word	0xe000e010
 800a738:	e000e018 	.word	0xe000e018
 800a73c:	2000000c 	.word	0x2000000c
 800a740:	10624dd3 	.word	0x10624dd3
 800a744:	e000e014 	.word	0xe000e014

0800a748 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a748:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a758 <vPortEnableVFP+0x10>
 800a74c:	6801      	ldr	r1, [r0, #0]
 800a74e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a752:	6001      	str	r1, [r0, #0]
 800a754:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a756:	bf00      	nop
 800a758:	e000ed88 	.word	0xe000ed88

0800a75c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a762:	f3ef 8305 	mrs	r3, IPSR
 800a766:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2b0f      	cmp	r3, #15
 800a76c:	d916      	bls.n	800a79c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a76e:	4a19      	ldr	r2, [pc, #100]	; (800a7d4 <vPortValidateInterruptPriority+0x78>)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a778:	4b17      	ldr	r3, [pc, #92]	; (800a7d8 <vPortValidateInterruptPriority+0x7c>)
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	7afa      	ldrb	r2, [r7, #11]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d20c      	bcs.n	800a79c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	b672      	cpsid	i
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	b662      	cpsie	i
 800a796:	607b      	str	r3, [r7, #4]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a79c:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <vPortValidateInterruptPriority+0x80>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a7a4:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <vPortValidateInterruptPriority+0x84>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d90c      	bls.n	800a7c6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	603b      	str	r3, [r7, #0]
}
 800a7c2:	bf00      	nop
 800a7c4:	e7fe      	b.n	800a7c4 <vPortValidateInterruptPriority+0x68>
	}
 800a7c6:	bf00      	nop
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	e000e3f0 	.word	0xe000e3f0
 800a7d8:	20005728 	.word	0x20005728
 800a7dc:	e000ed0c 	.word	0xe000ed0c
 800a7e0:	2000572c 	.word	0x2000572c

0800a7e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b08a      	sub	sp, #40	; 0x28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7f0:	f7fe ffac 	bl	800974c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7f4:	4b5b      	ldr	r3, [pc, #364]	; (800a964 <pvPortMalloc+0x180>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7fc:	f000 f91a 	bl	800aa34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a800:	4b59      	ldr	r3, [pc, #356]	; (800a968 <pvPortMalloc+0x184>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4013      	ands	r3, r2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f040 8092 	bne.w	800a932 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d01f      	beq.n	800a854 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a814:	2208      	movs	r2, #8
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4413      	add	r3, r2
 800a81a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	2b00      	cmp	r3, #0
 800a824:	d016      	beq.n	800a854 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f023 0307 	bic.w	r3, r3, #7
 800a82c:	3308      	adds	r3, #8
 800a82e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00c      	beq.n	800a854 <pvPortMalloc+0x70>
	__asm volatile
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	b672      	cpsid	i
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	b662      	cpsie	i
 800a84e:	617b      	str	r3, [r7, #20]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d06b      	beq.n	800a932 <pvPortMalloc+0x14e>
 800a85a:	4b44      	ldr	r3, [pc, #272]	; (800a96c <pvPortMalloc+0x188>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d866      	bhi.n	800a932 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a864:	4b42      	ldr	r3, [pc, #264]	; (800a970 <pvPortMalloc+0x18c>)
 800a866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a868:	4b41      	ldr	r3, [pc, #260]	; (800a970 <pvPortMalloc+0x18c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a86e:	e004      	b.n	800a87a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d903      	bls.n	800a88c <pvPortMalloc+0xa8>
 800a884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f1      	bne.n	800a870 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a88c:	4b35      	ldr	r3, [pc, #212]	; (800a964 <pvPortMalloc+0x180>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a892:	429a      	cmp	r2, r3
 800a894:	d04d      	beq.n	800a932 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2208      	movs	r2, #8
 800a89c:	4413      	add	r3, r2
 800a89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d921      	bls.n	800a8fc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4413      	add	r3, r2
 800a8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	f003 0307 	and.w	r3, r3, #7
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00c      	beq.n	800a8e4 <pvPortMalloc+0x100>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	b672      	cpsid	i
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	b662      	cpsie	i
 800a8de:	613b      	str	r3, [r7, #16]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	685a      	ldr	r2, [r3, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8f6:	69b8      	ldr	r0, [r7, #24]
 800a8f8:	f000 f8fe 	bl	800aaf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8fc:	4b1b      	ldr	r3, [pc, #108]	; (800a96c <pvPortMalloc+0x188>)
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	4a19      	ldr	r2, [pc, #100]	; (800a96c <pvPortMalloc+0x188>)
 800a908:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a90a:	4b18      	ldr	r3, [pc, #96]	; (800a96c <pvPortMalloc+0x188>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	4b19      	ldr	r3, [pc, #100]	; (800a974 <pvPortMalloc+0x190>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	429a      	cmp	r2, r3
 800a914:	d203      	bcs.n	800a91e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a916:	4b15      	ldr	r3, [pc, #84]	; (800a96c <pvPortMalloc+0x188>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a16      	ldr	r2, [pc, #88]	; (800a974 <pvPortMalloc+0x190>)
 800a91c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	4b11      	ldr	r3, [pc, #68]	; (800a968 <pvPortMalloc+0x184>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	431a      	orrs	r2, r3
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a932:	f7fe ff19 	bl	8009768 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00c      	beq.n	800a95a <pvPortMalloc+0x176>
	__asm volatile
 800a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a944:	b672      	cpsid	i
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	b662      	cpsie	i
 800a954:	60fb      	str	r3, [r7, #12]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <pvPortMalloc+0x174>
	return pvReturn;
 800a95a:	69fb      	ldr	r3, [r7, #28]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3728      	adds	r7, #40	; 0x28
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20009338 	.word	0x20009338
 800a968:	20009344 	.word	0x20009344
 800a96c:	2000933c 	.word	0x2000933c
 800a970:	20009330 	.word	0x20009330
 800a974:	20009340 	.word	0x20009340

0800a978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d04c      	beq.n	800aa24 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a98a:	2308      	movs	r3, #8
 800a98c:	425b      	negs	r3, r3
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	4413      	add	r3, r2
 800a992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	4b23      	ldr	r3, [pc, #140]	; (800aa2c <vPortFree+0xb4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10c      	bne.n	800a9c0 <vPortFree+0x48>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	b672      	cpsid	i
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	b662      	cpsie	i
 800a9ba:	60fb      	str	r3, [r7, #12]
}
 800a9bc:	bf00      	nop
 800a9be:	e7fe      	b.n	800a9be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00c      	beq.n	800a9e2 <vPortFree+0x6a>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	b672      	cpsid	i
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	b662      	cpsie	i
 800a9dc:	60bb      	str	r3, [r7, #8]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	4b11      	ldr	r3, [pc, #68]	; (800aa2c <vPortFree+0xb4>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d019      	beq.n	800aa24 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d115      	bne.n	800aa24 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	4b0b      	ldr	r3, [pc, #44]	; (800aa2c <vPortFree+0xb4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	43db      	mvns	r3, r3
 800aa02:	401a      	ands	r2, r3
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa08:	f7fe fea0 	bl	800974c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	685a      	ldr	r2, [r3, #4]
 800aa10:	4b07      	ldr	r3, [pc, #28]	; (800aa30 <vPortFree+0xb8>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4413      	add	r3, r2
 800aa16:	4a06      	ldr	r2, [pc, #24]	; (800aa30 <vPortFree+0xb8>)
 800aa18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa1a:	6938      	ldr	r0, [r7, #16]
 800aa1c:	f000 f86c 	bl	800aaf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800aa20:	f7fe fea2 	bl	8009768 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa24:	bf00      	nop
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	20009344 	.word	0x20009344
 800aa30:	2000933c 	.word	0x2000933c

0800aa34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aa3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa40:	4b27      	ldr	r3, [pc, #156]	; (800aae0 <prvHeapInit+0xac>)
 800aa42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00c      	beq.n	800aa68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f023 0307 	bic.w	r3, r3, #7
 800aa5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	4a1f      	ldr	r2, [pc, #124]	; (800aae0 <prvHeapInit+0xac>)
 800aa64:	4413      	add	r3, r2
 800aa66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa6c:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <prvHeapInit+0xb0>)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa72:	4b1c      	ldr	r3, [pc, #112]	; (800aae4 <prvHeapInit+0xb0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa80:	2208      	movs	r2, #8
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	1a9b      	subs	r3, r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <prvHeapInit+0xb4>)
 800aa94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <prvHeapInit+0xb4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <prvHeapInit+0xb4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <prvHeapInit+0xb4>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <prvHeapInit+0xb8>)
 800aac2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <prvHeapInit+0xbc>)
 800aaca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <prvHeapInit+0xc0>)
 800aace:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	3714      	adds	r7, #20
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr
 800aae0:	20005730 	.word	0x20005730
 800aae4:	20009330 	.word	0x20009330
 800aae8:	20009338 	.word	0x20009338
 800aaec:	20009340 	.word	0x20009340
 800aaf0:	2000933c 	.word	0x2000933c
 800aaf4:	20009344 	.word	0x20009344

0800aaf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab00:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <prvInsertBlockIntoFreeList+0xac>)
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	e002      	b.n	800ab0c <prvInsertBlockIntoFreeList+0x14>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d8f7      	bhi.n	800ab06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	4413      	add	r3, r2
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d108      	bne.n	800ab3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	441a      	add	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d118      	bne.n	800ab80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d00d      	beq.n	800ab76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	441a      	add	r2, r3
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e008      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab76:	4b0c      	ldr	r3, [pc, #48]	; (800aba8 <prvInsertBlockIntoFreeList+0xb0>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e003      	b.n	800ab88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d002      	beq.n	800ab96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab96:	bf00      	nop
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	20009330 	.word	0x20009330
 800aba8:	20009338 	.word	0x20009338

0800abac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800abb6:	f009 fd9d 	bl	80146f4 <sys_timeouts_sleeptime>
 800abba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc2:	d10b      	bne.n	800abdc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800abc4:	4813      	ldr	r0, [pc, #76]	; (800ac14 <tcpip_timeouts_mbox_fetch+0x68>)
 800abc6:	f00e fcca 	bl	801955e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800abca:	2200      	movs	r2, #0
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f00e fc3c 	bl	801944c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800abd4:	480f      	ldr	r0, [pc, #60]	; (800ac14 <tcpip_timeouts_mbox_fetch+0x68>)
 800abd6:	f00e fcb3 	bl	8019540 <sys_mutex_lock>
    return;
 800abda:	e018      	b.n	800ac0e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d102      	bne.n	800abe8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800abe2:	f009 fd4d 	bl	8014680 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800abe6:	e7e6      	b.n	800abb6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800abe8:	480a      	ldr	r0, [pc, #40]	; (800ac14 <tcpip_timeouts_mbox_fetch+0x68>)
 800abea:	f00e fcb8 	bl	801955e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f00e fc2a 	bl	801944c <sys_arch_mbox_fetch>
 800abf8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800abfa:	4806      	ldr	r0, [pc, #24]	; (800ac14 <tcpip_timeouts_mbox_fetch+0x68>)
 800abfc:	f00e fca0 	bl	8019540 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac06:	d102      	bne.n	800ac0e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ac08:	f009 fd3a 	bl	8014680 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ac0c:	e7d3      	b.n	800abb6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	20009354 	.word	0x20009354

0800ac18 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ac20:	4810      	ldr	r0, [pc, #64]	; (800ac64 <tcpip_thread+0x4c>)
 800ac22:	f00e fc8d 	bl	8019540 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ac26:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <tcpip_thread+0x50>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d005      	beq.n	800ac3a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ac2e:	4b0e      	ldr	r3, [pc, #56]	; (800ac68 <tcpip_thread+0x50>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a0e      	ldr	r2, [pc, #56]	; (800ac6c <tcpip_thread+0x54>)
 800ac34:	6812      	ldr	r2, [r2, #0]
 800ac36:	4610      	mov	r0, r2
 800ac38:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac3a:	f107 030c 	add.w	r3, r7, #12
 800ac3e:	4619      	mov	r1, r3
 800ac40:	480b      	ldr	r0, [pc, #44]	; (800ac70 <tcpip_thread+0x58>)
 800ac42:	f7ff ffb3 	bl	800abac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d106      	bne.n	800ac5a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ac4c:	4b09      	ldr	r3, [pc, #36]	; (800ac74 <tcpip_thread+0x5c>)
 800ac4e:	2291      	movs	r2, #145	; 0x91
 800ac50:	4909      	ldr	r1, [pc, #36]	; (800ac78 <tcpip_thread+0x60>)
 800ac52:	480a      	ldr	r0, [pc, #40]	; (800ac7c <tcpip_thread+0x64>)
 800ac54:	f00e feae 	bl	80199b4 <iprintf>
      continue;
 800ac58:	e003      	b.n	800ac62 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f80f 	bl	800ac80 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ac62:	e7ea      	b.n	800ac3a <tcpip_thread+0x22>
 800ac64:	20009354 	.word	0x20009354
 800ac68:	20009348 	.word	0x20009348
 800ac6c:	2000934c 	.word	0x2000934c
 800ac70:	20009350 	.word	0x20009350
 800ac74:	0801a974 	.word	0x0801a974
 800ac78:	0801a9a4 	.word	0x0801a9a4
 800ac7c:	0801a9c4 	.word	0x0801a9c4

0800ac80 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d026      	beq.n	800acde <tcpip_thread_handle_msg+0x5e>
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	dc2b      	bgt.n	800acec <tcpip_thread_handle_msg+0x6c>
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <tcpip_thread_handle_msg+0x1e>
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d015      	beq.n	800acc8 <tcpip_thread_handle_msg+0x48>
 800ac9c:	e026      	b.n	800acec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	68db      	ldr	r3, [r3, #12]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	6850      	ldr	r0, [r2, #4]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	6892      	ldr	r2, [r2, #8]
 800acaa:	4611      	mov	r1, r2
 800acac:	4798      	blx	r3
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d004      	beq.n	800acbe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4618      	mov	r0, r3
 800acba:	f003 f8d5 	bl	800de68 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800acbe:	6879      	ldr	r1, [r7, #4]
 800acc0:	2009      	movs	r0, #9
 800acc2:	f002 fa21 	bl	800d108 <memp_free>
      break;
 800acc6:	e018      	b.n	800acfa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	6892      	ldr	r2, [r2, #8]
 800acd0:	4610      	mov	r0, r2
 800acd2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	2008      	movs	r0, #8
 800acd8:	f002 fa16 	bl	800d108 <memp_free>
      break;
 800acdc:	e00d      	b.n	800acfa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	6892      	ldr	r2, [r2, #8]
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
      break;
 800acea:	e006      	b.n	800acfa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800acec:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <tcpip_thread_handle_msg+0x84>)
 800acee:	22cf      	movs	r2, #207	; 0xcf
 800acf0:	4905      	ldr	r1, [pc, #20]	; (800ad08 <tcpip_thread_handle_msg+0x88>)
 800acf2:	4806      	ldr	r0, [pc, #24]	; (800ad0c <tcpip_thread_handle_msg+0x8c>)
 800acf4:	f00e fe5e 	bl	80199b4 <iprintf>
      break;
 800acf8:	bf00      	nop
  }
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	0801a974 	.word	0x0801a974
 800ad08:	0801a9a4 	.word	0x0801a9a4
 800ad0c:	0801a9c4 	.word	0x0801a9c4

0800ad10 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ad1c:	481a      	ldr	r0, [pc, #104]	; (800ad88 <tcpip_inpkt+0x78>)
 800ad1e:	f00e fbd4 	bl	80194ca <sys_mbox_valid>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d105      	bne.n	800ad34 <tcpip_inpkt+0x24>
 800ad28:	4b18      	ldr	r3, [pc, #96]	; (800ad8c <tcpip_inpkt+0x7c>)
 800ad2a:	22fc      	movs	r2, #252	; 0xfc
 800ad2c:	4918      	ldr	r1, [pc, #96]	; (800ad90 <tcpip_inpkt+0x80>)
 800ad2e:	4819      	ldr	r0, [pc, #100]	; (800ad94 <tcpip_inpkt+0x84>)
 800ad30:	f00e fe40 	bl	80199b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ad34:	2009      	movs	r0, #9
 800ad36:	f002 f971 	bl	800d01c <memp_malloc>
 800ad3a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ad42:	f04f 33ff 	mov.w	r3, #4294967295
 800ad46:	e01a      	b.n	800ad7e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	68ba      	ldr	r2, [r7, #8]
 800ad58:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ad60:	6979      	ldr	r1, [r7, #20]
 800ad62:	4809      	ldr	r0, [pc, #36]	; (800ad88 <tcpip_inpkt+0x78>)
 800ad64:	f00e fb58 	bl	8019418 <sys_mbox_trypost>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d006      	beq.n	800ad7c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad6e:	6979      	ldr	r1, [r7, #20]
 800ad70:	2009      	movs	r0, #9
 800ad72:	f002 f9c9 	bl	800d108 <memp_free>
    return ERR_MEM;
 800ad76:	f04f 33ff 	mov.w	r3, #4294967295
 800ad7a:	e000      	b.n	800ad7e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ad7c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20009350 	.word	0x20009350
 800ad8c:	0801a974 	.word	0x0801a974
 800ad90:	0801a9ec 	.word	0x0801a9ec
 800ad94:	0801a9c4 	.word	0x0801a9c4

0800ad98 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ada8:	f003 0318 	and.w	r3, r3, #24
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800adb0:	4a08      	ldr	r2, [pc, #32]	; (800add4 <tcpip_input+0x3c>)
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7ff ffab 	bl	800ad10 <tcpip_inpkt>
 800adba:	4603      	mov	r3, r0
 800adbc:	e005      	b.n	800adca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800adbe:	4a06      	ldr	r2, [pc, #24]	; (800add8 <tcpip_input+0x40>)
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff ffa4 	bl	800ad10 <tcpip_inpkt>
 800adc8:	4603      	mov	r3, r0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	08019229 	.word	0x08019229
 800add8:	080180f5 	.word	0x080180f5

0800addc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ade6:	4819      	ldr	r0, [pc, #100]	; (800ae4c <tcpip_try_callback+0x70>)
 800ade8:	f00e fb6f 	bl	80194ca <sys_mbox_valid>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d106      	bne.n	800ae00 <tcpip_try_callback+0x24>
 800adf2:	4b17      	ldr	r3, [pc, #92]	; (800ae50 <tcpip_try_callback+0x74>)
 800adf4:	f240 125d 	movw	r2, #349	; 0x15d
 800adf8:	4916      	ldr	r1, [pc, #88]	; (800ae54 <tcpip_try_callback+0x78>)
 800adfa:	4817      	ldr	r0, [pc, #92]	; (800ae58 <tcpip_try_callback+0x7c>)
 800adfc:	f00e fdda 	bl	80199b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ae00:	2008      	movs	r0, #8
 800ae02:	f002 f90b 	bl	800d01c <memp_malloc>
 800ae06:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ae0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae12:	e017      	b.n	800ae44 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2201      	movs	r2, #1
 800ae18:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae26:	68f9      	ldr	r1, [r7, #12]
 800ae28:	4808      	ldr	r0, [pc, #32]	; (800ae4c <tcpip_try_callback+0x70>)
 800ae2a:	f00e faf5 	bl	8019418 <sys_mbox_trypost>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d006      	beq.n	800ae42 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae34:	68f9      	ldr	r1, [r7, #12]
 800ae36:	2008      	movs	r0, #8
 800ae38:	f002 f966 	bl	800d108 <memp_free>
    return ERR_MEM;
 800ae3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae40:	e000      	b.n	800ae44 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20009350 	.word	0x20009350
 800ae50:	0801a974 	.word	0x0801a974
 800ae54:	0801a9ec 	.word	0x0801a9ec
 800ae58:	0801a9c4 	.word	0x0801a9c4

0800ae5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ae66:	f001 fc2f 	bl	800c6c8 <lwip_init>

  tcpip_init_done = initfunc;
 800ae6a:	4a17      	ldr	r2, [pc, #92]	; (800aec8 <tcpip_init+0x6c>)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ae70:	4a16      	ldr	r2, [pc, #88]	; (800aecc <tcpip_init+0x70>)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ae76:	2106      	movs	r1, #6
 800ae78:	4815      	ldr	r0, [pc, #84]	; (800aed0 <tcpip_init+0x74>)
 800ae7a:	f00e faab 	bl	80193d4 <sys_mbox_new>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d006      	beq.n	800ae92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ae84:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <tcpip_init+0x78>)
 800ae86:	f240 2261 	movw	r2, #609	; 0x261
 800ae8a:	4913      	ldr	r1, [pc, #76]	; (800aed8 <tcpip_init+0x7c>)
 800ae8c:	4813      	ldr	r0, [pc, #76]	; (800aedc <tcpip_init+0x80>)
 800ae8e:	f00e fd91 	bl	80199b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ae92:	4813      	ldr	r0, [pc, #76]	; (800aee0 <tcpip_init+0x84>)
 800ae94:	f00e fb38 	bl	8019508 <sys_mutex_new>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ae9e:	4b0d      	ldr	r3, [pc, #52]	; (800aed4 <tcpip_init+0x78>)
 800aea0:	f240 2265 	movw	r2, #613	; 0x265
 800aea4:	490f      	ldr	r1, [pc, #60]	; (800aee4 <tcpip_init+0x88>)
 800aea6:	480d      	ldr	r0, [pc, #52]	; (800aedc <tcpip_init+0x80>)
 800aea8:	f00e fd84 	bl	80199b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aeac:	2300      	movs	r3, #0
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	490c      	ldr	r1, [pc, #48]	; (800aee8 <tcpip_init+0x8c>)
 800aeb8:	480c      	ldr	r0, [pc, #48]	; (800aeec <tcpip_init+0x90>)
 800aeba:	f00e fb5d 	bl	8019578 <sys_thread_new>
}
 800aebe:	bf00      	nop
 800aec0:	3708      	adds	r7, #8
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20009348 	.word	0x20009348
 800aecc:	2000934c 	.word	0x2000934c
 800aed0:	20009350 	.word	0x20009350
 800aed4:	0801a974 	.word	0x0801a974
 800aed8:	0801a9fc 	.word	0x0801a9fc
 800aedc:	0801a9c4 	.word	0x0801a9c4
 800aee0:	20009354 	.word	0x20009354
 800aee4:	0801aa20 	.word	0x0801aa20
 800aee8:	0800ac19 	.word	0x0800ac19
 800aeec:	0801aa44 	.word	0x0801aa44

0800aef0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <fs_open+0x16>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d102      	bne.n	800af0c <fs_open+0x1c>
    return ERR_ARG;
 800af06:	f06f 030f 	mvn.w	r3, #15
 800af0a:	e028      	b.n	800af5e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800af0c:	4b16      	ldr	r3, [pc, #88]	; (800af68 <fs_open+0x78>)
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	e020      	b.n	800af54 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	4619      	mov	r1, r3
 800af18:	6838      	ldr	r0, [r7, #0]
 800af1a:	f7f5 f979 	bl	8000210 <strcmp>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d114      	bne.n	800af4e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	68da      	ldr	r2, [r3, #12]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	7c1a      	ldrb	r2, [r3, #16]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800af4a:	2300      	movs	r3, #0
 800af4c:	e007      	b.n	800af5e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	60fb      	str	r3, [r7, #12]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1db      	bne.n	800af12 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800af5a:	f06f 0305 	mvn.w	r3, #5
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	0801fd98 	.word	0x0801fd98

0800af6c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	1ad3      	subs	r3, r2, r3
}
 800af92:	4618      	mov	r0, r3
 800af94:	370c      	adds	r7, #12
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b082      	sub	sp, #8
 800afa2:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800afa4:	20e0      	movs	r0, #224	; 0xe0
 800afa6:	f001 fe95 	bl	800ccd4 <mem_malloc>
 800afaa:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d004      	beq.n	800afbc <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800afb2:	22e0      	movs	r2, #224	; 0xe0
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f00e fd61 	bl	8019a7e <memset>
  }
  return ret;
 800afbc:	687b      	ldr	r3, [r7, #4]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b082      	sub	sp, #8
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fce3 	bl	800c9a0 <mem_free>
  }
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b082      	sub	sp, #8
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800afea:	22b0      	movs	r2, #176	; 0xb0
 800afec:	2100      	movs	r1, #0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f00e fd45 	bl	8019a7e <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b002:	20b0      	movs	r0, #176	; 0xb0
 800b004:	f001 fe66 	bl	800ccd4 <mem_malloc>
 800b008:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <http_state_alloc+0x1a>
    http_state_init(ret);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7ff ffe6 	bl	800afe2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b016:	687b      	ldr	r3, [r7, #4]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d007      	beq.n	800b040 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	695b      	ldr	r3, [r3, #20]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ff99 	bl	800af6c <fs_close>
    hs->handle = NULL;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d007      	beq.n	800b058 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff ffba 	bl	800afc6 <http_ssi_state_free>
    hs->ssi = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d007      	beq.n	800b070 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	4618      	mov	r0, r3
 800b066:	f002 feff 	bl	800de68 <pbuf_free>
    hs->req = NULL;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b070:	bf00      	nop
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d005      	beq.n	800b092 <http_state_free+0x1a>
    http_state_eof(hs);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff ffca 	bl	800b020 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 fc87 	bl	800c9a0 <mem_free>
  }
}
 800b092:	bf00      	nop
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
 800b0a8:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d106      	bne.n	800b0be <http_write+0x22>
 800b0b0:	4b2c      	ldr	r3, [pc, #176]	; (800b164 <http_write+0xc8>)
 800b0b2:	f240 2219 	movw	r2, #537	; 0x219
 800b0b6:	492c      	ldr	r1, [pc, #176]	; (800b168 <http_write+0xcc>)
 800b0b8:	482c      	ldr	r0, [pc, #176]	; (800b16c <http_write+0xd0>)
 800b0ba:	f00e fc7b 	bl	80199b4 <iprintf>
  len = *length;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	881b      	ldrh	r3, [r3, #0]
 800b0c2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b0c4:	8afb      	ldrh	r3, [r7, #22]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d101      	bne.n	800b0ce <http_write+0x32>
    return ERR_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e045      	b.n	800b15a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b0d4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b0d6:	8aba      	ldrh	r2, [r7, #20]
 800b0d8:	8afb      	ldrh	r3, [r7, #22]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d201      	bcs.n	800b0e2 <http_write+0x46>
    len = max_len;
 800b0de:	8abb      	ldrh	r3, [r7, #20]
 800b0e0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b0ea:	8afa      	ldrh	r2, [r7, #22]
 800b0ec:	8abb      	ldrh	r3, [r7, #20]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d901      	bls.n	800b0f6 <http_write+0x5a>
    len = max_len;
 800b0f2:	8abb      	ldrh	r3, [r7, #20]
 800b0f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	8afa      	ldrh	r2, [r7, #22]
 800b0fa:	68b9      	ldr	r1, [r7, #8]
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f007 fc57 	bl	80129b0 <tcp_write>
 800b102:	4603      	mov	r3, r0
 800b104:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b10e:	d10f      	bne.n	800b130 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b120:	2b08      	cmp	r3, #8
 800b122:	d902      	bls.n	800b12a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b124:	2301      	movs	r3, #1
 800b126:	82fb      	strh	r3, [r7, #22]
 800b128:	e002      	b.n	800b130 <http_write+0x94>
      } else {
        len /= 2;
 800b12a:	8afb      	ldrh	r3, [r7, #22]
 800b12c:	085b      	lsrs	r3, r3, #1
 800b12e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b130:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b138:	d102      	bne.n	800b140 <http_write+0xa4>
 800b13a:	8afb      	ldrh	r3, [r7, #22]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d8da      	bhi.n	800b0f6 <http_write+0x5a>

  if (err == ERR_OK) {
 800b140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d103      	bne.n	800b150 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	8afa      	ldrh	r2, [r7, #22]
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	e002      	b.n	800b156 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b156:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	0801aad0 	.word	0x0801aad0
 800b168:	0801ab08 	.word	0x0801ab08
 800b16c:	0801ab18 	.word	0x0801ab18

0800b170 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	4613      	mov	r3, r2
 800b17c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b17e:	2100      	movs	r1, #0
 800b180:	68f8      	ldr	r0, [r7, #12]
 800b182:	f004 fcd3 	bl	800fb2c <tcp_arg>
  altcp_recv(pcb, NULL);
 800b186:	2100      	movs	r1, #0
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f004 fce1 	bl	800fb50 <tcp_recv>
  altcp_err(pcb, NULL);
 800b18e:	2100      	movs	r1, #0
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f004 fd21 	bl	800fbd8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b196:	2200      	movs	r2, #0
 800b198:	2100      	movs	r1, #0
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f004 fd56 	bl	800fc4c <tcp_poll>
  altcp_sent(pcb, NULL);
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f004 fcf6 	bl	800fb94 <tcp_sent>
  if (hs != NULL) {
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800b1ae:	68b8      	ldr	r0, [r7, #8]
 800b1b0:	f7ff ff62 	bl	800b078 <http_state_free>
  }

  if (abort_conn) {
 800b1b4:	79fb      	ldrb	r3, [r7, #7]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d004      	beq.n	800b1c4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f003 fbf8 	bl	800e9b0 <tcp_abort>
    return ERR_OK;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e00f      	b.n	800b1e4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f003 fb09 	bl	800e7dc <tcp_close>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b1d6:	2204      	movs	r2, #4
 800b1d8:	4904      	ldr	r1, [pc, #16]	; (800b1ec <http_close_or_abort_conn+0x7c>)
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	f004 fd36 	bl	800fc4c <tcp_poll>
  }
  return err;
 800b1e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	0800c22b 	.word	0x0800c22b

0800b1f0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b082      	sub	sp, #8
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff ffb6 	bl	800b170 <http_close_or_abort_conn>
 800b204:	4603      	mov	r3, r0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff ffe8 	bl	800b1f0 <http_close_conn>
  }
}
 800b220:	bf00      	nop
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <extract_uri_parameters+0x18>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d101      	bne.n	800b244 <extract_uri_parameters+0x1c>
    return (0);
 800b240:	2300      	movs	r3, #0
 800b242:	e04b      	b.n	800b2dc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b248:	2300      	movs	r3, #0
 800b24a:	613b      	str	r3, [r7, #16]
 800b24c:	e03f      	b.n	800b2ce <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	320c      	adds	r2, #12
 800b254:	6979      	ldr	r1, [r7, #20]
 800b256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b25e:	2126      	movs	r1, #38	; 0x26
 800b260:	6978      	ldr	r0, [r7, #20]
 800b262:	f00e fc14 	bl	8019a8e <strchr>
 800b266:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d006      	beq.n	800b27c <extract_uri_parameters+0x54>
      *pair = '\0';
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
      pair++;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	3301      	adds	r3, #1
 800b278:	617b      	str	r3, [r7, #20]
 800b27a:	e00c      	b.n	800b296 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b27c:	2120      	movs	r1, #32
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f00e fc05 	bl	8019a8e <strchr>
 800b284:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2200      	movs	r2, #0
 800b290:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b296:	213d      	movs	r1, #61	; 0x3d
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f00e fbf8 	bl	8019a8e <strchr>
 800b29e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00a      	beq.n	800b2bc <extract_uri_parameters+0x94>
      *equals = '\0';
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1c59      	adds	r1, r3, #1
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	321c      	adds	r2, #28
 800b2b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b2ba:	e005      	b.n	800b2c8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	693a      	ldr	r2, [r7, #16]
 800b2c0:	321c      	adds	r2, #28
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	613b      	str	r3, [r7, #16]
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	2b0f      	cmp	r3, #15
 800b2d2:	dc02      	bgt.n	800b2da <extract_uri_parameters+0xb2>
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1b9      	bne.n	800b24e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b2da:	693b      	ldr	r3, [r7, #16]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d106      	bne.n	800b300 <get_tag_insert+0x1c>
 800b2f2:	4b45      	ldr	r3, [pc, #276]	; (800b408 <get_tag_insert+0x124>)
 800b2f4:	f44f 7241 	mov.w	r2, #772	; 0x304
 800b2f8:	4944      	ldr	r1, [pc, #272]	; (800b40c <get_tag_insert+0x128>)
 800b2fa:	4845      	ldr	r0, [pc, #276]	; (800b410 <get_tag_insert+0x12c>)
 800b2fc:	f00e fb5a 	bl	80199b4 <iprintf>
  ssi = hs->ssi;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d106      	bne.n	800b31a <get_tag_insert+0x36>
 800b30c:	4b3e      	ldr	r3, [pc, #248]	; (800b408 <get_tag_insert+0x124>)
 800b30e:	f240 3206 	movw	r2, #774	; 0x306
 800b312:	4940      	ldr	r1, [pc, #256]	; (800b414 <get_tag_insert+0x130>)
 800b314:	483e      	ldr	r0, [pc, #248]	; (800b410 <get_tag_insert+0x12c>)
 800b316:	f00e fb4d 	bl	80199b4 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	3312      	adds	r3, #18
 800b31e:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800b320:	4b3d      	ldr	r3, [pc, #244]	; (800b418 <get_tag_insert+0x134>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d011      	beq.n	800b34c <get_tag_insert+0x68>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800b328:	4b3b      	ldr	r3, [pc, #236]	; (800b418 <get_tag_insert+0x134>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	f102 011b 	add.w	r1, r2, #27
 800b332:	22c0      	movs	r2, #192	; 0xc0
 800b334:	6938      	ldr	r0, [r7, #16]
 800b336:	4798      	blx	r3
 800b338:	4603      	mov	r3, r0
 800b33a:	461a      	mov	r2, r3
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	89db      	ldrh	r3, [r3, #14]
 800b344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b348:	4293      	cmp	r3, r2
 800b34a:	d159      	bne.n	800b400 <get_tag_insert+0x11c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	3312      	adds	r3, #18
 800b350:	4618      	mov	r0, r3
 800b352:	f7f4 ff67 	bl	8000224 <strlen>
 800b356:	4603      	mov	r3, r0
 800b358:	2ba6      	cmp	r3, #166	; 0xa6
 800b35a:	d818      	bhi.n	800b38e <get_tag_insert+0xaa>
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	3312      	adds	r3, #18
 800b360:	4618      	mov	r0, r3
 800b362:	f7f4 ff5f 	bl	8000224 <strlen>
 800b366:	4603      	mov	r3, r0
 800b368:	2b09      	cmp	r3, #9
 800b36a:	d810      	bhi.n	800b38e <get_tag_insert+0xaa>
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	3312      	adds	r3, #18
 800b370:	4618      	mov	r0, r3
 800b372:	f7f4 ff57 	bl	8000224 <strlen>
 800b376:	4603      	mov	r3, r0
 800b378:	2ba6      	cmp	r3, #166	; 0xa6
 800b37a:	d806      	bhi.n	800b38a <get_tag_insert+0xa6>
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	3312      	adds	r3, #18
 800b380:	4618      	mov	r0, r3
 800b382:	f7f4 ff4f 	bl	8000224 <strlen>
 800b386:	4603      	mov	r3, r0
 800b388:	e002      	b.n	800b390 <get_tag_insert+0xac>
 800b38a:	23a7      	movs	r3, #167	; 0xa7
 800b38c:	e000      	b.n	800b390 <get_tag_insert+0xac>
 800b38e:	2309      	movs	r3, #9
 800b390:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	331b      	adds	r3, #27
 800b396:	2212      	movs	r2, #18
 800b398:	4920      	ldr	r1, [pc, #128]	; (800b41c <get_tag_insert+0x138>)
 800b39a:	4618      	mov	r0, r3
 800b39c:	f00e fc10 	bl	8019bc0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3312      	adds	r3, #18
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f00e fc07 	bl	8019bc0 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3312      	adds	r3, #18
 800b3b6:	3318      	adds	r3, #24
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	3303      	adds	r3, #3
 800b3be:	2207      	movs	r2, #7
 800b3c0:	4917      	ldr	r1, [pc, #92]	; (800b420 <get_tag_insert+0x13c>)
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f00e fbfc 	bl	8019bc0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3319      	adds	r3, #25
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	331b      	adds	r3, #27
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7f4 ff23 	bl	8000224 <strlen>
 800b3de:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e6:	d306      	bcc.n	800b3f6 <get_tag_insert+0x112>
 800b3e8:	4b07      	ldr	r3, [pc, #28]	; (800b408 <get_tag_insert+0x124>)
 800b3ea:	f240 323f 	movw	r2, #831	; 0x33f
 800b3ee:	490d      	ldr	r1, [pc, #52]	; (800b424 <get_tag_insert+0x140>)
 800b3f0:	4807      	ldr	r0, [pc, #28]	; (800b410 <get_tag_insert+0x12c>)
 800b3f2:	f00e fadf 	bl	80199b4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	81da      	strh	r2, [r3, #14]
 800b3fe:	e000      	b.n	800b402 <get_tag_insert+0x11e>
          return;
 800b400:	bf00      	nop
}
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0801aad0 	.word	0x0801aad0
 800b40c:	0801ab40 	.word	0x0801ab40
 800b410:	0801ab18 	.word	0x0801ab18
 800b414:	0801ab4c 	.word	0x0801ab4c
 800b418:	20009798 	.word	0x20009798
 800b41c:	0801ab58 	.word	0x0801ab58
 800b420:	0801ab6c 	.word	0x0801ab6c
 800b424:	0801ab74 	.word	0x0801ab74

0800b428 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d105      	bne.n	800b446 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f7ff fee6 	bl	800b20e <http_eof>
    return 0;
 800b442:	2300      	movs	r3, #0
 800b444:	e016      	b.n	800b474 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fd98 	bl	800af80 <fs_bytes_left>
 800b450:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	dc05      	bgt.n	800b464 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f7ff fed7 	bl	800b20e <http_eof>
    return 0;
 800b460:	2300      	movs	r3, #0
 800b462:	e007      	b.n	800b474 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b464:	4b05      	ldr	r3, [pc, #20]	; (800b47c <http_check_eof+0x54>)
 800b466:	f240 429d 	movw	r2, #1181	; 0x49d
 800b46a:	4905      	ldr	r1, [pc, #20]	; (800b480 <http_check_eof+0x58>)
 800b46c:	4805      	ldr	r0, [pc, #20]	; (800b484 <http_check_eof+0x5c>)
 800b46e:	f00e faa1 	bl	80199b4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b472:	2301      	movs	r3, #1
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	0801aad0 	.word	0x0801aad0
 800b480:	0801ab84 	.word	0x0801ab84
 800b484:	0801ab18 	.word	0x0801ab18

0800b488 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d803      	bhi.n	800b4aa <http_send_data_nonssi+0x22>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	e001      	b.n	800b4ae <http_send_data_nonssi+0x26>
 800b4aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4ae:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	6999      	ldr	r1, [r3, #24]
 800b4b4:	f107 020c 	add.w	r2, r7, #12
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7ff fdee 	bl	800b09c <http_write>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b4c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d10d      	bne.n	800b4e8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	89ba      	ldrh	r2, [r7, #12]
 800b4d6:	441a      	add	r2, r3
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e0:	89ba      	ldrh	r2, [r7, #12]
 800b4e2:	1a9a      	subs	r2, r3, r2
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
	...

0800b4f4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b4fe:	2300      	movs	r3, #0
 800b500:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b50a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <http_send_data_ssi+0x2c>
 800b512:	4b87      	ldr	r3, [pc, #540]	; (800b730 <http_send_data_ssi+0x23c>)
 800b514:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b518:	4986      	ldr	r1, [pc, #536]	; (800b734 <http_send_data_ssi+0x240>)
 800b51a:	4887      	ldr	r0, [pc, #540]	; (800b738 <http_send_data_ssi+0x244>)
 800b51c:	f00e fa4a 	bl	80199b4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b526:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	429a      	cmp	r2, r3
 800b532:	f240 826f 	bls.w	800ba14 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	699b      	ldr	r3, [r3, #24]
 800b53e:	1ad3      	subs	r3, r2, r3
 800b540:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b544:	4293      	cmp	r3, r2
 800b546:	dc06      	bgt.n	800b556 <http_send_data_ssi+0x62>
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	b29b      	uxth	r3, r3
 800b554:	e001      	b.n	800b55a <http_send_data_ssi+0x66>
 800b556:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b55a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	6999      	ldr	r1, [r3, #24]
 800b560:	f107 020e 	add.w	r2, r7, #14
 800b564:	2300      	movs	r3, #0
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7ff fd98 	bl	800b09c <http_write>
 800b56c:	4603      	mov	r3, r0
 800b56e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10d      	bne.n	800b594 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b578:	2301      	movs	r3, #1
 800b57a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	89fa      	ldrh	r2, [r7, #14]
 800b582:	441a      	add	r2, r3
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58c:	89fa      	ldrh	r2, [r7, #14]
 800b58e:	1a9a      	subs	r2, r3, r2
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f040 823a 	bne.w	800ba14 <http_send_data_ssi+0x520>
      return data_to_send;
 800b5a0:	7dbb      	ldrb	r3, [r7, #22]
 800b5a2:	e280      	b.n	800baa6 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b5a4:	89fb      	ldrh	r3, [r7, #14]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <http_send_data_ssi+0xba>
      return data_to_send;
 800b5aa:	7dbb      	ldrb	r3, [r7, #22]
 800b5ac:	e27b      	b.n	800baa6 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	f200 822c 	bhi.w	800ba12 <http_send_data_ssi+0x51e>
 800b5ba:	a201      	add	r2, pc, #4	; (adr r2, 800b5c0 <http_send_data_ssi+0xcc>)
 800b5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c0:	0800b5d5 	.word	0x0800b5d5
 800b5c4:	0800b627 	.word	0x0800b627
 800b5c8:	0800b699 	.word	0x0800b699
 800b5cc:	0800b7e1 	.word	0x0800b7e1
 800b5d0:	0800b929 	.word	0x0800b929
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	757b      	strb	r3, [r7, #21]
 800b5d8:	e017      	b.n	800b60a <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	781a      	ldrb	r2, [r3, #0]
 800b5e0:	7d7b      	ldrb	r3, [r7, #21]
 800b5e2:	4956      	ldr	r1, [pc, #344]	; (800b73c <http_send_data_ssi+0x248>)
 800b5e4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d10a      	bne.n	800b604 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	7d7a      	ldrb	r2, [r7, #21]
 800b5f2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	2201      	movs	r2, #1
 800b600:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b602:	e005      	b.n	800b610 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b604:	7d7b      	ldrb	r3, [r7, #21]
 800b606:	3301      	adds	r3, #1
 800b608:	757b      	strb	r3, [r7, #21]
 800b60a:	7d7b      	ldrb	r3, [r7, #21]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d9e4      	bls.n	800b5da <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	1e5a      	subs	r2, r3, #1
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	1c5a      	adds	r2, r3, #1
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	601a      	str	r2, [r3, #0]
        break;
 800b624:	e1f6      	b.n	800ba14 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	7c1b      	ldrb	r3, [r3, #16]
 800b62a:	461a      	mov	r2, r3
 800b62c:	4b43      	ldr	r3, [pc, #268]	; (800b73c <http_send_data_ssi+0x248>)
 800b62e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	8992      	ldrh	r2, [r2, #12]
 800b636:	4413      	add	r3, r2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d107      	bne.n	800b64e <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	2200      	movs	r2, #0
 800b642:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800b64c:	e1e2      	b.n	800ba14 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	781a      	ldrb	r2, [r3, #0]
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	7c1b      	ldrb	r3, [r3, #16]
 800b658:	4619      	mov	r1, r3
 800b65a:	4b38      	ldr	r3, [pc, #224]	; (800b73c <http_send_data_ssi+0x248>)
 800b65c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b660:	6939      	ldr	r1, [r7, #16]
 800b662:	8989      	ldrh	r1, [r1, #12]
 800b664:	440b      	add	r3, r1
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d106      	bne.n	800b67a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	899b      	ldrh	r3, [r3, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	b29a      	uxth	r2, r3
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	819a      	strh	r2, [r3, #12]
 800b678:	e003      	b.n	800b682 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	1e5a      	subs	r2, r3, #1
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	1c5a      	adds	r2, r3, #1
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	601a      	str	r2, [r3, #0]
        }
        break;
 800b696:	e1bd      	b.n	800ba14 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	899b      	ldrh	r3, [r3, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d11e      	bne.n	800b6de <http_send_data_ssi+0x1ea>
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	d00e      	beq.n	800b6c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d009      	beq.n	800b6c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b0a      	cmp	r3, #10
 800b6bc:	d004      	beq.n	800b6c8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b6c4:	2b0d      	cmp	r3, #13
 800b6c6:	d10a      	bne.n	800b6de <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	1e5a      	subs	r2, r3, #1
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	601a      	str	r2, [r3, #0]
          break;
 800b6dc:	e19a      	b.n	800ba14 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	7c1b      	ldrb	r3, [r3, #16]
 800b6e8:	4914      	ldr	r1, [pc, #80]	; (800b73c <http_send_data_ssi+0x248>)
 800b6ea:	00db      	lsls	r3, r3, #3
 800b6ec:	440b      	add	r3, r1
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d013      	beq.n	800b71e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d00e      	beq.n	800b71e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	2b09      	cmp	r3, #9
 800b708:	d009      	beq.n	800b71e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b710:	2b0a      	cmp	r3, #10
 800b712:	d004      	beq.n	800b71e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	2b0d      	cmp	r3, #13
 800b71c:	d13f      	bne.n	800b79e <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	899b      	ldrh	r3, [r3, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10c      	bne.n	800b740 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800b72e:	e04c      	b.n	800b7ca <http_send_data_ssi+0x2d6>
 800b730:	0801aad0 	.word	0x0801aad0
 800b734:	0801ab4c 	.word	0x0801ab4c
 800b738:	0801ab18 	.word	0x0801ab18
 800b73c:	0801fde8 	.word	0x0801fde8
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2203      	movs	r2, #3
 800b744:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	899b      	ldrh	r3, [r3, #12]
 800b74c:	2bff      	cmp	r3, #255	; 0xff
 800b74e:	d906      	bls.n	800b75e <http_send_data_ssi+0x26a>
 800b750:	4b93      	ldr	r3, [pc, #588]	; (800b9a0 <http_send_data_ssi+0x4ac>)
 800b752:	f240 523a 	movw	r2, #1338	; 0x53a
 800b756:	4993      	ldr	r1, [pc, #588]	; (800b9a4 <http_send_data_ssi+0x4b0>)
 800b758:	4893      	ldr	r0, [pc, #588]	; (800b9a8 <http_send_data_ssi+0x4b4>)
 800b75a:	f00e f92b 	bl	80199b4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	899b      	ldrh	r3, [r3, #12]
 800b762:	b2da      	uxtb	r2, r3
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	899b      	ldrh	r3, [r3, #12]
 800b76c:	461a      	mov	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	4413      	add	r3, r2
 800b772:	2200      	movs	r2, #0
 800b774:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	781a      	ldrb	r2, [r3, #0]
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	7c1b      	ldrb	r3, [r3, #16]
 800b780:	498a      	ldr	r1, [pc, #552]	; (800b9ac <http_send_data_ssi+0x4b8>)
 800b782:	00db      	lsls	r3, r3, #3
 800b784:	440b      	add	r3, r1
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d103      	bne.n	800b796 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2201      	movs	r2, #1
 800b792:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800b794:	e019      	b.n	800b7ca <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2200      	movs	r2, #0
 800b79a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800b79c:	e015      	b.n	800b7ca <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	899b      	ldrh	r3, [r3, #12]
 800b7a2:	2b07      	cmp	r3, #7
 800b7a4:	d80d      	bhi.n	800b7c2 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	899b      	ldrh	r3, [r3, #12]
 800b7ae:	1c59      	adds	r1, r3, #1
 800b7b0:	b288      	uxth	r0, r1
 800b7b2:	6939      	ldr	r1, [r7, #16]
 800b7b4:	8188      	strh	r0, [r1, #12]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	7812      	ldrb	r2, [r2, #0]
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	440b      	add	r3, r1
 800b7be:	749a      	strb	r2, [r3, #18]
 800b7c0:	e003      	b.n	800b7ca <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	1e5a      	subs	r2, r3, #1
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	601a      	str	r2, [r3, #0]

        break;
 800b7de:	e119      	b.n	800ba14 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	899b      	ldrh	r3, [r3, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11e      	bne.n	800b826 <http_send_data_ssi+0x332>
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	d00e      	beq.n	800b810 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b7f8:	2b09      	cmp	r3, #9
 800b7fa:	d009      	beq.n	800b810 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b0a      	cmp	r3, #10
 800b804:	d004      	beq.n	800b810 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b80c:	2b0d      	cmp	r3, #13
 800b80e:	d10a      	bne.n	800b826 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	689b      	ldr	r3, [r3, #8]
 800b814:	1e5a      	subs	r2, r3, #1
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	1c5a      	adds	r2, r3, #1
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	601a      	str	r2, [r3, #0]
          break;
 800b824:	e0f6      	b.n	800ba14 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	781a      	ldrb	r2, [r3, #0]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	7c1b      	ldrb	r3, [r3, #16]
 800b830:	495e      	ldr	r1, [pc, #376]	; (800b9ac <http_send_data_ssi+0x4b8>)
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	440b      	add	r3, r1
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	6939      	ldr	r1, [r7, #16]
 800b83a:	8989      	ldrh	r1, [r1, #12]
 800b83c:	440b      	add	r3, r1
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d162      	bne.n	800b90a <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	1e5a      	subs	r2, r3, #1
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	899b      	ldrh	r3, [r3, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	b29a      	uxth	r2, r3
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	7c1b      	ldrb	r3, [r3, #16]
 800b868:	4a50      	ldr	r2, [pc, #320]	; (800b9ac <http_send_data_ssi+0x4b8>)
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	4413      	add	r3, r2
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	8992      	ldrh	r2, [r2, #12]
 800b874:	4413      	add	r3, r2
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f040 80cb 	bne.w	800ba14 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b87e:	6838      	ldr	r0, [r7, #0]
 800b880:	f7ff fd30 	bl	800b2e4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2200      	movs	r2, #0
 800b888:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2204      	movs	r2, #4
 800b88e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	685a      	ldr	r2, [r3, #4]
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	699b      	ldr	r3, [r3, #24]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	f240 80b6 	bls.w	800ba14 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	dc06      	bgt.n	800b8c8 <http_send_data_ssi+0x3d4>
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	685a      	ldr	r2, [r3, #4]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	e001      	b.n	800b8cc <http_send_data_ssi+0x3d8>
 800b8c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b8cc:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6999      	ldr	r1, [r3, #24]
 800b8d2:	f107 020e 	add.w	r2, r7, #14
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7ff fbdf 	bl	800b09c <http_write>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b8e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f040 8094 	bne.w	800ba14 <http_send_data_ssi+0x520>
                data_to_send = 1;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	89fa      	ldrh	r2, [r7, #14]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b900:	89fa      	ldrh	r2, [r7, #14]
 800b902:	1a9a      	subs	r2, r3, r2
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	625a      	str	r2, [r3, #36]	; 0x24
 800b908:	e084      	b.n	800ba14 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	1e5a      	subs	r2, r3, #1
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 800b926:	e075      	b.n	800ba14 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	699b      	ldr	r3, [r3, #24]
 800b930:	429a      	cmp	r2, r3
 800b932:	d93d      	bls.n	800b9b0 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	1ad3      	subs	r3, r2, r3
 800b93e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b942:	4293      	cmp	r3, r2
 800b944:	dc06      	bgt.n	800b954 <http_send_data_ssi+0x460>
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	b29b      	uxth	r3, r3
 800b952:	e001      	b.n	800b958 <http_send_data_ssi+0x464>
 800b954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b958:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b95a:	89fb      	ldrh	r3, [r7, #14]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00a      	beq.n	800b976 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	6999      	ldr	r1, [r3, #24]
 800b964:	f107 020e 	add.w	r2, r7, #14
 800b968:	2300      	movs	r3, #0
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fb96 	bl	800b09c <http_write>
 800b970:	4603      	mov	r3, r0
 800b972:	75fb      	strb	r3, [r7, #23]
 800b974:	e001      	b.n	800b97a <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b97a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d148      	bne.n	800ba14 <http_send_data_ssi+0x520>
            data_to_send = 1;
 800b982:	2301      	movs	r3, #1
 800b984:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	89fa      	ldrh	r2, [r7, #14]
 800b98c:	441a      	add	r2, r3
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	89fa      	ldrh	r2, [r7, #14]
 800b998:	1a9a      	subs	r2, r3, r2
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	625a      	str	r2, [r3, #36]	; 0x24
 800b99e:	e039      	b.n	800ba14 <http_send_data_ssi+0x520>
 800b9a0:	0801aad0 	.word	0x0801aad0
 800b9a4:	0801abbc 	.word	0x0801abbc
 800b9a8:	0801ab18 	.word	0x0801ab18
 800b9ac:	0801fde8 	.word	0x0801fde8
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	899a      	ldrh	r2, [r3, #12]
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	89db      	ldrh	r3, [r3, #14]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d222      	bcs.n	800ba02 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	89da      	ldrh	r2, [r3, #14]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	899b      	ldrh	r3, [r3, #12]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	899b      	ldrh	r3, [r3, #12]
 800b9ce:	3318      	adds	r3, #24
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	1cd9      	adds	r1, r3, #3
 800b9d6:	f107 020e 	add.w	r2, r7, #14
 800b9da:	2301      	movs	r3, #1
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff fb5d 	bl	800b09c <http_write>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d112      	bne.n	800ba14 <http_send_data_ssi+0x520>
              data_to_send = 1;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	899a      	ldrh	r2, [r3, #12]
 800b9f6:	89fb      	ldrh	r3, [r7, #14]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	819a      	strh	r2, [r3, #12]
 800ba00:	e008      	b.n	800ba14 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	2200      	movs	r2, #0
 800ba06:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800ba10:	e000      	b.n	800ba14 <http_send_data_ssi+0x520>
        default:
          break;
 800ba12:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d003      	beq.n	800ba26 <http_send_data_ssi+0x532>
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d004      	beq.n	800ba30 <http_send_data_ssi+0x53c>
 800ba26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f43f adba 	beq.w	800b5a4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	d034      	beq.n	800baa4 <http_send_data_ssi+0x5b0>
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	699b      	ldr	r3, [r3, #24]
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d92e      	bls.n	800baa4 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba54:	4293      	cmp	r3, r2
 800ba56:	dc06      	bgt.n	800ba66 <http_send_data_ssi+0x572>
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	e001      	b.n	800ba6a <http_send_data_ssi+0x576>
 800ba66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba6a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	6999      	ldr	r1, [r3, #24]
 800ba70:	f107 020e 	add.w	r2, r7, #14
 800ba74:	2300      	movs	r3, #0
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fb10 	bl	800b09c <http_write>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ba80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10d      	bne.n	800baa4 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	89fa      	ldrh	r2, [r7, #14]
 800ba92:	441a      	add	r2, r3
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9c:	89fa      	ldrh	r2, [r7, #14]
 800ba9e:	1a9a      	subs	r2, r3, r2
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800baa4:	7dbb      	ldrb	r3, [r7, #22]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop

0800bab0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800baba:	2300      	movs	r3, #0
 800babc:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d101      	bne.n	800bac8 <http_send+0x18>
    return 0;
 800bac4:	2300      	movs	r3, #0
 800bac6:	e030      	b.n	800bb2a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d108      	bne.n	800bae2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff fca8 	bl	800b428 <http_check_eof>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d101      	bne.n	800bae2 <http_send+0x32>
      return 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	e023      	b.n	800bb2a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d006      	beq.n	800baf8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff fd01 	bl	800b4f4 <http_send_data_ssi>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73fb      	strb	r3, [r7, #15]
 800baf6:	e005      	b.n	800bb04 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff fcc4 	bl	800b488 <http_send_data_nonssi>
 800bb00:	4603      	mov	r3, r0
 800bb02:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10d      	bne.n	800bb28 <http_send+0x78>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7ff fa35 	bl	800af80 <fs_bytes_left>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	dc05      	bgt.n	800bb28 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7ff fb75 	bl	800b20e <http_eof>
    return 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	e000      	b.n	800bb2a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
	...

0800bb34 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	4a1c      	ldr	r2, [pc, #112]	; (800bbb4 <http_get_404_file+0x80>)
 800bb42:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7ff f9cf 	bl	800aef0 <fs_open>
 800bb52:	4603      	mov	r3, r0
 800bb54:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d024      	beq.n	800bba8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <http_get_404_file+0x84>)
 800bb62:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f7ff f9bf 	bl	800aef0 <fs_open>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bb76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d014      	beq.n	800bba8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	4a0e      	ldr	r2, [pc, #56]	; (800bbbc <http_get_404_file+0x88>)
 800bb82:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f7ff f9af 	bl	800aef0 <fs_open>
 800bb92:	4603      	mov	r3, r0
 800bb94:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800bb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d004      	beq.n	800bba8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]
        return NULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	e000      	b.n	800bbaa <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800bba8:	687b      	ldr	r3, [r7, #4]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0801abd4 	.word	0x0801abd4
 800bbb8:	0801abe0 	.word	0x0801abe0
 800bbbc:	0801abec 	.word	0x0801abec

0800bbc0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08e      	sub	sp, #56	; 0x38
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <http_parse_request+0x24>
 800bbd6:	4b65      	ldr	r3, [pc, #404]	; (800bd6c <http_parse_request+0x1ac>)
 800bbd8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800bbdc:	4964      	ldr	r1, [pc, #400]	; (800bd70 <http_parse_request+0x1b0>)
 800bbde:	4865      	ldr	r0, [pc, #404]	; (800bd74 <http_parse_request+0x1b4>)
 800bbe0:	f00d fee8 	bl	80199b4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d106      	bne.n	800bbf8 <http_parse_request+0x38>
 800bbea:	4b60      	ldr	r3, [pc, #384]	; (800bd6c <http_parse_request+0x1ac>)
 800bbec:	f240 72af 	movw	r2, #1967	; 0x7af
 800bbf0:	4961      	ldr	r1, [pc, #388]	; (800bd78 <http_parse_request+0x1b8>)
 800bbf2:	4860      	ldr	r0, [pc, #384]	; (800bd74 <http_parse_request+0x1b4>)
 800bbf4:	f00d fede 	bl	80199b4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	695b      	ldr	r3, [r3, #20]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <http_parse_request+0x48>
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d002      	beq.n	800bc0e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800bc08:	f06f 0307 	mvn.w	r3, #7
 800bc0c:	e0a9      	b.n	800bd62 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d103      	bne.n	800bc1e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1a:	621a      	str	r2, [r3, #32]
 800bc1c:	e005      	b.n	800bc2a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc24:	4618      	mov	r0, r3
 800bc26:	f002 f9ed 	bl	800e004 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800bc2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc2c:	f002 f9c2 	bl	800dfb4 <pbuf_ref>

  if (hs->req->next != NULL) {
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d012      	beq.n	800bc60 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	891b      	ldrh	r3, [r3, #8]
 800bc40:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bc44:	4293      	cmp	r3, r2
 800bc46:	bf28      	it	cs
 800bc48:	4613      	movcs	r3, r2
 800bc4a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6a18      	ldr	r0, [r3, #32]
 800bc50:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bc52:	2300      	movs	r3, #0
 800bc54:	4949      	ldr	r1, [pc, #292]	; (800bd7c <http_parse_request+0x1bc>)
 800bc56:	f002 fb0d 	bl	800e274 <pbuf_copy_partial>
    data = httpd_req_buf;
 800bc5a:	4b48      	ldr	r3, [pc, #288]	; (800bd7c <http_parse_request+0x1bc>)
 800bc5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5e:	e005      	b.n	800bc6c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	895b      	ldrh	r3, [r3, #10]
 800bc6a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800bc6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc6e:	2b06      	cmp	r3, #6
 800bc70:	d962      	bls.n	800bd38 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800bc72:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc74:	461a      	mov	r2, r3
 800bc76:	4942      	ldr	r1, [pc, #264]	; (800bd80 <http_parse_request+0x1c0>)
 800bc78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc7a:	f000 fcbb 	bl	800c5f4 <lwip_strnstr>
 800bc7e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d058      	beq.n	800bd38 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800bc86:	2300      	movs	r3, #0
 800bc88:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800bc8a:	2204      	movs	r2, #4
 800bc8c:	493d      	ldr	r1, [pc, #244]	; (800bd84 <http_parse_request+0x1c4>)
 800bc8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc90:	f00d ff0a 	bl	8019aa8 <strncmp>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d116      	bne.n	800bcc8 <http_parse_request+0x108>
        sp1 = data + 3;
 800bc9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc9c:	3303      	adds	r3, #3
 800bc9e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800bcb0:	69fb      	ldr	r3, [r7, #28]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	8b7a      	ldrh	r2, [r7, #26]
 800bcb6:	4934      	ldr	r1, [pc, #208]	; (800bd88 <http_parse_request+0x1c8>)
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fc9b 	bl	800c5f4 <lwip_strnstr>
 800bcbe:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d111      	bne.n	800bcea <http_parse_request+0x12a>
 800bcc6:	e006      	b.n	800bcd6 <http_parse_request+0x116>
        data[4] = 0;
 800bcc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcca:	3304      	adds	r3, #4
 800bccc:	2200      	movs	r2, #0
 800bcce:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800bcd0:	f06f 030f 	mvn.w	r3, #15
 800bcd4:	e045      	b.n	800bd62 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	8b7a      	ldrh	r2, [r7, #26]
 800bcdc:	4928      	ldr	r1, [pc, #160]	; (800bd80 <http_parse_request+0x1c0>)
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fc88 	bl	800c5f4 <lwip_strnstr>
 800bce4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800bce6:	2301      	movs	r3, #1
 800bce8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	3301      	adds	r3, #1
 800bcee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01e      	beq.n	800bd38 <http_parse_request+0x178>
 800bcfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d91a      	bls.n	800bd38 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800bd02:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bd04:	461a      	mov	r2, r3
 800bd06:	4921      	ldr	r1, [pc, #132]	; (800bd8c <http_parse_request+0x1cc>)
 800bd08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bd0a:	f000 fc73 	bl	800c5f4 <lwip_strnstr>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d011      	beq.n	800bd38 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	3301      	adds	r3, #1
 800bd18:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bd20:	8b3b      	ldrh	r3, [r7, #24]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	2200      	movs	r2, #0
 800bd28:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bd2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd2c:	6979      	ldr	r1, [r7, #20]
 800bd2e:	68b8      	ldr	r0, [r7, #8]
 800bd30:	f000 f880 	bl	800be34 <http_find_file>
 800bd34:	4603      	mov	r3, r0
 800bd36:	e014      	b.n	800bd62 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f002 f921 	bl	800df84 <pbuf_clen>
 800bd42:	4603      	mov	r3, r0
 800bd44:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	891b      	ldrh	r3, [r3, #8]
 800bd4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd50:	d205      	bcs.n	800bd5e <http_parse_request+0x19e>
 800bd52:	8a7b      	ldrh	r3, [r7, #18]
 800bd54:	2b05      	cmp	r3, #5
 800bd56:	d802      	bhi.n	800bd5e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bd58:	f06f 0304 	mvn.w	r3, #4
 800bd5c:	e001      	b.n	800bd62 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bd5e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3738      	adds	r7, #56	; 0x38
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	0801aad0 	.word	0x0801aad0
 800bd70:	0801abf8 	.word	0x0801abf8
 800bd74:	0801ab18 	.word	0x0801ab18
 800bd78:	0801ab40 	.word	0x0801ab40
 800bd7c:	20009358 	.word	0x20009358
 800bd80:	0801ac04 	.word	0x0801ac04
 800bd84:	0801ac08 	.word	0x0801ac08
 800bd88:	0801ac10 	.word	0x0801ac10
 800bd8c:	0801ac14 	.word	0x0801ac14

0800bd90 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d040      	beq.n	800be26 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800bda4:	2300      	movs	r3, #0
 800bda6:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800bda8:	213f      	movs	r1, #63	; 0x3f
 800bdaa:	6838      	ldr	r0, [r7, #0]
 800bdac:	f00d fe6f 	bl	8019a8e <strchr>
 800bdb0:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	613b      	str	r3, [r7, #16]
    ext = uri;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800bdc6:	212e      	movs	r1, #46	; 0x2e
 800bdc8:	6938      	ldr	r0, [r7, #16]
 800bdca:	f00d fe60 	bl	8019a8e <strchr>
 800bdce:	6138      	str	r0, [r7, #16]
 800bdd0:	e009      	b.n	800bde6 <http_uri_is_ssi+0x56>
      ext = sub;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	617b      	str	r3, [r7, #20]
      sub++;
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800bddc:	212e      	movs	r1, #46	; 0x2e
 800bdde:	6938      	ldr	r0, [r7, #16]
 800bde0:	f00d fe55 	bl	8019a8e <strchr>
 800bde4:	6138      	str	r0, [r7, #16]
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1f2      	bne.n	800bdd2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800bdec:	2300      	movs	r3, #0
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	e010      	b.n	800be14 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800bdf2:	4a0f      	ldr	r2, [pc, #60]	; (800be30 <http_uri_is_ssi+0xa0>)
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6978      	ldr	r0, [r7, #20]
 800bdfe:	f000 fc2f 	bl	800c660 <lwip_stricmp>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800be08:	2301      	movs	r3, #1
 800be0a:	76fb      	strb	r3, [r7, #27]
        break;
 800be0c:	e005      	b.n	800be1a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	3301      	adds	r3, #1
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b04      	cmp	r3, #4
 800be18:	d9eb      	bls.n	800bdf2 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <http_uri_is_ssi+0x96>
      *param = '?';
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	223f      	movs	r2, #63	; 0x3f
 800be24:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800be26:	7efb      	ldrb	r3, [r7, #27]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3720      	adds	r7, #32
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	0801fdac 	.word	0x0801fdac

0800be34 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800be34:	b590      	push	{r4, r7, lr}
 800be36:	b093      	sub	sp, #76	; 0x4c
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800be48:	2300      	movs	r3, #0
 800be4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	4618      	mov	r0, r3
 800be52:	f7f4 f9e7 	bl	8000224 <strlen>
 800be56:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800be58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d072      	beq.n	800bf44 <http_find_file+0x110>
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	3b01      	subs	r3, #1
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b2f      	cmp	r3, #47	; 0x2f
 800be6a:	d16b      	bne.n	800bf44 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800be6c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800be6e:	4a80      	ldr	r2, [pc, #512]	; (800c070 <http_find_file+0x23c>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d102      	bne.n	800be7a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	2b01      	cmp	r3, #1
 800be78:	d164      	bne.n	800bf44 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	3b01      	subs	r3, #1
 800be7e:	2b3f      	cmp	r3, #63	; 0x3f
 800be80:	bf28      	it	cs
 800be82:	233f      	movcs	r3, #63	; 0x3f
 800be84:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800be86:	6a3b      	ldr	r3, [r7, #32]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6a3a      	ldr	r2, [r7, #32]
 800be90:	4619      	mov	r1, r3
 800be92:	4877      	ldr	r0, [pc, #476]	; (800c070 <http_find_file+0x23c>)
 800be94:	f00d fe94 	bl	8019bc0 <memcpy>
      http_uri_buf[copy_len] = 0;
 800be98:	4a75      	ldr	r2, [pc, #468]	; (800c070 <http_find_file+0x23c>)
 800be9a:	6a3b      	ldr	r3, [r7, #32]
 800be9c:	4413      	add	r3, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bea2:	2300      	movs	r3, #0
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea6:	e04a      	b.n	800bf3e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d028      	beq.n	800bf00 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800beb4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d01e      	beq.n	800befa <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800bebc:	4a6d      	ldr	r2, [pc, #436]	; (800c074 <http_find_file+0x240>)
 800bebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bec0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7f4 f9ad 	bl	8000224 <strlen>
 800beca:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800becc:	69ba      	ldr	r2, [r7, #24]
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	4293      	cmp	r3, r2
 800bed2:	bf28      	it	cs
 800bed4:	4613      	movcs	r3, r2
 800bed6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	4a65      	ldr	r2, [pc, #404]	; (800c070 <http_find_file+0x23c>)
 800bedc:	1898      	adds	r0, r3, r2
 800bede:	4a65      	ldr	r2, [pc, #404]	; (800c074 <http_find_file+0x240>)
 800bee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4619      	mov	r1, r3
 800beea:	f00d fe69 	bl	8019bc0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800beee:	6a3a      	ldr	r2, [r7, #32]
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	4413      	add	r3, r2
 800bef4:	4a5e      	ldr	r2, [pc, #376]	; (800c070 <http_find_file+0x23c>)
 800bef6:	2100      	movs	r1, #0
 800bef8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800befa:	4b5d      	ldr	r3, [pc, #372]	; (800c070 <http_find_file+0x23c>)
 800befc:	62bb      	str	r3, [r7, #40]	; 0x28
 800befe:	e004      	b.n	800bf0a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800bf00:	4a5c      	ldr	r2, [pc, #368]	; (800c074 <http_find_file+0x240>)
 800bf02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf08:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe ffee 	bl	800aef0 <fs_open>
 800bf14:	4603      	mov	r3, r0
 800bf16:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800bf18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10b      	bne.n	800bf38 <http_find_file+0x104>
        uri = file_name;
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800bf28:	4a52      	ldr	r2, [pc, #328]	; (800c074 <http_find_file+0x240>)
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	791b      	ldrb	r3, [r3, #4]
 800bf32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800bf36:	e005      	b.n	800bf44 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bf38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf40:	2b04      	cmp	r3, #4
 800bf42:	d9b1      	bls.n	800bea8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d176      	bne.n	800c038 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	213f      	movs	r1, #63	; 0x3f
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f00d fd9d 	bl	8019a8e <strchr>
 800bf54:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
      params++;
 800bf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf64:	3301      	adds	r3, #1
 800bf66:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800bf68:	4b43      	ldr	r3, [pc, #268]	; (800c078 <http_find_file+0x244>)
 800bf6a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800bf70:	4b42      	ldr	r3, [pc, #264]	; (800c07c <http_find_file+0x248>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d034      	beq.n	800bfe2 <http_find_file+0x1ae>
 800bf78:	4b41      	ldr	r3, [pc, #260]	; (800c080 <http_find_file+0x24c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d030      	beq.n	800bfe2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bf80:	2300      	movs	r3, #0
 800bf82:	633b      	str	r3, [r7, #48]	; 0x30
 800bf84:	e028      	b.n	800bfd8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800bf86:	68b8      	ldr	r0, [r7, #8]
 800bf88:	4b3d      	ldr	r3, [pc, #244]	; (800c080 <http_find_file+0x24c>)
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8e:	00db      	lsls	r3, r3, #3
 800bf90:	4413      	add	r3, r2
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4619      	mov	r1, r3
 800bf96:	f7f4 f93b 	bl	8000210 <strcmp>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d118      	bne.n	800bfd2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800bfa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f7ff f940 	bl	800b228 <extract_uri_parameters>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	4a33      	ldr	r2, [pc, #204]	; (800c078 <http_find_file+0x244>)
 800bfac:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bfae:	4b34      	ldr	r3, [pc, #208]	; (800c080 <http_find_file+0x24c>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	4413      	add	r3, r2
 800bfb8:	685c      	ldr	r4, [r3, #4]
 800bfba:	4b2f      	ldr	r3, [pc, #188]	; (800c078 <http_find_file+0x244>)
 800bfbc:	6819      	ldr	r1, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bfc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfca:	47a0      	blx	r4
 800bfcc:	4603      	mov	r3, r0
 800bfce:	60bb      	str	r3, [r7, #8]
          break;
 800bfd0:	e007      	b.n	800bfe2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	633b      	str	r3, [r7, #48]	; 0x30
 800bfd8:	4b28      	ldr	r3, [pc, #160]	; (800c07c <http_find_file+0x248>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	dbd1      	blt.n	800bf86 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe ff81 	bl	800aef0 <fs_open>
 800bfee:	4603      	mov	r3, r0
 800bff0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800bff2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d102      	bne.n	800c000 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bffe:	e006      	b.n	800c00e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800c000:	f107 0308 	add.w	r3, r7, #8
 800c004:	4619      	mov	r1, r3
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f7ff fd94 	bl	800bb34 <http_get_404_file>
 800c00c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	2b00      	cmp	r3, #0
 800c012:	d011      	beq.n	800c038 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c016:	7c1b      	ldrb	r3, [r3, #16]
 800c018:	f003 0308 	and.w	r3, r3, #8
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d003      	beq.n	800c028 <http_find_file+0x1f4>
        tag_check = 1;
 800c020:	2301      	movs	r3, #1
 800c022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c026:	e007      	b.n	800c038 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c02e:	f7ff feaf 	bl	800bd90 <http_uri_is_ssi>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d106      	bne.n	800c04c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c03e:	f107 0308 	add.w	r3, r7, #8
 800c042:	4619      	mov	r1, r3
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7ff fd75 	bl	800bb34 <http_get_404_file>
 800c04a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c050:	9301      	str	r3, [sp, #4]
 800c052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	4613      	mov	r3, r2
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 f810 	bl	800c084 <http_init_file>
 800c064:	4603      	mov	r3, r0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3744      	adds	r7, #68	; 0x44
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd90      	pop	{r4, r7, pc}
 800c06e:	bf00      	nop
 800c070:	20009758 	.word	0x20009758
 800c074:	0801fdc0 	.word	0x0801fdc0
 800c078:	200097a4 	.word	0x200097a4
 800c07c:	200097a0 	.word	0x200097a0
 800c080:	2000979c 	.word	0x2000979c

0800c084 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b088      	sub	sp, #32
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d07d      	beq.n	800c194 <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d106      	bne.n	800c0ae <http_init_file+0x2a>
 800c0a0:	4b45      	ldr	r3, [pc, #276]	; (800c1b8 <http_init_file+0x134>)
 800c0a2:	f640 120b 	movw	r2, #2315	; 0x90b
 800c0a6:	4945      	ldr	r1, [pc, #276]	; (800c1bc <http_init_file+0x138>)
 800c0a8:	4845      	ldr	r0, [pc, #276]	; (800c1c0 <http_init_file+0x13c>)
 800c0aa:	f00d fc83 	bl	80199b4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c0ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d01c      	beq.n	800c0f0 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c0b6:	f7fe ff72 	bl	800af9e <http_ssi_state_alloc>
 800c0ba:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d016      	beq.n	800c0f0 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	69fa      	ldr	r2, [r7, #28]
 800c0ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	da06      	bge.n	800c114 <http_init_file+0x90>
 800c106:	4b2c      	ldr	r3, [pc, #176]	; (800c1b8 <http_init_file+0x134>)
 800c108:	f640 1234 	movw	r2, #2356	; 0x934
 800c10c:	492d      	ldr	r1, [pc, #180]	; (800c1c4 <http_init_file+0x140>)
 800c10e:	482c      	ldr	r0, [pc, #176]	; (800c1c0 <http_init_file+0x13c>)
 800c110:	f00d fc50 	bl	80199b4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	461a      	mov	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	7c1b      	ldrb	r3, [r3, #16]
 800c12c:	f003 0301 	and.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <http_init_file+0xbe>
 800c134:	4b20      	ldr	r3, [pc, #128]	; (800c1b8 <http_init_file+0x134>)
 800c136:	f640 1243 	movw	r2, #2371	; 0x943
 800c13a:	4923      	ldr	r1, [pc, #140]	; (800c1c8 <http_init_file+0x144>)
 800c13c:	4820      	ldr	r0, [pc, #128]	; (800c1c0 <http_init_file+0x13c>)
 800c13e:	f00d fc39 	bl	80199b4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d032      	beq.n	800c1ae <http_init_file+0x12a>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	7c1b      	ldrb	r3, [r3, #16]
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	2b00      	cmp	r3, #0
 800c154:	d02b      	beq.n	800c1ae <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6998      	ldr	r0, [r3, #24]
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15e:	461a      	mov	r2, r3
 800c160:	491a      	ldr	r1, [pc, #104]	; (800c1cc <http_init_file+0x148>)
 800c162:	f000 fa47 	bl	800c5f4 <lwip_strnstr>
 800c166:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d01f      	beq.n	800c1ae <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	1d1a      	adds	r2, r3, #4
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	699b      	ldr	r3, [r3, #24]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	699a      	ldr	r2, [r3, #24]
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	441a      	add	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	1ad2      	subs	r2, r2, r3
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	625a      	str	r2, [r3, #36]	; 0x24
 800c192:	e00c      	b.n	800c1ae <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2200      	movs	r2, #0
 800c198:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3720      	adds	r7, #32
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	0801aad0 	.word	0x0801aad0
 800c1bc:	0801ac1c 	.word	0x0801ac1c
 800c1c0:	0801ab18 	.word	0x0801ab18
 800c1c4:	0801ac30 	.word	0x0801ac30
 800c1c8:	0801ac50 	.word	0x0801ac50
 800c1cc:	0801ac14 	.word	0x0801ac14

0800c1d0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	460b      	mov	r3, r1
 800c1da:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <http_err+0x1c>
    http_state_free(hs);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7fe ff46 	bl	800b078 <http_state_free>
  }
}
 800c1ec:	bf00      	nop
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	4613      	mov	r3, r2
 800c200:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <http_sent+0x1c>
    return ERR_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	e008      	b.n	800c222 <http_sent+0x2e>
  }

  hs->retries = 0;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	2200      	movs	r2, #0
 800c214:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c218:	6979      	ldr	r1, [r7, #20]
 800c21a:	68b8      	ldr	r0, [r7, #8]
 800c21c:	f7ff fc48 	bl	800bab0 <http_send>

  return ERR_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3718      	adds	r7, #24
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d107      	bne.n	800c24e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c23e:	2100      	movs	r1, #0
 800c240:	6838      	ldr	r0, [r7, #0]
 800c242:	f7fe ffd5 	bl	800b1f0 <http_close_conn>
 800c246:	4603      	mov	r3, r0
 800c248:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	e021      	b.n	800c292 <http_poll+0x68>
  } else {
    hs->retries++;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c254:	3301      	adds	r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c264:	2b04      	cmp	r3, #4
 800c266:	d105      	bne.n	800c274 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c268:	68f9      	ldr	r1, [r7, #12]
 800c26a:	6838      	ldr	r0, [r7, #0]
 800c26c:	f7fe ffc0 	bl	800b1f0 <http_close_conn>
      return ERR_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	e00e      	b.n	800c292 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d009      	beq.n	800c290 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c27c:	68f9      	ldr	r1, [r7, #12]
 800c27e:	6838      	ldr	r0, [r7, #0]
 800c280:	f7ff fc16 	bl	800bab0 <http_send>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d002      	beq.n	800c290 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c28a:	6838      	ldr	r0, [r7, #0]
 800c28c:	f007 f97a 	bl	8013584 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
	...

0800c29c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c2ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <http_recv+0x26>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <http_recv+0x26>
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d111      	bne.n	800c2e6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d008      	beq.n	800c2da <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	891b      	ldrh	r3, [r3, #8]
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	68b8      	ldr	r0, [r7, #8]
 800c2d0:	f002 fd48 	bl	800ed64 <tcp_recved>
      pbuf_free(p);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f001 fdc7 	bl	800de68 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c2da:	6979      	ldr	r1, [r7, #20]
 800c2dc:	68b8      	ldr	r0, [r7, #8]
 800c2de:	f7fe ff87 	bl	800b1f0 <http_close_conn>
    return ERR_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e055      	b.n	800c392 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	891b      	ldrh	r3, [r3, #8]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	68b8      	ldr	r0, [r7, #8]
 800c2ee:	f002 fd39 	bl	800ed64 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d147      	bne.n	800c38a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	6979      	ldr	r1, [r7, #20]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7ff fc5e 	bl	800bbc0 <http_parse_request>
 800c304:	4603      	mov	r3, r0
 800c306:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d015      	beq.n	800c33c <http_recv+0xa0>
 800c310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c314:	f113 0f05 	cmn.w	r3, #5
 800c318:	d010      	beq.n	800c33c <http_recv+0xa0>
 800c31a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c31e:	f113 0f10 	cmn.w	r3, #16
 800c322:	d00b      	beq.n	800c33c <http_recv+0xa0>
 800c324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c328:	f113 0f08 	cmn.w	r3, #8
 800c32c:	d006      	beq.n	800c33c <http_recv+0xa0>
 800c32e:	4b1b      	ldr	r3, [pc, #108]	; (800c39c <http_recv+0x100>)
 800c330:	f640 2204 	movw	r2, #2564	; 0xa04
 800c334:	491a      	ldr	r1, [pc, #104]	; (800c3a0 <http_recv+0x104>)
 800c336:	481b      	ldr	r0, [pc, #108]	; (800c3a4 <http_recv+0x108>)
 800c338:	f00d fb3c 	bl	80199b4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c33c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c340:	f113 0f05 	cmn.w	r3, #5
 800c344:	d00b      	beq.n	800c35e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d007      	beq.n	800c35e <http_recv+0xc2>
          pbuf_free(hs->req);
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	6a1b      	ldr	r3, [r3, #32]
 800c352:	4618      	mov	r0, r3
 800c354:	f001 fd88 	bl	800de68 <pbuf_free>
          hs->req = NULL;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2200      	movs	r2, #0
 800c35c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f001 fd82 	bl	800de68 <pbuf_free>
      if (parsed == ERR_OK) {
 800c364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	68b8      	ldr	r0, [r7, #8]
 800c370:	f7ff fb9e 	bl	800bab0 <http_send>
 800c374:	e00c      	b.n	800c390 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800c376:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c37a:	f113 0f10 	cmn.w	r3, #16
 800c37e:	d107      	bne.n	800c390 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c380:	6979      	ldr	r1, [r7, #20]
 800c382:	68b8      	ldr	r0, [r7, #8]
 800c384:	f7fe ff34 	bl	800b1f0 <http_close_conn>
 800c388:	e002      	b.n	800c390 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f001 fd6c 	bl	800de68 <pbuf_free>
    }
  }
  return ERR_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3718      	adds	r7, #24
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	0801aad0 	.word	0x0801aad0
 800c3a0:	0801ac7c 	.word	0x0801ac7c
 800c3a4:	0801ab18 	.word	0x0801ab18

0800c3a8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c3b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d102      	bne.n	800c3c4 <http_accept+0x1c>
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d102      	bne.n	800c3ca <http_accept+0x22>
    return ERR_VAL;
 800c3c4:	f06f 0305 	mvn.w	r3, #5
 800c3c8:	e025      	b.n	800c416 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	68b8      	ldr	r0, [r7, #8]
 800c3ce:	f003 f9ad 	bl	800f72c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c3d2:	f7fe fe13 	bl	800affc <http_state_alloc>
 800c3d6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d102      	bne.n	800c3e4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c3de:	f04f 33ff 	mov.w	r3, #4294967295
 800c3e2:	e018      	b.n	800c416 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c3ea:	6979      	ldr	r1, [r7, #20]
 800c3ec:	68b8      	ldr	r0, [r7, #8]
 800c3ee:	f003 fb9d 	bl	800fb2c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c3f2:	490b      	ldr	r1, [pc, #44]	; (800c420 <http_accept+0x78>)
 800c3f4:	68b8      	ldr	r0, [r7, #8]
 800c3f6:	f003 fbab 	bl	800fb50 <tcp_recv>
  altcp_err(pcb, http_err);
 800c3fa:	490a      	ldr	r1, [pc, #40]	; (800c424 <http_accept+0x7c>)
 800c3fc:	68b8      	ldr	r0, [r7, #8]
 800c3fe:	f003 fbeb 	bl	800fbd8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c402:	2204      	movs	r2, #4
 800c404:	4908      	ldr	r1, [pc, #32]	; (800c428 <http_accept+0x80>)
 800c406:	68b8      	ldr	r0, [r7, #8]
 800c408:	f003 fc20 	bl	800fc4c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c40c:	4907      	ldr	r1, [pc, #28]	; (800c42c <http_accept+0x84>)
 800c40e:	68b8      	ldr	r0, [r7, #8]
 800c410:	f003 fbc0 	bl	800fb94 <tcp_sent>

  return ERR_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3718      	adds	r7, #24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	0800c29d 	.word	0x0800c29d
 800c424:	0800c1d1 	.word	0x0800c1d1
 800c428:	0800c22b 	.word	0x0800c22b
 800c42c:	0800c1f5 	.word	0x0800c1f5

0800c430 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d029      	beq.n	800c496 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c442:	2101      	movs	r1, #1
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f003 f971 	bl	800f72c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c44a:	887b      	ldrh	r3, [r7, #2]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4914      	ldr	r1, [pc, #80]	; (800c4a0 <httpd_init_pcb+0x70>)
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f002 fab9 	bl	800e9c8 <tcp_bind>
 800c456:	4603      	mov	r3, r0
 800c458:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c45a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d006      	beq.n	800c470 <httpd_init_pcb+0x40>
 800c462:	4b10      	ldr	r3, [pc, #64]	; (800c4a4 <httpd_init_pcb+0x74>)
 800c464:	f640 2257 	movw	r2, #2647	; 0xa57
 800c468:	490f      	ldr	r1, [pc, #60]	; (800c4a8 <httpd_init_pcb+0x78>)
 800c46a:	4810      	ldr	r0, [pc, #64]	; (800c4ac <httpd_init_pcb+0x7c>)
 800c46c:	f00d faa2 	bl	80199b4 <iprintf>
    pcb = altcp_listen(pcb);
 800c470:	21ff      	movs	r1, #255	; 0xff
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f002 fb60 	bl	800eb38 <tcp_listen_with_backlog>
 800c478:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d106      	bne.n	800c48e <httpd_init_pcb+0x5e>
 800c480:	4b08      	ldr	r3, [pc, #32]	; (800c4a4 <httpd_init_pcb+0x74>)
 800c482:	f640 2259 	movw	r2, #2649	; 0xa59
 800c486:	490a      	ldr	r1, [pc, #40]	; (800c4b0 <httpd_init_pcb+0x80>)
 800c488:	4808      	ldr	r0, [pc, #32]	; (800c4ac <httpd_init_pcb+0x7c>)
 800c48a:	f00d fa93 	bl	80199b4 <iprintf>
    altcp_accept(pcb, http_accept);
 800c48e:	4909      	ldr	r1, [pc, #36]	; (800c4b4 <httpd_init_pcb+0x84>)
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f003 fbc3 	bl	800fc1c <tcp_accept>
  }
}
 800c496:	bf00      	nop
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	0801ff18 	.word	0x0801ff18
 800c4a4:	0801aad0 	.word	0x0801aad0
 800c4a8:	0801aca8 	.word	0x0801aca8
 800c4ac:	0801ab18 	.word	0x0801ab18
 800c4b0:	0801acc4 	.word	0x0801acc4
 800c4b4:	0800c3a9 	.word	0x0800c3a9

0800c4b8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c4be:	202e      	movs	r0, #46	; 0x2e
 800c4c0:	f003 fb26 	bl	800fb10 <tcp_new_ip_type>
 800c4c4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d106      	bne.n	800c4da <httpd_init+0x22>
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <httpd_init+0x34>)
 800c4ce:	f640 2272 	movw	r2, #2674	; 0xa72
 800c4d2:	4907      	ldr	r1, [pc, #28]	; (800c4f0 <httpd_init+0x38>)
 800c4d4:	4807      	ldr	r0, [pc, #28]	; (800c4f4 <httpd_init+0x3c>)
 800c4d6:	f00d fa6d 	bl	80199b4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c4da:	2150      	movs	r1, #80	; 0x50
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ffa7 	bl	800c430 <httpd_init_pcb>
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	0801aad0 	.word	0x0801aad0
 800c4f0:	0801ace4 	.word	0x0801ace4
 800c4f4:	0801ab18 	.word	0x0801ab18

0800c4f8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d106      	bne.n	800c518 <http_set_ssi_handler+0x20>
 800c50a:	4b07      	ldr	r3, [pc, #28]	; (800c528 <http_set_ssi_handler+0x30>)
 800c50c:	f640 2297 	movw	r2, #2711	; 0xa97
 800c510:	4906      	ldr	r1, [pc, #24]	; (800c52c <http_set_ssi_handler+0x34>)
 800c512:	4807      	ldr	r0, [pc, #28]	; (800c530 <http_set_ssi_handler+0x38>)
 800c514:	f00d fa4e 	bl	80199b4 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800c518:	4a06      	ldr	r2, [pc, #24]	; (800c534 <http_set_ssi_handler+0x3c>)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800c51e:	bf00      	nop
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	0801aad0 	.word	0x0801aad0
 800c52c:	0801ad00 	.word	0x0801ad00
 800c530:	0801ab18 	.word	0x0801ab18
 800c534:	20009798 	.word	0x20009798

0800c538 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d106      	bne.n	800c556 <http_set_cgi_handlers+0x1e>
 800c548:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <http_set_cgi_handlers+0x48>)
 800c54a:	f640 22b2 	movw	r2, #2738	; 0xab2
 800c54e:	490d      	ldr	r1, [pc, #52]	; (800c584 <http_set_cgi_handlers+0x4c>)
 800c550:	480d      	ldr	r0, [pc, #52]	; (800c588 <http_set_cgi_handlers+0x50>)
 800c552:	f00d fa2f 	bl	80199b4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	dc06      	bgt.n	800c56a <http_set_cgi_handlers+0x32>
 800c55c:	4b08      	ldr	r3, [pc, #32]	; (800c580 <http_set_cgi_handlers+0x48>)
 800c55e:	f640 22b3 	movw	r2, #2739	; 0xab3
 800c562:	490a      	ldr	r1, [pc, #40]	; (800c58c <http_set_cgi_handlers+0x54>)
 800c564:	4808      	ldr	r0, [pc, #32]	; (800c588 <http_set_cgi_handlers+0x50>)
 800c566:	f00d fa25 	bl	80199b4 <iprintf>

  httpd_cgis = cgis;
 800c56a:	4a09      	ldr	r2, [pc, #36]	; (800c590 <http_set_cgi_handlers+0x58>)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800c570:	4a08      	ldr	r2, [pc, #32]	; (800c594 <http_set_cgi_handlers+0x5c>)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	6013      	str	r3, [r2, #0]
}
 800c576:	bf00      	nop
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	0801aad0 	.word	0x0801aad0
 800c584:	0801ad18 	.word	0x0801ad18
 800c588:	0801ab18 	.word	0x0801ab18
 800c58c:	0801ad28 	.word	0x0801ad28
 800c590:	2000979c 	.word	0x2000979c
 800c594:	200097a0 	.word	0x200097a0

0800c598 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	4603      	mov	r3, r0
 800c5a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c5a2:	88fb      	ldrh	r3, [r7, #6]
 800c5a4:	021b      	lsls	r3, r3, #8
 800c5a6:	b21a      	sxth	r2, r3
 800c5a8:	88fb      	ldrh	r3, [r7, #6]
 800c5aa:	0a1b      	lsrs	r3, r3, #8
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	b21b      	sxth	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b21b      	sxth	r3, r3
 800c5b4:	b29b      	uxth	r3, r3
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr

0800c5c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	061a      	lsls	r2, r3, #24
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	021b      	lsls	r3, r3, #8
 800c5d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5d6:	431a      	orrs	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	0a1b      	lsrs	r3, r3, #8
 800c5dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	0e1b      	lsrs	r3, r3, #24
 800c5e6:	4313      	orrs	r3, r2
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c600:	68b8      	ldr	r0, [r7, #8]
 800c602:	f7f3 fe0f 	bl	8000224 <strlen>
 800c606:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d101      	bne.n	800c612 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	e022      	b.n	800c658 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	617b      	str	r3, [r7, #20]
 800c616:	e012      	b.n	800c63e <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	781a      	ldrb	r2, [r3, #0]
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d109      	bne.n	800c638 <lwip_strnstr+0x44>
 800c624:	693a      	ldr	r2, [r7, #16]
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	6978      	ldr	r0, [r7, #20]
 800c62a:	f00d fa3d 	bl	8019aa8 <strncmp>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	e00f      	b.n	800c658 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	3301      	adds	r3, #1
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d007      	beq.n	800c656 <lwip_strnstr+0x62>
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	441a      	add	r2, r3
 800c64c:	68f9      	ldr	r1, [r7, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	440b      	add	r3, r1
 800c652:	429a      	cmp	r2, r3
 800c654:	d9e0      	bls.n	800c618 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	1c5a      	adds	r2, r3, #1
 800c66e:	607a      	str	r2, [r7, #4]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	603a      	str	r2, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800c67e:	7bfa      	ldrb	r2, [r7, #15]
 800c680:	7bbb      	ldrb	r3, [r7, #14]
 800c682:	429a      	cmp	r2, r3
 800c684:	d016      	beq.n	800c6b4 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	f043 0320 	orr.w	r3, r3, #32
 800c68c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c68e:	7b7b      	ldrb	r3, [r7, #13]
 800c690:	2b60      	cmp	r3, #96	; 0x60
 800c692:	d90c      	bls.n	800c6ae <lwip_stricmp+0x4e>
 800c694:	7b7b      	ldrb	r3, [r7, #13]
 800c696:	2b7a      	cmp	r3, #122	; 0x7a
 800c698:	d809      	bhi.n	800c6ae <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800c69a:	7bbb      	ldrb	r3, [r7, #14]
 800c69c:	f043 0320 	orr.w	r3, r3, #32
 800c6a0:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800c6a2:	7b7a      	ldrb	r2, [r7, #13]
 800c6a4:	7b3b      	ldrb	r3, [r7, #12]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d003      	beq.n	800c6b2 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e006      	b.n	800c6bc <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e004      	b.n	800c6bc <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800c6b2:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1d7      	bne.n	800c66a <lwip_stricmp+0xa>
  return 0;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6d2:	f00c ff0b 	bl	80194ec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6d6:	f000 f8d5 	bl	800c884 <mem_init>
  memp_init();
 800c6da:	f000 fc31 	bl	800cf40 <memp_init>
  pbuf_init();
  netif_init();
 800c6de:	f000 fd3d 	bl	800d15c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c6e2:	f008 f83f 	bl	8014764 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6e6:	f001 fe69 	bl	800e3bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6ea:	f007 ff81 	bl	80145f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6ee:	bf00      	nop
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	4603      	mov	r3, r0
 800c700:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c702:	4b05      	ldr	r3, [pc, #20]	; (800c718 <ptr_to_mem+0x20>)
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	88fb      	ldrh	r3, [r7, #6]
 800c708:	4413      	add	r3, r2
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	20009e14 	.word	0x20009e14

0800c71c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c724:	4b05      	ldr	r3, [pc, #20]	; (800c73c <mem_to_ptr+0x20>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	b29b      	uxth	r3, r3
}
 800c72e:	4618      	mov	r0, r3
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	20009e14 	.word	0x20009e14

0800c740 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c748:	4b45      	ldr	r3, [pc, #276]	; (800c860 <plug_holes+0x120>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d206      	bcs.n	800c760 <plug_holes+0x20>
 800c752:	4b44      	ldr	r3, [pc, #272]	; (800c864 <plug_holes+0x124>)
 800c754:	f240 12df 	movw	r2, #479	; 0x1df
 800c758:	4943      	ldr	r1, [pc, #268]	; (800c868 <plug_holes+0x128>)
 800c75a:	4844      	ldr	r0, [pc, #272]	; (800c86c <plug_holes+0x12c>)
 800c75c:	f00d f92a 	bl	80199b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c760:	4b43      	ldr	r3, [pc, #268]	; (800c870 <plug_holes+0x130>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	429a      	cmp	r2, r3
 800c768:	d306      	bcc.n	800c778 <plug_holes+0x38>
 800c76a:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <plug_holes+0x124>)
 800c76c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c770:	4940      	ldr	r1, [pc, #256]	; (800c874 <plug_holes+0x134>)
 800c772:	483e      	ldr	r0, [pc, #248]	; (800c86c <plug_holes+0x12c>)
 800c774:	f00d f91e 	bl	80199b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	791b      	ldrb	r3, [r3, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d006      	beq.n	800c78e <plug_holes+0x4e>
 800c780:	4b38      	ldr	r3, [pc, #224]	; (800c864 <plug_holes+0x124>)
 800c782:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c786:	493c      	ldr	r1, [pc, #240]	; (800c878 <plug_holes+0x138>)
 800c788:	4838      	ldr	r0, [pc, #224]	; (800c86c <plug_holes+0x12c>)
 800c78a:	f00d f913 	bl	80199b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c796:	d906      	bls.n	800c7a6 <plug_holes+0x66>
 800c798:	4b32      	ldr	r3, [pc, #200]	; (800c864 <plug_holes+0x124>)
 800c79a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c79e:	4937      	ldr	r1, [pc, #220]	; (800c87c <plug_holes+0x13c>)
 800c7a0:	4832      	ldr	r0, [pc, #200]	; (800c86c <plug_holes+0x12c>)
 800c7a2:	f00d f907 	bl	80199b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	881b      	ldrh	r3, [r3, #0]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7ff ffa4 	bl	800c6f8 <ptr_to_mem>
 800c7b0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d024      	beq.n	800c804 <plug_holes+0xc4>
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	791b      	ldrb	r3, [r3, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d120      	bne.n	800c804 <plug_holes+0xc4>
 800c7c2:	4b2b      	ldr	r3, [pc, #172]	; (800c870 <plug_holes+0x130>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d01b      	beq.n	800c804 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7cc:	4b2c      	ldr	r3, [pc, #176]	; (800c880 <plug_holes+0x140>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d102      	bne.n	800c7dc <plug_holes+0x9c>
      lfree = mem;
 800c7d6:	4a2a      	ldr	r2, [pc, #168]	; (800c880 <plug_holes+0x140>)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	881a      	ldrh	r2, [r3, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7ec:	d00a      	beq.n	800c804 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7ff ff80 	bl	800c6f8 <ptr_to_mem>
 800c7f8:	4604      	mov	r4, r0
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff ff8e 	bl	800c71c <mem_to_ptr>
 800c800:	4603      	mov	r3, r0
 800c802:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	885b      	ldrh	r3, [r3, #2]
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff ff75 	bl	800c6f8 <ptr_to_mem>
 800c80e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	429a      	cmp	r2, r3
 800c816:	d01f      	beq.n	800c858 <plug_holes+0x118>
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	791b      	ldrb	r3, [r3, #4]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d11b      	bne.n	800c858 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c820:	4b17      	ldr	r3, [pc, #92]	; (800c880 <plug_holes+0x140>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d102      	bne.n	800c830 <plug_holes+0xf0>
      lfree = pmem;
 800c82a:	4a15      	ldr	r2, [pc, #84]	; (800c880 <plug_holes+0x140>)
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	881a      	ldrh	r2, [r3, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	881b      	ldrh	r3, [r3, #0]
 800c83c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c840:	d00a      	beq.n	800c858 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff ff56 	bl	800c6f8 <ptr_to_mem>
 800c84c:	4604      	mov	r4, r0
 800c84e:	68b8      	ldr	r0, [r7, #8]
 800c850:	f7ff ff64 	bl	800c71c <mem_to_ptr>
 800c854:	4603      	mov	r3, r0
 800c856:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd90      	pop	{r4, r7, pc}
 800c860:	20009e14 	.word	0x20009e14
 800c864:	0801ad44 	.word	0x0801ad44
 800c868:	0801ad74 	.word	0x0801ad74
 800c86c:	0801ad8c 	.word	0x0801ad8c
 800c870:	20009e18 	.word	0x20009e18
 800c874:	0801adb4 	.word	0x0801adb4
 800c878:	0801add0 	.word	0x0801add0
 800c87c:	0801adec 	.word	0x0801adec
 800c880:	20009e20 	.word	0x20009e20

0800c884 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c88a:	4b1f      	ldr	r3, [pc, #124]	; (800c908 <mem_init+0x84>)
 800c88c:	3303      	adds	r3, #3
 800c88e:	f023 0303 	bic.w	r3, r3, #3
 800c892:	461a      	mov	r2, r3
 800c894:	4b1d      	ldr	r3, [pc, #116]	; (800c90c <mem_init+0x88>)
 800c896:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c898:	4b1c      	ldr	r3, [pc, #112]	; (800c90c <mem_init+0x88>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8a4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c8b2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c8b6:	f7ff ff1f 	bl	800c6f8 <ptr_to_mem>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	4a14      	ldr	r2, [pc, #80]	; (800c910 <mem_init+0x8c>)
 800c8be:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c8c0:	4b13      	ldr	r3, [pc, #76]	; (800c910 <mem_init+0x8c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8c8:	4b11      	ldr	r3, [pc, #68]	; (800c910 <mem_init+0x8c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8d0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8d2:	4b0f      	ldr	r3, [pc, #60]	; (800c910 <mem_init+0x8c>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8da:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8dc:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <mem_init+0x88>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a0c      	ldr	r2, [pc, #48]	; (800c914 <mem_init+0x90>)
 800c8e2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8e4:	480c      	ldr	r0, [pc, #48]	; (800c918 <mem_init+0x94>)
 800c8e6:	f00c fe0f 	bl	8019508 <sys_mutex_new>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d006      	beq.n	800c8fe <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8f0:	4b0a      	ldr	r3, [pc, #40]	; (800c91c <mem_init+0x98>)
 800c8f2:	f240 221f 	movw	r2, #543	; 0x21f
 800c8f6:	490a      	ldr	r1, [pc, #40]	; (800c920 <mem_init+0x9c>)
 800c8f8:	480a      	ldr	r0, [pc, #40]	; (800c924 <mem_init+0xa0>)
 800c8fa:	f00d f85b 	bl	80199b4 <iprintf>
  }
}
 800c8fe:	bf00      	nop
 800c900:	3708      	adds	r7, #8
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	200097c0 	.word	0x200097c0
 800c90c:	20009e14 	.word	0x20009e14
 800c910:	20009e18 	.word	0x20009e18
 800c914:	20009e20 	.word	0x20009e20
 800c918:	20009e1c 	.word	0x20009e1c
 800c91c:	0801ad44 	.word	0x0801ad44
 800c920:	0801ae18 	.word	0x0801ae18
 800c924:	0801ad8c 	.word	0x0801ad8c

0800c928 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f7ff fef3 	bl	800c71c <mem_to_ptr>
 800c936:	4603      	mov	r3, r0
 800c938:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff feda 	bl	800c6f8 <ptr_to_mem>
 800c944:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	885b      	ldrh	r3, [r3, #2]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff fed4 	bl	800c6f8 <ptr_to_mem>
 800c950:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	881b      	ldrh	r3, [r3, #0]
 800c956:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c95a:	d818      	bhi.n	800c98e <mem_link_valid+0x66>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	885b      	ldrh	r3, [r3, #2]
 800c960:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c964:	d813      	bhi.n	800c98e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c96a:	8afa      	ldrh	r2, [r7, #22]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d004      	beq.n	800c97a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	8afa      	ldrh	r2, [r7, #22]
 800c976:	429a      	cmp	r2, r3
 800c978:	d109      	bne.n	800c98e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c97a:	4b08      	ldr	r3, [pc, #32]	; (800c99c <mem_link_valid+0x74>)
 800c97c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c97e:	693a      	ldr	r2, [r7, #16]
 800c980:	429a      	cmp	r2, r3
 800c982:	d006      	beq.n	800c992 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	885b      	ldrh	r3, [r3, #2]
 800c988:	8afa      	ldrh	r2, [r7, #22]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d001      	beq.n	800c992 <mem_link_valid+0x6a>
    return 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	e000      	b.n	800c994 <mem_link_valid+0x6c>
  }
  return 1;
 800c992:	2301      	movs	r3, #1
}
 800c994:	4618      	mov	r0, r3
 800c996:	3718      	adds	r7, #24
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	20009e18 	.word	0x20009e18

0800c9a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d070      	beq.n	800ca90 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f003 0303 	and.w	r3, r3, #3
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00d      	beq.n	800c9d4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9b8:	4b37      	ldr	r3, [pc, #220]	; (800ca98 <mem_free+0xf8>)
 800c9ba:	f240 2273 	movw	r2, #627	; 0x273
 800c9be:	4937      	ldr	r1, [pc, #220]	; (800ca9c <mem_free+0xfc>)
 800c9c0:	4837      	ldr	r0, [pc, #220]	; (800caa0 <mem_free+0x100>)
 800c9c2:	f00c fff7 	bl	80199b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9c6:	f00c fdfd 	bl	80195c4 <sys_arch_protect>
 800c9ca:	60f8      	str	r0, [r7, #12]
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f00c fe07 	bl	80195e0 <sys_arch_unprotect>
    return;
 800c9d2:	e05e      	b.n	800ca92 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	3b08      	subs	r3, #8
 800c9d8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c9da:	4b32      	ldr	r3, [pc, #200]	; (800caa4 <mem_free+0x104>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d306      	bcc.n	800c9f2 <mem_free+0x52>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f103 020c 	add.w	r2, r3, #12
 800c9ea:	4b2f      	ldr	r3, [pc, #188]	; (800caa8 <mem_free+0x108>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d90d      	bls.n	800ca0e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9f2:	4b29      	ldr	r3, [pc, #164]	; (800ca98 <mem_free+0xf8>)
 800c9f4:	f240 227f 	movw	r2, #639	; 0x27f
 800c9f8:	492c      	ldr	r1, [pc, #176]	; (800caac <mem_free+0x10c>)
 800c9fa:	4829      	ldr	r0, [pc, #164]	; (800caa0 <mem_free+0x100>)
 800c9fc:	f00c ffda 	bl	80199b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca00:	f00c fde0 	bl	80195c4 <sys_arch_protect>
 800ca04:	6138      	str	r0, [r7, #16]
 800ca06:	6938      	ldr	r0, [r7, #16]
 800ca08:	f00c fdea 	bl	80195e0 <sys_arch_unprotect>
    return;
 800ca0c:	e041      	b.n	800ca92 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ca0e:	4828      	ldr	r0, [pc, #160]	; (800cab0 <mem_free+0x110>)
 800ca10:	f00c fd96 	bl	8019540 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	791b      	ldrb	r3, [r3, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d110      	bne.n	800ca3e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca1c:	4b1e      	ldr	r3, [pc, #120]	; (800ca98 <mem_free+0xf8>)
 800ca1e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca22:	4924      	ldr	r1, [pc, #144]	; (800cab4 <mem_free+0x114>)
 800ca24:	481e      	ldr	r0, [pc, #120]	; (800caa0 <mem_free+0x100>)
 800ca26:	f00c ffc5 	bl	80199b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca2a:	4821      	ldr	r0, [pc, #132]	; (800cab0 <mem_free+0x110>)
 800ca2c:	f00c fd97 	bl	801955e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca30:	f00c fdc8 	bl	80195c4 <sys_arch_protect>
 800ca34:	6178      	str	r0, [r7, #20]
 800ca36:	6978      	ldr	r0, [r7, #20]
 800ca38:	f00c fdd2 	bl	80195e0 <sys_arch_unprotect>
    return;
 800ca3c:	e029      	b.n	800ca92 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca3e:	69f8      	ldr	r0, [r7, #28]
 800ca40:	f7ff ff72 	bl	800c928 <mem_link_valid>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d110      	bne.n	800ca6c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca4a:	4b13      	ldr	r3, [pc, #76]	; (800ca98 <mem_free+0xf8>)
 800ca4c:	f240 2295 	movw	r2, #661	; 0x295
 800ca50:	4919      	ldr	r1, [pc, #100]	; (800cab8 <mem_free+0x118>)
 800ca52:	4813      	ldr	r0, [pc, #76]	; (800caa0 <mem_free+0x100>)
 800ca54:	f00c ffae 	bl	80199b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca58:	4815      	ldr	r0, [pc, #84]	; (800cab0 <mem_free+0x110>)
 800ca5a:	f00c fd80 	bl	801955e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca5e:	f00c fdb1 	bl	80195c4 <sys_arch_protect>
 800ca62:	61b8      	str	r0, [r7, #24]
 800ca64:	69b8      	ldr	r0, [r7, #24]
 800ca66:	f00c fdbb 	bl	80195e0 <sys_arch_unprotect>
    return;
 800ca6a:	e012      	b.n	800ca92 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca72:	4b12      	ldr	r3, [pc, #72]	; (800cabc <mem_free+0x11c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	69fa      	ldr	r2, [r7, #28]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d202      	bcs.n	800ca82 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca7c:	4a0f      	ldr	r2, [pc, #60]	; (800cabc <mem_free+0x11c>)
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca82:	69f8      	ldr	r0, [r7, #28]
 800ca84:	f7ff fe5c 	bl	800c740 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca88:	4809      	ldr	r0, [pc, #36]	; (800cab0 <mem_free+0x110>)
 800ca8a:	f00c fd68 	bl	801955e <sys_mutex_unlock>
 800ca8e:	e000      	b.n	800ca92 <mem_free+0xf2>
    return;
 800ca90:	bf00      	nop
}
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	0801ad44 	.word	0x0801ad44
 800ca9c:	0801ae34 	.word	0x0801ae34
 800caa0:	0801ad8c 	.word	0x0801ad8c
 800caa4:	20009e14 	.word	0x20009e14
 800caa8:	20009e18 	.word	0x20009e18
 800caac:	0801ae58 	.word	0x0801ae58
 800cab0:	20009e1c 	.word	0x20009e1c
 800cab4:	0801ae74 	.word	0x0801ae74
 800cab8:	0801ae9c 	.word	0x0801ae9c
 800cabc:	20009e20 	.word	0x20009e20

0800cac0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cacc:	887b      	ldrh	r3, [r7, #2]
 800cace:	3303      	adds	r3, #3
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cad8:	8bfb      	ldrh	r3, [r7, #30]
 800cada:	2b0b      	cmp	r3, #11
 800cadc:	d801      	bhi.n	800cae2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cade:	230c      	movs	r3, #12
 800cae0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cae2:	8bfb      	ldrh	r3, [r7, #30]
 800cae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cae8:	d803      	bhi.n	800caf2 <mem_trim+0x32>
 800caea:	8bfa      	ldrh	r2, [r7, #30]
 800caec:	887b      	ldrh	r3, [r7, #2]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d201      	bcs.n	800caf6 <mem_trim+0x36>
    return NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	e0d8      	b.n	800cca8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800caf6:	4b6e      	ldr	r3, [pc, #440]	; (800ccb0 <mem_trim+0x1f0>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d304      	bcc.n	800cb0a <mem_trim+0x4a>
 800cb00:	4b6c      	ldr	r3, [pc, #432]	; (800ccb4 <mem_trim+0x1f4>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d306      	bcc.n	800cb18 <mem_trim+0x58>
 800cb0a:	4b6b      	ldr	r3, [pc, #428]	; (800ccb8 <mem_trim+0x1f8>)
 800cb0c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cb10:	496a      	ldr	r1, [pc, #424]	; (800ccbc <mem_trim+0x1fc>)
 800cb12:	486b      	ldr	r0, [pc, #428]	; (800ccc0 <mem_trim+0x200>)
 800cb14:	f00c ff4e 	bl	80199b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb18:	4b65      	ldr	r3, [pc, #404]	; (800ccb0 <mem_trim+0x1f0>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d304      	bcc.n	800cb2c <mem_trim+0x6c>
 800cb22:	4b64      	ldr	r3, [pc, #400]	; (800ccb4 <mem_trim+0x1f4>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d307      	bcc.n	800cb3c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb2c:	f00c fd4a 	bl	80195c4 <sys_arch_protect>
 800cb30:	60b8      	str	r0, [r7, #8]
 800cb32:	68b8      	ldr	r0, [r7, #8]
 800cb34:	f00c fd54 	bl	80195e0 <sys_arch_unprotect>
    return rmem;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	e0b5      	b.n	800cca8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3b08      	subs	r3, #8
 800cb40:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb42:	69b8      	ldr	r0, [r7, #24]
 800cb44:	f7ff fdea 	bl	800c71c <mem_to_ptr>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	881a      	ldrh	r2, [r3, #0]
 800cb50:	8afb      	ldrh	r3, [r7, #22]
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	3b08      	subs	r3, #8
 800cb58:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb5a:	8bfa      	ldrh	r2, [r7, #30]
 800cb5c:	8abb      	ldrh	r3, [r7, #20]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d906      	bls.n	800cb70 <mem_trim+0xb0>
 800cb62:	4b55      	ldr	r3, [pc, #340]	; (800ccb8 <mem_trim+0x1f8>)
 800cb64:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb68:	4956      	ldr	r1, [pc, #344]	; (800ccc4 <mem_trim+0x204>)
 800cb6a:	4855      	ldr	r0, [pc, #340]	; (800ccc0 <mem_trim+0x200>)
 800cb6c:	f00c ff22 	bl	80199b4 <iprintf>
  if (newsize > size) {
 800cb70:	8bfa      	ldrh	r2, [r7, #30]
 800cb72:	8abb      	ldrh	r3, [r7, #20]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d901      	bls.n	800cb7c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e095      	b.n	800cca8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb7c:	8bfa      	ldrh	r2, [r7, #30]
 800cb7e:	8abb      	ldrh	r3, [r7, #20]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d101      	bne.n	800cb88 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	e08f      	b.n	800cca8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb88:	484f      	ldr	r0, [pc, #316]	; (800ccc8 <mem_trim+0x208>)
 800cb8a:	f00c fcd9 	bl	8019540 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	881b      	ldrh	r3, [r3, #0]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fdb0 	bl	800c6f8 <ptr_to_mem>
 800cb98:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	791b      	ldrb	r3, [r3, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d13f      	bne.n	800cc22 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbaa:	d106      	bne.n	800cbba <mem_trim+0xfa>
 800cbac:	4b42      	ldr	r3, [pc, #264]	; (800ccb8 <mem_trim+0x1f8>)
 800cbae:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cbb2:	4946      	ldr	r1, [pc, #280]	; (800cccc <mem_trim+0x20c>)
 800cbb4:	4842      	ldr	r0, [pc, #264]	; (800ccc0 <mem_trim+0x200>)
 800cbb6:	f00c fefd 	bl	80199b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	881b      	ldrh	r3, [r3, #0]
 800cbbe:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cbc0:	8afa      	ldrh	r2, [r7, #22]
 800cbc2:	8bfb      	ldrh	r3, [r7, #30]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3308      	adds	r3, #8
 800cbca:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cbcc:	4b40      	ldr	r3, [pc, #256]	; (800ccd0 <mem_trim+0x210>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	693a      	ldr	r2, [r7, #16]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d106      	bne.n	800cbe4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbd6:	89fb      	ldrh	r3, [r7, #14]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff fd8d 	bl	800c6f8 <ptr_to_mem>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	4a3b      	ldr	r2, [pc, #236]	; (800ccd0 <mem_trim+0x210>)
 800cbe2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cbe4:	89fb      	ldrh	r3, [r7, #14]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff fd86 	bl	800c6f8 <ptr_to_mem>
 800cbec:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	89ba      	ldrh	r2, [r7, #12]
 800cbf8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	8afa      	ldrh	r2, [r7, #22]
 800cbfe:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	89fa      	ldrh	r2, [r7, #14]
 800cc04:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	881b      	ldrh	r3, [r3, #0]
 800cc0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc0e:	d047      	beq.n	800cca0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	881b      	ldrh	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7ff fd6f 	bl	800c6f8 <ptr_to_mem>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	89fb      	ldrh	r3, [r7, #14]
 800cc1e:	8053      	strh	r3, [r2, #2]
 800cc20:	e03e      	b.n	800cca0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc22:	8bfb      	ldrh	r3, [r7, #30]
 800cc24:	f103 0214 	add.w	r2, r3, #20
 800cc28:	8abb      	ldrh	r3, [r7, #20]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d838      	bhi.n	800cca0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc2e:	8afa      	ldrh	r2, [r7, #22]
 800cc30:	8bfb      	ldrh	r3, [r7, #30]
 800cc32:	4413      	add	r3, r2
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	3308      	adds	r3, #8
 800cc38:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc42:	d106      	bne.n	800cc52 <mem_trim+0x192>
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <mem_trim+0x1f8>)
 800cc46:	f240 3216 	movw	r2, #790	; 0x316
 800cc4a:	4920      	ldr	r1, [pc, #128]	; (800cccc <mem_trim+0x20c>)
 800cc4c:	481c      	ldr	r0, [pc, #112]	; (800ccc0 <mem_trim+0x200>)
 800cc4e:	f00c feb1 	bl	80199b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc52:	89fb      	ldrh	r3, [r7, #14]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff fd4f 	bl	800c6f8 <ptr_to_mem>
 800cc5a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc5c:	4b1c      	ldr	r3, [pc, #112]	; (800ccd0 <mem_trim+0x210>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	693a      	ldr	r2, [r7, #16]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d202      	bcs.n	800cc6c <mem_trim+0x1ac>
      lfree = mem2;
 800cc66:	4a1a      	ldr	r2, [pc, #104]	; (800ccd0 <mem_trim+0x210>)
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	881a      	ldrh	r2, [r3, #0]
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	8afa      	ldrh	r2, [r7, #22]
 800cc7e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	89fa      	ldrh	r2, [r7, #14]
 800cc84:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc8e:	d007      	beq.n	800cca0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	881b      	ldrh	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff fd2f 	bl	800c6f8 <ptr_to_mem>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	89fb      	ldrh	r3, [r7, #14]
 800cc9e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cca0:	4809      	ldr	r0, [pc, #36]	; (800ccc8 <mem_trim+0x208>)
 800cca2:	f00c fc5c 	bl	801955e <sys_mutex_unlock>
  return rmem;
 800cca6:	687b      	ldr	r3, [r7, #4]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20009e14 	.word	0x20009e14
 800ccb4:	20009e18 	.word	0x20009e18
 800ccb8:	0801ad44 	.word	0x0801ad44
 800ccbc:	0801aed0 	.word	0x0801aed0
 800ccc0:	0801ad8c 	.word	0x0801ad8c
 800ccc4:	0801aee8 	.word	0x0801aee8
 800ccc8:	20009e1c 	.word	0x20009e1c
 800cccc:	0801af08 	.word	0x0801af08
 800ccd0:	20009e20 	.word	0x20009e20

0800ccd4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b088      	sub	sp, #32
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ccde:	88fb      	ldrh	r3, [r7, #6]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <mem_malloc+0x14>
    return NULL;
 800cce4:	2300      	movs	r3, #0
 800cce6:	e0e2      	b.n	800ceae <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cce8:	88fb      	ldrh	r3, [r7, #6]
 800ccea:	3303      	adds	r3, #3
 800ccec:	b29b      	uxth	r3, r3
 800ccee:	f023 0303 	bic.w	r3, r3, #3
 800ccf2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ccf4:	8bbb      	ldrh	r3, [r7, #28]
 800ccf6:	2b0b      	cmp	r3, #11
 800ccf8:	d801      	bhi.n	800ccfe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ccfa:	230c      	movs	r3, #12
 800ccfc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ccfe:	8bbb      	ldrh	r3, [r7, #28]
 800cd00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd04:	d803      	bhi.n	800cd0e <mem_malloc+0x3a>
 800cd06:	8bba      	ldrh	r2, [r7, #28]
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d201      	bcs.n	800cd12 <mem_malloc+0x3e>
    return NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e0cd      	b.n	800ceae <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800cd12:	4869      	ldr	r0, [pc, #420]	; (800ceb8 <mem_malloc+0x1e4>)
 800cd14:	f00c fc14 	bl	8019540 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd18:	4b68      	ldr	r3, [pc, #416]	; (800cebc <mem_malloc+0x1e8>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff fcfd 	bl	800c71c <mem_to_ptr>
 800cd22:	4603      	mov	r3, r0
 800cd24:	83fb      	strh	r3, [r7, #30]
 800cd26:	e0b7      	b.n	800ce98 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd28:	8bfb      	ldrh	r3, [r7, #30]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7ff fce4 	bl	800c6f8 <ptr_to_mem>
 800cd30:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	791b      	ldrb	r3, [r3, #4]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f040 80a7 	bne.w	800ce8a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	461a      	mov	r2, r3
 800cd42:	8bfb      	ldrh	r3, [r7, #30]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	f1a3 0208 	sub.w	r2, r3, #8
 800cd4a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	f0c0 809c 	bcc.w	800ce8a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	8bfb      	ldrh	r3, [r7, #30]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	f1a3 0208 	sub.w	r2, r3, #8
 800cd60:	8bbb      	ldrh	r3, [r7, #28]
 800cd62:	3314      	adds	r3, #20
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d333      	bcc.n	800cdd0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd68:	8bfa      	ldrh	r2, [r7, #30]
 800cd6a:	8bbb      	ldrh	r3, [r7, #28]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	3308      	adds	r3, #8
 800cd72:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd74:	8a7b      	ldrh	r3, [r7, #18]
 800cd76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd7a:	d106      	bne.n	800cd8a <mem_malloc+0xb6>
 800cd7c:	4b50      	ldr	r3, [pc, #320]	; (800cec0 <mem_malloc+0x1ec>)
 800cd7e:	f240 3287 	movw	r2, #903	; 0x387
 800cd82:	4950      	ldr	r1, [pc, #320]	; (800cec4 <mem_malloc+0x1f0>)
 800cd84:	4850      	ldr	r0, [pc, #320]	; (800cec8 <mem_malloc+0x1f4>)
 800cd86:	f00c fe15 	bl	80199b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd8a:	8a7b      	ldrh	r3, [r7, #18]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff fcb3 	bl	800c6f8 <ptr_to_mem>
 800cd92:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2200      	movs	r2, #0
 800cd98:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	881a      	ldrh	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	8bfa      	ldrh	r2, [r7, #30]
 800cda6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	8a7a      	ldrh	r2, [r7, #18]
 800cdac:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	881b      	ldrh	r3, [r3, #0]
 800cdb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdbc:	d00b      	beq.n	800cdd6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff fc98 	bl	800c6f8 <ptr_to_mem>
 800cdc8:	4602      	mov	r2, r0
 800cdca:	8a7b      	ldrh	r3, [r7, #18]
 800cdcc:	8053      	strh	r3, [r2, #2]
 800cdce:	e002      	b.n	800cdd6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdd6:	4b39      	ldr	r3, [pc, #228]	; (800cebc <mem_malloc+0x1e8>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d127      	bne.n	800ce30 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cde0:	4b36      	ldr	r3, [pc, #216]	; (800cebc <mem_malloc+0x1e8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cde6:	e005      	b.n	800cdf4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fc83 	bl	800c6f8 <ptr_to_mem>
 800cdf2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	791b      	ldrb	r3, [r3, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d004      	beq.n	800ce06 <mem_malloc+0x132>
 800cdfc:	4b33      	ldr	r3, [pc, #204]	; (800cecc <mem_malloc+0x1f8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d1f0      	bne.n	800cde8 <mem_malloc+0x114>
          }
          lfree = cur;
 800ce06:	4a2d      	ldr	r2, [pc, #180]	; (800cebc <mem_malloc+0x1e8>)
 800ce08:	69bb      	ldr	r3, [r7, #24]
 800ce0a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ce0c:	4b2b      	ldr	r3, [pc, #172]	; (800cebc <mem_malloc+0x1e8>)
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	4b2e      	ldr	r3, [pc, #184]	; (800cecc <mem_malloc+0x1f8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d00b      	beq.n	800ce30 <mem_malloc+0x15c>
 800ce18:	4b28      	ldr	r3, [pc, #160]	; (800cebc <mem_malloc+0x1e8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	791b      	ldrb	r3, [r3, #4]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d006      	beq.n	800ce30 <mem_malloc+0x15c>
 800ce22:	4b27      	ldr	r3, [pc, #156]	; (800cec0 <mem_malloc+0x1ec>)
 800ce24:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce28:	4929      	ldr	r1, [pc, #164]	; (800ced0 <mem_malloc+0x1fc>)
 800ce2a:	4827      	ldr	r0, [pc, #156]	; (800cec8 <mem_malloc+0x1f4>)
 800ce2c:	f00c fdc2 	bl	80199b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce30:	4821      	ldr	r0, [pc, #132]	; (800ceb8 <mem_malloc+0x1e4>)
 800ce32:	f00c fb94 	bl	801955e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce36:	8bba      	ldrh	r2, [r7, #28]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	4a23      	ldr	r2, [pc, #140]	; (800cecc <mem_malloc+0x1f8>)
 800ce40:	6812      	ldr	r2, [r2, #0]
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d906      	bls.n	800ce54 <mem_malloc+0x180>
 800ce46:	4b1e      	ldr	r3, [pc, #120]	; (800cec0 <mem_malloc+0x1ec>)
 800ce48:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce4c:	4921      	ldr	r1, [pc, #132]	; (800ced4 <mem_malloc+0x200>)
 800ce4e:	481e      	ldr	r0, [pc, #120]	; (800cec8 <mem_malloc+0x1f4>)
 800ce50:	f00c fdb0 	bl	80199b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f003 0303 	and.w	r3, r3, #3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d006      	beq.n	800ce6c <mem_malloc+0x198>
 800ce5e:	4b18      	ldr	r3, [pc, #96]	; (800cec0 <mem_malloc+0x1ec>)
 800ce60:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce64:	491c      	ldr	r1, [pc, #112]	; (800ced8 <mem_malloc+0x204>)
 800ce66:	4818      	ldr	r0, [pc, #96]	; (800cec8 <mem_malloc+0x1f4>)
 800ce68:	f00c fda4 	bl	80199b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	f003 0303 	and.w	r3, r3, #3
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d006      	beq.n	800ce84 <mem_malloc+0x1b0>
 800ce76:	4b12      	ldr	r3, [pc, #72]	; (800cec0 <mem_malloc+0x1ec>)
 800ce78:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce7c:	4917      	ldr	r1, [pc, #92]	; (800cedc <mem_malloc+0x208>)
 800ce7e:	4812      	ldr	r0, [pc, #72]	; (800cec8 <mem_malloc+0x1f4>)
 800ce80:	f00c fd98 	bl	80199b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	3308      	adds	r3, #8
 800ce88:	e011      	b.n	800ceae <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce8a:	8bfb      	ldrh	r3, [r7, #30]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff fc33 	bl	800c6f8 <ptr_to_mem>
 800ce92:	4603      	mov	r3, r0
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce98:	8bfa      	ldrh	r2, [r7, #30]
 800ce9a:	8bbb      	ldrh	r3, [r7, #28]
 800ce9c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cea0:	429a      	cmp	r2, r3
 800cea2:	f4ff af41 	bcc.w	800cd28 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cea6:	4804      	ldr	r0, [pc, #16]	; (800ceb8 <mem_malloc+0x1e4>)
 800cea8:	f00c fb59 	bl	801955e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ceac:	2300      	movs	r3, #0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3720      	adds	r7, #32
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20009e1c 	.word	0x20009e1c
 800cebc:	20009e20 	.word	0x20009e20
 800cec0:	0801ad44 	.word	0x0801ad44
 800cec4:	0801af08 	.word	0x0801af08
 800cec8:	0801ad8c 	.word	0x0801ad8c
 800cecc:	20009e18 	.word	0x20009e18
 800ced0:	0801af1c 	.word	0x0801af1c
 800ced4:	0801af38 	.word	0x0801af38
 800ced8:	0801af68 	.word	0x0801af68
 800cedc:	0801af98 	.word	0x0801af98

0800cee0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	689b      	ldr	r3, [r3, #8]
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	3303      	adds	r3, #3
 800cef6:	f023 0303 	bic.w	r3, r3, #3
 800cefa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	e011      	b.n	800cf26 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	881b      	ldrh	r3, [r3, #0]
 800cf18:	461a      	mov	r2, r3
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	3301      	adds	r3, #1
 800cf24:	60fb      	str	r3, [r7, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	885b      	ldrh	r3, [r3, #2]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	dbe7      	blt.n	800cf02 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf32:	bf00      	nop
 800cf34:	bf00      	nop
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf46:	2300      	movs	r3, #0
 800cf48:	80fb      	strh	r3, [r7, #6]
 800cf4a:	e009      	b.n	800cf60 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	4a08      	ldr	r2, [pc, #32]	; (800cf70 <memp_init+0x30>)
 800cf50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff ffc3 	bl	800cee0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	80fb      	strh	r3, [r7, #6]
 800cf60:	88fb      	ldrh	r3, [r7, #6]
 800cf62:	2b0c      	cmp	r3, #12
 800cf64:	d9f2      	bls.n	800cf4c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	0801fe94 	.word	0x0801fe94

0800cf74 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf7c:	f00c fb22 	bl	80195c4 <sys_arch_protect>
 800cf80:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d015      	beq.n	800cfbc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	6812      	ldr	r2, [r2, #0]
 800cf98:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	f003 0303 	and.w	r3, r3, #3
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <do_memp_malloc_pool+0x3e>
 800cfa4:	4b09      	ldr	r3, [pc, #36]	; (800cfcc <do_memp_malloc_pool+0x58>)
 800cfa6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cfaa:	4909      	ldr	r1, [pc, #36]	; (800cfd0 <do_memp_malloc_pool+0x5c>)
 800cfac:	4809      	ldr	r0, [pc, #36]	; (800cfd4 <do_memp_malloc_pool+0x60>)
 800cfae:	f00c fd01 	bl	80199b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfb2:	68f8      	ldr	r0, [r7, #12]
 800cfb4:	f00c fb14 	bl	80195e0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	e003      	b.n	800cfc4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f00c fb0f 	bl	80195e0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	0801afbc 	.word	0x0801afbc
 800cfd0:	0801afec 	.word	0x0801afec
 800cfd4:	0801b010 	.word	0x0801b010

0800cfd8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d106      	bne.n	800cff4 <memp_malloc_pool+0x1c>
 800cfe6:	4b0a      	ldr	r3, [pc, #40]	; (800d010 <memp_malloc_pool+0x38>)
 800cfe8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800cfec:	4909      	ldr	r1, [pc, #36]	; (800d014 <memp_malloc_pool+0x3c>)
 800cfee:	480a      	ldr	r0, [pc, #40]	; (800d018 <memp_malloc_pool+0x40>)
 800cff0:	f00c fce0 	bl	80199b4 <iprintf>
  if (desc == NULL) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d101      	bne.n	800cffe <memp_malloc_pool+0x26>
    return NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e003      	b.n	800d006 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7ff ffb8 	bl	800cf74 <do_memp_malloc_pool>
 800d004:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	0801afbc 	.word	0x0801afbc
 800d014:	0801b038 	.word	0x0801b038
 800d018:	0801b010 	.word	0x0801b010

0800d01c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	2b0c      	cmp	r3, #12
 800d02a:	d908      	bls.n	800d03e <memp_malloc+0x22>
 800d02c:	4b0a      	ldr	r3, [pc, #40]	; (800d058 <memp_malloc+0x3c>)
 800d02e:	f240 1257 	movw	r2, #343	; 0x157
 800d032:	490a      	ldr	r1, [pc, #40]	; (800d05c <memp_malloc+0x40>)
 800d034:	480a      	ldr	r0, [pc, #40]	; (800d060 <memp_malloc+0x44>)
 800d036:	f00c fcbd 	bl	80199b4 <iprintf>
 800d03a:	2300      	movs	r3, #0
 800d03c:	e008      	b.n	800d050 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d03e:	79fb      	ldrb	r3, [r7, #7]
 800d040:	4a08      	ldr	r2, [pc, #32]	; (800d064 <memp_malloc+0x48>)
 800d042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff ff94 	bl	800cf74 <do_memp_malloc_pool>
 800d04c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d04e:	68fb      	ldr	r3, [r7, #12]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	0801afbc 	.word	0x0801afbc
 800d05c:	0801b04c 	.word	0x0801b04c
 800d060:	0801b010 	.word	0x0801b010
 800d064:	0801fe94 	.word	0x0801fe94

0800d068 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	f003 0303 	and.w	r3, r3, #3
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d006      	beq.n	800d08a <do_memp_free_pool+0x22>
 800d07c:	4b0d      	ldr	r3, [pc, #52]	; (800d0b4 <do_memp_free_pool+0x4c>)
 800d07e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d082:	490d      	ldr	r1, [pc, #52]	; (800d0b8 <do_memp_free_pool+0x50>)
 800d084:	480d      	ldr	r0, [pc, #52]	; (800d0bc <do_memp_free_pool+0x54>)
 800d086:	f00c fc95 	bl	80199b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d08e:	f00c fa99 	bl	80195c4 <sys_arch_protect>
 800d092:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	689b      	ldr	r3, [r3, #8]
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d0a6:	68b8      	ldr	r0, [r7, #8]
 800d0a8:	f00c fa9a 	bl	80195e0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d0ac:	bf00      	nop
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	0801afbc 	.word	0x0801afbc
 800d0b8:	0801b06c 	.word	0x0801b06c
 800d0bc:	0801b010 	.word	0x0801b010

0800d0c0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <memp_free_pool+0x1e>
 800d0d0:	4b0a      	ldr	r3, [pc, #40]	; (800d0fc <memp_free_pool+0x3c>)
 800d0d2:	f240 1295 	movw	r2, #405	; 0x195
 800d0d6:	490a      	ldr	r1, [pc, #40]	; (800d100 <memp_free_pool+0x40>)
 800d0d8:	480a      	ldr	r0, [pc, #40]	; (800d104 <memp_free_pool+0x44>)
 800d0da:	f00c fc6b 	bl	80199b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d007      	beq.n	800d0f4 <memp_free_pool+0x34>
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d0ea:	6839      	ldr	r1, [r7, #0]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7ff ffbb 	bl	800d068 <do_memp_free_pool>
 800d0f2:	e000      	b.n	800d0f6 <memp_free_pool+0x36>
    return;
 800d0f4:	bf00      	nop
}
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	0801afbc 	.word	0x0801afbc
 800d100:	0801b038 	.word	0x0801b038
 800d104:	0801b010 	.word	0x0801b010

0800d108 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	4603      	mov	r3, r0
 800d110:	6039      	str	r1, [r7, #0]
 800d112:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d114:	79fb      	ldrb	r3, [r7, #7]
 800d116:	2b0c      	cmp	r3, #12
 800d118:	d907      	bls.n	800d12a <memp_free+0x22>
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <memp_free+0x44>)
 800d11c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d120:	490b      	ldr	r1, [pc, #44]	; (800d150 <memp_free+0x48>)
 800d122:	480c      	ldr	r0, [pc, #48]	; (800d154 <memp_free+0x4c>)
 800d124:	f00c fc46 	bl	80199b4 <iprintf>
 800d128:	e00c      	b.n	800d144 <memp_free+0x3c>

  if (mem == NULL) {
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d008      	beq.n	800d142 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	4a09      	ldr	r2, [pc, #36]	; (800d158 <memp_free+0x50>)
 800d134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f7ff ff94 	bl	800d068 <do_memp_free_pool>
 800d140:	e000      	b.n	800d144 <memp_free+0x3c>
    return;
 800d142:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	0801afbc 	.word	0x0801afbc
 800d150:	0801b08c 	.word	0x0801b08c
 800d154:	0801b010 	.word	0x0801b010
 800d158:	0801fe94 	.word	0x0801fe94

0800d15c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d160:	bf00      	nop
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
	...

0800d16c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b086      	sub	sp, #24
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d108      	bne.n	800d192 <netif_add+0x26>
 800d180:	4b5b      	ldr	r3, [pc, #364]	; (800d2f0 <netif_add+0x184>)
 800d182:	f240 1227 	movw	r2, #295	; 0x127
 800d186:	495b      	ldr	r1, [pc, #364]	; (800d2f4 <netif_add+0x188>)
 800d188:	485b      	ldr	r0, [pc, #364]	; (800d2f8 <netif_add+0x18c>)
 800d18a:	f00c fc13 	bl	80199b4 <iprintf>
 800d18e:	2300      	movs	r3, #0
 800d190:	e0a9      	b.n	800d2e6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	2b00      	cmp	r3, #0
 800d196:	d108      	bne.n	800d1aa <netif_add+0x3e>
 800d198:	4b55      	ldr	r3, [pc, #340]	; (800d2f0 <netif_add+0x184>)
 800d19a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d19e:	4957      	ldr	r1, [pc, #348]	; (800d2fc <netif_add+0x190>)
 800d1a0:	4855      	ldr	r0, [pc, #340]	; (800d2f8 <netif_add+0x18c>)
 800d1a2:	f00c fc07 	bl	80199b4 <iprintf>
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	e09d      	b.n	800d2e6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d1b0:	4b53      	ldr	r3, [pc, #332]	; (800d300 <netif_add+0x194>)
 800d1b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d1ba:	4b51      	ldr	r3, [pc, #324]	; (800d300 <netif_add+0x194>)
 800d1bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d101      	bne.n	800d1c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d1c4:	4b4e      	ldr	r3, [pc, #312]	; (800d300 <netif_add+0x194>)
 800d1c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	4a49      	ldr	r2, [pc, #292]	; (800d304 <netif_add+0x198>)
 800d1de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3324      	adds	r3, #36	; 0x24
 800d1f2:	2204      	movs	r2, #4
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f00c fc41 	bl	8019a7e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6a3a      	ldr	r2, [r7, #32]
 800d206:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d208:	4b3f      	ldr	r3, [pc, #252]	; (800d308 <netif_add+0x19c>)
 800d20a:	781a      	ldrb	r2, [r3, #0]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d216:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	687a      	ldr	r2, [r7, #4]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f000 f914 	bl	800d44c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	68f8      	ldr	r0, [r7, #12]
 800d228:	4798      	blx	r3
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d001      	beq.n	800d234 <netif_add+0xc8>
    return NULL;
 800d230:	2300      	movs	r3, #0
 800d232:	e058      	b.n	800d2e6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d23a:	2bff      	cmp	r3, #255	; 0xff
 800d23c:	d103      	bne.n	800d246 <netif_add+0xda>
        netif->num = 0;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d24a:	4b30      	ldr	r3, [pc, #192]	; (800d30c <netif_add+0x1a0>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	617b      	str	r3, [r7, #20]
 800d250:	e02b      	b.n	800d2aa <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	429a      	cmp	r2, r3
 800d258:	d106      	bne.n	800d268 <netif_add+0xfc>
 800d25a:	4b25      	ldr	r3, [pc, #148]	; (800d2f0 <netif_add+0x184>)
 800d25c:	f240 128b 	movw	r2, #395	; 0x18b
 800d260:	492b      	ldr	r1, [pc, #172]	; (800d310 <netif_add+0x1a4>)
 800d262:	4825      	ldr	r0, [pc, #148]	; (800d2f8 <netif_add+0x18c>)
 800d264:	f00c fba6 	bl	80199b4 <iprintf>
        num_netifs++;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	3301      	adds	r3, #1
 800d26c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	2bff      	cmp	r3, #255	; 0xff
 800d272:	dd06      	ble.n	800d282 <netif_add+0x116>
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <netif_add+0x184>)
 800d276:	f240 128d 	movw	r2, #397	; 0x18d
 800d27a:	4926      	ldr	r1, [pc, #152]	; (800d314 <netif_add+0x1a8>)
 800d27c:	481e      	ldr	r0, [pc, #120]	; (800d2f8 <netif_add+0x18c>)
 800d27e:	f00c fb99 	bl	80199b4 <iprintf>
        if (netif2->num == netif->num) {
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d28e:	429a      	cmp	r2, r3
 800d290:	d108      	bne.n	800d2a4 <netif_add+0x138>
          netif->num++;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d298:	3301      	adds	r3, #1
 800d29a:	b2da      	uxtb	r2, r3
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d2a2:	e005      	b.n	800d2b0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	617b      	str	r3, [r7, #20]
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1d0      	bne.n	800d252 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d1be      	bne.n	800d234 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2bc:	2bfe      	cmp	r3, #254	; 0xfe
 800d2be:	d103      	bne.n	800d2c8 <netif_add+0x15c>
    netif_num = 0;
 800d2c0:	4b11      	ldr	r3, [pc, #68]	; (800d308 <netif_add+0x19c>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	701a      	strb	r2, [r3, #0]
 800d2c6:	e006      	b.n	800d2d6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2ce:	3301      	adds	r3, #1
 800d2d0:	b2da      	uxtb	r2, r3
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	; (800d308 <netif_add+0x19c>)
 800d2d4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	; (800d30c <netif_add+0x1a0>)
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d2de:	4a0b      	ldr	r2, [pc, #44]	; (800d30c <netif_add+0x1a0>)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	0801b0a8 	.word	0x0801b0a8
 800d2f4:	0801b13c 	.word	0x0801b13c
 800d2f8:	0801b0f8 	.word	0x0801b0f8
 800d2fc:	0801b158 	.word	0x0801b158
 800d300:	0801ff18 	.word	0x0801ff18
 800d304:	0800d72f 	.word	0x0800d72f
 800d308:	2000cf18 	.word	0x2000cf18
 800d30c:	2000cf10 	.word	0x2000cf10
 800d310:	0801b17c 	.word	0x0801b17c
 800d314:	0801b190 	.word	0x0801b190

0800d318 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d322:	6839      	ldr	r1, [r7, #0]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f002 fe37 	bl	800ff98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d32a:	6839      	ldr	r1, [r7, #0]
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f007 fea5 	bl	801507c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d332:	bf00      	nop
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
	...

0800d33c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <netif_do_set_ipaddr+0x20>
 800d34e:	4b1d      	ldr	r3, [pc, #116]	; (800d3c4 <netif_do_set_ipaddr+0x88>)
 800d350:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d354:	491c      	ldr	r1, [pc, #112]	; (800d3c8 <netif_do_set_ipaddr+0x8c>)
 800d356:	481d      	ldr	r0, [pc, #116]	; (800d3cc <netif_do_set_ipaddr+0x90>)
 800d358:	f00c fb2c 	bl	80199b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d106      	bne.n	800d370 <netif_do_set_ipaddr+0x34>
 800d362:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <netif_do_set_ipaddr+0x88>)
 800d364:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d368:	4917      	ldr	r1, [pc, #92]	; (800d3c8 <netif_do_set_ipaddr+0x8c>)
 800d36a:	4818      	ldr	r0, [pc, #96]	; (800d3cc <netif_do_set_ipaddr+0x90>)
 800d36c:	f00c fb22 	bl	80199b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3304      	adds	r3, #4
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d01c      	beq.n	800d3b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	3304      	adds	r3, #4
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d38e:	f107 0314 	add.w	r3, r7, #20
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff ffbf 	bl	800d318 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <netif_do_set_ipaddr+0x6a>
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	e000      	b.n	800d3a8 <netif_do_set_ipaddr+0x6c>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d3ac:	2101      	movs	r1, #1
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f000 f8d2 	bl	800d558 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e000      	b.n	800d3ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	0801b0a8 	.word	0x0801b0a8
 800d3c8:	0801b1c0 	.word	0x0801b1c0
 800d3cc:	0801b0f8 	.word	0x0801b0f8

0800d3d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3308      	adds	r3, #8
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d00a      	beq.n	800d400 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <netif_do_set_netmask+0x26>
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	e000      	b.n	800d3f8 <netif_do_set_netmask+0x28>
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	e000      	b.n	800d402 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3714      	adds	r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr

0800d40e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d40e:	b480      	push	{r7}
 800d410:	b085      	sub	sp, #20
 800d412:	af00      	add	r7, sp, #0
 800d414:	60f8      	str	r0, [r7, #12]
 800d416:	60b9      	str	r1, [r7, #8]
 800d418:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	330c      	adds	r3, #12
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d00a      	beq.n	800d43e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <netif_do_set_gw+0x26>
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	e000      	b.n	800d436 <netif_do_set_gw+0x28>
 800d434:	2300      	movs	r3, #0
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d43a:	2301      	movs	r3, #1
 800d43c:	e000      	b.n	800d440 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b088      	sub	sp, #32
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	607a      	str	r2, [r7, #4]
 800d458:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d45a:	2300      	movs	r3, #0
 800d45c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d101      	bne.n	800d46c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d468:	4b1c      	ldr	r3, [pc, #112]	; (800d4dc <netif_set_addr+0x90>)
 800d46a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d472:	4b1a      	ldr	r3, [pc, #104]	; (800d4dc <netif_set_addr+0x90>)
 800d474:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d101      	bne.n	800d480 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d47c:	4b17      	ldr	r3, [pc, #92]	; (800d4dc <netif_set_addr+0x90>)
 800d47e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <netif_set_addr+0x42>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <netif_set_addr+0x46>
 800d48e:	2301      	movs	r3, #1
 800d490:	e000      	b.n	800d494 <netif_set_addr+0x48>
 800d492:	2300      	movs	r3, #0
 800d494:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d006      	beq.n	800d4aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d49c:	f107 0310 	add.w	r3, r7, #16
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	68f8      	ldr	r0, [r7, #12]
 800d4a6:	f7ff ff49 	bl	800d33c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	6879      	ldr	r1, [r7, #4]
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff ff8e 	bl	800d3d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff ffa8 	bl	800d40e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d106      	bne.n	800d4d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d4c4:	f107 0310 	add.w	r3, r7, #16
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	68b9      	ldr	r1, [r7, #8]
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7ff ff35 	bl	800d33c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d4d2:	bf00      	nop
 800d4d4:	3720      	adds	r7, #32
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	0801ff18 	.word	0x0801ff18

0800d4e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d4e8:	4a04      	ldr	r2, [pc, #16]	; (800d4fc <netif_set_default+0x1c>)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d4ee:	bf00      	nop
 800d4f0:	370c      	adds	r7, #12
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	2000cf14 	.word	0x2000cf14

0800d500 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d107      	bne.n	800d51e <netif_set_up+0x1e>
 800d50e:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <netif_set_up+0x4c>)
 800d510:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d514:	490e      	ldr	r1, [pc, #56]	; (800d550 <netif_set_up+0x50>)
 800d516:	480f      	ldr	r0, [pc, #60]	; (800d554 <netif_set_up+0x54>)
 800d518:	f00c fa4c 	bl	80199b4 <iprintf>
 800d51c:	e013      	b.n	800d546 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d10c      	bne.n	800d546 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d532:	f043 0301 	orr.w	r3, r3, #1
 800d536:	b2da      	uxtb	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d53e:	2103      	movs	r1, #3
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	f000 f809 	bl	800d558 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	0801b0a8 	.word	0x0801b0a8
 800d550:	0801b230 	.word	0x0801b230
 800d554:	0801b0f8 	.word	0x0801b0f8

0800d558 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	460b      	mov	r3, r1
 800d562:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d106      	bne.n	800d578 <netif_issue_reports+0x20>
 800d56a:	4b18      	ldr	r3, [pc, #96]	; (800d5cc <netif_issue_reports+0x74>)
 800d56c:	f240 326d 	movw	r2, #877	; 0x36d
 800d570:	4917      	ldr	r1, [pc, #92]	; (800d5d0 <netif_issue_reports+0x78>)
 800d572:	4818      	ldr	r0, [pc, #96]	; (800d5d4 <netif_issue_reports+0x7c>)
 800d574:	f00c fa1e 	bl	80199b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d57e:	f003 0304 	and.w	r3, r3, #4
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01e      	beq.n	800d5c4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d58c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d590:	2b00      	cmp	r3, #0
 800d592:	d017      	beq.n	800d5c4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	f003 0301 	and.w	r3, r3, #1
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d013      	beq.n	800d5c6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00e      	beq.n	800d5c6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5ae:	f003 0308 	and.w	r3, r3, #8
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d007      	beq.n	800d5c6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f00a fb5f 	bl	8017c80 <etharp_request>
 800d5c2:	e000      	b.n	800d5c6 <netif_issue_reports+0x6e>
    return;
 800d5c4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0801b0a8 	.word	0x0801b0a8
 800d5d0:	0801b24c 	.word	0x0801b24c
 800d5d4:	0801b0f8 	.word	0x0801b0f8

0800d5d8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d107      	bne.n	800d5f6 <netif_set_down+0x1e>
 800d5e6:	4b12      	ldr	r3, [pc, #72]	; (800d630 <netif_set_down+0x58>)
 800d5e8:	f240 329b 	movw	r2, #923	; 0x39b
 800d5ec:	4911      	ldr	r1, [pc, #68]	; (800d634 <netif_set_down+0x5c>)
 800d5ee:	4812      	ldr	r0, [pc, #72]	; (800d638 <netif_set_down+0x60>)
 800d5f0:	f00c f9e0 	bl	80199b4 <iprintf>
 800d5f4:	e019      	b.n	800d62a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d012      	beq.n	800d62a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d60a:	f023 0301 	bic.w	r3, r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d61c:	f003 0308 	and.w	r3, r3, #8
 800d620:	2b00      	cmp	r3, #0
 800d622:	d002      	beq.n	800d62a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f009 fee5 	bl	80173f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	0801b0a8 	.word	0x0801b0a8
 800d634:	0801b270 	.word	0x0801b270
 800d638:	0801b0f8 	.word	0x0801b0f8

0800d63c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d107      	bne.n	800d65a <netif_set_link_up+0x1e>
 800d64a:	4b15      	ldr	r3, [pc, #84]	; (800d6a0 <netif_set_link_up+0x64>)
 800d64c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d650:	4914      	ldr	r1, [pc, #80]	; (800d6a4 <netif_set_link_up+0x68>)
 800d652:	4815      	ldr	r0, [pc, #84]	; (800d6a8 <netif_set_link_up+0x6c>)
 800d654:	f00c f9ae 	bl	80199b4 <iprintf>
 800d658:	e01e      	b.n	800d698 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d660:	f003 0304 	and.w	r3, r3, #4
 800d664:	2b00      	cmp	r3, #0
 800d666:	d117      	bne.n	800d698 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d66e:	f043 0304 	orr.w	r3, r3, #4
 800d672:	b2da      	uxtb	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f008 f92a 	bl	80158d4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d680:	2103      	movs	r1, #3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff ff68 	bl	800d558 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	69db      	ldr	r3, [r3, #28]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d003      	beq.n	800d698 <netif_set_link_up+0x5c>
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	69db      	ldr	r3, [r3, #28]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	0801b0a8 	.word	0x0801b0a8
 800d6a4:	0801b290 	.word	0x0801b290
 800d6a8:	0801b0f8 	.word	0x0801b0f8

0800d6ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d107      	bne.n	800d6ca <netif_set_link_down+0x1e>
 800d6ba:	4b11      	ldr	r3, [pc, #68]	; (800d700 <netif_set_link_down+0x54>)
 800d6bc:	f240 4206 	movw	r2, #1030	; 0x406
 800d6c0:	4910      	ldr	r1, [pc, #64]	; (800d704 <netif_set_link_down+0x58>)
 800d6c2:	4811      	ldr	r0, [pc, #68]	; (800d708 <netif_set_link_down+0x5c>)
 800d6c4:	f00c f976 	bl	80199b4 <iprintf>
 800d6c8:	e017      	b.n	800d6fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d6d0:	f003 0304 	and.w	r3, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d010      	beq.n	800d6fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d6de:	f023 0304 	bic.w	r3, r3, #4
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <netif_set_link_down+0x4e>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	0801b0a8 	.word	0x0801b0a8
 800d704:	0801b2b4 	.word	0x0801b2b4
 800d708:	0801b0f8 	.word	0x0801b0f8

0800d70c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	61da      	str	r2, [r3, #28]
  }
}
 800d722:	bf00      	nop
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d72e:	b480      	push	{r7}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	60f8      	str	r0, [r7, #12]
 800d736:	60b9      	str	r1, [r7, #8]
 800d738:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d73a:	f06f 030b 	mvn.w	r3, #11
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3714      	adds	r7, #20
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
	...

0800d74c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	4603      	mov	r3, r0
 800d754:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d013      	beq.n	800d784 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d75c:	4b0d      	ldr	r3, [pc, #52]	; (800d794 <netif_get_by_index+0x48>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	60fb      	str	r3, [r7, #12]
 800d762:	e00c      	b.n	800d77e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d76a:	3301      	adds	r3, #1
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	79fa      	ldrb	r2, [r7, #7]
 800d770:	429a      	cmp	r2, r3
 800d772:	d101      	bne.n	800d778 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	e006      	b.n	800d786 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1ef      	bne.n	800d764 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	2000cf10 	.word	0x2000cf10

0800d798 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d79e:	f00b ff11 	bl	80195c4 <sys_arch_protect>
 800d7a2:	6038      	str	r0, [r7, #0]
 800d7a4:	4b0d      	ldr	r3, [pc, #52]	; (800d7dc <pbuf_free_ooseq+0x44>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	701a      	strb	r2, [r3, #0]
 800d7aa:	6838      	ldr	r0, [r7, #0]
 800d7ac:	f00b ff18 	bl	80195e0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <pbuf_free_ooseq+0x48>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	607b      	str	r3, [r7, #4]
 800d7b6:	e00a      	b.n	800d7ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d003      	beq.n	800d7c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f002 fc27 	bl	8010014 <tcp_free_ooseq>
      return;
 800d7c6:	e005      	b.n	800d7d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	607b      	str	r3, [r7, #4]
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d1f1      	bne.n	800d7b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	2000cf19 	.word	0x2000cf19
 800d7e0:	2000cf28 	.word	0x2000cf28

0800d7e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d7ec:	f7ff ffd4 	bl	800d798 <pbuf_free_ooseq>
}
 800d7f0:	bf00      	nop
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d7fe:	f00b fee1 	bl	80195c4 <sys_arch_protect>
 800d802:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d804:	4b0f      	ldr	r3, [pc, #60]	; (800d844 <pbuf_pool_is_empty+0x4c>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d80a:	4b0e      	ldr	r3, [pc, #56]	; (800d844 <pbuf_pool_is_empty+0x4c>)
 800d80c:	2201      	movs	r2, #1
 800d80e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f00b fee5 	bl	80195e0 <sys_arch_unprotect>

  if (!queued) {
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d10f      	bne.n	800d83c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d81c:	2100      	movs	r1, #0
 800d81e:	480a      	ldr	r0, [pc, #40]	; (800d848 <pbuf_pool_is_empty+0x50>)
 800d820:	f7fd fadc 	bl	800addc <tcpip_try_callback>
 800d824:	4603      	mov	r3, r0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d008      	beq.n	800d83c <pbuf_pool_is_empty+0x44>
 800d82a:	f00b fecb 	bl	80195c4 <sys_arch_protect>
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	4b04      	ldr	r3, [pc, #16]	; (800d844 <pbuf_pool_is_empty+0x4c>)
 800d832:	2200      	movs	r2, #0
 800d834:	701a      	strb	r2, [r3, #0]
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f00b fed2 	bl	80195e0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d83c:	bf00      	nop
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	2000cf19 	.word	0x2000cf19
 800d848:	0800d7e5 	.word	0x0800d7e5

0800d84c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	4611      	mov	r1, r2
 800d858:	461a      	mov	r2, r3
 800d85a:	460b      	mov	r3, r1
 800d85c:	80fb      	strh	r3, [r7, #6]
 800d85e:	4613      	mov	r3, r2
 800d860:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	88fa      	ldrh	r2, [r7, #6]
 800d872:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	88ba      	ldrh	r2, [r7, #4]
 800d878:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d87a:	8b3b      	ldrh	r3, [r7, #24]
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	7f3a      	ldrb	r2, [r7, #28]
 800d886:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2201      	movs	r2, #1
 800d88c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	73da      	strb	r2, [r3, #15]
}
 800d894:	bf00      	nop
 800d896:	3714      	adds	r7, #20
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b08c      	sub	sp, #48	; 0x30
 800d8a4:	af02      	add	r7, sp, #8
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	71fb      	strb	r3, [r7, #7]
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	80bb      	strh	r3, [r7, #4]
 800d8ae:	4613      	mov	r3, r2
 800d8b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
 800d8b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d8b6:	887b      	ldrh	r3, [r7, #2]
 800d8b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d8bc:	d07f      	beq.n	800d9be <pbuf_alloc+0x11e>
 800d8be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d8c2:	f300 80c8 	bgt.w	800da56 <pbuf_alloc+0x1b6>
 800d8c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d8ca:	d010      	beq.n	800d8ee <pbuf_alloc+0x4e>
 800d8cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d8d0:	f300 80c1 	bgt.w	800da56 <pbuf_alloc+0x1b6>
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d002      	beq.n	800d8de <pbuf_alloc+0x3e>
 800d8d8:	2b41      	cmp	r3, #65	; 0x41
 800d8da:	f040 80bc 	bne.w	800da56 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d8de:	887a      	ldrh	r2, [r7, #2]
 800d8e0:	88bb      	ldrh	r3, [r7, #4]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	f000 f8d1 	bl	800da8c <pbuf_alloc_reference>
 800d8ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d8ec:	e0bd      	b.n	800da6a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d8f6:	88bb      	ldrh	r3, [r7, #4]
 800d8f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d8fa:	200c      	movs	r0, #12
 800d8fc:	f7ff fb8e 	bl	800d01c <memp_malloc>
 800d900:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d109      	bne.n	800d91c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d908:	f7ff ff76 	bl	800d7f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d002      	beq.n	800d918 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d912:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d914:	f000 faa8 	bl	800de68 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d918:	2300      	movs	r3, #0
 800d91a:	e0a7      	b.n	800da6c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d91c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d91e:	3303      	adds	r3, #3
 800d920:	b29b      	uxth	r3, r3
 800d922:	f023 0303 	bic.w	r3, r3, #3
 800d926:	b29b      	uxth	r3, r3
 800d928:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	8b7a      	ldrh	r2, [r7, #26]
 800d930:	4293      	cmp	r3, r2
 800d932:	bf28      	it	cs
 800d934:	4613      	movcs	r3, r2
 800d936:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d93a:	3310      	adds	r3, #16
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	4413      	add	r3, r2
 800d940:	3303      	adds	r3, #3
 800d942:	f023 0303 	bic.w	r3, r3, #3
 800d946:	4618      	mov	r0, r3
 800d948:	89f9      	ldrh	r1, [r7, #14]
 800d94a:	8b7a      	ldrh	r2, [r7, #26]
 800d94c:	2300      	movs	r3, #0
 800d94e:	9301      	str	r3, [sp, #4]
 800d950:	887b      	ldrh	r3, [r7, #2]
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	460b      	mov	r3, r1
 800d956:	4601      	mov	r1, r0
 800d958:	6938      	ldr	r0, [r7, #16]
 800d95a:	f7ff ff77 	bl	800d84c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f003 0303 	and.w	r3, r3, #3
 800d966:	2b00      	cmp	r3, #0
 800d968:	d006      	beq.n	800d978 <pbuf_alloc+0xd8>
 800d96a:	4b42      	ldr	r3, [pc, #264]	; (800da74 <pbuf_alloc+0x1d4>)
 800d96c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d970:	4941      	ldr	r1, [pc, #260]	; (800da78 <pbuf_alloc+0x1d8>)
 800d972:	4842      	ldr	r0, [pc, #264]	; (800da7c <pbuf_alloc+0x1dc>)
 800d974:	f00c f81e 	bl	80199b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d97a:	3303      	adds	r3, #3
 800d97c:	f023 0303 	bic.w	r3, r3, #3
 800d980:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d984:	d106      	bne.n	800d994 <pbuf_alloc+0xf4>
 800d986:	4b3b      	ldr	r3, [pc, #236]	; (800da74 <pbuf_alloc+0x1d4>)
 800d988:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d98c:	493c      	ldr	r1, [pc, #240]	; (800da80 <pbuf_alloc+0x1e0>)
 800d98e:	483b      	ldr	r0, [pc, #236]	; (800da7c <pbuf_alloc+0x1dc>)
 800d990:	f00c f810 	bl	80199b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d102      	bne.n	800d9a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
 800d99e:	e002      	b.n	800d9a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d9aa:	8b7a      	ldrh	r2, [r7, #26]
 800d9ac:	89fb      	ldrh	r3, [r7, #14]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d9b6:	8b7b      	ldrh	r3, [r7, #26]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d19e      	bne.n	800d8fa <pbuf_alloc+0x5a>
      break;
 800d9bc:	e055      	b.n	800da6a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d9be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9c0:	3303      	adds	r3, #3
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	f023 0303 	bic.w	r3, r3, #3
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	88bb      	ldrh	r3, [r7, #4]
 800d9cc:	3303      	adds	r3, #3
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	f023 0303 	bic.w	r3, r3, #3
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	4413      	add	r3, r2
 800d9d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d9da:	8b3b      	ldrh	r3, [r7, #24]
 800d9dc:	3310      	adds	r3, #16
 800d9de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d9e0:	8b3a      	ldrh	r2, [r7, #24]
 800d9e2:	88bb      	ldrh	r3, [r7, #4]
 800d9e4:	3303      	adds	r3, #3
 800d9e6:	f023 0303 	bic.w	r3, r3, #3
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d306      	bcc.n	800d9fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d9ee:	8afa      	ldrh	r2, [r7, #22]
 800d9f0:	88bb      	ldrh	r3, [r7, #4]
 800d9f2:	3303      	adds	r3, #3
 800d9f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d201      	bcs.n	800da00 <pbuf_alloc+0x160>
        return NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e035      	b.n	800da6c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800da00:	8afb      	ldrh	r3, [r7, #22]
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff f966 	bl	800ccd4 <mem_malloc>
 800da08:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800da0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <pbuf_alloc+0x174>
        return NULL;
 800da10:	2300      	movs	r3, #0
 800da12:	e02b      	b.n	800da6c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800da14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da16:	3310      	adds	r3, #16
 800da18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da1a:	4413      	add	r3, r2
 800da1c:	3303      	adds	r3, #3
 800da1e:	f023 0303 	bic.w	r3, r3, #3
 800da22:	4618      	mov	r0, r3
 800da24:	88b9      	ldrh	r1, [r7, #4]
 800da26:	88ba      	ldrh	r2, [r7, #4]
 800da28:	2300      	movs	r3, #0
 800da2a:	9301      	str	r3, [sp, #4]
 800da2c:	887b      	ldrh	r3, [r7, #2]
 800da2e:	9300      	str	r3, [sp, #0]
 800da30:	460b      	mov	r3, r1
 800da32:	4601      	mov	r1, r0
 800da34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da36:	f7ff ff09 	bl	800d84c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800da3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	f003 0303 	and.w	r3, r3, #3
 800da42:	2b00      	cmp	r3, #0
 800da44:	d010      	beq.n	800da68 <pbuf_alloc+0x1c8>
 800da46:	4b0b      	ldr	r3, [pc, #44]	; (800da74 <pbuf_alloc+0x1d4>)
 800da48:	f44f 7291 	mov.w	r2, #290	; 0x122
 800da4c:	490d      	ldr	r1, [pc, #52]	; (800da84 <pbuf_alloc+0x1e4>)
 800da4e:	480b      	ldr	r0, [pc, #44]	; (800da7c <pbuf_alloc+0x1dc>)
 800da50:	f00b ffb0 	bl	80199b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800da54:	e008      	b.n	800da68 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800da56:	4b07      	ldr	r3, [pc, #28]	; (800da74 <pbuf_alloc+0x1d4>)
 800da58:	f240 1227 	movw	r2, #295	; 0x127
 800da5c:	490a      	ldr	r1, [pc, #40]	; (800da88 <pbuf_alloc+0x1e8>)
 800da5e:	4807      	ldr	r0, [pc, #28]	; (800da7c <pbuf_alloc+0x1dc>)
 800da60:	f00b ffa8 	bl	80199b4 <iprintf>
      return NULL;
 800da64:	2300      	movs	r3, #0
 800da66:	e001      	b.n	800da6c <pbuf_alloc+0x1cc>
      break;
 800da68:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3728      	adds	r7, #40	; 0x28
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	0801b2d8 	.word	0x0801b2d8
 800da78:	0801b308 	.word	0x0801b308
 800da7c:	0801b338 	.word	0x0801b338
 800da80:	0801b360 	.word	0x0801b360
 800da84:	0801b394 	.word	0x0801b394
 800da88:	0801b3c0 	.word	0x0801b3c0

0800da8c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af02      	add	r7, sp, #8
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
 800da98:	4613      	mov	r3, r2
 800da9a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800da9c:	883b      	ldrh	r3, [r7, #0]
 800da9e:	2b41      	cmp	r3, #65	; 0x41
 800daa0:	d009      	beq.n	800dab6 <pbuf_alloc_reference+0x2a>
 800daa2:	883b      	ldrh	r3, [r7, #0]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d006      	beq.n	800dab6 <pbuf_alloc_reference+0x2a>
 800daa8:	4b0f      	ldr	r3, [pc, #60]	; (800dae8 <pbuf_alloc_reference+0x5c>)
 800daaa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800daae:	490f      	ldr	r1, [pc, #60]	; (800daec <pbuf_alloc_reference+0x60>)
 800dab0:	480f      	ldr	r0, [pc, #60]	; (800daf0 <pbuf_alloc_reference+0x64>)
 800dab2:	f00b ff7f 	bl	80199b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dab6:	200b      	movs	r0, #11
 800dab8:	f7ff fab0 	bl	800d01c <memp_malloc>
 800dabc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dac4:	2300      	movs	r3, #0
 800dac6:	e00b      	b.n	800dae0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dac8:	8879      	ldrh	r1, [r7, #2]
 800daca:	887a      	ldrh	r2, [r7, #2]
 800dacc:	2300      	movs	r3, #0
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	883b      	ldrh	r3, [r7, #0]
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	460b      	mov	r3, r1
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff feb7 	bl	800d84c <pbuf_init_alloced_pbuf>
  return p;
 800dade:	68fb      	ldr	r3, [r7, #12]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	0801b2d8 	.word	0x0801b2d8
 800daec:	0801b3dc 	.word	0x0801b3dc
 800daf0:	0801b338 	.word	0x0801b338

0800daf4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af02      	add	r7, sp, #8
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	4603      	mov	r3, r0
 800dafe:	73fb      	strb	r3, [r7, #15]
 800db00:	460b      	mov	r3, r1
 800db02:	81bb      	strh	r3, [r7, #12]
 800db04:	4613      	mov	r3, r2
 800db06:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800db08:	7bfb      	ldrb	r3, [r7, #15]
 800db0a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800db0c:	8a7b      	ldrh	r3, [r7, #18]
 800db0e:	3303      	adds	r3, #3
 800db10:	f023 0203 	bic.w	r2, r3, #3
 800db14:	89bb      	ldrh	r3, [r7, #12]
 800db16:	441a      	add	r2, r3
 800db18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d901      	bls.n	800db22 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800db1e:	2300      	movs	r3, #0
 800db20:	e018      	b.n	800db54 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d007      	beq.n	800db38 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800db28:	8a7b      	ldrh	r3, [r7, #18]
 800db2a:	3303      	adds	r3, #3
 800db2c:	f023 0303 	bic.w	r3, r3, #3
 800db30:	6a3a      	ldr	r2, [r7, #32]
 800db32:	4413      	add	r3, r2
 800db34:	617b      	str	r3, [r7, #20]
 800db36:	e001      	b.n	800db3c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	89b9      	ldrh	r1, [r7, #12]
 800db40:	89ba      	ldrh	r2, [r7, #12]
 800db42:	2302      	movs	r3, #2
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	897b      	ldrh	r3, [r7, #10]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	460b      	mov	r3, r1
 800db4c:	6979      	ldr	r1, [r7, #20]
 800db4e:	f7ff fe7d 	bl	800d84c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800db52:	687b      	ldr	r3, [r7, #4]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3718      	adds	r7, #24
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d106      	bne.n	800db7c <pbuf_realloc+0x20>
 800db6e:	4b3a      	ldr	r3, [pc, #232]	; (800dc58 <pbuf_realloc+0xfc>)
 800db70:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800db74:	4939      	ldr	r1, [pc, #228]	; (800dc5c <pbuf_realloc+0x100>)
 800db76:	483a      	ldr	r0, [pc, #232]	; (800dc60 <pbuf_realloc+0x104>)
 800db78:	f00b ff1c 	bl	80199b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	891b      	ldrh	r3, [r3, #8]
 800db80:	887a      	ldrh	r2, [r7, #2]
 800db82:	429a      	cmp	r2, r3
 800db84:	d263      	bcs.n	800dc4e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	891a      	ldrh	r2, [r3, #8]
 800db8a:	887b      	ldrh	r3, [r7, #2]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800db90:	887b      	ldrh	r3, [r7, #2]
 800db92:	817b      	strh	r3, [r7, #10]
  q = p;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800db98:	e018      	b.n	800dbcc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	895b      	ldrh	r3, [r3, #10]
 800db9e:	897a      	ldrh	r2, [r7, #10]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	891a      	ldrh	r2, [r3, #8]
 800dba8:	893b      	ldrh	r3, [r7, #8]
 800dbaa:	1ad3      	subs	r3, r2, r3
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <pbuf_realloc+0x70>
 800dbbe:	4b26      	ldr	r3, [pc, #152]	; (800dc58 <pbuf_realloc+0xfc>)
 800dbc0:	f240 12af 	movw	r2, #431	; 0x1af
 800dbc4:	4927      	ldr	r1, [pc, #156]	; (800dc64 <pbuf_realloc+0x108>)
 800dbc6:	4826      	ldr	r0, [pc, #152]	; (800dc60 <pbuf_realloc+0x104>)
 800dbc8:	f00b fef4 	bl	80199b4 <iprintf>
  while (rem_len > q->len) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	895b      	ldrh	r3, [r3, #10]
 800dbd0:	897a      	ldrh	r2, [r7, #10]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d8e1      	bhi.n	800db9a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	7b1b      	ldrb	r3, [r3, #12]
 800dbda:	f003 030f 	and.w	r3, r3, #15
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d121      	bne.n	800dc26 <pbuf_realloc+0xca>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	895b      	ldrh	r3, [r3, #10]
 800dbe6:	897a      	ldrh	r2, [r7, #10]
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d01c      	beq.n	800dc26 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	7b5b      	ldrb	r3, [r3, #13]
 800dbf0:	f003 0302 	and.w	r3, r3, #2
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d116      	bne.n	800dc26 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	685a      	ldr	r2, [r3, #4]
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	1ad3      	subs	r3, r2, r3
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	897b      	ldrh	r3, [r7, #10]
 800dc04:	4413      	add	r3, r2
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	4619      	mov	r1, r3
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	f7fe ff58 	bl	800cac0 <mem_trim>
 800dc10:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <pbuf_realloc+0xca>
 800dc18:	4b0f      	ldr	r3, [pc, #60]	; (800dc58 <pbuf_realloc+0xfc>)
 800dc1a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dc1e:	4912      	ldr	r1, [pc, #72]	; (800dc68 <pbuf_realloc+0x10c>)
 800dc20:	480f      	ldr	r0, [pc, #60]	; (800dc60 <pbuf_realloc+0x104>)
 800dc22:	f00b fec7 	bl	80199b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	897a      	ldrh	r2, [r7, #10]
 800dc2a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	895a      	ldrh	r2, [r3, #10]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 f911 	bl	800de68 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	601a      	str	r2, [r3, #0]
 800dc4c:	e000      	b.n	800dc50 <pbuf_realloc+0xf4>
    return;
 800dc4e:	bf00      	nop

}
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
 800dc56:	bf00      	nop
 800dc58:	0801b2d8 	.word	0x0801b2d8
 800dc5c:	0801b3f0 	.word	0x0801b3f0
 800dc60:	0801b338 	.word	0x0801b338
 800dc64:	0801b408 	.word	0x0801b408
 800dc68:	0801b420 	.word	0x0801b420

0800dc6c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <pbuf_add_header_impl+0x22>
 800dc80:	4b2b      	ldr	r3, [pc, #172]	; (800dd30 <pbuf_add_header_impl+0xc4>)
 800dc82:	f240 12df 	movw	r2, #479	; 0x1df
 800dc86:	492b      	ldr	r1, [pc, #172]	; (800dd34 <pbuf_add_header_impl+0xc8>)
 800dc88:	482b      	ldr	r0, [pc, #172]	; (800dd38 <pbuf_add_header_impl+0xcc>)
 800dc8a:	f00b fe93 	bl	80199b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d003      	beq.n	800dc9c <pbuf_add_header_impl+0x30>
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc9a:	d301      	bcc.n	800dca0 <pbuf_add_header_impl+0x34>
    return 1;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e043      	b.n	800dd28 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <pbuf_add_header_impl+0x3e>
    return 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	e03e      	b.n	800dd28 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	891a      	ldrh	r2, [r3, #8]
 800dcb2:	8a7b      	ldrh	r3, [r7, #18]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	8a7a      	ldrh	r2, [r7, #18]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d901      	bls.n	800dcc2 <pbuf_add_header_impl+0x56>
    return 1;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e032      	b.n	800dd28 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	7b1b      	ldrb	r3, [r3, #12]
 800dcc6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dcc8:	8a3b      	ldrh	r3, [r7, #16]
 800dcca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00c      	beq.n	800dcec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	685a      	ldr	r2, [r3, #4]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	425b      	negs	r3, r3
 800dcda:	4413      	add	r3, r2
 800dcdc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	3310      	adds	r3, #16
 800dce2:	697a      	ldr	r2, [r7, #20]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d20d      	bcs.n	800dd04 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dce8:	2301      	movs	r3, #1
 800dcea:	e01d      	b.n	800dd28 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dcec:	79fb      	ldrb	r3, [r7, #7]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d006      	beq.n	800dd00 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	685a      	ldr	r2, [r3, #4]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	425b      	negs	r3, r3
 800dcfa:	4413      	add	r3, r2
 800dcfc:	617b      	str	r3, [r7, #20]
 800dcfe:	e001      	b.n	800dd04 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dd00:	2301      	movs	r3, #1
 800dd02:	e011      	b.n	800dd28 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	895a      	ldrh	r2, [r3, #10]
 800dd0e:	8a7b      	ldrh	r3, [r7, #18]
 800dd10:	4413      	add	r3, r2
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	891a      	ldrh	r2, [r3, #8]
 800dd1c:	8a7b      	ldrh	r3, [r7, #18]
 800dd1e:	4413      	add	r3, r2
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	811a      	strh	r2, [r3, #8]


  return 0;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3718      	adds	r7, #24
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	0801b2d8 	.word	0x0801b2d8
 800dd34:	0801b43c 	.word	0x0801b43c
 800dd38:	0801b338 	.word	0x0801b338

0800dd3c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dd46:	2200      	movs	r2, #0
 800dd48:	6839      	ldr	r1, [r7, #0]
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff ff8e 	bl	800dc6c <pbuf_add_header_impl>
 800dd50:	4603      	mov	r3, r0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
	...

0800dd5c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <pbuf_remove_header+0x1e>
 800dd6c:	4b20      	ldr	r3, [pc, #128]	; (800ddf0 <pbuf_remove_header+0x94>)
 800dd6e:	f240 224b 	movw	r2, #587	; 0x24b
 800dd72:	4920      	ldr	r1, [pc, #128]	; (800ddf4 <pbuf_remove_header+0x98>)
 800dd74:	4820      	ldr	r0, [pc, #128]	; (800ddf8 <pbuf_remove_header+0x9c>)
 800dd76:	f00b fe1d 	bl	80199b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d003      	beq.n	800dd88 <pbuf_remove_header+0x2c>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd86:	d301      	bcc.n	800dd8c <pbuf_remove_header+0x30>
    return 1;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e02c      	b.n	800dde6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <pbuf_remove_header+0x3a>
    return 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	e027      	b.n	800dde6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	895b      	ldrh	r3, [r3, #10]
 800dd9e:	89fa      	ldrh	r2, [r7, #14]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d908      	bls.n	800ddb6 <pbuf_remove_header+0x5a>
 800dda4:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <pbuf_remove_header+0x94>)
 800dda6:	f240 2255 	movw	r2, #597	; 0x255
 800ddaa:	4914      	ldr	r1, [pc, #80]	; (800ddfc <pbuf_remove_header+0xa0>)
 800ddac:	4812      	ldr	r0, [pc, #72]	; (800ddf8 <pbuf_remove_header+0x9c>)
 800ddae:	f00b fe01 	bl	80199b4 <iprintf>
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e017      	b.n	800dde6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	685a      	ldr	r2, [r3, #4]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	441a      	add	r2, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	895a      	ldrh	r2, [r3, #10]
 800ddcc:	89fb      	ldrh	r3, [r7, #14]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	891a      	ldrh	r2, [r3, #8]
 800ddda:	89fb      	ldrh	r3, [r7, #14]
 800dddc:	1ad3      	subs	r3, r2, r3
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
 800ddee:	bf00      	nop
 800ddf0:	0801b2d8 	.word	0x0801b2d8
 800ddf4:	0801b43c 	.word	0x0801b43c
 800ddf8:	0801b338 	.word	0x0801b338
 800ddfc:	0801b448 	.word	0x0801b448

0800de00 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	460b      	mov	r3, r1
 800de0a:	807b      	strh	r3, [r7, #2]
 800de0c:	4613      	mov	r3, r2
 800de0e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800de10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de14:	2b00      	cmp	r3, #0
 800de16:	da08      	bge.n	800de2a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800de18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de1c:	425b      	negs	r3, r3
 800de1e:	4619      	mov	r1, r3
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f7ff ff9b 	bl	800dd5c <pbuf_remove_header>
 800de26:	4603      	mov	r3, r0
 800de28:	e007      	b.n	800de3a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800de2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de2e:	787a      	ldrb	r2, [r7, #1]
 800de30:	4619      	mov	r1, r3
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f7ff ff1a 	bl	800dc6c <pbuf_add_header_impl>
 800de38:	4603      	mov	r3, r0
  }
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3708      	adds	r7, #8
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b082      	sub	sp, #8
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
 800de4a:	460b      	mov	r3, r1
 800de4c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800de4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800de52:	2201      	movs	r2, #1
 800de54:	4619      	mov	r1, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7ff ffd2 	bl	800de00 <pbuf_header_impl>
 800de5c:	4603      	mov	r3, r0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
	...

0800de68 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d10b      	bne.n	800de8e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <pbuf_free+0x22>
 800de7c:	4b3b      	ldr	r3, [pc, #236]	; (800df6c <pbuf_free+0x104>)
 800de7e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800de82:	493b      	ldr	r1, [pc, #236]	; (800df70 <pbuf_free+0x108>)
 800de84:	483b      	ldr	r0, [pc, #236]	; (800df74 <pbuf_free+0x10c>)
 800de86:	f00b fd95 	bl	80199b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800de8a:	2300      	movs	r3, #0
 800de8c:	e069      	b.n	800df62 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800de92:	e062      	b.n	800df5a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800de94:	f00b fb96 	bl	80195c4 <sys_arch_protect>
 800de98:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	7b9b      	ldrb	r3, [r3, #14]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d106      	bne.n	800deb0 <pbuf_free+0x48>
 800dea2:	4b32      	ldr	r3, [pc, #200]	; (800df6c <pbuf_free+0x104>)
 800dea4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dea8:	4933      	ldr	r1, [pc, #204]	; (800df78 <pbuf_free+0x110>)
 800deaa:	4832      	ldr	r0, [pc, #200]	; (800df74 <pbuf_free+0x10c>)
 800deac:	f00b fd82 	bl	80199b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	7b9b      	ldrb	r3, [r3, #14]
 800deb4:	3b01      	subs	r3, #1
 800deb6:	b2da      	uxtb	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	739a      	strb	r2, [r3, #14]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	7b9b      	ldrb	r3, [r3, #14]
 800dec0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800dec2:	69b8      	ldr	r0, [r7, #24]
 800dec4:	f00b fb8c 	bl	80195e0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d143      	bne.n	800df56 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7b1b      	ldrb	r3, [r3, #12]
 800ded8:	f003 030f 	and.w	r3, r3, #15
 800dedc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	7b5b      	ldrb	r3, [r3, #13]
 800dee2:	f003 0302 	and.w	r3, r3, #2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d011      	beq.n	800df0e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d106      	bne.n	800df04 <pbuf_free+0x9c>
 800def6:	4b1d      	ldr	r3, [pc, #116]	; (800df6c <pbuf_free+0x104>)
 800def8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800defc:	491f      	ldr	r1, [pc, #124]	; (800df7c <pbuf_free+0x114>)
 800defe:	481d      	ldr	r0, [pc, #116]	; (800df74 <pbuf_free+0x10c>)
 800df00:	f00b fd58 	bl	80199b4 <iprintf>
        pc->custom_free_function(p);
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	4798      	blx	r3
 800df0c:	e01d      	b.n	800df4a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
 800df10:	2b02      	cmp	r3, #2
 800df12:	d104      	bne.n	800df1e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	200c      	movs	r0, #12
 800df18:	f7ff f8f6 	bl	800d108 <memp_free>
 800df1c:	e015      	b.n	800df4a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800df1e:	7bfb      	ldrb	r3, [r7, #15]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d104      	bne.n	800df2e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800df24:	6879      	ldr	r1, [r7, #4]
 800df26:	200b      	movs	r0, #11
 800df28:	f7ff f8ee 	bl	800d108 <memp_free>
 800df2c:	e00d      	b.n	800df4a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800df2e:	7bfb      	ldrb	r3, [r7, #15]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d103      	bne.n	800df3c <pbuf_free+0xd4>
          mem_free(p);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7fe fd33 	bl	800c9a0 <mem_free>
 800df3a:	e006      	b.n	800df4a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800df3c:	4b0b      	ldr	r3, [pc, #44]	; (800df6c <pbuf_free+0x104>)
 800df3e:	f240 320f 	movw	r2, #783	; 0x30f
 800df42:	490f      	ldr	r1, [pc, #60]	; (800df80 <pbuf_free+0x118>)
 800df44:	480b      	ldr	r0, [pc, #44]	; (800df74 <pbuf_free+0x10c>)
 800df46:	f00b fd35 	bl	80199b4 <iprintf>
        }
      }
      count++;
 800df4a:	7ffb      	ldrb	r3, [r7, #31]
 800df4c:	3301      	adds	r3, #1
 800df4e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	607b      	str	r3, [r7, #4]
 800df54:	e001      	b.n	800df5a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d199      	bne.n	800de94 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800df60:	7ffb      	ldrb	r3, [r7, #31]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3720      	adds	r7, #32
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	0801b2d8 	.word	0x0801b2d8
 800df70:	0801b43c 	.word	0x0801b43c
 800df74:	0801b338 	.word	0x0801b338
 800df78:	0801b468 	.word	0x0801b468
 800df7c:	0801b480 	.word	0x0801b480
 800df80:	0801b4a4 	.word	0x0801b4a4

0800df84 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800df90:	e005      	b.n	800df9e <pbuf_clen+0x1a>
    ++len;
 800df92:	89fb      	ldrh	r3, [r7, #14]
 800df94:	3301      	adds	r3, #1
 800df96:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f6      	bne.n	800df92 <pbuf_clen+0xe>
  }
  return len;
 800dfa4:	89fb      	ldrh	r3, [r7, #14]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d016      	beq.n	800dff0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dfc2:	f00b faff 	bl	80195c4 <sys_arch_protect>
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7b9b      	ldrb	r3, [r3, #14]
 800dfcc:	3301      	adds	r3, #1
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	739a      	strb	r2, [r3, #14]
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f00b fb03 	bl	80195e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	7b9b      	ldrb	r3, [r3, #14]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d106      	bne.n	800dff0 <pbuf_ref+0x3c>
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <pbuf_ref+0x44>)
 800dfe4:	f240 3242 	movw	r2, #834	; 0x342
 800dfe8:	4904      	ldr	r1, [pc, #16]	; (800dffc <pbuf_ref+0x48>)
 800dfea:	4805      	ldr	r0, [pc, #20]	; (800e000 <pbuf_ref+0x4c>)
 800dfec:	f00b fce2 	bl	80199b4 <iprintf>
  }
}
 800dff0:	bf00      	nop
 800dff2:	3710      	adds	r7, #16
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	0801b2d8 	.word	0x0801b2d8
 800dffc:	0801b4b8 	.word	0x0801b4b8
 800e000:	0801b338 	.word	0x0801b338

0800e004 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b084      	sub	sp, #16
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <pbuf_cat+0x16>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d107      	bne.n	800e02a <pbuf_cat+0x26>
 800e01a:	4b20      	ldr	r3, [pc, #128]	; (800e09c <pbuf_cat+0x98>)
 800e01c:	f240 3259 	movw	r2, #857	; 0x359
 800e020:	491f      	ldr	r1, [pc, #124]	; (800e0a0 <pbuf_cat+0x9c>)
 800e022:	4820      	ldr	r0, [pc, #128]	; (800e0a4 <pbuf_cat+0xa0>)
 800e024:	f00b fcc6 	bl	80199b4 <iprintf>
 800e028:	e034      	b.n	800e094 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	e00a      	b.n	800e046 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	891a      	ldrh	r2, [r3, #8]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	891b      	ldrh	r3, [r3, #8]
 800e038:	4413      	add	r3, r2
 800e03a:	b29a      	uxth	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	60fb      	str	r3, [r7, #12]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1f0      	bne.n	800e030 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	891a      	ldrh	r2, [r3, #8]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	895b      	ldrh	r3, [r3, #10]
 800e056:	429a      	cmp	r2, r3
 800e058:	d006      	beq.n	800e068 <pbuf_cat+0x64>
 800e05a:	4b10      	ldr	r3, [pc, #64]	; (800e09c <pbuf_cat+0x98>)
 800e05c:	f240 3262 	movw	r2, #866	; 0x362
 800e060:	4911      	ldr	r1, [pc, #68]	; (800e0a8 <pbuf_cat+0xa4>)
 800e062:	4810      	ldr	r0, [pc, #64]	; (800e0a4 <pbuf_cat+0xa0>)
 800e064:	f00b fca6 	bl	80199b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d006      	beq.n	800e07e <pbuf_cat+0x7a>
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <pbuf_cat+0x98>)
 800e072:	f240 3263 	movw	r2, #867	; 0x363
 800e076:	490d      	ldr	r1, [pc, #52]	; (800e0ac <pbuf_cat+0xa8>)
 800e078:	480a      	ldr	r0, [pc, #40]	; (800e0a4 <pbuf_cat+0xa0>)
 800e07a:	f00b fc9b 	bl	80199b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	891a      	ldrh	r2, [r3, #8]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	891b      	ldrh	r3, [r3, #8]
 800e086:	4413      	add	r3, r2
 800e088:	b29a      	uxth	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	683a      	ldr	r2, [r7, #0]
 800e092:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e094:	3710      	adds	r7, #16
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0801b2d8 	.word	0x0801b2d8
 800e0a0:	0801b4cc 	.word	0x0801b4cc
 800e0a4:	0801b338 	.word	0x0801b338
 800e0a8:	0801b504 	.word	0x0801b504
 800e0ac:	0801b534 	.word	0x0801b534

0800e0b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	6878      	ldr	r0, [r7, #4]
 800e0be:	f7ff ffa1 	bl	800e004 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e0c2:	6838      	ldr	r0, [r7, #0]
 800e0c4:	f7ff ff76 	bl	800dfb4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	617b      	str	r3, [r7, #20]
 800e0de:	2300      	movs	r3, #0
 800e0e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d008      	beq.n	800e0fa <pbuf_copy+0x2a>
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d005      	beq.n	800e0fa <pbuf_copy+0x2a>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	891a      	ldrh	r2, [r3, #8]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	891b      	ldrh	r3, [r3, #8]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d209      	bcs.n	800e10e <pbuf_copy+0x3e>
 800e0fa:	4b57      	ldr	r3, [pc, #348]	; (800e258 <pbuf_copy+0x188>)
 800e0fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e100:	4956      	ldr	r1, [pc, #344]	; (800e25c <pbuf_copy+0x18c>)
 800e102:	4857      	ldr	r0, [pc, #348]	; (800e260 <pbuf_copy+0x190>)
 800e104:	f00b fc56 	bl	80199b4 <iprintf>
 800e108:	f06f 030f 	mvn.w	r3, #15
 800e10c:	e09f      	b.n	800e24e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	895b      	ldrh	r3, [r3, #10]
 800e112:	461a      	mov	r2, r3
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	1ad2      	subs	r2, r2, r3
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	895b      	ldrh	r3, [r3, #10]
 800e11c:	4619      	mov	r1, r3
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	1acb      	subs	r3, r1, r3
 800e122:	429a      	cmp	r2, r3
 800e124:	d306      	bcc.n	800e134 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	895b      	ldrh	r3, [r3, #10]
 800e12a:	461a      	mov	r2, r3
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	e005      	b.n	800e140 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	895b      	ldrh	r3, [r3, #10]
 800e138:	461a      	mov	r2, r3
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	18d0      	adds	r0, r2, r3
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	4413      	add	r3, r2
 800e150:	68fa      	ldr	r2, [r7, #12]
 800e152:	4619      	mov	r1, r3
 800e154:	f00b fd34 	bl	8019bc0 <memcpy>
    offset_to += len;
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	4413      	add	r3, r2
 800e15e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e160:	693a      	ldr	r2, [r7, #16]
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	4413      	add	r3, r2
 800e166:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	895b      	ldrh	r3, [r3, #10]
 800e16c:	461a      	mov	r2, r3
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	4293      	cmp	r3, r2
 800e172:	d906      	bls.n	800e182 <pbuf_copy+0xb2>
 800e174:	4b38      	ldr	r3, [pc, #224]	; (800e258 <pbuf_copy+0x188>)
 800e176:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e17a:	493a      	ldr	r1, [pc, #232]	; (800e264 <pbuf_copy+0x194>)
 800e17c:	4838      	ldr	r0, [pc, #224]	; (800e260 <pbuf_copy+0x190>)
 800e17e:	f00b fc19 	bl	80199b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	895b      	ldrh	r3, [r3, #10]
 800e186:	461a      	mov	r2, r3
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d906      	bls.n	800e19c <pbuf_copy+0xcc>
 800e18e:	4b32      	ldr	r3, [pc, #200]	; (800e258 <pbuf_copy+0x188>)
 800e190:	f240 32da 	movw	r2, #986	; 0x3da
 800e194:	4934      	ldr	r1, [pc, #208]	; (800e268 <pbuf_copy+0x198>)
 800e196:	4832      	ldr	r0, [pc, #200]	; (800e260 <pbuf_copy+0x190>)
 800e198:	f00b fc0c 	bl	80199b4 <iprintf>
    if (offset_from >= p_from->len) {
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	895b      	ldrh	r3, [r3, #10]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d304      	bcc.n	800e1b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	895b      	ldrh	r3, [r3, #10]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d114      	bne.n	800e1e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d10c      	bne.n	800e1e8 <pbuf_copy+0x118>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d009      	beq.n	800e1e8 <pbuf_copy+0x118>
 800e1d4:	4b20      	ldr	r3, [pc, #128]	; (800e258 <pbuf_copy+0x188>)
 800e1d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e1da:	4924      	ldr	r1, [pc, #144]	; (800e26c <pbuf_copy+0x19c>)
 800e1dc:	4820      	ldr	r0, [pc, #128]	; (800e260 <pbuf_copy+0x190>)
 800e1de:	f00b fbe9 	bl	80199b4 <iprintf>
 800e1e2:	f06f 030f 	mvn.w	r3, #15
 800e1e6:	e032      	b.n	800e24e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d013      	beq.n	800e216 <pbuf_copy+0x146>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	895a      	ldrh	r2, [r3, #10]
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	891b      	ldrh	r3, [r3, #8]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d10d      	bne.n	800e216 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d009      	beq.n	800e216 <pbuf_copy+0x146>
 800e202:	4b15      	ldr	r3, [pc, #84]	; (800e258 <pbuf_copy+0x188>)
 800e204:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e208:	4919      	ldr	r1, [pc, #100]	; (800e270 <pbuf_copy+0x1a0>)
 800e20a:	4815      	ldr	r0, [pc, #84]	; (800e260 <pbuf_copy+0x190>)
 800e20c:	f00b fbd2 	bl	80199b4 <iprintf>
 800e210:	f06f 0305 	mvn.w	r3, #5
 800e214:	e01b      	b.n	800e24e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d013      	beq.n	800e244 <pbuf_copy+0x174>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	895a      	ldrh	r2, [r3, #10]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	891b      	ldrh	r3, [r3, #8]
 800e224:	429a      	cmp	r2, r3
 800e226:	d10d      	bne.n	800e244 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d009      	beq.n	800e244 <pbuf_copy+0x174>
 800e230:	4b09      	ldr	r3, [pc, #36]	; (800e258 <pbuf_copy+0x188>)
 800e232:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e236:	490e      	ldr	r1, [pc, #56]	; (800e270 <pbuf_copy+0x1a0>)
 800e238:	4809      	ldr	r0, [pc, #36]	; (800e260 <pbuf_copy+0x190>)
 800e23a:	f00b fbbb 	bl	80199b4 <iprintf>
 800e23e:	f06f 0305 	mvn.w	r3, #5
 800e242:	e004      	b.n	800e24e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	f47f af61 	bne.w	800e10e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	0801b2d8 	.word	0x0801b2d8
 800e25c:	0801b580 	.word	0x0801b580
 800e260:	0801b338 	.word	0x0801b338
 800e264:	0801b5b0 	.word	0x0801b5b0
 800e268:	0801b5c8 	.word	0x0801b5c8
 800e26c:	0801b5e4 	.word	0x0801b5e4
 800e270:	0801b5f4 	.word	0x0801b5f4

0800e274 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	4611      	mov	r1, r2
 800e280:	461a      	mov	r2, r3
 800e282:	460b      	mov	r3, r1
 800e284:	80fb      	strh	r3, [r7, #6]
 800e286:	4613      	mov	r3, r2
 800e288:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e28a:	2300      	movs	r3, #0
 800e28c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d108      	bne.n	800e2aa <pbuf_copy_partial+0x36>
 800e298:	4b2b      	ldr	r3, [pc, #172]	; (800e348 <pbuf_copy_partial+0xd4>)
 800e29a:	f240 420a 	movw	r2, #1034	; 0x40a
 800e29e:	492b      	ldr	r1, [pc, #172]	; (800e34c <pbuf_copy_partial+0xd8>)
 800e2a0:	482b      	ldr	r0, [pc, #172]	; (800e350 <pbuf_copy_partial+0xdc>)
 800e2a2:	f00b fb87 	bl	80199b4 <iprintf>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e04a      	b.n	800e340 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d108      	bne.n	800e2c2 <pbuf_copy_partial+0x4e>
 800e2b0:	4b25      	ldr	r3, [pc, #148]	; (800e348 <pbuf_copy_partial+0xd4>)
 800e2b2:	f240 420b 	movw	r2, #1035	; 0x40b
 800e2b6:	4927      	ldr	r1, [pc, #156]	; (800e354 <pbuf_copy_partial+0xe0>)
 800e2b8:	4825      	ldr	r0, [pc, #148]	; (800e350 <pbuf_copy_partial+0xdc>)
 800e2ba:	f00b fb7b 	bl	80199b4 <iprintf>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	e03e      	b.n	800e340 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	e034      	b.n	800e332 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e2c8:	88bb      	ldrh	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <pbuf_copy_partial+0x70>
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	895b      	ldrh	r3, [r3, #10]
 800e2d2:	88ba      	ldrh	r2, [r7, #4]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d305      	bcc.n	800e2e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	895b      	ldrh	r3, [r3, #10]
 800e2dc:	88ba      	ldrh	r2, [r7, #4]
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	80bb      	strh	r3, [r7, #4]
 800e2e2:	e023      	b.n	800e32c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	895a      	ldrh	r2, [r3, #10]
 800e2e8:	88bb      	ldrh	r3, [r7, #4]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e2ee:	8b3a      	ldrh	r2, [r7, #24]
 800e2f0:	88fb      	ldrh	r3, [r7, #6]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d901      	bls.n	800e2fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e2f6:	88fb      	ldrh	r3, [r7, #6]
 800e2f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e2fa:	8b7b      	ldrh	r3, [r7, #26]
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	18d0      	adds	r0, r2, r3
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	685a      	ldr	r2, [r3, #4]
 800e304:	88bb      	ldrh	r3, [r7, #4]
 800e306:	4413      	add	r3, r2
 800e308:	8b3a      	ldrh	r2, [r7, #24]
 800e30a:	4619      	mov	r1, r3
 800e30c:	f00b fc58 	bl	8019bc0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e310:	8afa      	ldrh	r2, [r7, #22]
 800e312:	8b3b      	ldrh	r3, [r7, #24]
 800e314:	4413      	add	r3, r2
 800e316:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e318:	8b7a      	ldrh	r2, [r7, #26]
 800e31a:	8b3b      	ldrh	r3, [r7, #24]
 800e31c:	4413      	add	r3, r2
 800e31e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e320:	88fa      	ldrh	r2, [r7, #6]
 800e322:	8b3b      	ldrh	r3, [r7, #24]
 800e324:	1ad3      	subs	r3, r2, r3
 800e326:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	61fb      	str	r3, [r7, #28]
 800e332:	88fb      	ldrh	r3, [r7, #6]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d002      	beq.n	800e33e <pbuf_copy_partial+0xca>
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d1c4      	bne.n	800e2c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e33e:	8afb      	ldrh	r3, [r7, #22]
}
 800e340:	4618      	mov	r0, r3
 800e342:	3720      	adds	r7, #32
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	0801b2d8 	.word	0x0801b2d8
 800e34c:	0801b620 	.word	0x0801b620
 800e350:	0801b338 	.word	0x0801b338
 800e354:	0801b640 	.word	0x0801b640

0800e358 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	603a      	str	r2, [r7, #0]
 800e362:	71fb      	strb	r3, [r7, #7]
 800e364:	460b      	mov	r3, r1
 800e366:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	8919      	ldrh	r1, [r3, #8]
 800e36c:	88ba      	ldrh	r2, [r7, #4]
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fa95 	bl	800d8a0 <pbuf_alloc>
 800e376:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <pbuf_clone+0x2a>
    return NULL;
 800e37e:	2300      	movs	r3, #0
 800e380:	e011      	b.n	800e3a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e382:	6839      	ldr	r1, [r7, #0]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff fea3 	bl	800e0d0 <pbuf_copy>
 800e38a:	4603      	mov	r3, r0
 800e38c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e38e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d006      	beq.n	800e3a4 <pbuf_clone+0x4c>
 800e396:	4b06      	ldr	r3, [pc, #24]	; (800e3b0 <pbuf_clone+0x58>)
 800e398:	f240 5224 	movw	r2, #1316	; 0x524
 800e39c:	4905      	ldr	r1, [pc, #20]	; (800e3b4 <pbuf_clone+0x5c>)
 800e39e:	4806      	ldr	r0, [pc, #24]	; (800e3b8 <pbuf_clone+0x60>)
 800e3a0:	f00b fb08 	bl	80199b4 <iprintf>
  return q;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0801b2d8 	.word	0x0801b2d8
 800e3b4:	0801b74c 	.word	0x0801b74c
 800e3b8:	0801b338 	.word	0x0801b338

0800e3bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e3c0:	f00b f93c 	bl	801963c <rand>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e3cc:	b29b      	uxth	r3, r3
 800e3ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	4b01      	ldr	r3, [pc, #4]	; (800e3dc <tcp_init+0x20>)
 800e3d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e3d8:	bf00      	nop
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	20000030 	.word	0x20000030

0800e3e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d105      	bne.n	800e3fc <tcp_free+0x1c>
 800e3f0:	4b06      	ldr	r3, [pc, #24]	; (800e40c <tcp_free+0x2c>)
 800e3f2:	22d4      	movs	r2, #212	; 0xd4
 800e3f4:	4906      	ldr	r1, [pc, #24]	; (800e410 <tcp_free+0x30>)
 800e3f6:	4807      	ldr	r0, [pc, #28]	; (800e414 <tcp_free+0x34>)
 800e3f8:	f00b fadc 	bl	80199b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e3fc:	6879      	ldr	r1, [r7, #4]
 800e3fe:	2001      	movs	r0, #1
 800e400:	f7fe fe82 	bl	800d108 <memp_free>
}
 800e404:	bf00      	nop
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	0801b7d8 	.word	0x0801b7d8
 800e410:	0801b808 	.word	0x0801b808
 800e414:	0801b81c 	.word	0x0801b81c

0800e418 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7d1b      	ldrb	r3, [r3, #20]
 800e424:	2b01      	cmp	r3, #1
 800e426:	d105      	bne.n	800e434 <tcp_free_listen+0x1c>
 800e428:	4b06      	ldr	r3, [pc, #24]	; (800e444 <tcp_free_listen+0x2c>)
 800e42a:	22df      	movs	r2, #223	; 0xdf
 800e42c:	4906      	ldr	r1, [pc, #24]	; (800e448 <tcp_free_listen+0x30>)
 800e42e:	4807      	ldr	r0, [pc, #28]	; (800e44c <tcp_free_listen+0x34>)
 800e430:	f00b fac0 	bl	80199b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	2002      	movs	r0, #2
 800e438:	f7fe fe66 	bl	800d108 <memp_free>
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	0801b7d8 	.word	0x0801b7d8
 800e448:	0801b844 	.word	0x0801b844
 800e44c:	0801b81c 	.word	0x0801b81c

0800e450 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e454:	f001 f85c 	bl	800f510 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e458:	4b07      	ldr	r3, [pc, #28]	; (800e478 <tcp_tmr+0x28>)
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	3301      	adds	r3, #1
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <tcp_tmr+0x28>)
 800e462:	701a      	strb	r2, [r3, #0]
 800e464:	4b04      	ldr	r3, [pc, #16]	; (800e478 <tcp_tmr+0x28>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d001      	beq.n	800e474 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e470:	f000 fd0e 	bl	800ee90 <tcp_slowtmr>
  }
}
 800e474:	bf00      	nop
 800e476:	bd80      	pop	{r7, pc}
 800e478:	2000cf31 	.word	0x2000cf31

0800e47c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d105      	bne.n	800e498 <tcp_remove_listener+0x1c>
 800e48c:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <tcp_remove_listener+0x48>)
 800e48e:	22ff      	movs	r2, #255	; 0xff
 800e490:	490d      	ldr	r1, [pc, #52]	; (800e4c8 <tcp_remove_listener+0x4c>)
 800e492:	480e      	ldr	r0, [pc, #56]	; (800e4cc <tcp_remove_listener+0x50>)
 800e494:	f00b fa8e 	bl	80199b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	e00a      	b.n	800e4b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d102      	bne.n	800e4ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1f1      	bne.n	800e49e <tcp_remove_listener+0x22>
    }
  }
}
 800e4ba:	bf00      	nop
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	0801b7d8 	.word	0x0801b7d8
 800e4c8:	0801b860 	.word	0x0801b860
 800e4cc:	0801b81c 	.word	0x0801b81c

0800e4d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b084      	sub	sp, #16
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d106      	bne.n	800e4ec <tcp_listen_closed+0x1c>
 800e4de:	4b14      	ldr	r3, [pc, #80]	; (800e530 <tcp_listen_closed+0x60>)
 800e4e0:	f240 1211 	movw	r2, #273	; 0x111
 800e4e4:	4913      	ldr	r1, [pc, #76]	; (800e534 <tcp_listen_closed+0x64>)
 800e4e6:	4814      	ldr	r0, [pc, #80]	; (800e538 <tcp_listen_closed+0x68>)
 800e4e8:	f00b fa64 	bl	80199b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	7d1b      	ldrb	r3, [r3, #20]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d006      	beq.n	800e502 <tcp_listen_closed+0x32>
 800e4f4:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <tcp_listen_closed+0x60>)
 800e4f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e4fa:	4910      	ldr	r1, [pc, #64]	; (800e53c <tcp_listen_closed+0x6c>)
 800e4fc:	480e      	ldr	r0, [pc, #56]	; (800e538 <tcp_listen_closed+0x68>)
 800e4fe:	f00b fa59 	bl	80199b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e502:	2301      	movs	r3, #1
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	e00b      	b.n	800e520 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e508:	4a0d      	ldr	r2, [pc, #52]	; (800e540 <tcp_listen_closed+0x70>)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6879      	ldr	r1, [r7, #4]
 800e514:	4618      	mov	r0, r3
 800e516:	f7ff ffb1 	bl	800e47c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3301      	adds	r3, #1
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b03      	cmp	r3, #3
 800e524:	d9f0      	bls.n	800e508 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0801b7d8 	.word	0x0801b7d8
 800e534:	0801b888 	.word	0x0801b888
 800e538:	0801b81c 	.word	0x0801b81c
 800e53c:	0801b894 	.word	0x0801b894
 800e540:	0801fee0 	.word	0x0801fee0

0800e544 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e544:	b5b0      	push	{r4, r5, r7, lr}
 800e546:	b088      	sub	sp, #32
 800e548:	af04      	add	r7, sp, #16
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	460b      	mov	r3, r1
 800e54e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d106      	bne.n	800e564 <tcp_close_shutdown+0x20>
 800e556:	4b63      	ldr	r3, [pc, #396]	; (800e6e4 <tcp_close_shutdown+0x1a0>)
 800e558:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e55c:	4962      	ldr	r1, [pc, #392]	; (800e6e8 <tcp_close_shutdown+0x1a4>)
 800e55e:	4863      	ldr	r0, [pc, #396]	; (800e6ec <tcp_close_shutdown+0x1a8>)
 800e560:	f00b fa28 	bl	80199b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e564:	78fb      	ldrb	r3, [r7, #3]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d066      	beq.n	800e638 <tcp_close_shutdown+0xf4>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7d1b      	ldrb	r3, [r3, #20]
 800e56e:	2b04      	cmp	r3, #4
 800e570:	d003      	beq.n	800e57a <tcp_close_shutdown+0x36>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	7d1b      	ldrb	r3, [r3, #20]
 800e576:	2b07      	cmp	r3, #7
 800e578:	d15e      	bne.n	800e638 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d104      	bne.n	800e58c <tcp_close_shutdown+0x48>
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e586:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e58a:	d055      	beq.n	800e638 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <tcp_close_shutdown+0x62>
 800e598:	4b52      	ldr	r3, [pc, #328]	; (800e6e4 <tcp_close_shutdown+0x1a0>)
 800e59a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e59e:	4954      	ldr	r1, [pc, #336]	; (800e6f0 <tcp_close_shutdown+0x1ac>)
 800e5a0:	4852      	ldr	r0, [pc, #328]	; (800e6ec <tcp_close_shutdown+0x1a8>)
 800e5a2:	f00b fa07 	bl	80199b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e5ae:	687d      	ldr	r5, [r7, #4]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	8ad2      	ldrh	r2, [r2, #22]
 800e5b8:	6879      	ldr	r1, [r7, #4]
 800e5ba:	8b09      	ldrh	r1, [r1, #24]
 800e5bc:	9102      	str	r1, [sp, #8]
 800e5be:	9201      	str	r2, [sp, #4]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	4601      	mov	r1, r0
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f005 fd8f 	bl	80140ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f001 fb6c 	bl	800fcac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e5d4:	4b47      	ldr	r3, [pc, #284]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d105      	bne.n	800e5ea <tcp_close_shutdown+0xa6>
 800e5de:	4b45      	ldr	r3, [pc, #276]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	4a43      	ldr	r2, [pc, #268]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	e013      	b.n	800e612 <tcp_close_shutdown+0xce>
 800e5ea:	4b42      	ldr	r3, [pc, #264]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	60fb      	str	r3, [r7, #12]
 800e5f0:	e00c      	b.n	800e60c <tcp_close_shutdown+0xc8>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d104      	bne.n	800e606 <tcp_close_shutdown+0xc2>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	60da      	str	r2, [r3, #12]
 800e604:	e005      	b.n	800e612 <tcp_close_shutdown+0xce>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	60fb      	str	r3, [r7, #12]
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1ef      	bne.n	800e5f2 <tcp_close_shutdown+0xae>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2200      	movs	r2, #0
 800e616:	60da      	str	r2, [r3, #12]
 800e618:	4b37      	ldr	r3, [pc, #220]	; (800e6f8 <tcp_close_shutdown+0x1b4>)
 800e61a:	2201      	movs	r2, #1
 800e61c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e61e:	4b37      	ldr	r3, [pc, #220]	; (800e6fc <tcp_close_shutdown+0x1b8>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	429a      	cmp	r2, r3
 800e626:	d102      	bne.n	800e62e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e628:	f004 f804 	bl	8012634 <tcp_trigger_input_pcb_close>
 800e62c:	e002      	b.n	800e634 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7ff fed6 	bl	800e3e0 <tcp_free>
      }
      return ERR_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	e050      	b.n	800e6da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	7d1b      	ldrb	r3, [r3, #20]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d03b      	beq.n	800e6b8 <tcp_close_shutdown+0x174>
 800e640:	2b02      	cmp	r3, #2
 800e642:	dc44      	bgt.n	800e6ce <tcp_close_shutdown+0x18a>
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <tcp_close_shutdown+0x10a>
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d02a      	beq.n	800e6a2 <tcp_close_shutdown+0x15e>
 800e64c:	e03f      	b.n	800e6ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	8adb      	ldrh	r3, [r3, #22]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d021      	beq.n	800e69a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e656:	4b2a      	ldr	r3, [pc, #168]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	687a      	ldr	r2, [r7, #4]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d105      	bne.n	800e66c <tcp_close_shutdown+0x128>
 800e660:	4b27      	ldr	r3, [pc, #156]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	4a26      	ldr	r2, [pc, #152]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	e013      	b.n	800e694 <tcp_close_shutdown+0x150>
 800e66c:	4b24      	ldr	r3, [pc, #144]	; (800e700 <tcp_close_shutdown+0x1bc>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60bb      	str	r3, [r7, #8]
 800e672:	e00c      	b.n	800e68e <tcp_close_shutdown+0x14a>
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	687a      	ldr	r2, [r7, #4]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d104      	bne.n	800e688 <tcp_close_shutdown+0x144>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68da      	ldr	r2, [r3, #12]
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	60da      	str	r2, [r3, #12]
 800e686:	e005      	b.n	800e694 <tcp_close_shutdown+0x150>
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	60bb      	str	r3, [r7, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1ef      	bne.n	800e674 <tcp_close_shutdown+0x130>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2200      	movs	r2, #0
 800e698:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff fea0 	bl	800e3e0 <tcp_free>
      break;
 800e6a0:	e01a      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff ff14 	bl	800e4d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	4816      	ldr	r0, [pc, #88]	; (800e704 <tcp_close_shutdown+0x1c0>)
 800e6ac:	f001 fb4e 	bl	800fd4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f7ff feb1 	bl	800e418 <tcp_free_listen>
      break;
 800e6b6:	e00f      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e6b8:	6879      	ldr	r1, [r7, #4]
 800e6ba:	480e      	ldr	r0, [pc, #56]	; (800e6f4 <tcp_close_shutdown+0x1b0>)
 800e6bc:	f001 fb46 	bl	800fd4c <tcp_pcb_remove>
 800e6c0:	4b0d      	ldr	r3, [pc, #52]	; (800e6f8 <tcp_close_shutdown+0x1b4>)
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7ff fe8a 	bl	800e3e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e6cc:	e004      	b.n	800e6d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f81a 	bl	800e708 <tcp_close_shutdown_fin>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	e000      	b.n	800e6da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bdb0      	pop	{r4, r5, r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0801b7d8 	.word	0x0801b7d8
 800e6e8:	0801b8ac 	.word	0x0801b8ac
 800e6ec:	0801b81c 	.word	0x0801b81c
 800e6f0:	0801b8cc 	.word	0x0801b8cc
 800e6f4:	2000cf28 	.word	0x2000cf28
 800e6f8:	2000cf30 	.word	0x2000cf30
 800e6fc:	2000cf68 	.word	0x2000cf68
 800e700:	2000cf20 	.word	0x2000cf20
 800e704:	2000cf24 	.word	0x2000cf24

0800e708 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b084      	sub	sp, #16
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d106      	bne.n	800e724 <tcp_close_shutdown_fin+0x1c>
 800e716:	4b2e      	ldr	r3, [pc, #184]	; (800e7d0 <tcp_close_shutdown_fin+0xc8>)
 800e718:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e71c:	492d      	ldr	r1, [pc, #180]	; (800e7d4 <tcp_close_shutdown_fin+0xcc>)
 800e71e:	482e      	ldr	r0, [pc, #184]	; (800e7d8 <tcp_close_shutdown_fin+0xd0>)
 800e720:	f00b f948 	bl	80199b4 <iprintf>

  switch (pcb->state) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	7d1b      	ldrb	r3, [r3, #20]
 800e728:	2b07      	cmp	r3, #7
 800e72a:	d020      	beq.n	800e76e <tcp_close_shutdown_fin+0x66>
 800e72c:	2b07      	cmp	r3, #7
 800e72e:	dc2b      	bgt.n	800e788 <tcp_close_shutdown_fin+0x80>
 800e730:	2b03      	cmp	r3, #3
 800e732:	d002      	beq.n	800e73a <tcp_close_shutdown_fin+0x32>
 800e734:	2b04      	cmp	r3, #4
 800e736:	d00d      	beq.n	800e754 <tcp_close_shutdown_fin+0x4c>
 800e738:	e026      	b.n	800e788 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f004 fde4 	bl	8013308 <tcp_send_fin>
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d11f      	bne.n	800e78c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2205      	movs	r2, #5
 800e750:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e752:	e01b      	b.n	800e78c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f004 fdd7 	bl	8013308 <tcp_send_fin>
 800e75a:	4603      	mov	r3, r0
 800e75c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e75e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d114      	bne.n	800e790 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2205      	movs	r2, #5
 800e76a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e76c:	e010      	b.n	800e790 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f004 fdca 	bl	8013308 <tcp_send_fin>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2209      	movs	r2, #9
 800e784:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e786:	e005      	b.n	800e794 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e788:	2300      	movs	r3, #0
 800e78a:	e01c      	b.n	800e7c6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e78c:	bf00      	nop
 800e78e:	e002      	b.n	800e796 <tcp_close_shutdown_fin+0x8e>
      break;
 800e790:	bf00      	nop
 800e792:	e000      	b.n	800e796 <tcp_close_shutdown_fin+0x8e>
      break;
 800e794:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d103      	bne.n	800e7a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f004 fef0 	bl	8013584 <tcp_output>
 800e7a4:	e00d      	b.n	800e7c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e7a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ae:	d108      	bne.n	800e7c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8b5b      	ldrh	r3, [r3, #26]
 800e7b4:	f043 0308 	orr.w	r3, r3, #8
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	e001      	b.n	800e7c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	0801b7d8 	.word	0x0801b7d8
 800e7d4:	0801b888 	.word	0x0801b888
 800e7d8:	0801b81c 	.word	0x0801b81c

0800e7dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <tcp_close+0x22>
 800e7ea:	4b0f      	ldr	r3, [pc, #60]	; (800e828 <tcp_close+0x4c>)
 800e7ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e7f0:	490e      	ldr	r1, [pc, #56]	; (800e82c <tcp_close+0x50>)
 800e7f2:	480f      	ldr	r0, [pc, #60]	; (800e830 <tcp_close+0x54>)
 800e7f4:	f00b f8de 	bl	80199b4 <iprintf>
 800e7f8:	f06f 030f 	mvn.w	r3, #15
 800e7fc:	e00f      	b.n	800e81e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	7d1b      	ldrb	r3, [r3, #20]
 800e802:	2b01      	cmp	r3, #1
 800e804:	d006      	beq.n	800e814 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	8b5b      	ldrh	r3, [r3, #26]
 800e80a:	f043 0310 	orr.w	r3, r3, #16
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e814:	2101      	movs	r1, #1
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7ff fe94 	bl	800e544 <tcp_close_shutdown>
 800e81c:	4603      	mov	r3, r0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801b7d8 	.word	0x0801b7d8
 800e82c:	0801b8e8 	.word	0x0801b8e8
 800e830:	0801b81c 	.word	0x0801b81c

0800e834 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b08e      	sub	sp, #56	; 0x38
 800e838:	af04      	add	r7, sp, #16
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d107      	bne.n	800e854 <tcp_abandon+0x20>
 800e844:	4b52      	ldr	r3, [pc, #328]	; (800e990 <tcp_abandon+0x15c>)
 800e846:	f240 223d 	movw	r2, #573	; 0x23d
 800e84a:	4952      	ldr	r1, [pc, #328]	; (800e994 <tcp_abandon+0x160>)
 800e84c:	4852      	ldr	r0, [pc, #328]	; (800e998 <tcp_abandon+0x164>)
 800e84e:	f00b f8b1 	bl	80199b4 <iprintf>
 800e852:	e099      	b.n	800e988 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7d1b      	ldrb	r3, [r3, #20]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d106      	bne.n	800e86a <tcp_abandon+0x36>
 800e85c:	4b4c      	ldr	r3, [pc, #304]	; (800e990 <tcp_abandon+0x15c>)
 800e85e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e862:	494e      	ldr	r1, [pc, #312]	; (800e99c <tcp_abandon+0x168>)
 800e864:	484c      	ldr	r0, [pc, #304]	; (800e998 <tcp_abandon+0x164>)
 800e866:	f00b f8a5 	bl	80199b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	7d1b      	ldrb	r3, [r3, #20]
 800e86e:	2b0a      	cmp	r3, #10
 800e870:	d107      	bne.n	800e882 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	484a      	ldr	r0, [pc, #296]	; (800e9a0 <tcp_abandon+0x16c>)
 800e876:	f001 fa69 	bl	800fd4c <tcp_pcb_remove>
    tcp_free(pcb);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f7ff fdb0 	bl	800e3e0 <tcp_free>
 800e880:	e082      	b.n	800e988 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e882:	2300      	movs	r3, #0
 800e884:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e894:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e89c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7d1b      	ldrb	r3, [r3, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d126      	bne.n	800e8fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	8adb      	ldrh	r3, [r3, #22]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d02e      	beq.n	800e912 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8b4:	4b3b      	ldr	r3, [pc, #236]	; (800e9a4 <tcp_abandon+0x170>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d105      	bne.n	800e8ca <tcp_abandon+0x96>
 800e8be:	4b39      	ldr	r3, [pc, #228]	; (800e9a4 <tcp_abandon+0x170>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	4a37      	ldr	r2, [pc, #220]	; (800e9a4 <tcp_abandon+0x170>)
 800e8c6:	6013      	str	r3, [r2, #0]
 800e8c8:	e013      	b.n	800e8f2 <tcp_abandon+0xbe>
 800e8ca:	4b36      	ldr	r3, [pc, #216]	; (800e9a4 <tcp_abandon+0x170>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	e00c      	b.n	800e8ec <tcp_abandon+0xb8>
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	68db      	ldr	r3, [r3, #12]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d104      	bne.n	800e8e6 <tcp_abandon+0xb2>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	68da      	ldr	r2, [r3, #12]
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	60da      	str	r2, [r3, #12]
 800e8e4:	e005      	b.n	800e8f2 <tcp_abandon+0xbe>
 800e8e6:	69fb      	ldr	r3, [r7, #28]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	61fb      	str	r3, [r7, #28]
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d1ef      	bne.n	800e8d2 <tcp_abandon+0x9e>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	60da      	str	r2, [r3, #12]
 800e8f8:	e00b      	b.n	800e912 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	8adb      	ldrh	r3, [r3, #22]
 800e902:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e904:	6879      	ldr	r1, [r7, #4]
 800e906:	4828      	ldr	r0, [pc, #160]	; (800e9a8 <tcp_abandon+0x174>)
 800e908:	f001 fa20 	bl	800fd4c <tcp_pcb_remove>
 800e90c:	4b27      	ldr	r3, [pc, #156]	; (800e9ac <tcp_abandon+0x178>)
 800e90e:	2201      	movs	r2, #1
 800e910:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 fed6 	bl	800f6d0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d004      	beq.n	800e936 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e930:	4618      	mov	r0, r3
 800e932:	f000 fecd 	bl	800f6d0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d004      	beq.n	800e948 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e942:	4618      	mov	r0, r3
 800e944:	f000 fec4 	bl	800f6d0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00e      	beq.n	800e96c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e94e:	6879      	ldr	r1, [r7, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	3304      	adds	r3, #4
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	8b12      	ldrh	r2, [r2, #24]
 800e958:	9202      	str	r2, [sp, #8]
 800e95a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e95c:	9201      	str	r2, [sp, #4]
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	460b      	mov	r3, r1
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	69b9      	ldr	r1, [r7, #24]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f005 fbc0 	bl	80140ec <tcp_rst>
    }
    last_state = pcb->state;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	7d1b      	ldrb	r3, [r3, #20]
 800e970:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff fd34 	bl	800e3e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d004      	beq.n	800e988 <tcp_abandon+0x154>
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	f06f 010c 	mvn.w	r1, #12
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	4798      	blx	r3
  }
}
 800e988:	3728      	adds	r7, #40	; 0x28
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	0801b7d8 	.word	0x0801b7d8
 800e994:	0801b91c 	.word	0x0801b91c
 800e998:	0801b81c 	.word	0x0801b81c
 800e99c:	0801b938 	.word	0x0801b938
 800e9a0:	2000cf2c 	.word	0x2000cf2c
 800e9a4:	2000cf20 	.word	0x2000cf20
 800e9a8:	2000cf28 	.word	0x2000cf28
 800e9ac:	2000cf30 	.word	0x2000cf30

0800e9b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7ff ff3a 	bl	800e834 <tcp_abandon>
}
 800e9c0:	bf00      	nop
 800e9c2:	3708      	adds	r7, #8
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e9d6:	2304      	movs	r3, #4
 800e9d8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e9e0:	4b3e      	ldr	r3, [pc, #248]	; (800eadc <tcp_bind+0x114>)
 800e9e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <tcp_bind+0x36>
 800e9ea:	4b3d      	ldr	r3, [pc, #244]	; (800eae0 <tcp_bind+0x118>)
 800e9ec:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e9f0:	493c      	ldr	r1, [pc, #240]	; (800eae4 <tcp_bind+0x11c>)
 800e9f2:	483d      	ldr	r0, [pc, #244]	; (800eae8 <tcp_bind+0x120>)
 800e9f4:	f00a ffde 	bl	80199b4 <iprintf>
 800e9f8:	f06f 030f 	mvn.w	r3, #15
 800e9fc:	e06a      	b.n	800ead4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	7d1b      	ldrb	r3, [r3, #20]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d009      	beq.n	800ea1a <tcp_bind+0x52>
 800ea06:	4b36      	ldr	r3, [pc, #216]	; (800eae0 <tcp_bind+0x118>)
 800ea08:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ea0c:	4937      	ldr	r1, [pc, #220]	; (800eaec <tcp_bind+0x124>)
 800ea0e:	4836      	ldr	r0, [pc, #216]	; (800eae8 <tcp_bind+0x120>)
 800ea10:	f00a ffd0 	bl	80199b4 <iprintf>
 800ea14:	f06f 0305 	mvn.w	r3, #5
 800ea18:	e05c      	b.n	800ead4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ea1a:	88fb      	ldrh	r3, [r7, #6]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d109      	bne.n	800ea34 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ea20:	f000 f9f0 	bl	800ee04 <tcp_new_port>
 800ea24:	4603      	mov	r3, r0
 800ea26:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea28:	88fb      	ldrh	r3, [r7, #6]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d135      	bne.n	800ea9a <tcp_bind+0xd2>
      return ERR_BUF;
 800ea2e:	f06f 0301 	mvn.w	r3, #1
 800ea32:	e04f      	b.n	800ead4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ea34:	2300      	movs	r3, #0
 800ea36:	61fb      	str	r3, [r7, #28]
 800ea38:	e02b      	b.n	800ea92 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea3a:	4a2d      	ldr	r2, [pc, #180]	; (800eaf0 <tcp_bind+0x128>)
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	61bb      	str	r3, [r7, #24]
 800ea46:	e01e      	b.n	800ea86 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	8adb      	ldrh	r3, [r3, #22]
 800ea4c:	88fa      	ldrh	r2, [r7, #6]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d116      	bne.n	800ea80 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea52:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d010      	beq.n	800ea7a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d00c      	beq.n	800ea7a <tcp_bind+0xb2>
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d009      	beq.n	800ea7a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d005      	beq.n	800ea7a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d102      	bne.n	800ea80 <tcp_bind+0xb8>
              return ERR_USE;
 800ea7a:	f06f 0307 	mvn.w	r3, #7
 800ea7e:	e029      	b.n	800ead4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	61bb      	str	r3, [r7, #24]
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1dd      	bne.n	800ea48 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	61fb      	str	r3, [r7, #28]
 800ea92:	69fa      	ldr	r2, [r7, #28]
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	dbcf      	blt.n	800ea3a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00c      	beq.n	800eaba <tcp_bind+0xf2>
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d008      	beq.n	800eaba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d002      	beq.n	800eab4 <tcp_bind+0xec>
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	e000      	b.n	800eab6 <tcp_bind+0xee>
 800eab4:	2300      	movs	r3, #0
 800eab6:	68fa      	ldr	r2, [r7, #12]
 800eab8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	88fa      	ldrh	r2, [r7, #6]
 800eabe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800eac0:	4b0c      	ldr	r3, [pc, #48]	; (800eaf4 <tcp_bind+0x12c>)
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	60da      	str	r2, [r3, #12]
 800eac8:	4a0a      	ldr	r2, [pc, #40]	; (800eaf4 <tcp_bind+0x12c>)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6013      	str	r3, [r2, #0]
 800eace:	f005 fccf 	bl	8014470 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ead2:	2300      	movs	r3, #0
}
 800ead4:	4618      	mov	r0, r3
 800ead6:	3720      	adds	r7, #32
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	0801ff18 	.word	0x0801ff18
 800eae0:	0801b7d8 	.word	0x0801b7d8
 800eae4:	0801b96c 	.word	0x0801b96c
 800eae8:	0801b81c 	.word	0x0801b81c
 800eaec:	0801b984 	.word	0x0801b984
 800eaf0:	0801fee0 	.word	0x0801fee0
 800eaf4:	2000cf20 	.word	0x2000cf20

0800eaf8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <tcp_accept_null+0x22>
 800eb0c:	4b07      	ldr	r3, [pc, #28]	; (800eb2c <tcp_accept_null+0x34>)
 800eb0e:	f240 320f 	movw	r2, #783	; 0x30f
 800eb12:	4907      	ldr	r1, [pc, #28]	; (800eb30 <tcp_accept_null+0x38>)
 800eb14:	4807      	ldr	r0, [pc, #28]	; (800eb34 <tcp_accept_null+0x3c>)
 800eb16:	f00a ff4d 	bl	80199b4 <iprintf>

  tcp_abort(pcb);
 800eb1a:	68b8      	ldr	r0, [r7, #8]
 800eb1c:	f7ff ff48 	bl	800e9b0 <tcp_abort>

  return ERR_ABRT;
 800eb20:	f06f 030c 	mvn.w	r3, #12
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3710      	adds	r7, #16
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	0801b7d8 	.word	0x0801b7d8
 800eb30:	0801b9ac 	.word	0x0801b9ac
 800eb34:	0801b81c 	.word	0x0801b81c

0800eb38 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	2200      	movs	r2, #0
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 f806 	bl	800eb5c <tcp_listen_with_backlog_and_err>
 800eb50:	4603      	mov	r3, r0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b088      	sub	sp, #32
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	460b      	mov	r3, r1
 800eb66:	607a      	str	r2, [r7, #4]
 800eb68:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d109      	bne.n	800eb88 <tcp_listen_with_backlog_and_err+0x2c>
 800eb74:	4b47      	ldr	r3, [pc, #284]	; (800ec94 <tcp_listen_with_backlog_and_err+0x138>)
 800eb76:	f240 3259 	movw	r2, #857	; 0x359
 800eb7a:	4947      	ldr	r1, [pc, #284]	; (800ec98 <tcp_listen_with_backlog_and_err+0x13c>)
 800eb7c:	4847      	ldr	r0, [pc, #284]	; (800ec9c <tcp_listen_with_backlog_and_err+0x140>)
 800eb7e:	f00a ff19 	bl	80199b4 <iprintf>
 800eb82:	23f0      	movs	r3, #240	; 0xf0
 800eb84:	76fb      	strb	r3, [r7, #27]
 800eb86:	e079      	b.n	800ec7c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	7d1b      	ldrb	r3, [r3, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d009      	beq.n	800eba4 <tcp_listen_with_backlog_and_err+0x48>
 800eb90:	4b40      	ldr	r3, [pc, #256]	; (800ec94 <tcp_listen_with_backlog_and_err+0x138>)
 800eb92:	f240 325a 	movw	r2, #858	; 0x35a
 800eb96:	4942      	ldr	r1, [pc, #264]	; (800eca0 <tcp_listen_with_backlog_and_err+0x144>)
 800eb98:	4840      	ldr	r0, [pc, #256]	; (800ec9c <tcp_listen_with_backlog_and_err+0x140>)
 800eb9a:	f00a ff0b 	bl	80199b4 <iprintf>
 800eb9e:	23f1      	movs	r3, #241	; 0xf1
 800eba0:	76fb      	strb	r3, [r7, #27]
 800eba2:	e06b      	b.n	800ec7c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	7d1b      	ldrb	r3, [r3, #20]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d104      	bne.n	800ebb6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800ebb0:	23f7      	movs	r3, #247	; 0xf7
 800ebb2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebb4:	e062      	b.n	800ec7c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ebb6:	2002      	movs	r0, #2
 800ebb8:	f7fe fa30 	bl	800d01c <memp_malloc>
 800ebbc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d102      	bne.n	800ebca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800ebc4:	23ff      	movs	r3, #255	; 0xff
 800ebc6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800ebc8:	e058      	b.n	800ec7c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	691a      	ldr	r2, [r3, #16]
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	8ada      	ldrh	r2, [r3, #22]
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	7d5a      	ldrb	r2, [r3, #21]
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	7a5a      	ldrb	r2, [r3, #9]
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	7ada      	ldrb	r2, [r3, #11]
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	7a9a      	ldrb	r2, [r3, #10]
 800ec02:	69fb      	ldr	r3, [r7, #28]
 800ec04:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	8adb      	ldrh	r3, [r3, #22]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d021      	beq.n	800ec5a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec16:	4b23      	ldr	r3, [pc, #140]	; (800eca4 <tcp_listen_with_backlog_and_err+0x148>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d105      	bne.n	800ec2c <tcp_listen_with_backlog_and_err+0xd0>
 800ec20:	4b20      	ldr	r3, [pc, #128]	; (800eca4 <tcp_listen_with_backlog_and_err+0x148>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	68db      	ldr	r3, [r3, #12]
 800ec26:	4a1f      	ldr	r2, [pc, #124]	; (800eca4 <tcp_listen_with_backlog_and_err+0x148>)
 800ec28:	6013      	str	r3, [r2, #0]
 800ec2a:	e013      	b.n	800ec54 <tcp_listen_with_backlog_and_err+0xf8>
 800ec2c:	4b1d      	ldr	r3, [pc, #116]	; (800eca4 <tcp_listen_with_backlog_and_err+0x148>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	617b      	str	r3, [r7, #20]
 800ec32:	e00c      	b.n	800ec4e <tcp_listen_with_backlog_and_err+0xf2>
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d104      	bne.n	800ec48 <tcp_listen_with_backlog_and_err+0xec>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	60da      	str	r2, [r3, #12]
 800ec46:	e005      	b.n	800ec54 <tcp_listen_with_backlog_and_err+0xf8>
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	617b      	str	r3, [r7, #20]
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d1ef      	bne.n	800ec34 <tcp_listen_with_backlog_and_err+0xd8>
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2200      	movs	r2, #0
 800ec58:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ec5a:	68f8      	ldr	r0, [r7, #12]
 800ec5c:	f7ff fbc0 	bl	800e3e0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ec60:	69fb      	ldr	r3, [r7, #28]
 800ec62:	4a11      	ldr	r2, [pc, #68]	; (800eca8 <tcp_listen_with_backlog_and_err+0x14c>)
 800ec64:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ec66:	4b11      	ldr	r3, [pc, #68]	; (800ecac <tcp_listen_with_backlog_and_err+0x150>)
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	60da      	str	r2, [r3, #12]
 800ec6e:	4a0f      	ldr	r2, [pc, #60]	; (800ecac <tcp_listen_with_backlog_and_err+0x150>)
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	6013      	str	r3, [r2, #0]
 800ec74:	f005 fbfc 	bl	8014470 <tcp_timer_needed>
  res = ERR_OK;
 800ec78:	2300      	movs	r3, #0
 800ec7a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d002      	beq.n	800ec88 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	7efa      	ldrb	r2, [r7, #27]
 800ec86:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ec88:	69fb      	ldr	r3, [r7, #28]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3720      	adds	r7, #32
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	0801b7d8 	.word	0x0801b7d8
 800ec98:	0801b9cc 	.word	0x0801b9cc
 800ec9c:	0801b81c 	.word	0x0801b81c
 800eca0:	0801b9fc 	.word	0x0801b9fc
 800eca4:	2000cf20 	.word	0x2000cf20
 800eca8:	0800eaf9 	.word	0x0800eaf9
 800ecac:	2000cf24 	.word	0x2000cf24

0800ecb0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <tcp_update_rcv_ann_wnd+0x1c>
 800ecbe:	4b25      	ldr	r3, [pc, #148]	; (800ed54 <tcp_update_rcv_ann_wnd+0xa4>)
 800ecc0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ecc4:	4924      	ldr	r1, [pc, #144]	; (800ed58 <tcp_update_rcv_ann_wnd+0xa8>)
 800ecc6:	4825      	ldr	r0, [pc, #148]	; (800ed5c <tcp_update_rcv_ann_wnd+0xac>)
 800ecc8:	f00a fe74 	bl	80199b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ecd4:	4413      	add	r3, r2
 800ecd6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ece0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ece4:	bf28      	it	cs
 800ece6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ecea:	b292      	uxth	r2, r2
 800ecec:	4413      	add	r3, r2
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	db08      	blt.n	800ed08 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed02:	68fa      	ldr	r2, [r7, #12]
 800ed04:	1ad3      	subs	r3, r2, r3
 800ed06:	e020      	b.n	800ed4a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	dd03      	ble.n	800ed1e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed1c:	e014      	b.n	800ed48 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed30:	d306      	bcc.n	800ed40 <tcp_update_rcv_ann_wnd+0x90>
 800ed32:	4b08      	ldr	r3, [pc, #32]	; (800ed54 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed34:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed38:	4909      	ldr	r1, [pc, #36]	; (800ed60 <tcp_update_rcv_ann_wnd+0xb0>)
 800ed3a:	4808      	ldr	r0, [pc, #32]	; (800ed5c <tcp_update_rcv_ann_wnd+0xac>)
 800ed3c:	f00a fe3a 	bl	80199b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed48:	2300      	movs	r3, #0
  }
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	0801b7d8 	.word	0x0801b7d8
 800ed58:	0801ba34 	.word	0x0801ba34
 800ed5c:	0801b81c 	.word	0x0801b81c
 800ed60:	0801ba58 	.word	0x0801ba58

0800ed64 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d107      	bne.n	800ed86 <tcp_recved+0x22>
 800ed76:	4b1f      	ldr	r3, [pc, #124]	; (800edf4 <tcp_recved+0x90>)
 800ed78:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed7c:	491e      	ldr	r1, [pc, #120]	; (800edf8 <tcp_recved+0x94>)
 800ed7e:	481f      	ldr	r0, [pc, #124]	; (800edfc <tcp_recved+0x98>)
 800ed80:	f00a fe18 	bl	80199b4 <iprintf>
 800ed84:	e032      	b.n	800edec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	7d1b      	ldrb	r3, [r3, #20]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d106      	bne.n	800ed9c <tcp_recved+0x38>
 800ed8e:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <tcp_recved+0x90>)
 800ed90:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ed94:	491a      	ldr	r1, [pc, #104]	; (800ee00 <tcp_recved+0x9c>)
 800ed96:	4819      	ldr	r0, [pc, #100]	; (800edfc <tcp_recved+0x98>)
 800ed98:	f00a fe0c 	bl	80199b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eda0:	887b      	ldrh	r3, [r7, #2]
 800eda2:	4413      	add	r3, r2
 800eda4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800eda6:	89fb      	ldrh	r3, [r7, #14]
 800eda8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edac:	d804      	bhi.n	800edb8 <tcp_recved+0x54>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edb2:	89fa      	ldrh	r2, [r7, #14]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d204      	bcs.n	800edc2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800edbe:	851a      	strh	r2, [r3, #40]	; 0x28
 800edc0:	e002      	b.n	800edc8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	89fa      	ldrh	r2, [r7, #14]
 800edc6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff ff71 	bl	800ecb0 <tcp_update_rcv_ann_wnd>
 800edce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800edd6:	d309      	bcc.n	800edec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	8b5b      	ldrh	r3, [r3, #26]
 800eddc:	f043 0302 	orr.w	r3, r3, #2
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f004 fbcc 	bl	8013584 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800edec:	3710      	adds	r7, #16
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}
 800edf2:	bf00      	nop
 800edf4:	0801b7d8 	.word	0x0801b7d8
 800edf8:	0801ba74 	.word	0x0801ba74
 800edfc:	0801b81c 	.word	0x0801b81c
 800ee00:	0801ba8c 	.word	0x0801ba8c

0800ee04 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800ee0e:	4b1e      	ldr	r3, [pc, #120]	; (800ee88 <tcp_new_port+0x84>)
 800ee10:	881b      	ldrh	r3, [r3, #0]
 800ee12:	3301      	adds	r3, #1
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	4b1c      	ldr	r3, [pc, #112]	; (800ee88 <tcp_new_port+0x84>)
 800ee18:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ee1a:	4b1b      	ldr	r3, [pc, #108]	; (800ee88 <tcp_new_port+0x84>)
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d103      	bne.n	800ee2e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ee26:	4b18      	ldr	r3, [pc, #96]	; (800ee88 <tcp_new_port+0x84>)
 800ee28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ee2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee2e:	2300      	movs	r3, #0
 800ee30:	71fb      	strb	r3, [r7, #7]
 800ee32:	e01e      	b.n	800ee72 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee34:	79fb      	ldrb	r3, [r7, #7]
 800ee36:	4a15      	ldr	r2, [pc, #84]	; (800ee8c <tcp_new_port+0x88>)
 800ee38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	603b      	str	r3, [r7, #0]
 800ee40:	e011      	b.n	800ee66 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	8ada      	ldrh	r2, [r3, #22]
 800ee46:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <tcp_new_port+0x84>)
 800ee48:	881b      	ldrh	r3, [r3, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d108      	bne.n	800ee60 <tcp_new_port+0x5c>
        n++;
 800ee4e:	88bb      	ldrh	r3, [r7, #4]
 800ee50:	3301      	adds	r3, #1
 800ee52:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ee54:	88bb      	ldrh	r3, [r7, #4]
 800ee56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee5a:	d3d8      	bcc.n	800ee0e <tcp_new_port+0xa>
          return 0;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	e00d      	b.n	800ee7c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	603b      	str	r3, [r7, #0]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1ea      	bne.n	800ee42 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	71fb      	strb	r3, [r7, #7]
 800ee72:	79fb      	ldrb	r3, [r7, #7]
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	d9dd      	bls.n	800ee34 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ee78:	4b03      	ldr	r3, [pc, #12]	; (800ee88 <tcp_new_port+0x84>)
 800ee7a:	881b      	ldrh	r3, [r3, #0]
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr
 800ee88:	20000030 	.word	0x20000030
 800ee8c:	0801fee0 	.word	0x0801fee0

0800ee90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee90:	b5b0      	push	{r4, r5, r7, lr}
 800ee92:	b090      	sub	sp, #64	; 0x40
 800ee94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee96:	2300      	movs	r3, #0
 800ee98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee9c:	4b94      	ldr	r3, [pc, #592]	; (800f0f0 <tcp_slowtmr+0x260>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3301      	adds	r3, #1
 800eea2:	4a93      	ldr	r2, [pc, #588]	; (800f0f0 <tcp_slowtmr+0x260>)
 800eea4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eea6:	4b93      	ldr	r3, [pc, #588]	; (800f0f4 <tcp_slowtmr+0x264>)
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	b2da      	uxtb	r2, r3
 800eeae:	4b91      	ldr	r3, [pc, #580]	; (800f0f4 <tcp_slowtmr+0x264>)
 800eeb0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eeb6:	4b90      	ldr	r3, [pc, #576]	; (800f0f8 <tcp_slowtmr+0x268>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eebc:	e29d      	b.n	800f3fa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	7d1b      	ldrb	r3, [r3, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d106      	bne.n	800eed4 <tcp_slowtmr+0x44>
 800eec6:	4b8d      	ldr	r3, [pc, #564]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eec8:	f240 42be 	movw	r2, #1214	; 0x4be
 800eecc:	498c      	ldr	r1, [pc, #560]	; (800f100 <tcp_slowtmr+0x270>)
 800eece:	488d      	ldr	r0, [pc, #564]	; (800f104 <tcp_slowtmr+0x274>)
 800eed0:	f00a fd70 	bl	80199b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	7d1b      	ldrb	r3, [r3, #20]
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d106      	bne.n	800eeea <tcp_slowtmr+0x5a>
 800eedc:	4b87      	ldr	r3, [pc, #540]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eede:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eee2:	4989      	ldr	r1, [pc, #548]	; (800f108 <tcp_slowtmr+0x278>)
 800eee4:	4887      	ldr	r0, [pc, #540]	; (800f104 <tcp_slowtmr+0x274>)
 800eee6:	f00a fd65 	bl	80199b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	7d1b      	ldrb	r3, [r3, #20]
 800eeee:	2b0a      	cmp	r3, #10
 800eef0:	d106      	bne.n	800ef00 <tcp_slowtmr+0x70>
 800eef2:	4b82      	ldr	r3, [pc, #520]	; (800f0fc <tcp_slowtmr+0x26c>)
 800eef4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eef8:	4984      	ldr	r1, [pc, #528]	; (800f10c <tcp_slowtmr+0x27c>)
 800eefa:	4882      	ldr	r0, [pc, #520]	; (800f104 <tcp_slowtmr+0x274>)
 800eefc:	f00a fd5a 	bl	80199b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	7f9a      	ldrb	r2, [r3, #30]
 800ef04:	4b7b      	ldr	r3, [pc, #492]	; (800f0f4 <tcp_slowtmr+0x264>)
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d105      	bne.n	800ef18 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ef0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ef16:	e270      	b.n	800f3fa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ef18:	4b76      	ldr	r3, [pc, #472]	; (800f0f4 <tcp_slowtmr+0x264>)
 800ef1a:	781a      	ldrb	r2, [r3, #0]
 800ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ef20:	2300      	movs	r3, #0
 800ef22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2e:	7d1b      	ldrb	r3, [r3, #20]
 800ef30:	2b02      	cmp	r3, #2
 800ef32:	d10a      	bne.n	800ef4a <tcp_slowtmr+0xba>
 800ef34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef3a:	2b05      	cmp	r3, #5
 800ef3c:	d905      	bls.n	800ef4a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ef3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef42:	3301      	adds	r3, #1
 800ef44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef48:	e11e      	b.n	800f188 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef50:	2b0b      	cmp	r3, #11
 800ef52:	d905      	bls.n	800ef60 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef58:	3301      	adds	r3, #1
 800ef5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef5e:	e113      	b.n	800f188 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d075      	beq.n	800f056 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <tcp_slowtmr+0xf0>
 800ef72:	4b62      	ldr	r3, [pc, #392]	; (800f0fc <tcp_slowtmr+0x26c>)
 800ef74:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef78:	4965      	ldr	r1, [pc, #404]	; (800f110 <tcp_slowtmr+0x280>)
 800ef7a:	4862      	ldr	r0, [pc, #392]	; (800f104 <tcp_slowtmr+0x274>)
 800ef7c:	f00a fd1a 	bl	80199b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d106      	bne.n	800ef96 <tcp_slowtmr+0x106>
 800ef88:	4b5c      	ldr	r3, [pc, #368]	; (800f0fc <tcp_slowtmr+0x26c>)
 800ef8a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef8e:	4961      	ldr	r1, [pc, #388]	; (800f114 <tcp_slowtmr+0x284>)
 800ef90:	485c      	ldr	r0, [pc, #368]	; (800f104 <tcp_slowtmr+0x274>)
 800ef92:	f00a fd0f 	bl	80199b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef9c:	2b0b      	cmp	r3, #11
 800ef9e:	d905      	bls.n	800efac <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800efa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa4:	3301      	adds	r3, #1
 800efa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800efaa:	e0ed      	b.n	800f188 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efb2:	3b01      	subs	r3, #1
 800efb4:	4a58      	ldr	r2, [pc, #352]	; (800f118 <tcp_slowtmr+0x288>)
 800efb6:	5cd3      	ldrb	r3, [r2, r3]
 800efb8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efc0:	7c7a      	ldrb	r2, [r7, #17]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d907      	bls.n	800efd6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efcc:	3301      	adds	r3, #1
 800efce:	b2da      	uxtb	r2, r3
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800efdc:	7c7a      	ldrb	r2, [r7, #17]
 800efde:	429a      	cmp	r2, r3
 800efe0:	f200 80d2 	bhi.w	800f188 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800efe4:	2301      	movs	r3, #1
 800efe6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d108      	bne.n	800f004 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eff4:	f005 f96e 	bl	80142d4 <tcp_zero_window_probe>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d014      	beq.n	800f028 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800effe:	2300      	movs	r3, #0
 800f000:	623b      	str	r3, [r7, #32]
 800f002:	e011      	b.n	800f028 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f00a:	4619      	mov	r1, r3
 800f00c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f00e:	f004 f833 	bl	8013078 <tcp_split_unsent_seg>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d107      	bne.n	800f028 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01a:	f004 fab3 	bl	8013584 <tcp_output>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d101      	bne.n	800f028 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f028:	6a3b      	ldr	r3, [r7, #32]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f000 80ac 	beq.w	800f188 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f03e:	2b06      	cmp	r3, #6
 800f040:	f200 80a2 	bhi.w	800f188 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f04a:	3301      	adds	r3, #1
 800f04c:	b2da      	uxtb	r2, r3
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f054:	e098      	b.n	800f188 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	db0f      	blt.n	800f080 <tcp_slowtmr+0x1f0>
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f066:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d008      	beq.n	800f080 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f070:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f074:	b29b      	uxth	r3, r3
 800f076:	3301      	adds	r3, #1
 800f078:	b29b      	uxth	r3, r3
 800f07a:	b21a      	sxth	r2, r3
 800f07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f08c:	429a      	cmp	r2, r3
 800f08e:	db7b      	blt.n	800f188 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f092:	f004 fd6b 	bl	8013b6c <tcp_rexmit_rto_prepare>
 800f096:	4603      	mov	r3, r0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d007      	beq.n	800f0ac <tcp_slowtmr+0x21c>
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d171      	bne.n	800f188 <tcp_slowtmr+0x2f8>
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d06d      	beq.n	800f188 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d03a      	beq.n	800f12a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0ba:	2b0c      	cmp	r3, #12
 800f0bc:	bf28      	it	cs
 800f0be:	230c      	movcs	r3, #12
 800f0c0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0c8:	10db      	asrs	r3, r3, #3
 800f0ca:	b21b      	sxth	r3, r3
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0d4:	4413      	add	r3, r2
 800f0d6:	7efa      	ldrb	r2, [r7, #27]
 800f0d8:	4910      	ldr	r1, [pc, #64]	; (800f11c <tcp_slowtmr+0x28c>)
 800f0da:	5c8a      	ldrb	r2, [r1, r2]
 800f0dc:	4093      	lsls	r3, r2
 800f0de:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	dc1a      	bgt.n	800f120 <tcp_slowtmr+0x290>
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	b21a      	sxth	r2, r3
 800f0ee:	e019      	b.n	800f124 <tcp_slowtmr+0x294>
 800f0f0:	2000cf1c 	.word	0x2000cf1c
 800f0f4:	2000cf32 	.word	0x2000cf32
 800f0f8:	2000cf28 	.word	0x2000cf28
 800f0fc:	0801b7d8 	.word	0x0801b7d8
 800f100:	0801bb1c 	.word	0x0801bb1c
 800f104:	0801b81c 	.word	0x0801b81c
 800f108:	0801bb48 	.word	0x0801bb48
 800f10c:	0801bb74 	.word	0x0801bb74
 800f110:	0801bba4 	.word	0x0801bba4
 800f114:	0801bbd8 	.word	0x0801bbd8
 800f118:	0801fed8 	.word	0x0801fed8
 800f11c:	0801fec8 	.word	0x0801fec8
 800f120:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2200      	movs	r2, #0
 800f12e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f13c:	4293      	cmp	r3, r2
 800f13e:	bf28      	it	cs
 800f140:	4613      	movcs	r3, r2
 800f142:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f144:	8a7b      	ldrh	r3, [r7, #18]
 800f146:	085b      	lsrs	r3, r3, #1
 800f148:	b29a      	uxth	r2, r3
 800f14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15a:	005b      	lsls	r3, r3, #1
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	429a      	cmp	r2, r3
 800f160:	d206      	bcs.n	800f170 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f166:	005b      	lsls	r3, r3, #1
 800f168:	b29a      	uxth	r2, r3
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f182:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f184:	f004 fd62 	bl	8013c4c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	7d1b      	ldrb	r3, [r3, #20]
 800f18c:	2b06      	cmp	r3, #6
 800f18e:	d111      	bne.n	800f1b4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f192:	8b5b      	ldrh	r3, [r3, #26]
 800f194:	f003 0310 	and.w	r3, r3, #16
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d00b      	beq.n	800f1b4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f19c:	4b9c      	ldr	r3, [pc, #624]	; (800f410 <tcp_slowtmr+0x580>)
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b28      	cmp	r3, #40	; 0x28
 800f1a8:	d904      	bls.n	800f1b4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b6:	7a5b      	ldrb	r3, [r3, #9]
 800f1b8:	f003 0308 	and.w	r3, r3, #8
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d04a      	beq.n	800f256 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d003      	beq.n	800f1d0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1cc:	2b07      	cmp	r3, #7
 800f1ce:	d142      	bne.n	800f256 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1d0:	4b8f      	ldr	r3, [pc, #572]	; (800f410 <tcp_slowtmr+0x580>)
 800f1d2:	681a      	ldr	r2, [r3, #0]
 800f1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d6:	6a1b      	ldr	r3, [r3, #32]
 800f1d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1e0:	4b8c      	ldr	r3, [pc, #560]	; (800f414 <tcp_slowtmr+0x584>)
 800f1e2:	440b      	add	r3, r1
 800f1e4:	498c      	ldr	r1, [pc, #560]	; (800f418 <tcp_slowtmr+0x588>)
 800f1e6:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d90a      	bls.n	800f206 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1fe:	3301      	adds	r3, #1
 800f200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f204:	e027      	b.n	800f256 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f206:	4b82      	ldr	r3, [pc, #520]	; (800f410 <tcp_slowtmr+0x580>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f212:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f21c:	4618      	mov	r0, r3
 800f21e:	4b7f      	ldr	r3, [pc, #508]	; (800f41c <tcp_slowtmr+0x58c>)
 800f220:	fb00 f303 	mul.w	r3, r0, r3
 800f224:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f226:	497c      	ldr	r1, [pc, #496]	; (800f418 <tcp_slowtmr+0x588>)
 800f228:	fba1 1303 	umull	r1, r3, r1, r3
 800f22c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f22e:	429a      	cmp	r2, r3
 800f230:	d911      	bls.n	800f256 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f234:	f005 f80e 	bl	8014254 <tcp_keepalive>
 800f238:	4603      	mov	r3, r0
 800f23a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f23e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d011      	beq.n	800f282 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f25e:	4b6c      	ldr	r3, [pc, #432]	; (800f410 <tcp_slowtmr+0x580>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f26e:	4619      	mov	r1, r3
 800f270:	460b      	mov	r3, r1
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	440b      	add	r3, r1
 800f276:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f278:	429a      	cmp	r2, r3
 800f27a:	d302      	bcc.n	800f282 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f27c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f27e:	f000 fec9 	bl	8010014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	7d1b      	ldrb	r3, [r3, #20]
 800f286:	2b03      	cmp	r3, #3
 800f288:	d10b      	bne.n	800f2a2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f28a:	4b61      	ldr	r3, [pc, #388]	; (800f410 <tcp_slowtmr+0x580>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b28      	cmp	r3, #40	; 0x28
 800f296:	d904      	bls.n	800f2a2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f29c:	3301      	adds	r3, #1
 800f29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	d10b      	bne.n	800f2c2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2aa:	4b59      	ldr	r3, [pc, #356]	; (800f410 <tcp_slowtmr+0x580>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	2bf0      	cmp	r3, #240	; 0xf0
 800f2b6:	d904      	bls.n	800f2c2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d060      	beq.n	800f38c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f2d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2d4:	f000 fcea 	bl	800fcac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d010      	beq.n	800f300 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2de:	4b50      	ldr	r3, [pc, #320]	; (800f420 <tcp_slowtmr+0x590>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d106      	bne.n	800f2f6 <tcp_slowtmr+0x466>
 800f2e8:	4b4e      	ldr	r3, [pc, #312]	; (800f424 <tcp_slowtmr+0x594>)
 800f2ea:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2ee:	494e      	ldr	r1, [pc, #312]	; (800f428 <tcp_slowtmr+0x598>)
 800f2f0:	484e      	ldr	r0, [pc, #312]	; (800f42c <tcp_slowtmr+0x59c>)
 800f2f2:	f00a fb5f 	bl	80199b4 <iprintf>
        prev->next = pcb->next;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	68da      	ldr	r2, [r3, #12]
 800f2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fc:	60da      	str	r2, [r3, #12]
 800f2fe:	e00f      	b.n	800f320 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f300:	4b47      	ldr	r3, [pc, #284]	; (800f420 <tcp_slowtmr+0x590>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f306:	429a      	cmp	r2, r3
 800f308:	d006      	beq.n	800f318 <tcp_slowtmr+0x488>
 800f30a:	4b46      	ldr	r3, [pc, #280]	; (800f424 <tcp_slowtmr+0x594>)
 800f30c:	f240 5271 	movw	r2, #1393	; 0x571
 800f310:	4947      	ldr	r1, [pc, #284]	; (800f430 <tcp_slowtmr+0x5a0>)
 800f312:	4846      	ldr	r0, [pc, #280]	; (800f42c <tcp_slowtmr+0x59c>)
 800f314:	f00a fb4e 	bl	80199b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4a40      	ldr	r2, [pc, #256]	; (800f420 <tcp_slowtmr+0x590>)
 800f31e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f324:	2b00      	cmp	r3, #0
 800f326:	d013      	beq.n	800f350 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f330:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f334:	3304      	adds	r3, #4
 800f336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f338:	8ad2      	ldrh	r2, [r2, #22]
 800f33a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f33c:	8b09      	ldrh	r1, [r1, #24]
 800f33e:	9102      	str	r1, [sp, #8]
 800f340:	9201      	str	r2, [sp, #4]
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	462b      	mov	r3, r5
 800f346:	4622      	mov	r2, r4
 800f348:	4601      	mov	r1, r0
 800f34a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f34c:	f004 fece 	bl	80140ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	7d1b      	ldrb	r3, [r3, #20]
 800f35a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f366:	6838      	ldr	r0, [r7, #0]
 800f368:	f7ff f83a 	bl	800e3e0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f36c:	4b31      	ldr	r3, [pc, #196]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <tcp_slowtmr+0x4f2>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f06f 010c 	mvn.w	r1, #12
 800f37e:	68b8      	ldr	r0, [r7, #8]
 800f380:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f382:	4b2c      	ldr	r3, [pc, #176]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d037      	beq.n	800f3fa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f38a:	e592      	b.n	800eeb2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	7f1b      	ldrb	r3, [r3, #28]
 800f39a:	3301      	adds	r3, #1
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	7f1a      	ldrb	r2, [r3, #28]
 800f3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a8:	7f5b      	ldrb	r3, [r3, #29]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d325      	bcc.n	800f3fa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f3b4:	4b1f      	ldr	r3, [pc, #124]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <tcp_slowtmr+0x54c>
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3cc:	6912      	ldr	r2, [r2, #16]
 800f3ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f3da:	e002      	b.n	800f3e2 <tcp_slowtmr+0x552>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3e2:	4b14      	ldr	r3, [pc, #80]	; (800f434 <tcp_slowtmr+0x5a4>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d000      	beq.n	800f3ec <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3ea:	e562      	b.n	800eeb2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3f6:	f004 f8c5 	bl	8013584 <tcp_output>
  while (pcb != NULL) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f ad5e 	bne.w	800eebe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f406:	4b0c      	ldr	r3, [pc, #48]	; (800f438 <tcp_slowtmr+0x5a8>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f40c:	e069      	b.n	800f4e2 <tcp_slowtmr+0x652>
 800f40e:	bf00      	nop
 800f410:	2000cf1c 	.word	0x2000cf1c
 800f414:	000a4cb8 	.word	0x000a4cb8
 800f418:	10624dd3 	.word	0x10624dd3
 800f41c:	000124f8 	.word	0x000124f8
 800f420:	2000cf28 	.word	0x2000cf28
 800f424:	0801b7d8 	.word	0x0801b7d8
 800f428:	0801bc10 	.word	0x0801bc10
 800f42c:	0801b81c 	.word	0x0801b81c
 800f430:	0801bc3c 	.word	0x0801bc3c
 800f434:	2000cf30 	.word	0x2000cf30
 800f438:	2000cf2c 	.word	0x2000cf2c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43e:	7d1b      	ldrb	r3, [r3, #20]
 800f440:	2b0a      	cmp	r3, #10
 800f442:	d006      	beq.n	800f452 <tcp_slowtmr+0x5c2>
 800f444:	4b2b      	ldr	r3, [pc, #172]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f446:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f44a:	492b      	ldr	r1, [pc, #172]	; (800f4f8 <tcp_slowtmr+0x668>)
 800f44c:	482b      	ldr	r0, [pc, #172]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f44e:	f00a fab1 	bl	80199b4 <iprintf>
    pcb_remove = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f458:	4b29      	ldr	r3, [pc, #164]	; (800f500 <tcp_slowtmr+0x670>)
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	6a1b      	ldr	r3, [r3, #32]
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	2bf0      	cmp	r3, #240	; 0xf0
 800f464:	d904      	bls.n	800f470 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f46a:	3301      	adds	r3, #1
 800f46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f474:	2b00      	cmp	r3, #0
 800f476:	d02f      	beq.n	800f4d8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f47a:	f000 fc17 	bl	800fcac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f480:	2b00      	cmp	r3, #0
 800f482:	d010      	beq.n	800f4a6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f484:	4b1f      	ldr	r3, [pc, #124]	; (800f504 <tcp_slowtmr+0x674>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48a:	429a      	cmp	r2, r3
 800f48c:	d106      	bne.n	800f49c <tcp_slowtmr+0x60c>
 800f48e:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f490:	f240 52af 	movw	r2, #1455	; 0x5af
 800f494:	491c      	ldr	r1, [pc, #112]	; (800f508 <tcp_slowtmr+0x678>)
 800f496:	4819      	ldr	r0, [pc, #100]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f498:	f00a fa8c 	bl	80199b4 <iprintf>
        prev->next = pcb->next;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	68da      	ldr	r2, [r3, #12]
 800f4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a2:	60da      	str	r2, [r3, #12]
 800f4a4:	e00f      	b.n	800f4c6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4a6:	4b17      	ldr	r3, [pc, #92]	; (800f504 <tcp_slowtmr+0x674>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d006      	beq.n	800f4be <tcp_slowtmr+0x62e>
 800f4b0:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <tcp_slowtmr+0x664>)
 800f4b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f4b6:	4915      	ldr	r1, [pc, #84]	; (800f50c <tcp_slowtmr+0x67c>)
 800f4b8:	4810      	ldr	r0, [pc, #64]	; (800f4fc <tcp_slowtmr+0x66c>)
 800f4ba:	f00a fa7b 	bl	80199b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c0:	68db      	ldr	r3, [r3, #12]
 800f4c2:	4a10      	ldr	r2, [pc, #64]	; (800f504 <tcp_slowtmr+0x674>)
 800f4c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f4d0:	69f8      	ldr	r0, [r7, #28]
 800f4d2:	f7fe ff85 	bl	800e3e0 <tcp_free>
 800f4d6:	e004      	b.n	800f4e2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d1a9      	bne.n	800f43c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4e8:	bf00      	nop
 800f4ea:	bf00      	nop
 800f4ec:	3730      	adds	r7, #48	; 0x30
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bdb0      	pop	{r4, r5, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	0801b7d8 	.word	0x0801b7d8
 800f4f8:	0801bc68 	.word	0x0801bc68
 800f4fc:	0801b81c 	.word	0x0801b81c
 800f500:	2000cf1c 	.word	0x2000cf1c
 800f504:	2000cf2c 	.word	0x2000cf2c
 800f508:	0801bc98 	.word	0x0801bc98
 800f50c:	0801bcc0 	.word	0x0801bcc0

0800f510 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f516:	4b2d      	ldr	r3, [pc, #180]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	3301      	adds	r3, #1
 800f51c:	b2da      	uxtb	r2, r3
 800f51e:	4b2b      	ldr	r3, [pc, #172]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f520:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f522:	4b2b      	ldr	r3, [pc, #172]	; (800f5d0 <tcp_fasttmr+0xc0>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f528:	e048      	b.n	800f5bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7f9a      	ldrb	r2, [r3, #30]
 800f52e:	4b27      	ldr	r3, [pc, #156]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	429a      	cmp	r2, r3
 800f534:	d03f      	beq.n	800f5b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f536:	4b25      	ldr	r3, [pc, #148]	; (800f5cc <tcp_fasttmr+0xbc>)
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8b5b      	ldrh	r3, [r3, #26]
 800f542:	f003 0301 	and.w	r3, r3, #1
 800f546:	2b00      	cmp	r3, #0
 800f548:	d010      	beq.n	800f56c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8b5b      	ldrh	r3, [r3, #26]
 800f54e:	f043 0302 	orr.w	r3, r3, #2
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f004 f813 	bl	8013584 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	8b5b      	ldrh	r3, [r3, #26]
 800f562:	f023 0303 	bic.w	r3, r3, #3
 800f566:	b29a      	uxth	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	8b5b      	ldrh	r3, [r3, #26]
 800f570:	f003 0308 	and.w	r3, r3, #8
 800f574:	2b00      	cmp	r3, #0
 800f576:	d009      	beq.n	800f58c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	8b5b      	ldrh	r3, [r3, #26]
 800f57c:	f023 0308 	bic.w	r3, r3, #8
 800f580:	b29a      	uxth	r2, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f7ff f8be 	bl	800e708 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	68db      	ldr	r3, [r3, #12]
 800f590:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f59a:	4b0e      	ldr	r3, [pc, #56]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f59c:	2200      	movs	r2, #0
 800f59e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f819 	bl	800f5d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <tcp_fasttmr+0xc4>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d000      	beq.n	800f5b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5ae:	e7b8      	b.n	800f522 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	607b      	str	r3, [r7, #4]
 800f5b4:	e002      	b.n	800f5bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d1b3      	bne.n	800f52a <tcp_fasttmr+0x1a>
    }
  }
}
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	2000cf32 	.word	0x2000cf32
 800f5d0:	2000cf28 	.word	0x2000cf28
 800f5d4:	2000cf30 	.word	0x2000cf30

0800f5d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5d8:	b590      	push	{r4, r7, lr}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d109      	bne.n	800f5fa <tcp_process_refused_data+0x22>
 800f5e6:	4b37      	ldr	r3, [pc, #220]	; (800f6c4 <tcp_process_refused_data+0xec>)
 800f5e8:	f240 6209 	movw	r2, #1545	; 0x609
 800f5ec:	4936      	ldr	r1, [pc, #216]	; (800f6c8 <tcp_process_refused_data+0xf0>)
 800f5ee:	4837      	ldr	r0, [pc, #220]	; (800f6cc <tcp_process_refused_data+0xf4>)
 800f5f0:	f00a f9e0 	bl	80199b4 <iprintf>
 800f5f4:	f06f 030f 	mvn.w	r3, #15
 800f5f8:	e060      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5fe:	7b5b      	ldrb	r3, [r3, #13]
 800f600:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f606:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2200      	movs	r2, #0
 800f60c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <tcp_process_refused_data+0x58>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6918      	ldr	r0, [r3, #16]
 800f622:	2300      	movs	r3, #0
 800f624:	68ba      	ldr	r2, [r7, #8]
 800f626:	6879      	ldr	r1, [r7, #4]
 800f628:	47a0      	blx	r4
 800f62a:	4603      	mov	r3, r0
 800f62c:	73fb      	strb	r3, [r7, #15]
 800f62e:	e007      	b.n	800f640 <tcp_process_refused_data+0x68>
 800f630:	2300      	movs	r3, #0
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	2000      	movs	r0, #0
 800f638:	f000 f8c2 	bl	800f7c0 <tcp_recv_null>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d12a      	bne.n	800f69e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d033      	beq.n	800f6ba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f656:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f65a:	d005      	beq.n	800f668 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f660:	3301      	adds	r3, #1
 800f662:	b29a      	uxth	r2, r3
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <tcp_process_refused_data+0xb2>
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6918      	ldr	r0, [r3, #16]
 800f67c:	2300      	movs	r3, #0
 800f67e:	2200      	movs	r2, #0
 800f680:	6879      	ldr	r1, [r7, #4]
 800f682:	47a0      	blx	r4
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
 800f688:	e001      	b.n	800f68e <tcp_process_refused_data+0xb6>
 800f68a:	2300      	movs	r3, #0
 800f68c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f692:	f113 0f0d 	cmn.w	r3, #13
 800f696:	d110      	bne.n	800f6ba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f698:	f06f 030c 	mvn.w	r3, #12
 800f69c:	e00e      	b.n	800f6bc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a2:	f113 0f0d 	cmn.w	r3, #13
 800f6a6:	d102      	bne.n	800f6ae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6a8:	f06f 030c 	mvn.w	r3, #12
 800f6ac:	e006      	b.n	800f6bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68ba      	ldr	r2, [r7, #8]
 800f6b2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f6b4:	f06f 0304 	mvn.w	r3, #4
 800f6b8:	e000      	b.n	800f6bc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd90      	pop	{r4, r7, pc}
 800f6c4:	0801b7d8 	.word	0x0801b7d8
 800f6c8:	0801bce8 	.word	0x0801bce8
 800f6cc:	0801b81c 	.word	0x0801b81c

0800f6d0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6d8:	e007      	b.n	800f6ea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6e0:	6878      	ldr	r0, [r7, #4]
 800f6e2:	f000 f80a 	bl	800f6fa <tcp_seg_free>
    seg = next;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d1f4      	bne.n	800f6da <tcp_segs_free+0xa>
  }
}
 800f6f0:	bf00      	nop
 800f6f2:	bf00      	nop
 800f6f4:	3710      	adds	r7, #16
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}

0800f6fa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00c      	beq.n	800f722 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	685b      	ldr	r3, [r3, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d004      	beq.n	800f71a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fba7 	bl	800de68 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f71a:	6879      	ldr	r1, [r7, #4]
 800f71c:	2003      	movs	r0, #3
 800f71e:	f7fd fcf3 	bl	800d108 <memp_free>
  }
}
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b082      	sub	sp, #8
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	460b      	mov	r3, r1
 800f736:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d107      	bne.n	800f74e <tcp_setprio+0x22>
 800f73e:	4b07      	ldr	r3, [pc, #28]	; (800f75c <tcp_setprio+0x30>)
 800f740:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f744:	4906      	ldr	r1, [pc, #24]	; (800f760 <tcp_setprio+0x34>)
 800f746:	4807      	ldr	r0, [pc, #28]	; (800f764 <tcp_setprio+0x38>)
 800f748:	f00a f934 	bl	80199b4 <iprintf>
 800f74c:	e002      	b.n	800f754 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	78fa      	ldrb	r2, [r7, #3]
 800f752:	755a      	strb	r2, [r3, #21]
}
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	0801b7d8 	.word	0x0801b7d8
 800f760:	0801bd10 	.word	0x0801bd10
 800f764:	0801b81c 	.word	0x0801b81c

0800f768 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d106      	bne.n	800f784 <tcp_seg_copy+0x1c>
 800f776:	4b0f      	ldr	r3, [pc, #60]	; (800f7b4 <tcp_seg_copy+0x4c>)
 800f778:	f240 6282 	movw	r2, #1666	; 0x682
 800f77c:	490e      	ldr	r1, [pc, #56]	; (800f7b8 <tcp_seg_copy+0x50>)
 800f77e:	480f      	ldr	r0, [pc, #60]	; (800f7bc <tcp_seg_copy+0x54>)
 800f780:	f00a f918 	bl	80199b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f784:	2003      	movs	r0, #3
 800f786:	f7fd fc49 	bl	800d01c <memp_malloc>
 800f78a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <tcp_seg_copy+0x2e>
    return NULL;
 800f792:	2300      	movs	r3, #0
 800f794:	e00a      	b.n	800f7ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f796:	2210      	movs	r2, #16
 800f798:	6879      	ldr	r1, [r7, #4]
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f00a fa10 	bl	8019bc0 <memcpy>
  pbuf_ref(cseg->p);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fc05 	bl	800dfb4 <pbuf_ref>
  return cseg;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}
 800f7b4:	0801b7d8 	.word	0x0801b7d8
 800f7b8:	0801bd2c 	.word	0x0801bd2c
 800f7bc:	0801b81c 	.word	0x0801b81c

0800f7c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d109      	bne.n	800f7e8 <tcp_recv_null+0x28>
 800f7d4:	4b12      	ldr	r3, [pc, #72]	; (800f820 <tcp_recv_null+0x60>)
 800f7d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f7da:	4912      	ldr	r1, [pc, #72]	; (800f824 <tcp_recv_null+0x64>)
 800f7dc:	4812      	ldr	r0, [pc, #72]	; (800f828 <tcp_recv_null+0x68>)
 800f7de:	f00a f8e9 	bl	80199b4 <iprintf>
 800f7e2:	f06f 030f 	mvn.w	r3, #15
 800f7e6:	e016      	b.n	800f816 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d009      	beq.n	800f802 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	891b      	ldrh	r3, [r3, #8]
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	68b8      	ldr	r0, [r7, #8]
 800f7f6:	f7ff fab5 	bl	800ed64 <tcp_recved>
    pbuf_free(p);
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7fe fb34 	bl	800de68 <pbuf_free>
 800f800:	e008      	b.n	800f814 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d104      	bne.n	800f814 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f80a:	68b8      	ldr	r0, [r7, #8]
 800f80c:	f7fe ffe6 	bl	800e7dc <tcp_close>
 800f810:	4603      	mov	r3, r0
 800f812:	e000      	b.n	800f816 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3710      	adds	r7, #16
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	0801b7d8 	.word	0x0801b7d8
 800f824:	0801bd48 	.word	0x0801bd48
 800f828:	0801b81c 	.word	0x0801b81c

0800f82c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	4603      	mov	r3, r0
 800f834:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	db01      	blt.n	800f842 <tcp_kill_prio+0x16>
 800f83e:	79fb      	ldrb	r3, [r7, #7]
 800f840:	e000      	b.n	800f844 <tcp_kill_prio+0x18>
 800f842:	237f      	movs	r3, #127	; 0x7f
 800f844:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f846:	7afb      	ldrb	r3, [r7, #11]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d034      	beq.n	800f8b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f84c:	7afb      	ldrb	r3, [r7, #11]
 800f84e:	3b01      	subs	r3, #1
 800f850:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f852:	2300      	movs	r3, #0
 800f854:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f856:	2300      	movs	r3, #0
 800f858:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f85a:	4b19      	ldr	r3, [pc, #100]	; (800f8c0 <tcp_kill_prio+0x94>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	617b      	str	r3, [r7, #20]
 800f860:	e01f      	b.n	800f8a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	7d5b      	ldrb	r3, [r3, #21]
 800f866:	7afa      	ldrb	r2, [r7, #11]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d80c      	bhi.n	800f886 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f870:	7afa      	ldrb	r2, [r7, #11]
 800f872:	429a      	cmp	r2, r3
 800f874:	d112      	bne.n	800f89c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f876:	4b13      	ldr	r3, [pc, #76]	; (800f8c4 <tcp_kill_prio+0x98>)
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	429a      	cmp	r2, r3
 800f884:	d80a      	bhi.n	800f89c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f886:	4b0f      	ldr	r3, [pc, #60]	; (800f8c4 <tcp_kill_prio+0x98>)
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	7d5b      	ldrb	r3, [r3, #21]
 800f89a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	68db      	ldr	r3, [r3, #12]
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d1dc      	bne.n	800f862 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d004      	beq.n	800f8b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f8ae:	6938      	ldr	r0, [r7, #16]
 800f8b0:	f7ff f87e 	bl	800e9b0 <tcp_abort>
 800f8b4:	e000      	b.n	800f8b8 <tcp_kill_prio+0x8c>
    return;
 800f8b6:	bf00      	nop
  }
}
 800f8b8:	3718      	adds	r7, #24
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	2000cf28 	.word	0x2000cf28
 800f8c4:	2000cf1c 	.word	0x2000cf1c

0800f8c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	2b08      	cmp	r3, #8
 800f8d6:	d009      	beq.n	800f8ec <tcp_kill_state+0x24>
 800f8d8:	79fb      	ldrb	r3, [r7, #7]
 800f8da:	2b09      	cmp	r3, #9
 800f8dc:	d006      	beq.n	800f8ec <tcp_kill_state+0x24>
 800f8de:	4b1a      	ldr	r3, [pc, #104]	; (800f948 <tcp_kill_state+0x80>)
 800f8e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f8e4:	4919      	ldr	r1, [pc, #100]	; (800f94c <tcp_kill_state+0x84>)
 800f8e6:	481a      	ldr	r0, [pc, #104]	; (800f950 <tcp_kill_state+0x88>)
 800f8e8:	f00a f864 	bl	80199b4 <iprintf>

  inactivity = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8f4:	4b17      	ldr	r3, [pc, #92]	; (800f954 <tcp_kill_state+0x8c>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	617b      	str	r3, [r7, #20]
 800f8fa:	e017      	b.n	800f92c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	7d1b      	ldrb	r3, [r3, #20]
 800f900:	79fa      	ldrb	r2, [r7, #7]
 800f902:	429a      	cmp	r2, r3
 800f904:	d10f      	bne.n	800f926 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f906:	4b14      	ldr	r3, [pc, #80]	; (800f958 <tcp_kill_state+0x90>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	1ad3      	subs	r3, r2, r3
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	429a      	cmp	r2, r3
 800f914:	d807      	bhi.n	800f926 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <tcp_kill_state+0x90>)
 800f918:	681a      	ldr	r2, [r3, #0]
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	6a1b      	ldr	r3, [r3, #32]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	617b      	str	r3, [r7, #20]
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1e4      	bne.n	800f8fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d003      	beq.n	800f940 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f938:	2100      	movs	r1, #0
 800f93a:	6938      	ldr	r0, [r7, #16]
 800f93c:	f7fe ff7a 	bl	800e834 <tcp_abandon>
  }
}
 800f940:	bf00      	nop
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	0801b7d8 	.word	0x0801b7d8
 800f94c:	0801bd64 	.word	0x0801bd64
 800f950:	0801b81c 	.word	0x0801b81c
 800f954:	2000cf28 	.word	0x2000cf28
 800f958:	2000cf1c 	.word	0x2000cf1c

0800f95c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f966:	2300      	movs	r3, #0
 800f968:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f96a:	4b12      	ldr	r3, [pc, #72]	; (800f9b4 <tcp_kill_timewait+0x58>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	60fb      	str	r3, [r7, #12]
 800f970:	e012      	b.n	800f998 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f972:	4b11      	ldr	r3, [pc, #68]	; (800f9b8 <tcp_kill_timewait+0x5c>)
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6a1b      	ldr	r3, [r3, #32]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d807      	bhi.n	800f992 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f982:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <tcp_kill_timewait+0x5c>)
 800f984:	681a      	ldr	r2, [r3, #0]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6a1b      	ldr	r3, [r3, #32]
 800f98a:	1ad3      	subs	r3, r2, r3
 800f98c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	68db      	ldr	r3, [r3, #12]
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e9      	bne.n	800f972 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d002      	beq.n	800f9aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f9a4:	68b8      	ldr	r0, [r7, #8]
 800f9a6:	f7ff f803 	bl	800e9b0 <tcp_abort>
  }
}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	2000cf2c 	.word	0x2000cf2c
 800f9b8:	2000cf1c 	.word	0x2000cf1c

0800f9bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f9c2:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <tcp_handle_closepend+0x48>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f9c8:	e014      	b.n	800f9f4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	8b5b      	ldrh	r3, [r3, #26]
 800f9d4:	f003 0308 	and.w	r3, r3, #8
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d009      	beq.n	800f9f0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8b5b      	ldrh	r3, [r3, #26]
 800f9e0:	f023 0308 	bic.w	r3, r3, #8
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f7fe fe8c 	bl	800e708 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1e7      	bne.n	800f9ca <tcp_handle_closepend+0xe>
  }
}
 800f9fa:	bf00      	nop
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	2000cf28 	.word	0x2000cf28

0800fa08 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	4603      	mov	r3, r0
 800fa10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa12:	2001      	movs	r0, #1
 800fa14:	f7fd fb02 	bl	800d01c <memp_malloc>
 800fa18:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d126      	bne.n	800fa6e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800fa20:	f7ff ffcc 	bl	800f9bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800fa24:	f7ff ff9a 	bl	800f95c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa28:	2001      	movs	r0, #1
 800fa2a:	f7fd faf7 	bl	800d01c <memp_malloc>
 800fa2e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d11b      	bne.n	800fa6e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800fa36:	2009      	movs	r0, #9
 800fa38:	f7ff ff46 	bl	800f8c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa3c:	2001      	movs	r0, #1
 800fa3e:	f7fd faed 	bl	800d01c <memp_malloc>
 800fa42:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d111      	bne.n	800fa6e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa4a:	2008      	movs	r0, #8
 800fa4c:	f7ff ff3c 	bl	800f8c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa50:	2001      	movs	r0, #1
 800fa52:	f7fd fae3 	bl	800d01c <memp_malloc>
 800fa56:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d107      	bne.n	800fa6e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff fee3 	bl	800f82c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa66:	2001      	movs	r0, #1
 800fa68:	f7fd fad8 	bl	800d01c <memp_malloc>
 800fa6c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d03f      	beq.n	800faf4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa74:	229c      	movs	r2, #156	; 0x9c
 800fa76:	2100      	movs	r1, #0
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f00a f800 	bl	8019a7e <memset>
    pcb->prio = prio;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	79fa      	ldrb	r2, [r7, #7]
 800fa82:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa94:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	22ff      	movs	r2, #255	; 0xff
 800faa2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800faaa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2206      	movs	r2, #6
 800fab0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2206      	movs	r2, #6
 800fab8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fac0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800faca:	4b0d      	ldr	r3, [pc, #52]	; (800fb00 <tcp_alloc+0xf8>)
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fad2:	4b0c      	ldr	r3, [pc, #48]	; (800fb04 <tcp_alloc+0xfc>)
 800fad4:	781a      	ldrb	r2, [r3, #0]
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	4a08      	ldr	r2, [pc, #32]	; (800fb08 <tcp_alloc+0x100>)
 800fae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4a07      	ldr	r2, [pc, #28]	; (800fb0c <tcp_alloc+0x104>)
 800faf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800faf4:	68fb      	ldr	r3, [r7, #12]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3710      	adds	r7, #16
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	2000cf1c 	.word	0x2000cf1c
 800fb04:	2000cf32 	.word	0x2000cf32
 800fb08:	0800f7c1 	.word	0x0800f7c1
 800fb0c:	006ddd00 	.word	0x006ddd00

0800fb10 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b084      	sub	sp, #16
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	4603      	mov	r3, r0
 800fb18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fb1a:	2040      	movs	r0, #64	; 0x40
 800fb1c:	f7ff ff74 	bl	800fa08 <tcp_alloc>
 800fb20:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fb22:	68fb      	ldr	r3, [r7, #12]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	683a      	ldr	r2, [r7, #0]
 800fb40:	611a      	str	r2, [r3, #16]
  }
}
 800fb42:	bf00      	nop
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
	...

0800fb50 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00e      	beq.n	800fb7e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	7d1b      	ldrb	r3, [r3, #20]
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d106      	bne.n	800fb76 <tcp_recv+0x26>
 800fb68:	4b07      	ldr	r3, [pc, #28]	; (800fb88 <tcp_recv+0x38>)
 800fb6a:	f240 72df 	movw	r2, #2015	; 0x7df
 800fb6e:	4907      	ldr	r1, [pc, #28]	; (800fb8c <tcp_recv+0x3c>)
 800fb70:	4807      	ldr	r0, [pc, #28]	; (800fb90 <tcp_recv+0x40>)
 800fb72:	f009 ff1f 	bl	80199b4 <iprintf>
    pcb->recv = recv;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	683a      	ldr	r2, [r7, #0]
 800fb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fb7e:	bf00      	nop
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	0801b7d8 	.word	0x0801b7d8
 800fb8c:	0801bd74 	.word	0x0801bd74
 800fb90:	0801b81c 	.word	0x0801b81c

0800fb94 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00e      	beq.n	800fbc2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	7d1b      	ldrb	r3, [r3, #20]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d106      	bne.n	800fbba <tcp_sent+0x26>
 800fbac:	4b07      	ldr	r3, [pc, #28]	; (800fbcc <tcp_sent+0x38>)
 800fbae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fbb2:	4907      	ldr	r1, [pc, #28]	; (800fbd0 <tcp_sent+0x3c>)
 800fbb4:	4807      	ldr	r0, [pc, #28]	; (800fbd4 <tcp_sent+0x40>)
 800fbb6:	f009 fefd 	bl	80199b4 <iprintf>
    pcb->sent = sent;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fbc2:	bf00      	nop
 800fbc4:	3708      	adds	r7, #8
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	0801b7d8 	.word	0x0801b7d8
 800fbd0:	0801bd9c 	.word	0x0801bd9c
 800fbd4:	0801b81c 	.word	0x0801b81c

0800fbd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
 800fbe0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d00e      	beq.n	800fc06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	7d1b      	ldrb	r3, [r3, #20]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d106      	bne.n	800fbfe <tcp_err+0x26>
 800fbf0:	4b07      	ldr	r3, [pc, #28]	; (800fc10 <tcp_err+0x38>)
 800fbf2:	f640 020d 	movw	r2, #2061	; 0x80d
 800fbf6:	4907      	ldr	r1, [pc, #28]	; (800fc14 <tcp_err+0x3c>)
 800fbf8:	4807      	ldr	r0, [pc, #28]	; (800fc18 <tcp_err+0x40>)
 800fbfa:	f009 fedb 	bl	80199b4 <iprintf>
    pcb->errf = err;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fc06:	bf00      	nop
 800fc08:	3708      	adds	r7, #8
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	0801b7d8 	.word	0x0801b7d8
 800fc14:	0801bdc4 	.word	0x0801bdc4
 800fc18:	0801b81c 	.word	0x0801b81c

0800fc1c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b085      	sub	sp, #20
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d008      	beq.n	800fc3e <tcp_accept+0x22>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d104      	bne.n	800fc3e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	683a      	ldr	r2, [r7, #0]
 800fc3c:	619a      	str	r2, [r3, #24]
  }
}
 800fc3e:	bf00      	nop
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
	...

0800fc4c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	4613      	mov	r3, r2
 800fc58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d107      	bne.n	800fc70 <tcp_poll+0x24>
 800fc60:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <tcp_poll+0x50>)
 800fc62:	f640 023d 	movw	r2, #2109	; 0x83d
 800fc66:	490e      	ldr	r1, [pc, #56]	; (800fca0 <tcp_poll+0x54>)
 800fc68:	480e      	ldr	r0, [pc, #56]	; (800fca4 <tcp_poll+0x58>)
 800fc6a:	f009 fea3 	bl	80199b4 <iprintf>
 800fc6e:	e011      	b.n	800fc94 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	7d1b      	ldrb	r3, [r3, #20]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d106      	bne.n	800fc86 <tcp_poll+0x3a>
 800fc78:	4b08      	ldr	r3, [pc, #32]	; (800fc9c <tcp_poll+0x50>)
 800fc7a:	f640 023e 	movw	r2, #2110	; 0x83e
 800fc7e:	490a      	ldr	r1, [pc, #40]	; (800fca8 <tcp_poll+0x5c>)
 800fc80:	4808      	ldr	r0, [pc, #32]	; (800fca4 <tcp_poll+0x58>)
 800fc82:	f009 fe97 	bl	80199b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	79fa      	ldrb	r2, [r7, #7]
 800fc92:	775a      	strb	r2, [r3, #29]
}
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	0801b7d8 	.word	0x0801b7d8
 800fca0:	0801bdec 	.word	0x0801bdec
 800fca4:	0801b81c 	.word	0x0801b81c
 800fca8:	0801be04 	.word	0x0801be04

0800fcac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d107      	bne.n	800fcca <tcp_pcb_purge+0x1e>
 800fcba:	4b21      	ldr	r3, [pc, #132]	; (800fd40 <tcp_pcb_purge+0x94>)
 800fcbc:	f640 0251 	movw	r2, #2129	; 0x851
 800fcc0:	4920      	ldr	r1, [pc, #128]	; (800fd44 <tcp_pcb_purge+0x98>)
 800fcc2:	4821      	ldr	r0, [pc, #132]	; (800fd48 <tcp_pcb_purge+0x9c>)
 800fcc4:	f009 fe76 	bl	80199b4 <iprintf>
 800fcc8:	e037      	b.n	800fd3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	7d1b      	ldrb	r3, [r3, #20]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d033      	beq.n	800fd3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fcd6:	2b0a      	cmp	r3, #10
 800fcd8:	d02f      	beq.n	800fd3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d02b      	beq.n	800fd3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7fe f8ba 	bl	800de68 <pbuf_free>
      pcb->refused_data = NULL;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d002      	beq.n	800fd08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f986 	bl	8010014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fcdb 	bl	800f6d0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff fcd6 	bl	800f6d0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fd3a:	3708      	adds	r7, #8
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	0801b7d8 	.word	0x0801b7d8
 800fd44:	0801be24 	.word	0x0801be24
 800fd48:	0801b81c 	.word	0x0801b81c

0800fd4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b084      	sub	sp, #16
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
 800fd54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d106      	bne.n	800fd6a <tcp_pcb_remove+0x1e>
 800fd5c:	4b3e      	ldr	r3, [pc, #248]	; (800fe58 <tcp_pcb_remove+0x10c>)
 800fd5e:	f640 0283 	movw	r2, #2179	; 0x883
 800fd62:	493e      	ldr	r1, [pc, #248]	; (800fe5c <tcp_pcb_remove+0x110>)
 800fd64:	483e      	ldr	r0, [pc, #248]	; (800fe60 <tcp_pcb_remove+0x114>)
 800fd66:	f009 fe25 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d106      	bne.n	800fd7e <tcp_pcb_remove+0x32>
 800fd70:	4b39      	ldr	r3, [pc, #228]	; (800fe58 <tcp_pcb_remove+0x10c>)
 800fd72:	f640 0284 	movw	r2, #2180	; 0x884
 800fd76:	493b      	ldr	r1, [pc, #236]	; (800fe64 <tcp_pcb_remove+0x118>)
 800fd78:	4839      	ldr	r0, [pc, #228]	; (800fe60 <tcp_pcb_remove+0x114>)
 800fd7a:	f009 fe1b 	bl	80199b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	683a      	ldr	r2, [r7, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d105      	bne.n	800fd94 <tcp_pcb_remove+0x48>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	68da      	ldr	r2, [r3, #12]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	e013      	b.n	800fdbc <tcp_pcb_remove+0x70>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	60fb      	str	r3, [r7, #12]
 800fd9a:	e00c      	b.n	800fdb6 <tcp_pcb_remove+0x6a>
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d104      	bne.n	800fdb0 <tcp_pcb_remove+0x64>
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	68da      	ldr	r2, [r3, #12]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	60da      	str	r2, [r3, #12]
 800fdae:	e005      	b.n	800fdbc <tcp_pcb_remove+0x70>
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	68db      	ldr	r3, [r3, #12]
 800fdb4:	60fb      	str	r3, [r7, #12]
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1ef      	bne.n	800fd9c <tcp_pcb_remove+0x50>
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fdc2:	6838      	ldr	r0, [r7, #0]
 800fdc4:	f7ff ff72 	bl	800fcac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	7d1b      	ldrb	r3, [r3, #20]
 800fdcc:	2b0a      	cmp	r3, #10
 800fdce:	d013      	beq.n	800fdf8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fdd4:	2b01      	cmp	r3, #1
 800fdd6:	d00f      	beq.n	800fdf8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	8b5b      	ldrh	r3, [r3, #26]
 800fddc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d009      	beq.n	800fdf8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fde4:	683b      	ldr	r3, [r7, #0]
 800fde6:	8b5b      	ldrh	r3, [r3, #26]
 800fde8:	f043 0302 	orr.w	r3, r3, #2
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fdf2:	6838      	ldr	r0, [r7, #0]
 800fdf4:	f003 fbc6 	bl	8013584 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d020      	beq.n	800fe42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d006      	beq.n	800fe16 <tcp_pcb_remove+0xca>
 800fe08:	4b13      	ldr	r3, [pc, #76]	; (800fe58 <tcp_pcb_remove+0x10c>)
 800fe0a:	f640 0293 	movw	r2, #2195	; 0x893
 800fe0e:	4916      	ldr	r1, [pc, #88]	; (800fe68 <tcp_pcb_remove+0x11c>)
 800fe10:	4813      	ldr	r0, [pc, #76]	; (800fe60 <tcp_pcb_remove+0x114>)
 800fe12:	f009 fdcf 	bl	80199b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d006      	beq.n	800fe2c <tcp_pcb_remove+0xe0>
 800fe1e:	4b0e      	ldr	r3, [pc, #56]	; (800fe58 <tcp_pcb_remove+0x10c>)
 800fe20:	f640 0294 	movw	r2, #2196	; 0x894
 800fe24:	4911      	ldr	r1, [pc, #68]	; (800fe6c <tcp_pcb_remove+0x120>)
 800fe26:	480e      	ldr	r0, [pc, #56]	; (800fe60 <tcp_pcb_remove+0x114>)
 800fe28:	f009 fdc4 	bl	80199b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d006      	beq.n	800fe42 <tcp_pcb_remove+0xf6>
 800fe34:	4b08      	ldr	r3, [pc, #32]	; (800fe58 <tcp_pcb_remove+0x10c>)
 800fe36:	f640 0296 	movw	r2, #2198	; 0x896
 800fe3a:	490d      	ldr	r1, [pc, #52]	; (800fe70 <tcp_pcb_remove+0x124>)
 800fe3c:	4808      	ldr	r0, [pc, #32]	; (800fe60 <tcp_pcb_remove+0x114>)
 800fe3e:	f009 fdb9 	bl	80199b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	2200      	movs	r2, #0
 800fe46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fe4e:	bf00      	nop
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	0801b7d8 	.word	0x0801b7d8
 800fe5c:	0801be40 	.word	0x0801be40
 800fe60:	0801b81c 	.word	0x0801b81c
 800fe64:	0801be5c 	.word	0x0801be5c
 800fe68:	0801be7c 	.word	0x0801be7c
 800fe6c:	0801be94 	.word	0x0801be94
 800fe70:	0801beb0 	.word	0x0801beb0

0800fe74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d106      	bne.n	800fe90 <tcp_next_iss+0x1c>
 800fe82:	4b0a      	ldr	r3, [pc, #40]	; (800feac <tcp_next_iss+0x38>)
 800fe84:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe88:	4909      	ldr	r1, [pc, #36]	; (800feb0 <tcp_next_iss+0x3c>)
 800fe8a:	480a      	ldr	r0, [pc, #40]	; (800feb4 <tcp_next_iss+0x40>)
 800fe8c:	f009 fd92 	bl	80199b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe90:	4b09      	ldr	r3, [pc, #36]	; (800feb8 <tcp_next_iss+0x44>)
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	4b09      	ldr	r3, [pc, #36]	; (800febc <tcp_next_iss+0x48>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	4413      	add	r3, r2
 800fe9a:	4a07      	ldr	r2, [pc, #28]	; (800feb8 <tcp_next_iss+0x44>)
 800fe9c:	6013      	str	r3, [r2, #0]
  return iss;
 800fe9e:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <tcp_next_iss+0x44>)
 800fea0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3708      	adds	r7, #8
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	0801b7d8 	.word	0x0801b7d8
 800feb0:	0801bec8 	.word	0x0801bec8
 800feb4:	0801b81c 	.word	0x0801b81c
 800feb8:	20000034 	.word	0x20000034
 800febc:	2000cf1c 	.word	0x2000cf1c

0800fec0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	4603      	mov	r3, r0
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d106      	bne.n	800fee2 <tcp_eff_send_mss_netif+0x22>
 800fed4:	4b14      	ldr	r3, [pc, #80]	; (800ff28 <tcp_eff_send_mss_netif+0x68>)
 800fed6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800feda:	4914      	ldr	r1, [pc, #80]	; (800ff2c <tcp_eff_send_mss_netif+0x6c>)
 800fedc:	4814      	ldr	r0, [pc, #80]	; (800ff30 <tcp_eff_send_mss_netif+0x70>)
 800fede:	f009 fd69 	bl	80199b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fee8:	89fb      	ldrh	r3, [r7, #14]
 800feea:	e019      	b.n	800ff20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fef0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fef2:	8afb      	ldrh	r3, [r7, #22]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d012      	beq.n	800ff1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fef8:	2328      	movs	r3, #40	; 0x28
 800fefa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fefc:	8afa      	ldrh	r2, [r7, #22]
 800fefe:	8abb      	ldrh	r3, [r7, #20]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d904      	bls.n	800ff0e <tcp_eff_send_mss_netif+0x4e>
 800ff04:	8afa      	ldrh	r2, [r7, #22]
 800ff06:	8abb      	ldrh	r3, [r7, #20]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	e000      	b.n	800ff10 <tcp_eff_send_mss_netif+0x50>
 800ff0e:	2300      	movs	r3, #0
 800ff10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ff12:	8a7a      	ldrh	r2, [r7, #18]
 800ff14:	89fb      	ldrh	r3, [r7, #14]
 800ff16:	4293      	cmp	r3, r2
 800ff18:	bf28      	it	cs
 800ff1a:	4613      	movcs	r3, r2
 800ff1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ff1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3718      	adds	r7, #24
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	0801b7d8 	.word	0x0801b7d8
 800ff2c:	0801bee4 	.word	0x0801bee4
 800ff30:	0801b81c 	.word	0x0801b81c

0800ff34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d119      	bne.n	800ff7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ff48:	4b10      	ldr	r3, [pc, #64]	; (800ff8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ff4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ff4e:	4910      	ldr	r1, [pc, #64]	; (800ff90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ff50:	4810      	ldr	r0, [pc, #64]	; (800ff94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ff52:	f009 fd2f 	bl	80199b4 <iprintf>

  while (pcb != NULL) {
 800ff56:	e011      	b.n	800ff7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681a      	ldr	r2, [r3, #0]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d108      	bne.n	800ff76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f7fe fd20 	bl	800e9b0 <tcp_abort>
      pcb = next;
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	60fb      	str	r3, [r7, #12]
 800ff74:	e002      	b.n	800ff7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d1ea      	bne.n	800ff58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ff82:	bf00      	nop
 800ff84:	bf00      	nop
 800ff86:	3710      	adds	r7, #16
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	0801b7d8 	.word	0x0801b7d8
 800ff90:	0801bf0c 	.word	0x0801bf0c
 800ff94:	0801b81c 	.word	0x0801b81c

0800ff98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d02a      	beq.n	800fffe <tcp_netif_ip_addr_changed+0x66>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d026      	beq.n	800fffe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ffb0:	4b15      	ldr	r3, [pc, #84]	; (8010008 <tcp_netif_ip_addr_changed+0x70>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff ffbc 	bl	800ff34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ffbc:	4b13      	ldr	r3, [pc, #76]	; (801000c <tcp_netif_ip_addr_changed+0x74>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f7ff ffb6 	bl	800ff34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d017      	beq.n	800fffe <tcp_netif_ip_addr_changed+0x66>
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d013      	beq.n	800fffe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ffd6:	4b0e      	ldr	r3, [pc, #56]	; (8010010 <tcp_netif_ip_addr_changed+0x78>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	60fb      	str	r3, [r7, #12]
 800ffdc:	e00c      	b.n	800fff8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681a      	ldr	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d103      	bne.n	800fff2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	681a      	ldr	r2, [r3, #0]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d1ef      	bne.n	800ffde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fffe:	bf00      	nop
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	2000cf28 	.word	0x2000cf28
 801000c:	2000cf20 	.word	0x2000cf20
 8010010:	2000cf24 	.word	0x2000cf24

08010014 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010020:	2b00      	cmp	r3, #0
 8010022:	d007      	beq.n	8010034 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010028:	4618      	mov	r0, r3
 801002a:	f7ff fb51 	bl	800f6d0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010034:	bf00      	nop
 8010036:	3708      	adds	r7, #8
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}

0801003c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801003c:	b590      	push	{r4, r7, lr}
 801003e:	b08d      	sub	sp, #52	; 0x34
 8010040:	af04      	add	r7, sp, #16
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d105      	bne.n	8010058 <tcp_input+0x1c>
 801004c:	4b9b      	ldr	r3, [pc, #620]	; (80102bc <tcp_input+0x280>)
 801004e:	2283      	movs	r2, #131	; 0x83
 8010050:	499b      	ldr	r1, [pc, #620]	; (80102c0 <tcp_input+0x284>)
 8010052:	489c      	ldr	r0, [pc, #624]	; (80102c4 <tcp_input+0x288>)
 8010054:	f009 fcae 	bl	80199b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	4a9a      	ldr	r2, [pc, #616]	; (80102c8 <tcp_input+0x28c>)
 801005e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	895b      	ldrh	r3, [r3, #10]
 8010064:	2b13      	cmp	r3, #19
 8010066:	f240 83d1 	bls.w	801080c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801006a:	4b98      	ldr	r3, [pc, #608]	; (80102cc <tcp_input+0x290>)
 801006c:	695b      	ldr	r3, [r3, #20]
 801006e:	4a97      	ldr	r2, [pc, #604]	; (80102cc <tcp_input+0x290>)
 8010070:	6812      	ldr	r2, [r2, #0]
 8010072:	4611      	mov	r1, r2
 8010074:	4618      	mov	r0, r3
 8010076:	f008 fa57 	bl	8018528 <ip4_addr_isbroadcast_u32>
 801007a:	4603      	mov	r3, r0
 801007c:	2b00      	cmp	r3, #0
 801007e:	f040 83c7 	bne.w	8010810 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010082:	4b92      	ldr	r3, [pc, #584]	; (80102cc <tcp_input+0x290>)
 8010084:	695b      	ldr	r3, [r3, #20]
 8010086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801008a:	2be0      	cmp	r3, #224	; 0xe0
 801008c:	f000 83c0 	beq.w	8010810 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010090:	4b8d      	ldr	r3, [pc, #564]	; (80102c8 <tcp_input+0x28c>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7fc fa7d 	bl	800c598 <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	0b1b      	lsrs	r3, r3, #12
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	b2db      	uxtb	r3, r3
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80100aa:	7cbb      	ldrb	r3, [r7, #18]
 80100ac:	2b13      	cmp	r3, #19
 80100ae:	f240 83b1 	bls.w	8010814 <tcp_input+0x7d8>
 80100b2:	7cbb      	ldrb	r3, [r7, #18]
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	f200 83aa 	bhi.w	8010814 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80100c0:	7cbb      	ldrb	r3, [r7, #18]
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	3b14      	subs	r3, #20
 80100c6:	b29a      	uxth	r2, r3
 80100c8:	4b81      	ldr	r3, [pc, #516]	; (80102d0 <tcp_input+0x294>)
 80100ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80100cc:	4b81      	ldr	r3, [pc, #516]	; (80102d4 <tcp_input+0x298>)
 80100ce:	2200      	movs	r2, #0
 80100d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	895a      	ldrh	r2, [r3, #10]
 80100d6:	7cbb      	ldrb	r3, [r7, #18]
 80100d8:	b29b      	uxth	r3, r3
 80100da:	429a      	cmp	r2, r3
 80100dc:	d309      	bcc.n	80100f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80100de:	4b7c      	ldr	r3, [pc, #496]	; (80102d0 <tcp_input+0x294>)
 80100e0:	881a      	ldrh	r2, [r3, #0]
 80100e2:	4b7d      	ldr	r3, [pc, #500]	; (80102d8 <tcp_input+0x29c>)
 80100e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80100e6:	7cbb      	ldrb	r3, [r7, #18]
 80100e8:	4619      	mov	r1, r3
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7fd fe36 	bl	800dd5c <pbuf_remove_header>
 80100f0:	e04e      	b.n	8010190 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d105      	bne.n	8010106 <tcp_input+0xca>
 80100fa:	4b70      	ldr	r3, [pc, #448]	; (80102bc <tcp_input+0x280>)
 80100fc:	22c2      	movs	r2, #194	; 0xc2
 80100fe:	4977      	ldr	r1, [pc, #476]	; (80102dc <tcp_input+0x2a0>)
 8010100:	4870      	ldr	r0, [pc, #448]	; (80102c4 <tcp_input+0x288>)
 8010102:	f009 fc57 	bl	80199b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010106:	2114      	movs	r1, #20
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f7fd fe27 	bl	800dd5c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	895a      	ldrh	r2, [r3, #10]
 8010112:	4b71      	ldr	r3, [pc, #452]	; (80102d8 <tcp_input+0x29c>)
 8010114:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010116:	4b6e      	ldr	r3, [pc, #440]	; (80102d0 <tcp_input+0x294>)
 8010118:	881a      	ldrh	r2, [r3, #0]
 801011a:	4b6f      	ldr	r3, [pc, #444]	; (80102d8 <tcp_input+0x29c>)
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	1ad3      	subs	r3, r2, r3
 8010120:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010122:	4b6d      	ldr	r3, [pc, #436]	; (80102d8 <tcp_input+0x29c>)
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	4619      	mov	r1, r3
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f7fd fe17 	bl	800dd5c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	895b      	ldrh	r3, [r3, #10]
 8010134:	8a3a      	ldrh	r2, [r7, #16]
 8010136:	429a      	cmp	r2, r3
 8010138:	f200 836e 	bhi.w	8010818 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4a64      	ldr	r2, [pc, #400]	; (80102d4 <tcp_input+0x298>)
 8010144:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	8a3a      	ldrh	r2, [r7, #16]
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd fe04 	bl	800dd5c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	891a      	ldrh	r2, [r3, #8]
 8010158:	8a3b      	ldrh	r3, [r7, #16]
 801015a:	1ad3      	subs	r3, r2, r3
 801015c:	b29a      	uxth	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	895b      	ldrh	r3, [r3, #10]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d005      	beq.n	8010176 <tcp_input+0x13a>
 801016a:	4b54      	ldr	r3, [pc, #336]	; (80102bc <tcp_input+0x280>)
 801016c:	22df      	movs	r2, #223	; 0xdf
 801016e:	495c      	ldr	r1, [pc, #368]	; (80102e0 <tcp_input+0x2a4>)
 8010170:	4854      	ldr	r0, [pc, #336]	; (80102c4 <tcp_input+0x288>)
 8010172:	f009 fc1f 	bl	80199b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	891a      	ldrh	r2, [r3, #8]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	891b      	ldrh	r3, [r3, #8]
 8010180:	429a      	cmp	r2, r3
 8010182:	d005      	beq.n	8010190 <tcp_input+0x154>
 8010184:	4b4d      	ldr	r3, [pc, #308]	; (80102bc <tcp_input+0x280>)
 8010186:	22e0      	movs	r2, #224	; 0xe0
 8010188:	4956      	ldr	r1, [pc, #344]	; (80102e4 <tcp_input+0x2a8>)
 801018a:	484e      	ldr	r0, [pc, #312]	; (80102c4 <tcp_input+0x288>)
 801018c:	f009 fc12 	bl	80199b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010190:	4b4d      	ldr	r3, [pc, #308]	; (80102c8 <tcp_input+0x28c>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	b29b      	uxth	r3, r3
 8010198:	4a4b      	ldr	r2, [pc, #300]	; (80102c8 <tcp_input+0x28c>)
 801019a:	6814      	ldr	r4, [r2, #0]
 801019c:	4618      	mov	r0, r3
 801019e:	f7fc f9fb 	bl	800c598 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80101a6:	4b48      	ldr	r3, [pc, #288]	; (80102c8 <tcp_input+0x28c>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	885b      	ldrh	r3, [r3, #2]
 80101ac:	b29b      	uxth	r3, r3
 80101ae:	4a46      	ldr	r2, [pc, #280]	; (80102c8 <tcp_input+0x28c>)
 80101b0:	6814      	ldr	r4, [r2, #0]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fc f9f0 	bl	800c598 <lwip_htons>
 80101b8:	4603      	mov	r3, r0
 80101ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80101bc:	4b42      	ldr	r3, [pc, #264]	; (80102c8 <tcp_input+0x28c>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	4a41      	ldr	r2, [pc, #260]	; (80102c8 <tcp_input+0x28c>)
 80101c4:	6814      	ldr	r4, [r2, #0]
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fc f9fb 	bl	800c5c2 <lwip_htonl>
 80101cc:	4603      	mov	r3, r0
 80101ce:	6063      	str	r3, [r4, #4]
 80101d0:	6863      	ldr	r3, [r4, #4]
 80101d2:	4a45      	ldr	r2, [pc, #276]	; (80102e8 <tcp_input+0x2ac>)
 80101d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80101d6:	4b3c      	ldr	r3, [pc, #240]	; (80102c8 <tcp_input+0x28c>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	4a3a      	ldr	r2, [pc, #232]	; (80102c8 <tcp_input+0x28c>)
 80101de:	6814      	ldr	r4, [r2, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fc f9ee 	bl	800c5c2 <lwip_htonl>
 80101e6:	4603      	mov	r3, r0
 80101e8:	60a3      	str	r3, [r4, #8]
 80101ea:	68a3      	ldr	r3, [r4, #8]
 80101ec:	4a3f      	ldr	r2, [pc, #252]	; (80102ec <tcp_input+0x2b0>)
 80101ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80101f0:	4b35      	ldr	r3, [pc, #212]	; (80102c8 <tcp_input+0x28c>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	89db      	ldrh	r3, [r3, #14]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	4a33      	ldr	r2, [pc, #204]	; (80102c8 <tcp_input+0x28c>)
 80101fa:	6814      	ldr	r4, [r2, #0]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fc f9cb 	bl	800c598 <lwip_htons>
 8010202:	4603      	mov	r3, r0
 8010204:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010206:	4b30      	ldr	r3, [pc, #192]	; (80102c8 <tcp_input+0x28c>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	899b      	ldrh	r3, [r3, #12]
 801020c:	b29b      	uxth	r3, r3
 801020e:	4618      	mov	r0, r3
 8010210:	f7fc f9c2 	bl	800c598 <lwip_htons>
 8010214:	4603      	mov	r3, r0
 8010216:	b2db      	uxtb	r3, r3
 8010218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801021c:	b2da      	uxtb	r2, r3
 801021e:	4b34      	ldr	r3, [pc, #208]	; (80102f0 <tcp_input+0x2b4>)
 8010220:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	891a      	ldrh	r2, [r3, #8]
 8010226:	4b33      	ldr	r3, [pc, #204]	; (80102f4 <tcp_input+0x2b8>)
 8010228:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801022a:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <tcp_input+0x2b4>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	f003 0303 	and.w	r3, r3, #3
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00c      	beq.n	8010250 <tcp_input+0x214>
    tcplen++;
 8010236:	4b2f      	ldr	r3, [pc, #188]	; (80102f4 <tcp_input+0x2b8>)
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	3301      	adds	r3, #1
 801023c:	b29a      	uxth	r2, r3
 801023e:	4b2d      	ldr	r3, [pc, #180]	; (80102f4 <tcp_input+0x2b8>)
 8010240:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	891a      	ldrh	r2, [r3, #8]
 8010246:	4b2b      	ldr	r3, [pc, #172]	; (80102f4 <tcp_input+0x2b8>)
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	429a      	cmp	r2, r3
 801024c:	f200 82e6 	bhi.w	801081c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010250:	2300      	movs	r3, #0
 8010252:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010254:	4b28      	ldr	r3, [pc, #160]	; (80102f8 <tcp_input+0x2bc>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	61fb      	str	r3, [r7, #28]
 801025a:	e09d      	b.n	8010398 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d105      	bne.n	8010270 <tcp_input+0x234>
 8010264:	4b15      	ldr	r3, [pc, #84]	; (80102bc <tcp_input+0x280>)
 8010266:	22fb      	movs	r2, #251	; 0xfb
 8010268:	4924      	ldr	r1, [pc, #144]	; (80102fc <tcp_input+0x2c0>)
 801026a:	4816      	ldr	r0, [pc, #88]	; (80102c4 <tcp_input+0x288>)
 801026c:	f009 fba2 	bl	80199b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	7d1b      	ldrb	r3, [r3, #20]
 8010274:	2b0a      	cmp	r3, #10
 8010276:	d105      	bne.n	8010284 <tcp_input+0x248>
 8010278:	4b10      	ldr	r3, [pc, #64]	; (80102bc <tcp_input+0x280>)
 801027a:	22fc      	movs	r2, #252	; 0xfc
 801027c:	4920      	ldr	r1, [pc, #128]	; (8010300 <tcp_input+0x2c4>)
 801027e:	4811      	ldr	r0, [pc, #68]	; (80102c4 <tcp_input+0x288>)
 8010280:	f009 fb98 	bl	80199b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	7d1b      	ldrb	r3, [r3, #20]
 8010288:	2b01      	cmp	r3, #1
 801028a:	d105      	bne.n	8010298 <tcp_input+0x25c>
 801028c:	4b0b      	ldr	r3, [pc, #44]	; (80102bc <tcp_input+0x280>)
 801028e:	22fd      	movs	r2, #253	; 0xfd
 8010290:	491c      	ldr	r1, [pc, #112]	; (8010304 <tcp_input+0x2c8>)
 8010292:	480c      	ldr	r0, [pc, #48]	; (80102c4 <tcp_input+0x288>)
 8010294:	f009 fb8e 	bl	80199b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	7a1b      	ldrb	r3, [r3, #8]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d033      	beq.n	8010308 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	7a1a      	ldrb	r2, [r3, #8]
 80102a4:	4b09      	ldr	r3, [pc, #36]	; (80102cc <tcp_input+0x290>)
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80102ac:	3301      	adds	r3, #1
 80102ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d029      	beq.n	8010308 <tcp_input+0x2cc>
      prev = pcb;
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	61bb      	str	r3, [r7, #24]
      continue;
 80102b8:	e06b      	b.n	8010392 <tcp_input+0x356>
 80102ba:	bf00      	nop
 80102bc:	0801bf40 	.word	0x0801bf40
 80102c0:	0801bf74 	.word	0x0801bf74
 80102c4:	0801bf8c 	.word	0x0801bf8c
 80102c8:	2000cf44 	.word	0x2000cf44
 80102cc:	200097a8 	.word	0x200097a8
 80102d0:	2000cf48 	.word	0x2000cf48
 80102d4:	2000cf4c 	.word	0x2000cf4c
 80102d8:	2000cf4a 	.word	0x2000cf4a
 80102dc:	0801bfb4 	.word	0x0801bfb4
 80102e0:	0801bfc4 	.word	0x0801bfc4
 80102e4:	0801bfd0 	.word	0x0801bfd0
 80102e8:	2000cf54 	.word	0x2000cf54
 80102ec:	2000cf58 	.word	0x2000cf58
 80102f0:	2000cf60 	.word	0x2000cf60
 80102f4:	2000cf5e 	.word	0x2000cf5e
 80102f8:	2000cf28 	.word	0x2000cf28
 80102fc:	0801bff0 	.word	0x0801bff0
 8010300:	0801c018 	.word	0x0801c018
 8010304:	0801c044 	.word	0x0801c044
    }

    if (pcb->remote_port == tcphdr->src &&
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	8b1a      	ldrh	r2, [r3, #24]
 801030c:	4b72      	ldr	r3, [pc, #456]	; (80104d8 <tcp_input+0x49c>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	b29b      	uxth	r3, r3
 8010314:	429a      	cmp	r2, r3
 8010316:	d13a      	bne.n	801038e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	8ada      	ldrh	r2, [r3, #22]
 801031c:	4b6e      	ldr	r3, [pc, #440]	; (80104d8 <tcp_input+0x49c>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	885b      	ldrh	r3, [r3, #2]
 8010322:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010324:	429a      	cmp	r2, r3
 8010326:	d132      	bne.n	801038e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	685a      	ldr	r2, [r3, #4]
 801032c:	4b6b      	ldr	r3, [pc, #428]	; (80104dc <tcp_input+0x4a0>)
 801032e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010330:	429a      	cmp	r2, r3
 8010332:	d12c      	bne.n	801038e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	4b68      	ldr	r3, [pc, #416]	; (80104dc <tcp_input+0x4a0>)
 801033a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801033c:	429a      	cmp	r2, r3
 801033e:	d126      	bne.n	801038e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	69fa      	ldr	r2, [r7, #28]
 8010346:	429a      	cmp	r2, r3
 8010348:	d106      	bne.n	8010358 <tcp_input+0x31c>
 801034a:	4b65      	ldr	r3, [pc, #404]	; (80104e0 <tcp_input+0x4a4>)
 801034c:	f240 120d 	movw	r2, #269	; 0x10d
 8010350:	4964      	ldr	r1, [pc, #400]	; (80104e4 <tcp_input+0x4a8>)
 8010352:	4865      	ldr	r0, [pc, #404]	; (80104e8 <tcp_input+0x4ac>)
 8010354:	f009 fb2e 	bl	80199b4 <iprintf>
      if (prev != NULL) {
 8010358:	69bb      	ldr	r3, [r7, #24]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00a      	beq.n	8010374 <tcp_input+0x338>
        prev->next = pcb->next;
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	68da      	ldr	r2, [r3, #12]
 8010362:	69bb      	ldr	r3, [r7, #24]
 8010364:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010366:	4b61      	ldr	r3, [pc, #388]	; (80104ec <tcp_input+0x4b0>)
 8010368:	681a      	ldr	r2, [r3, #0]
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801036e:	4a5f      	ldr	r2, [pc, #380]	; (80104ec <tcp_input+0x4b0>)
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	68db      	ldr	r3, [r3, #12]
 8010378:	69fa      	ldr	r2, [r7, #28]
 801037a:	429a      	cmp	r2, r3
 801037c:	d111      	bne.n	80103a2 <tcp_input+0x366>
 801037e:	4b58      	ldr	r3, [pc, #352]	; (80104e0 <tcp_input+0x4a4>)
 8010380:	f240 1215 	movw	r2, #277	; 0x115
 8010384:	495a      	ldr	r1, [pc, #360]	; (80104f0 <tcp_input+0x4b4>)
 8010386:	4858      	ldr	r0, [pc, #352]	; (80104e8 <tcp_input+0x4ac>)
 8010388:	f009 fb14 	bl	80199b4 <iprintf>
      break;
 801038c:	e009      	b.n	80103a2 <tcp_input+0x366>
    }
    prev = pcb;
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	68db      	ldr	r3, [r3, #12]
 8010396:	61fb      	str	r3, [r7, #28]
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	2b00      	cmp	r3, #0
 801039c:	f47f af5e 	bne.w	801025c <tcp_input+0x220>
 80103a0:	e000      	b.n	80103a4 <tcp_input+0x368>
      break;
 80103a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f040 80aa 	bne.w	8010500 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103ac:	4b51      	ldr	r3, [pc, #324]	; (80104f4 <tcp_input+0x4b8>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	61fb      	str	r3, [r7, #28]
 80103b2:	e03f      	b.n	8010434 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	7d1b      	ldrb	r3, [r3, #20]
 80103b8:	2b0a      	cmp	r3, #10
 80103ba:	d006      	beq.n	80103ca <tcp_input+0x38e>
 80103bc:	4b48      	ldr	r3, [pc, #288]	; (80104e0 <tcp_input+0x4a4>)
 80103be:	f240 121f 	movw	r2, #287	; 0x11f
 80103c2:	494d      	ldr	r1, [pc, #308]	; (80104f8 <tcp_input+0x4bc>)
 80103c4:	4848      	ldr	r0, [pc, #288]	; (80104e8 <tcp_input+0x4ac>)
 80103c6:	f009 faf5 	bl	80199b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103ca:	69fb      	ldr	r3, [r7, #28]
 80103cc:	7a1b      	ldrb	r3, [r3, #8]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d009      	beq.n	80103e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	7a1a      	ldrb	r2, [r3, #8]
 80103d6:	4b41      	ldr	r3, [pc, #260]	; (80104dc <tcp_input+0x4a0>)
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103de:	3301      	adds	r3, #1
 80103e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d122      	bne.n	801042c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	8b1a      	ldrh	r2, [r3, #24]
 80103ea:	4b3b      	ldr	r3, [pc, #236]	; (80104d8 <tcp_input+0x49c>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	881b      	ldrh	r3, [r3, #0]
 80103f0:	b29b      	uxth	r3, r3
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d11b      	bne.n	801042e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	8ada      	ldrh	r2, [r3, #22]
 80103fa:	4b37      	ldr	r3, [pc, #220]	; (80104d8 <tcp_input+0x49c>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	885b      	ldrh	r3, [r3, #2]
 8010400:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010402:	429a      	cmp	r2, r3
 8010404:	d113      	bne.n	801042e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	685a      	ldr	r2, [r3, #4]
 801040a:	4b34      	ldr	r3, [pc, #208]	; (80104dc <tcp_input+0x4a0>)
 801040c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801040e:	429a      	cmp	r2, r3
 8010410:	d10d      	bne.n	801042e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	4b31      	ldr	r3, [pc, #196]	; (80104dc <tcp_input+0x4a0>)
 8010418:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801041a:	429a      	cmp	r2, r3
 801041c:	d107      	bne.n	801042e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801041e:	69f8      	ldr	r0, [r7, #28]
 8010420:	f000 fb56 	bl	8010ad0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7fd fd1f 	bl	800de68 <pbuf_free>
        return;
 801042a:	e1fd      	b.n	8010828 <tcp_input+0x7ec>
        continue;
 801042c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801042e:	69fb      	ldr	r3, [r7, #28]
 8010430:	68db      	ldr	r3, [r3, #12]
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d1bc      	bne.n	80103b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801043a:	2300      	movs	r3, #0
 801043c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801043e:	4b2f      	ldr	r3, [pc, #188]	; (80104fc <tcp_input+0x4c0>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	617b      	str	r3, [r7, #20]
 8010444:	e02a      	b.n	801049c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	7a1b      	ldrb	r3, [r3, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00c      	beq.n	8010468 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	7a1a      	ldrb	r2, [r3, #8]
 8010452:	4b22      	ldr	r3, [pc, #136]	; (80104dc <tcp_input+0x4a0>)
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801045a:	3301      	adds	r3, #1
 801045c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801045e:	429a      	cmp	r2, r3
 8010460:	d002      	beq.n	8010468 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	61bb      	str	r3, [r7, #24]
        continue;
 8010466:	e016      	b.n	8010496 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	8ada      	ldrh	r2, [r3, #22]
 801046c:	4b1a      	ldr	r3, [pc, #104]	; (80104d8 <tcp_input+0x49c>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	885b      	ldrh	r3, [r3, #2]
 8010472:	b29b      	uxth	r3, r3
 8010474:	429a      	cmp	r2, r3
 8010476:	d10c      	bne.n	8010492 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	4b17      	ldr	r3, [pc, #92]	; (80104dc <tcp_input+0x4a0>)
 801047e:	695b      	ldr	r3, [r3, #20]
 8010480:	429a      	cmp	r2, r3
 8010482:	d00f      	beq.n	80104a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00d      	beq.n	80104a6 <tcp_input+0x46a>
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d009      	beq.n	80104a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	617b      	str	r3, [r7, #20]
 801049c:	697b      	ldr	r3, [r7, #20]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1d1      	bne.n	8010446 <tcp_input+0x40a>
 80104a2:	e000      	b.n	80104a6 <tcp_input+0x46a>
            break;
 80104a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d029      	beq.n	8010500 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00a      	beq.n	80104c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	68da      	ldr	r2, [r3, #12]
 80104b6:	69bb      	ldr	r3, [r7, #24]
 80104b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80104ba:	4b10      	ldr	r3, [pc, #64]	; (80104fc <tcp_input+0x4c0>)
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80104c2:	4a0e      	ldr	r2, [pc, #56]	; (80104fc <tcp_input+0x4c0>)
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80104c8:	6978      	ldr	r0, [r7, #20]
 80104ca:	f000 fa03 	bl	80108d4 <tcp_listen_input>
      }
      pbuf_free(p);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7fd fcca 	bl	800de68 <pbuf_free>
      return;
 80104d4:	e1a8      	b.n	8010828 <tcp_input+0x7ec>
 80104d6:	bf00      	nop
 80104d8:	2000cf44 	.word	0x2000cf44
 80104dc:	200097a8 	.word	0x200097a8
 80104e0:	0801bf40 	.word	0x0801bf40
 80104e4:	0801c06c 	.word	0x0801c06c
 80104e8:	0801bf8c 	.word	0x0801bf8c
 80104ec:	2000cf28 	.word	0x2000cf28
 80104f0:	0801c098 	.word	0x0801c098
 80104f4:	2000cf2c 	.word	0x2000cf2c
 80104f8:	0801c0c4 	.word	0x0801c0c4
 80104fc:	2000cf24 	.word	0x2000cf24
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	2b00      	cmp	r3, #0
 8010504:	f000 8158 	beq.w	80107b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010508:	4b95      	ldr	r3, [pc, #596]	; (8010760 <tcp_input+0x724>)
 801050a:	2200      	movs	r2, #0
 801050c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	891a      	ldrh	r2, [r3, #8]
 8010512:	4b93      	ldr	r3, [pc, #588]	; (8010760 <tcp_input+0x724>)
 8010514:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010516:	4a92      	ldr	r2, [pc, #584]	; (8010760 <tcp_input+0x724>)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801051c:	4b91      	ldr	r3, [pc, #580]	; (8010764 <tcp_input+0x728>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4a8f      	ldr	r2, [pc, #572]	; (8010760 <tcp_input+0x724>)
 8010522:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010524:	4b90      	ldr	r3, [pc, #576]	; (8010768 <tcp_input+0x72c>)
 8010526:	2200      	movs	r2, #0
 8010528:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801052a:	4b90      	ldr	r3, [pc, #576]	; (801076c <tcp_input+0x730>)
 801052c:	2200      	movs	r2, #0
 801052e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010530:	4b8f      	ldr	r3, [pc, #572]	; (8010770 <tcp_input+0x734>)
 8010532:	2200      	movs	r2, #0
 8010534:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010536:	4b8f      	ldr	r3, [pc, #572]	; (8010774 <tcp_input+0x738>)
 8010538:	781b      	ldrb	r3, [r3, #0]
 801053a:	f003 0308 	and.w	r3, r3, #8
 801053e:	2b00      	cmp	r3, #0
 8010540:	d006      	beq.n	8010550 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	7b5b      	ldrb	r3, [r3, #13]
 8010546:	f043 0301 	orr.w	r3, r3, #1
 801054a:	b2da      	uxtb	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010554:	2b00      	cmp	r3, #0
 8010556:	d017      	beq.n	8010588 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010558:	69f8      	ldr	r0, [r7, #28]
 801055a:	f7ff f83d 	bl	800f5d8 <tcp_process_refused_data>
 801055e:	4603      	mov	r3, r0
 8010560:	f113 0f0d 	cmn.w	r3, #13
 8010564:	d007      	beq.n	8010576 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801056a:	2b00      	cmp	r3, #0
 801056c:	d00c      	beq.n	8010588 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801056e:	4b82      	ldr	r3, [pc, #520]	; (8010778 <tcp_input+0x73c>)
 8010570:	881b      	ldrh	r3, [r3, #0]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d008      	beq.n	8010588 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801057a:	2b00      	cmp	r3, #0
 801057c:	f040 80e3 	bne.w	8010746 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010580:	69f8      	ldr	r0, [r7, #28]
 8010582:	f003 fe05 	bl	8014190 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010586:	e0de      	b.n	8010746 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010588:	4a7c      	ldr	r2, [pc, #496]	; (801077c <tcp_input+0x740>)
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801058e:	69f8      	ldr	r0, [r7, #28]
 8010590:	f000 fb18 	bl	8010bc4 <tcp_process>
 8010594:	4603      	mov	r3, r0
 8010596:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801059c:	f113 0f0d 	cmn.w	r3, #13
 80105a0:	f000 80d3 	beq.w	801074a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80105a4:	4b71      	ldr	r3, [pc, #452]	; (801076c <tcp_input+0x730>)
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 0308 	and.w	r3, r3, #8
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d015      	beq.n	80105dc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d008      	beq.n	80105cc <tcp_input+0x590>
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105c0:	69fa      	ldr	r2, [r7, #28]
 80105c2:	6912      	ldr	r2, [r2, #16]
 80105c4:	f06f 010d 	mvn.w	r1, #13
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105cc:	69f9      	ldr	r1, [r7, #28]
 80105ce:	486c      	ldr	r0, [pc, #432]	; (8010780 <tcp_input+0x744>)
 80105d0:	f7ff fbbc 	bl	800fd4c <tcp_pcb_remove>
        tcp_free(pcb);
 80105d4:	69f8      	ldr	r0, [r7, #28]
 80105d6:	f7fd ff03 	bl	800e3e0 <tcp_free>
 80105da:	e0da      	b.n	8010792 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80105dc:	2300      	movs	r3, #0
 80105de:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80105e0:	4b63      	ldr	r3, [pc, #396]	; (8010770 <tcp_input+0x734>)
 80105e2:	881b      	ldrh	r3, [r3, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d01d      	beq.n	8010624 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80105e8:	4b61      	ldr	r3, [pc, #388]	; (8010770 <tcp_input+0x734>)
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d00a      	beq.n	801060e <tcp_input+0x5d2>
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105fe:	69fa      	ldr	r2, [r7, #28]
 8010600:	6910      	ldr	r0, [r2, #16]
 8010602:	89fa      	ldrh	r2, [r7, #14]
 8010604:	69f9      	ldr	r1, [r7, #28]
 8010606:	4798      	blx	r3
 8010608:	4603      	mov	r3, r0
 801060a:	74fb      	strb	r3, [r7, #19]
 801060c:	e001      	b.n	8010612 <tcp_input+0x5d6>
 801060e:	2300      	movs	r3, #0
 8010610:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010612:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010616:	f113 0f0d 	cmn.w	r3, #13
 801061a:	f000 8098 	beq.w	801074e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801061e:	4b54      	ldr	r3, [pc, #336]	; (8010770 <tcp_input+0x734>)
 8010620:	2200      	movs	r2, #0
 8010622:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010624:	69f8      	ldr	r0, [r7, #28]
 8010626:	f000 f915 	bl	8010854 <tcp_input_delayed_close>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	f040 8090 	bne.w	8010752 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010632:	4b4d      	ldr	r3, [pc, #308]	; (8010768 <tcp_input+0x72c>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d041      	beq.n	80106be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801063e:	2b00      	cmp	r3, #0
 8010640:	d006      	beq.n	8010650 <tcp_input+0x614>
 8010642:	4b50      	ldr	r3, [pc, #320]	; (8010784 <tcp_input+0x748>)
 8010644:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010648:	494f      	ldr	r1, [pc, #316]	; (8010788 <tcp_input+0x74c>)
 801064a:	4850      	ldr	r0, [pc, #320]	; (801078c <tcp_input+0x750>)
 801064c:	f009 f9b2 	bl	80199b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	8b5b      	ldrh	r3, [r3, #26]
 8010654:	f003 0310 	and.w	r3, r3, #16
 8010658:	2b00      	cmp	r3, #0
 801065a:	d008      	beq.n	801066e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801065c:	4b42      	ldr	r3, [pc, #264]	; (8010768 <tcp_input+0x72c>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4618      	mov	r0, r3
 8010662:	f7fd fc01 	bl	800de68 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010666:	69f8      	ldr	r0, [r7, #28]
 8010668:	f7fe f9a2 	bl	800e9b0 <tcp_abort>
            goto aborted;
 801066c:	e091      	b.n	8010792 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010674:	2b00      	cmp	r3, #0
 8010676:	d00c      	beq.n	8010692 <tcp_input+0x656>
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801067e:	69fb      	ldr	r3, [r7, #28]
 8010680:	6918      	ldr	r0, [r3, #16]
 8010682:	4b39      	ldr	r3, [pc, #228]	; (8010768 <tcp_input+0x72c>)
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	2300      	movs	r3, #0
 8010688:	69f9      	ldr	r1, [r7, #28]
 801068a:	47a0      	blx	r4
 801068c:	4603      	mov	r3, r0
 801068e:	74fb      	strb	r3, [r7, #19]
 8010690:	e008      	b.n	80106a4 <tcp_input+0x668>
 8010692:	4b35      	ldr	r3, [pc, #212]	; (8010768 <tcp_input+0x72c>)
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	2300      	movs	r3, #0
 8010698:	69f9      	ldr	r1, [r7, #28]
 801069a:	2000      	movs	r0, #0
 801069c:	f7ff f890 	bl	800f7c0 <tcp_recv_null>
 80106a0:	4603      	mov	r3, r0
 80106a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80106a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106a8:	f113 0f0d 	cmn.w	r3, #13
 80106ac:	d053      	beq.n	8010756 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80106ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d003      	beq.n	80106be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80106b6:	4b2c      	ldr	r3, [pc, #176]	; (8010768 <tcp_input+0x72c>)
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	69fb      	ldr	r3, [r7, #28]
 80106bc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80106be:	4b2b      	ldr	r3, [pc, #172]	; (801076c <tcp_input+0x730>)
 80106c0:	781b      	ldrb	r3, [r3, #0]
 80106c2:	f003 0320 	and.w	r3, r3, #32
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d030      	beq.n	801072c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d009      	beq.n	80106e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80106d2:	69fb      	ldr	r3, [r7, #28]
 80106d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106d6:	7b5a      	ldrb	r2, [r3, #13]
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106dc:	f042 0220 	orr.w	r2, r2, #32
 80106e0:	b2d2      	uxtb	r2, r2
 80106e2:	735a      	strb	r2, [r3, #13]
 80106e4:	e022      	b.n	801072c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80106ee:	d005      	beq.n	80106fc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106f4:	3301      	adds	r3, #1
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00b      	beq.n	801071e <tcp_input+0x6e2>
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	6918      	ldr	r0, [r3, #16]
 8010710:	2300      	movs	r3, #0
 8010712:	2200      	movs	r2, #0
 8010714:	69f9      	ldr	r1, [r7, #28]
 8010716:	47a0      	blx	r4
 8010718:	4603      	mov	r3, r0
 801071a:	74fb      	strb	r3, [r7, #19]
 801071c:	e001      	b.n	8010722 <tcp_input+0x6e6>
 801071e:	2300      	movs	r3, #0
 8010720:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010722:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010726:	f113 0f0d 	cmn.w	r3, #13
 801072a:	d016      	beq.n	801075a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801072c:	4b13      	ldr	r3, [pc, #76]	; (801077c <tcp_input+0x740>)
 801072e:	2200      	movs	r2, #0
 8010730:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010732:	69f8      	ldr	r0, [r7, #28]
 8010734:	f000 f88e 	bl	8010854 <tcp_input_delayed_close>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d128      	bne.n	8010790 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801073e:	69f8      	ldr	r0, [r7, #28]
 8010740:	f002 ff20 	bl	8013584 <tcp_output>
 8010744:	e025      	b.n	8010792 <tcp_input+0x756>
        goto aborted;
 8010746:	bf00      	nop
 8010748:	e023      	b.n	8010792 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801074a:	bf00      	nop
 801074c:	e021      	b.n	8010792 <tcp_input+0x756>
              goto aborted;
 801074e:	bf00      	nop
 8010750:	e01f      	b.n	8010792 <tcp_input+0x756>
          goto aborted;
 8010752:	bf00      	nop
 8010754:	e01d      	b.n	8010792 <tcp_input+0x756>
            goto aborted;
 8010756:	bf00      	nop
 8010758:	e01b      	b.n	8010792 <tcp_input+0x756>
              goto aborted;
 801075a:	bf00      	nop
 801075c:	e019      	b.n	8010792 <tcp_input+0x756>
 801075e:	bf00      	nop
 8010760:	2000cf34 	.word	0x2000cf34
 8010764:	2000cf44 	.word	0x2000cf44
 8010768:	2000cf64 	.word	0x2000cf64
 801076c:	2000cf61 	.word	0x2000cf61
 8010770:	2000cf5c 	.word	0x2000cf5c
 8010774:	2000cf60 	.word	0x2000cf60
 8010778:	2000cf5e 	.word	0x2000cf5e
 801077c:	2000cf68 	.word	0x2000cf68
 8010780:	2000cf28 	.word	0x2000cf28
 8010784:	0801bf40 	.word	0x0801bf40
 8010788:	0801c0f4 	.word	0x0801c0f4
 801078c:	0801bf8c 	.word	0x0801bf8c
          goto aborted;
 8010790:	bf00      	nop
    tcp_input_pcb = NULL;
 8010792:	4b27      	ldr	r3, [pc, #156]	; (8010830 <tcp_input+0x7f4>)
 8010794:	2200      	movs	r2, #0
 8010796:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010798:	4b26      	ldr	r3, [pc, #152]	; (8010834 <tcp_input+0x7f8>)
 801079a:	2200      	movs	r2, #0
 801079c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801079e:	4b26      	ldr	r3, [pc, #152]	; (8010838 <tcp_input+0x7fc>)
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d03f      	beq.n	8010826 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80107a6:	4b24      	ldr	r3, [pc, #144]	; (8010838 <tcp_input+0x7fc>)
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fd fb5c 	bl	800de68 <pbuf_free>
      inseg.p = NULL;
 80107b0:	4b21      	ldr	r3, [pc, #132]	; (8010838 <tcp_input+0x7fc>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80107b6:	e036      	b.n	8010826 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80107b8:	4b20      	ldr	r3, [pc, #128]	; (801083c <tcp_input+0x800>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	899b      	ldrh	r3, [r3, #12]
 80107be:	b29b      	uxth	r3, r3
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fb fee9 	bl	800c598 <lwip_htons>
 80107c6:	4603      	mov	r3, r0
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	f003 0304 	and.w	r3, r3, #4
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d118      	bne.n	8010804 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107d2:	4b1b      	ldr	r3, [pc, #108]	; (8010840 <tcp_input+0x804>)
 80107d4:	6819      	ldr	r1, [r3, #0]
 80107d6:	4b1b      	ldr	r3, [pc, #108]	; (8010844 <tcp_input+0x808>)
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	461a      	mov	r2, r3
 80107dc:	4b1a      	ldr	r3, [pc, #104]	; (8010848 <tcp_input+0x80c>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107e2:	4b16      	ldr	r3, [pc, #88]	; (801083c <tcp_input+0x800>)
 80107e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107e6:	885b      	ldrh	r3, [r3, #2]
 80107e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107ea:	4a14      	ldr	r2, [pc, #80]	; (801083c <tcp_input+0x800>)
 80107ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107ee:	8812      	ldrh	r2, [r2, #0]
 80107f0:	b292      	uxth	r2, r2
 80107f2:	9202      	str	r2, [sp, #8]
 80107f4:	9301      	str	r3, [sp, #4]
 80107f6:	4b15      	ldr	r3, [pc, #84]	; (801084c <tcp_input+0x810>)
 80107f8:	9300      	str	r3, [sp, #0]
 80107fa:	4b15      	ldr	r3, [pc, #84]	; (8010850 <tcp_input+0x814>)
 80107fc:	4602      	mov	r2, r0
 80107fe:	2000      	movs	r0, #0
 8010800:	f003 fc74 	bl	80140ec <tcp_rst>
    pbuf_free(p);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f7fd fb2f 	bl	800de68 <pbuf_free>
  return;
 801080a:	e00c      	b.n	8010826 <tcp_input+0x7ea>
    goto dropped;
 801080c:	bf00      	nop
 801080e:	e006      	b.n	801081e <tcp_input+0x7e2>
    goto dropped;
 8010810:	bf00      	nop
 8010812:	e004      	b.n	801081e <tcp_input+0x7e2>
    goto dropped;
 8010814:	bf00      	nop
 8010816:	e002      	b.n	801081e <tcp_input+0x7e2>
      goto dropped;
 8010818:	bf00      	nop
 801081a:	e000      	b.n	801081e <tcp_input+0x7e2>
      goto dropped;
 801081c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801081e:	6878      	ldr	r0, [r7, #4]
 8010820:	f7fd fb22 	bl	800de68 <pbuf_free>
 8010824:	e000      	b.n	8010828 <tcp_input+0x7ec>
  return;
 8010826:	bf00      	nop
}
 8010828:	3724      	adds	r7, #36	; 0x24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd90      	pop	{r4, r7, pc}
 801082e:	bf00      	nop
 8010830:	2000cf68 	.word	0x2000cf68
 8010834:	2000cf64 	.word	0x2000cf64
 8010838:	2000cf34 	.word	0x2000cf34
 801083c:	2000cf44 	.word	0x2000cf44
 8010840:	2000cf58 	.word	0x2000cf58
 8010844:	2000cf5e 	.word	0x2000cf5e
 8010848:	2000cf54 	.word	0x2000cf54
 801084c:	200097b8 	.word	0x200097b8
 8010850:	200097bc 	.word	0x200097bc

08010854 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d106      	bne.n	8010870 <tcp_input_delayed_close+0x1c>
 8010862:	4b17      	ldr	r3, [pc, #92]	; (80108c0 <tcp_input_delayed_close+0x6c>)
 8010864:	f240 225a 	movw	r2, #602	; 0x25a
 8010868:	4916      	ldr	r1, [pc, #88]	; (80108c4 <tcp_input_delayed_close+0x70>)
 801086a:	4817      	ldr	r0, [pc, #92]	; (80108c8 <tcp_input_delayed_close+0x74>)
 801086c:	f009 f8a2 	bl	80199b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010870:	4b16      	ldr	r3, [pc, #88]	; (80108cc <tcp_input_delayed_close+0x78>)
 8010872:	781b      	ldrb	r3, [r3, #0]
 8010874:	f003 0310 	and.w	r3, r3, #16
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01c      	beq.n	80108b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	8b5b      	ldrh	r3, [r3, #26]
 8010880:	f003 0310 	and.w	r3, r3, #16
 8010884:	2b00      	cmp	r3, #0
 8010886:	d10d      	bne.n	80108a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801088e:	2b00      	cmp	r3, #0
 8010890:	d008      	beq.n	80108a4 <tcp_input_delayed_close+0x50>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010898:	687a      	ldr	r2, [r7, #4]
 801089a:	6912      	ldr	r2, [r2, #16]
 801089c:	f06f 010e 	mvn.w	r1, #14
 80108a0:	4610      	mov	r0, r2
 80108a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	480a      	ldr	r0, [pc, #40]	; (80108d0 <tcp_input_delayed_close+0x7c>)
 80108a8:	f7ff fa50 	bl	800fd4c <tcp_pcb_remove>
    tcp_free(pcb);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fd fd97 	bl	800e3e0 <tcp_free>
    return 1;
 80108b2:	2301      	movs	r3, #1
 80108b4:	e000      	b.n	80108b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80108b6:	2300      	movs	r3, #0
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	0801bf40 	.word	0x0801bf40
 80108c4:	0801c110 	.word	0x0801c110
 80108c8:	0801bf8c 	.word	0x0801bf8c
 80108cc:	2000cf61 	.word	0x2000cf61
 80108d0:	2000cf28 	.word	0x2000cf28

080108d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80108d4:	b590      	push	{r4, r7, lr}
 80108d6:	b08b      	sub	sp, #44	; 0x2c
 80108d8:	af04      	add	r7, sp, #16
 80108da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80108dc:	4b6f      	ldr	r3, [pc, #444]	; (8010a9c <tcp_listen_input+0x1c8>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	f003 0304 	and.w	r3, r3, #4
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f040 80d2 	bne.w	8010a8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d106      	bne.n	80108fe <tcp_listen_input+0x2a>
 80108f0:	4b6b      	ldr	r3, [pc, #428]	; (8010aa0 <tcp_listen_input+0x1cc>)
 80108f2:	f240 2281 	movw	r2, #641	; 0x281
 80108f6:	496b      	ldr	r1, [pc, #428]	; (8010aa4 <tcp_listen_input+0x1d0>)
 80108f8:	486b      	ldr	r0, [pc, #428]	; (8010aa8 <tcp_listen_input+0x1d4>)
 80108fa:	f009 f85b 	bl	80199b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80108fe:	4b67      	ldr	r3, [pc, #412]	; (8010a9c <tcp_listen_input+0x1c8>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0310 	and.w	r3, r3, #16
 8010906:	2b00      	cmp	r3, #0
 8010908:	d019      	beq.n	801093e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801090a:	4b68      	ldr	r3, [pc, #416]	; (8010aac <tcp_listen_input+0x1d8>)
 801090c:	6819      	ldr	r1, [r3, #0]
 801090e:	4b68      	ldr	r3, [pc, #416]	; (8010ab0 <tcp_listen_input+0x1dc>)
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	461a      	mov	r2, r3
 8010914:	4b67      	ldr	r3, [pc, #412]	; (8010ab4 <tcp_listen_input+0x1e0>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801091a:	4b67      	ldr	r3, [pc, #412]	; (8010ab8 <tcp_listen_input+0x1e4>)
 801091c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801091e:	885b      	ldrh	r3, [r3, #2]
 8010920:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010922:	4a65      	ldr	r2, [pc, #404]	; (8010ab8 <tcp_listen_input+0x1e4>)
 8010924:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010926:	8812      	ldrh	r2, [r2, #0]
 8010928:	b292      	uxth	r2, r2
 801092a:	9202      	str	r2, [sp, #8]
 801092c:	9301      	str	r3, [sp, #4]
 801092e:	4b63      	ldr	r3, [pc, #396]	; (8010abc <tcp_listen_input+0x1e8>)
 8010930:	9300      	str	r3, [sp, #0]
 8010932:	4b63      	ldr	r3, [pc, #396]	; (8010ac0 <tcp_listen_input+0x1ec>)
 8010934:	4602      	mov	r2, r0
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f003 fbd8 	bl	80140ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801093c:	e0a9      	b.n	8010a92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801093e:	4b57      	ldr	r3, [pc, #348]	; (8010a9c <tcp_listen_input+0x1c8>)
 8010940:	781b      	ldrb	r3, [r3, #0]
 8010942:	f003 0302 	and.w	r3, r3, #2
 8010946:	2b00      	cmp	r3, #0
 8010948:	f000 80a3 	beq.w	8010a92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	7d5b      	ldrb	r3, [r3, #21]
 8010950:	4618      	mov	r0, r3
 8010952:	f7ff f859 	bl	800fa08 <tcp_alloc>
 8010956:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d111      	bne.n	8010982 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	699b      	ldr	r3, [r3, #24]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00a      	beq.n	801097c <tcp_listen_input+0xa8>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	699b      	ldr	r3, [r3, #24]
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	6910      	ldr	r0, [r2, #16]
 801096e:	f04f 32ff 	mov.w	r2, #4294967295
 8010972:	2100      	movs	r1, #0
 8010974:	4798      	blx	r3
 8010976:	4603      	mov	r3, r0
 8010978:	73bb      	strb	r3, [r7, #14]
      return;
 801097a:	e08b      	b.n	8010a94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801097c:	23f0      	movs	r3, #240	; 0xf0
 801097e:	73bb      	strb	r3, [r7, #14]
      return;
 8010980:	e088      	b.n	8010a94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010982:	4b50      	ldr	r3, [pc, #320]	; (8010ac4 <tcp_listen_input+0x1f0>)
 8010984:	695a      	ldr	r2, [r3, #20]
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801098a:	4b4e      	ldr	r3, [pc, #312]	; (8010ac4 <tcp_listen_input+0x1f0>)
 801098c:	691a      	ldr	r2, [r3, #16]
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	8ada      	ldrh	r2, [r3, #22]
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801099a:	4b47      	ldr	r3, [pc, #284]	; (8010ab8 <tcp_listen_input+0x1e4>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	2203      	movs	r2, #3
 80109aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80109ac:	4b41      	ldr	r3, [pc, #260]	; (8010ab4 <tcp_listen_input+0x1e0>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80109be:	6978      	ldr	r0, [r7, #20]
 80109c0:	f7ff fa58 	bl	800fe74 <tcp_next_iss>
 80109c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	693a      	ldr	r2, [r7, #16]
 80109ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	693a      	ldr	r2, [r7, #16]
 80109d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	693a      	ldr	r2, [r7, #16]
 80109dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80109de:	4b35      	ldr	r3, [pc, #212]	; (8010ab4 <tcp_listen_input+0x1e0>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	1e5a      	subs	r2, r3, #1
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	7a5b      	ldrb	r3, [r3, #9]
 80109fa:	f003 030c 	and.w	r3, r3, #12
 80109fe:	b2da      	uxtb	r2, r3
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7a1a      	ldrb	r2, [r3, #8]
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010a0c:	4b2e      	ldr	r3, [pc, #184]	; (8010ac8 <tcp_listen_input+0x1f4>)
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	60da      	str	r2, [r3, #12]
 8010a14:	4a2c      	ldr	r2, [pc, #176]	; (8010ac8 <tcp_listen_input+0x1f4>)
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	6013      	str	r3, [r2, #0]
 8010a1a:	f003 fd29 	bl	8014470 <tcp_timer_needed>
 8010a1e:	4b2b      	ldr	r3, [pc, #172]	; (8010acc <tcp_listen_input+0x1f8>)
 8010a20:	2201      	movs	r2, #1
 8010a22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010a24:	6978      	ldr	r0, [r7, #20]
 8010a26:	f001 fd8f 	bl	8012548 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010a2a:	4b23      	ldr	r3, [pc, #140]	; (8010ab8 <tcp_listen_input+0x1e4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	89db      	ldrh	r3, [r3, #14]
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	3304      	adds	r3, #4
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f007 fab7 	bl	8017fc0 <ip4_route>
 8010a52:	4601      	mov	r1, r0
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	3304      	adds	r3, #4
 8010a58:	461a      	mov	r2, r3
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	f7ff fa30 	bl	800fec0 <tcp_eff_send_mss_netif>
 8010a60:	4603      	mov	r3, r0
 8010a62:	461a      	mov	r2, r3
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010a68:	2112      	movs	r1, #18
 8010a6a:	6978      	ldr	r0, [r7, #20]
 8010a6c:	f002 fc9c 	bl	80133a8 <tcp_enqueue_flags>
 8010a70:	4603      	mov	r3, r0
 8010a72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d004      	beq.n	8010a86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010a7c:	2100      	movs	r1, #0
 8010a7e:	6978      	ldr	r0, [r7, #20]
 8010a80:	f7fd fed8 	bl	800e834 <tcp_abandon>
      return;
 8010a84:	e006      	b.n	8010a94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010a86:	6978      	ldr	r0, [r7, #20]
 8010a88:	f002 fd7c 	bl	8013584 <tcp_output>
  return;
 8010a8c:	e001      	b.n	8010a92 <tcp_listen_input+0x1be>
    return;
 8010a8e:	bf00      	nop
 8010a90:	e000      	b.n	8010a94 <tcp_listen_input+0x1c0>
  return;
 8010a92:	bf00      	nop
}
 8010a94:	371c      	adds	r7, #28
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd90      	pop	{r4, r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	2000cf60 	.word	0x2000cf60
 8010aa0:	0801bf40 	.word	0x0801bf40
 8010aa4:	0801c138 	.word	0x0801c138
 8010aa8:	0801bf8c 	.word	0x0801bf8c
 8010aac:	2000cf58 	.word	0x2000cf58
 8010ab0:	2000cf5e 	.word	0x2000cf5e
 8010ab4:	2000cf54 	.word	0x2000cf54
 8010ab8:	2000cf44 	.word	0x2000cf44
 8010abc:	200097b8 	.word	0x200097b8
 8010ac0:	200097bc 	.word	0x200097bc
 8010ac4:	200097a8 	.word	0x200097a8
 8010ac8:	2000cf28 	.word	0x2000cf28
 8010acc:	2000cf30 	.word	0x2000cf30

08010ad0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b086      	sub	sp, #24
 8010ad4:	af04      	add	r7, sp, #16
 8010ad6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010ad8:	4b2f      	ldr	r3, [pc, #188]	; (8010b98 <tcp_timewait_input+0xc8>)
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f003 0304 	and.w	r3, r3, #4
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d153      	bne.n	8010b8c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d106      	bne.n	8010af8 <tcp_timewait_input+0x28>
 8010aea:	4b2c      	ldr	r3, [pc, #176]	; (8010b9c <tcp_timewait_input+0xcc>)
 8010aec:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010af0:	492b      	ldr	r1, [pc, #172]	; (8010ba0 <tcp_timewait_input+0xd0>)
 8010af2:	482c      	ldr	r0, [pc, #176]	; (8010ba4 <tcp_timewait_input+0xd4>)
 8010af4:	f008 ff5e 	bl	80199b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010af8:	4b27      	ldr	r3, [pc, #156]	; (8010b98 <tcp_timewait_input+0xc8>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f003 0302 	and.w	r3, r3, #2
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d02a      	beq.n	8010b5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010b04:	4b28      	ldr	r3, [pc, #160]	; (8010ba8 <tcp_timewait_input+0xd8>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0c:	1ad3      	subs	r3, r2, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	db2d      	blt.n	8010b6e <tcp_timewait_input+0x9e>
 8010b12:	4b25      	ldr	r3, [pc, #148]	; (8010ba8 <tcp_timewait_input+0xd8>)
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b1a:	6879      	ldr	r1, [r7, #4]
 8010b1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b1e:	440b      	add	r3, r1
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dc23      	bgt.n	8010b6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b26:	4b21      	ldr	r3, [pc, #132]	; (8010bac <tcp_timewait_input+0xdc>)
 8010b28:	6819      	ldr	r1, [r3, #0]
 8010b2a:	4b21      	ldr	r3, [pc, #132]	; (8010bb0 <tcp_timewait_input+0xe0>)
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	4b1d      	ldr	r3, [pc, #116]	; (8010ba8 <tcp_timewait_input+0xd8>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b36:	4b1f      	ldr	r3, [pc, #124]	; (8010bb4 <tcp_timewait_input+0xe4>)
 8010b38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b3a:	885b      	ldrh	r3, [r3, #2]
 8010b3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010b3e:	4a1d      	ldr	r2, [pc, #116]	; (8010bb4 <tcp_timewait_input+0xe4>)
 8010b40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010b42:	8812      	ldrh	r2, [r2, #0]
 8010b44:	b292      	uxth	r2, r2
 8010b46:	9202      	str	r2, [sp, #8]
 8010b48:	9301      	str	r3, [sp, #4]
 8010b4a:	4b1b      	ldr	r3, [pc, #108]	; (8010bb8 <tcp_timewait_input+0xe8>)
 8010b4c:	9300      	str	r3, [sp, #0]
 8010b4e:	4b1b      	ldr	r3, [pc, #108]	; (8010bbc <tcp_timewait_input+0xec>)
 8010b50:	4602      	mov	r2, r0
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f003 faca 	bl	80140ec <tcp_rst>
      return;
 8010b58:	e01b      	b.n	8010b92 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010b5a:	4b0f      	ldr	r3, [pc, #60]	; (8010b98 <tcp_timewait_input+0xc8>)
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	f003 0301 	and.w	r3, r3, #1
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010b66:	4b16      	ldr	r3, [pc, #88]	; (8010bc0 <tcp_timewait_input+0xf0>)
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010b6e:	4b10      	ldr	r3, [pc, #64]	; (8010bb0 <tcp_timewait_input+0xe0>)
 8010b70:	881b      	ldrh	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00c      	beq.n	8010b90 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8b5b      	ldrh	r3, [r3, #26]
 8010b7a:	f043 0302 	orr.w	r3, r3, #2
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f002 fcfd 	bl	8013584 <tcp_output>
  }
  return;
 8010b8a:	e001      	b.n	8010b90 <tcp_timewait_input+0xc0>
    return;
 8010b8c:	bf00      	nop
 8010b8e:	e000      	b.n	8010b92 <tcp_timewait_input+0xc2>
  return;
 8010b90:	bf00      	nop
}
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	2000cf60 	.word	0x2000cf60
 8010b9c:	0801bf40 	.word	0x0801bf40
 8010ba0:	0801c158 	.word	0x0801c158
 8010ba4:	0801bf8c 	.word	0x0801bf8c
 8010ba8:	2000cf54 	.word	0x2000cf54
 8010bac:	2000cf58 	.word	0x2000cf58
 8010bb0:	2000cf5e 	.word	0x2000cf5e
 8010bb4:	2000cf44 	.word	0x2000cf44
 8010bb8:	200097b8 	.word	0x200097b8
 8010bbc:	200097bc 	.word	0x200097bc
 8010bc0:	2000cf1c 	.word	0x2000cf1c

08010bc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010bc4:	b590      	push	{r4, r7, lr}
 8010bc6:	b08d      	sub	sp, #52	; 0x34
 8010bc8:	af04      	add	r7, sp, #16
 8010bca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d106      	bne.n	8010be8 <tcp_process+0x24>
 8010bda:	4b9d      	ldr	r3, [pc, #628]	; (8010e50 <tcp_process+0x28c>)
 8010bdc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010be0:	499c      	ldr	r1, [pc, #624]	; (8010e54 <tcp_process+0x290>)
 8010be2:	489d      	ldr	r0, [pc, #628]	; (8010e58 <tcp_process+0x294>)
 8010be4:	f008 fee6 	bl	80199b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010be8:	4b9c      	ldr	r3, [pc, #624]	; (8010e5c <tcp_process+0x298>)
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	f003 0304 	and.w	r3, r3, #4
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d04e      	beq.n	8010c92 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	7d1b      	ldrb	r3, [r3, #20]
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	d108      	bne.n	8010c0e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c00:	4b97      	ldr	r3, [pc, #604]	; (8010e60 <tcp_process+0x29c>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d123      	bne.n	8010c50 <tcp_process+0x8c>
        acceptable = 1;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	76fb      	strb	r3, [r7, #27]
 8010c0c:	e020      	b.n	8010c50 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c12:	4b94      	ldr	r3, [pc, #592]	; (8010e64 <tcp_process+0x2a0>)
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d102      	bne.n	8010c20 <tcp_process+0x5c>
        acceptable = 1;
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	76fb      	strb	r3, [r7, #27]
 8010c1e:	e017      	b.n	8010c50 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010c20:	4b90      	ldr	r3, [pc, #576]	; (8010e64 <tcp_process+0x2a0>)
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	db10      	blt.n	8010c50 <tcp_process+0x8c>
 8010c2e:	4b8d      	ldr	r3, [pc, #564]	; (8010e64 <tcp_process+0x2a0>)
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c36:	6879      	ldr	r1, [r7, #4]
 8010c38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c3a:	440b      	add	r3, r1
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dc06      	bgt.n	8010c50 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8b5b      	ldrh	r3, [r3, #26]
 8010c46:	f043 0302 	orr.w	r3, r3, #2
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010c50:	7efb      	ldrb	r3, [r7, #27]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d01b      	beq.n	8010c8e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	7d1b      	ldrb	r3, [r3, #20]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d106      	bne.n	8010c6c <tcp_process+0xa8>
 8010c5e:	4b7c      	ldr	r3, [pc, #496]	; (8010e50 <tcp_process+0x28c>)
 8010c60:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010c64:	4980      	ldr	r1, [pc, #512]	; (8010e68 <tcp_process+0x2a4>)
 8010c66:	487c      	ldr	r0, [pc, #496]	; (8010e58 <tcp_process+0x294>)
 8010c68:	f008 fea4 	bl	80199b4 <iprintf>
      recv_flags |= TF_RESET;
 8010c6c:	4b7f      	ldr	r3, [pc, #508]	; (8010e6c <tcp_process+0x2a8>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	f043 0308 	orr.w	r3, r3, #8
 8010c74:	b2da      	uxtb	r2, r3
 8010c76:	4b7d      	ldr	r3, [pc, #500]	; (8010e6c <tcp_process+0x2a8>)
 8010c78:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	8b5b      	ldrh	r3, [r3, #26]
 8010c7e:	f023 0301 	bic.w	r3, r3, #1
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c88:	f06f 030d 	mvn.w	r3, #13
 8010c8c:	e37a      	b.n	8011384 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	e378      	b.n	8011384 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c92:	4b72      	ldr	r3, [pc, #456]	; (8010e5c <tcp_process+0x298>)
 8010c94:	781b      	ldrb	r3, [r3, #0]
 8010c96:	f003 0302 	and.w	r3, r3, #2
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d010      	beq.n	8010cc0 <tcp_process+0xfc>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	7d1b      	ldrb	r3, [r3, #20]
 8010ca2:	2b02      	cmp	r3, #2
 8010ca4:	d00c      	beq.n	8010cc0 <tcp_process+0xfc>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	d008      	beq.n	8010cc0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	8b5b      	ldrh	r3, [r3, #26]
 8010cb2:	f043 0302 	orr.w	r3, r3, #2
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e361      	b.n	8011384 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	8b5b      	ldrh	r3, [r3, #26]
 8010cc4:	f003 0310 	and.w	r3, r3, #16
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d103      	bne.n	8010cd4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010ccc:	4b68      	ldr	r3, [pc, #416]	; (8010e70 <tcp_process+0x2ac>)
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f001 fc2f 	bl	8012548 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	7d1b      	ldrb	r3, [r3, #20]
 8010cee:	3b02      	subs	r3, #2
 8010cf0:	2b07      	cmp	r3, #7
 8010cf2:	f200 8337 	bhi.w	8011364 <tcp_process+0x7a0>
 8010cf6:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <tcp_process+0x138>)
 8010cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfc:	08010d1d 	.word	0x08010d1d
 8010d00:	08010f4d 	.word	0x08010f4d
 8010d04:	080110c5 	.word	0x080110c5
 8010d08:	080110ef 	.word	0x080110ef
 8010d0c:	08011213 	.word	0x08011213
 8010d10:	080110c5 	.word	0x080110c5
 8010d14:	0801129f 	.word	0x0801129f
 8010d18:	0801132f 	.word	0x0801132f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010d1c:	4b4f      	ldr	r3, [pc, #316]	; (8010e5c <tcp_process+0x298>)
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	f003 0310 	and.w	r3, r3, #16
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f000 80e4 	beq.w	8010ef2 <tcp_process+0x32e>
 8010d2a:	4b4c      	ldr	r3, [pc, #304]	; (8010e5c <tcp_process+0x298>)
 8010d2c:	781b      	ldrb	r3, [r3, #0]
 8010d2e:	f003 0302 	and.w	r3, r3, #2
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	f000 80dd 	beq.w	8010ef2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3c:	1c5a      	adds	r2, r3, #1
 8010d3e:	4b48      	ldr	r3, [pc, #288]	; (8010e60 <tcp_process+0x29c>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	f040 80d5 	bne.w	8010ef2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010d48:	4b46      	ldr	r3, [pc, #280]	; (8010e64 <tcp_process+0x2a0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	1c5a      	adds	r2, r3, #1
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010d5a:	4b41      	ldr	r3, [pc, #260]	; (8010e60 <tcp_process+0x29c>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010d62:	4b44      	ldr	r3, [pc, #272]	; (8010e74 <tcp_process+0x2b0>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	89db      	ldrh	r3, [r3, #14]
 8010d68:	b29a      	uxth	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010d7c:	4b39      	ldr	r3, [pc, #228]	; (8010e64 <tcp_process+0x2a0>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	1e5a      	subs	r2, r3, #1
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2204      	movs	r2, #4
 8010d8a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	3304      	adds	r3, #4
 8010d94:	4618      	mov	r0, r3
 8010d96:	f007 f913 	bl	8017fc0 <ip4_route>
 8010d9a:	4601      	mov	r1, r0
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	3304      	adds	r3, #4
 8010da0:	461a      	mov	r2, r3
 8010da2:	4620      	mov	r0, r4
 8010da4:	f7ff f88c 	bl	800fec0 <tcp_eff_send_mss_netif>
 8010da8:	4603      	mov	r3, r0
 8010daa:	461a      	mov	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010db4:	009a      	lsls	r2, r3, #2
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dba:	005b      	lsls	r3, r3, #1
 8010dbc:	f241 111c 	movw	r1, #4380	; 0x111c
 8010dc0:	428b      	cmp	r3, r1
 8010dc2:	bf38      	it	cc
 8010dc4:	460b      	movcc	r3, r1
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d204      	bcs.n	8010dd4 <tcp_process+0x210>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	e00d      	b.n	8010df0 <tcp_process+0x22c>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	f241 121c 	movw	r2, #4380	; 0x111c
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d904      	bls.n	8010dec <tcp_process+0x228>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	e001      	b.n	8010df0 <tcp_process+0x22c>
 8010dec:	f241 131c 	movw	r3, #4380	; 0x111c
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d106      	bne.n	8010e0e <tcp_process+0x24a>
 8010e00:	4b13      	ldr	r3, [pc, #76]	; (8010e50 <tcp_process+0x28c>)
 8010e02:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010e06:	491c      	ldr	r1, [pc, #112]	; (8010e78 <tcp_process+0x2b4>)
 8010e08:	4813      	ldr	r0, [pc, #76]	; (8010e58 <tcp_process+0x294>)
 8010e0a:	f008 fdd3 	bl	80199b4 <iprintf>
        --pcb->snd_queuelen;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e14:	3b01      	subs	r3, #1
 8010e16:	b29a      	uxth	r2, r3
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e22:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d12a      	bne.n	8010e80 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e2e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d106      	bne.n	8010e44 <tcp_process+0x280>
 8010e36:	4b06      	ldr	r3, [pc, #24]	; (8010e50 <tcp_process+0x28c>)
 8010e38:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010e3c:	490f      	ldr	r1, [pc, #60]	; (8010e7c <tcp_process+0x2b8>)
 8010e3e:	4806      	ldr	r0, [pc, #24]	; (8010e58 <tcp_process+0x294>)
 8010e40:	f008 fdb8 	bl	80199b4 <iprintf>
          pcb->unsent = rseg->next;
 8010e44:	69fb      	ldr	r3, [r7, #28]
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e4c:	e01c      	b.n	8010e88 <tcp_process+0x2c4>
 8010e4e:	bf00      	nop
 8010e50:	0801bf40 	.word	0x0801bf40
 8010e54:	0801c178 	.word	0x0801c178
 8010e58:	0801bf8c 	.word	0x0801bf8c
 8010e5c:	2000cf60 	.word	0x2000cf60
 8010e60:	2000cf58 	.word	0x2000cf58
 8010e64:	2000cf54 	.word	0x2000cf54
 8010e68:	0801c194 	.word	0x0801c194
 8010e6c:	2000cf61 	.word	0x2000cf61
 8010e70:	2000cf1c 	.word	0x2000cf1c
 8010e74:	2000cf44 	.word	0x2000cf44
 8010e78:	0801c1b4 	.word	0x0801c1b4
 8010e7c:	0801c1cc 	.word	0x0801c1cc
        } else {
          pcb->unacked = rseg->next;
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010e88:	69f8      	ldr	r0, [r7, #28]
 8010e8a:	f7fe fc36 	bl	800f6fa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d104      	bne.n	8010ea0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e9c:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e9e:	e006      	b.n	8010eae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00a      	beq.n	8010ece <tcp_process+0x30a>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	6910      	ldr	r0, [r2, #16]
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	4798      	blx	r3
 8010ec8:	4603      	mov	r3, r0
 8010eca:	76bb      	strb	r3, [r7, #26]
 8010ecc:	e001      	b.n	8010ed2 <tcp_process+0x30e>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010ed2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ed6:	f113 0f0d 	cmn.w	r3, #13
 8010eda:	d102      	bne.n	8010ee2 <tcp_process+0x31e>
          return ERR_ABRT;
 8010edc:	f06f 030c 	mvn.w	r3, #12
 8010ee0:	e250      	b.n	8011384 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	8b5b      	ldrh	r3, [r3, #26]
 8010ee6:	f043 0302 	orr.w	r3, r3, #2
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010ef0:	e23a      	b.n	8011368 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010ef2:	4b98      	ldr	r3, [pc, #608]	; (8011154 <tcp_process+0x590>)
 8010ef4:	781b      	ldrb	r3, [r3, #0]
 8010ef6:	f003 0310 	and.w	r3, r3, #16
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	f000 8234 	beq.w	8011368 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f00:	4b95      	ldr	r3, [pc, #596]	; (8011158 <tcp_process+0x594>)
 8010f02:	6819      	ldr	r1, [r3, #0]
 8010f04:	4b95      	ldr	r3, [pc, #596]	; (801115c <tcp_process+0x598>)
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	461a      	mov	r2, r3
 8010f0a:	4b95      	ldr	r3, [pc, #596]	; (8011160 <tcp_process+0x59c>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f10:	4b94      	ldr	r3, [pc, #592]	; (8011164 <tcp_process+0x5a0>)
 8010f12:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f14:	885b      	ldrh	r3, [r3, #2]
 8010f16:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f18:	4a92      	ldr	r2, [pc, #584]	; (8011164 <tcp_process+0x5a0>)
 8010f1a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f1c:	8812      	ldrh	r2, [r2, #0]
 8010f1e:	b292      	uxth	r2, r2
 8010f20:	9202      	str	r2, [sp, #8]
 8010f22:	9301      	str	r3, [sp, #4]
 8010f24:	4b90      	ldr	r3, [pc, #576]	; (8011168 <tcp_process+0x5a4>)
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	4b90      	ldr	r3, [pc, #576]	; (801116c <tcp_process+0x5a8>)
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f003 f8dd 	bl	80140ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f38:	2b05      	cmp	r3, #5
 8010f3a:	f200 8215 	bhi.w	8011368 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f002 fea9 	bl	8013c9c <tcp_rexmit_rto>
      break;
 8010f4a:	e20d      	b.n	8011368 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010f4c:	4b81      	ldr	r3, [pc, #516]	; (8011154 <tcp_process+0x590>)
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	f003 0310 	and.w	r3, r3, #16
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 80a1 	beq.w	801109c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f5a:	4b7f      	ldr	r3, [pc, #508]	; (8011158 <tcp_process+0x594>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f62:	1ad3      	subs	r3, r2, r3
 8010f64:	3b01      	subs	r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	db7e      	blt.n	8011068 <tcp_process+0x4a4>
 8010f6a:	4b7b      	ldr	r3, [pc, #492]	; (8011158 <tcp_process+0x594>)
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dc77      	bgt.n	8011068 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2204      	movs	r2, #4
 8010f7c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d102      	bne.n	8010f8c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010f86:	23fa      	movs	r3, #250	; 0xfa
 8010f88:	76bb      	strb	r3, [r7, #26]
 8010f8a:	e01d      	b.n	8010fc8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f90:	699b      	ldr	r3, [r3, #24]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <tcp_process+0x3e0>
 8010f96:	4b76      	ldr	r3, [pc, #472]	; (8011170 <tcp_process+0x5ac>)
 8010f98:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f9c:	4975      	ldr	r1, [pc, #468]	; (8011174 <tcp_process+0x5b0>)
 8010f9e:	4876      	ldr	r0, [pc, #472]	; (8011178 <tcp_process+0x5b4>)
 8010fa0:	f008 fd08 	bl	80199b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fa8:	699b      	ldr	r3, [r3, #24]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00a      	beq.n	8010fc4 <tcp_process+0x400>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fb2:	699b      	ldr	r3, [r3, #24]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	6910      	ldr	r0, [r2, #16]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	6879      	ldr	r1, [r7, #4]
 8010fbc:	4798      	blx	r3
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	76bb      	strb	r3, [r7, #26]
 8010fc2:	e001      	b.n	8010fc8 <tcp_process+0x404>
 8010fc4:	23f0      	movs	r3, #240	; 0xf0
 8010fc6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010fc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d00a      	beq.n	8010fe6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010fd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010fd4:	f113 0f0d 	cmn.w	r3, #13
 8010fd8:	d002      	beq.n	8010fe0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7fd fce8 	bl	800e9b0 <tcp_abort>
            }
            return ERR_ABRT;
 8010fe0:	f06f 030c 	mvn.w	r3, #12
 8010fe4:	e1ce      	b.n	8011384 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f000 fae0 	bl	80115ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010fec:	4b63      	ldr	r3, [pc, #396]	; (801117c <tcp_process+0x5b8>)
 8010fee:	881b      	ldrh	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d005      	beq.n	8011000 <tcp_process+0x43c>
            recv_acked--;
 8010ff4:	4b61      	ldr	r3, [pc, #388]	; (801117c <tcp_process+0x5b8>)
 8010ff6:	881b      	ldrh	r3, [r3, #0]
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	4b5f      	ldr	r3, [pc, #380]	; (801117c <tcp_process+0x5b8>)
 8010ffe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011004:	009a      	lsls	r2, r3, #2
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	f241 111c 	movw	r1, #4380	; 0x111c
 8011010:	428b      	cmp	r3, r1
 8011012:	bf38      	it	cc
 8011014:	460b      	movcc	r3, r1
 8011016:	429a      	cmp	r2, r3
 8011018:	d204      	bcs.n	8011024 <tcp_process+0x460>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	b29b      	uxth	r3, r3
 8011022:	e00d      	b.n	8011040 <tcp_process+0x47c>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	f241 121c 	movw	r2, #4380	; 0x111c
 801102e:	4293      	cmp	r3, r2
 8011030:	d904      	bls.n	801103c <tcp_process+0x478>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	b29b      	uxth	r3, r3
 801103a:	e001      	b.n	8011040 <tcp_process+0x47c>
 801103c:	f241 131c 	movw	r3, #4380	; 0x111c
 8011040:	687a      	ldr	r2, [r7, #4]
 8011042:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011046:	4b4e      	ldr	r3, [pc, #312]	; (8011180 <tcp_process+0x5bc>)
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	f003 0320 	and.w	r3, r3, #32
 801104e:	2b00      	cmp	r3, #0
 8011050:	d037      	beq.n	80110c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8b5b      	ldrh	r3, [r3, #26]
 8011056:	f043 0302 	orr.w	r3, r3, #2
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2207      	movs	r2, #7
 8011064:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011066:	e02c      	b.n	80110c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011068:	4b3b      	ldr	r3, [pc, #236]	; (8011158 <tcp_process+0x594>)
 801106a:	6819      	ldr	r1, [r3, #0]
 801106c:	4b3b      	ldr	r3, [pc, #236]	; (801115c <tcp_process+0x598>)
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	461a      	mov	r2, r3
 8011072:	4b3b      	ldr	r3, [pc, #236]	; (8011160 <tcp_process+0x59c>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011078:	4b3a      	ldr	r3, [pc, #232]	; (8011164 <tcp_process+0x5a0>)
 801107a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801107c:	885b      	ldrh	r3, [r3, #2]
 801107e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011080:	4a38      	ldr	r2, [pc, #224]	; (8011164 <tcp_process+0x5a0>)
 8011082:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011084:	8812      	ldrh	r2, [r2, #0]
 8011086:	b292      	uxth	r2, r2
 8011088:	9202      	str	r2, [sp, #8]
 801108a:	9301      	str	r3, [sp, #4]
 801108c:	4b36      	ldr	r3, [pc, #216]	; (8011168 <tcp_process+0x5a4>)
 801108e:	9300      	str	r3, [sp, #0]
 8011090:	4b36      	ldr	r3, [pc, #216]	; (801116c <tcp_process+0x5a8>)
 8011092:	4602      	mov	r2, r0
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f003 f829 	bl	80140ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801109a:	e167      	b.n	801136c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801109c:	4b2d      	ldr	r3, [pc, #180]	; (8011154 <tcp_process+0x590>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	f003 0302 	and.w	r3, r3, #2
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	f000 8161 	beq.w	801136c <tcp_process+0x7a8>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ae:	1e5a      	subs	r2, r3, #1
 80110b0:	4b2b      	ldr	r3, [pc, #172]	; (8011160 <tcp_process+0x59c>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	429a      	cmp	r2, r3
 80110b6:	f040 8159 	bne.w	801136c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f002 fe10 	bl	8013ce0 <tcp_rexmit>
      break;
 80110c0:	e154      	b.n	801136c <tcp_process+0x7a8>
 80110c2:	e153      	b.n	801136c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 fa71 	bl	80115ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80110ca:	4b2d      	ldr	r3, [pc, #180]	; (8011180 <tcp_process+0x5bc>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	f003 0320 	and.w	r3, r3, #32
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 814c 	beq.w	8011370 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	8b5b      	ldrh	r3, [r3, #26]
 80110dc:	f043 0302 	orr.w	r3, r3, #2
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2207      	movs	r2, #7
 80110ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110ec:	e140      	b.n	8011370 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 fa5c 	bl	80115ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80110f4:	4b22      	ldr	r3, [pc, #136]	; (8011180 <tcp_process+0x5bc>)
 80110f6:	781b      	ldrb	r3, [r3, #0]
 80110f8:	f003 0320 	and.w	r3, r3, #32
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d071      	beq.n	80111e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011100:	4b14      	ldr	r3, [pc, #80]	; (8011154 <tcp_process+0x590>)
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	f003 0310 	and.w	r3, r3, #16
 8011108:	2b00      	cmp	r3, #0
 801110a:	d060      	beq.n	80111ce <tcp_process+0x60a>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011110:	4b11      	ldr	r3, [pc, #68]	; (8011158 <tcp_process+0x594>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	429a      	cmp	r2, r3
 8011116:	d15a      	bne.n	80111ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801111c:	2b00      	cmp	r3, #0
 801111e:	d156      	bne.n	80111ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	8b5b      	ldrh	r3, [r3, #26]
 8011124:	f043 0302 	orr.w	r3, r3, #2
 8011128:	b29a      	uxth	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7fe fdbc 	bl	800fcac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011134:	4b13      	ldr	r3, [pc, #76]	; (8011184 <tcp_process+0x5c0>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	429a      	cmp	r2, r3
 801113c:	d105      	bne.n	801114a <tcp_process+0x586>
 801113e:	4b11      	ldr	r3, [pc, #68]	; (8011184 <tcp_process+0x5c0>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	4a0f      	ldr	r2, [pc, #60]	; (8011184 <tcp_process+0x5c0>)
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	e02e      	b.n	80111a8 <tcp_process+0x5e4>
 801114a:	4b0e      	ldr	r3, [pc, #56]	; (8011184 <tcp_process+0x5c0>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	617b      	str	r3, [r7, #20]
 8011150:	e027      	b.n	80111a2 <tcp_process+0x5de>
 8011152:	bf00      	nop
 8011154:	2000cf60 	.word	0x2000cf60
 8011158:	2000cf58 	.word	0x2000cf58
 801115c:	2000cf5e 	.word	0x2000cf5e
 8011160:	2000cf54 	.word	0x2000cf54
 8011164:	2000cf44 	.word	0x2000cf44
 8011168:	200097b8 	.word	0x200097b8
 801116c:	200097bc 	.word	0x200097bc
 8011170:	0801bf40 	.word	0x0801bf40
 8011174:	0801c1e0 	.word	0x0801c1e0
 8011178:	0801bf8c 	.word	0x0801bf8c
 801117c:	2000cf5c 	.word	0x2000cf5c
 8011180:	2000cf61 	.word	0x2000cf61
 8011184:	2000cf28 	.word	0x2000cf28
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	68db      	ldr	r3, [r3, #12]
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	429a      	cmp	r2, r3
 8011190:	d104      	bne.n	801119c <tcp_process+0x5d8>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	68da      	ldr	r2, [r3, #12]
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	60da      	str	r2, [r3, #12]
 801119a:	e005      	b.n	80111a8 <tcp_process+0x5e4>
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	617b      	str	r3, [r7, #20]
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1ef      	bne.n	8011188 <tcp_process+0x5c4>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2200      	movs	r2, #0
 80111ac:	60da      	str	r2, [r3, #12]
 80111ae:	4b77      	ldr	r3, [pc, #476]	; (801138c <tcp_process+0x7c8>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	220a      	movs	r2, #10
 80111b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80111ba:	4b75      	ldr	r3, [pc, #468]	; (8011390 <tcp_process+0x7cc>)
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	60da      	str	r2, [r3, #12]
 80111c2:	4a73      	ldr	r2, [pc, #460]	; (8011390 <tcp_process+0x7cc>)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6013      	str	r3, [r2, #0]
 80111c8:	f003 f952 	bl	8014470 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80111cc:	e0d2      	b.n	8011374 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8b5b      	ldrh	r3, [r3, #26]
 80111d2:	f043 0302 	orr.w	r3, r3, #2
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2208      	movs	r2, #8
 80111e0:	751a      	strb	r2, [r3, #20]
      break;
 80111e2:	e0c7      	b.n	8011374 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80111e4:	4b6b      	ldr	r3, [pc, #428]	; (8011394 <tcp_process+0x7d0>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f003 0310 	and.w	r3, r3, #16
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f000 80c1 	beq.w	8011374 <tcp_process+0x7b0>
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80111f6:	4b68      	ldr	r3, [pc, #416]	; (8011398 <tcp_process+0x7d4>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	f040 80ba 	bne.w	8011374 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011204:	2b00      	cmp	r3, #0
 8011206:	f040 80b5 	bne.w	8011374 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2206      	movs	r2, #6
 801120e:	751a      	strb	r2, [r3, #20]
      break;
 8011210:	e0b0      	b.n	8011374 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f9ca 	bl	80115ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011218:	4b60      	ldr	r3, [pc, #384]	; (801139c <tcp_process+0x7d8>)
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	f003 0320 	and.w	r3, r3, #32
 8011220:	2b00      	cmp	r3, #0
 8011222:	f000 80a9 	beq.w	8011378 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	8b5b      	ldrh	r3, [r3, #26]
 801122a:	f043 0302 	orr.w	r3, r3, #2
 801122e:	b29a      	uxth	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7fe fd39 	bl	800fcac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801123a:	4b59      	ldr	r3, [pc, #356]	; (80113a0 <tcp_process+0x7dc>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	429a      	cmp	r2, r3
 8011242:	d105      	bne.n	8011250 <tcp_process+0x68c>
 8011244:	4b56      	ldr	r3, [pc, #344]	; (80113a0 <tcp_process+0x7dc>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	68db      	ldr	r3, [r3, #12]
 801124a:	4a55      	ldr	r2, [pc, #340]	; (80113a0 <tcp_process+0x7dc>)
 801124c:	6013      	str	r3, [r2, #0]
 801124e:	e013      	b.n	8011278 <tcp_process+0x6b4>
 8011250:	4b53      	ldr	r3, [pc, #332]	; (80113a0 <tcp_process+0x7dc>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	613b      	str	r3, [r7, #16]
 8011256:	e00c      	b.n	8011272 <tcp_process+0x6ae>
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	687a      	ldr	r2, [r7, #4]
 801125e:	429a      	cmp	r2, r3
 8011260:	d104      	bne.n	801126c <tcp_process+0x6a8>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	68da      	ldr	r2, [r3, #12]
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	60da      	str	r2, [r3, #12]
 801126a:	e005      	b.n	8011278 <tcp_process+0x6b4>
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	68db      	ldr	r3, [r3, #12]
 8011270:	613b      	str	r3, [r7, #16]
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1ef      	bne.n	8011258 <tcp_process+0x694>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2200      	movs	r2, #0
 801127c:	60da      	str	r2, [r3, #12]
 801127e:	4b43      	ldr	r3, [pc, #268]	; (801138c <tcp_process+0x7c8>)
 8011280:	2201      	movs	r2, #1
 8011282:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	220a      	movs	r2, #10
 8011288:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801128a:	4b41      	ldr	r3, [pc, #260]	; (8011390 <tcp_process+0x7cc>)
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	60da      	str	r2, [r3, #12]
 8011292:	4a3f      	ldr	r2, [pc, #252]	; (8011390 <tcp_process+0x7cc>)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6013      	str	r3, [r2, #0]
 8011298:	f003 f8ea 	bl	8014470 <tcp_timer_needed>
      }
      break;
 801129c:	e06c      	b.n	8011378 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 f984 	bl	80115ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112a4:	4b3b      	ldr	r3, [pc, #236]	; (8011394 <tcp_process+0x7d0>)
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f003 0310 	and.w	r3, r3, #16
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d065      	beq.n	801137c <tcp_process+0x7b8>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112b4:	4b38      	ldr	r3, [pc, #224]	; (8011398 <tcp_process+0x7d4>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	429a      	cmp	r2, r3
 80112ba:	d15f      	bne.n	801137c <tcp_process+0x7b8>
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d15b      	bne.n	801137c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7fe fcf1 	bl	800fcac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80112ca:	4b35      	ldr	r3, [pc, #212]	; (80113a0 <tcp_process+0x7dc>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d105      	bne.n	80112e0 <tcp_process+0x71c>
 80112d4:	4b32      	ldr	r3, [pc, #200]	; (80113a0 <tcp_process+0x7dc>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	68db      	ldr	r3, [r3, #12]
 80112da:	4a31      	ldr	r2, [pc, #196]	; (80113a0 <tcp_process+0x7dc>)
 80112dc:	6013      	str	r3, [r2, #0]
 80112de:	e013      	b.n	8011308 <tcp_process+0x744>
 80112e0:	4b2f      	ldr	r3, [pc, #188]	; (80113a0 <tcp_process+0x7dc>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	60fb      	str	r3, [r7, #12]
 80112e6:	e00c      	b.n	8011302 <tcp_process+0x73e>
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d104      	bne.n	80112fc <tcp_process+0x738>
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	68da      	ldr	r2, [r3, #12]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	60da      	str	r2, [r3, #12]
 80112fa:	e005      	b.n	8011308 <tcp_process+0x744>
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	68db      	ldr	r3, [r3, #12]
 8011300:	60fb      	str	r3, [r7, #12]
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1ef      	bne.n	80112e8 <tcp_process+0x724>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	60da      	str	r2, [r3, #12]
 801130e:	4b1f      	ldr	r3, [pc, #124]	; (801138c <tcp_process+0x7c8>)
 8011310:	2201      	movs	r2, #1
 8011312:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	220a      	movs	r2, #10
 8011318:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801131a:	4b1d      	ldr	r3, [pc, #116]	; (8011390 <tcp_process+0x7cc>)
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	60da      	str	r2, [r3, #12]
 8011322:	4a1b      	ldr	r2, [pc, #108]	; (8011390 <tcp_process+0x7cc>)
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6013      	str	r3, [r2, #0]
 8011328:	f003 f8a2 	bl	8014470 <tcp_timer_needed>
      }
      break;
 801132c:	e026      	b.n	801137c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f93c 	bl	80115ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011334:	4b17      	ldr	r3, [pc, #92]	; (8011394 <tcp_process+0x7d0>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f003 0310 	and.w	r3, r3, #16
 801133c:	2b00      	cmp	r3, #0
 801133e:	d01f      	beq.n	8011380 <tcp_process+0x7bc>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011344:	4b14      	ldr	r3, [pc, #80]	; (8011398 <tcp_process+0x7d4>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	429a      	cmp	r2, r3
 801134a:	d119      	bne.n	8011380 <tcp_process+0x7bc>
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d115      	bne.n	8011380 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011354:	4b11      	ldr	r3, [pc, #68]	; (801139c <tcp_process+0x7d8>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f043 0310 	orr.w	r3, r3, #16
 801135c:	b2da      	uxtb	r2, r3
 801135e:	4b0f      	ldr	r3, [pc, #60]	; (801139c <tcp_process+0x7d8>)
 8011360:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011362:	e00d      	b.n	8011380 <tcp_process+0x7bc>
    default:
      break;
 8011364:	bf00      	nop
 8011366:	e00c      	b.n	8011382 <tcp_process+0x7be>
      break;
 8011368:	bf00      	nop
 801136a:	e00a      	b.n	8011382 <tcp_process+0x7be>
      break;
 801136c:	bf00      	nop
 801136e:	e008      	b.n	8011382 <tcp_process+0x7be>
      break;
 8011370:	bf00      	nop
 8011372:	e006      	b.n	8011382 <tcp_process+0x7be>
      break;
 8011374:	bf00      	nop
 8011376:	e004      	b.n	8011382 <tcp_process+0x7be>
      break;
 8011378:	bf00      	nop
 801137a:	e002      	b.n	8011382 <tcp_process+0x7be>
      break;
 801137c:	bf00      	nop
 801137e:	e000      	b.n	8011382 <tcp_process+0x7be>
      break;
 8011380:	bf00      	nop
  }
  return ERR_OK;
 8011382:	2300      	movs	r3, #0
}
 8011384:	4618      	mov	r0, r3
 8011386:	3724      	adds	r7, #36	; 0x24
 8011388:	46bd      	mov	sp, r7
 801138a:	bd90      	pop	{r4, r7, pc}
 801138c:	2000cf30 	.word	0x2000cf30
 8011390:	2000cf2c 	.word	0x2000cf2c
 8011394:	2000cf60 	.word	0x2000cf60
 8011398:	2000cf58 	.word	0x2000cf58
 801139c:	2000cf61 	.word	0x2000cf61
 80113a0:	2000cf28 	.word	0x2000cf28

080113a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80113a4:	b590      	push	{r4, r7, lr}
 80113a6:	b085      	sub	sp, #20
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
 80113ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d106      	bne.n	80113c2 <tcp_oos_insert_segment+0x1e>
 80113b4:	4b3b      	ldr	r3, [pc, #236]	; (80114a4 <tcp_oos_insert_segment+0x100>)
 80113b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80113ba:	493b      	ldr	r1, [pc, #236]	; (80114a8 <tcp_oos_insert_segment+0x104>)
 80113bc:	483b      	ldr	r0, [pc, #236]	; (80114ac <tcp_oos_insert_segment+0x108>)
 80113be:	f008 faf9 	bl	80199b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	899b      	ldrh	r3, [r3, #12]
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fb f8e4 	bl	800c598 <lwip_htons>
 80113d0:	4603      	mov	r3, r0
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	f003 0301 	and.w	r3, r3, #1
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d028      	beq.n	801142e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80113dc:	6838      	ldr	r0, [r7, #0]
 80113de:	f7fe f977 	bl	800f6d0 <tcp_segs_free>
    next = NULL;
 80113e2:	2300      	movs	r3, #0
 80113e4:	603b      	str	r3, [r7, #0]
 80113e6:	e056      	b.n	8011496 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	899b      	ldrh	r3, [r3, #12]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fb f8d1 	bl	800c598 <lwip_htons>
 80113f6:	4603      	mov	r3, r0
 80113f8:	b2db      	uxtb	r3, r3
 80113fa:	f003 0301 	and.w	r3, r3, #1
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d00d      	beq.n	801141e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	899b      	ldrh	r3, [r3, #12]
 8011408:	b29c      	uxth	r4, r3
 801140a:	2001      	movs	r0, #1
 801140c:	f7fb f8c4 	bl	800c598 <lwip_htons>
 8011410:	4603      	mov	r3, r0
 8011412:	461a      	mov	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	4322      	orrs	r2, r4
 801141a:	b292      	uxth	r2, r2
 801141c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011428:	68f8      	ldr	r0, [r7, #12]
 801142a:	f7fe f966 	bl	800f6fa <tcp_seg_free>
    while (next &&
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00e      	beq.n	8011452 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	891b      	ldrh	r3, [r3, #8]
 8011438:	461a      	mov	r2, r3
 801143a:	4b1d      	ldr	r3, [pc, #116]	; (80114b0 <tcp_oos_insert_segment+0x10c>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	441a      	add	r2, r3
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	68db      	ldr	r3, [r3, #12]
 8011444:	685b      	ldr	r3, [r3, #4]
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	8909      	ldrh	r1, [r1, #8]
 801144a:	440b      	add	r3, r1
 801144c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801144e:	2b00      	cmp	r3, #0
 8011450:	daca      	bge.n	80113e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d01e      	beq.n	8011496 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	891b      	ldrh	r3, [r3, #8]
 801145c:	461a      	mov	r2, r3
 801145e:	4b14      	ldr	r3, [pc, #80]	; (80114b0 <tcp_oos_insert_segment+0x10c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	441a      	add	r2, r3
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801146c:	2b00      	cmp	r3, #0
 801146e:	dd12      	ble.n	8011496 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	b29a      	uxth	r2, r3
 8011478:	4b0d      	ldr	r3, [pc, #52]	; (80114b0 <tcp_oos_insert_segment+0x10c>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	b29b      	uxth	r3, r3
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	b29a      	uxth	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	685a      	ldr	r2, [r3, #4]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	891b      	ldrh	r3, [r3, #8]
 801148e:	4619      	mov	r1, r3
 8011490:	4610      	mov	r0, r2
 8011492:	f7fc fb63 	bl	800db5c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	683a      	ldr	r2, [r7, #0]
 801149a:	601a      	str	r2, [r3, #0]
}
 801149c:	bf00      	nop
 801149e:	3714      	adds	r7, #20
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd90      	pop	{r4, r7, pc}
 80114a4:	0801bf40 	.word	0x0801bf40
 80114a8:	0801c200 	.word	0x0801c200
 80114ac:	0801bf8c 	.word	0x0801bf8c
 80114b0:	2000cf54 	.word	0x2000cf54

080114b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80114b4:	b5b0      	push	{r4, r5, r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
 80114c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80114c2:	e03e      	b.n	8011542 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fc fd56 	bl	800df84 <pbuf_clen>
 80114d8:	4603      	mov	r3, r0
 80114da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114e2:	8a7a      	ldrh	r2, [r7, #18]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d906      	bls.n	80114f6 <tcp_free_acked_segments+0x42>
 80114e8:	4b2a      	ldr	r3, [pc, #168]	; (8011594 <tcp_free_acked_segments+0xe0>)
 80114ea:	f240 4257 	movw	r2, #1111	; 0x457
 80114ee:	492a      	ldr	r1, [pc, #168]	; (8011598 <tcp_free_acked_segments+0xe4>)
 80114f0:	482a      	ldr	r0, [pc, #168]	; (801159c <tcp_free_acked_segments+0xe8>)
 80114f2:	f008 fa5f 	bl	80199b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80114fc:	8a7b      	ldrh	r3, [r7, #18]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	891a      	ldrh	r2, [r3, #8]
 801150c:	4b24      	ldr	r3, [pc, #144]	; (80115a0 <tcp_free_acked_segments+0xec>)
 801150e:	881b      	ldrh	r3, [r3, #0]
 8011510:	4413      	add	r3, r2
 8011512:	b29a      	uxth	r2, r3
 8011514:	4b22      	ldr	r3, [pc, #136]	; (80115a0 <tcp_free_acked_segments+0xec>)
 8011516:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011518:	6978      	ldr	r0, [r7, #20]
 801151a:	f7fe f8ee 	bl	800f6fa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00c      	beq.n	8011542 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d109      	bne.n	8011542 <tcp_free_acked_segments+0x8e>
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d106      	bne.n	8011542 <tcp_free_acked_segments+0x8e>
 8011534:	4b17      	ldr	r3, [pc, #92]	; (8011594 <tcp_free_acked_segments+0xe0>)
 8011536:	f240 4261 	movw	r2, #1121	; 0x461
 801153a:	491a      	ldr	r1, [pc, #104]	; (80115a4 <tcp_free_acked_segments+0xf0>)
 801153c:	4817      	ldr	r0, [pc, #92]	; (801159c <tcp_free_acked_segments+0xe8>)
 801153e:	f008 fa39 	bl	80199b4 <iprintf>
  while (seg_list != NULL &&
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d020      	beq.n	801158a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	4618      	mov	r0, r3
 8011550:	f7fb f837 	bl	800c5c2 <lwip_htonl>
 8011554:	4604      	mov	r4, r0
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	891b      	ldrh	r3, [r3, #8]
 801155a:	461d      	mov	r5, r3
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	899b      	ldrh	r3, [r3, #12]
 8011562:	b29b      	uxth	r3, r3
 8011564:	4618      	mov	r0, r3
 8011566:	f7fb f817 	bl	800c598 <lwip_htons>
 801156a:	4603      	mov	r3, r0
 801156c:	b2db      	uxtb	r3, r3
 801156e:	f003 0303 	and.w	r3, r3, #3
 8011572:	2b00      	cmp	r3, #0
 8011574:	d001      	beq.n	801157a <tcp_free_acked_segments+0xc6>
 8011576:	2301      	movs	r3, #1
 8011578:	e000      	b.n	801157c <tcp_free_acked_segments+0xc8>
 801157a:	2300      	movs	r3, #0
 801157c:	442b      	add	r3, r5
 801157e:	18e2      	adds	r2, r4, r3
 8011580:	4b09      	ldr	r3, [pc, #36]	; (80115a8 <tcp_free_acked_segments+0xf4>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011586:	2b00      	cmp	r3, #0
 8011588:	dd9c      	ble.n	80114c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801158a:	68bb      	ldr	r3, [r7, #8]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3718      	adds	r7, #24
 8011590:	46bd      	mov	sp, r7
 8011592:	bdb0      	pop	{r4, r5, r7, pc}
 8011594:	0801bf40 	.word	0x0801bf40
 8011598:	0801c228 	.word	0x0801c228
 801159c:	0801bf8c 	.word	0x0801bf8c
 80115a0:	2000cf5c 	.word	0x2000cf5c
 80115a4:	0801c250 	.word	0x0801c250
 80115a8:	2000cf58 	.word	0x2000cf58

080115ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80115ac:	b5b0      	push	{r4, r5, r7, lr}
 80115ae:	b094      	sub	sp, #80	; 0x50
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <tcp_receive+0x20>
 80115be:	4b91      	ldr	r3, [pc, #580]	; (8011804 <tcp_receive+0x258>)
 80115c0:	f240 427b 	movw	r2, #1147	; 0x47b
 80115c4:	4990      	ldr	r1, [pc, #576]	; (8011808 <tcp_receive+0x25c>)
 80115c6:	4891      	ldr	r0, [pc, #580]	; (801180c <tcp_receive+0x260>)
 80115c8:	f008 f9f4 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
 80115d0:	2b03      	cmp	r3, #3
 80115d2:	d806      	bhi.n	80115e2 <tcp_receive+0x36>
 80115d4:	4b8b      	ldr	r3, [pc, #556]	; (8011804 <tcp_receive+0x258>)
 80115d6:	f240 427c 	movw	r2, #1148	; 0x47c
 80115da:	498d      	ldr	r1, [pc, #564]	; (8011810 <tcp_receive+0x264>)
 80115dc:	488b      	ldr	r0, [pc, #556]	; (801180c <tcp_receive+0x260>)
 80115de:	f008 f9e9 	bl	80199b4 <iprintf>

  if (flags & TCP_ACK) {
 80115e2:	4b8c      	ldr	r3, [pc, #560]	; (8011814 <tcp_receive+0x268>)
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	f003 0310 	and.w	r3, r3, #16
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f000 8264 	beq.w	8011ab8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115f6:	461a      	mov	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115fc:	4413      	add	r3, r2
 80115fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011604:	4b84      	ldr	r3, [pc, #528]	; (8011818 <tcp_receive+0x26c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	2b00      	cmp	r3, #0
 801160c:	db1b      	blt.n	8011646 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011612:	4b81      	ldr	r3, [pc, #516]	; (8011818 <tcp_receive+0x26c>)
 8011614:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011616:	429a      	cmp	r2, r3
 8011618:	d106      	bne.n	8011628 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801161e:	4b7f      	ldr	r3, [pc, #508]	; (801181c <tcp_receive+0x270>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	1ad3      	subs	r3, r2, r3
 8011624:	2b00      	cmp	r3, #0
 8011626:	db0e      	blt.n	8011646 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801162c:	4b7b      	ldr	r3, [pc, #492]	; (801181c <tcp_receive+0x270>)
 801162e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011630:	429a      	cmp	r2, r3
 8011632:	d125      	bne.n	8011680 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011634:	4b7a      	ldr	r3, [pc, #488]	; (8011820 <tcp_receive+0x274>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	89db      	ldrh	r3, [r3, #14]
 801163a:	b29a      	uxth	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011642:	429a      	cmp	r2, r3
 8011644:	d91c      	bls.n	8011680 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011646:	4b76      	ldr	r3, [pc, #472]	; (8011820 <tcp_receive+0x274>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	89db      	ldrh	r3, [r3, #14]
 801164c:	b29a      	uxth	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011660:	429a      	cmp	r2, r3
 8011662:	d205      	bcs.n	8011670 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011670:	4b69      	ldr	r3, [pc, #420]	; (8011818 <tcp_receive+0x26c>)
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011678:	4b68      	ldr	r3, [pc, #416]	; (801181c <tcp_receive+0x270>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011680:	4b66      	ldr	r3, [pc, #408]	; (801181c <tcp_receive+0x270>)
 8011682:	681a      	ldr	r2, [r3, #0]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011688:	1ad3      	subs	r3, r2, r3
 801168a:	2b00      	cmp	r3, #0
 801168c:	dc58      	bgt.n	8011740 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801168e:	4b65      	ldr	r3, [pc, #404]	; (8011824 <tcp_receive+0x278>)
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d14b      	bne.n	801172e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80116a0:	4413      	add	r3, r2
 80116a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d142      	bne.n	801172e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	db3d      	blt.n	801172e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116b6:	4b59      	ldr	r3, [pc, #356]	; (801181c <tcp_receive+0x270>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d137      	bne.n	801172e <tcp_receive+0x182>
              found_dupack = 1;
 80116be:	2301      	movs	r3, #1
 80116c0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116c8:	2bff      	cmp	r3, #255	; 0xff
 80116ca:	d007      	beq.n	80116dc <tcp_receive+0x130>
                ++pcb->dupacks;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116d2:	3301      	adds	r3, #1
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	d91b      	bls.n	801171e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f0:	4413      	add	r3, r2
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d30a      	bcc.n	8011714 <tcp_receive+0x168>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011708:	4413      	add	r3, r2
 801170a:	b29a      	uxth	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011712:	e004      	b.n	801171e <tcp_receive+0x172>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801171a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011724:	2b02      	cmp	r3, #2
 8011726:	d902      	bls.n	801172e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f002 fb45 	bl	8013db8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801172e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011730:	2b00      	cmp	r3, #0
 8011732:	f040 8161 	bne.w	80119f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2200      	movs	r2, #0
 801173a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801173e:	e15b      	b.n	80119f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011740:	4b36      	ldr	r3, [pc, #216]	; (801181c <tcp_receive+0x270>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	3b01      	subs	r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	f2c0 814e 	blt.w	80119ee <tcp_receive+0x442>
 8011752:	4b32      	ldr	r3, [pc, #200]	; (801181c <tcp_receive+0x270>)
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801175a:	1ad3      	subs	r3, r2, r3
 801175c:	2b00      	cmp	r3, #0
 801175e:	f300 8146 	bgt.w	80119ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	8b5b      	ldrh	r3, [r3, #26]
 8011766:	f003 0304 	and.w	r3, r3, #4
 801176a:	2b00      	cmp	r3, #0
 801176c:	d010      	beq.n	8011790 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	8b5b      	ldrh	r3, [r3, #26]
 8011772:	f023 0304 	bic.w	r3, r3, #4
 8011776:	b29a      	uxth	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801179e:	10db      	asrs	r3, r3, #3
 80117a0:	b21b      	sxth	r3, r3
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	4413      	add	r3, r2
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	b21a      	sxth	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80117b8:	4b18      	ldr	r3, [pc, #96]	; (801181c <tcp_receive+0x270>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	b29a      	uxth	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	1ad3      	subs	r3, r2, r3
 80117c6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	2200      	movs	r2, #0
 80117cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80117d0:	4b12      	ldr	r3, [pc, #72]	; (801181c <tcp_receive+0x270>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	7d1b      	ldrb	r3, [r3, #20]
 80117dc:	2b03      	cmp	r3, #3
 80117de:	f240 8097 	bls.w	8011910 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d245      	bcs.n	801187e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	8b5b      	ldrh	r3, [r3, #26]
 80117f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d014      	beq.n	8011828 <tcp_receive+0x27c>
 80117fe:	2301      	movs	r3, #1
 8011800:	e013      	b.n	801182a <tcp_receive+0x27e>
 8011802:	bf00      	nop
 8011804:	0801bf40 	.word	0x0801bf40
 8011808:	0801c270 	.word	0x0801c270
 801180c:	0801bf8c 	.word	0x0801bf8c
 8011810:	0801c28c 	.word	0x0801c28c
 8011814:	2000cf60 	.word	0x2000cf60
 8011818:	2000cf54 	.word	0x2000cf54
 801181c:	2000cf58 	.word	0x2000cf58
 8011820:	2000cf44 	.word	0x2000cf44
 8011824:	2000cf5e 	.word	0x2000cf5e
 8011828:	2302      	movs	r3, #2
 801182a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801182e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011832:	b29a      	uxth	r2, r3
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011838:	fb12 f303 	smulbb	r3, r2, r3
 801183c:	b29b      	uxth	r3, r3
 801183e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011840:	4293      	cmp	r3, r2
 8011842:	bf28      	it	cs
 8011844:	4613      	movcs	r3, r2
 8011846:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801184e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011850:	4413      	add	r3, r2
 8011852:	b29a      	uxth	r2, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801185a:	429a      	cmp	r2, r3
 801185c:	d309      	bcc.n	8011872 <tcp_receive+0x2c6>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011866:	4413      	add	r3, r2
 8011868:	b29a      	uxth	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011870:	e04e      	b.n	8011910 <tcp_receive+0x364>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801187c:	e048      	b.n	8011910 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011884:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011886:	4413      	add	r3, r2
 8011888:	b29a      	uxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011890:	429a      	cmp	r2, r3
 8011892:	d309      	bcc.n	80118a8 <tcp_receive+0x2fc>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801189a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801189c:	4413      	add	r3, r2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80118a6:	e004      	b.n	80118b2 <tcp_receive+0x306>
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118be:	429a      	cmp	r2, r3
 80118c0:	d326      	bcc.n	8011910 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118ce:	1ad3      	subs	r3, r2, r3
 80118d0:	b29a      	uxth	r2, r3
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118e2:	4413      	add	r3, r2
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d30a      	bcc.n	8011906 <tcp_receive+0x35a>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118fa:	4413      	add	r3, r2
 80118fc:	b29a      	uxth	r2, r3
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011904:	e004      	b.n	8011910 <tcp_receive+0x364>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801190c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011918:	4a98      	ldr	r2, [pc, #608]	; (8011b7c <tcp_receive+0x5d0>)
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff fdca 	bl	80114b4 <tcp_free_acked_segments>
 8011920:	4602      	mov	r2, r0
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801192e:	4a94      	ldr	r2, [pc, #592]	; (8011b80 <tcp_receive+0x5d4>)
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff fdbf 	bl	80114b4 <tcp_free_acked_segments>
 8011936:	4602      	mov	r2, r0
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011940:	2b00      	cmp	r3, #0
 8011942:	d104      	bne.n	801194e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801194a:	861a      	strh	r2, [r3, #48]	; 0x30
 801194c:	e002      	b.n	8011954 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2200      	movs	r2, #0
 8011952:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	2200      	movs	r2, #0
 8011958:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d103      	bne.n	801196a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2200      	movs	r2, #0
 8011966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011970:	4b84      	ldr	r3, [pc, #528]	; (8011b84 <tcp_receive+0x5d8>)
 8011972:	881b      	ldrh	r3, [r3, #0]
 8011974:	4413      	add	r3, r2
 8011976:	b29a      	uxth	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	8b5b      	ldrh	r3, [r3, #26]
 8011982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011986:	2b00      	cmp	r3, #0
 8011988:	d035      	beq.n	80119f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801198e:	2b00      	cmp	r3, #0
 8011990:	d118      	bne.n	80119c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00c      	beq.n	80119b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119a2:	68db      	ldr	r3, [r3, #12]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fa fe0b 	bl	800c5c2 <lwip_htonl>
 80119ac:	4603      	mov	r3, r0
 80119ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	dc20      	bgt.n	80119f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	8b5b      	ldrh	r3, [r3, #26]
 80119b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119bc:	b29a      	uxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119c2:	e018      	b.n	80119f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119cc:	68db      	ldr	r3, [r3, #12]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7fa fdf6 	bl	800c5c2 <lwip_htonl>
 80119d6:	4603      	mov	r3, r0
 80119d8:	1ae3      	subs	r3, r4, r3
 80119da:	2b00      	cmp	r3, #0
 80119dc:	dc0b      	bgt.n	80119f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	8b5b      	ldrh	r3, [r3, #26]
 80119e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80119e6:	b29a      	uxth	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119ec:	e003      	b.n	80119f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f002 fbce 	bl	8014190 <tcp_send_empty_ack>
 80119f4:	e000      	b.n	80119f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d05b      	beq.n	8011ab8 <tcp_receive+0x50c>
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a04:	4b60      	ldr	r3, [pc, #384]	; (8011b88 <tcp_receive+0x5dc>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	1ad3      	subs	r3, r2, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	da54      	bge.n	8011ab8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011a0e:	4b5f      	ldr	r3, [pc, #380]	; (8011b8c <tcp_receive+0x5e0>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	1ad3      	subs	r3, r2, r3
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011a22:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a2c:	10db      	asrs	r3, r3, #3
 8011a2e:	b21b      	sxth	r3, r3
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a46:	4413      	add	r3, r2
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	b21a      	sxth	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011a50:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	da05      	bge.n	8011a64 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011a58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a5c:	425b      	negs	r3, r3
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011a64:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a6e:	109b      	asrs	r3, r3, #2
 8011a70:	b21b      	sxth	r3, r3
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	1ad3      	subs	r3, r2, r3
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a82:	b29a      	uxth	r2, r3
 8011a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011a88:	4413      	add	r3, r2
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	b21a      	sxth	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a98:	10db      	asrs	r3, r3, #3
 8011a9a:	b21b      	sxth	r3, r3
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	4413      	add	r3, r2
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	b21a      	sxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011ab8:	4b35      	ldr	r3, [pc, #212]	; (8011b90 <tcp_receive+0x5e4>)
 8011aba:	881b      	ldrh	r3, [r3, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f000 84e2 	beq.w	8012486 <tcp_receive+0xeda>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	7d1b      	ldrb	r3, [r3, #20]
 8011ac6:	2b06      	cmp	r3, #6
 8011ac8:	f200 84dd 	bhi.w	8012486 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ad0:	4b30      	ldr	r3, [pc, #192]	; (8011b94 <tcp_receive+0x5e8>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f2c0 808f 	blt.w	8011bfc <tcp_receive+0x650>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ae2:	4b2b      	ldr	r3, [pc, #172]	; (8011b90 <tcp_receive+0x5e4>)
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	4619      	mov	r1, r3
 8011ae8:	4b2a      	ldr	r3, [pc, #168]	; (8011b94 <tcp_receive+0x5e8>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	440b      	add	r3, r1
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	3301      	adds	r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f300 8082 	bgt.w	8011bfc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011af8:	4b27      	ldr	r3, [pc, #156]	; (8011b98 <tcp_receive+0x5ec>)
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b02:	4b24      	ldr	r3, [pc, #144]	; (8011b94 <tcp_receive+0x5e8>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	1ad3      	subs	r3, r2, r3
 8011b08:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011b0a:	4b23      	ldr	r3, [pc, #140]	; (8011b98 <tcp_receive+0x5ec>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d106      	bne.n	8011b20 <tcp_receive+0x574>
 8011b12:	4b22      	ldr	r3, [pc, #136]	; (8011b9c <tcp_receive+0x5f0>)
 8011b14:	f240 5294 	movw	r2, #1428	; 0x594
 8011b18:	4921      	ldr	r1, [pc, #132]	; (8011ba0 <tcp_receive+0x5f4>)
 8011b1a:	4822      	ldr	r0, [pc, #136]	; (8011ba4 <tcp_receive+0x5f8>)
 8011b1c:	f007 ff4a 	bl	80199b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d906      	bls.n	8011b38 <tcp_receive+0x58c>
 8011b2a:	4b1c      	ldr	r3, [pc, #112]	; (8011b9c <tcp_receive+0x5f0>)
 8011b2c:	f240 5295 	movw	r2, #1429	; 0x595
 8011b30:	491d      	ldr	r1, [pc, #116]	; (8011ba8 <tcp_receive+0x5fc>)
 8011b32:	481c      	ldr	r0, [pc, #112]	; (8011ba4 <tcp_receive+0x5f8>)
 8011b34:	f007 ff3e 	bl	80199b4 <iprintf>
      off = (u16_t)off32;
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011b3e:	4b16      	ldr	r3, [pc, #88]	; (8011b98 <tcp_receive+0x5ec>)
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	891b      	ldrh	r3, [r3, #8]
 8011b44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	d906      	bls.n	8011b5a <tcp_receive+0x5ae>
 8011b4c:	4b13      	ldr	r3, [pc, #76]	; (8011b9c <tcp_receive+0x5f0>)
 8011b4e:	f240 5297 	movw	r2, #1431	; 0x597
 8011b52:	4916      	ldr	r1, [pc, #88]	; (8011bac <tcp_receive+0x600>)
 8011b54:	4813      	ldr	r0, [pc, #76]	; (8011ba4 <tcp_receive+0x5f8>)
 8011b56:	f007 ff2d 	bl	80199b4 <iprintf>
      inseg.len -= off;
 8011b5a:	4b0f      	ldr	r3, [pc, #60]	; (8011b98 <tcp_receive+0x5ec>)
 8011b5c:	891a      	ldrh	r2, [r3, #8]
 8011b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b62:	1ad3      	subs	r3, r2, r3
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	4b0c      	ldr	r3, [pc, #48]	; (8011b98 <tcp_receive+0x5ec>)
 8011b68:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011b6a:	4b0b      	ldr	r3, [pc, #44]	; (8011b98 <tcp_receive+0x5ec>)
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	891a      	ldrh	r2, [r3, #8]
 8011b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b74:	1ad3      	subs	r3, r2, r3
 8011b76:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011b78:	e02a      	b.n	8011bd0 <tcp_receive+0x624>
 8011b7a:	bf00      	nop
 8011b7c:	0801c2a8 	.word	0x0801c2a8
 8011b80:	0801c2b0 	.word	0x0801c2b0
 8011b84:	2000cf5c 	.word	0x2000cf5c
 8011b88:	2000cf58 	.word	0x2000cf58
 8011b8c:	2000cf1c 	.word	0x2000cf1c
 8011b90:	2000cf5e 	.word	0x2000cf5e
 8011b94:	2000cf54 	.word	0x2000cf54
 8011b98:	2000cf34 	.word	0x2000cf34
 8011b9c:	0801bf40 	.word	0x0801bf40
 8011ba0:	0801c2b8 	.word	0x0801c2b8
 8011ba4:	0801bf8c 	.word	0x0801bf8c
 8011ba8:	0801c2c8 	.word	0x0801c2c8
 8011bac:	0801c2d8 	.word	0x0801c2d8
        off -= p->len;
 8011bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bb2:	895b      	ldrh	r3, [r3, #10]
 8011bb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bb8:	1ad3      	subs	r3, r2, r3
 8011bba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011bc2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bd2:	895b      	ldrh	r3, [r3, #10]
 8011bd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d8e9      	bhi.n	8011bb0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011bdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011be0:	4619      	mov	r1, r3
 8011be2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011be4:	f7fc f8ba 	bl	800dd5c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bec:	4a91      	ldr	r2, [pc, #580]	; (8011e34 <tcp_receive+0x888>)
 8011bee:	6013      	str	r3, [r2, #0]
 8011bf0:	4b91      	ldr	r3, [pc, #580]	; (8011e38 <tcp_receive+0x88c>)
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	4a8f      	ldr	r2, [pc, #572]	; (8011e34 <tcp_receive+0x888>)
 8011bf6:	6812      	ldr	r2, [r2, #0]
 8011bf8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011bfa:	e00d      	b.n	8011c18 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011bfc:	4b8d      	ldr	r3, [pc, #564]	; (8011e34 <tcp_receive+0x888>)
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c04:	1ad3      	subs	r3, r2, r3
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	da06      	bge.n	8011c18 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	8b5b      	ldrh	r3, [r3, #26]
 8011c0e:	f043 0302 	orr.w	r3, r3, #2
 8011c12:	b29a      	uxth	r2, r3
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011c18:	4b86      	ldr	r3, [pc, #536]	; (8011e34 <tcp_receive+0x888>)
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c20:	1ad3      	subs	r3, r2, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	f2c0 842a 	blt.w	801247c <tcp_receive+0xed0>
 8011c28:	4b82      	ldr	r3, [pc, #520]	; (8011e34 <tcp_receive+0x888>)
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c30:	6879      	ldr	r1, [r7, #4]
 8011c32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c34:	440b      	add	r3, r1
 8011c36:	1ad3      	subs	r3, r2, r3
 8011c38:	3301      	adds	r3, #1
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f300 841e 	bgt.w	801247c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c44:	4b7b      	ldr	r3, [pc, #492]	; (8011e34 <tcp_receive+0x888>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	f040 829a 	bne.w	8012182 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011c4e:	4b7a      	ldr	r3, [pc, #488]	; (8011e38 <tcp_receive+0x88c>)
 8011c50:	891c      	ldrh	r4, [r3, #8]
 8011c52:	4b79      	ldr	r3, [pc, #484]	; (8011e38 <tcp_receive+0x88c>)
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	899b      	ldrh	r3, [r3, #12]
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7fa fc9c 	bl	800c598 <lwip_htons>
 8011c60:	4603      	mov	r3, r0
 8011c62:	b2db      	uxtb	r3, r3
 8011c64:	f003 0303 	and.w	r3, r3, #3
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d001      	beq.n	8011c70 <tcp_receive+0x6c4>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	e000      	b.n	8011c72 <tcp_receive+0x6c6>
 8011c70:	2300      	movs	r3, #0
 8011c72:	4423      	add	r3, r4
 8011c74:	b29a      	uxth	r2, r3
 8011c76:	4b71      	ldr	r3, [pc, #452]	; (8011e3c <tcp_receive+0x890>)
 8011c78:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c7e:	4b6f      	ldr	r3, [pc, #444]	; (8011e3c <tcp_receive+0x890>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d275      	bcs.n	8011d72 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c86:	4b6c      	ldr	r3, [pc, #432]	; (8011e38 <tcp_receive+0x88c>)
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	899b      	ldrh	r3, [r3, #12]
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fa fc82 	bl	800c598 <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	f003 0301 	and.w	r3, r3, #1
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d01f      	beq.n	8011ce0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ca0:	4b65      	ldr	r3, [pc, #404]	; (8011e38 <tcp_receive+0x88c>)
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	899b      	ldrh	r3, [r3, #12]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	b21b      	sxth	r3, r3
 8011caa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011cae:	b21c      	sxth	r4, r3
 8011cb0:	4b61      	ldr	r3, [pc, #388]	; (8011e38 <tcp_receive+0x88c>)
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	899b      	ldrh	r3, [r3, #12]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7fa fc6d 	bl	800c598 <lwip_htons>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7fa fc64 	bl	800c598 <lwip_htons>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	b21b      	sxth	r3, r3
 8011cd4:	4323      	orrs	r3, r4
 8011cd6:	b21a      	sxth	r2, r3
 8011cd8:	4b57      	ldr	r3, [pc, #348]	; (8011e38 <tcp_receive+0x88c>)
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	b292      	uxth	r2, r2
 8011cde:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ce4:	4b54      	ldr	r3, [pc, #336]	; (8011e38 <tcp_receive+0x88c>)
 8011ce6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ce8:	4b53      	ldr	r3, [pc, #332]	; (8011e38 <tcp_receive+0x88c>)
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	899b      	ldrh	r3, [r3, #12]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fa fc51 	bl	800c598 <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	f003 0302 	and.w	r3, r3, #2
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d005      	beq.n	8011d0e <tcp_receive+0x762>
            inseg.len -= 1;
 8011d02:	4b4d      	ldr	r3, [pc, #308]	; (8011e38 <tcp_receive+0x88c>)
 8011d04:	891b      	ldrh	r3, [r3, #8]
 8011d06:	3b01      	subs	r3, #1
 8011d08:	b29a      	uxth	r2, r3
 8011d0a:	4b4b      	ldr	r3, [pc, #300]	; (8011e38 <tcp_receive+0x88c>)
 8011d0c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011d0e:	4b4a      	ldr	r3, [pc, #296]	; (8011e38 <tcp_receive+0x88c>)
 8011d10:	685b      	ldr	r3, [r3, #4]
 8011d12:	4a49      	ldr	r2, [pc, #292]	; (8011e38 <tcp_receive+0x88c>)
 8011d14:	8912      	ldrh	r2, [r2, #8]
 8011d16:	4611      	mov	r1, r2
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fb ff1f 	bl	800db5c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011d1e:	4b46      	ldr	r3, [pc, #280]	; (8011e38 <tcp_receive+0x88c>)
 8011d20:	891c      	ldrh	r4, [r3, #8]
 8011d22:	4b45      	ldr	r3, [pc, #276]	; (8011e38 <tcp_receive+0x88c>)
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	899b      	ldrh	r3, [r3, #12]
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fa fc34 	bl	800c598 <lwip_htons>
 8011d30:	4603      	mov	r3, r0
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	f003 0303 	and.w	r3, r3, #3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <tcp_receive+0x794>
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e000      	b.n	8011d42 <tcp_receive+0x796>
 8011d40:	2300      	movs	r3, #0
 8011d42:	4423      	add	r3, r4
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	4b3d      	ldr	r3, [pc, #244]	; (8011e3c <tcp_receive+0x890>)
 8011d48:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d4a:	4b3c      	ldr	r3, [pc, #240]	; (8011e3c <tcp_receive+0x890>)
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	461a      	mov	r2, r3
 8011d50:	4b38      	ldr	r3, [pc, #224]	; (8011e34 <tcp_receive+0x888>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	441a      	add	r2, r3
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5a:	6879      	ldr	r1, [r7, #4]
 8011d5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d5e:	440b      	add	r3, r1
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d006      	beq.n	8011d72 <tcp_receive+0x7c6>
 8011d64:	4b36      	ldr	r3, [pc, #216]	; (8011e40 <tcp_receive+0x894>)
 8011d66:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011d6a:	4936      	ldr	r1, [pc, #216]	; (8011e44 <tcp_receive+0x898>)
 8011d6c:	4836      	ldr	r0, [pc, #216]	; (8011e48 <tcp_receive+0x89c>)
 8011d6e:	f007 fe21 	bl	80199b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 80e7 	beq.w	8011f4a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d7c:	4b2e      	ldr	r3, [pc, #184]	; (8011e38 <tcp_receive+0x88c>)
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	899b      	ldrh	r3, [r3, #12]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fa fc07 	bl	800c598 <lwip_htons>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d010      	beq.n	8011db8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d96:	e00a      	b.n	8011dae <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d9c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011da2:	681a      	ldr	r2, [r3, #0]
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f7fd fca6 	bl	800f6fa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d1f0      	bne.n	8011d98 <tcp_receive+0x7ec>
 8011db6:	e0c8      	b.n	8011f4a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011dbe:	e052      	b.n	8011e66 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	899b      	ldrh	r3, [r3, #12]
 8011dc6:	b29b      	uxth	r3, r3
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fa fbe5 	bl	800c598 <lwip_htons>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	b2db      	uxtb	r3, r3
 8011dd2:	f003 0301 	and.w	r3, r3, #1
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d03d      	beq.n	8011e56 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011dda:	4b17      	ldr	r3, [pc, #92]	; (8011e38 <tcp_receive+0x88c>)
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	899b      	ldrh	r3, [r3, #12]
 8011de0:	b29b      	uxth	r3, r3
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fa fbd8 	bl	800c598 <lwip_htons>
 8011de8:	4603      	mov	r3, r0
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d130      	bne.n	8011e56 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011df4:	4b10      	ldr	r3, [pc, #64]	; (8011e38 <tcp_receive+0x88c>)
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	899b      	ldrh	r3, [r3, #12]
 8011dfa:	b29c      	uxth	r4, r3
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	f7fa fbcb 	bl	800c598 <lwip_htons>
 8011e02:	4603      	mov	r3, r0
 8011e04:	461a      	mov	r2, r3
 8011e06:	4b0c      	ldr	r3, [pc, #48]	; (8011e38 <tcp_receive+0x88c>)
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	4322      	orrs	r2, r4
 8011e0c:	b292      	uxth	r2, r2
 8011e0e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011e10:	4b09      	ldr	r3, [pc, #36]	; (8011e38 <tcp_receive+0x88c>)
 8011e12:	891c      	ldrh	r4, [r3, #8]
 8011e14:	4b08      	ldr	r3, [pc, #32]	; (8011e38 <tcp_receive+0x88c>)
 8011e16:	68db      	ldr	r3, [r3, #12]
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7fa fbbb 	bl	800c598 <lwip_htons>
 8011e22:	4603      	mov	r3, r0
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	f003 0303 	and.w	r3, r3, #3
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00e      	beq.n	8011e4c <tcp_receive+0x8a0>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	e00d      	b.n	8011e4e <tcp_receive+0x8a2>
 8011e32:	bf00      	nop
 8011e34:	2000cf54 	.word	0x2000cf54
 8011e38:	2000cf34 	.word	0x2000cf34
 8011e3c:	2000cf5e 	.word	0x2000cf5e
 8011e40:	0801bf40 	.word	0x0801bf40
 8011e44:	0801c2e8 	.word	0x0801c2e8
 8011e48:	0801bf8c 	.word	0x0801bf8c
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	4423      	add	r3, r4
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	4b98      	ldr	r3, [pc, #608]	; (80120b4 <tcp_receive+0xb08>)
 8011e54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e58:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011e60:	6938      	ldr	r0, [r7, #16]
 8011e62:	f7fd fc4a 	bl	800f6fa <tcp_seg_free>
            while (next &&
 8011e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00e      	beq.n	8011e8a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011e6c:	4b91      	ldr	r3, [pc, #580]	; (80120b4 <tcp_receive+0xb08>)
 8011e6e:	881b      	ldrh	r3, [r3, #0]
 8011e70:	461a      	mov	r2, r3
 8011e72:	4b91      	ldr	r3, [pc, #580]	; (80120b8 <tcp_receive+0xb0c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	441a      	add	r2, r3
 8011e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e80:	8909      	ldrh	r1, [r1, #8]
 8011e82:	440b      	add	r3, r1
 8011e84:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	da9a      	bge.n	8011dc0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d059      	beq.n	8011f44 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011e90:	4b88      	ldr	r3, [pc, #544]	; (80120b4 <tcp_receive+0xb08>)
 8011e92:	881b      	ldrh	r3, [r3, #0]
 8011e94:	461a      	mov	r2, r3
 8011e96:	4b88      	ldr	r3, [pc, #544]	; (80120b8 <tcp_receive+0xb0c>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	441a      	add	r2, r3
 8011e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e9e:	68db      	ldr	r3, [r3, #12]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	dd4d      	ble.n	8011f44 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011eaa:	68db      	ldr	r3, [r3, #12]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	4b81      	ldr	r3, [pc, #516]	; (80120b8 <tcp_receive+0xb0c>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	1ad3      	subs	r3, r2, r3
 8011eb8:	b29a      	uxth	r2, r3
 8011eba:	4b80      	ldr	r3, [pc, #512]	; (80120bc <tcp_receive+0xb10>)
 8011ebc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ebe:	4b7f      	ldr	r3, [pc, #508]	; (80120bc <tcp_receive+0xb10>)
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	899b      	ldrh	r3, [r3, #12]
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	f7fa fb66 	bl	800c598 <lwip_htons>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d005      	beq.n	8011ee4 <tcp_receive+0x938>
                inseg.len -= 1;
 8011ed8:	4b78      	ldr	r3, [pc, #480]	; (80120bc <tcp_receive+0xb10>)
 8011eda:	891b      	ldrh	r3, [r3, #8]
 8011edc:	3b01      	subs	r3, #1
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	4b76      	ldr	r3, [pc, #472]	; (80120bc <tcp_receive+0xb10>)
 8011ee2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011ee4:	4b75      	ldr	r3, [pc, #468]	; (80120bc <tcp_receive+0xb10>)
 8011ee6:	685b      	ldr	r3, [r3, #4]
 8011ee8:	4a74      	ldr	r2, [pc, #464]	; (80120bc <tcp_receive+0xb10>)
 8011eea:	8912      	ldrh	r2, [r2, #8]
 8011eec:	4611      	mov	r1, r2
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fb fe34 	bl	800db5c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011ef4:	4b71      	ldr	r3, [pc, #452]	; (80120bc <tcp_receive+0xb10>)
 8011ef6:	891c      	ldrh	r4, [r3, #8]
 8011ef8:	4b70      	ldr	r3, [pc, #448]	; (80120bc <tcp_receive+0xb10>)
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	899b      	ldrh	r3, [r3, #12]
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fa fb49 	bl	800c598 <lwip_htons>
 8011f06:	4603      	mov	r3, r0
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	f003 0303 	and.w	r3, r3, #3
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d001      	beq.n	8011f16 <tcp_receive+0x96a>
 8011f12:	2301      	movs	r3, #1
 8011f14:	e000      	b.n	8011f18 <tcp_receive+0x96c>
 8011f16:	2300      	movs	r3, #0
 8011f18:	4423      	add	r3, r4
 8011f1a:	b29a      	uxth	r2, r3
 8011f1c:	4b65      	ldr	r3, [pc, #404]	; (80120b4 <tcp_receive+0xb08>)
 8011f1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011f20:	4b64      	ldr	r3, [pc, #400]	; (80120b4 <tcp_receive+0xb08>)
 8011f22:	881b      	ldrh	r3, [r3, #0]
 8011f24:	461a      	mov	r2, r3
 8011f26:	4b64      	ldr	r3, [pc, #400]	; (80120b8 <tcp_receive+0xb0c>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	441a      	add	r2, r3
 8011f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2e:	68db      	ldr	r3, [r3, #12]
 8011f30:	685b      	ldr	r3, [r3, #4]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d006      	beq.n	8011f44 <tcp_receive+0x998>
 8011f36:	4b62      	ldr	r3, [pc, #392]	; (80120c0 <tcp_receive+0xb14>)
 8011f38:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011f3c:	4961      	ldr	r1, [pc, #388]	; (80120c4 <tcp_receive+0xb18>)
 8011f3e:	4862      	ldr	r0, [pc, #392]	; (80120c8 <tcp_receive+0xb1c>)
 8011f40:	f007 fd38 	bl	80199b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011f48:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011f4a:	4b5a      	ldr	r3, [pc, #360]	; (80120b4 <tcp_receive+0xb08>)
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	4b59      	ldr	r3, [pc, #356]	; (80120b8 <tcp_receive+0xb0c>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	441a      	add	r2, r3
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f5e:	4b55      	ldr	r3, [pc, #340]	; (80120b4 <tcp_receive+0xb08>)
 8011f60:	881b      	ldrh	r3, [r3, #0]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d206      	bcs.n	8011f74 <tcp_receive+0x9c8>
 8011f66:	4b56      	ldr	r3, [pc, #344]	; (80120c0 <tcp_receive+0xb14>)
 8011f68:	f240 6207 	movw	r2, #1543	; 0x607
 8011f6c:	4957      	ldr	r1, [pc, #348]	; (80120cc <tcp_receive+0xb20>)
 8011f6e:	4856      	ldr	r0, [pc, #344]	; (80120c8 <tcp_receive+0xb1c>)
 8011f70:	f007 fd20 	bl	80199b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011f78:	4b4e      	ldr	r3, [pc, #312]	; (80120b4 <tcp_receive+0xb08>)
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f7fc fe93 	bl	800ecb0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011f8a:	4b4c      	ldr	r3, [pc, #304]	; (80120bc <tcp_receive+0xb10>)
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	891b      	ldrh	r3, [r3, #8]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d006      	beq.n	8011fa2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011f94:	4b49      	ldr	r3, [pc, #292]	; (80120bc <tcp_receive+0xb10>)
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	4a4d      	ldr	r2, [pc, #308]	; (80120d0 <tcp_receive+0xb24>)
 8011f9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f9c:	4b47      	ldr	r3, [pc, #284]	; (80120bc <tcp_receive+0xb10>)
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011fa2:	4b46      	ldr	r3, [pc, #280]	; (80120bc <tcp_receive+0xb10>)
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	899b      	ldrh	r3, [r3, #12]
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7fa faf4 	bl	800c598 <lwip_htons>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 80b8 	beq.w	801212e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011fbe:	4b45      	ldr	r3, [pc, #276]	; (80120d4 <tcp_receive+0xb28>)
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	f043 0320 	orr.w	r3, r3, #32
 8011fc6:	b2da      	uxtb	r2, r3
 8011fc8:	4b42      	ldr	r3, [pc, #264]	; (80120d4 <tcp_receive+0xb28>)
 8011fca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011fcc:	e0af      	b.n	801212e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	4a36      	ldr	r2, [pc, #216]	; (80120b8 <tcp_receive+0xb0c>)
 8011fde:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	891b      	ldrh	r3, [r3, #8]
 8011fe4:	461c      	mov	r4, r3
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	899b      	ldrh	r3, [r3, #12]
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7fa fad2 	bl	800c598 <lwip_htons>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	b2db      	uxtb	r3, r3
 8011ff8:	f003 0303 	and.w	r3, r3, #3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d001      	beq.n	8012004 <tcp_receive+0xa58>
 8012000:	2301      	movs	r3, #1
 8012002:	e000      	b.n	8012006 <tcp_receive+0xa5a>
 8012004:	2300      	movs	r3, #0
 8012006:	191a      	adds	r2, r3, r4
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200c:	441a      	add	r2, r3
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012016:	461c      	mov	r4, r3
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	891b      	ldrh	r3, [r3, #8]
 801201c:	461d      	mov	r5, r3
 801201e:	68bb      	ldr	r3, [r7, #8]
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	899b      	ldrh	r3, [r3, #12]
 8012024:	b29b      	uxth	r3, r3
 8012026:	4618      	mov	r0, r3
 8012028:	f7fa fab6 	bl	800c598 <lwip_htons>
 801202c:	4603      	mov	r3, r0
 801202e:	b2db      	uxtb	r3, r3
 8012030:	f003 0303 	and.w	r3, r3, #3
 8012034:	2b00      	cmp	r3, #0
 8012036:	d001      	beq.n	801203c <tcp_receive+0xa90>
 8012038:	2301      	movs	r3, #1
 801203a:	e000      	b.n	801203e <tcp_receive+0xa92>
 801203c:	2300      	movs	r3, #0
 801203e:	442b      	add	r3, r5
 8012040:	429c      	cmp	r4, r3
 8012042:	d206      	bcs.n	8012052 <tcp_receive+0xaa6>
 8012044:	4b1e      	ldr	r3, [pc, #120]	; (80120c0 <tcp_receive+0xb14>)
 8012046:	f240 622b 	movw	r2, #1579	; 0x62b
 801204a:	4923      	ldr	r1, [pc, #140]	; (80120d8 <tcp_receive+0xb2c>)
 801204c:	481e      	ldr	r0, [pc, #120]	; (80120c8 <tcp_receive+0xb1c>)
 801204e:	f007 fcb1 	bl	80199b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	891b      	ldrh	r3, [r3, #8]
 8012056:	461c      	mov	r4, r3
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	899b      	ldrh	r3, [r3, #12]
 801205e:	b29b      	uxth	r3, r3
 8012060:	4618      	mov	r0, r3
 8012062:	f7fa fa99 	bl	800c598 <lwip_htons>
 8012066:	4603      	mov	r3, r0
 8012068:	b2db      	uxtb	r3, r3
 801206a:	f003 0303 	and.w	r3, r3, #3
 801206e:	2b00      	cmp	r3, #0
 8012070:	d001      	beq.n	8012076 <tcp_receive+0xaca>
 8012072:	2301      	movs	r3, #1
 8012074:	e000      	b.n	8012078 <tcp_receive+0xacc>
 8012076:	2300      	movs	r3, #0
 8012078:	1919      	adds	r1, r3, r4
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801207e:	b28b      	uxth	r3, r1
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	b29a      	uxth	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f7fc fe11 	bl	800ecb0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	685b      	ldr	r3, [r3, #4]
 8012092:	891b      	ldrh	r3, [r3, #8]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d028      	beq.n	80120ea <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012098:	4b0d      	ldr	r3, [pc, #52]	; (80120d0 <tcp_receive+0xb24>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d01d      	beq.n	80120dc <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80120a0:	4b0b      	ldr	r3, [pc, #44]	; (80120d0 <tcp_receive+0xb24>)
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	4619      	mov	r1, r3
 80120aa:	4610      	mov	r0, r2
 80120ac:	f7fb ffaa 	bl	800e004 <pbuf_cat>
 80120b0:	e018      	b.n	80120e4 <tcp_receive+0xb38>
 80120b2:	bf00      	nop
 80120b4:	2000cf5e 	.word	0x2000cf5e
 80120b8:	2000cf54 	.word	0x2000cf54
 80120bc:	2000cf34 	.word	0x2000cf34
 80120c0:	0801bf40 	.word	0x0801bf40
 80120c4:	0801c320 	.word	0x0801c320
 80120c8:	0801bf8c 	.word	0x0801bf8c
 80120cc:	0801c35c 	.word	0x0801c35c
 80120d0:	2000cf64 	.word	0x2000cf64
 80120d4:	2000cf61 	.word	0x2000cf61
 80120d8:	0801c37c 	.word	0x0801c37c
            } else {
              recv_data = cseg->p;
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	4a70      	ldr	r2, [pc, #448]	; (80122a4 <tcp_receive+0xcf8>)
 80120e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	2200      	movs	r2, #0
 80120e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	68db      	ldr	r3, [r3, #12]
 80120ee:	899b      	ldrh	r3, [r3, #12]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fa fa50 	bl	800c598 <lwip_htons>
 80120f8:	4603      	mov	r3, r0
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00d      	beq.n	8012120 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012104:	4b68      	ldr	r3, [pc, #416]	; (80122a8 <tcp_receive+0xcfc>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	f043 0320 	orr.w	r3, r3, #32
 801210c:	b2da      	uxtb	r2, r3
 801210e:	4b66      	ldr	r3, [pc, #408]	; (80122a8 <tcp_receive+0xcfc>)
 8012110:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	7d1b      	ldrb	r3, [r3, #20]
 8012116:	2b04      	cmp	r3, #4
 8012118:	d102      	bne.n	8012120 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2207      	movs	r2, #7
 801211e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012128:	68b8      	ldr	r0, [r7, #8]
 801212a:	f7fd fae6 	bl	800f6fa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012132:	2b00      	cmp	r3, #0
 8012134:	d008      	beq.n	8012148 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	685a      	ldr	r2, [r3, #4]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012142:	429a      	cmp	r2, r3
 8012144:	f43f af43 	beq.w	8011fce <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	8b5b      	ldrh	r3, [r3, #26]
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	d00e      	beq.n	8012172 <tcp_receive+0xbc6>
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	8b5b      	ldrh	r3, [r3, #26]
 8012158:	f023 0301 	bic.w	r3, r3, #1
 801215c:	b29a      	uxth	r2, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	835a      	strh	r2, [r3, #26]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	8b5b      	ldrh	r3, [r3, #26]
 8012166:	f043 0302 	orr.w	r3, r3, #2
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012170:	e188      	b.n	8012484 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	8b5b      	ldrh	r3, [r3, #26]
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	b29a      	uxth	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012180:	e180      	b.n	8012484 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012186:	2b00      	cmp	r3, #0
 8012188:	d106      	bne.n	8012198 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801218a:	4848      	ldr	r0, [pc, #288]	; (80122ac <tcp_receive+0xd00>)
 801218c:	f7fd faec 	bl	800f768 <tcp_seg_copy>
 8012190:	4602      	mov	r2, r0
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	675a      	str	r2, [r3, #116]	; 0x74
 8012196:	e16d      	b.n	8012474 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012198:	2300      	movs	r3, #0
 801219a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80121a2:	e157      	b.n	8012454 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80121a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	685a      	ldr	r2, [r3, #4]
 80121aa:	4b41      	ldr	r3, [pc, #260]	; (80122b0 <tcp_receive+0xd04>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d11d      	bne.n	80121ee <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80121b2:	4b3e      	ldr	r3, [pc, #248]	; (80122ac <tcp_receive+0xd00>)
 80121b4:	891a      	ldrh	r2, [r3, #8]
 80121b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b8:	891b      	ldrh	r3, [r3, #8]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	f240 814f 	bls.w	801245e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121c0:	483a      	ldr	r0, [pc, #232]	; (80122ac <tcp_receive+0xd00>)
 80121c2:	f7fd fad1 	bl	800f768 <tcp_seg_copy>
 80121c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f000 8149 	beq.w	8012462 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80121d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d003      	beq.n	80121de <tcp_receive+0xc32>
                    prev->next = cseg;
 80121d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d8:	697a      	ldr	r2, [r7, #20]
 80121da:	601a      	str	r2, [r3, #0]
 80121dc:	e002      	b.n	80121e4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	697a      	ldr	r2, [r7, #20]
 80121e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80121e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121e6:	6978      	ldr	r0, [r7, #20]
 80121e8:	f7ff f8dc 	bl	80113a4 <tcp_oos_insert_segment>
                }
                break;
 80121ec:	e139      	b.n	8012462 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80121ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d117      	bne.n	8012224 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80121f4:	4b2e      	ldr	r3, [pc, #184]	; (80122b0 <tcp_receive+0xd04>)
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	2b00      	cmp	r3, #0
 8012202:	da57      	bge.n	80122b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012204:	4829      	ldr	r0, [pc, #164]	; (80122ac <tcp_receive+0xd00>)
 8012206:	f7fd faaf 	bl	800f768 <tcp_seg_copy>
 801220a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801220c:	69bb      	ldr	r3, [r7, #24]
 801220e:	2b00      	cmp	r3, #0
 8012210:	f000 8129 	beq.w	8012466 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	69ba      	ldr	r2, [r7, #24]
 8012218:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801221a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801221c:	69b8      	ldr	r0, [r7, #24]
 801221e:	f7ff f8c1 	bl	80113a4 <tcp_oos_insert_segment>
                  }
                  break;
 8012222:	e120      	b.n	8012466 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012224:	4b22      	ldr	r3, [pc, #136]	; (80122b0 <tcp_receive+0xd04>)
 8012226:	681a      	ldr	r2, [r3, #0]
 8012228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801222a:	68db      	ldr	r3, [r3, #12]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	1ad3      	subs	r3, r2, r3
 8012230:	3b01      	subs	r3, #1
 8012232:	2b00      	cmp	r3, #0
 8012234:	db3e      	blt.n	80122b4 <tcp_receive+0xd08>
 8012236:	4b1e      	ldr	r3, [pc, #120]	; (80122b0 <tcp_receive+0xd04>)
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	3301      	adds	r3, #1
 8012244:	2b00      	cmp	r3, #0
 8012246:	dc35      	bgt.n	80122b4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012248:	4818      	ldr	r0, [pc, #96]	; (80122ac <tcp_receive+0xd00>)
 801224a:	f7fd fa8d 	bl	800f768 <tcp_seg_copy>
 801224e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	2b00      	cmp	r3, #0
 8012254:	f000 8109 	beq.w	801246a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	685b      	ldr	r3, [r3, #4]
 801225e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012260:	8912      	ldrh	r2, [r2, #8]
 8012262:	441a      	add	r2, r3
 8012264:	4b12      	ldr	r3, [pc, #72]	; (80122b0 <tcp_receive+0xd04>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	1ad3      	subs	r3, r2, r3
 801226a:	2b00      	cmp	r3, #0
 801226c:	dd12      	ble.n	8012294 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801226e:	4b10      	ldr	r3, [pc, #64]	; (80122b0 <tcp_receive+0xd04>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	b29a      	uxth	r2, r3
 8012274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	685b      	ldr	r3, [r3, #4]
 801227a:	b29b      	uxth	r3, r3
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	b29a      	uxth	r2, r3
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012286:	685a      	ldr	r2, [r3, #4]
 8012288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801228a:	891b      	ldrh	r3, [r3, #8]
 801228c:	4619      	mov	r1, r3
 801228e:	4610      	mov	r0, r2
 8012290:	f7fb fc64 	bl	800db5c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012296:	69fa      	ldr	r2, [r7, #28]
 8012298:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801229a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801229c:	69f8      	ldr	r0, [r7, #28]
 801229e:	f7ff f881 	bl	80113a4 <tcp_oos_insert_segment>
                  }
                  break;
 80122a2:	e0e2      	b.n	801246a <tcp_receive+0xebe>
 80122a4:	2000cf64 	.word	0x2000cf64
 80122a8:	2000cf61 	.word	0x2000cf61
 80122ac:	2000cf34 	.word	0x2000cf34
 80122b0:	2000cf54 	.word	0x2000cf54
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80122b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80122b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f040 80c6 	bne.w	801244e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80122c2:	4b80      	ldr	r3, [pc, #512]	; (80124c4 <tcp_receive+0xf18>)
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f340 80bd 	ble.w	801244e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80122d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	899b      	ldrh	r3, [r3, #12]
 80122da:	b29b      	uxth	r3, r3
 80122dc:	4618      	mov	r0, r3
 80122de:	f7fa f95b 	bl	800c598 <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	b2db      	uxtb	r3, r3
 80122e6:	f003 0301 	and.w	r3, r3, #1
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f040 80bf 	bne.w	801246e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80122f0:	4875      	ldr	r0, [pc, #468]	; (80124c8 <tcp_receive+0xf1c>)
 80122f2:	f7fd fa39 	bl	800f768 <tcp_seg_copy>
 80122f6:	4602      	mov	r2, r0
 80122f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80122fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	f000 80b6 	beq.w	8012472 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012308:	68db      	ldr	r3, [r3, #12]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801230e:	8912      	ldrh	r2, [r2, #8]
 8012310:	441a      	add	r2, r3
 8012312:	4b6c      	ldr	r3, [pc, #432]	; (80124c4 <tcp_receive+0xf18>)
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	1ad3      	subs	r3, r2, r3
 8012318:	2b00      	cmp	r3, #0
 801231a:	dd12      	ble.n	8012342 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801231c:	4b69      	ldr	r3, [pc, #420]	; (80124c4 <tcp_receive+0xf18>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	b29a      	uxth	r2, r3
 8012322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	b29b      	uxth	r3, r3
 801232a:	1ad3      	subs	r3, r2, r3
 801232c:	b29a      	uxth	r2, r3
 801232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012330:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012334:	685a      	ldr	r2, [r3, #4]
 8012336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012338:	891b      	ldrh	r3, [r3, #8]
 801233a:	4619      	mov	r1, r3
 801233c:	4610      	mov	r0, r2
 801233e:	f7fb fc0d 	bl	800db5c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012342:	4b62      	ldr	r3, [pc, #392]	; (80124cc <tcp_receive+0xf20>)
 8012344:	881b      	ldrh	r3, [r3, #0]
 8012346:	461a      	mov	r2, r3
 8012348:	4b5e      	ldr	r3, [pc, #376]	; (80124c4 <tcp_receive+0xf18>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	441a      	add	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012352:	6879      	ldr	r1, [r7, #4]
 8012354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012356:	440b      	add	r3, r1
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	2b00      	cmp	r3, #0
 801235c:	f340 8089 	ble.w	8012472 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	68db      	ldr	r3, [r3, #12]
 8012366:	899b      	ldrh	r3, [r3, #12]
 8012368:	b29b      	uxth	r3, r3
 801236a:	4618      	mov	r0, r3
 801236c:	f7fa f914 	bl	800c598 <lwip_htons>
 8012370:	4603      	mov	r3, r0
 8012372:	b2db      	uxtb	r3, r3
 8012374:	f003 0301 	and.w	r3, r3, #1
 8012378:	2b00      	cmp	r3, #0
 801237a:	d022      	beq.n	80123c2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	899b      	ldrh	r3, [r3, #12]
 8012384:	b29b      	uxth	r3, r3
 8012386:	b21b      	sxth	r3, r3
 8012388:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801238c:	b21c      	sxth	r4, r3
 801238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	68db      	ldr	r3, [r3, #12]
 8012394:	899b      	ldrh	r3, [r3, #12]
 8012396:	b29b      	uxth	r3, r3
 8012398:	4618      	mov	r0, r3
 801239a:	f7fa f8fd 	bl	800c598 <lwip_htons>
 801239e:	4603      	mov	r3, r0
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fa f8f4 	bl	800c598 <lwip_htons>
 80123b0:	4603      	mov	r3, r0
 80123b2:	b21b      	sxth	r3, r3
 80123b4:	4323      	orrs	r3, r4
 80123b6:	b21a      	sxth	r2, r3
 80123b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	b292      	uxth	r2, r2
 80123c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c6:	b29a      	uxth	r2, r3
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123cc:	4413      	add	r3, r2
 80123ce:	b299      	uxth	r1, r3
 80123d0:	4b3c      	ldr	r3, [pc, #240]	; (80124c4 <tcp_receive+0xf18>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	1a8a      	subs	r2, r1, r2
 80123dc:	b292      	uxth	r2, r2
 80123de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80123e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	685a      	ldr	r2, [r3, #4]
 80123e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	891b      	ldrh	r3, [r3, #8]
 80123ec:	4619      	mov	r1, r3
 80123ee:	4610      	mov	r0, r2
 80123f0:	f7fb fbb4 	bl	800db5c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80123f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	891c      	ldrh	r4, [r3, #8]
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	899b      	ldrh	r3, [r3, #12]
 8012402:	b29b      	uxth	r3, r3
 8012404:	4618      	mov	r0, r3
 8012406:	f7fa f8c7 	bl	800c598 <lwip_htons>
 801240a:	4603      	mov	r3, r0
 801240c:	b2db      	uxtb	r3, r3
 801240e:	f003 0303 	and.w	r3, r3, #3
 8012412:	2b00      	cmp	r3, #0
 8012414:	d001      	beq.n	801241a <tcp_receive+0xe6e>
 8012416:	2301      	movs	r3, #1
 8012418:	e000      	b.n	801241c <tcp_receive+0xe70>
 801241a:	2300      	movs	r3, #0
 801241c:	4423      	add	r3, r4
 801241e:	b29a      	uxth	r2, r3
 8012420:	4b2a      	ldr	r3, [pc, #168]	; (80124cc <tcp_receive+0xf20>)
 8012422:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012424:	4b29      	ldr	r3, [pc, #164]	; (80124cc <tcp_receive+0xf20>)
 8012426:	881b      	ldrh	r3, [r3, #0]
 8012428:	461a      	mov	r2, r3
 801242a:	4b26      	ldr	r3, [pc, #152]	; (80124c4 <tcp_receive+0xf18>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	441a      	add	r2, r3
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012434:	6879      	ldr	r1, [r7, #4]
 8012436:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012438:	440b      	add	r3, r1
 801243a:	429a      	cmp	r2, r3
 801243c:	d019      	beq.n	8012472 <tcp_receive+0xec6>
 801243e:	4b24      	ldr	r3, [pc, #144]	; (80124d0 <tcp_receive+0xf24>)
 8012440:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012444:	4923      	ldr	r1, [pc, #140]	; (80124d4 <tcp_receive+0xf28>)
 8012446:	4824      	ldr	r0, [pc, #144]	; (80124d8 <tcp_receive+0xf2c>)
 8012448:	f007 fab4 	bl	80199b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801244c:	e011      	b.n	8012472 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	63bb      	str	r3, [r7, #56]	; 0x38
 8012454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012456:	2b00      	cmp	r3, #0
 8012458:	f47f aea4 	bne.w	80121a4 <tcp_receive+0xbf8>
 801245c:	e00a      	b.n	8012474 <tcp_receive+0xec8>
                break;
 801245e:	bf00      	nop
 8012460:	e008      	b.n	8012474 <tcp_receive+0xec8>
                break;
 8012462:	bf00      	nop
 8012464:	e006      	b.n	8012474 <tcp_receive+0xec8>
                  break;
 8012466:	bf00      	nop
 8012468:	e004      	b.n	8012474 <tcp_receive+0xec8>
                  break;
 801246a:	bf00      	nop
 801246c:	e002      	b.n	8012474 <tcp_receive+0xec8>
                  break;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <tcp_receive+0xec8>
                break;
 8012472:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f001 fe8b 	bl	8014190 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801247a:	e003      	b.n	8012484 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f001 fe87 	bl	8014190 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012482:	e01a      	b.n	80124ba <tcp_receive+0xf0e>
 8012484:	e019      	b.n	80124ba <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012486:	4b0f      	ldr	r3, [pc, #60]	; (80124c4 <tcp_receive+0xf18>)
 8012488:	681a      	ldr	r2, [r3, #0]
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801248e:	1ad3      	subs	r3, r2, r3
 8012490:	2b00      	cmp	r3, #0
 8012492:	db0a      	blt.n	80124aa <tcp_receive+0xefe>
 8012494:	4b0b      	ldr	r3, [pc, #44]	; (80124c4 <tcp_receive+0xf18>)
 8012496:	681a      	ldr	r2, [r3, #0]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801249c:	6879      	ldr	r1, [r7, #4]
 801249e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124a0:	440b      	add	r3, r1
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	3301      	adds	r3, #1
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	dd07      	ble.n	80124ba <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	8b5b      	ldrh	r3, [r3, #26]
 80124ae:	f043 0302 	orr.w	r3, r3, #2
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80124b8:	e7ff      	b.n	80124ba <tcp_receive+0xf0e>
 80124ba:	bf00      	nop
 80124bc:	3750      	adds	r7, #80	; 0x50
 80124be:	46bd      	mov	sp, r7
 80124c0:	bdb0      	pop	{r4, r5, r7, pc}
 80124c2:	bf00      	nop
 80124c4:	2000cf54 	.word	0x2000cf54
 80124c8:	2000cf34 	.word	0x2000cf34
 80124cc:	2000cf5e 	.word	0x2000cf5e
 80124d0:	0801bf40 	.word	0x0801bf40
 80124d4:	0801c2e8 	.word	0x0801c2e8
 80124d8:	0801bf8c 	.word	0x0801bf8c

080124dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80124e2:	4b15      	ldr	r3, [pc, #84]	; (8012538 <tcp_get_next_optbyte+0x5c>)
 80124e4:	881b      	ldrh	r3, [r3, #0]
 80124e6:	1c5a      	adds	r2, r3, #1
 80124e8:	b291      	uxth	r1, r2
 80124ea:	4a13      	ldr	r2, [pc, #76]	; (8012538 <tcp_get_next_optbyte+0x5c>)
 80124ec:	8011      	strh	r1, [r2, #0]
 80124ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80124f0:	4b12      	ldr	r3, [pc, #72]	; (801253c <tcp_get_next_optbyte+0x60>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d004      	beq.n	8012502 <tcp_get_next_optbyte+0x26>
 80124f8:	4b11      	ldr	r3, [pc, #68]	; (8012540 <tcp_get_next_optbyte+0x64>)
 80124fa:	881b      	ldrh	r3, [r3, #0]
 80124fc:	88fa      	ldrh	r2, [r7, #6]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d208      	bcs.n	8012514 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012502:	4b10      	ldr	r3, [pc, #64]	; (8012544 <tcp_get_next_optbyte+0x68>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	3314      	adds	r3, #20
 8012508:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801250a:	88fb      	ldrh	r3, [r7, #6]
 801250c:	683a      	ldr	r2, [r7, #0]
 801250e:	4413      	add	r3, r2
 8012510:	781b      	ldrb	r3, [r3, #0]
 8012512:	e00b      	b.n	801252c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012514:	88fb      	ldrh	r3, [r7, #6]
 8012516:	b2da      	uxtb	r2, r3
 8012518:	4b09      	ldr	r3, [pc, #36]	; (8012540 <tcp_get_next_optbyte+0x64>)
 801251a:	881b      	ldrh	r3, [r3, #0]
 801251c:	b2db      	uxtb	r3, r3
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012522:	4b06      	ldr	r3, [pc, #24]	; (801253c <tcp_get_next_optbyte+0x60>)
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	797b      	ldrb	r3, [r7, #5]
 8012528:	4413      	add	r3, r2
 801252a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801252c:	4618      	mov	r0, r3
 801252e:	370c      	adds	r7, #12
 8012530:	46bd      	mov	sp, r7
 8012532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012536:	4770      	bx	lr
 8012538:	2000cf50 	.word	0x2000cf50
 801253c:	2000cf4c 	.word	0x2000cf4c
 8012540:	2000cf4a 	.word	0x2000cf4a
 8012544:	2000cf44 	.word	0x2000cf44

08012548 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d106      	bne.n	8012564 <tcp_parseopt+0x1c>
 8012556:	4b32      	ldr	r3, [pc, #200]	; (8012620 <tcp_parseopt+0xd8>)
 8012558:	f240 727d 	movw	r2, #1917	; 0x77d
 801255c:	4931      	ldr	r1, [pc, #196]	; (8012624 <tcp_parseopt+0xdc>)
 801255e:	4832      	ldr	r0, [pc, #200]	; (8012628 <tcp_parseopt+0xe0>)
 8012560:	f007 fa28 	bl	80199b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012564:	4b31      	ldr	r3, [pc, #196]	; (801262c <tcp_parseopt+0xe4>)
 8012566:	881b      	ldrh	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d055      	beq.n	8012618 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801256c:	4b30      	ldr	r3, [pc, #192]	; (8012630 <tcp_parseopt+0xe8>)
 801256e:	2200      	movs	r2, #0
 8012570:	801a      	strh	r2, [r3, #0]
 8012572:	e045      	b.n	8012600 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012574:	f7ff ffb2 	bl	80124dc <tcp_get_next_optbyte>
 8012578:	4603      	mov	r3, r0
 801257a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801257c:	7bfb      	ldrb	r3, [r7, #15]
 801257e:	2b02      	cmp	r3, #2
 8012580:	d006      	beq.n	8012590 <tcp_parseopt+0x48>
 8012582:	2b02      	cmp	r3, #2
 8012584:	dc2b      	bgt.n	80125de <tcp_parseopt+0x96>
 8012586:	2b00      	cmp	r3, #0
 8012588:	d041      	beq.n	801260e <tcp_parseopt+0xc6>
 801258a:	2b01      	cmp	r3, #1
 801258c:	d127      	bne.n	80125de <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801258e:	e037      	b.n	8012600 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012590:	f7ff ffa4 	bl	80124dc <tcp_get_next_optbyte>
 8012594:	4603      	mov	r3, r0
 8012596:	2b04      	cmp	r3, #4
 8012598:	d13b      	bne.n	8012612 <tcp_parseopt+0xca>
 801259a:	4b25      	ldr	r3, [pc, #148]	; (8012630 <tcp_parseopt+0xe8>)
 801259c:	881b      	ldrh	r3, [r3, #0]
 801259e:	3301      	adds	r3, #1
 80125a0:	4a22      	ldr	r2, [pc, #136]	; (801262c <tcp_parseopt+0xe4>)
 80125a2:	8812      	ldrh	r2, [r2, #0]
 80125a4:	4293      	cmp	r3, r2
 80125a6:	da34      	bge.n	8012612 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80125a8:	f7ff ff98 	bl	80124dc <tcp_get_next_optbyte>
 80125ac:	4603      	mov	r3, r0
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	021b      	lsls	r3, r3, #8
 80125b2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80125b4:	f7ff ff92 	bl	80124dc <tcp_get_next_optbyte>
 80125b8:	4603      	mov	r3, r0
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	89bb      	ldrh	r3, [r7, #12]
 80125be:	4313      	orrs	r3, r2
 80125c0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80125c2:	89bb      	ldrh	r3, [r7, #12]
 80125c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80125c8:	d804      	bhi.n	80125d4 <tcp_parseopt+0x8c>
 80125ca:	89bb      	ldrh	r3, [r7, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d001      	beq.n	80125d4 <tcp_parseopt+0x8c>
 80125d0:	89ba      	ldrh	r2, [r7, #12]
 80125d2:	e001      	b.n	80125d8 <tcp_parseopt+0x90>
 80125d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80125dc:	e010      	b.n	8012600 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80125de:	f7ff ff7d 	bl	80124dc <tcp_get_next_optbyte>
 80125e2:	4603      	mov	r3, r0
 80125e4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80125e6:	7afb      	ldrb	r3, [r7, #11]
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d914      	bls.n	8012616 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80125ec:	7afb      	ldrb	r3, [r7, #11]
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	4b0f      	ldr	r3, [pc, #60]	; (8012630 <tcp_parseopt+0xe8>)
 80125f2:	881b      	ldrh	r3, [r3, #0]
 80125f4:	4413      	add	r3, r2
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	3b02      	subs	r3, #2
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	4b0c      	ldr	r3, [pc, #48]	; (8012630 <tcp_parseopt+0xe8>)
 80125fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012600:	4b0b      	ldr	r3, [pc, #44]	; (8012630 <tcp_parseopt+0xe8>)
 8012602:	881a      	ldrh	r2, [r3, #0]
 8012604:	4b09      	ldr	r3, [pc, #36]	; (801262c <tcp_parseopt+0xe4>)
 8012606:	881b      	ldrh	r3, [r3, #0]
 8012608:	429a      	cmp	r2, r3
 801260a:	d3b3      	bcc.n	8012574 <tcp_parseopt+0x2c>
 801260c:	e004      	b.n	8012618 <tcp_parseopt+0xd0>
          return;
 801260e:	bf00      	nop
 8012610:	e002      	b.n	8012618 <tcp_parseopt+0xd0>
            return;
 8012612:	bf00      	nop
 8012614:	e000      	b.n	8012618 <tcp_parseopt+0xd0>
            return;
 8012616:	bf00      	nop
      }
    }
  }
}
 8012618:	3710      	adds	r7, #16
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	0801bf40 	.word	0x0801bf40
 8012624:	0801c3a4 	.word	0x0801c3a4
 8012628:	0801bf8c 	.word	0x0801bf8c
 801262c:	2000cf48 	.word	0x2000cf48
 8012630:	2000cf50 	.word	0x2000cf50

08012634 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012634:	b480      	push	{r7}
 8012636:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012638:	4b05      	ldr	r3, [pc, #20]	; (8012650 <tcp_trigger_input_pcb_close+0x1c>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	f043 0310 	orr.w	r3, r3, #16
 8012640:	b2da      	uxtb	r2, r3
 8012642:	4b03      	ldr	r3, [pc, #12]	; (8012650 <tcp_trigger_input_pcb_close+0x1c>)
 8012644:	701a      	strb	r2, [r3, #0]
}
 8012646:	bf00      	nop
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr
 8012650:	2000cf61 	.word	0x2000cf61

08012654 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b084      	sub	sp, #16
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d00a      	beq.n	801267c <tcp_route+0x28>
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	7a1b      	ldrb	r3, [r3, #8]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d006      	beq.n	801267c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	7a1b      	ldrb	r3, [r3, #8]
 8012672:	4618      	mov	r0, r3
 8012674:	f7fb f86a 	bl	800d74c <netif_get_by_index>
 8012678:	4603      	mov	r3, r0
 801267a:	e003      	b.n	8012684 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f005 fc9f 	bl	8017fc0 <ip4_route>
 8012682:	4603      	mov	r3, r0
  }
}
 8012684:	4618      	mov	r0, r3
 8012686:	3710      	adds	r7, #16
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}

0801268c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801268c:	b590      	push	{r4, r7, lr}
 801268e:	b087      	sub	sp, #28
 8012690:	af00      	add	r7, sp, #0
 8012692:	60f8      	str	r0, [r7, #12]
 8012694:	60b9      	str	r1, [r7, #8]
 8012696:	603b      	str	r3, [r7, #0]
 8012698:	4613      	mov	r3, r2
 801269a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d105      	bne.n	80126ae <tcp_create_segment+0x22>
 80126a2:	4b44      	ldr	r3, [pc, #272]	; (80127b4 <tcp_create_segment+0x128>)
 80126a4:	22a3      	movs	r2, #163	; 0xa3
 80126a6:	4944      	ldr	r1, [pc, #272]	; (80127b8 <tcp_create_segment+0x12c>)
 80126a8:	4844      	ldr	r0, [pc, #272]	; (80127bc <tcp_create_segment+0x130>)
 80126aa:	f007 f983 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d105      	bne.n	80126c0 <tcp_create_segment+0x34>
 80126b4:	4b3f      	ldr	r3, [pc, #252]	; (80127b4 <tcp_create_segment+0x128>)
 80126b6:	22a4      	movs	r2, #164	; 0xa4
 80126b8:	4941      	ldr	r1, [pc, #260]	; (80127c0 <tcp_create_segment+0x134>)
 80126ba:	4840      	ldr	r0, [pc, #256]	; (80127bc <tcp_create_segment+0x130>)
 80126bc:	f007 f97a 	bl	80199b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80126c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80126c4:	009b      	lsls	r3, r3, #2
 80126c6:	b2db      	uxtb	r3, r3
 80126c8:	f003 0304 	and.w	r3, r3, #4
 80126cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80126ce:	2003      	movs	r0, #3
 80126d0:	f7fa fca4 	bl	800d01c <memp_malloc>
 80126d4:	6138      	str	r0, [r7, #16]
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d104      	bne.n	80126e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80126dc:	68b8      	ldr	r0, [r7, #8]
 80126de:	f7fb fbc3 	bl	800de68 <pbuf_free>
    return NULL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	e061      	b.n	80127aa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80126ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	2200      	movs	r2, #0
 80126f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	68ba      	ldr	r2, [r7, #8]
 80126f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	891a      	ldrh	r2, [r3, #8]
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
 8012700:	b29b      	uxth	r3, r3
 8012702:	429a      	cmp	r2, r3
 8012704:	d205      	bcs.n	8012712 <tcp_create_segment+0x86>
 8012706:	4b2b      	ldr	r3, [pc, #172]	; (80127b4 <tcp_create_segment+0x128>)
 8012708:	22b0      	movs	r2, #176	; 0xb0
 801270a:	492e      	ldr	r1, [pc, #184]	; (80127c4 <tcp_create_segment+0x138>)
 801270c:	482b      	ldr	r0, [pc, #172]	; (80127bc <tcp_create_segment+0x130>)
 801270e:	f007 f951 	bl	80199b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	891a      	ldrh	r2, [r3, #8]
 8012716:	7dfb      	ldrb	r3, [r7, #23]
 8012718:	b29b      	uxth	r3, r3
 801271a:	1ad3      	subs	r3, r2, r3
 801271c:	b29a      	uxth	r2, r3
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012722:	2114      	movs	r1, #20
 8012724:	68b8      	ldr	r0, [r7, #8]
 8012726:	f7fb fb09 	bl	800dd3c <pbuf_add_header>
 801272a:	4603      	mov	r3, r0
 801272c:	2b00      	cmp	r3, #0
 801272e:	d004      	beq.n	801273a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012730:	6938      	ldr	r0, [r7, #16]
 8012732:	f7fc ffe2 	bl	800f6fa <tcp_seg_free>
    return NULL;
 8012736:	2300      	movs	r3, #0
 8012738:	e037      	b.n	80127aa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	685b      	ldr	r3, [r3, #4]
 801273e:	685a      	ldr	r2, [r3, #4]
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	8ada      	ldrh	r2, [r3, #22]
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	68dc      	ldr	r4, [r3, #12]
 801274c:	4610      	mov	r0, r2
 801274e:	f7f9 ff23 	bl	800c598 <lwip_htons>
 8012752:	4603      	mov	r3, r0
 8012754:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	8b1a      	ldrh	r2, [r3, #24]
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	68dc      	ldr	r4, [r3, #12]
 801275e:	4610      	mov	r0, r2
 8012760:	f7f9 ff1a 	bl	800c598 <lwip_htons>
 8012764:	4603      	mov	r3, r0
 8012766:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	68dc      	ldr	r4, [r3, #12]
 801276c:	6838      	ldr	r0, [r7, #0]
 801276e:	f7f9 ff28 	bl	800c5c2 <lwip_htonl>
 8012772:	4603      	mov	r3, r0
 8012774:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012776:	7dfb      	ldrb	r3, [r7, #23]
 8012778:	089b      	lsrs	r3, r3, #2
 801277a:	b2db      	uxtb	r3, r3
 801277c:	b29b      	uxth	r3, r3
 801277e:	3305      	adds	r3, #5
 8012780:	b29b      	uxth	r3, r3
 8012782:	031b      	lsls	r3, r3, #12
 8012784:	b29a      	uxth	r2, r3
 8012786:	79fb      	ldrb	r3, [r7, #7]
 8012788:	b29b      	uxth	r3, r3
 801278a:	4313      	orrs	r3, r2
 801278c:	b29a      	uxth	r2, r3
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	68dc      	ldr	r4, [r3, #12]
 8012792:	4610      	mov	r0, r2
 8012794:	f7f9 ff00 	bl	800c598 <lwip_htons>
 8012798:	4603      	mov	r3, r0
 801279a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	2200      	movs	r2, #0
 80127a2:	749a      	strb	r2, [r3, #18]
 80127a4:	2200      	movs	r2, #0
 80127a6:	74da      	strb	r2, [r3, #19]
  return seg;
 80127a8:	693b      	ldr	r3, [r7, #16]
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	371c      	adds	r7, #28
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd90      	pop	{r4, r7, pc}
 80127b2:	bf00      	nop
 80127b4:	0801c3c0 	.word	0x0801c3c0
 80127b8:	0801c3f4 	.word	0x0801c3f4
 80127bc:	0801c414 	.word	0x0801c414
 80127c0:	0801c43c 	.word	0x0801c43c
 80127c4:	0801c460 	.word	0x0801c460

080127c8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b086      	sub	sp, #24
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	607b      	str	r3, [r7, #4]
 80127d0:	4603      	mov	r3, r0
 80127d2:	73fb      	strb	r3, [r7, #15]
 80127d4:	460b      	mov	r3, r1
 80127d6:	81bb      	strh	r3, [r7, #12]
 80127d8:	4613      	mov	r3, r2
 80127da:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80127dc:	89bb      	ldrh	r3, [r7, #12]
 80127de:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d105      	bne.n	80127f2 <tcp_pbuf_prealloc+0x2a>
 80127e6:	4b30      	ldr	r3, [pc, #192]	; (80128a8 <tcp_pbuf_prealloc+0xe0>)
 80127e8:	22e8      	movs	r2, #232	; 0xe8
 80127ea:	4930      	ldr	r1, [pc, #192]	; (80128ac <tcp_pbuf_prealloc+0xe4>)
 80127ec:	4830      	ldr	r0, [pc, #192]	; (80128b0 <tcp_pbuf_prealloc+0xe8>)
 80127ee:	f007 f8e1 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80127f2:	6a3b      	ldr	r3, [r7, #32]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d105      	bne.n	8012804 <tcp_pbuf_prealloc+0x3c>
 80127f8:	4b2b      	ldr	r3, [pc, #172]	; (80128a8 <tcp_pbuf_prealloc+0xe0>)
 80127fa:	22e9      	movs	r2, #233	; 0xe9
 80127fc:	492d      	ldr	r1, [pc, #180]	; (80128b4 <tcp_pbuf_prealloc+0xec>)
 80127fe:	482c      	ldr	r0, [pc, #176]	; (80128b0 <tcp_pbuf_prealloc+0xe8>)
 8012800:	f007 f8d8 	bl	80199b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012804:	89ba      	ldrh	r2, [r7, #12]
 8012806:	897b      	ldrh	r3, [r7, #10]
 8012808:	429a      	cmp	r2, r3
 801280a:	d221      	bcs.n	8012850 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801280c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012810:	f003 0302 	and.w	r3, r3, #2
 8012814:	2b00      	cmp	r3, #0
 8012816:	d111      	bne.n	801283c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012818:	6a3b      	ldr	r3, [r7, #32]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012820:	2b00      	cmp	r3, #0
 8012822:	d115      	bne.n	8012850 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012824:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012830:	2b00      	cmp	r3, #0
 8012832:	d103      	bne.n	801283c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012838:	2b00      	cmp	r3, #0
 801283a:	d009      	beq.n	8012850 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801283c:	89bb      	ldrh	r3, [r7, #12]
 801283e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012842:	f023 0203 	bic.w	r2, r3, #3
 8012846:	897b      	ldrh	r3, [r7, #10]
 8012848:	4293      	cmp	r3, r2
 801284a:	bf28      	it	cs
 801284c:	4613      	movcs	r3, r2
 801284e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012850:	8af9      	ldrh	r1, [r7, #22]
 8012852:	7bfb      	ldrb	r3, [r7, #15]
 8012854:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012858:	4618      	mov	r0, r3
 801285a:	f7fb f821 	bl	800d8a0 <pbuf_alloc>
 801285e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012866:	2300      	movs	r3, #0
 8012868:	e019      	b.n	801289e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d006      	beq.n	8012880 <tcp_pbuf_prealloc+0xb8>
 8012872:	4b0d      	ldr	r3, [pc, #52]	; (80128a8 <tcp_pbuf_prealloc+0xe0>)
 8012874:	f240 120b 	movw	r2, #267	; 0x10b
 8012878:	490f      	ldr	r1, [pc, #60]	; (80128b8 <tcp_pbuf_prealloc+0xf0>)
 801287a:	480d      	ldr	r0, [pc, #52]	; (80128b0 <tcp_pbuf_prealloc+0xe8>)
 801287c:	f007 f89a 	bl	80199b4 <iprintf>
  *oversize = p->len - length;
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	895a      	ldrh	r2, [r3, #10]
 8012884:	89bb      	ldrh	r3, [r7, #12]
 8012886:	1ad3      	subs	r3, r2, r3
 8012888:	b29a      	uxth	r2, r3
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	89ba      	ldrh	r2, [r7, #12]
 8012892:	811a      	strh	r2, [r3, #8]
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	891a      	ldrh	r2, [r3, #8]
 8012898:	693b      	ldr	r3, [r7, #16]
 801289a:	815a      	strh	r2, [r3, #10]
  return p;
 801289c:	693b      	ldr	r3, [r7, #16]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3718      	adds	r7, #24
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	0801c3c0 	.word	0x0801c3c0
 80128ac:	0801c478 	.word	0x0801c478
 80128b0:	0801c414 	.word	0x0801c414
 80128b4:	0801c49c 	.word	0x0801c49c
 80128b8:	0801c4bc 	.word	0x0801c4bc

080128bc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d106      	bne.n	80128dc <tcp_write_checks+0x20>
 80128ce:	4b33      	ldr	r3, [pc, #204]	; (801299c <tcp_write_checks+0xe0>)
 80128d0:	f240 1233 	movw	r2, #307	; 0x133
 80128d4:	4932      	ldr	r1, [pc, #200]	; (80129a0 <tcp_write_checks+0xe4>)
 80128d6:	4833      	ldr	r0, [pc, #204]	; (80129a4 <tcp_write_checks+0xe8>)
 80128d8:	f007 f86c 	bl	80199b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	7d1b      	ldrb	r3, [r3, #20]
 80128e0:	2b04      	cmp	r3, #4
 80128e2:	d00e      	beq.n	8012902 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80128e8:	2b07      	cmp	r3, #7
 80128ea:	d00a      	beq.n	8012902 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80128f0:	2b02      	cmp	r3, #2
 80128f2:	d006      	beq.n	8012902 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80128f8:	2b03      	cmp	r3, #3
 80128fa:	d002      	beq.n	8012902 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80128fc:	f06f 030a 	mvn.w	r3, #10
 8012900:	e048      	b.n	8012994 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012902:	887b      	ldrh	r3, [r7, #2]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d101      	bne.n	801290c <tcp_write_checks+0x50>
    return ERR_OK;
 8012908:	2300      	movs	r3, #0
 801290a:	e043      	b.n	8012994 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012912:	887a      	ldrh	r2, [r7, #2]
 8012914:	429a      	cmp	r2, r3
 8012916:	d909      	bls.n	801292c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	8b5b      	ldrh	r3, [r3, #26]
 801291c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012920:	b29a      	uxth	r2, r3
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012926:	f04f 33ff 	mov.w	r3, #4294967295
 801292a:	e033      	b.n	8012994 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012932:	2b08      	cmp	r3, #8
 8012934:	d909      	bls.n	801294a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	8b5b      	ldrh	r3, [r3, #26]
 801293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801293e:	b29a      	uxth	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012944:	f04f 33ff 	mov.w	r3, #4294967295
 8012948:	e024      	b.n	8012994 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00f      	beq.n	8012974 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012958:	2b00      	cmp	r3, #0
 801295a:	d11a      	bne.n	8012992 <tcp_write_checks+0xd6>
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012960:	2b00      	cmp	r3, #0
 8012962:	d116      	bne.n	8012992 <tcp_write_checks+0xd6>
 8012964:	4b0d      	ldr	r3, [pc, #52]	; (801299c <tcp_write_checks+0xe0>)
 8012966:	f240 1255 	movw	r2, #341	; 0x155
 801296a:	490f      	ldr	r1, [pc, #60]	; (80129a8 <tcp_write_checks+0xec>)
 801296c:	480d      	ldr	r0, [pc, #52]	; (80129a4 <tcp_write_checks+0xe8>)
 801296e:	f007 f821 	bl	80199b4 <iprintf>
 8012972:	e00e      	b.n	8012992 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012978:	2b00      	cmp	r3, #0
 801297a:	d103      	bne.n	8012984 <tcp_write_checks+0xc8>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012980:	2b00      	cmp	r3, #0
 8012982:	d006      	beq.n	8012992 <tcp_write_checks+0xd6>
 8012984:	4b05      	ldr	r3, [pc, #20]	; (801299c <tcp_write_checks+0xe0>)
 8012986:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801298a:	4908      	ldr	r1, [pc, #32]	; (80129ac <tcp_write_checks+0xf0>)
 801298c:	4805      	ldr	r0, [pc, #20]	; (80129a4 <tcp_write_checks+0xe8>)
 801298e:	f007 f811 	bl	80199b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012992:	2300      	movs	r3, #0
}
 8012994:	4618      	mov	r0, r3
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	0801c3c0 	.word	0x0801c3c0
 80129a0:	0801c4d0 	.word	0x0801c4d0
 80129a4:	0801c414 	.word	0x0801c414
 80129a8:	0801c4f0 	.word	0x0801c4f0
 80129ac:	0801c52c 	.word	0x0801c52c

080129b0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80129b0:	b590      	push	{r4, r7, lr}
 80129b2:	b09b      	sub	sp, #108	; 0x6c
 80129b4:	af04      	add	r7, sp, #16
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	4611      	mov	r1, r2
 80129bc:	461a      	mov	r2, r3
 80129be:	460b      	mov	r3, r1
 80129c0:	80fb      	strh	r3, [r7, #6]
 80129c2:	4613      	mov	r3, r2
 80129c4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80129c6:	2300      	movs	r3, #0
 80129c8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80129ca:	2300      	movs	r3, #0
 80129cc:	653b      	str	r3, [r7, #80]	; 0x50
 80129ce:	2300      	movs	r3, #0
 80129d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129d2:	2300      	movs	r3, #0
 80129d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80129d6:	2300      	movs	r3, #0
 80129d8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80129da:	2300      	movs	r3, #0
 80129dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80129e0:	2300      	movs	r3, #0
 80129e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80129e6:	2300      	movs	r3, #0
 80129e8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80129ea:	2300      	movs	r3, #0
 80129ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d109      	bne.n	8012a0c <tcp_write+0x5c>
 80129f8:	4ba4      	ldr	r3, [pc, #656]	; (8012c8c <tcp_write+0x2dc>)
 80129fa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80129fe:	49a4      	ldr	r1, [pc, #656]	; (8012c90 <tcp_write+0x2e0>)
 8012a00:	48a4      	ldr	r0, [pc, #656]	; (8012c94 <tcp_write+0x2e4>)
 8012a02:	f006 ffd7 	bl	80199b4 <iprintf>
 8012a06:	f06f 030f 	mvn.w	r3, #15
 8012a0a:	e32a      	b.n	8013062 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012a12:	085b      	lsrs	r3, r3, #1
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	bf28      	it	cs
 8012a1e:	4613      	movcs	r3, r2
 8012a20:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012a22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d102      	bne.n	8012a2e <tcp_write+0x7e>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a2c:	e000      	b.n	8012a30 <tcp_write+0x80>
 8012a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012a30:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d109      	bne.n	8012a4c <tcp_write+0x9c>
 8012a38:	4b94      	ldr	r3, [pc, #592]	; (8012c8c <tcp_write+0x2dc>)
 8012a3a:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012a3e:	4996      	ldr	r1, [pc, #600]	; (8012c98 <tcp_write+0x2e8>)
 8012a40:	4894      	ldr	r0, [pc, #592]	; (8012c94 <tcp_write+0x2e4>)
 8012a42:	f006 ffb7 	bl	80199b4 <iprintf>
 8012a46:	f06f 030f 	mvn.w	r3, #15
 8012a4a:	e30a      	b.n	8013062 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012a4c:	88fb      	ldrh	r3, [r7, #6]
 8012a4e:	4619      	mov	r1, r3
 8012a50:	68f8      	ldr	r0, [r7, #12]
 8012a52:	f7ff ff33 	bl	80128bc <tcp_write_checks>
 8012a56:	4603      	mov	r3, r0
 8012a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012a5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d002      	beq.n	8012a6a <tcp_write+0xba>
    return err;
 8012a64:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012a68:	e2fb      	b.n	8013062 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a74:	2300      	movs	r3, #0
 8012a76:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f000 80f6 	beq.w	8012c70 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a88:	653b      	str	r3, [r7, #80]	; 0x50
 8012a8a:	e002      	b.n	8012a92 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d1f8      	bne.n	8012a8c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a9c:	7a9b      	ldrb	r3, [r3, #10]
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	f003 0304 	and.w	r3, r3, #4
 8012aa6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012aa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aac:	891b      	ldrh	r3, [r3, #8]
 8012aae:	4619      	mov	r1, r3
 8012ab0:	8c3b      	ldrh	r3, [r7, #32]
 8012ab2:	440b      	add	r3, r1
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	da06      	bge.n	8012ac6 <tcp_write+0x116>
 8012ab8:	4b74      	ldr	r3, [pc, #464]	; (8012c8c <tcp_write+0x2dc>)
 8012aba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012abe:	4977      	ldr	r1, [pc, #476]	; (8012c9c <tcp_write+0x2ec>)
 8012ac0:	4874      	ldr	r0, [pc, #464]	; (8012c94 <tcp_write+0x2e4>)
 8012ac2:	f006 ff77 	bl	80199b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ac8:	891a      	ldrh	r2, [r3, #8]
 8012aca:	8c3b      	ldrh	r3, [r7, #32]
 8012acc:	4413      	add	r3, r2
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012ad2:	1ad3      	subs	r3, r2, r3
 8012ad4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012adc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012ade:	8a7b      	ldrh	r3, [r7, #18]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d026      	beq.n	8012b32 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012ae4:	8a7b      	ldrh	r3, [r7, #18]
 8012ae6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d206      	bcs.n	8012afa <tcp_write+0x14a>
 8012aec:	4b67      	ldr	r3, [pc, #412]	; (8012c8c <tcp_write+0x2dc>)
 8012aee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012af2:	496b      	ldr	r1, [pc, #428]	; (8012ca0 <tcp_write+0x2f0>)
 8012af4:	4867      	ldr	r0, [pc, #412]	; (8012c94 <tcp_write+0x2e4>)
 8012af6:	f006 ff5d 	bl	80199b4 <iprintf>
      seg = last_unsent;
 8012afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012afc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012afe:	8a7b      	ldrh	r3, [r7, #18]
 8012b00:	88fa      	ldrh	r2, [r7, #6]
 8012b02:	4293      	cmp	r3, r2
 8012b04:	bf28      	it	cs
 8012b06:	4613      	movcs	r3, r2
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	bf28      	it	cs
 8012b10:	4613      	movcs	r3, r2
 8012b12:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012b14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012b20:	8a7a      	ldrh	r2, [r7, #18]
 8012b22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012b2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b2e:	1ad3      	subs	r3, r2, r3
 8012b30:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012b32:	8a7b      	ldrh	r3, [r7, #18]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00b      	beq.n	8012b50 <tcp_write+0x1a0>
 8012b38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b3c:	88fb      	ldrh	r3, [r7, #6]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d006      	beq.n	8012b50 <tcp_write+0x1a0>
 8012b42:	4b52      	ldr	r3, [pc, #328]	; (8012c8c <tcp_write+0x2dc>)
 8012b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b48:	4956      	ldr	r1, [pc, #344]	; (8012ca4 <tcp_write+0x2f4>)
 8012b4a:	4852      	ldr	r0, [pc, #328]	; (8012c94 <tcp_write+0x2e4>)
 8012b4c:	f006 ff32 	bl	80199b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012b50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	f080 8167 	bcs.w	8012e2a <tcp_write+0x47a>
 8012b5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f000 8163 	beq.w	8012e2a <tcp_write+0x47a>
 8012b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b66:	891b      	ldrh	r3, [r3, #8]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	f000 815e 	beq.w	8012e2a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012b6e:	88fa      	ldrh	r2, [r7, #6]
 8012b70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b74:	1ad2      	subs	r2, r2, r3
 8012b76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	bfa8      	it	ge
 8012b7c:	4613      	movge	r3, r2
 8012b7e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b82:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012b84:	797b      	ldrb	r3, [r7, #5]
 8012b86:	f003 0301 	and.w	r3, r3, #1
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d027      	beq.n	8012bde <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b8e:	f107 0012 	add.w	r0, r7, #18
 8012b92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b94:	8bf9      	ldrh	r1, [r7, #30]
 8012b96:	2301      	movs	r3, #1
 8012b98:	9302      	str	r3, [sp, #8]
 8012b9a:	797b      	ldrb	r3, [r7, #5]
 8012b9c:	9301      	str	r3, [sp, #4]
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	9300      	str	r3, [sp, #0]
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	f7ff fe0f 	bl	80127c8 <tcp_pbuf_prealloc>
 8012baa:	6578      	str	r0, [r7, #84]	; 0x54
 8012bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 8225 	beq.w	8012ffe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bb6:	6858      	ldr	r0, [r3, #4]
 8012bb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	4413      	add	r3, r2
 8012bc0:	8bfa      	ldrh	r2, [r7, #30]
 8012bc2:	4619      	mov	r1, r3
 8012bc4:	f006 fffc 	bl	8019bc0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012bc8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012bca:	f7fb f9db 	bl	800df84 <pbuf_clen>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bd6:	4413      	add	r3, r2
 8012bd8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012bdc:	e041      	b.n	8012c62 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	637b      	str	r3, [r7, #52]	; 0x34
 8012be4:	e002      	b.n	8012bec <tcp_write+0x23c>
 8012be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	637b      	str	r3, [r7, #52]	; 0x34
 8012bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d1f8      	bne.n	8012be6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bf6:	7b1b      	ldrb	r3, [r3, #12]
 8012bf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d115      	bne.n	8012c2c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c02:	685b      	ldr	r3, [r3, #4]
 8012c04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c06:	8952      	ldrh	r2, [r2, #10]
 8012c08:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d10d      	bne.n	8012c2c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012c10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d006      	beq.n	8012c26 <tcp_write+0x276>
 8012c18:	4b1c      	ldr	r3, [pc, #112]	; (8012c8c <tcp_write+0x2dc>)
 8012c1a:	f240 2231 	movw	r2, #561	; 0x231
 8012c1e:	4922      	ldr	r1, [pc, #136]	; (8012ca8 <tcp_write+0x2f8>)
 8012c20:	481c      	ldr	r0, [pc, #112]	; (8012c94 <tcp_write+0x2e4>)
 8012c22:	f006 fec7 	bl	80199b4 <iprintf>
          extendlen = seglen;
 8012c26:	8bfb      	ldrh	r3, [r7, #30]
 8012c28:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c2a:	e01a      	b.n	8012c62 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012c2c:	8bfb      	ldrh	r3, [r7, #30]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	4619      	mov	r1, r3
 8012c32:	2000      	movs	r0, #0
 8012c34:	f7fa fe34 	bl	800d8a0 <pbuf_alloc>
 8012c38:	6578      	str	r0, [r7, #84]	; 0x54
 8012c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	f000 81e0 	beq.w	8013002 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012c42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c46:	68ba      	ldr	r2, [r7, #8]
 8012c48:	441a      	add	r2, r3
 8012c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c4c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012c4e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012c50:	f7fb f998 	bl	800df84 <pbuf_clen>
 8012c54:	4603      	mov	r3, r0
 8012c56:	461a      	mov	r2, r3
 8012c58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012c5c:	4413      	add	r3, r2
 8012c5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012c62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012c66:	8bfb      	ldrh	r3, [r7, #30]
 8012c68:	4413      	add	r3, r2
 8012c6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012c6e:	e0dc      	b.n	8012e2a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 80d7 	beq.w	8012e2a <tcp_write+0x47a>
 8012c7c:	4b03      	ldr	r3, [pc, #12]	; (8012c8c <tcp_write+0x2dc>)
 8012c7e:	f240 224a 	movw	r2, #586	; 0x24a
 8012c82:	490a      	ldr	r1, [pc, #40]	; (8012cac <tcp_write+0x2fc>)
 8012c84:	4803      	ldr	r0, [pc, #12]	; (8012c94 <tcp_write+0x2e4>)
 8012c86:	f006 fe95 	bl	80199b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012c8a:	e0ce      	b.n	8012e2a <tcp_write+0x47a>
 8012c8c:	0801c3c0 	.word	0x0801c3c0
 8012c90:	0801c560 	.word	0x0801c560
 8012c94:	0801c414 	.word	0x0801c414
 8012c98:	0801c578 	.word	0x0801c578
 8012c9c:	0801c5ac 	.word	0x0801c5ac
 8012ca0:	0801c5c4 	.word	0x0801c5c4
 8012ca4:	0801c5e4 	.word	0x0801c5e4
 8012ca8:	0801c604 	.word	0x0801c604
 8012cac:	0801c630 	.word	0x0801c630
    struct pbuf *p;
    u16_t left = len - pos;
 8012cb0:	88fa      	ldrh	r2, [r7, #6]
 8012cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012cba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cc2:	1ad3      	subs	r3, r2, r3
 8012cc4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012cc6:	8b7a      	ldrh	r2, [r7, #26]
 8012cc8:	8bbb      	ldrh	r3, [r7, #28]
 8012cca:	4293      	cmp	r3, r2
 8012ccc:	bf28      	it	cs
 8012cce:	4613      	movcs	r3, r2
 8012cd0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012cd2:	797b      	ldrb	r3, [r7, #5]
 8012cd4:	f003 0301 	and.w	r3, r3, #1
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d036      	beq.n	8012d4a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012cdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	8b3b      	ldrh	r3, [r7, #24]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	b299      	uxth	r1, r3
 8012ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	bf0c      	ite	eq
 8012cee:	2301      	moveq	r3, #1
 8012cf0:	2300      	movne	r3, #0
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	f107 0012 	add.w	r0, r7, #18
 8012cf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cfa:	9302      	str	r3, [sp, #8]
 8012cfc:	797b      	ldrb	r3, [r7, #5]
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	9300      	str	r3, [sp, #0]
 8012d04:	4603      	mov	r3, r0
 8012d06:	2036      	movs	r0, #54	; 0x36
 8012d08:	f7ff fd5e 	bl	80127c8 <tcp_pbuf_prealloc>
 8012d0c:	6338      	str	r0, [r7, #48]	; 0x30
 8012d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	f000 8178 	beq.w	8013006 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d18:	895b      	ldrh	r3, [r3, #10]
 8012d1a:	8b3a      	ldrh	r2, [r7, #24]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d906      	bls.n	8012d2e <tcp_write+0x37e>
 8012d20:	4b8c      	ldr	r3, [pc, #560]	; (8012f54 <tcp_write+0x5a4>)
 8012d22:	f240 2266 	movw	r2, #614	; 0x266
 8012d26:	498c      	ldr	r1, [pc, #560]	; (8012f58 <tcp_write+0x5a8>)
 8012d28:	488c      	ldr	r0, [pc, #560]	; (8012f5c <tcp_write+0x5ac>)
 8012d2a:	f006 fe43 	bl	80199b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d36:	18d0      	adds	r0, r2, r3
 8012d38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d3c:	68ba      	ldr	r2, [r7, #8]
 8012d3e:	4413      	add	r3, r2
 8012d40:	8b3a      	ldrh	r2, [r7, #24]
 8012d42:	4619      	mov	r1, r3
 8012d44:	f006 ff3c 	bl	8019bc0 <memcpy>
 8012d48:	e02f      	b.n	8012daa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012d4a:	8a7b      	ldrh	r3, [r7, #18]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d006      	beq.n	8012d5e <tcp_write+0x3ae>
 8012d50:	4b80      	ldr	r3, [pc, #512]	; (8012f54 <tcp_write+0x5a4>)
 8012d52:	f240 2271 	movw	r2, #625	; 0x271
 8012d56:	4982      	ldr	r1, [pc, #520]	; (8012f60 <tcp_write+0x5b0>)
 8012d58:	4880      	ldr	r0, [pc, #512]	; (8012f5c <tcp_write+0x5ac>)
 8012d5a:	f006 fe2b 	bl	80199b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012d5e:	8b3b      	ldrh	r3, [r7, #24]
 8012d60:	2201      	movs	r2, #1
 8012d62:	4619      	mov	r1, r3
 8012d64:	2036      	movs	r0, #54	; 0x36
 8012d66:	f7fa fd9b 	bl	800d8a0 <pbuf_alloc>
 8012d6a:	6178      	str	r0, [r7, #20]
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 814b 	beq.w	801300a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012d74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d78:	68ba      	ldr	r2, [r7, #8]
 8012d7a:	441a      	add	r2, r3
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	2036      	movs	r0, #54	; 0x36
 8012d8e:	f7fa fd87 	bl	800d8a0 <pbuf_alloc>
 8012d92:	6338      	str	r0, [r7, #48]	; 0x30
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d103      	bne.n	8012da2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d9a:	6978      	ldr	r0, [r7, #20]
 8012d9c:	f7fb f864 	bl	800de68 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012da0:	e136      	b.n	8013010 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012da2:	6979      	ldr	r1, [r7, #20]
 8012da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012da6:	f7fb f92d 	bl	800e004 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012daa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dac:	f7fb f8ea 	bl	800df84 <pbuf_clen>
 8012db0:	4603      	mov	r3, r0
 8012db2:	461a      	mov	r2, r3
 8012db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012db8:	4413      	add	r3, r2
 8012dba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012dbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012dc2:	2b09      	cmp	r3, #9
 8012dc4:	d903      	bls.n	8012dce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dc8:	f7fb f84e 	bl	800de68 <pbuf_free>
      goto memerr;
 8012dcc:	e120      	b.n	8013010 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dd6:	441a      	add	r2, r3
 8012dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ddc:	9300      	str	r3, [sp, #0]
 8012dde:	4613      	mov	r3, r2
 8012de0:	2200      	movs	r2, #0
 8012de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012de4:	68f8      	ldr	r0, [r7, #12]
 8012de6:	f7ff fc51 	bl	801268c <tcp_create_segment>
 8012dea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	f000 810d 	beq.w	801300e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d102      	bne.n	8012e00 <tcp_write+0x450>
      queue = seg;
 8012dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8012dfe:	e00c      	b.n	8012e1a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <tcp_write+0x464>
 8012e06:	4b53      	ldr	r3, [pc, #332]	; (8012f54 <tcp_write+0x5a4>)
 8012e08:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012e0c:	4955      	ldr	r1, [pc, #340]	; (8012f64 <tcp_write+0x5b4>)
 8012e0e:	4853      	ldr	r0, [pc, #332]	; (8012f5c <tcp_write+0x5ac>)
 8012e10:	f006 fdd0 	bl	80199b4 <iprintf>
      prev_seg->next = seg;
 8012e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e18:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e1c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012e1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e22:	8b3b      	ldrh	r3, [r7, #24]
 8012e24:	4413      	add	r3, r2
 8012e26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012e2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012e2e:	88fb      	ldrh	r3, [r7, #6]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	f4ff af3d 	bcc.w	8012cb0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012e36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d02c      	beq.n	8012e96 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e42:	e01e      	b.n	8012e82 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e46:	891a      	ldrh	r2, [r3, #8]
 8012e48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e4a:	4413      	add	r3, r2
 8012e4c:	b29a      	uxth	r2, r3
 8012e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e50:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d110      	bne.n	8012e7c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012e60:	8952      	ldrh	r2, [r2, #10]
 8012e62:	4413      	add	r3, r2
 8012e64:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012e66:	68b9      	ldr	r1, [r7, #8]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f006 fea9 	bl	8019bc0 <memcpy>
        p->len += oversize_used;
 8012e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e70:	895a      	ldrh	r2, [r3, #10]
 8012e72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e74:	4413      	add	r3, r2
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d1dd      	bne.n	8012e44 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e8a:	891a      	ldrh	r2, [r3, #8]
 8012e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e8e:	4413      	add	r3, r2
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e94:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e96:	8a7a      	ldrh	r2, [r7, #18]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d018      	beq.n	8012ed6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d106      	bne.n	8012eb8 <tcp_write+0x508>
 8012eaa:	4b2a      	ldr	r3, [pc, #168]	; (8012f54 <tcp_write+0x5a4>)
 8012eac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012eb0:	492d      	ldr	r1, [pc, #180]	; (8012f68 <tcp_write+0x5b8>)
 8012eb2:	482a      	ldr	r0, [pc, #168]	; (8012f5c <tcp_write+0x5ac>)
 8012eb4:	f006 fd7e 	bl	80199b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eba:	685b      	ldr	r3, [r3, #4]
 8012ebc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fb f8a0 	bl	800e004 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ec6:	891a      	ldrh	r2, [r3, #8]
 8012ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012eca:	891b      	ldrh	r3, [r3, #8]
 8012ecc:	4413      	add	r3, r2
 8012ece:	b29a      	uxth	r2, r3
 8012ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ed2:	811a      	strh	r2, [r3, #8]
 8012ed4:	e037      	b.n	8012f46 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012ed6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d034      	beq.n	8012f46 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d003      	beq.n	8012eea <tcp_write+0x53a>
 8012ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <tcp_write+0x548>
 8012eea:	4b1a      	ldr	r3, [pc, #104]	; (8012f54 <tcp_write+0x5a4>)
 8012eec:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012ef0:	491e      	ldr	r1, [pc, #120]	; (8012f6c <tcp_write+0x5bc>)
 8012ef2:	481a      	ldr	r0, [pc, #104]	; (8012f5c <tcp_write+0x5ac>)
 8012ef4:	f006 fd5e 	bl	80199b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8012efe:	e009      	b.n	8012f14 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f02:	891a      	ldrh	r2, [r3, #8]
 8012f04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f06:	4413      	add	r3, r2
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f0c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1f1      	bne.n	8012f00 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1e:	891a      	ldrh	r2, [r3, #8]
 8012f20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f22:	4413      	add	r3, r2
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f28:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f2c:	895a      	ldrh	r2, [r3, #10]
 8012f2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f30:	4413      	add	r3, r2
 8012f32:	b29a      	uxth	r2, r3
 8012f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f36:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f3a:	891a      	ldrh	r2, [r3, #8]
 8012f3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012f3e:	4413      	add	r3, r2
 8012f40:	b29a      	uxth	r2, r3
 8012f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f44:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d111      	bne.n	8012f70 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f50:	66da      	str	r2, [r3, #108]	; 0x6c
 8012f52:	e010      	b.n	8012f76 <tcp_write+0x5c6>
 8012f54:	0801c3c0 	.word	0x0801c3c0
 8012f58:	0801c660 	.word	0x0801c660
 8012f5c:	0801c414 	.word	0x0801c414
 8012f60:	0801c6a0 	.word	0x0801c6a0
 8012f64:	0801c6b0 	.word	0x0801c6b0
 8012f68:	0801c6c4 	.word	0x0801c6c4
 8012f6c:	0801c6fc 	.word	0x0801c6fc
  } else {
    last_unsent->next = queue;
 8012f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f74:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f7a:	88fb      	ldrh	r3, [r7, #6]
 8012f7c:	441a      	add	r2, r3
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012f88:	88fb      	ldrh	r3, [r7, #6]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d00e      	beq.n	8012fc6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d10a      	bne.n	8012fc6 <tcp_write+0x616>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d106      	bne.n	8012fc6 <tcp_write+0x616>
 8012fb8:	4b2c      	ldr	r3, [pc, #176]	; (801306c <tcp_write+0x6bc>)
 8012fba:	f240 3212 	movw	r2, #786	; 0x312
 8012fbe:	492c      	ldr	r1, [pc, #176]	; (8013070 <tcp_write+0x6c0>)
 8012fc0:	482c      	ldr	r0, [pc, #176]	; (8013074 <tcp_write+0x6c4>)
 8012fc2:	f006 fcf7 	bl	80199b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d016      	beq.n	8012ffa <tcp_write+0x64a>
 8012fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d012      	beq.n	8012ffa <tcp_write+0x64a>
 8012fd4:	797b      	ldrb	r3, [r7, #5]
 8012fd6:	f003 0302 	and.w	r3, r3, #2
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d10d      	bne.n	8012ffa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fe0:	68db      	ldr	r3, [r3, #12]
 8012fe2:	899b      	ldrh	r3, [r3, #12]
 8012fe4:	b29c      	uxth	r4, r3
 8012fe6:	2008      	movs	r0, #8
 8012fe8:	f7f9 fad6 	bl	800c598 <lwip_htons>
 8012fec:	4603      	mov	r3, r0
 8012fee:	461a      	mov	r2, r3
 8012ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ff2:	68db      	ldr	r3, [r3, #12]
 8012ff4:	4322      	orrs	r2, r4
 8012ff6:	b292      	uxth	r2, r2
 8012ff8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	e031      	b.n	8013062 <tcp_write+0x6b2>
          goto memerr;
 8012ffe:	bf00      	nop
 8013000:	e006      	b.n	8013010 <tcp_write+0x660>
            goto memerr;
 8013002:	bf00      	nop
 8013004:	e004      	b.n	8013010 <tcp_write+0x660>
        goto memerr;
 8013006:	bf00      	nop
 8013008:	e002      	b.n	8013010 <tcp_write+0x660>
        goto memerr;
 801300a:	bf00      	nop
 801300c:	e000      	b.n	8013010 <tcp_write+0x660>
      goto memerr;
 801300e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	8b5b      	ldrh	r3, [r3, #26]
 8013014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013018:	b29a      	uxth	r2, r3
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801301e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013020:	2b00      	cmp	r3, #0
 8013022:	d002      	beq.n	801302a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013024:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013026:	f7fa ff1f 	bl	800de68 <pbuf_free>
  }
  if (queue != NULL) {
 801302a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801302c:	2b00      	cmp	r3, #0
 801302e:	d002      	beq.n	8013036 <tcp_write+0x686>
    tcp_segs_free(queue);
 8013030:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013032:	f7fc fb4d 	bl	800f6d0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801303c:	2b00      	cmp	r3, #0
 801303e:	d00e      	beq.n	801305e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10a      	bne.n	801305e <tcp_write+0x6ae>
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304c:	2b00      	cmp	r3, #0
 801304e:	d106      	bne.n	801305e <tcp_write+0x6ae>
 8013050:	4b06      	ldr	r3, [pc, #24]	; (801306c <tcp_write+0x6bc>)
 8013052:	f240 3227 	movw	r2, #807	; 0x327
 8013056:	4906      	ldr	r1, [pc, #24]	; (8013070 <tcp_write+0x6c0>)
 8013058:	4806      	ldr	r0, [pc, #24]	; (8013074 <tcp_write+0x6c4>)
 801305a:	f006 fcab 	bl	80199b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801305e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013062:	4618      	mov	r0, r3
 8013064:	375c      	adds	r7, #92	; 0x5c
 8013066:	46bd      	mov	sp, r7
 8013068:	bd90      	pop	{r4, r7, pc}
 801306a:	bf00      	nop
 801306c:	0801c3c0 	.word	0x0801c3c0
 8013070:	0801c734 	.word	0x0801c734
 8013074:	0801c414 	.word	0x0801c414

08013078 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013078:	b590      	push	{r4, r7, lr}
 801307a:	b08b      	sub	sp, #44	; 0x2c
 801307c:	af02      	add	r7, sp, #8
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013084:	2300      	movs	r3, #0
 8013086:	61fb      	str	r3, [r7, #28]
 8013088:	2300      	movs	r3, #0
 801308a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801308c:	2300      	movs	r3, #0
 801308e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <tcp_split_unsent_seg+0x2c>
 8013096:	4b95      	ldr	r3, [pc, #596]	; (80132ec <tcp_split_unsent_seg+0x274>)
 8013098:	f240 324b 	movw	r2, #843	; 0x34b
 801309c:	4994      	ldr	r1, [pc, #592]	; (80132f0 <tcp_split_unsent_seg+0x278>)
 801309e:	4895      	ldr	r0, [pc, #596]	; (80132f4 <tcp_split_unsent_seg+0x27c>)
 80130a0:	f006 fc88 	bl	80199b4 <iprintf>

  useg = pcb->unsent;
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80130aa:	697b      	ldr	r3, [r7, #20]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d102      	bne.n	80130b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80130b0:	f04f 33ff 	mov.w	r3, #4294967295
 80130b4:	e116      	b.n	80132e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80130b6:	887b      	ldrh	r3, [r7, #2]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d109      	bne.n	80130d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80130bc:	4b8b      	ldr	r3, [pc, #556]	; (80132ec <tcp_split_unsent_seg+0x274>)
 80130be:	f240 3253 	movw	r2, #851	; 0x353
 80130c2:	498d      	ldr	r1, [pc, #564]	; (80132f8 <tcp_split_unsent_seg+0x280>)
 80130c4:	488b      	ldr	r0, [pc, #556]	; (80132f4 <tcp_split_unsent_seg+0x27c>)
 80130c6:	f006 fc75 	bl	80199b4 <iprintf>
    return ERR_VAL;
 80130ca:	f06f 0305 	mvn.w	r3, #5
 80130ce:	e109      	b.n	80132e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	891b      	ldrh	r3, [r3, #8]
 80130d4:	887a      	ldrh	r2, [r7, #2]
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d301      	bcc.n	80130de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80130da:	2300      	movs	r3, #0
 80130dc:	e102      	b.n	80132e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130e2:	887a      	ldrh	r2, [r7, #2]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d906      	bls.n	80130f6 <tcp_split_unsent_seg+0x7e>
 80130e8:	4b80      	ldr	r3, [pc, #512]	; (80132ec <tcp_split_unsent_seg+0x274>)
 80130ea:	f240 325b 	movw	r2, #859	; 0x35b
 80130ee:	4983      	ldr	r1, [pc, #524]	; (80132fc <tcp_split_unsent_seg+0x284>)
 80130f0:	4880      	ldr	r0, [pc, #512]	; (80132f4 <tcp_split_unsent_seg+0x27c>)
 80130f2:	f006 fc5f 	bl	80199b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	891b      	ldrh	r3, [r3, #8]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d106      	bne.n	801310c <tcp_split_unsent_seg+0x94>
 80130fe:	4b7b      	ldr	r3, [pc, #492]	; (80132ec <tcp_split_unsent_seg+0x274>)
 8013100:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013104:	497e      	ldr	r1, [pc, #504]	; (8013300 <tcp_split_unsent_seg+0x288>)
 8013106:	487b      	ldr	r0, [pc, #492]	; (80132f4 <tcp_split_unsent_seg+0x27c>)
 8013108:	f006 fc54 	bl	80199b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	7a9b      	ldrb	r3, [r3, #10]
 8013110:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013112:	7bfb      	ldrb	r3, [r7, #15]
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	891a      	ldrh	r2, [r3, #8]
 8013122:	887b      	ldrh	r3, [r7, #2]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013128:	7bbb      	ldrb	r3, [r7, #14]
 801312a:	b29a      	uxth	r2, r3
 801312c:	89bb      	ldrh	r3, [r7, #12]
 801312e:	4413      	add	r3, r2
 8013130:	b29b      	uxth	r3, r3
 8013132:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013136:	4619      	mov	r1, r3
 8013138:	2036      	movs	r0, #54	; 0x36
 801313a:	f7fa fbb1 	bl	800d8a0 <pbuf_alloc>
 801313e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	2b00      	cmp	r3, #0
 8013144:	f000 80b7 	beq.w	80132b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	891a      	ldrh	r2, [r3, #8]
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	891b      	ldrh	r3, [r3, #8]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	b29a      	uxth	r2, r3
 8013156:	887b      	ldrh	r3, [r7, #2]
 8013158:	4413      	add	r3, r2
 801315a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	6858      	ldr	r0, [r3, #4]
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	685a      	ldr	r2, [r3, #4]
 8013164:	7bbb      	ldrb	r3, [r7, #14]
 8013166:	18d1      	adds	r1, r2, r3
 8013168:	897b      	ldrh	r3, [r7, #10]
 801316a:	89ba      	ldrh	r2, [r7, #12]
 801316c:	f7fb f882 	bl	800e274 <pbuf_copy_partial>
 8013170:	4603      	mov	r3, r0
 8013172:	461a      	mov	r2, r3
 8013174:	89bb      	ldrh	r3, [r7, #12]
 8013176:	4293      	cmp	r3, r2
 8013178:	f040 809f 	bne.w	80132ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	68db      	ldr	r3, [r3, #12]
 8013180:	899b      	ldrh	r3, [r3, #12]
 8013182:	b29b      	uxth	r3, r3
 8013184:	4618      	mov	r0, r3
 8013186:	f7f9 fa07 	bl	800c598 <lwip_htons>
 801318a:	4603      	mov	r3, r0
 801318c:	b2db      	uxtb	r3, r3
 801318e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013192:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013194:	2300      	movs	r3, #0
 8013196:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013198:	7efb      	ldrb	r3, [r7, #27]
 801319a:	f003 0308 	and.w	r3, r3, #8
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d007      	beq.n	80131b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80131a2:	7efb      	ldrb	r3, [r7, #27]
 80131a4:	f023 0308 	bic.w	r3, r3, #8
 80131a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80131aa:	7ebb      	ldrb	r3, [r7, #26]
 80131ac:	f043 0308 	orr.w	r3, r3, #8
 80131b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80131b2:	7efb      	ldrb	r3, [r7, #27]
 80131b4:	f003 0301 	and.w	r3, r3, #1
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d007      	beq.n	80131cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80131bc:	7efb      	ldrb	r3, [r7, #27]
 80131be:	f023 0301 	bic.w	r3, r3, #1
 80131c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80131c4:	7ebb      	ldrb	r3, [r7, #26]
 80131c6:	f043 0301 	orr.w	r3, r3, #1
 80131ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	4618      	mov	r0, r3
 80131d4:	f7f9 f9f5 	bl	800c5c2 <lwip_htonl>
 80131d8:	4602      	mov	r2, r0
 80131da:	887b      	ldrh	r3, [r7, #2]
 80131dc:	18d1      	adds	r1, r2, r3
 80131de:	7eba      	ldrb	r2, [r7, #26]
 80131e0:	7bfb      	ldrb	r3, [r7, #15]
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	460b      	mov	r3, r1
 80131e6:	6939      	ldr	r1, [r7, #16]
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff fa4f 	bl	801268c <tcp_create_segment>
 80131ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d063      	beq.n	80132be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	685b      	ldr	r3, [r3, #4]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fa fec2 	bl	800df84 <pbuf_clen>
 8013200:	4603      	mov	r3, r0
 8013202:	461a      	mov	r2, r3
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801320a:	1a9b      	subs	r3, r3, r2
 801320c:	b29a      	uxth	r2, r3
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	6858      	ldr	r0, [r3, #4]
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	891a      	ldrh	r2, [r3, #8]
 801321e:	89bb      	ldrh	r3, [r7, #12]
 8013220:	1ad3      	subs	r3, r2, r3
 8013222:	b29b      	uxth	r3, r3
 8013224:	4619      	mov	r1, r3
 8013226:	f7fa fc99 	bl	800db5c <pbuf_realloc>
  useg->len -= remainder;
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	891a      	ldrh	r2, [r3, #8]
 801322e:	89bb      	ldrh	r3, [r7, #12]
 8013230:	1ad3      	subs	r3, r2, r3
 8013232:	b29a      	uxth	r2, r3
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	899b      	ldrh	r3, [r3, #12]
 801323e:	b29c      	uxth	r4, r3
 8013240:	7efb      	ldrb	r3, [r7, #27]
 8013242:	b29b      	uxth	r3, r3
 8013244:	4618      	mov	r0, r3
 8013246:	f7f9 f9a7 	bl	800c598 <lwip_htons>
 801324a:	4603      	mov	r3, r0
 801324c:	461a      	mov	r2, r3
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	4322      	orrs	r2, r4
 8013254:	b292      	uxth	r2, r2
 8013256:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	685b      	ldr	r3, [r3, #4]
 801325c:	4618      	mov	r0, r3
 801325e:	f7fa fe91 	bl	800df84 <pbuf_clen>
 8013262:	4603      	mov	r3, r0
 8013264:	461a      	mov	r2, r3
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801326c:	4413      	add	r3, r2
 801326e:	b29a      	uxth	r2, r3
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013276:	69fb      	ldr	r3, [r7, #28]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	4618      	mov	r0, r3
 801327c:	f7fa fe82 	bl	800df84 <pbuf_clen>
 8013280:	4603      	mov	r3, r0
 8013282:	461a      	mov	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801328a:	4413      	add	r3, r2
 801328c:	b29a      	uxth	r2, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	69fb      	ldr	r3, [r7, #28]
 801329a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801329c:	697b      	ldr	r3, [r7, #20]
 801329e:	69fa      	ldr	r2, [r7, #28]
 80132a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d103      	bne.n	80132b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e016      	b.n	80132e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80132b6:	bf00      	nop
 80132b8:	e002      	b.n	80132c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80132ba:	bf00      	nop
 80132bc:	e000      	b.n	80132c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80132be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80132c0:	69fb      	ldr	r3, [r7, #28]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d006      	beq.n	80132d4 <tcp_split_unsent_seg+0x25c>
 80132c6:	4b09      	ldr	r3, [pc, #36]	; (80132ec <tcp_split_unsent_seg+0x274>)
 80132c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80132cc:	490d      	ldr	r1, [pc, #52]	; (8013304 <tcp_split_unsent_seg+0x28c>)
 80132ce:	4809      	ldr	r0, [pc, #36]	; (80132f4 <tcp_split_unsent_seg+0x27c>)
 80132d0:	f006 fb70 	bl	80199b4 <iprintf>
  if (p != NULL) {
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d002      	beq.n	80132e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80132da:	6938      	ldr	r0, [r7, #16]
 80132dc:	f7fa fdc4 	bl	800de68 <pbuf_free>
  }

  return ERR_MEM;
 80132e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80132e4:	4618      	mov	r0, r3
 80132e6:	3724      	adds	r7, #36	; 0x24
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd90      	pop	{r4, r7, pc}
 80132ec:	0801c3c0 	.word	0x0801c3c0
 80132f0:	0801c754 	.word	0x0801c754
 80132f4:	0801c414 	.word	0x0801c414
 80132f8:	0801c778 	.word	0x0801c778
 80132fc:	0801c79c 	.word	0x0801c79c
 8013300:	0801c7ac 	.word	0x0801c7ac
 8013304:	0801c7bc 	.word	0x0801c7bc

08013308 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013308:	b590      	push	{r4, r7, lr}
 801330a:	b085      	sub	sp, #20
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d106      	bne.n	8013324 <tcp_send_fin+0x1c>
 8013316:	4b21      	ldr	r3, [pc, #132]	; (801339c <tcp_send_fin+0x94>)
 8013318:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801331c:	4920      	ldr	r1, [pc, #128]	; (80133a0 <tcp_send_fin+0x98>)
 801331e:	4821      	ldr	r0, [pc, #132]	; (80133a4 <tcp_send_fin+0x9c>)
 8013320:	f006 fb48 	bl	80199b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013328:	2b00      	cmp	r3, #0
 801332a:	d02e      	beq.n	801338a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013330:	60fb      	str	r3, [r7, #12]
 8013332:	e002      	b.n	801333a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d1f8      	bne.n	8013334 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	899b      	ldrh	r3, [r3, #12]
 8013348:	b29b      	uxth	r3, r3
 801334a:	4618      	mov	r0, r3
 801334c:	f7f9 f924 	bl	800c598 <lwip_htons>
 8013350:	4603      	mov	r3, r0
 8013352:	b2db      	uxtb	r3, r3
 8013354:	f003 0307 	and.w	r3, r3, #7
 8013358:	2b00      	cmp	r3, #0
 801335a:	d116      	bne.n	801338a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	899b      	ldrh	r3, [r3, #12]
 8013362:	b29c      	uxth	r4, r3
 8013364:	2001      	movs	r0, #1
 8013366:	f7f9 f917 	bl	800c598 <lwip_htons>
 801336a:	4603      	mov	r3, r0
 801336c:	461a      	mov	r2, r3
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	68db      	ldr	r3, [r3, #12]
 8013372:	4322      	orrs	r2, r4
 8013374:	b292      	uxth	r2, r2
 8013376:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	8b5b      	ldrh	r3, [r3, #26]
 801337c:	f043 0320 	orr.w	r3, r3, #32
 8013380:	b29a      	uxth	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013386:	2300      	movs	r3, #0
 8013388:	e004      	b.n	8013394 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801338a:	2101      	movs	r1, #1
 801338c:	6878      	ldr	r0, [r7, #4]
 801338e:	f000 f80b 	bl	80133a8 <tcp_enqueue_flags>
 8013392:	4603      	mov	r3, r0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3714      	adds	r7, #20
 8013398:	46bd      	mov	sp, r7
 801339a:	bd90      	pop	{r4, r7, pc}
 801339c:	0801c3c0 	.word	0x0801c3c0
 80133a0:	0801c7c8 	.word	0x0801c7c8
 80133a4:	0801c414 	.word	0x0801c414

080133a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b08a      	sub	sp, #40	; 0x28
 80133ac:	af02      	add	r7, sp, #8
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	460b      	mov	r3, r1
 80133b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80133b8:	2300      	movs	r3, #0
 80133ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80133bc:	78fb      	ldrb	r3, [r7, #3]
 80133be:	f003 0303 	and.w	r3, r3, #3
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d106      	bne.n	80133d4 <tcp_enqueue_flags+0x2c>
 80133c6:	4b67      	ldr	r3, [pc, #412]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 80133c8:	f240 4211 	movw	r2, #1041	; 0x411
 80133cc:	4966      	ldr	r1, [pc, #408]	; (8013568 <tcp_enqueue_flags+0x1c0>)
 80133ce:	4867      	ldr	r0, [pc, #412]	; (801356c <tcp_enqueue_flags+0x1c4>)
 80133d0:	f006 faf0 	bl	80199b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d106      	bne.n	80133e8 <tcp_enqueue_flags+0x40>
 80133da:	4b62      	ldr	r3, [pc, #392]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 80133dc:	f240 4213 	movw	r2, #1043	; 0x413
 80133e0:	4963      	ldr	r1, [pc, #396]	; (8013570 <tcp_enqueue_flags+0x1c8>)
 80133e2:	4862      	ldr	r0, [pc, #392]	; (801356c <tcp_enqueue_flags+0x1c4>)
 80133e4:	f006 fae6 	bl	80199b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80133e8:	78fb      	ldrb	r3, [r7, #3]
 80133ea:	f003 0302 	and.w	r3, r3, #2
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d001      	beq.n	80133f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80133f2:	2301      	movs	r3, #1
 80133f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80133f6:	7ffb      	ldrb	r3, [r7, #31]
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	f003 0304 	and.w	r3, r3, #4
 8013400:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013402:	7dfb      	ldrb	r3, [r7, #23]
 8013404:	b29b      	uxth	r3, r3
 8013406:	f44f 7220 	mov.w	r2, #640	; 0x280
 801340a:	4619      	mov	r1, r3
 801340c:	2036      	movs	r0, #54	; 0x36
 801340e:	f7fa fa47 	bl	800d8a0 <pbuf_alloc>
 8013412:	6138      	str	r0, [r7, #16]
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d109      	bne.n	801342e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	8b5b      	ldrh	r3, [r3, #26]
 801341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013422:	b29a      	uxth	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013428:	f04f 33ff 	mov.w	r3, #4294967295
 801342c:	e095      	b.n	801355a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	895a      	ldrh	r2, [r3, #10]
 8013432:	7dfb      	ldrb	r3, [r7, #23]
 8013434:	b29b      	uxth	r3, r3
 8013436:	429a      	cmp	r2, r3
 8013438:	d206      	bcs.n	8013448 <tcp_enqueue_flags+0xa0>
 801343a:	4b4a      	ldr	r3, [pc, #296]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 801343c:	f240 4239 	movw	r2, #1081	; 0x439
 8013440:	494c      	ldr	r1, [pc, #304]	; (8013574 <tcp_enqueue_flags+0x1cc>)
 8013442:	484a      	ldr	r0, [pc, #296]	; (801356c <tcp_enqueue_flags+0x1c4>)
 8013444:	f006 fab6 	bl	80199b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801344c:	78fa      	ldrb	r2, [r7, #3]
 801344e:	7ffb      	ldrb	r3, [r7, #31]
 8013450:	9300      	str	r3, [sp, #0]
 8013452:	460b      	mov	r3, r1
 8013454:	6939      	ldr	r1, [r7, #16]
 8013456:	6878      	ldr	r0, [r7, #4]
 8013458:	f7ff f918 	bl	801268c <tcp_create_segment>
 801345c:	60f8      	str	r0, [r7, #12]
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d109      	bne.n	8013478 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	8b5b      	ldrh	r3, [r3, #26]
 8013468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801346c:	b29a      	uxth	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013472:	f04f 33ff 	mov.w	r3, #4294967295
 8013476:	e070      	b.n	801355a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	f003 0303 	and.w	r3, r3, #3
 8013480:	2b00      	cmp	r3, #0
 8013482:	d006      	beq.n	8013492 <tcp_enqueue_flags+0xea>
 8013484:	4b37      	ldr	r3, [pc, #220]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 8013486:	f240 4242 	movw	r2, #1090	; 0x442
 801348a:	493b      	ldr	r1, [pc, #236]	; (8013578 <tcp_enqueue_flags+0x1d0>)
 801348c:	4837      	ldr	r0, [pc, #220]	; (801356c <tcp_enqueue_flags+0x1c4>)
 801348e:	f006 fa91 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	891b      	ldrh	r3, [r3, #8]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d006      	beq.n	80134a8 <tcp_enqueue_flags+0x100>
 801349a:	4b32      	ldr	r3, [pc, #200]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 801349c:	f240 4243 	movw	r2, #1091	; 0x443
 80134a0:	4936      	ldr	r1, [pc, #216]	; (801357c <tcp_enqueue_flags+0x1d4>)
 80134a2:	4832      	ldr	r0, [pc, #200]	; (801356c <tcp_enqueue_flags+0x1c4>)
 80134a4:	f006 fa86 	bl	80199b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d103      	bne.n	80134b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80134b6:	e00d      	b.n	80134d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134bc:	61bb      	str	r3, [r7, #24]
 80134be:	e002      	b.n	80134c6 <tcp_enqueue_flags+0x11e>
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	61bb      	str	r3, [r7, #24]
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1f8      	bne.n	80134c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80134ce:	69bb      	ldr	r3, [r7, #24]
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80134dc:	78fb      	ldrb	r3, [r7, #3]
 80134de:	f003 0302 	and.w	r3, r3, #2
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d104      	bne.n	80134f0 <tcp_enqueue_flags+0x148>
 80134e6:	78fb      	ldrb	r3, [r7, #3]
 80134e8:	f003 0301 	and.w	r3, r3, #1
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d004      	beq.n	80134fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134f4:	1c5a      	adds	r2, r3, #1
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80134fa:	78fb      	ldrb	r3, [r7, #3]
 80134fc:	f003 0301 	and.w	r3, r3, #1
 8013500:	2b00      	cmp	r3, #0
 8013502:	d006      	beq.n	8013512 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	8b5b      	ldrh	r3, [r3, #26]
 8013508:	f043 0320 	orr.w	r3, r3, #32
 801350c:	b29a      	uxth	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	685b      	ldr	r3, [r3, #4]
 8013516:	4618      	mov	r0, r3
 8013518:	f7fa fd34 	bl	800df84 <pbuf_clen>
 801351c:	4603      	mov	r3, r0
 801351e:	461a      	mov	r2, r3
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013526:	4413      	add	r3, r2
 8013528:	b29a      	uxth	r2, r3
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00e      	beq.n	8013558 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801353e:	2b00      	cmp	r3, #0
 8013540:	d10a      	bne.n	8013558 <tcp_enqueue_flags+0x1b0>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <tcp_enqueue_flags+0x1b0>
 801354a:	4b06      	ldr	r3, [pc, #24]	; (8013564 <tcp_enqueue_flags+0x1bc>)
 801354c:	f240 4265 	movw	r2, #1125	; 0x465
 8013550:	490b      	ldr	r1, [pc, #44]	; (8013580 <tcp_enqueue_flags+0x1d8>)
 8013552:	4806      	ldr	r0, [pc, #24]	; (801356c <tcp_enqueue_flags+0x1c4>)
 8013554:	f006 fa2e 	bl	80199b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3720      	adds	r7, #32
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	0801c3c0 	.word	0x0801c3c0
 8013568:	0801c7e4 	.word	0x0801c7e4
 801356c:	0801c414 	.word	0x0801c414
 8013570:	0801c83c 	.word	0x0801c83c
 8013574:	0801c85c 	.word	0x0801c85c
 8013578:	0801c898 	.word	0x0801c898
 801357c:	0801c8b0 	.word	0x0801c8b0
 8013580:	0801c8dc 	.word	0x0801c8dc

08013584 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013584:	b5b0      	push	{r4, r5, r7, lr}
 8013586:	b08a      	sub	sp, #40	; 0x28
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	2b00      	cmp	r3, #0
 8013590:	d106      	bne.n	80135a0 <tcp_output+0x1c>
 8013592:	4b8a      	ldr	r3, [pc, #552]	; (80137bc <tcp_output+0x238>)
 8013594:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013598:	4989      	ldr	r1, [pc, #548]	; (80137c0 <tcp_output+0x23c>)
 801359a:	488a      	ldr	r0, [pc, #552]	; (80137c4 <tcp_output+0x240>)
 801359c:	f006 fa0a 	bl	80199b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	7d1b      	ldrb	r3, [r3, #20]
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d106      	bne.n	80135b6 <tcp_output+0x32>
 80135a8:	4b84      	ldr	r3, [pc, #528]	; (80137bc <tcp_output+0x238>)
 80135aa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80135ae:	4986      	ldr	r1, [pc, #536]	; (80137c8 <tcp_output+0x244>)
 80135b0:	4884      	ldr	r0, [pc, #528]	; (80137c4 <tcp_output+0x240>)
 80135b2:	f006 f9ff 	bl	80199b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80135b6:	4b85      	ldr	r3, [pc, #532]	; (80137cc <tcp_output+0x248>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d101      	bne.n	80135c4 <tcp_output+0x40>
    return ERR_OK;
 80135c0:	2300      	movs	r3, #0
 80135c2:	e1ce      	b.n	8013962 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135d0:	4293      	cmp	r3, r2
 80135d2:	bf28      	it	cs
 80135d4:	4613      	movcs	r3, r2
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135de:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80135e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d10b      	bne.n	80135fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	8b5b      	ldrh	r3, [r3, #26]
 80135ea:	f003 0302 	and.w	r3, r3, #2
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	f000 81aa 	beq.w	8013948 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f000 fdcb 	bl	8014190 <tcp_send_empty_ack>
 80135fa:	4603      	mov	r3, r0
 80135fc:	e1b1      	b.n	8013962 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80135fe:	6879      	ldr	r1, [r7, #4]
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	3304      	adds	r3, #4
 8013604:	461a      	mov	r2, r3
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7ff f824 	bl	8012654 <tcp_route>
 801360c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d102      	bne.n	801361a <tcp_output+0x96>
    return ERR_RTE;
 8013614:	f06f 0303 	mvn.w	r3, #3
 8013618:	e1a3      	b.n	8013962 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d003      	beq.n	8013628 <tcp_output+0xa4>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d111      	bne.n	801364c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d002      	beq.n	8013634 <tcp_output+0xb0>
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	3304      	adds	r3, #4
 8013632:	e000      	b.n	8013636 <tcp_output+0xb2>
 8013634:	2300      	movs	r3, #0
 8013636:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013638:	693b      	ldr	r3, [r7, #16]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d102      	bne.n	8013644 <tcp_output+0xc0>
      return ERR_RTE;
 801363e:	f06f 0303 	mvn.w	r3, #3
 8013642:	e18e      	b.n	8013962 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7f8 ffb5 	bl	800c5c2 <lwip_htonl>
 8013658:	4602      	mov	r2, r0
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013662:	8912      	ldrh	r2, [r2, #8]
 8013664:	4413      	add	r3, r2
 8013666:	69ba      	ldr	r2, [r7, #24]
 8013668:	429a      	cmp	r2, r3
 801366a:	d227      	bcs.n	80136bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013672:	461a      	mov	r2, r3
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	4293      	cmp	r3, r2
 8013678:	d114      	bne.n	80136a4 <tcp_output+0x120>
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801367e:	2b00      	cmp	r3, #0
 8013680:	d110      	bne.n	80136a4 <tcp_output+0x120>
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013688:	2b00      	cmp	r3, #0
 801368a:	d10b      	bne.n	80136a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2201      	movs	r2, #1
 8013698:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	8b5b      	ldrh	r3, [r3, #26]
 80136a8:	f003 0302 	and.w	r3, r3, #2
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 814d 	beq.w	801394c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f000 fd6c 	bl	8014190 <tcp_send_empty_ack>
 80136b8:	4603      	mov	r3, r0
 80136ba:	e152      	b.n	8013962 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2200      	movs	r2, #0
 80136c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80136ca:	6a3b      	ldr	r3, [r7, #32]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 811c 	beq.w	801390a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80136d2:	e002      	b.n	80136da <tcp_output+0x156>
 80136d4:	6a3b      	ldr	r3, [r7, #32]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	623b      	str	r3, [r7, #32]
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d1f8      	bne.n	80136d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80136e2:	e112      	b.n	801390a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80136e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e6:	68db      	ldr	r3, [r3, #12]
 80136e8:	899b      	ldrh	r3, [r3, #12]
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7f8 ff53 	bl	800c598 <lwip_htons>
 80136f2:	4603      	mov	r3, r0
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	f003 0304 	and.w	r3, r3, #4
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d006      	beq.n	801370c <tcp_output+0x188>
 80136fe:	4b2f      	ldr	r3, [pc, #188]	; (80137bc <tcp_output+0x238>)
 8013700:	f240 5236 	movw	r2, #1334	; 0x536
 8013704:	4932      	ldr	r1, [pc, #200]	; (80137d0 <tcp_output+0x24c>)
 8013706:	482f      	ldr	r0, [pc, #188]	; (80137c4 <tcp_output+0x240>)
 8013708:	f006 f954 	bl	80199b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013710:	2b00      	cmp	r3, #0
 8013712:	d01f      	beq.n	8013754 <tcp_output+0x1d0>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8b5b      	ldrh	r3, [r3, #26]
 8013718:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801371c:	2b00      	cmp	r3, #0
 801371e:	d119      	bne.n	8013754 <tcp_output+0x1d0>
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00b      	beq.n	8013740 <tcp_output+0x1bc>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d110      	bne.n	8013754 <tcp_output+0x1d0>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013736:	891a      	ldrh	r2, [r3, #8]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801373c:	429a      	cmp	r2, r3
 801373e:	d209      	bcs.n	8013754 <tcp_output+0x1d0>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013746:	2b00      	cmp	r3, #0
 8013748:	d004      	beq.n	8013754 <tcp_output+0x1d0>
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013750:	2b08      	cmp	r3, #8
 8013752:	d901      	bls.n	8013758 <tcp_output+0x1d4>
 8013754:	2301      	movs	r3, #1
 8013756:	e000      	b.n	801375a <tcp_output+0x1d6>
 8013758:	2300      	movs	r3, #0
 801375a:	2b00      	cmp	r3, #0
 801375c:	d106      	bne.n	801376c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	8b5b      	ldrh	r3, [r3, #26]
 8013762:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013766:	2b00      	cmp	r3, #0
 8013768:	f000 80e4 	beq.w	8013934 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	7d1b      	ldrb	r3, [r3, #20]
 8013770:	2b02      	cmp	r3, #2
 8013772:	d00d      	beq.n	8013790 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	899b      	ldrh	r3, [r3, #12]
 801377a:	b29c      	uxth	r4, r3
 801377c:	2010      	movs	r0, #16
 801377e:	f7f8 ff0b 	bl	800c598 <lwip_htons>
 8013782:	4603      	mov	r3, r0
 8013784:	461a      	mov	r2, r3
 8013786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013788:	68db      	ldr	r3, [r3, #12]
 801378a:	4322      	orrs	r2, r4
 801378c:	b292      	uxth	r2, r2
 801378e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013790:	697a      	ldr	r2, [r7, #20]
 8013792:	6879      	ldr	r1, [r7, #4]
 8013794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013796:	f000 f909 	bl	80139ac <tcp_output_segment>
 801379a:	4603      	mov	r3, r0
 801379c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d016      	beq.n	80137d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	8b5b      	ldrh	r3, [r3, #26]
 80137aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	835a      	strh	r2, [r3, #26]
      return err;
 80137b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137b8:	e0d3      	b.n	8013962 <tcp_output+0x3de>
 80137ba:	bf00      	nop
 80137bc:	0801c3c0 	.word	0x0801c3c0
 80137c0:	0801c904 	.word	0x0801c904
 80137c4:	0801c414 	.word	0x0801c414
 80137c8:	0801c91c 	.word	0x0801c91c
 80137cc:	2000cf68 	.word	0x2000cf68
 80137d0:	0801c944 	.word	0x0801c944
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d6:	681a      	ldr	r2, [r3, #0]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	7d1b      	ldrb	r3, [r3, #20]
 80137e0:	2b02      	cmp	r3, #2
 80137e2:	d006      	beq.n	80137f2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	8b5b      	ldrh	r3, [r3, #26]
 80137e8:	f023 0303 	bic.w	r3, r3, #3
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7f8 fee2 	bl	800c5c2 <lwip_htonl>
 80137fe:	4604      	mov	r4, r0
 8013800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013802:	891b      	ldrh	r3, [r3, #8]
 8013804:	461d      	mov	r5, r3
 8013806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	899b      	ldrh	r3, [r3, #12]
 801380c:	b29b      	uxth	r3, r3
 801380e:	4618      	mov	r0, r3
 8013810:	f7f8 fec2 	bl	800c598 <lwip_htons>
 8013814:	4603      	mov	r3, r0
 8013816:	b2db      	uxtb	r3, r3
 8013818:	f003 0303 	and.w	r3, r3, #3
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <tcp_output+0x2a0>
 8013820:	2301      	movs	r3, #1
 8013822:	e000      	b.n	8013826 <tcp_output+0x2a2>
 8013824:	2300      	movs	r3, #0
 8013826:	442b      	add	r3, r5
 8013828:	4423      	add	r3, r4
 801382a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	1ad3      	subs	r3, r2, r3
 8013834:	2b00      	cmp	r3, #0
 8013836:	da02      	bge.n	801383e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	68ba      	ldr	r2, [r7, #8]
 801383c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801383e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013840:	891b      	ldrh	r3, [r3, #8]
 8013842:	461c      	mov	r4, r3
 8013844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	899b      	ldrh	r3, [r3, #12]
 801384a:	b29b      	uxth	r3, r3
 801384c:	4618      	mov	r0, r3
 801384e:	f7f8 fea3 	bl	800c598 <lwip_htons>
 8013852:	4603      	mov	r3, r0
 8013854:	b2db      	uxtb	r3, r3
 8013856:	f003 0303 	and.w	r3, r3, #3
 801385a:	2b00      	cmp	r3, #0
 801385c:	d001      	beq.n	8013862 <tcp_output+0x2de>
 801385e:	2301      	movs	r3, #1
 8013860:	e000      	b.n	8013864 <tcp_output+0x2e0>
 8013862:	2300      	movs	r3, #0
 8013864:	4423      	add	r3, r4
 8013866:	2b00      	cmp	r3, #0
 8013868:	d049      	beq.n	80138fe <tcp_output+0x37a>
      seg->next = NULL;
 801386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386c:	2200      	movs	r2, #0
 801386e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013874:	2b00      	cmp	r3, #0
 8013876:	d105      	bne.n	8013884 <tcp_output+0x300>
        pcb->unacked = seg;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801387c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	623b      	str	r3, [r7, #32]
 8013882:	e03f      	b.n	8013904 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	4618      	mov	r0, r3
 801388c:	f7f8 fe99 	bl	800c5c2 <lwip_htonl>
 8013890:	4604      	mov	r4, r0
 8013892:	6a3b      	ldr	r3, [r7, #32]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	685b      	ldr	r3, [r3, #4]
 8013898:	4618      	mov	r0, r3
 801389a:	f7f8 fe92 	bl	800c5c2 <lwip_htonl>
 801389e:	4603      	mov	r3, r0
 80138a0:	1ae3      	subs	r3, r4, r3
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	da24      	bge.n	80138f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	3370      	adds	r3, #112	; 0x70
 80138aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80138ac:	e002      	b.n	80138b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d011      	beq.n	80138e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80138bc:	69fb      	ldr	r3, [r7, #28]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7f8 fe7c 	bl	800c5c2 <lwip_htonl>
 80138ca:	4604      	mov	r4, r0
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	68db      	ldr	r3, [r3, #12]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7f8 fe75 	bl	800c5c2 <lwip_htonl>
 80138d8:	4603      	mov	r3, r0
 80138da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80138dc:	2b00      	cmp	r3, #0
 80138de:	dbe6      	blt.n	80138ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	681a      	ldr	r2, [r3, #0]
 80138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138ec:	601a      	str	r2, [r3, #0]
 80138ee:	e009      	b.n	8013904 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138f0:	6a3b      	ldr	r3, [r7, #32]
 80138f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138f6:	6a3b      	ldr	r3, [r7, #32]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	623b      	str	r3, [r7, #32]
 80138fc:	e002      	b.n	8013904 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80138fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013900:	f7fb fefb 	bl	800f6fa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013908:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390c:	2b00      	cmp	r3, #0
 801390e:	d012      	beq.n	8013936 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4618      	mov	r0, r3
 8013918:	f7f8 fe53 	bl	800c5c2 <lwip_htonl>
 801391c:	4602      	mov	r2, r0
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013922:	1ad3      	subs	r3, r2, r3
 8013924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013926:	8912      	ldrh	r2, [r2, #8]
 8013928:	4413      	add	r3, r2
  while (seg != NULL &&
 801392a:	69ba      	ldr	r2, [r7, #24]
 801392c:	429a      	cmp	r2, r3
 801392e:	f4bf aed9 	bcs.w	80136e4 <tcp_output+0x160>
 8013932:	e000      	b.n	8013936 <tcp_output+0x3b2>
      break;
 8013934:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801393a:	2b00      	cmp	r3, #0
 801393c:	d108      	bne.n	8013950 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	2200      	movs	r2, #0
 8013942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013946:	e004      	b.n	8013952 <tcp_output+0x3ce>
    goto output_done;
 8013948:	bf00      	nop
 801394a:	e002      	b.n	8013952 <tcp_output+0x3ce>
    goto output_done;
 801394c:	bf00      	nop
 801394e:	e000      	b.n	8013952 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013950:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	8b5b      	ldrh	r3, [r3, #26]
 8013956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801395a:	b29a      	uxth	r2, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013960:	2300      	movs	r3, #0
}
 8013962:	4618      	mov	r0, r3
 8013964:	3728      	adds	r7, #40	; 0x28
 8013966:	46bd      	mov	sp, r7
 8013968:	bdb0      	pop	{r4, r5, r7, pc}
 801396a:	bf00      	nop

0801396c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_output_segment_busy+0x1c>
 801397a:	4b09      	ldr	r3, [pc, #36]	; (80139a0 <tcp_output_segment_busy+0x34>)
 801397c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013980:	4908      	ldr	r1, [pc, #32]	; (80139a4 <tcp_output_segment_busy+0x38>)
 8013982:	4809      	ldr	r0, [pc, #36]	; (80139a8 <tcp_output_segment_busy+0x3c>)
 8013984:	f006 f816 	bl	80199b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	7b9b      	ldrb	r3, [r3, #14]
 801398e:	2b01      	cmp	r3, #1
 8013990:	d001      	beq.n	8013996 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013992:	2301      	movs	r3, #1
 8013994:	e000      	b.n	8013998 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013996:	2300      	movs	r3, #0
}
 8013998:	4618      	mov	r0, r3
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	0801c3c0 	.word	0x0801c3c0
 80139a4:	0801c95c 	.word	0x0801c95c
 80139a8:	0801c414 	.word	0x0801c414

080139ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80139ac:	b5b0      	push	{r4, r5, r7, lr}
 80139ae:	b08c      	sub	sp, #48	; 0x30
 80139b0:	af04      	add	r7, sp, #16
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <tcp_output_segment+0x20>
 80139be:	4b64      	ldr	r3, [pc, #400]	; (8013b50 <tcp_output_segment+0x1a4>)
 80139c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80139c4:	4963      	ldr	r1, [pc, #396]	; (8013b54 <tcp_output_segment+0x1a8>)
 80139c6:	4864      	ldr	r0, [pc, #400]	; (8013b58 <tcp_output_segment+0x1ac>)
 80139c8:	f005 fff4 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d106      	bne.n	80139e0 <tcp_output_segment+0x34>
 80139d2:	4b5f      	ldr	r3, [pc, #380]	; (8013b50 <tcp_output_segment+0x1a4>)
 80139d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80139d8:	4960      	ldr	r1, [pc, #384]	; (8013b5c <tcp_output_segment+0x1b0>)
 80139da:	485f      	ldr	r0, [pc, #380]	; (8013b58 <tcp_output_segment+0x1ac>)
 80139dc:	f005 ffea 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <tcp_output_segment+0x48>
 80139e6:	4b5a      	ldr	r3, [pc, #360]	; (8013b50 <tcp_output_segment+0x1a4>)
 80139e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80139ec:	495c      	ldr	r1, [pc, #368]	; (8013b60 <tcp_output_segment+0x1b4>)
 80139ee:	485a      	ldr	r0, [pc, #360]	; (8013b58 <tcp_output_segment+0x1ac>)
 80139f0:	f005 ffe0 	bl	80199b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80139f4:	68f8      	ldr	r0, [r7, #12]
 80139f6:	f7ff ffb9 	bl	801396c <tcp_output_segment_busy>
 80139fa:	4603      	mov	r3, r0
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d001      	beq.n	8013a04 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013a00:	2300      	movs	r3, #0
 8013a02:	e0a1      	b.n	8013b48 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	68dc      	ldr	r4, [r3, #12]
 8013a0c:	4610      	mov	r0, r2
 8013a0e:	f7f8 fdd8 	bl	800c5c2 <lwip_htonl>
 8013a12:	4603      	mov	r3, r0
 8013a14:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	68dc      	ldr	r4, [r3, #12]
 8013a1e:	4610      	mov	r0, r2
 8013a20:	f7f8 fdba 	bl	800c598 <lwip_htons>
 8013a24:	4603      	mov	r3, r0
 8013a26:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a2c:	68ba      	ldr	r2, [r7, #8]
 8013a2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013a30:	441a      	add	r2, r3
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	68db      	ldr	r3, [r3, #12]
 8013a3a:	3314      	adds	r3, #20
 8013a3c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	7a9b      	ldrb	r3, [r3, #10]
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d015      	beq.n	8013a76 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	461a      	mov	r2, r3
 8013a50:	6879      	ldr	r1, [r7, #4]
 8013a52:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013a56:	f7fc fa33 	bl	800fec0 <tcp_eff_send_mss_netif>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a5e:	8b7b      	ldrh	r3, [r7, #26]
 8013a60:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7f8 fdac 	bl	800c5c2 <lwip_htonl>
 8013a6a:	4602      	mov	r2, r0
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a70:	69fb      	ldr	r3, [r7, #28]
 8013a72:	3304      	adds	r3, #4
 8013a74:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	da02      	bge.n	8013a86 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	2200      	movs	r2, #0
 8013a84:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d10c      	bne.n	8013aa8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a8e:	4b35      	ldr	r3, [pc, #212]	; (8013b64 <tcp_output_segment+0x1b8>)
 8013a90:	681a      	ldr	r2, [r3, #0]
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	685b      	ldr	r3, [r3, #4]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7f8 fd90 	bl	800c5c2 <lwip_htonl>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	68da      	ldr	r2, [r3, #12]
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	1ad3      	subs	r3, r2, r3
 8013ab4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	8959      	ldrh	r1, [r3, #10]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	8b3a      	ldrh	r2, [r7, #24]
 8013ac2:	1a8a      	subs	r2, r1, r2
 8013ac4:	b292      	uxth	r2, r2
 8013ac6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	685b      	ldr	r3, [r3, #4]
 8013acc:	8919      	ldrh	r1, [r3, #8]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	8b3a      	ldrh	r2, [r7, #24]
 8013ad4:	1a8a      	subs	r2, r1, r2
 8013ad6:	b292      	uxth	r2, r2
 8013ad8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	68fa      	ldr	r2, [r7, #12]
 8013ae0:	68d2      	ldr	r2, [r2, #12]
 8013ae2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	741a      	strb	r2, [r3, #16]
 8013aec:	2200      	movs	r2, #0
 8013aee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	68da      	ldr	r2, [r3, #12]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	7a9b      	ldrb	r3, [r3, #10]
 8013af8:	f003 0301 	and.w	r3, r3, #1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <tcp_output_segment+0x158>
 8013b00:	2318      	movs	r3, #24
 8013b02:	e000      	b.n	8013b06 <tcp_output_segment+0x15a>
 8013b04:	2314      	movs	r3, #20
 8013b06:	4413      	add	r3, r2
 8013b08:	69fa      	ldr	r2, [r7, #28]
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d006      	beq.n	8013b1c <tcp_output_segment+0x170>
 8013b0e:	4b10      	ldr	r3, [pc, #64]	; (8013b50 <tcp_output_segment+0x1a4>)
 8013b10:	f240 621c 	movw	r2, #1564	; 0x61c
 8013b14:	4914      	ldr	r1, [pc, #80]	; (8013b68 <tcp_output_segment+0x1bc>)
 8013b16:	4810      	ldr	r0, [pc, #64]	; (8013b58 <tcp_output_segment+0x1ac>)
 8013b18:	f005 ff4c 	bl	80199b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	6858      	ldr	r0, [r3, #4]
 8013b20:	68b9      	ldr	r1, [r7, #8]
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	1d1c      	adds	r4, r3, #4
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	7add      	ldrb	r5, [r3, #11]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	7a9b      	ldrb	r3, [r3, #10]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	9202      	str	r2, [sp, #8]
 8013b32:	2206      	movs	r2, #6
 8013b34:	9201      	str	r2, [sp, #4]
 8013b36:	9300      	str	r3, [sp, #0]
 8013b38:	462b      	mov	r3, r5
 8013b3a:	4622      	mov	r2, r4
 8013b3c:	f004 fc1c 	bl	8018378 <ip4_output_if>
 8013b40:	4603      	mov	r3, r0
 8013b42:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3720      	adds	r7, #32
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8013b50:	0801c3c0 	.word	0x0801c3c0
 8013b54:	0801c984 	.word	0x0801c984
 8013b58:	0801c414 	.word	0x0801c414
 8013b5c:	0801c9a4 	.word	0x0801c9a4
 8013b60:	0801c9c4 	.word	0x0801c9c4
 8013b64:	2000cf1c 	.word	0x2000cf1c
 8013b68:	0801c9e8 	.word	0x0801c9e8

08013b6c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013b6c:	b5b0      	push	{r4, r5, r7, lr}
 8013b6e:	b084      	sub	sp, #16
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d106      	bne.n	8013b88 <tcp_rexmit_rto_prepare+0x1c>
 8013b7a:	4b31      	ldr	r3, [pc, #196]	; (8013c40 <tcp_rexmit_rto_prepare+0xd4>)
 8013b7c:	f240 6263 	movw	r2, #1635	; 0x663
 8013b80:	4930      	ldr	r1, [pc, #192]	; (8013c44 <tcp_rexmit_rto_prepare+0xd8>)
 8013b82:	4831      	ldr	r0, [pc, #196]	; (8013c48 <tcp_rexmit_rto_prepare+0xdc>)
 8013b84:	f005 ff16 	bl	80199b4 <iprintf>

  if (pcb->unacked == NULL) {
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d102      	bne.n	8013b96 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b90:	f06f 0305 	mvn.w	r3, #5
 8013b94:	e050      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b9a:	60fb      	str	r3, [r7, #12]
 8013b9c:	e00b      	b.n	8013bb6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b9e:	68f8      	ldr	r0, [r7, #12]
 8013ba0:	f7ff fee4 	bl	801396c <tcp_output_segment_busy>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d002      	beq.n	8013bb0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013baa:	f06f 0305 	mvn.w	r3, #5
 8013bae:	e043      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d1ef      	bne.n	8013b9e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013bbe:	68f8      	ldr	r0, [r7, #12]
 8013bc0:	f7ff fed4 	bl	801396c <tcp_output_segment_busy>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d002      	beq.n	8013bd0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013bca:	f06f 0305 	mvn.w	r3, #5
 8013bce:	e033      	b.n	8013c38 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2200      	movs	r2, #0
 8013be4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	8b5b      	ldrh	r3, [r3, #26]
 8013bea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7f8 fce1 	bl	800c5c2 <lwip_htonl>
 8013c00:	4604      	mov	r4, r0
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	891b      	ldrh	r3, [r3, #8]
 8013c06:	461d      	mov	r5, r3
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	899b      	ldrh	r3, [r3, #12]
 8013c0e:	b29b      	uxth	r3, r3
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7f8 fcc1 	bl	800c598 <lwip_htons>
 8013c16:	4603      	mov	r3, r0
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	f003 0303 	and.w	r3, r3, #3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d001      	beq.n	8013c26 <tcp_rexmit_rto_prepare+0xba>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e000      	b.n	8013c28 <tcp_rexmit_rto_prepare+0xbc>
 8013c26:	2300      	movs	r3, #0
 8013c28:	442b      	add	r3, r5
 8013c2a:	18e2      	adds	r2, r4, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8013c40:	0801c3c0 	.word	0x0801c3c0
 8013c44:	0801c9fc 	.word	0x0801c9fc
 8013c48:	0801c414 	.word	0x0801c414

08013c4c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d106      	bne.n	8013c68 <tcp_rexmit_rto_commit+0x1c>
 8013c5a:	4b0d      	ldr	r3, [pc, #52]	; (8013c90 <tcp_rexmit_rto_commit+0x44>)
 8013c5c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013c60:	490c      	ldr	r1, [pc, #48]	; (8013c94 <tcp_rexmit_rto_commit+0x48>)
 8013c62:	480d      	ldr	r0, [pc, #52]	; (8013c98 <tcp_rexmit_rto_commit+0x4c>)
 8013c64:	f005 fea6 	bl	80199b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c6e:	2bff      	cmp	r3, #255	; 0xff
 8013c70:	d007      	beq.n	8013c82 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013c78:	3301      	adds	r3, #1
 8013c7a:	b2da      	uxtb	r2, r3
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff fc7e 	bl	8013584 <tcp_output>
}
 8013c88:	bf00      	nop
 8013c8a:	3708      	adds	r7, #8
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	0801c3c0 	.word	0x0801c3c0
 8013c94:	0801ca20 	.word	0x0801ca20
 8013c98:	0801c414 	.word	0x0801c414

08013c9c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d106      	bne.n	8013cb8 <tcp_rexmit_rto+0x1c>
 8013caa:	4b0a      	ldr	r3, [pc, #40]	; (8013cd4 <tcp_rexmit_rto+0x38>)
 8013cac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013cb0:	4909      	ldr	r1, [pc, #36]	; (8013cd8 <tcp_rexmit_rto+0x3c>)
 8013cb2:	480a      	ldr	r0, [pc, #40]	; (8013cdc <tcp_rexmit_rto+0x40>)
 8013cb4:	f005 fe7e 	bl	80199b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff ff57 	bl	8013b6c <tcp_rexmit_rto_prepare>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d102      	bne.n	8013cca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff ffc1 	bl	8013c4c <tcp_rexmit_rto_commit>
  }
}
 8013cca:	bf00      	nop
 8013ccc:	3708      	adds	r7, #8
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	0801c3c0 	.word	0x0801c3c0
 8013cd8:	0801ca44 	.word	0x0801ca44
 8013cdc:	0801c414 	.word	0x0801c414

08013ce0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013ce0:	b590      	push	{r4, r7, lr}
 8013ce2:	b085      	sub	sp, #20
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d106      	bne.n	8013cfc <tcp_rexmit+0x1c>
 8013cee:	4b2f      	ldr	r3, [pc, #188]	; (8013dac <tcp_rexmit+0xcc>)
 8013cf0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013cf4:	492e      	ldr	r1, [pc, #184]	; (8013db0 <tcp_rexmit+0xd0>)
 8013cf6:	482f      	ldr	r0, [pc, #188]	; (8013db4 <tcp_rexmit+0xd4>)
 8013cf8:	f005 fe5c 	bl	80199b4 <iprintf>

  if (pcb->unacked == NULL) {
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d102      	bne.n	8013d0a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013d04:	f06f 0305 	mvn.w	r3, #5
 8013d08:	e04c      	b.n	8013da4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d0e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013d10:	68b8      	ldr	r0, [r7, #8]
 8013d12:	f7ff fe2b 	bl	801396c <tcp_output_segment_busy>
 8013d16:	4603      	mov	r3, r0
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d002      	beq.n	8013d22 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013d1c:	f06f 0305 	mvn.w	r3, #5
 8013d20:	e040      	b.n	8013da4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	336c      	adds	r3, #108	; 0x6c
 8013d2e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d30:	e002      	b.n	8013d38 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d011      	beq.n	8013d64 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7f8 fc3a 	bl	800c5c2 <lwip_htonl>
 8013d4e:	4604      	mov	r4, r0
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7f8 fc33 	bl	800c5c2 <lwip_htonl>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	dbe6      	blt.n	8013d32 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	68ba      	ldr	r2, [r7, #8]
 8013d70:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d103      	bne.n	8013d82 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d88:	2bff      	cmp	r3, #255	; 0xff
 8013d8a:	d007      	beq.n	8013d9c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d92:	3301      	adds	r3, #1
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2200      	movs	r2, #0
 8013da0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd90      	pop	{r4, r7, pc}
 8013dac:	0801c3c0 	.word	0x0801c3c0
 8013db0:	0801ca60 	.word	0x0801ca60
 8013db4:	0801c414 	.word	0x0801c414

08013db8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b082      	sub	sp, #8
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d106      	bne.n	8013dd4 <tcp_rexmit_fast+0x1c>
 8013dc6:	4b2a      	ldr	r3, [pc, #168]	; (8013e70 <tcp_rexmit_fast+0xb8>)
 8013dc8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013dcc:	4929      	ldr	r1, [pc, #164]	; (8013e74 <tcp_rexmit_fast+0xbc>)
 8013dce:	482a      	ldr	r0, [pc, #168]	; (8013e78 <tcp_rexmit_fast+0xc0>)
 8013dd0:	f005 fdf0 	bl	80199b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d045      	beq.n	8013e68 <tcp_rexmit_fast+0xb0>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	8b5b      	ldrh	r3, [r3, #26]
 8013de0:	f003 0304 	and.w	r3, r3, #4
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d13f      	bne.n	8013e68 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f7ff ff79 	bl	8013ce0 <tcp_rexmit>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d139      	bne.n	8013e68 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e00:	4293      	cmp	r3, r2
 8013e02:	bf28      	it	cs
 8013e04:	4613      	movcs	r3, r2
 8013e06:	b29b      	uxth	r3, r3
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	da00      	bge.n	8013e0e <tcp_rexmit_fast+0x56>
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	105b      	asrs	r3, r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e1e:	461a      	mov	r2, r3
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e24:	005b      	lsls	r3, r3, #1
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d206      	bcs.n	8013e38 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	b29a      	uxth	r2, r3
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e42:	4619      	mov	r1, r3
 8013e44:	0049      	lsls	r1, r1, #1
 8013e46:	440b      	add	r3, r1
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	8b5b      	ldrh	r3, [r3, #26]
 8013e58:	f043 0304 	orr.w	r3, r3, #4
 8013e5c:	b29a      	uxth	r2, r3
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013e68:	bf00      	nop
 8013e6a:	3708      	adds	r7, #8
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0801c3c0 	.word	0x0801c3c0
 8013e74:	0801ca78 	.word	0x0801ca78
 8013e78:	0801c414 	.word	0x0801c414

08013e7c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b086      	sub	sp, #24
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	60f8      	str	r0, [r7, #12]
 8013e84:	607b      	str	r3, [r7, #4]
 8013e86:	460b      	mov	r3, r1
 8013e88:	817b      	strh	r3, [r7, #10]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013e8e:	897a      	ldrh	r2, [r7, #10]
 8013e90:	893b      	ldrh	r3, [r7, #8]
 8013e92:	4413      	add	r3, r2
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	3314      	adds	r3, #20
 8013e98:	b29b      	uxth	r3, r3
 8013e9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e9e:	4619      	mov	r1, r3
 8013ea0:	2022      	movs	r0, #34	; 0x22
 8013ea2:	f7f9 fcfd 	bl	800d8a0 <pbuf_alloc>
 8013ea6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d04d      	beq.n	8013f4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013eae:	897b      	ldrh	r3, [r7, #10]
 8013eb0:	3313      	adds	r3, #19
 8013eb2:	697a      	ldr	r2, [r7, #20]
 8013eb4:	8952      	ldrh	r2, [r2, #10]
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	db06      	blt.n	8013ec8 <tcp_output_alloc_header_common+0x4c>
 8013eba:	4b26      	ldr	r3, [pc, #152]	; (8013f54 <tcp_output_alloc_header_common+0xd8>)
 8013ebc:	f240 7223 	movw	r2, #1827	; 0x723
 8013ec0:	4925      	ldr	r1, [pc, #148]	; (8013f58 <tcp_output_alloc_header_common+0xdc>)
 8013ec2:	4826      	ldr	r0, [pc, #152]	; (8013f5c <tcp_output_alloc_header_common+0xe0>)
 8013ec4:	f005 fd76 	bl	80199b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013ece:	8c3b      	ldrh	r3, [r7, #32]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f8 fb61 	bl	800c598 <lwip_htons>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	461a      	mov	r2, r3
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7f8 fb59 	bl	800c598 <lwip_htons>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	461a      	mov	r2, r3
 8013eea:	693b      	ldr	r3, [r7, #16]
 8013eec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013eee:	693b      	ldr	r3, [r7, #16]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f7f8 fb64 	bl	800c5c2 <lwip_htonl>
 8013efa:	4602      	mov	r2, r0
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013f00:	897b      	ldrh	r3, [r7, #10]
 8013f02:	089b      	lsrs	r3, r3, #2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	3305      	adds	r3, #5
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	031b      	lsls	r3, r3, #12
 8013f0c:	b29a      	uxth	r2, r3
 8013f0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	4313      	orrs	r3, r2
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7f8 fb3d 	bl	800c598 <lwip_htons>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	461a      	mov	r2, r3
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013f26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7f8 fb35 	bl	800c598 <lwip_htons>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013f36:	693b      	ldr	r3, [r7, #16]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	741a      	strb	r2, [r3, #16]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	2200      	movs	r2, #0
 8013f44:	749a      	strb	r2, [r3, #18]
 8013f46:	2200      	movs	r2, #0
 8013f48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013f4a:	697b      	ldr	r3, [r7, #20]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3718      	adds	r7, #24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	0801c3c0 	.word	0x0801c3c0
 8013f58:	0801ca98 	.word	0x0801ca98
 8013f5c:	0801c414 	.word	0x0801c414

08013f60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013f60:	b5b0      	push	{r4, r5, r7, lr}
 8013f62:	b08a      	sub	sp, #40	; 0x28
 8013f64:	af04      	add	r7, sp, #16
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	607b      	str	r3, [r7, #4]
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	817b      	strh	r3, [r7, #10]
 8013f6e:	4613      	mov	r3, r2
 8013f70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d106      	bne.n	8013f86 <tcp_output_alloc_header+0x26>
 8013f78:	4b15      	ldr	r3, [pc, #84]	; (8013fd0 <tcp_output_alloc_header+0x70>)
 8013f7a:	f240 7242 	movw	r2, #1858	; 0x742
 8013f7e:	4915      	ldr	r1, [pc, #84]	; (8013fd4 <tcp_output_alloc_header+0x74>)
 8013f80:	4815      	ldr	r0, [pc, #84]	; (8013fd8 <tcp_output_alloc_header+0x78>)
 8013f82:	f005 fd17 	bl	80199b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	8adb      	ldrh	r3, [r3, #22]
 8013f8e:	68fa      	ldr	r2, [r7, #12]
 8013f90:	8b12      	ldrh	r2, [r2, #24]
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f96:	893d      	ldrh	r5, [r7, #8]
 8013f98:	897c      	ldrh	r4, [r7, #10]
 8013f9a:	9103      	str	r1, [sp, #12]
 8013f9c:	2110      	movs	r1, #16
 8013f9e:	9102      	str	r1, [sp, #8]
 8013fa0:	9201      	str	r2, [sp, #4]
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	462a      	mov	r2, r5
 8013fa8:	4621      	mov	r1, r4
 8013faa:	f7ff ff67 	bl	8013e7c <tcp_output_alloc_header_common>
 8013fae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d006      	beq.n	8013fc4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fba:	68fa      	ldr	r2, [r7, #12]
 8013fbc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013fbe:	441a      	add	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013fc4:	697b      	ldr	r3, [r7, #20]
}
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	3718      	adds	r7, #24
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	0801c3c0 	.word	0x0801c3c0
 8013fd4:	0801cac8 	.word	0x0801cac8
 8013fd8:	0801c414 	.word	0x0801c414

08013fdc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b088      	sub	sp, #32
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	60f8      	str	r0, [r7, #12]
 8013fe4:	60b9      	str	r1, [r7, #8]
 8013fe6:	4611      	mov	r1, r2
 8013fe8:	461a      	mov	r2, r3
 8013fea:	460b      	mov	r3, r1
 8013fec:	71fb      	strb	r3, [r7, #7]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d106      	bne.n	801400a <tcp_output_fill_options+0x2e>
 8013ffc:	4b12      	ldr	r3, [pc, #72]	; (8014048 <tcp_output_fill_options+0x6c>)
 8013ffe:	f240 7256 	movw	r2, #1878	; 0x756
 8014002:	4912      	ldr	r1, [pc, #72]	; (801404c <tcp_output_fill_options+0x70>)
 8014004:	4812      	ldr	r0, [pc, #72]	; (8014050 <tcp_output_fill_options+0x74>)
 8014006:	f005 fcd5 	bl	80199b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	3314      	adds	r3, #20
 8014014:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014016:	8bfb      	ldrh	r3, [r7, #30]
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	461a      	mov	r2, r3
 801401c:	79fb      	ldrb	r3, [r7, #7]
 801401e:	009b      	lsls	r3, r3, #2
 8014020:	f003 0304 	and.w	r3, r3, #4
 8014024:	4413      	add	r3, r2
 8014026:	3314      	adds	r3, #20
 8014028:	69ba      	ldr	r2, [r7, #24]
 801402a:	4413      	add	r3, r2
 801402c:	697a      	ldr	r2, [r7, #20]
 801402e:	429a      	cmp	r2, r3
 8014030:	d006      	beq.n	8014040 <tcp_output_fill_options+0x64>
 8014032:	4b05      	ldr	r3, [pc, #20]	; (8014048 <tcp_output_fill_options+0x6c>)
 8014034:	f240 7275 	movw	r2, #1909	; 0x775
 8014038:	4906      	ldr	r1, [pc, #24]	; (8014054 <tcp_output_fill_options+0x78>)
 801403a:	4805      	ldr	r0, [pc, #20]	; (8014050 <tcp_output_fill_options+0x74>)
 801403c:	f005 fcba 	bl	80199b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014040:	bf00      	nop
 8014042:	3720      	adds	r7, #32
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	0801c3c0 	.word	0x0801c3c0
 801404c:	0801caf0 	.word	0x0801caf0
 8014050:	0801c414 	.word	0x0801c414
 8014054:	0801c9e8 	.word	0x0801c9e8

08014058 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b08a      	sub	sp, #40	; 0x28
 801405c:	af04      	add	r7, sp, #16
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d106      	bne.n	801407a <tcp_output_control_segment+0x22>
 801406c:	4b1c      	ldr	r3, [pc, #112]	; (80140e0 <tcp_output_control_segment+0x88>)
 801406e:	f240 7287 	movw	r2, #1927	; 0x787
 8014072:	491c      	ldr	r1, [pc, #112]	; (80140e4 <tcp_output_control_segment+0x8c>)
 8014074:	481c      	ldr	r0, [pc, #112]	; (80140e8 <tcp_output_control_segment+0x90>)
 8014076:	f005 fc9d 	bl	80199b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801407a:	683a      	ldr	r2, [r7, #0]
 801407c:	6879      	ldr	r1, [r7, #4]
 801407e:	68f8      	ldr	r0, [r7, #12]
 8014080:	f7fe fae8 	bl	8012654 <tcp_route>
 8014084:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014086:	693b      	ldr	r3, [r7, #16]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d102      	bne.n	8014092 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801408c:	23fc      	movs	r3, #252	; 0xfc
 801408e:	75fb      	strb	r3, [r7, #23]
 8014090:	e01c      	b.n	80140cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d006      	beq.n	80140a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	7adb      	ldrb	r3, [r3, #11]
 801409c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	7a9b      	ldrb	r3, [r3, #10]
 80140a2:	757b      	strb	r3, [r7, #21]
 80140a4:	e003      	b.n	80140ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80140a6:	23ff      	movs	r3, #255	; 0xff
 80140a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80140aa:	2300      	movs	r3, #0
 80140ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80140ae:	7dba      	ldrb	r2, [r7, #22]
 80140b0:	693b      	ldr	r3, [r7, #16]
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	2306      	movs	r3, #6
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	7d7b      	ldrb	r3, [r7, #21]
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	4613      	mov	r3, r2
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	6879      	ldr	r1, [r7, #4]
 80140c2:	68b8      	ldr	r0, [r7, #8]
 80140c4:	f004 f958 	bl	8018378 <ip4_output_if>
 80140c8:	4603      	mov	r3, r0
 80140ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80140cc:	68b8      	ldr	r0, [r7, #8]
 80140ce:	f7f9 fecb 	bl	800de68 <pbuf_free>
  return err;
 80140d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3718      	adds	r7, #24
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	0801c3c0 	.word	0x0801c3c0
 80140e4:	0801cb18 	.word	0x0801cb18
 80140e8:	0801c414 	.word	0x0801c414

080140ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80140ec:	b590      	push	{r4, r7, lr}
 80140ee:	b08b      	sub	sp, #44	; 0x2c
 80140f0:	af04      	add	r7, sp, #16
 80140f2:	60f8      	str	r0, [r7, #12]
 80140f4:	60b9      	str	r1, [r7, #8]
 80140f6:	607a      	str	r2, [r7, #4]
 80140f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d106      	bne.n	801410e <tcp_rst+0x22>
 8014100:	4b1f      	ldr	r3, [pc, #124]	; (8014180 <tcp_rst+0x94>)
 8014102:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014106:	491f      	ldr	r1, [pc, #124]	; (8014184 <tcp_rst+0x98>)
 8014108:	481f      	ldr	r0, [pc, #124]	; (8014188 <tcp_rst+0x9c>)
 801410a:	f005 fc53 	bl	80199b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801410e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014110:	2b00      	cmp	r3, #0
 8014112:	d106      	bne.n	8014122 <tcp_rst+0x36>
 8014114:	4b1a      	ldr	r3, [pc, #104]	; (8014180 <tcp_rst+0x94>)
 8014116:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801411a:	491c      	ldr	r1, [pc, #112]	; (801418c <tcp_rst+0xa0>)
 801411c:	481a      	ldr	r0, [pc, #104]	; (8014188 <tcp_rst+0x9c>)
 801411e:	f005 fc49 	bl	80199b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014122:	2300      	movs	r3, #0
 8014124:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014126:	f246 0308 	movw	r3, #24584	; 0x6008
 801412a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801412c:	7dfb      	ldrb	r3, [r7, #23]
 801412e:	b29c      	uxth	r4, r3
 8014130:	68b8      	ldr	r0, [r7, #8]
 8014132:	f7f8 fa46 	bl	800c5c2 <lwip_htonl>
 8014136:	4602      	mov	r2, r0
 8014138:	8abb      	ldrh	r3, [r7, #20]
 801413a:	9303      	str	r3, [sp, #12]
 801413c:	2314      	movs	r3, #20
 801413e:	9302      	str	r3, [sp, #8]
 8014140:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014142:	9301      	str	r3, [sp, #4]
 8014144:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	4613      	mov	r3, r2
 801414a:	2200      	movs	r2, #0
 801414c:	4621      	mov	r1, r4
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7ff fe94 	bl	8013e7c <tcp_output_alloc_header_common>
 8014154:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d00c      	beq.n	8014176 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801415c:	7dfb      	ldrb	r3, [r7, #23]
 801415e:	2200      	movs	r2, #0
 8014160:	6939      	ldr	r1, [r7, #16]
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f7ff ff3a 	bl	8013fdc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801416a:	683a      	ldr	r2, [r7, #0]
 801416c:	6939      	ldr	r1, [r7, #16]
 801416e:	68f8      	ldr	r0, [r7, #12]
 8014170:	f7ff ff72 	bl	8014058 <tcp_output_control_segment>
 8014174:	e000      	b.n	8014178 <tcp_rst+0x8c>
    return;
 8014176:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014178:	371c      	adds	r7, #28
 801417a:	46bd      	mov	sp, r7
 801417c:	bd90      	pop	{r4, r7, pc}
 801417e:	bf00      	nop
 8014180:	0801c3c0 	.word	0x0801c3c0
 8014184:	0801cb44 	.word	0x0801cb44
 8014188:	0801c414 	.word	0x0801c414
 801418c:	0801cb60 	.word	0x0801cb60

08014190 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b087      	sub	sp, #28
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014198:	2300      	movs	r3, #0
 801419a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801419c:	2300      	movs	r3, #0
 801419e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d106      	bne.n	80141b4 <tcp_send_empty_ack+0x24>
 80141a6:	4b28      	ldr	r3, [pc, #160]	; (8014248 <tcp_send_empty_ack+0xb8>)
 80141a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80141ac:	4927      	ldr	r1, [pc, #156]	; (801424c <tcp_send_empty_ack+0xbc>)
 80141ae:	4828      	ldr	r0, [pc, #160]	; (8014250 <tcp_send_empty_ack+0xc0>)
 80141b0:	f005 fc00 	bl	80199b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80141b4:	7dfb      	ldrb	r3, [r7, #23]
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	b2db      	uxtb	r3, r3
 80141ba:	f003 0304 	and.w	r3, r3, #4
 80141be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80141c0:	7d7b      	ldrb	r3, [r7, #21]
 80141c2:	b29c      	uxth	r4, r3
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f8 f9fa 	bl	800c5c2 <lwip_htonl>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2200      	movs	r2, #0
 80141d2:	4621      	mov	r1, r4
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f7ff fec3 	bl	8013f60 <tcp_output_alloc_header>
 80141da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d109      	bne.n	80141f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	8b5b      	ldrh	r3, [r3, #26]
 80141e6:	f043 0303 	orr.w	r3, r3, #3
 80141ea:	b29a      	uxth	r2, r3
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80141f0:	f06f 0301 	mvn.w	r3, #1
 80141f4:	e023      	b.n	801423e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80141f6:	7dbb      	ldrb	r3, [r7, #22]
 80141f8:	7dfa      	ldrb	r2, [r7, #23]
 80141fa:	6939      	ldr	r1, [r7, #16]
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7ff feed 	bl	8013fdc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	3304      	adds	r3, #4
 8014208:	6939      	ldr	r1, [r7, #16]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f7ff ff24 	bl	8014058 <tcp_output_control_segment>
 8014210:	4603      	mov	r3, r0
 8014212:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d007      	beq.n	801422c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	8b5b      	ldrh	r3, [r3, #26]
 8014220:	f043 0303 	orr.w	r3, r3, #3
 8014224:	b29a      	uxth	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	835a      	strh	r2, [r3, #26]
 801422a:	e006      	b.n	801423a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	8b5b      	ldrh	r3, [r3, #26]
 8014230:	f023 0303 	bic.w	r3, r3, #3
 8014234:	b29a      	uxth	r2, r3
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801423a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801423e:	4618      	mov	r0, r3
 8014240:	371c      	adds	r7, #28
 8014242:	46bd      	mov	sp, r7
 8014244:	bd90      	pop	{r4, r7, pc}
 8014246:	bf00      	nop
 8014248:	0801c3c0 	.word	0x0801c3c0
 801424c:	0801cb7c 	.word	0x0801cb7c
 8014250:	0801c414 	.word	0x0801c414

08014254 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014254:	b590      	push	{r4, r7, lr}
 8014256:	b087      	sub	sp, #28
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801425c:	2300      	movs	r3, #0
 801425e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d106      	bne.n	8014274 <tcp_keepalive+0x20>
 8014266:	4b18      	ldr	r3, [pc, #96]	; (80142c8 <tcp_keepalive+0x74>)
 8014268:	f640 0224 	movw	r2, #2084	; 0x824
 801426c:	4917      	ldr	r1, [pc, #92]	; (80142cc <tcp_keepalive+0x78>)
 801426e:	4818      	ldr	r0, [pc, #96]	; (80142d0 <tcp_keepalive+0x7c>)
 8014270:	f005 fba0 	bl	80199b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014274:	7dfb      	ldrb	r3, [r7, #23]
 8014276:	b29c      	uxth	r4, r3
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801427c:	3b01      	subs	r3, #1
 801427e:	4618      	mov	r0, r3
 8014280:	f7f8 f99f 	bl	800c5c2 <lwip_htonl>
 8014284:	4603      	mov	r3, r0
 8014286:	2200      	movs	r2, #0
 8014288:	4621      	mov	r1, r4
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7ff fe68 	bl	8013f60 <tcp_output_alloc_header>
 8014290:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014298:	f04f 33ff 	mov.w	r3, #4294967295
 801429c:	e010      	b.n	80142c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801429e:	7dfb      	ldrb	r3, [r7, #23]
 80142a0:	2200      	movs	r2, #0
 80142a2:	6939      	ldr	r1, [r7, #16]
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7ff fe99 	bl	8013fdc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	3304      	adds	r3, #4
 80142b0:	6939      	ldr	r1, [r7, #16]
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f7ff fed0 	bl	8014058 <tcp_output_control_segment>
 80142b8:	4603      	mov	r3, r0
 80142ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80142bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	371c      	adds	r7, #28
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd90      	pop	{r4, r7, pc}
 80142c8:	0801c3c0 	.word	0x0801c3c0
 80142cc:	0801cb9c 	.word	0x0801cb9c
 80142d0:	0801c414 	.word	0x0801c414

080142d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80142d4:	b590      	push	{r4, r7, lr}
 80142d6:	b08b      	sub	sp, #44	; 0x2c
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80142dc:	2300      	movs	r3, #0
 80142de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d106      	bne.n	80142f6 <tcp_zero_window_probe+0x22>
 80142e8:	4b4c      	ldr	r3, [pc, #304]	; (801441c <tcp_zero_window_probe+0x148>)
 80142ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80142ee:	494c      	ldr	r1, [pc, #304]	; (8014420 <tcp_zero_window_probe+0x14c>)
 80142f0:	484c      	ldr	r0, [pc, #304]	; (8014424 <tcp_zero_window_probe+0x150>)
 80142f2:	f005 fb5f 	bl	80199b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80142fc:	6a3b      	ldr	r3, [r7, #32]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d101      	bne.n	8014306 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014302:	2300      	movs	r3, #0
 8014304:	e086      	b.n	8014414 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801430c:	2bff      	cmp	r3, #255	; 0xff
 801430e:	d007      	beq.n	8014320 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014316:	3301      	adds	r3, #1
 8014318:	b2da      	uxtb	r2, r3
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014320:	6a3b      	ldr	r3, [r7, #32]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	899b      	ldrh	r3, [r3, #12]
 8014326:	b29b      	uxth	r3, r3
 8014328:	4618      	mov	r0, r3
 801432a:	f7f8 f935 	bl	800c598 <lwip_htons>
 801432e:	4603      	mov	r3, r0
 8014330:	b2db      	uxtb	r3, r3
 8014332:	f003 0301 	and.w	r3, r3, #1
 8014336:	2b00      	cmp	r3, #0
 8014338:	d005      	beq.n	8014346 <tcp_zero_window_probe+0x72>
 801433a:	6a3b      	ldr	r3, [r7, #32]
 801433c:	891b      	ldrh	r3, [r3, #8]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d101      	bne.n	8014346 <tcp_zero_window_probe+0x72>
 8014342:	2301      	movs	r3, #1
 8014344:	e000      	b.n	8014348 <tcp_zero_window_probe+0x74>
 8014346:	2300      	movs	r3, #0
 8014348:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801434a:	7ffb      	ldrb	r3, [r7, #31]
 801434c:	2b00      	cmp	r3, #0
 801434e:	bf0c      	ite	eq
 8014350:	2301      	moveq	r3, #1
 8014352:	2300      	movne	r3, #0
 8014354:	b2db      	uxtb	r3, r3
 8014356:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801435c:	b299      	uxth	r1, r3
 801435e:	6a3b      	ldr	r3, [r7, #32]
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	685b      	ldr	r3, [r3, #4]
 8014364:	8bba      	ldrh	r2, [r7, #28]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f7ff fdfa 	bl	8013f60 <tcp_output_alloc_header>
 801436c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d102      	bne.n	801437a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014374:	f04f 33ff 	mov.w	r3, #4294967295
 8014378:	e04c      	b.n	8014414 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014380:	7ffb      	ldrb	r3, [r7, #31]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d011      	beq.n	80143aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	899b      	ldrh	r3, [r3, #12]
 801438a:	b29b      	uxth	r3, r3
 801438c:	b21b      	sxth	r3, r3
 801438e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014392:	b21c      	sxth	r4, r3
 8014394:	2011      	movs	r0, #17
 8014396:	f7f8 f8ff 	bl	800c598 <lwip_htons>
 801439a:	4603      	mov	r3, r0
 801439c:	b21b      	sxth	r3, r3
 801439e:	4323      	orrs	r3, r4
 80143a0:	b21b      	sxth	r3, r3
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	819a      	strh	r2, [r3, #12]
 80143a8:	e010      	b.n	80143cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	3314      	adds	r3, #20
 80143b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80143b2:	6a3b      	ldr	r3, [r7, #32]
 80143b4:	6858      	ldr	r0, [r3, #4]
 80143b6:	6a3b      	ldr	r3, [r7, #32]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	891a      	ldrh	r2, [r3, #8]
 80143bc:	6a3b      	ldr	r3, [r7, #32]
 80143be:	891b      	ldrh	r3, [r3, #8]
 80143c0:	1ad3      	subs	r3, r2, r3
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	2201      	movs	r2, #1
 80143c6:	6939      	ldr	r1, [r7, #16]
 80143c8:	f7f9 ff54 	bl	800e274 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80143cc:	6a3b      	ldr	r3, [r7, #32]
 80143ce:	68db      	ldr	r3, [r3, #12]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7f8 f8f5 	bl	800c5c2 <lwip_htonl>
 80143d8:	4603      	mov	r3, r0
 80143da:	3301      	adds	r3, #1
 80143dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	1ad3      	subs	r3, r2, r3
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	da02      	bge.n	80143f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	68fa      	ldr	r2, [r7, #12]
 80143ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80143f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143f4:	2200      	movs	r2, #0
 80143f6:	69b9      	ldr	r1, [r7, #24]
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f7ff fdef 	bl	8013fdc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	3304      	adds	r3, #4
 8014404:	69b9      	ldr	r1, [r7, #24]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ff fe26 	bl	8014058 <tcp_output_control_segment>
 801440c:	4603      	mov	r3, r0
 801440e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014410:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014414:	4618      	mov	r0, r3
 8014416:	372c      	adds	r7, #44	; 0x2c
 8014418:	46bd      	mov	sp, r7
 801441a:	bd90      	pop	{r4, r7, pc}
 801441c:	0801c3c0 	.word	0x0801c3c0
 8014420:	0801cbb8 	.word	0x0801cbb8
 8014424:	0801c414 	.word	0x0801c414

08014428 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014430:	f7fa f80e 	bl	800e450 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014434:	4b0a      	ldr	r3, [pc, #40]	; (8014460 <tcpip_tcp_timer+0x38>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d103      	bne.n	8014444 <tcpip_tcp_timer+0x1c>
 801443c:	4b09      	ldr	r3, [pc, #36]	; (8014464 <tcpip_tcp_timer+0x3c>)
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d005      	beq.n	8014450 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014444:	2200      	movs	r2, #0
 8014446:	4908      	ldr	r1, [pc, #32]	; (8014468 <tcpip_tcp_timer+0x40>)
 8014448:	20fa      	movs	r0, #250	; 0xfa
 801444a:	f000 f8f3 	bl	8014634 <sys_timeout>
 801444e:	e003      	b.n	8014458 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014450:	4b06      	ldr	r3, [pc, #24]	; (801446c <tcpip_tcp_timer+0x44>)
 8014452:	2200      	movs	r2, #0
 8014454:	601a      	str	r2, [r3, #0]
  }
}
 8014456:	bf00      	nop
 8014458:	bf00      	nop
 801445a:	3708      	adds	r7, #8
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}
 8014460:	2000cf28 	.word	0x2000cf28
 8014464:	2000cf2c 	.word	0x2000cf2c
 8014468:	08014429 	.word	0x08014429
 801446c:	2000cf74 	.word	0x2000cf74

08014470 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014474:	4b0a      	ldr	r3, [pc, #40]	; (80144a0 <tcp_timer_needed+0x30>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d10f      	bne.n	801449c <tcp_timer_needed+0x2c>
 801447c:	4b09      	ldr	r3, [pc, #36]	; (80144a4 <tcp_timer_needed+0x34>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d103      	bne.n	801448c <tcp_timer_needed+0x1c>
 8014484:	4b08      	ldr	r3, [pc, #32]	; (80144a8 <tcp_timer_needed+0x38>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d007      	beq.n	801449c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801448c:	4b04      	ldr	r3, [pc, #16]	; (80144a0 <tcp_timer_needed+0x30>)
 801448e:	2201      	movs	r2, #1
 8014490:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014492:	2200      	movs	r2, #0
 8014494:	4905      	ldr	r1, [pc, #20]	; (80144ac <tcp_timer_needed+0x3c>)
 8014496:	20fa      	movs	r0, #250	; 0xfa
 8014498:	f000 f8cc 	bl	8014634 <sys_timeout>
  }
}
 801449c:	bf00      	nop
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	2000cf74 	.word	0x2000cf74
 80144a4:	2000cf28 	.word	0x2000cf28
 80144a8:	2000cf2c 	.word	0x2000cf2c
 80144ac:	08014429 	.word	0x08014429

080144b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b086      	sub	sp, #24
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	60f8      	str	r0, [r7, #12]
 80144b8:	60b9      	str	r1, [r7, #8]
 80144ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80144bc:	200a      	movs	r0, #10
 80144be:	f7f8 fdad 	bl	800d01c <memp_malloc>
 80144c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d109      	bne.n	80144de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d151      	bne.n	8014574 <sys_timeout_abs+0xc4>
 80144d0:	4b2a      	ldr	r3, [pc, #168]	; (801457c <sys_timeout_abs+0xcc>)
 80144d2:	22be      	movs	r2, #190	; 0xbe
 80144d4:	492a      	ldr	r1, [pc, #168]	; (8014580 <sys_timeout_abs+0xd0>)
 80144d6:	482b      	ldr	r0, [pc, #172]	; (8014584 <sys_timeout_abs+0xd4>)
 80144d8:	f005 fa6c 	bl	80199b4 <iprintf>
    return;
 80144dc:	e04a      	b.n	8014574 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	2200      	movs	r2, #0
 80144e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80144e4:	693b      	ldr	r3, [r7, #16]
 80144e6:	68ba      	ldr	r2, [r7, #8]
 80144e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	687a      	ldr	r2, [r7, #4]
 80144ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	68fa      	ldr	r2, [r7, #12]
 80144f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80144f6:	4b24      	ldr	r3, [pc, #144]	; (8014588 <sys_timeout_abs+0xd8>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d103      	bne.n	8014506 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80144fe:	4a22      	ldr	r2, [pc, #136]	; (8014588 <sys_timeout_abs+0xd8>)
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	6013      	str	r3, [r2, #0]
    return;
 8014504:	e037      	b.n	8014576 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	685a      	ldr	r2, [r3, #4]
 801450a:	4b1f      	ldr	r3, [pc, #124]	; (8014588 <sys_timeout_abs+0xd8>)
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	1ad3      	subs	r3, r2, r3
 8014512:	0fdb      	lsrs	r3, r3, #31
 8014514:	f003 0301 	and.w	r3, r3, #1
 8014518:	b2db      	uxtb	r3, r3
 801451a:	2b00      	cmp	r3, #0
 801451c:	d007      	beq.n	801452e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801451e:	4b1a      	ldr	r3, [pc, #104]	; (8014588 <sys_timeout_abs+0xd8>)
 8014520:	681a      	ldr	r2, [r3, #0]
 8014522:	693b      	ldr	r3, [r7, #16]
 8014524:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014526:	4a18      	ldr	r2, [pc, #96]	; (8014588 <sys_timeout_abs+0xd8>)
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	e023      	b.n	8014576 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801452e:	4b16      	ldr	r3, [pc, #88]	; (8014588 <sys_timeout_abs+0xd8>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	617b      	str	r3, [r7, #20]
 8014534:	e01a      	b.n	801456c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d00b      	beq.n	8014556 <sys_timeout_abs+0xa6>
 801453e:	693b      	ldr	r3, [r7, #16]
 8014540:	685a      	ldr	r2, [r3, #4]
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	0fdb      	lsrs	r3, r3, #31
 801454c:	f003 0301 	and.w	r3, r3, #1
 8014550:	b2db      	uxtb	r3, r3
 8014552:	2b00      	cmp	r3, #0
 8014554:	d007      	beq.n	8014566 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	693b      	ldr	r3, [r7, #16]
 801455c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	693a      	ldr	r2, [r7, #16]
 8014562:	601a      	str	r2, [r3, #0]
        break;
 8014564:	e007      	b.n	8014576 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014566:	697b      	ldr	r3, [r7, #20]
 8014568:	681b      	ldr	r3, [r3, #0]
 801456a:	617b      	str	r3, [r7, #20]
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d1e1      	bne.n	8014536 <sys_timeout_abs+0x86>
 8014572:	e000      	b.n	8014576 <sys_timeout_abs+0xc6>
    return;
 8014574:	bf00      	nop
      }
    }
  }
}
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	0801cbdc 	.word	0x0801cbdc
 8014580:	0801cc10 	.word	0x0801cc10
 8014584:	0801cc50 	.word	0x0801cc50
 8014588:	2000cf6c 	.word	0x2000cf6c

0801458c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b086      	sub	sp, #24
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	4798      	blx	r3

  now = sys_now();
 801459e:	f7f3 f9af 	bl	8007900 <sys_now>
 80145a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	681a      	ldr	r2, [r3, #0]
 80145a8:	4b0f      	ldr	r3, [pc, #60]	; (80145e8 <lwip_cyclic_timer+0x5c>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4413      	add	r3, r2
 80145ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80145b0:	68fa      	ldr	r2, [r7, #12]
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	0fdb      	lsrs	r3, r3, #31
 80145b8:	f003 0301 	and.w	r3, r3, #1
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d009      	beq.n	80145d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	681a      	ldr	r2, [r3, #0]
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	4413      	add	r3, r2
 80145ca:	687a      	ldr	r2, [r7, #4]
 80145cc:	4907      	ldr	r1, [pc, #28]	; (80145ec <lwip_cyclic_timer+0x60>)
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7ff ff6e 	bl	80144b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80145d4:	e004      	b.n	80145e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	4904      	ldr	r1, [pc, #16]	; (80145ec <lwip_cyclic_timer+0x60>)
 80145da:	68f8      	ldr	r0, [r7, #12]
 80145dc:	f7ff ff68 	bl	80144b0 <sys_timeout_abs>
}
 80145e0:	bf00      	nop
 80145e2:	3718      	adds	r7, #24
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	2000cf70 	.word	0x2000cf70
 80145ec:	0801458d 	.word	0x0801458d

080145f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b082      	sub	sp, #8
 80145f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80145f6:	2301      	movs	r3, #1
 80145f8:	607b      	str	r3, [r7, #4]
 80145fa:	e00e      	b.n	801461a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80145fc:	4a0b      	ldr	r2, [pc, #44]	; (801462c <sys_timeouts_init+0x3c>)
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	00db      	lsls	r3, r3, #3
 8014608:	4a08      	ldr	r2, [pc, #32]	; (801462c <sys_timeouts_init+0x3c>)
 801460a:	4413      	add	r3, r2
 801460c:	461a      	mov	r2, r3
 801460e:	4908      	ldr	r1, [pc, #32]	; (8014630 <sys_timeouts_init+0x40>)
 8014610:	f000 f810 	bl	8014634 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	3301      	adds	r3, #1
 8014618:	607b      	str	r3, [r7, #4]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	2b04      	cmp	r3, #4
 801461e:	d9ed      	bls.n	80145fc <sys_timeouts_init+0xc>
  }
}
 8014620:	bf00      	nop
 8014622:	bf00      	nop
 8014624:	3708      	adds	r7, #8
 8014626:	46bd      	mov	sp, r7
 8014628:	bd80      	pop	{r7, pc}
 801462a:	bf00      	nop
 801462c:	0801fef0 	.word	0x0801fef0
 8014630:	0801458d 	.word	0x0801458d

08014634 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b086      	sub	sp, #24
 8014638:	af00      	add	r7, sp, #0
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	60b9      	str	r1, [r7, #8]
 801463e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014646:	d306      	bcc.n	8014656 <sys_timeout+0x22>
 8014648:	4b0a      	ldr	r3, [pc, #40]	; (8014674 <sys_timeout+0x40>)
 801464a:	f240 1229 	movw	r2, #297	; 0x129
 801464e:	490a      	ldr	r1, [pc, #40]	; (8014678 <sys_timeout+0x44>)
 8014650:	480a      	ldr	r0, [pc, #40]	; (801467c <sys_timeout+0x48>)
 8014652:	f005 f9af 	bl	80199b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014656:	f7f3 f953 	bl	8007900 <sys_now>
 801465a:	4602      	mov	r2, r0
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	4413      	add	r3, r2
 8014660:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	68b9      	ldr	r1, [r7, #8]
 8014666:	6978      	ldr	r0, [r7, #20]
 8014668:	f7ff ff22 	bl	80144b0 <sys_timeout_abs>
#endif
}
 801466c:	bf00      	nop
 801466e:	3718      	adds	r7, #24
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}
 8014674:	0801cbdc 	.word	0x0801cbdc
 8014678:	0801cc78 	.word	0x0801cc78
 801467c:	0801cc50 	.word	0x0801cc50

08014680 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b084      	sub	sp, #16
 8014684:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014686:	f7f3 f93b 	bl	8007900 <sys_now>
 801468a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801468c:	4b17      	ldr	r3, [pc, #92]	; (80146ec <sys_check_timeouts+0x6c>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d022      	beq.n	80146de <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	1ad3      	subs	r3, r2, r3
 80146a0:	0fdb      	lsrs	r3, r3, #31
 80146a2:	f003 0301 	and.w	r3, r3, #1
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d11a      	bne.n	80146e2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	4a0e      	ldr	r2, [pc, #56]	; (80146ec <sys_check_timeouts+0x6c>)
 80146b2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	689b      	ldr	r3, [r3, #8]
 80146b8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	4a0a      	ldr	r2, [pc, #40]	; (80146f0 <sys_check_timeouts+0x70>)
 80146c6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80146c8:	68b9      	ldr	r1, [r7, #8]
 80146ca:	200a      	movs	r0, #10
 80146cc:	f7f8 fd1c 	bl	800d108 <memp_free>
    if (handler != NULL) {
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d0da      	beq.n	801468c <sys_check_timeouts+0xc>
      handler(arg);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6838      	ldr	r0, [r7, #0]
 80146da:	4798      	blx	r3
  do {
 80146dc:	e7d6      	b.n	801468c <sys_check_timeouts+0xc>
      return;
 80146de:	bf00      	nop
 80146e0:	e000      	b.n	80146e4 <sys_check_timeouts+0x64>
      return;
 80146e2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	2000cf6c 	.word	0x2000cf6c
 80146f0:	2000cf70 	.word	0x2000cf70

080146f4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80146fa:	4b16      	ldr	r3, [pc, #88]	; (8014754 <sys_timeouts_sleeptime+0x60>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d102      	bne.n	8014708 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014702:	f04f 33ff 	mov.w	r3, #4294967295
 8014706:	e020      	b.n	801474a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014708:	f7f3 f8fa 	bl	8007900 <sys_now>
 801470c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801470e:	4b11      	ldr	r3, [pc, #68]	; (8014754 <sys_timeouts_sleeptime+0x60>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	0fdb      	lsrs	r3, r3, #31
 801471a:	f003 0301 	and.w	r3, r3, #1
 801471e:	b2db      	uxtb	r3, r3
 8014720:	2b00      	cmp	r3, #0
 8014722:	d001      	beq.n	8014728 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014724:	2300      	movs	r3, #0
 8014726:	e010      	b.n	801474a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014728:	4b0a      	ldr	r3, [pc, #40]	; (8014754 <sys_timeouts_sleeptime+0x60>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	685a      	ldr	r2, [r3, #4]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	1ad3      	subs	r3, r2, r3
 8014732:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	da06      	bge.n	8014748 <sys_timeouts_sleeptime+0x54>
 801473a:	4b07      	ldr	r3, [pc, #28]	; (8014758 <sys_timeouts_sleeptime+0x64>)
 801473c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014740:	4906      	ldr	r1, [pc, #24]	; (801475c <sys_timeouts_sleeptime+0x68>)
 8014742:	4807      	ldr	r0, [pc, #28]	; (8014760 <sys_timeouts_sleeptime+0x6c>)
 8014744:	f005 f936 	bl	80199b4 <iprintf>
    return ret;
 8014748:	683b      	ldr	r3, [r7, #0]
  }
}
 801474a:	4618      	mov	r0, r3
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
 8014752:	bf00      	nop
 8014754:	2000cf6c 	.word	0x2000cf6c
 8014758:	0801cbdc 	.word	0x0801cbdc
 801475c:	0801ccb0 	.word	0x0801ccb0
 8014760:	0801cc50 	.word	0x0801cc50

08014764 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014768:	f004 ff68 	bl	801963c <rand>
 801476c:	4603      	mov	r3, r0
 801476e:	b29b      	uxth	r3, r3
 8014770:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014774:	b29b      	uxth	r3, r3
 8014776:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801477a:	b29a      	uxth	r2, r3
 801477c:	4b01      	ldr	r3, [pc, #4]	; (8014784 <udp_init+0x20>)
 801477e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014780:	bf00      	nop
 8014782:	bd80      	pop	{r7, pc}
 8014784:	20000038 	.word	0x20000038

08014788 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801478e:	2300      	movs	r3, #0
 8014790:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014792:	4b17      	ldr	r3, [pc, #92]	; (80147f0 <udp_new_port+0x68>)
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	1c5a      	adds	r2, r3, #1
 8014798:	b291      	uxth	r1, r2
 801479a:	4a15      	ldr	r2, [pc, #84]	; (80147f0 <udp_new_port+0x68>)
 801479c:	8011      	strh	r1, [r2, #0]
 801479e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d103      	bne.n	80147ae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80147a6:	4b12      	ldr	r3, [pc, #72]	; (80147f0 <udp_new_port+0x68>)
 80147a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80147ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147ae:	4b11      	ldr	r3, [pc, #68]	; (80147f4 <udp_new_port+0x6c>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	603b      	str	r3, [r7, #0]
 80147b4:	e011      	b.n	80147da <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	8a5a      	ldrh	r2, [r3, #18]
 80147ba:	4b0d      	ldr	r3, [pc, #52]	; (80147f0 <udp_new_port+0x68>)
 80147bc:	881b      	ldrh	r3, [r3, #0]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d108      	bne.n	80147d4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80147c2:	88fb      	ldrh	r3, [r7, #6]
 80147c4:	3301      	adds	r3, #1
 80147c6:	80fb      	strh	r3, [r7, #6]
 80147c8:	88fb      	ldrh	r3, [r7, #6]
 80147ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80147ce:	d3e0      	bcc.n	8014792 <udp_new_port+0xa>
        return 0;
 80147d0:	2300      	movs	r3, #0
 80147d2:	e007      	b.n	80147e4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	68db      	ldr	r3, [r3, #12]
 80147d8:	603b      	str	r3, [r7, #0]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d1ea      	bne.n	80147b6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80147e0:	4b03      	ldr	r3, [pc, #12]	; (80147f0 <udp_new_port+0x68>)
 80147e2:	881b      	ldrh	r3, [r3, #0]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	370c      	adds	r7, #12
 80147e8:	46bd      	mov	sp, r7
 80147ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ee:	4770      	bx	lr
 80147f0:	20000038 	.word	0x20000038
 80147f4:	2000cf78 	.word	0x2000cf78

080147f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b084      	sub	sp, #16
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	4613      	mov	r3, r2
 8014804:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d105      	bne.n	8014818 <udp_input_local_match+0x20>
 801480c:	4b27      	ldr	r3, [pc, #156]	; (80148ac <udp_input_local_match+0xb4>)
 801480e:	2287      	movs	r2, #135	; 0x87
 8014810:	4927      	ldr	r1, [pc, #156]	; (80148b0 <udp_input_local_match+0xb8>)
 8014812:	4828      	ldr	r0, [pc, #160]	; (80148b4 <udp_input_local_match+0xbc>)
 8014814:	f005 f8ce 	bl	80199b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d105      	bne.n	801482a <udp_input_local_match+0x32>
 801481e:	4b23      	ldr	r3, [pc, #140]	; (80148ac <udp_input_local_match+0xb4>)
 8014820:	2288      	movs	r2, #136	; 0x88
 8014822:	4925      	ldr	r1, [pc, #148]	; (80148b8 <udp_input_local_match+0xc0>)
 8014824:	4823      	ldr	r0, [pc, #140]	; (80148b4 <udp_input_local_match+0xbc>)
 8014826:	f005 f8c5 	bl	80199b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	7a1b      	ldrb	r3, [r3, #8]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d00b      	beq.n	801484a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	7a1a      	ldrb	r2, [r3, #8]
 8014836:	4b21      	ldr	r3, [pc, #132]	; (80148bc <udp_input_local_match+0xc4>)
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801483e:	3301      	adds	r3, #1
 8014840:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014842:	429a      	cmp	r2, r3
 8014844:	d001      	beq.n	801484a <udp_input_local_match+0x52>
    return 0;
 8014846:	2300      	movs	r3, #0
 8014848:	e02b      	b.n	80148a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801484a:	79fb      	ldrb	r3, [r7, #7]
 801484c:	2b00      	cmp	r3, #0
 801484e:	d018      	beq.n	8014882 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d013      	beq.n	801487e <udp_input_local_match+0x86>
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d00f      	beq.n	801487e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801485e:	4b17      	ldr	r3, [pc, #92]	; (80148bc <udp_input_local_match+0xc4>)
 8014860:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014866:	d00a      	beq.n	801487e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	681a      	ldr	r2, [r3, #0]
 801486c:	4b13      	ldr	r3, [pc, #76]	; (80148bc <udp_input_local_match+0xc4>)
 801486e:	695b      	ldr	r3, [r3, #20]
 8014870:	405a      	eors	r2, r3
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	3308      	adds	r3, #8
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801487a:	2b00      	cmp	r3, #0
 801487c:	d110      	bne.n	80148a0 <udp_input_local_match+0xa8>
          return 1;
 801487e:	2301      	movs	r3, #1
 8014880:	e00f      	b.n	80148a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d009      	beq.n	801489c <udp_input_local_match+0xa4>
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d005      	beq.n	801489c <udp_input_local_match+0xa4>
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681a      	ldr	r2, [r3, #0]
 8014894:	4b09      	ldr	r3, [pc, #36]	; (80148bc <udp_input_local_match+0xc4>)
 8014896:	695b      	ldr	r3, [r3, #20]
 8014898:	429a      	cmp	r2, r3
 801489a:	d101      	bne.n	80148a0 <udp_input_local_match+0xa8>
        return 1;
 801489c:	2301      	movs	r3, #1
 801489e:	e000      	b.n	80148a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80148a0:	2300      	movs	r3, #0
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3710      	adds	r7, #16
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	0801ccc4 	.word	0x0801ccc4
 80148b0:	0801ccf4 	.word	0x0801ccf4
 80148b4:	0801cd18 	.word	0x0801cd18
 80148b8:	0801cd40 	.word	0x0801cd40
 80148bc:	200097a8 	.word	0x200097a8

080148c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80148c0:	b590      	push	{r4, r7, lr}
 80148c2:	b08d      	sub	sp, #52	; 0x34
 80148c4:	af02      	add	r7, sp, #8
 80148c6:	6078      	str	r0, [r7, #4]
 80148c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d105      	bne.n	80148e0 <udp_input+0x20>
 80148d4:	4b7c      	ldr	r3, [pc, #496]	; (8014ac8 <udp_input+0x208>)
 80148d6:	22cf      	movs	r2, #207	; 0xcf
 80148d8:	497c      	ldr	r1, [pc, #496]	; (8014acc <udp_input+0x20c>)
 80148da:	487d      	ldr	r0, [pc, #500]	; (8014ad0 <udp_input+0x210>)
 80148dc:	f005 f86a 	bl	80199b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d105      	bne.n	80148f2 <udp_input+0x32>
 80148e6:	4b78      	ldr	r3, [pc, #480]	; (8014ac8 <udp_input+0x208>)
 80148e8:	22d0      	movs	r2, #208	; 0xd0
 80148ea:	497a      	ldr	r1, [pc, #488]	; (8014ad4 <udp_input+0x214>)
 80148ec:	4878      	ldr	r0, [pc, #480]	; (8014ad0 <udp_input+0x210>)
 80148ee:	f005 f861 	bl	80199b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	895b      	ldrh	r3, [r3, #10]
 80148f6:	2b07      	cmp	r3, #7
 80148f8:	d803      	bhi.n	8014902 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7f9 fab4 	bl	800de68 <pbuf_free>
    goto end;
 8014900:	e0de      	b.n	8014ac0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	685b      	ldr	r3, [r3, #4]
 8014906:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014908:	4b73      	ldr	r3, [pc, #460]	; (8014ad8 <udp_input+0x218>)
 801490a:	695b      	ldr	r3, [r3, #20]
 801490c:	4a72      	ldr	r2, [pc, #456]	; (8014ad8 <udp_input+0x218>)
 801490e:	6812      	ldr	r2, [r2, #0]
 8014910:	4611      	mov	r1, r2
 8014912:	4618      	mov	r0, r3
 8014914:	f003 fe08 	bl	8018528 <ip4_addr_isbroadcast_u32>
 8014918:	4603      	mov	r3, r0
 801491a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	881b      	ldrh	r3, [r3, #0]
 8014920:	b29b      	uxth	r3, r3
 8014922:	4618      	mov	r0, r3
 8014924:	f7f7 fe38 	bl	800c598 <lwip_htons>
 8014928:	4603      	mov	r3, r0
 801492a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801492c:	697b      	ldr	r3, [r7, #20]
 801492e:	885b      	ldrh	r3, [r3, #2]
 8014930:	b29b      	uxth	r3, r3
 8014932:	4618      	mov	r0, r3
 8014934:	f7f7 fe30 	bl	800c598 <lwip_htons>
 8014938:	4603      	mov	r3, r0
 801493a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801493c:	2300      	movs	r3, #0
 801493e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014940:	2300      	movs	r3, #0
 8014942:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014944:	2300      	movs	r3, #0
 8014946:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014948:	4b64      	ldr	r3, [pc, #400]	; (8014adc <udp_input+0x21c>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	627b      	str	r3, [r7, #36]	; 0x24
 801494e:	e054      	b.n	80149fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014952:	8a5b      	ldrh	r3, [r3, #18]
 8014954:	89fa      	ldrh	r2, [r7, #14]
 8014956:	429a      	cmp	r2, r3
 8014958:	d14a      	bne.n	80149f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801495a:	7cfb      	ldrb	r3, [r7, #19]
 801495c:	461a      	mov	r2, r3
 801495e:	6839      	ldr	r1, [r7, #0]
 8014960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014962:	f7ff ff49 	bl	80147f8 <udp_input_local_match>
 8014966:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014968:	2b00      	cmp	r3, #0
 801496a:	d041      	beq.n	80149f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496e:	7c1b      	ldrb	r3, [r3, #16]
 8014970:	f003 0304 	and.w	r3, r3, #4
 8014974:	2b00      	cmp	r3, #0
 8014976:	d11d      	bne.n	80149b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d102      	bne.n	8014984 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	61fb      	str	r3, [r7, #28]
 8014982:	e017      	b.n	80149b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014984:	7cfb      	ldrb	r3, [r7, #19]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d014      	beq.n	80149b4 <udp_input+0xf4>
 801498a:	4b53      	ldr	r3, [pc, #332]	; (8014ad8 <udp_input+0x218>)
 801498c:	695b      	ldr	r3, [r3, #20]
 801498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014992:	d10f      	bne.n	80149b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	681a      	ldr	r2, [r3, #0]
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	3304      	adds	r3, #4
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d008      	beq.n	80149b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80149a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	3304      	adds	r3, #4
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d101      	bne.n	80149b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80149b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80149b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b6:	8a9b      	ldrh	r3, [r3, #20]
 80149b8:	8a3a      	ldrh	r2, [r7, #16]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d118      	bne.n	80149f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d005      	beq.n	80149d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80149c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c8:	685a      	ldr	r2, [r3, #4]
 80149ca:	4b43      	ldr	r3, [pc, #268]	; (8014ad8 <udp_input+0x218>)
 80149cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d10e      	bne.n	80149f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80149d2:	6a3b      	ldr	r3, [r7, #32]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d014      	beq.n	8014a02 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80149d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149da:	68da      	ldr	r2, [r3, #12]
 80149dc:	6a3b      	ldr	r3, [r7, #32]
 80149de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80149e0:	4b3e      	ldr	r3, [pc, #248]	; (8014adc <udp_input+0x21c>)
 80149e2:	681a      	ldr	r2, [r3, #0]
 80149e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80149e8:	4a3c      	ldr	r2, [pc, #240]	; (8014adc <udp_input+0x21c>)
 80149ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80149ee:	e008      	b.n	8014a02 <udp_input+0x142>
      }
    }

    prev = pcb;
 80149f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80149f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	627b      	str	r3, [r7, #36]	; 0x24
 80149fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d1a7      	bne.n	8014950 <udp_input+0x90>
 8014a00:	e000      	b.n	8014a04 <udp_input+0x144>
        break;
 8014a02:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d101      	bne.n	8014a0e <udp_input+0x14e>
    pcb = uncon_pcb;
 8014a0a:	69fb      	ldr	r3, [r7, #28]
 8014a0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <udp_input+0x15a>
    for_us = 1;
 8014a14:	2301      	movs	r3, #1
 8014a16:	76fb      	strb	r3, [r7, #27]
 8014a18:	e00a      	b.n	8014a30 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	4b2d      	ldr	r3, [pc, #180]	; (8014ad8 <udp_input+0x218>)
 8014a22:	695b      	ldr	r3, [r3, #20]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	bf0c      	ite	eq
 8014a28:	2301      	moveq	r3, #1
 8014a2a:	2300      	movne	r3, #0
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014a30:	7efb      	ldrb	r3, [r7, #27]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d041      	beq.n	8014aba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014a36:	2108      	movs	r1, #8
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7f9 f98f 	bl	800dd5c <pbuf_remove_header>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d00a      	beq.n	8014a5a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014a44:	4b20      	ldr	r3, [pc, #128]	; (8014ac8 <udp_input+0x208>)
 8014a46:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014a4a:	4925      	ldr	r1, [pc, #148]	; (8014ae0 <udp_input+0x220>)
 8014a4c:	4820      	ldr	r0, [pc, #128]	; (8014ad0 <udp_input+0x210>)
 8014a4e:	f004 ffb1 	bl	80199b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f7f9 fa08 	bl	800de68 <pbuf_free>
      goto end;
 8014a58:	e032      	b.n	8014ac0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d012      	beq.n	8014a86 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00a      	beq.n	8014a7e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6a:	699c      	ldr	r4, [r3, #24]
 8014a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6e:	69d8      	ldr	r0, [r3, #28]
 8014a70:	8a3b      	ldrh	r3, [r7, #16]
 8014a72:	9300      	str	r3, [sp, #0]
 8014a74:	4b1b      	ldr	r3, [pc, #108]	; (8014ae4 <udp_input+0x224>)
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014a7c:	e021      	b.n	8014ac2 <udp_input+0x202>
        pbuf_free(p);
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f7f9 f9f2 	bl	800de68 <pbuf_free>
        goto end;
 8014a84:	e01c      	b.n	8014ac0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014a86:	7cfb      	ldrb	r3, [r7, #19]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d112      	bne.n	8014ab2 <udp_input+0x1f2>
 8014a8c:	4b12      	ldr	r3, [pc, #72]	; (8014ad8 <udp_input+0x218>)
 8014a8e:	695b      	ldr	r3, [r3, #20]
 8014a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a94:	2be0      	cmp	r3, #224	; 0xe0
 8014a96:	d00c      	beq.n	8014ab2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a98:	4b0f      	ldr	r3, [pc, #60]	; (8014ad8 <udp_input+0x218>)
 8014a9a:	899b      	ldrh	r3, [r3, #12]
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	b21b      	sxth	r3, r3
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7f9 f9cc 	bl	800de42 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014aaa:	2103      	movs	r1, #3
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f003 f9fd 	bl	8017eac <icmp_dest_unreach>
      pbuf_free(p);
 8014ab2:	6878      	ldr	r0, [r7, #4]
 8014ab4:	f7f9 f9d8 	bl	800de68 <pbuf_free>
  return;
 8014ab8:	e003      	b.n	8014ac2 <udp_input+0x202>
    pbuf_free(p);
 8014aba:	6878      	ldr	r0, [r7, #4]
 8014abc:	f7f9 f9d4 	bl	800de68 <pbuf_free>
  return;
 8014ac0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014ac2:	372c      	adds	r7, #44	; 0x2c
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd90      	pop	{r4, r7, pc}
 8014ac8:	0801ccc4 	.word	0x0801ccc4
 8014acc:	0801cd68 	.word	0x0801cd68
 8014ad0:	0801cd18 	.word	0x0801cd18
 8014ad4:	0801cd80 	.word	0x0801cd80
 8014ad8:	200097a8 	.word	0x200097a8
 8014adc:	2000cf78 	.word	0x2000cf78
 8014ae0:	0801cd9c 	.word	0x0801cd9c
 8014ae4:	200097b8 	.word	0x200097b8

08014ae8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b088      	sub	sp, #32
 8014aec:	af02      	add	r7, sp, #8
 8014aee:	60f8      	str	r0, [r7, #12]
 8014af0:	60b9      	str	r1, [r7, #8]
 8014af2:	607a      	str	r2, [r7, #4]
 8014af4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d109      	bne.n	8014b10 <udp_sendto_if+0x28>
 8014afc:	4b2e      	ldr	r3, [pc, #184]	; (8014bb8 <udp_sendto_if+0xd0>)
 8014afe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b02:	492e      	ldr	r1, [pc, #184]	; (8014bbc <udp_sendto_if+0xd4>)
 8014b04:	482e      	ldr	r0, [pc, #184]	; (8014bc0 <udp_sendto_if+0xd8>)
 8014b06:	f004 ff55 	bl	80199b4 <iprintf>
 8014b0a:	f06f 030f 	mvn.w	r3, #15
 8014b0e:	e04f      	b.n	8014bb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d109      	bne.n	8014b2a <udp_sendto_if+0x42>
 8014b16:	4b28      	ldr	r3, [pc, #160]	; (8014bb8 <udp_sendto_if+0xd0>)
 8014b18:	f240 2281 	movw	r2, #641	; 0x281
 8014b1c:	4929      	ldr	r1, [pc, #164]	; (8014bc4 <udp_sendto_if+0xdc>)
 8014b1e:	4828      	ldr	r0, [pc, #160]	; (8014bc0 <udp_sendto_if+0xd8>)
 8014b20:	f004 ff48 	bl	80199b4 <iprintf>
 8014b24:	f06f 030f 	mvn.w	r3, #15
 8014b28:	e042      	b.n	8014bb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d109      	bne.n	8014b44 <udp_sendto_if+0x5c>
 8014b30:	4b21      	ldr	r3, [pc, #132]	; (8014bb8 <udp_sendto_if+0xd0>)
 8014b32:	f240 2282 	movw	r2, #642	; 0x282
 8014b36:	4924      	ldr	r1, [pc, #144]	; (8014bc8 <udp_sendto_if+0xe0>)
 8014b38:	4821      	ldr	r0, [pc, #132]	; (8014bc0 <udp_sendto_if+0xd8>)
 8014b3a:	f004 ff3b 	bl	80199b4 <iprintf>
 8014b3e:	f06f 030f 	mvn.w	r3, #15
 8014b42:	e035      	b.n	8014bb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014b44:	6a3b      	ldr	r3, [r7, #32]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d109      	bne.n	8014b5e <udp_sendto_if+0x76>
 8014b4a:	4b1b      	ldr	r3, [pc, #108]	; (8014bb8 <udp_sendto_if+0xd0>)
 8014b4c:	f240 2283 	movw	r2, #643	; 0x283
 8014b50:	491e      	ldr	r1, [pc, #120]	; (8014bcc <udp_sendto_if+0xe4>)
 8014b52:	481b      	ldr	r0, [pc, #108]	; (8014bc0 <udp_sendto_if+0xd8>)
 8014b54:	f004 ff2e 	bl	80199b4 <iprintf>
 8014b58:	f06f 030f 	mvn.w	r3, #15
 8014b5c:	e028      	b.n	8014bb0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d009      	beq.n	8014b78 <udp_sendto_if+0x90>
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d005      	beq.n	8014b78 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014b74:	2be0      	cmp	r3, #224	; 0xe0
 8014b76:	d103      	bne.n	8014b80 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014b78:	6a3b      	ldr	r3, [r7, #32]
 8014b7a:	3304      	adds	r3, #4
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e00b      	b.n	8014b98 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	681a      	ldr	r2, [r3, #0]
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	3304      	adds	r3, #4
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	429a      	cmp	r2, r3
 8014b8c:	d002      	beq.n	8014b94 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014b8e:	f06f 0303 	mvn.w	r3, #3
 8014b92:	e00d      	b.n	8014bb0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014b98:	887a      	ldrh	r2, [r7, #2]
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	9301      	str	r3, [sp, #4]
 8014b9e:	6a3b      	ldr	r3, [r7, #32]
 8014ba0:	9300      	str	r3, [sp, #0]
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	687a      	ldr	r2, [r7, #4]
 8014ba6:	68b9      	ldr	r1, [r7, #8]
 8014ba8:	68f8      	ldr	r0, [r7, #12]
 8014baa:	f000 f811 	bl	8014bd0 <udp_sendto_if_src>
 8014bae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0801ccc4 	.word	0x0801ccc4
 8014bbc:	0801ce38 	.word	0x0801ce38
 8014bc0:	0801cd18 	.word	0x0801cd18
 8014bc4:	0801ce54 	.word	0x0801ce54
 8014bc8:	0801ce70 	.word	0x0801ce70
 8014bcc:	0801ce90 	.word	0x0801ce90

08014bd0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014bd0:	b580      	push	{r7, lr}
 8014bd2:	b08c      	sub	sp, #48	; 0x30
 8014bd4:	af04      	add	r7, sp, #16
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	607a      	str	r2, [r7, #4]
 8014bdc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d109      	bne.n	8014bf8 <udp_sendto_if_src+0x28>
 8014be4:	4b65      	ldr	r3, [pc, #404]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014be6:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014bea:	4965      	ldr	r1, [pc, #404]	; (8014d80 <udp_sendto_if_src+0x1b0>)
 8014bec:	4865      	ldr	r0, [pc, #404]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014bee:	f004 fee1 	bl	80199b4 <iprintf>
 8014bf2:	f06f 030f 	mvn.w	r3, #15
 8014bf6:	e0bc      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d109      	bne.n	8014c12 <udp_sendto_if_src+0x42>
 8014bfe:	4b5f      	ldr	r3, [pc, #380]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014c00:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014c04:	4960      	ldr	r1, [pc, #384]	; (8014d88 <udp_sendto_if_src+0x1b8>)
 8014c06:	485f      	ldr	r0, [pc, #380]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014c08:	f004 fed4 	bl	80199b4 <iprintf>
 8014c0c:	f06f 030f 	mvn.w	r3, #15
 8014c10:	e0af      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d109      	bne.n	8014c2c <udp_sendto_if_src+0x5c>
 8014c18:	4b58      	ldr	r3, [pc, #352]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014c1a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014c1e:	495b      	ldr	r1, [pc, #364]	; (8014d8c <udp_sendto_if_src+0x1bc>)
 8014c20:	4858      	ldr	r0, [pc, #352]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014c22:	f004 fec7 	bl	80199b4 <iprintf>
 8014c26:	f06f 030f 	mvn.w	r3, #15
 8014c2a:	e0a2      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d109      	bne.n	8014c46 <udp_sendto_if_src+0x76>
 8014c32:	4b52      	ldr	r3, [pc, #328]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014c34:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014c38:	4955      	ldr	r1, [pc, #340]	; (8014d90 <udp_sendto_if_src+0x1c0>)
 8014c3a:	4852      	ldr	r0, [pc, #328]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014c3c:	f004 feba 	bl	80199b4 <iprintf>
 8014c40:	f06f 030f 	mvn.w	r3, #15
 8014c44:	e095      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d109      	bne.n	8014c60 <udp_sendto_if_src+0x90>
 8014c4c:	4b4b      	ldr	r3, [pc, #300]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014c4e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014c52:	4950      	ldr	r1, [pc, #320]	; (8014d94 <udp_sendto_if_src+0x1c4>)
 8014c54:	484b      	ldr	r0, [pc, #300]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014c56:	f004 fead 	bl	80199b4 <iprintf>
 8014c5a:	f06f 030f 	mvn.w	r3, #15
 8014c5e:	e088      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	8a5b      	ldrh	r3, [r3, #18]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d10f      	bne.n	8014c88 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014c68:	68f9      	ldr	r1, [r7, #12]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	8a5b      	ldrh	r3, [r3, #18]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f000 f893 	bl	8014d9c <udp_bind>
 8014c76:	4603      	mov	r3, r0
 8014c78:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014c7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d002      	beq.n	8014c88 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014c82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014c86:	e074      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	891b      	ldrh	r3, [r3, #8]
 8014c8c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d902      	bls.n	8014c9a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014c94:	f04f 33ff 	mov.w	r3, #4294967295
 8014c98:	e06b      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014c9a:	2108      	movs	r1, #8
 8014c9c:	68b8      	ldr	r0, [r7, #8]
 8014c9e:	f7f9 f84d 	bl	800dd3c <pbuf_add_header>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d015      	beq.n	8014cd4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014ca8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014cac:	2108      	movs	r1, #8
 8014cae:	2022      	movs	r0, #34	; 0x22
 8014cb0:	f7f8 fdf6 	bl	800d8a0 <pbuf_alloc>
 8014cb4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d102      	bne.n	8014cc2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc0:	e057      	b.n	8014d72 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	891b      	ldrh	r3, [r3, #8]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d006      	beq.n	8014cd8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014cca:	68b9      	ldr	r1, [r7, #8]
 8014ccc:	69f8      	ldr	r0, [r7, #28]
 8014cce:	f7f9 f9ef 	bl	800e0b0 <pbuf_chain>
 8014cd2:	e001      	b.n	8014cd8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	895b      	ldrh	r3, [r3, #10]
 8014cdc:	2b07      	cmp	r3, #7
 8014cde:	d806      	bhi.n	8014cee <udp_sendto_if_src+0x11e>
 8014ce0:	4b26      	ldr	r3, [pc, #152]	; (8014d7c <udp_sendto_if_src+0x1ac>)
 8014ce2:	f240 320d 	movw	r2, #781	; 0x30d
 8014ce6:	492c      	ldr	r1, [pc, #176]	; (8014d98 <udp_sendto_if_src+0x1c8>)
 8014ce8:	4826      	ldr	r0, [pc, #152]	; (8014d84 <udp_sendto_if_src+0x1b4>)
 8014cea:	f004 fe63 	bl	80199b4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	685b      	ldr	r3, [r3, #4]
 8014cf2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	8a5b      	ldrh	r3, [r3, #18]
 8014cf8:	4618      	mov	r0, r3
 8014cfa:	f7f7 fc4d 	bl	800c598 <lwip_htons>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	461a      	mov	r2, r3
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014d06:	887b      	ldrh	r3, [r7, #2]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f7 fc45 	bl	800c598 <lwip_htons>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	461a      	mov	r2, r3
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	2200      	movs	r2, #0
 8014d1a:	719a      	strb	r2, [r3, #6]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	891b      	ldrh	r3, [r3, #8]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f7f7 fc37 	bl	800c598 <lwip_htons>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	461a      	mov	r2, r3
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014d32:	2311      	movs	r3, #17
 8014d34:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	7adb      	ldrb	r3, [r3, #11]
 8014d3a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	7a9b      	ldrb	r3, [r3, #10]
 8014d40:	7cb9      	ldrb	r1, [r7, #18]
 8014d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d44:	9202      	str	r2, [sp, #8]
 8014d46:	7cfa      	ldrb	r2, [r7, #19]
 8014d48:	9201      	str	r2, [sp, #4]
 8014d4a:	9300      	str	r3, [sp, #0]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d52:	69f8      	ldr	r0, [r7, #28]
 8014d54:	f003 fb3a 	bl	80183cc <ip4_output_if_src>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014d5c:	69fa      	ldr	r2, [r7, #28]
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d004      	beq.n	8014d6e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014d64:	69f8      	ldr	r0, [r7, #28]
 8014d66:	f7f9 f87f 	bl	800de68 <pbuf_free>
    q = NULL;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014d6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3720      	adds	r7, #32
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	0801ccc4 	.word	0x0801ccc4
 8014d80:	0801ceb0 	.word	0x0801ceb0
 8014d84:	0801cd18 	.word	0x0801cd18
 8014d88:	0801ced0 	.word	0x0801ced0
 8014d8c:	0801cef0 	.word	0x0801cef0
 8014d90:	0801cf14 	.word	0x0801cf14
 8014d94:	0801cf38 	.word	0x0801cf38
 8014d98:	0801cf5c 	.word	0x0801cf5c

08014d9c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	4613      	mov	r3, r2
 8014da8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d101      	bne.n	8014db4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014db0:	4b39      	ldr	r3, [pc, #228]	; (8014e98 <udp_bind+0xfc>)
 8014db2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d109      	bne.n	8014dce <udp_bind+0x32>
 8014dba:	4b38      	ldr	r3, [pc, #224]	; (8014e9c <udp_bind+0x100>)
 8014dbc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014dc0:	4937      	ldr	r1, [pc, #220]	; (8014ea0 <udp_bind+0x104>)
 8014dc2:	4838      	ldr	r0, [pc, #224]	; (8014ea4 <udp_bind+0x108>)
 8014dc4:	f004 fdf6 	bl	80199b4 <iprintf>
 8014dc8:	f06f 030f 	mvn.w	r3, #15
 8014dcc:	e060      	b.n	8014e90 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014dce:	2300      	movs	r3, #0
 8014dd0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014dd2:	4b35      	ldr	r3, [pc, #212]	; (8014ea8 <udp_bind+0x10c>)
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	617b      	str	r3, [r7, #20]
 8014dd8:	e009      	b.n	8014dee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014dda:	68fa      	ldr	r2, [r7, #12]
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d102      	bne.n	8014de8 <udp_bind+0x4c>
      rebind = 1;
 8014de2:	2301      	movs	r3, #1
 8014de4:	74fb      	strb	r3, [r7, #19]
      break;
 8014de6:	e005      	b.n	8014df4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	617b      	str	r3, [r7, #20]
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d1f2      	bne.n	8014dda <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014df4:	88fb      	ldrh	r3, [r7, #6]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d109      	bne.n	8014e0e <udp_bind+0x72>
    port = udp_new_port();
 8014dfa:	f7ff fcc5 	bl	8014788 <udp_new_port>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014e02:	88fb      	ldrh	r3, [r7, #6]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d12c      	bne.n	8014e62 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014e08:	f06f 0307 	mvn.w	r3, #7
 8014e0c:	e040      	b.n	8014e90 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e0e:	4b26      	ldr	r3, [pc, #152]	; (8014ea8 <udp_bind+0x10c>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	617b      	str	r3, [r7, #20]
 8014e14:	e022      	b.n	8014e5c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014e16:	68fa      	ldr	r2, [r7, #12]
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d01b      	beq.n	8014e56 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	8a5b      	ldrh	r3, [r3, #18]
 8014e22:	88fa      	ldrh	r2, [r7, #6]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d116      	bne.n	8014e56 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d00d      	beq.n	8014e50 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d00a      	beq.n	8014e50 <udp_bind+0xb4>
 8014e3a:	68bb      	ldr	r3, [r7, #8]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d006      	beq.n	8014e50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e42:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d003      	beq.n	8014e50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d102      	bne.n	8014e56 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014e50:	f06f 0307 	mvn.w	r3, #7
 8014e54:	e01c      	b.n	8014e90 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	68db      	ldr	r3, [r3, #12]
 8014e5a:	617b      	str	r3, [r7, #20]
 8014e5c:	697b      	ldr	r3, [r7, #20]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1d9      	bne.n	8014e16 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d002      	beq.n	8014e6e <udp_bind+0xd2>
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	e000      	b.n	8014e70 <udp_bind+0xd4>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	68fa      	ldr	r2, [r7, #12]
 8014e72:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	88fa      	ldrh	r2, [r7, #6]
 8014e78:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014e7a:	7cfb      	ldrb	r3, [r7, #19]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d106      	bne.n	8014e8e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014e80:	4b09      	ldr	r3, [pc, #36]	; (8014ea8 <udp_bind+0x10c>)
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014e88:	4a07      	ldr	r2, [pc, #28]	; (8014ea8 <udp_bind+0x10c>)
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014e8e:	2300      	movs	r3, #0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3718      	adds	r7, #24
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	0801ff18 	.word	0x0801ff18
 8014e9c:	0801ccc4 	.word	0x0801ccc4
 8014ea0:	0801cf8c 	.word	0x0801cf8c
 8014ea4:	0801cd18 	.word	0x0801cd18
 8014ea8:	2000cf78 	.word	0x2000cf78

08014eac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b086      	sub	sp, #24
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d109      	bne.n	8014ed4 <udp_connect+0x28>
 8014ec0:	4b2c      	ldr	r3, [pc, #176]	; (8014f74 <udp_connect+0xc8>)
 8014ec2:	f240 4235 	movw	r2, #1077	; 0x435
 8014ec6:	492c      	ldr	r1, [pc, #176]	; (8014f78 <udp_connect+0xcc>)
 8014ec8:	482c      	ldr	r0, [pc, #176]	; (8014f7c <udp_connect+0xd0>)
 8014eca:	f004 fd73 	bl	80199b4 <iprintf>
 8014ece:	f06f 030f 	mvn.w	r3, #15
 8014ed2:	e04b      	b.n	8014f6c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d109      	bne.n	8014eee <udp_connect+0x42>
 8014eda:	4b26      	ldr	r3, [pc, #152]	; (8014f74 <udp_connect+0xc8>)
 8014edc:	f240 4236 	movw	r2, #1078	; 0x436
 8014ee0:	4927      	ldr	r1, [pc, #156]	; (8014f80 <udp_connect+0xd4>)
 8014ee2:	4826      	ldr	r0, [pc, #152]	; (8014f7c <udp_connect+0xd0>)
 8014ee4:	f004 fd66 	bl	80199b4 <iprintf>
 8014ee8:	f06f 030f 	mvn.w	r3, #15
 8014eec:	e03e      	b.n	8014f6c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	8a5b      	ldrh	r3, [r3, #18]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10f      	bne.n	8014f16 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014ef6:	68f9      	ldr	r1, [r7, #12]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	8a5b      	ldrh	r3, [r3, #18]
 8014efc:	461a      	mov	r2, r3
 8014efe:	68f8      	ldr	r0, [r7, #12]
 8014f00:	f7ff ff4c 	bl	8014d9c <udp_bind>
 8014f04:	4603      	mov	r3, r0
 8014f06:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014f08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d002      	beq.n	8014f16 <udp_connect+0x6a>
      return err;
 8014f10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f14:	e02a      	b.n	8014f6c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d002      	beq.n	8014f22 <udp_connect+0x76>
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	e000      	b.n	8014f24 <udp_connect+0x78>
 8014f22:	2300      	movs	r3, #0
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	88fa      	ldrh	r2, [r7, #6]
 8014f2c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	7c1b      	ldrb	r3, [r3, #16]
 8014f32:	f043 0304 	orr.w	r3, r3, #4
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f3c:	4b11      	ldr	r3, [pc, #68]	; (8014f84 <udp_connect+0xd8>)
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	617b      	str	r3, [r7, #20]
 8014f42:	e008      	b.n	8014f56 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	697b      	ldr	r3, [r7, #20]
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d101      	bne.n	8014f50 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	e00d      	b.n	8014f6c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	617b      	str	r3, [r7, #20]
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d1f3      	bne.n	8014f44 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014f5c:	4b09      	ldr	r3, [pc, #36]	; (8014f84 <udp_connect+0xd8>)
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014f64:	4a07      	ldr	r2, [pc, #28]	; (8014f84 <udp_connect+0xd8>)
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	3718      	adds	r7, #24
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	0801ccc4 	.word	0x0801ccc4
 8014f78:	0801cfa4 	.word	0x0801cfa4
 8014f7c:	0801cd18 	.word	0x0801cd18
 8014f80:	0801cfc0 	.word	0x0801cfc0
 8014f84:	2000cf78 	.word	0x2000cf78

08014f88 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b084      	sub	sp, #16
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d107      	bne.n	8014faa <udp_recv+0x22>
 8014f9a:	4b08      	ldr	r3, [pc, #32]	; (8014fbc <udp_recv+0x34>)
 8014f9c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014fa0:	4907      	ldr	r1, [pc, #28]	; (8014fc0 <udp_recv+0x38>)
 8014fa2:	4808      	ldr	r0, [pc, #32]	; (8014fc4 <udp_recv+0x3c>)
 8014fa4:	f004 fd06 	bl	80199b4 <iprintf>
 8014fa8:	e005      	b.n	8014fb6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	68ba      	ldr	r2, [r7, #8]
 8014fae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	61da      	str	r2, [r3, #28]
}
 8014fb6:	3710      	adds	r7, #16
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	0801ccc4 	.word	0x0801ccc4
 8014fc0:	0801cff8 	.word	0x0801cff8
 8014fc4:	0801cd18 	.word	0x0801cd18

08014fc8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d107      	bne.n	8014fe6 <udp_remove+0x1e>
 8014fd6:	4b19      	ldr	r3, [pc, #100]	; (801503c <udp_remove+0x74>)
 8014fd8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014fdc:	4918      	ldr	r1, [pc, #96]	; (8015040 <udp_remove+0x78>)
 8014fde:	4819      	ldr	r0, [pc, #100]	; (8015044 <udp_remove+0x7c>)
 8014fe0:	f004 fce8 	bl	80199b4 <iprintf>
 8014fe4:	e026      	b.n	8015034 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014fe6:	4b18      	ldr	r3, [pc, #96]	; (8015048 <udp_remove+0x80>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	687a      	ldr	r2, [r7, #4]
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d105      	bne.n	8014ffc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014ff0:	4b15      	ldr	r3, [pc, #84]	; (8015048 <udp_remove+0x80>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	4a14      	ldr	r2, [pc, #80]	; (8015048 <udp_remove+0x80>)
 8014ff8:	6013      	str	r3, [r2, #0]
 8014ffa:	e017      	b.n	801502c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ffc:	4b12      	ldr	r3, [pc, #72]	; (8015048 <udp_remove+0x80>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	60fb      	str	r3, [r7, #12]
 8015002:	e010      	b.n	8015026 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d009      	beq.n	8015020 <udp_remove+0x58>
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	429a      	cmp	r2, r3
 8015014:	d104      	bne.n	8015020 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	68da      	ldr	r2, [r3, #12]
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	60da      	str	r2, [r3, #12]
        break;
 801501e:	e005      	b.n	801502c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	60fb      	str	r3, [r7, #12]
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d1eb      	bne.n	8015004 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801502c:	6879      	ldr	r1, [r7, #4]
 801502e:	2000      	movs	r0, #0
 8015030:	f7f8 f86a 	bl	800d108 <memp_free>
}
 8015034:	3710      	adds	r7, #16
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	0801ccc4 	.word	0x0801ccc4
 8015040:	0801d010 	.word	0x0801d010
 8015044:	0801cd18 	.word	0x0801cd18
 8015048:	2000cf78 	.word	0x2000cf78

0801504c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015052:	2000      	movs	r0, #0
 8015054:	f7f7 ffe2 	bl	800d01c <memp_malloc>
 8015058:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d007      	beq.n	8015070 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015060:	2220      	movs	r2, #32
 8015062:	2100      	movs	r1, #0
 8015064:	6878      	ldr	r0, [r7, #4]
 8015066:	f004 fd0a 	bl	8019a7e <memset>
    pcb->ttl = UDP_TTL;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	22ff      	movs	r2, #255	; 0xff
 801506e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015070:	687b      	ldr	r3, [r7, #4]
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
	...

0801507c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801507c:	b480      	push	{r7}
 801507e:	b085      	sub	sp, #20
 8015080:	af00      	add	r7, sp, #0
 8015082:	6078      	str	r0, [r7, #4]
 8015084:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d01e      	beq.n	80150ca <udp_netif_ip_addr_changed+0x4e>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d01a      	beq.n	80150ca <udp_netif_ip_addr_changed+0x4e>
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d017      	beq.n	80150ca <udp_netif_ip_addr_changed+0x4e>
 801509a:	683b      	ldr	r3, [r7, #0]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d013      	beq.n	80150ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80150a2:	4b0d      	ldr	r3, [pc, #52]	; (80150d8 <udp_netif_ip_addr_changed+0x5c>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	60fb      	str	r3, [r7, #12]
 80150a8:	e00c      	b.n	80150c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	429a      	cmp	r2, r3
 80150b4:	d103      	bne.n	80150be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80150b6:	683b      	ldr	r3, [r7, #0]
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	60fb      	str	r3, [r7, #12]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d1ef      	bne.n	80150aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80150ca:	bf00      	nop
 80150cc:	3714      	adds	r7, #20
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	2000cf78 	.word	0x2000cf78

080150dc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80150e0:	4b20      	ldr	r3, [pc, #128]	; (8015164 <dhcp_inc_pcb_refcount+0x88>)
 80150e2:	781b      	ldrb	r3, [r3, #0]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d133      	bne.n	8015150 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80150e8:	4b1f      	ldr	r3, [pc, #124]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d005      	beq.n	80150fc <dhcp_inc_pcb_refcount+0x20>
 80150f0:	4b1e      	ldr	r3, [pc, #120]	; (801516c <dhcp_inc_pcb_refcount+0x90>)
 80150f2:	22e5      	movs	r2, #229	; 0xe5
 80150f4:	491e      	ldr	r1, [pc, #120]	; (8015170 <dhcp_inc_pcb_refcount+0x94>)
 80150f6:	481f      	ldr	r0, [pc, #124]	; (8015174 <dhcp_inc_pcb_refcount+0x98>)
 80150f8:	f004 fc5c 	bl	80199b4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80150fc:	f7ff ffa6 	bl	801504c <udp_new>
 8015100:	4603      	mov	r3, r0
 8015102:	4a19      	ldr	r2, [pc, #100]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015104:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015106:	4b18      	ldr	r3, [pc, #96]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d102      	bne.n	8015114 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801510e:	f04f 33ff 	mov.w	r3, #4294967295
 8015112:	e024      	b.n	801515e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015114:	4b14      	ldr	r3, [pc, #80]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	7a5a      	ldrb	r2, [r3, #9]
 801511a:	4b13      	ldr	r3, [pc, #76]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 801511c:	681b      	ldr	r3, [r3, #0]
 801511e:	f042 0220 	orr.w	r2, r2, #32
 8015122:	b2d2      	uxtb	r2, r2
 8015124:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015126:	4b10      	ldr	r3, [pc, #64]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	2244      	movs	r2, #68	; 0x44
 801512c:	4912      	ldr	r1, [pc, #72]	; (8015178 <dhcp_inc_pcb_refcount+0x9c>)
 801512e:	4618      	mov	r0, r3
 8015130:	f7ff fe34 	bl	8014d9c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015134:	4b0c      	ldr	r3, [pc, #48]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	2243      	movs	r2, #67	; 0x43
 801513a:	490f      	ldr	r1, [pc, #60]	; (8015178 <dhcp_inc_pcb_refcount+0x9c>)
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff feb5 	bl	8014eac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015142:	4b09      	ldr	r3, [pc, #36]	; (8015168 <dhcp_inc_pcb_refcount+0x8c>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2200      	movs	r2, #0
 8015148:	490c      	ldr	r1, [pc, #48]	; (801517c <dhcp_inc_pcb_refcount+0xa0>)
 801514a:	4618      	mov	r0, r3
 801514c:	f7ff ff1c 	bl	8014f88 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015150:	4b04      	ldr	r3, [pc, #16]	; (8015164 <dhcp_inc_pcb_refcount+0x88>)
 8015152:	781b      	ldrb	r3, [r3, #0]
 8015154:	3301      	adds	r3, #1
 8015156:	b2da      	uxtb	r2, r3
 8015158:	4b02      	ldr	r3, [pc, #8]	; (8015164 <dhcp_inc_pcb_refcount+0x88>)
 801515a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	2000cfa8 	.word	0x2000cfa8
 8015168:	2000cfa4 	.word	0x2000cfa4
 801516c:	0801d028 	.word	0x0801d028
 8015170:	0801d060 	.word	0x0801d060
 8015174:	0801d088 	.word	0x0801d088
 8015178:	0801ff18 	.word	0x0801ff18
 801517c:	08016a15 	.word	0x08016a15

08015180 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015184:	4b0e      	ldr	r3, [pc, #56]	; (80151c0 <dhcp_dec_pcb_refcount+0x40>)
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d105      	bne.n	8015198 <dhcp_dec_pcb_refcount+0x18>
 801518c:	4b0d      	ldr	r3, [pc, #52]	; (80151c4 <dhcp_dec_pcb_refcount+0x44>)
 801518e:	22ff      	movs	r2, #255	; 0xff
 8015190:	490d      	ldr	r1, [pc, #52]	; (80151c8 <dhcp_dec_pcb_refcount+0x48>)
 8015192:	480e      	ldr	r0, [pc, #56]	; (80151cc <dhcp_dec_pcb_refcount+0x4c>)
 8015194:	f004 fc0e 	bl	80199b4 <iprintf>
  dhcp_pcb_refcount--;
 8015198:	4b09      	ldr	r3, [pc, #36]	; (80151c0 <dhcp_dec_pcb_refcount+0x40>)
 801519a:	781b      	ldrb	r3, [r3, #0]
 801519c:	3b01      	subs	r3, #1
 801519e:	b2da      	uxtb	r2, r3
 80151a0:	4b07      	ldr	r3, [pc, #28]	; (80151c0 <dhcp_dec_pcb_refcount+0x40>)
 80151a2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80151a4:	4b06      	ldr	r3, [pc, #24]	; (80151c0 <dhcp_dec_pcb_refcount+0x40>)
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d107      	bne.n	80151bc <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80151ac:	4b08      	ldr	r3, [pc, #32]	; (80151d0 <dhcp_dec_pcb_refcount+0x50>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ff ff09 	bl	8014fc8 <udp_remove>
    dhcp_pcb = NULL;
 80151b6:	4b06      	ldr	r3, [pc, #24]	; (80151d0 <dhcp_dec_pcb_refcount+0x50>)
 80151b8:	2200      	movs	r2, #0
 80151ba:	601a      	str	r2, [r3, #0]
  }
}
 80151bc:	bf00      	nop
 80151be:	bd80      	pop	{r7, pc}
 80151c0:	2000cfa8 	.word	0x2000cfa8
 80151c4:	0801d028 	.word	0x0801d028
 80151c8:	0801d0b0 	.word	0x0801d0b0
 80151cc:	0801d088 	.word	0x0801d088
 80151d0:	2000cfa4 	.word	0x2000cfa4

080151d4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80151e2:	210c      	movs	r1, #12
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	f001 f857 	bl	8016298 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80151ea:	4b06      	ldr	r3, [pc, #24]	; (8015204 <dhcp_handle_nak+0x30>)
 80151ec:	4a05      	ldr	r2, [pc, #20]	; (8015204 <dhcp_handle_nak+0x30>)
 80151ee:	4905      	ldr	r1, [pc, #20]	; (8015204 <dhcp_handle_nak+0x30>)
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f7f8 f92b 	bl	800d44c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f000 fc4a 	bl	8015a90 <dhcp_discover>
}
 80151fc:	bf00      	nop
 80151fe:	3710      	adds	r7, #16
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}
 8015204:	0801ff18 	.word	0x0801ff18

08015208 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b084      	sub	sp, #16
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015214:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015216:	2108      	movs	r1, #8
 8015218:	68f8      	ldr	r0, [r7, #12]
 801521a:	f001 f83d 	bl	8016298 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	331c      	adds	r3, #28
 8015222:	2200      	movs	r2, #0
 8015224:	4619      	mov	r1, r3
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f002 fb3e 	bl	80178a8 <etharp_query>
 801522c:	4603      	mov	r3, r0
 801522e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	799b      	ldrb	r3, [r3, #6]
 8015234:	2bff      	cmp	r3, #255	; 0xff
 8015236:	d005      	beq.n	8015244 <dhcp_check+0x3c>
    dhcp->tries++;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	799b      	ldrb	r3, [r3, #6]
 801523c:	3301      	adds	r3, #1
 801523e:	b2da      	uxtb	r2, r3
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015248:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801524a:	893b      	ldrh	r3, [r7, #8]
 801524c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015250:	4a06      	ldr	r2, [pc, #24]	; (801526c <dhcp_check+0x64>)
 8015252:	fb82 1203 	smull	r1, r2, r2, r3
 8015256:	1152      	asrs	r2, r2, #5
 8015258:	17db      	asrs	r3, r3, #31
 801525a:	1ad3      	subs	r3, r2, r3
 801525c:	b29a      	uxth	r2, r3
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015262:	bf00      	nop
 8015264:	3710      	adds	r7, #16
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
 801526a:	bf00      	nop
 801526c:	10624dd3 	.word	0x10624dd3

08015270 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b084      	sub	sp, #16
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
 8015278:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015280:	4b0c      	ldr	r3, [pc, #48]	; (80152b4 <dhcp_handle_offer+0x44>)
 8015282:	789b      	ldrb	r3, [r3, #2]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d011      	beq.n	80152ac <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2200      	movs	r2, #0
 801528c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801528e:	4b0a      	ldr	r3, [pc, #40]	; (80152b8 <dhcp_handle_offer+0x48>)
 8015290:	689b      	ldr	r3, [r3, #8]
 8015292:	4618      	mov	r0, r3
 8015294:	f7f7 f995 	bl	800c5c2 <lwip_htonl>
 8015298:	4602      	mov	r2, r0
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801529e:	683b      	ldr	r3, [r7, #0]
 80152a0:	691a      	ldr	r2, [r3, #16]
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 f808 	bl	80152bc <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80152ac:	bf00      	nop
 80152ae:	3710      	adds	r7, #16
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}
 80152b4:	2000cf9c 	.word	0x2000cf9c
 80152b8:	2000cf7c 	.word	0x2000cf7c

080152bc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80152bc:	b5b0      	push	{r4, r5, r7, lr}
 80152be:	b08a      	sub	sp, #40	; 0x28
 80152c0:	af02      	add	r7, sp, #8
 80152c2:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d109      	bne.n	80152de <dhcp_select+0x22>
 80152ca:	4b71      	ldr	r3, [pc, #452]	; (8015490 <dhcp_select+0x1d4>)
 80152cc:	f240 1277 	movw	r2, #375	; 0x177
 80152d0:	4970      	ldr	r1, [pc, #448]	; (8015494 <dhcp_select+0x1d8>)
 80152d2:	4871      	ldr	r0, [pc, #452]	; (8015498 <dhcp_select+0x1dc>)
 80152d4:	f004 fb6e 	bl	80199b4 <iprintf>
 80152d8:	f06f 030f 	mvn.w	r3, #15
 80152dc:	e0d3      	b.n	8015486 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d109      	bne.n	80152fe <dhcp_select+0x42>
 80152ea:	4b69      	ldr	r3, [pc, #420]	; (8015490 <dhcp_select+0x1d4>)
 80152ec:	f240 1279 	movw	r2, #377	; 0x179
 80152f0:	496a      	ldr	r1, [pc, #424]	; (801549c <dhcp_select+0x1e0>)
 80152f2:	4869      	ldr	r0, [pc, #420]	; (8015498 <dhcp_select+0x1dc>)
 80152f4:	f004 fb5e 	bl	80199b4 <iprintf>
 80152f8:	f06f 0305 	mvn.w	r3, #5
 80152fc:	e0c3      	b.n	8015486 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80152fe:	2101      	movs	r1, #1
 8015300:	69b8      	ldr	r0, [r7, #24]
 8015302:	f000 ffc9 	bl	8016298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015306:	f107 030c 	add.w	r3, r7, #12
 801530a:	2203      	movs	r2, #3
 801530c:	69b9      	ldr	r1, [r7, #24]
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f001 fc4e 	bl	8016bb0 <dhcp_create_msg>
 8015314:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	2b00      	cmp	r3, #0
 801531a:	f000 8085 	beq.w	8015428 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015324:	89b8      	ldrh	r0, [r7, #12]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801532c:	2302      	movs	r3, #2
 801532e:	2239      	movs	r2, #57	; 0x39
 8015330:	f000 ffcc 	bl	80162cc <dhcp_option>
 8015334:	4603      	mov	r3, r0
 8015336:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015338:	89b8      	ldrh	r0, [r7, #12]
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015344:	461a      	mov	r2, r3
 8015346:	f001 f81b 	bl	8016380 <dhcp_option_short>
 801534a:	4603      	mov	r3, r0
 801534c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801534e:	89b8      	ldrh	r0, [r7, #12]
 8015350:	693b      	ldr	r3, [r7, #16]
 8015352:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015356:	2304      	movs	r3, #4
 8015358:	2232      	movs	r2, #50	; 0x32
 801535a:	f000 ffb7 	bl	80162cc <dhcp_option>
 801535e:	4603      	mov	r3, r0
 8015360:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015362:	89bc      	ldrh	r4, [r7, #12]
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801536a:	69bb      	ldr	r3, [r7, #24]
 801536c:	69db      	ldr	r3, [r3, #28]
 801536e:	4618      	mov	r0, r3
 8015370:	f7f7 f927 	bl	800c5c2 <lwip_htonl>
 8015374:	4603      	mov	r3, r0
 8015376:	461a      	mov	r2, r3
 8015378:	4629      	mov	r1, r5
 801537a:	4620      	mov	r0, r4
 801537c:	f001 f832 	bl	80163e4 <dhcp_option_long>
 8015380:	4603      	mov	r3, r0
 8015382:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015384:	89b8      	ldrh	r0, [r7, #12]
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801538c:	2304      	movs	r3, #4
 801538e:	2236      	movs	r2, #54	; 0x36
 8015390:	f000 ff9c 	bl	80162cc <dhcp_option>
 8015394:	4603      	mov	r3, r0
 8015396:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015398:	89bc      	ldrh	r4, [r7, #12]
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f7 f90c 	bl	800c5c2 <lwip_htonl>
 80153aa:	4603      	mov	r3, r0
 80153ac:	461a      	mov	r2, r3
 80153ae:	4629      	mov	r1, r5
 80153b0:	4620      	mov	r0, r4
 80153b2:	f001 f817 	bl	80163e4 <dhcp_option_long>
 80153b6:	4603      	mov	r3, r0
 80153b8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80153ba:	89b8      	ldrh	r0, [r7, #12]
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153c2:	2303      	movs	r3, #3
 80153c4:	2237      	movs	r2, #55	; 0x37
 80153c6:	f000 ff81 	bl	80162cc <dhcp_option>
 80153ca:	4603      	mov	r3, r0
 80153cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153ce:	2300      	movs	r3, #0
 80153d0:	77bb      	strb	r3, [r7, #30]
 80153d2:	e00e      	b.n	80153f2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80153d4:	89b8      	ldrh	r0, [r7, #12]
 80153d6:	693b      	ldr	r3, [r7, #16]
 80153d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153dc:	7fbb      	ldrb	r3, [r7, #30]
 80153de:	4a30      	ldr	r2, [pc, #192]	; (80154a0 <dhcp_select+0x1e4>)
 80153e0:	5cd3      	ldrb	r3, [r2, r3]
 80153e2:	461a      	mov	r2, r3
 80153e4:	f000 ffa6 	bl	8016334 <dhcp_option_byte>
 80153e8:	4603      	mov	r3, r0
 80153ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153ec:	7fbb      	ldrb	r3, [r7, #30]
 80153ee:	3301      	adds	r3, #1
 80153f0:	77bb      	strb	r3, [r7, #30]
 80153f2:	7fbb      	ldrb	r3, [r7, #30]
 80153f4:	2b02      	cmp	r3, #2
 80153f6:	d9ed      	bls.n	80153d4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153f8:	89b8      	ldrh	r0, [r7, #12]
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	33f0      	adds	r3, #240	; 0xf0
 80153fe:	697a      	ldr	r2, [r7, #20]
 8015400:	4619      	mov	r1, r3
 8015402:	f001 fcab 	bl	8016d5c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015406:	4b27      	ldr	r3, [pc, #156]	; (80154a4 <dhcp_select+0x1e8>)
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	4b27      	ldr	r3, [pc, #156]	; (80154a8 <dhcp_select+0x1ec>)
 801540c:	9301      	str	r3, [sp, #4]
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	9300      	str	r3, [sp, #0]
 8015412:	2343      	movs	r3, #67	; 0x43
 8015414:	4a25      	ldr	r2, [pc, #148]	; (80154ac <dhcp_select+0x1f0>)
 8015416:	6979      	ldr	r1, [r7, #20]
 8015418:	f7ff fbda 	bl	8014bd0 <udp_sendto_if_src>
 801541c:	4603      	mov	r3, r0
 801541e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015420:	6978      	ldr	r0, [r7, #20]
 8015422:	f7f8 fd21 	bl	800de68 <pbuf_free>
 8015426:	e001      	b.n	801542c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015428:	23ff      	movs	r3, #255	; 0xff
 801542a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	799b      	ldrb	r3, [r3, #6]
 8015430:	2bff      	cmp	r3, #255	; 0xff
 8015432:	d005      	beq.n	8015440 <dhcp_select+0x184>
    dhcp->tries++;
 8015434:	69bb      	ldr	r3, [r7, #24]
 8015436:	799b      	ldrb	r3, [r3, #6]
 8015438:	3301      	adds	r3, #1
 801543a:	b2da      	uxtb	r2, r3
 801543c:	69bb      	ldr	r3, [r7, #24]
 801543e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	799b      	ldrb	r3, [r3, #6]
 8015444:	2b05      	cmp	r3, #5
 8015446:	d80d      	bhi.n	8015464 <dhcp_select+0x1a8>
 8015448:	69bb      	ldr	r3, [r7, #24]
 801544a:	799b      	ldrb	r3, [r3, #6]
 801544c:	461a      	mov	r2, r3
 801544e:	2301      	movs	r3, #1
 8015450:	4093      	lsls	r3, r2
 8015452:	b29b      	uxth	r3, r3
 8015454:	461a      	mov	r2, r3
 8015456:	0152      	lsls	r2, r2, #5
 8015458:	1ad2      	subs	r2, r2, r3
 801545a:	0092      	lsls	r2, r2, #2
 801545c:	4413      	add	r3, r2
 801545e:	00db      	lsls	r3, r3, #3
 8015460:	b29b      	uxth	r3, r3
 8015462:	e001      	b.n	8015468 <dhcp_select+0x1ac>
 8015464:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015468:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801546a:	89fb      	ldrh	r3, [r7, #14]
 801546c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015470:	4a0f      	ldr	r2, [pc, #60]	; (80154b0 <dhcp_select+0x1f4>)
 8015472:	fb82 1203 	smull	r1, r2, r2, r3
 8015476:	1152      	asrs	r2, r2, #5
 8015478:	17db      	asrs	r3, r3, #31
 801547a:	1ad3      	subs	r3, r2, r3
 801547c:	b29a      	uxth	r2, r3
 801547e:	69bb      	ldr	r3, [r7, #24]
 8015480:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015482:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015486:	4618      	mov	r0, r3
 8015488:	3720      	adds	r7, #32
 801548a:	46bd      	mov	sp, r7
 801548c:	bdb0      	pop	{r4, r5, r7, pc}
 801548e:	bf00      	nop
 8015490:	0801d028 	.word	0x0801d028
 8015494:	0801d0d4 	.word	0x0801d0d4
 8015498:	0801d088 	.word	0x0801d088
 801549c:	0801d0f0 	.word	0x0801d0f0
 80154a0:	2000003c 	.word	0x2000003c
 80154a4:	2000cfa4 	.word	0x2000cfa4
 80154a8:	0801ff18 	.word	0x0801ff18
 80154ac:	0801ff1c 	.word	0x0801ff1c
 80154b0:	10624dd3 	.word	0x10624dd3

080154b4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80154ba:	4b27      	ldr	r3, [pc, #156]	; (8015558 <dhcp_coarse_tmr+0xa4>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	607b      	str	r3, [r7, #4]
 80154c0:	e042      	b.n	8015548 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d039      	beq.n	8015542 <dhcp_coarse_tmr+0x8e>
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	795b      	ldrb	r3, [r3, #5]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d035      	beq.n	8015542 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	8a9b      	ldrh	r3, [r3, #20]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d012      	beq.n	8015504 <dhcp_coarse_tmr+0x50>
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	8a5b      	ldrh	r3, [r3, #18]
 80154e2:	3301      	adds	r3, #1
 80154e4:	b29a      	uxth	r2, r3
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	825a      	strh	r2, [r3, #18]
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	8a5a      	ldrh	r2, [r3, #18]
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	8a9b      	ldrh	r3, [r3, #20]
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d106      	bne.n	8015504 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f000 fe34 	bl	8016164 <dhcp_release_and_stop>
        dhcp_start(netif);
 80154fc:	6878      	ldr	r0, [r7, #4]
 80154fe:	f000 f96b 	bl	80157d8 <dhcp_start>
 8015502:	e01e      	b.n	8015542 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	8a1b      	ldrh	r3, [r3, #16]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d00b      	beq.n	8015524 <dhcp_coarse_tmr+0x70>
 801550c:	683b      	ldr	r3, [r7, #0]
 801550e:	8a1b      	ldrh	r3, [r3, #16]
 8015510:	1e5a      	subs	r2, r3, #1
 8015512:	b291      	uxth	r1, r2
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	8211      	strh	r1, [r2, #16]
 8015518:	2b01      	cmp	r3, #1
 801551a:	d103      	bne.n	8015524 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801551c:	6878      	ldr	r0, [r7, #4]
 801551e:	f000 f8c7 	bl	80156b0 <dhcp_t2_timeout>
 8015522:	e00e      	b.n	8015542 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	89db      	ldrh	r3, [r3, #14]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d00a      	beq.n	8015542 <dhcp_coarse_tmr+0x8e>
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	89db      	ldrh	r3, [r3, #14]
 8015530:	1e5a      	subs	r2, r3, #1
 8015532:	b291      	uxth	r1, r2
 8015534:	683a      	ldr	r2, [r7, #0]
 8015536:	81d1      	strh	r1, [r2, #14]
 8015538:	2b01      	cmp	r3, #1
 801553a:	d102      	bne.n	8015542 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f000 f888 	bl	8015652 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	607b      	str	r3, [r7, #4]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1b9      	bne.n	80154c2 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801554e:	bf00      	nop
 8015550:	bf00      	nop
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}
 8015558:	2000cf10 	.word	0x2000cf10

0801555c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015562:	4b16      	ldr	r3, [pc, #88]	; (80155bc <dhcp_fine_tmr+0x60>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	607b      	str	r3, [r7, #4]
 8015568:	e020      	b.n	80155ac <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d017      	beq.n	80155a6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	891b      	ldrh	r3, [r3, #8]
 801557a:	2b01      	cmp	r3, #1
 801557c:	d906      	bls.n	801558c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	891b      	ldrh	r3, [r3, #8]
 8015582:	3b01      	subs	r3, #1
 8015584:	b29a      	uxth	r2, r3
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	811a      	strh	r2, [r3, #8]
 801558a:	e00c      	b.n	80155a6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801558c:	683b      	ldr	r3, [r7, #0]
 801558e:	891b      	ldrh	r3, [r3, #8]
 8015590:	2b01      	cmp	r3, #1
 8015592:	d108      	bne.n	80155a6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	891b      	ldrh	r3, [r3, #8]
 8015598:	3b01      	subs	r3, #1
 801559a:	b29a      	uxth	r2, r3
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f000 f80d 	bl	80155c0 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	607b      	str	r3, [r7, #4]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d1db      	bne.n	801556a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80155b2:	bf00      	nop
 80155b4:	bf00      	nop
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}
 80155bc:	2000cf10 	.word	0x2000cf10

080155c0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b084      	sub	sp, #16
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	795b      	ldrb	r3, [r3, #5]
 80155d2:	2b0c      	cmp	r3, #12
 80155d4:	d003      	beq.n	80155de <dhcp_timeout+0x1e>
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	795b      	ldrb	r3, [r3, #5]
 80155da:	2b06      	cmp	r3, #6
 80155dc:	d103      	bne.n	80155e6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f000 fa56 	bl	8015a90 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80155e4:	e031      	b.n	801564a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80155e6:	68fb      	ldr	r3, [r7, #12]
 80155e8:	795b      	ldrb	r3, [r3, #5]
 80155ea:	2b01      	cmp	r3, #1
 80155ec:	d10e      	bne.n	801560c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	799b      	ldrb	r3, [r3, #6]
 80155f2:	2b05      	cmp	r3, #5
 80155f4:	d803      	bhi.n	80155fe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f7ff fe60 	bl	80152bc <dhcp_select>
}
 80155fc:	e025      	b.n	801564a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f000 fdb0 	bl	8016164 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f000 f8e7 	bl	80157d8 <dhcp_start>
}
 801560a:	e01e      	b.n	801564a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	795b      	ldrb	r3, [r3, #5]
 8015610:	2b08      	cmp	r3, #8
 8015612:	d10b      	bne.n	801562c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	799b      	ldrb	r3, [r3, #6]
 8015618:	2b01      	cmp	r3, #1
 801561a:	d803      	bhi.n	8015624 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f7ff fdf3 	bl	8015208 <dhcp_check>
}
 8015622:	e012      	b.n	801564a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	f000 fad5 	bl	8015bd4 <dhcp_bind>
}
 801562a:	e00e      	b.n	801564a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	795b      	ldrb	r3, [r3, #5]
 8015630:	2b03      	cmp	r3, #3
 8015632:	d10a      	bne.n	801564a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	799b      	ldrb	r3, [r3, #6]
 8015638:	2b01      	cmp	r3, #1
 801563a:	d803      	bhi.n	8015644 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 fcdb 	bl	8015ff8 <dhcp_reboot>
}
 8015642:	e002      	b.n	801564a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f000 fa23 	bl	8015a90 <dhcp_discover>
}
 801564a:	bf00      	nop
 801564c:	3710      	adds	r7, #16
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b084      	sub	sp, #16
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	795b      	ldrb	r3, [r3, #5]
 8015664:	2b01      	cmp	r3, #1
 8015666:	d007      	beq.n	8015678 <dhcp_t1_timeout+0x26>
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	795b      	ldrb	r3, [r3, #5]
 801566c:	2b0a      	cmp	r3, #10
 801566e:	d003      	beq.n	8015678 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015674:	2b05      	cmp	r3, #5
 8015676:	d117      	bne.n	80156a8 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f000 fb85 	bl	8015d88 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	899b      	ldrh	r3, [r3, #12]
 8015682:	461a      	mov	r2, r3
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	8a5b      	ldrh	r3, [r3, #18]
 8015688:	1ad3      	subs	r3, r2, r3
 801568a:	2b01      	cmp	r3, #1
 801568c:	dd0c      	ble.n	80156a8 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	899b      	ldrh	r3, [r3, #12]
 8015692:	461a      	mov	r2, r3
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	8a5b      	ldrh	r3, [r3, #18]
 8015698:	1ad3      	subs	r3, r2, r3
 801569a:	2b00      	cmp	r3, #0
 801569c:	da00      	bge.n	80156a0 <dhcp_t1_timeout+0x4e>
 801569e:	3301      	adds	r3, #1
 80156a0:	105b      	asrs	r3, r3, #1
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80156a8:	bf00      	nop
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}

080156b0 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b084      	sub	sp, #16
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156bc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	795b      	ldrb	r3, [r3, #5]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d00b      	beq.n	80156de <dhcp_t2_timeout+0x2e>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	795b      	ldrb	r3, [r3, #5]
 80156ca:	2b0a      	cmp	r3, #10
 80156cc:	d007      	beq.n	80156de <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80156d2:	2b05      	cmp	r3, #5
 80156d4:	d003      	beq.n	80156de <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	795b      	ldrb	r3, [r3, #5]
 80156da:	2b04      	cmp	r3, #4
 80156dc:	d117      	bne.n	801570e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 fbee 	bl	8015ec0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	8a9b      	ldrh	r3, [r3, #20]
 80156e8:	461a      	mov	r2, r3
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	8a5b      	ldrh	r3, [r3, #18]
 80156ee:	1ad3      	subs	r3, r2, r3
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	dd0c      	ble.n	801570e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	8a9b      	ldrh	r3, [r3, #20]
 80156f8:	461a      	mov	r2, r3
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	8a5b      	ldrh	r3, [r3, #18]
 80156fe:	1ad3      	subs	r3, r2, r3
 8015700:	2b00      	cmp	r3, #0
 8015702:	da00      	bge.n	8015706 <dhcp_t2_timeout+0x56>
 8015704:	3301      	adds	r3, #1
 8015706:	105b      	asrs	r3, r3, #1
 8015708:	b29a      	uxth	r2, r3
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801570e:	bf00      	nop
 8015710:	3710      	adds	r7, #16
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
	...

08015718 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015718:	b580      	push	{r7, lr}
 801571a:	b084      	sub	sp, #16
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015726:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2200      	movs	r2, #0
 801572c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	2200      	movs	r2, #0
 8015732:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015734:	4b26      	ldr	r3, [pc, #152]	; (80157d0 <dhcp_handle_ack+0xb8>)
 8015736:	78db      	ldrb	r3, [r3, #3]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d003      	beq.n	8015744 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801573c:	4b25      	ldr	r3, [pc, #148]	; (80157d4 <dhcp_handle_ack+0xbc>)
 801573e:	68da      	ldr	r2, [r3, #12]
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015744:	4b22      	ldr	r3, [pc, #136]	; (80157d0 <dhcp_handle_ack+0xb8>)
 8015746:	791b      	ldrb	r3, [r3, #4]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d004      	beq.n	8015756 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801574c:	4b21      	ldr	r3, [pc, #132]	; (80157d4 <dhcp_handle_ack+0xbc>)
 801574e:	691a      	ldr	r2, [r3, #16]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	62da      	str	r2, [r3, #44]	; 0x2c
 8015754:	e004      	b.n	8015760 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801575a:	085a      	lsrs	r2, r3, #1
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015760:	4b1b      	ldr	r3, [pc, #108]	; (80157d0 <dhcp_handle_ack+0xb8>)
 8015762:	795b      	ldrb	r3, [r3, #5]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d004      	beq.n	8015772 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015768:	4b1a      	ldr	r3, [pc, #104]	; (80157d4 <dhcp_handle_ack+0xbc>)
 801576a:	695a      	ldr	r2, [r3, #20]
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	631a      	str	r2, [r3, #48]	; 0x30
 8015770:	e007      	b.n	8015782 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015776:	4613      	mov	r3, r2
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	1a9b      	subs	r3, r3, r2
 801577c:	08da      	lsrs	r2, r3, #3
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	691a      	ldr	r2, [r3, #16]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801578a:	4b11      	ldr	r3, [pc, #68]	; (80157d0 <dhcp_handle_ack+0xb8>)
 801578c:	799b      	ldrb	r3, [r3, #6]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00b      	beq.n	80157aa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015792:	4b10      	ldr	r3, [pc, #64]	; (80157d4 <dhcp_handle_ack+0xbc>)
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	4618      	mov	r0, r3
 8015798:	f7f6 ff13 	bl	800c5c2 <lwip_htonl>
 801579c:	4602      	mov	r2, r0
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	2201      	movs	r2, #1
 80157a6:	71da      	strb	r2, [r3, #7]
 80157a8:	e002      	b.n	80157b0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	2200      	movs	r2, #0
 80157ae:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80157b0:	4b07      	ldr	r3, [pc, #28]	; (80157d0 <dhcp_handle_ack+0xb8>)
 80157b2:	79db      	ldrb	r3, [r3, #7]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d007      	beq.n	80157c8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80157b8:	4b06      	ldr	r3, [pc, #24]	; (80157d4 <dhcp_handle_ack+0xbc>)
 80157ba:	69db      	ldr	r3, [r3, #28]
 80157bc:	4618      	mov	r0, r3
 80157be:	f7f6 ff00 	bl	800c5c2 <lwip_htonl>
 80157c2:	4602      	mov	r2, r0
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80157c8:	bf00      	nop
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	2000cf9c 	.word	0x2000cf9c
 80157d4:	2000cf7c 	.word	0x2000cf7c

080157d8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b084      	sub	sp, #16
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d109      	bne.n	80157fa <dhcp_start+0x22>
 80157e6:	4b37      	ldr	r3, [pc, #220]	; (80158c4 <dhcp_start+0xec>)
 80157e8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80157ec:	4936      	ldr	r1, [pc, #216]	; (80158c8 <dhcp_start+0xf0>)
 80157ee:	4837      	ldr	r0, [pc, #220]	; (80158cc <dhcp_start+0xf4>)
 80157f0:	f004 f8e0 	bl	80199b4 <iprintf>
 80157f4:	f06f 030f 	mvn.w	r3, #15
 80157f8:	e060      	b.n	80158bc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015800:	f003 0301 	and.w	r3, r3, #1
 8015804:	2b00      	cmp	r3, #0
 8015806:	d109      	bne.n	801581c <dhcp_start+0x44>
 8015808:	4b2e      	ldr	r3, [pc, #184]	; (80158c4 <dhcp_start+0xec>)
 801580a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801580e:	4930      	ldr	r1, [pc, #192]	; (80158d0 <dhcp_start+0xf8>)
 8015810:	482e      	ldr	r0, [pc, #184]	; (80158cc <dhcp_start+0xf4>)
 8015812:	f004 f8cf 	bl	80199b4 <iprintf>
 8015816:	f06f 030f 	mvn.w	r3, #15
 801581a:	e04f      	b.n	80158bc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015820:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015826:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801582a:	d202      	bcs.n	8015832 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801582c:	f04f 33ff 	mov.w	r3, #4294967295
 8015830:	e044      	b.n	80158bc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d10d      	bne.n	8015854 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015838:	2034      	movs	r0, #52	; 0x34
 801583a:	f7f7 fa4b 	bl	800ccd4 <mem_malloc>
 801583e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d102      	bne.n	801584c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015846:	f04f 33ff 	mov.w	r3, #4294967295
 801584a:	e037      	b.n	80158bc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	68fa      	ldr	r2, [r7, #12]
 8015850:	625a      	str	r2, [r3, #36]	; 0x24
 8015852:	e005      	b.n	8015860 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	791b      	ldrb	r3, [r3, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d001      	beq.n	8015860 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801585c:	f7ff fc90 	bl	8015180 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015860:	2234      	movs	r2, #52	; 0x34
 8015862:	2100      	movs	r1, #0
 8015864:	68f8      	ldr	r0, [r7, #12]
 8015866:	f004 f90a 	bl	8019a7e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801586a:	f7ff fc37 	bl	80150dc <dhcp_inc_pcb_refcount>
 801586e:	4603      	mov	r3, r0
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <dhcp_start+0xa2>
    return ERR_MEM;
 8015874:	f04f 33ff 	mov.w	r3, #4294967295
 8015878:	e020      	b.n	80158bc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2201      	movs	r2, #1
 801587e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015886:	f003 0304 	and.w	r3, r3, #4
 801588a:	2b00      	cmp	r3, #0
 801588c:	d105      	bne.n	801589a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801588e:	2102      	movs	r1, #2
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f000 fd01 	bl	8016298 <dhcp_set_state>
    return ERR_OK;
 8015896:	2300      	movs	r3, #0
 8015898:	e010      	b.n	80158bc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f000 f8f8 	bl	8015a90 <dhcp_discover>
 80158a0:	4603      	mov	r3, r0
 80158a2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80158a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d005      	beq.n	80158b8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f000 fc59 	bl	8016164 <dhcp_release_and_stop>
    return ERR_MEM;
 80158b2:	f04f 33ff 	mov.w	r3, #4294967295
 80158b6:	e001      	b.n	80158bc <dhcp_start+0xe4>
  }
  return result;
 80158b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3710      	adds	r7, #16
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}
 80158c4:	0801d028 	.word	0x0801d028
 80158c8:	0801d10c 	.word	0x0801d10c
 80158cc:	0801d088 	.word	0x0801d088
 80158d0:	0801d150 	.word	0x0801d150

080158d4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b084      	sub	sp, #16
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158e0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d025      	beq.n	8015934 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	795b      	ldrb	r3, [r3, #5]
 80158ec:	2b0a      	cmp	r3, #10
 80158ee:	d008      	beq.n	8015902 <dhcp_network_changed+0x2e>
 80158f0:	2b0a      	cmp	r3, #10
 80158f2:	dc0d      	bgt.n	8015910 <dhcp_network_changed+0x3c>
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d01f      	beq.n	8015938 <dhcp_network_changed+0x64>
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	db09      	blt.n	8015910 <dhcp_network_changed+0x3c>
 80158fc:	3b03      	subs	r3, #3
 80158fe:	2b02      	cmp	r3, #2
 8015900:	d806      	bhi.n	8015910 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	2200      	movs	r2, #0
 8015906:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f000 fb75 	bl	8015ff8 <dhcp_reboot>
      break;
 801590e:	e014      	b.n	801593a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	795b      	ldrb	r3, [r3, #5]
 8015914:	2b0c      	cmp	r3, #12
 8015916:	d906      	bls.n	8015926 <dhcp_network_changed+0x52>
 8015918:	4b09      	ldr	r3, [pc, #36]	; (8015940 <dhcp_network_changed+0x6c>)
 801591a:	f240 326d 	movw	r2, #877	; 0x36d
 801591e:	4909      	ldr	r1, [pc, #36]	; (8015944 <dhcp_network_changed+0x70>)
 8015920:	4809      	ldr	r0, [pc, #36]	; (8015948 <dhcp_network_changed+0x74>)
 8015922:	f004 f847 	bl	80199b4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	2200      	movs	r2, #0
 801592a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f000 f8af 	bl	8015a90 <dhcp_discover>
      break;
 8015932:	e002      	b.n	801593a <dhcp_network_changed+0x66>
    return;
 8015934:	bf00      	nop
 8015936:	e000      	b.n	801593a <dhcp_network_changed+0x66>
      break;
 8015938:	bf00      	nop
  }
}
 801593a:	3710      	adds	r7, #16
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	0801d028 	.word	0x0801d028
 8015944:	0801d174 	.word	0x0801d174
 8015948:	0801d088 	.word	0x0801d088

0801594c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801594c:	b580      	push	{r7, lr}
 801594e:	b084      	sub	sp, #16
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d107      	bne.n	801596c <dhcp_arp_reply+0x20>
 801595c:	4b0e      	ldr	r3, [pc, #56]	; (8015998 <dhcp_arp_reply+0x4c>)
 801595e:	f240 328b 	movw	r2, #907	; 0x38b
 8015962:	490e      	ldr	r1, [pc, #56]	; (801599c <dhcp_arp_reply+0x50>)
 8015964:	480e      	ldr	r0, [pc, #56]	; (80159a0 <dhcp_arp_reply+0x54>)
 8015966:	f004 f825 	bl	80199b4 <iprintf>
 801596a:	e012      	b.n	8015992 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015970:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d00c      	beq.n	8015992 <dhcp_arp_reply+0x46>
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	795b      	ldrb	r3, [r3, #5]
 801597c:	2b08      	cmp	r3, #8
 801597e:	d108      	bne.n	8015992 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	681a      	ldr	r2, [r3, #0]
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	69db      	ldr	r3, [r3, #28]
 8015988:	429a      	cmp	r2, r3
 801598a:	d102      	bne.n	8015992 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f000 f809 	bl	80159a4 <dhcp_decline>
    }
  }
}
 8015992:	3710      	adds	r7, #16
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}
 8015998:	0801d028 	.word	0x0801d028
 801599c:	0801d10c 	.word	0x0801d10c
 80159a0:	0801d088 	.word	0x0801d088

080159a4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80159a4:	b5b0      	push	{r4, r5, r7, lr}
 80159a6:	b08a      	sub	sp, #40	; 0x28
 80159a8:	af02      	add	r7, sp, #8
 80159aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159b0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80159b2:	210c      	movs	r1, #12
 80159b4:	69b8      	ldr	r0, [r7, #24]
 80159b6:	f000 fc6f 	bl	8016298 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80159ba:	f107 030c 	add.w	r3, r7, #12
 80159be:	2204      	movs	r2, #4
 80159c0:	69b9      	ldr	r1, [r7, #24]
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f001 f8f4 	bl	8016bb0 <dhcp_create_msg>
 80159c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80159ca:	697b      	ldr	r3, [r7, #20]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d035      	beq.n	8015a3c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80159d6:	89b8      	ldrh	r0, [r7, #12]
 80159d8:	693b      	ldr	r3, [r7, #16]
 80159da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80159de:	2304      	movs	r3, #4
 80159e0:	2232      	movs	r2, #50	; 0x32
 80159e2:	f000 fc73 	bl	80162cc <dhcp_option>
 80159e6:	4603      	mov	r3, r0
 80159e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80159ea:	89bc      	ldrh	r4, [r7, #12]
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	69db      	ldr	r3, [r3, #28]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7f6 fde3 	bl	800c5c2 <lwip_htonl>
 80159fc:	4603      	mov	r3, r0
 80159fe:	461a      	mov	r2, r3
 8015a00:	4629      	mov	r1, r5
 8015a02:	4620      	mov	r0, r4
 8015a04:	f000 fcee 	bl	80163e4 <dhcp_option_long>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015a0c:	89b8      	ldrh	r0, [r7, #12]
 8015a0e:	693b      	ldr	r3, [r7, #16]
 8015a10:	33f0      	adds	r3, #240	; 0xf0
 8015a12:	697a      	ldr	r2, [r7, #20]
 8015a14:	4619      	mov	r1, r3
 8015a16:	f001 f9a1 	bl	8016d5c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015a1a:	4b19      	ldr	r3, [pc, #100]	; (8015a80 <dhcp_decline+0xdc>)
 8015a1c:	6818      	ldr	r0, [r3, #0]
 8015a1e:	4b19      	ldr	r3, [pc, #100]	; (8015a84 <dhcp_decline+0xe0>)
 8015a20:	9301      	str	r3, [sp, #4]
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	9300      	str	r3, [sp, #0]
 8015a26:	2343      	movs	r3, #67	; 0x43
 8015a28:	4a17      	ldr	r2, [pc, #92]	; (8015a88 <dhcp_decline+0xe4>)
 8015a2a:	6979      	ldr	r1, [r7, #20]
 8015a2c:	f7ff f8d0 	bl	8014bd0 <udp_sendto_if_src>
 8015a30:	4603      	mov	r3, r0
 8015a32:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015a34:	6978      	ldr	r0, [r7, #20]
 8015a36:	f7f8 fa17 	bl	800de68 <pbuf_free>
 8015a3a:	e001      	b.n	8015a40 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015a3c:	23ff      	movs	r3, #255	; 0xff
 8015a3e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	799b      	ldrb	r3, [r3, #6]
 8015a44:	2bff      	cmp	r3, #255	; 0xff
 8015a46:	d005      	beq.n	8015a54 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	799b      	ldrb	r3, [r3, #6]
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	b2da      	uxtb	r2, r3
 8015a50:	69bb      	ldr	r3, [r7, #24]
 8015a52:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015a54:	f242 7310 	movw	r3, #10000	; 0x2710
 8015a58:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015a5a:	89fb      	ldrh	r3, [r7, #14]
 8015a5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015a60:	4a0a      	ldr	r2, [pc, #40]	; (8015a8c <dhcp_decline+0xe8>)
 8015a62:	fb82 1203 	smull	r1, r2, r2, r3
 8015a66:	1152      	asrs	r2, r2, #5
 8015a68:	17db      	asrs	r3, r3, #31
 8015a6a:	1ad3      	subs	r3, r2, r3
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3720      	adds	r7, #32
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	2000cfa4 	.word	0x2000cfa4
 8015a84:	0801ff18 	.word	0x0801ff18
 8015a88:	0801ff1c 	.word	0x0801ff1c
 8015a8c:	10624dd3 	.word	0x10624dd3

08015a90 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b08a      	sub	sp, #40	; 0x28
 8015a94:	af02      	add	r7, sp, #8
 8015a96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a9c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015aa2:	69bb      	ldr	r3, [r7, #24]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015aa8:	2106      	movs	r1, #6
 8015aaa:	69b8      	ldr	r0, [r7, #24]
 8015aac:	f000 fbf4 	bl	8016298 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015ab0:	f107 0308 	add.w	r3, r7, #8
 8015ab4:	2201      	movs	r2, #1
 8015ab6:	69b9      	ldr	r1, [r7, #24]
 8015ab8:	6878      	ldr	r0, [r7, #4]
 8015aba:	f001 f879 	bl	8016bb0 <dhcp_create_msg>
 8015abe:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d04b      	beq.n	8015b5e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015acc:	8938      	ldrh	r0, [r7, #8]
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ad4:	2302      	movs	r3, #2
 8015ad6:	2239      	movs	r2, #57	; 0x39
 8015ad8:	f000 fbf8 	bl	80162cc <dhcp_option>
 8015adc:	4603      	mov	r3, r0
 8015ade:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015ae0:	8938      	ldrh	r0, [r7, #8]
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015aec:	461a      	mov	r2, r3
 8015aee:	f000 fc47 	bl	8016380 <dhcp_option_short>
 8015af2:	4603      	mov	r3, r0
 8015af4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015af6:	8938      	ldrh	r0, [r7, #8]
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015afe:	2303      	movs	r3, #3
 8015b00:	2237      	movs	r2, #55	; 0x37
 8015b02:	f000 fbe3 	bl	80162cc <dhcp_option>
 8015b06:	4603      	mov	r3, r0
 8015b08:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	77fb      	strb	r3, [r7, #31]
 8015b0e:	e00e      	b.n	8015b2e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015b10:	8938      	ldrh	r0, [r7, #8]
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b18:	7ffb      	ldrb	r3, [r7, #31]
 8015b1a:	4a29      	ldr	r2, [pc, #164]	; (8015bc0 <dhcp_discover+0x130>)
 8015b1c:	5cd3      	ldrb	r3, [r2, r3]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	f000 fc08 	bl	8016334 <dhcp_option_byte>
 8015b24:	4603      	mov	r3, r0
 8015b26:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b28:	7ffb      	ldrb	r3, [r7, #31]
 8015b2a:	3301      	adds	r3, #1
 8015b2c:	77fb      	strb	r3, [r7, #31]
 8015b2e:	7ffb      	ldrb	r3, [r7, #31]
 8015b30:	2b02      	cmp	r3, #2
 8015b32:	d9ed      	bls.n	8015b10 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b34:	8938      	ldrh	r0, [r7, #8]
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	33f0      	adds	r3, #240	; 0xf0
 8015b3a:	693a      	ldr	r2, [r7, #16]
 8015b3c:	4619      	mov	r1, r3
 8015b3e:	f001 f90d 	bl	8016d5c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b42:	4b20      	ldr	r3, [pc, #128]	; (8015bc4 <dhcp_discover+0x134>)
 8015b44:	6818      	ldr	r0, [r3, #0]
 8015b46:	4b20      	ldr	r3, [pc, #128]	; (8015bc8 <dhcp_discover+0x138>)
 8015b48:	9301      	str	r3, [sp, #4]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	9300      	str	r3, [sp, #0]
 8015b4e:	2343      	movs	r3, #67	; 0x43
 8015b50:	4a1e      	ldr	r2, [pc, #120]	; (8015bcc <dhcp_discover+0x13c>)
 8015b52:	6939      	ldr	r1, [r7, #16]
 8015b54:	f7ff f83c 	bl	8014bd0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015b58:	6938      	ldr	r0, [r7, #16]
 8015b5a:	f7f8 f985 	bl	800de68 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015b5e:	69bb      	ldr	r3, [r7, #24]
 8015b60:	799b      	ldrb	r3, [r3, #6]
 8015b62:	2bff      	cmp	r3, #255	; 0xff
 8015b64:	d005      	beq.n	8015b72 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	799b      	ldrb	r3, [r3, #6]
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	b2da      	uxtb	r2, r3
 8015b6e:	69bb      	ldr	r3, [r7, #24]
 8015b70:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	799b      	ldrb	r3, [r3, #6]
 8015b76:	2b05      	cmp	r3, #5
 8015b78:	d80d      	bhi.n	8015b96 <dhcp_discover+0x106>
 8015b7a:	69bb      	ldr	r3, [r7, #24]
 8015b7c:	799b      	ldrb	r3, [r3, #6]
 8015b7e:	461a      	mov	r2, r3
 8015b80:	2301      	movs	r3, #1
 8015b82:	4093      	lsls	r3, r2
 8015b84:	b29b      	uxth	r3, r3
 8015b86:	461a      	mov	r2, r3
 8015b88:	0152      	lsls	r2, r2, #5
 8015b8a:	1ad2      	subs	r2, r2, r3
 8015b8c:	0092      	lsls	r2, r2, #2
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	e001      	b.n	8015b9a <dhcp_discover+0x10a>
 8015b96:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015b9a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b9c:	897b      	ldrh	r3, [r7, #10]
 8015b9e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ba2:	4a0b      	ldr	r2, [pc, #44]	; (8015bd0 <dhcp_discover+0x140>)
 8015ba4:	fb82 1203 	smull	r1, r2, r2, r3
 8015ba8:	1152      	asrs	r2, r2, #5
 8015baa:	17db      	asrs	r3, r3, #31
 8015bac:	1ad3      	subs	r3, r2, r3
 8015bae:	b29a      	uxth	r2, r3
 8015bb0:	69bb      	ldr	r3, [r7, #24]
 8015bb2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015bb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3720      	adds	r7, #32
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}
 8015bc0:	2000003c 	.word	0x2000003c
 8015bc4:	2000cfa4 	.word	0x2000cfa4
 8015bc8:	0801ff18 	.word	0x0801ff18
 8015bcc:	0801ff1c 	.word	0x0801ff1c
 8015bd0:	10624dd3 	.word	0x10624dd3

08015bd4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b088      	sub	sp, #32
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d107      	bne.n	8015bf2 <dhcp_bind+0x1e>
 8015be2:	4b64      	ldr	r3, [pc, #400]	; (8015d74 <dhcp_bind+0x1a0>)
 8015be4:	f240 4215 	movw	r2, #1045	; 0x415
 8015be8:	4963      	ldr	r1, [pc, #396]	; (8015d78 <dhcp_bind+0x1a4>)
 8015bea:	4864      	ldr	r0, [pc, #400]	; (8015d7c <dhcp_bind+0x1a8>)
 8015bec:	f003 fee2 	bl	80199b4 <iprintf>
 8015bf0:	e0bc      	b.n	8015d6c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015bf8:	69bb      	ldr	r3, [r7, #24]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d107      	bne.n	8015c0e <dhcp_bind+0x3a>
 8015bfe:	4b5d      	ldr	r3, [pc, #372]	; (8015d74 <dhcp_bind+0x1a0>)
 8015c00:	f240 4217 	movw	r2, #1047	; 0x417
 8015c04:	495e      	ldr	r1, [pc, #376]	; (8015d80 <dhcp_bind+0x1ac>)
 8015c06:	485d      	ldr	r0, [pc, #372]	; (8015d7c <dhcp_bind+0x1a8>)
 8015c08:	f003 fed4 	bl	80199b4 <iprintf>
 8015c0c:	e0ae      	b.n	8015d6c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	2200      	movs	r2, #0
 8015c12:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c1c:	d019      	beq.n	8015c52 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015c1e:	69bb      	ldr	r3, [r7, #24]
 8015c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c22:	331e      	adds	r3, #30
 8015c24:	4a57      	ldr	r2, [pc, #348]	; (8015d84 <dhcp_bind+0x1b0>)
 8015c26:	fba2 2303 	umull	r2, r3, r2, r3
 8015c2a:	095b      	lsrs	r3, r3, #5
 8015c2c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c34:	d302      	bcc.n	8015c3c <dhcp_bind+0x68>
      timeout = 0xffff;
 8015c36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c3a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	b29a      	uxth	r2, r3
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015c44:	69bb      	ldr	r3, [r7, #24]
 8015c46:	8a9b      	ldrh	r3, [r3, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d102      	bne.n	8015c52 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015c4c:	69bb      	ldr	r3, [r7, #24]
 8015c4e:	2201      	movs	r2, #1
 8015c50:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5a:	d01d      	beq.n	8015c98 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015c5c:	69bb      	ldr	r3, [r7, #24]
 8015c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c60:	331e      	adds	r3, #30
 8015c62:	4a48      	ldr	r2, [pc, #288]	; (8015d84 <dhcp_bind+0x1b0>)
 8015c64:	fba2 2303 	umull	r2, r3, r2, r3
 8015c68:	095b      	lsrs	r3, r3, #5
 8015c6a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015c6c:	69fb      	ldr	r3, [r7, #28]
 8015c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c72:	d302      	bcc.n	8015c7a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015c78:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	b29a      	uxth	r2, r3
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015c82:	69bb      	ldr	r3, [r7, #24]
 8015c84:	895b      	ldrh	r3, [r3, #10]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d102      	bne.n	8015c90 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	2201      	movs	r2, #1
 8015c8e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	895a      	ldrh	r2, [r3, #10]
 8015c94:	69bb      	ldr	r3, [r7, #24]
 8015c96:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ca0:	d01d      	beq.n	8015cde <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015ca2:	69bb      	ldr	r3, [r7, #24]
 8015ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca6:	331e      	adds	r3, #30
 8015ca8:	4a36      	ldr	r2, [pc, #216]	; (8015d84 <dhcp_bind+0x1b0>)
 8015caa:	fba2 2303 	umull	r2, r3, r2, r3
 8015cae:	095b      	lsrs	r3, r3, #5
 8015cb0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cb8:	d302      	bcc.n	8015cc0 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cbe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015cc0:	69fb      	ldr	r3, [r7, #28]
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	69bb      	ldr	r3, [r7, #24]
 8015cc6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	899b      	ldrh	r3, [r3, #12]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d102      	bne.n	8015cd6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015cd6:	69bb      	ldr	r3, [r7, #24]
 8015cd8:	899a      	ldrh	r2, [r3, #12]
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015cde:	69bb      	ldr	r3, [r7, #24]
 8015ce0:	895a      	ldrh	r2, [r3, #10]
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	899b      	ldrh	r3, [r3, #12]
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d306      	bcc.n	8015cf8 <dhcp_bind+0x124>
 8015cea:	69bb      	ldr	r3, [r7, #24]
 8015cec:	899b      	ldrh	r3, [r3, #12]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d002      	beq.n	8015cf8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	79db      	ldrb	r3, [r3, #7]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d003      	beq.n	8015d08 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	6a1b      	ldr	r3, [r3, #32]
 8015d04:	613b      	str	r3, [r7, #16]
 8015d06:	e014      	b.n	8015d32 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015d08:	69bb      	ldr	r3, [r7, #24]
 8015d0a:	331c      	adds	r3, #28
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	db02      	blt.n	8015d1e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015d18:	23ff      	movs	r3, #255	; 0xff
 8015d1a:	613b      	str	r3, [r7, #16]
 8015d1c:	e009      	b.n	8015d32 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015d1e:	7dfb      	ldrb	r3, [r7, #23]
 8015d20:	2bbf      	cmp	r3, #191	; 0xbf
 8015d22:	d903      	bls.n	8015d2c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015d24:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015d28:	613b      	str	r3, [r7, #16]
 8015d2a:	e002      	b.n	8015d32 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d30:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d36:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d108      	bne.n	8015d50 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015d3e:	69bb      	ldr	r3, [r7, #24]
 8015d40:	69da      	ldr	r2, [r3, #28]
 8015d42:	693b      	ldr	r3, [r7, #16]
 8015d44:	4013      	ands	r3, r2
 8015d46:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015d4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015d50:	210a      	movs	r1, #10
 8015d52:	69b8      	ldr	r0, [r7, #24]
 8015d54:	f000 faa0 	bl	8016298 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015d58:	69bb      	ldr	r3, [r7, #24]
 8015d5a:	f103 011c 	add.w	r1, r3, #28
 8015d5e:	f107 030c 	add.w	r3, r7, #12
 8015d62:	f107 0210 	add.w	r2, r7, #16
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	f7f7 fb70 	bl	800d44c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015d6c:	3720      	adds	r7, #32
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd80      	pop	{r7, pc}
 8015d72:	bf00      	nop
 8015d74:	0801d028 	.word	0x0801d028
 8015d78:	0801d188 	.word	0x0801d188
 8015d7c:	0801d088 	.word	0x0801d088
 8015d80:	0801d1a4 	.word	0x0801d1a4
 8015d84:	88888889 	.word	0x88888889

08015d88 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b08a      	sub	sp, #40	; 0x28
 8015d8c:	af02      	add	r7, sp, #8
 8015d8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d94:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015d96:	2105      	movs	r1, #5
 8015d98:	69b8      	ldr	r0, [r7, #24]
 8015d9a:	f000 fa7d 	bl	8016298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015d9e:	f107 030c 	add.w	r3, r7, #12
 8015da2:	2203      	movs	r2, #3
 8015da4:	69b9      	ldr	r1, [r7, #24]
 8015da6:	6878      	ldr	r0, [r7, #4]
 8015da8:	f000 ff02 	bl	8016bb0 <dhcp_create_msg>
 8015dac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d04e      	beq.n	8015e52 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	685b      	ldr	r3, [r3, #4]
 8015db8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015dba:	89b8      	ldrh	r0, [r7, #12]
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dc2:	2302      	movs	r3, #2
 8015dc4:	2239      	movs	r2, #57	; 0x39
 8015dc6:	f000 fa81 	bl	80162cc <dhcp_option>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015dce:	89b8      	ldrh	r0, [r7, #12]
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dda:	461a      	mov	r2, r3
 8015ddc:	f000 fad0 	bl	8016380 <dhcp_option_short>
 8015de0:	4603      	mov	r3, r0
 8015de2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015de4:	89b8      	ldrh	r0, [r7, #12]
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dec:	2303      	movs	r3, #3
 8015dee:	2237      	movs	r2, #55	; 0x37
 8015df0:	f000 fa6c 	bl	80162cc <dhcp_option>
 8015df4:	4603      	mov	r3, r0
 8015df6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015df8:	2300      	movs	r3, #0
 8015dfa:	77bb      	strb	r3, [r7, #30]
 8015dfc:	e00e      	b.n	8015e1c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015dfe:	89b8      	ldrh	r0, [r7, #12]
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e06:	7fbb      	ldrb	r3, [r7, #30]
 8015e08:	4a2a      	ldr	r2, [pc, #168]	; (8015eb4 <dhcp_renew+0x12c>)
 8015e0a:	5cd3      	ldrb	r3, [r2, r3]
 8015e0c:	461a      	mov	r2, r3
 8015e0e:	f000 fa91 	bl	8016334 <dhcp_option_byte>
 8015e12:	4603      	mov	r3, r0
 8015e14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e16:	7fbb      	ldrb	r3, [r7, #30]
 8015e18:	3301      	adds	r3, #1
 8015e1a:	77bb      	strb	r3, [r7, #30]
 8015e1c:	7fbb      	ldrb	r3, [r7, #30]
 8015e1e:	2b02      	cmp	r3, #2
 8015e20:	d9ed      	bls.n	8015dfe <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015e22:	89b8      	ldrh	r0, [r7, #12]
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	33f0      	adds	r3, #240	; 0xf0
 8015e28:	697a      	ldr	r2, [r7, #20]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	f000 ff96 	bl	8016d5c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015e30:	4b21      	ldr	r3, [pc, #132]	; (8015eb8 <dhcp_renew+0x130>)
 8015e32:	6818      	ldr	r0, [r3, #0]
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	f103 0218 	add.w	r2, r3, #24
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	2343      	movs	r3, #67	; 0x43
 8015e40:	6979      	ldr	r1, [r7, #20]
 8015e42:	f7fe fe51 	bl	8014ae8 <udp_sendto_if>
 8015e46:	4603      	mov	r3, r0
 8015e48:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015e4a:	6978      	ldr	r0, [r7, #20]
 8015e4c:	f7f8 f80c 	bl	800de68 <pbuf_free>
 8015e50:	e001      	b.n	8015e56 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015e52:	23ff      	movs	r3, #255	; 0xff
 8015e54:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015e56:	69bb      	ldr	r3, [r7, #24]
 8015e58:	799b      	ldrb	r3, [r3, #6]
 8015e5a:	2bff      	cmp	r3, #255	; 0xff
 8015e5c:	d005      	beq.n	8015e6a <dhcp_renew+0xe2>
    dhcp->tries++;
 8015e5e:	69bb      	ldr	r3, [r7, #24]
 8015e60:	799b      	ldrb	r3, [r3, #6]
 8015e62:	3301      	adds	r3, #1
 8015e64:	b2da      	uxtb	r2, r3
 8015e66:	69bb      	ldr	r3, [r7, #24]
 8015e68:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015e6a:	69bb      	ldr	r3, [r7, #24]
 8015e6c:	799b      	ldrb	r3, [r3, #6]
 8015e6e:	2b09      	cmp	r3, #9
 8015e70:	d80a      	bhi.n	8015e88 <dhcp_renew+0x100>
 8015e72:	69bb      	ldr	r3, [r7, #24]
 8015e74:	799b      	ldrb	r3, [r3, #6]
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	461a      	mov	r2, r3
 8015e7a:	0152      	lsls	r2, r2, #5
 8015e7c:	1ad2      	subs	r2, r2, r3
 8015e7e:	0092      	lsls	r2, r2, #2
 8015e80:	4413      	add	r3, r2
 8015e82:	011b      	lsls	r3, r3, #4
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	e001      	b.n	8015e8c <dhcp_renew+0x104>
 8015e88:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015e8c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e8e:	89fb      	ldrh	r3, [r7, #14]
 8015e90:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015e94:	4a09      	ldr	r2, [pc, #36]	; (8015ebc <dhcp_renew+0x134>)
 8015e96:	fb82 1203 	smull	r1, r2, r2, r3
 8015e9a:	1152      	asrs	r2, r2, #5
 8015e9c:	17db      	asrs	r3, r3, #31
 8015e9e:	1ad3      	subs	r3, r2, r3
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	69bb      	ldr	r3, [r7, #24]
 8015ea4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	3720      	adds	r7, #32
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd80      	pop	{r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	2000003c 	.word	0x2000003c
 8015eb8:	2000cfa4 	.word	0x2000cfa4
 8015ebc:	10624dd3 	.word	0x10624dd3

08015ec0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b08a      	sub	sp, #40	; 0x28
 8015ec4:	af02      	add	r7, sp, #8
 8015ec6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ecc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015ece:	2104      	movs	r1, #4
 8015ed0:	69b8      	ldr	r0, [r7, #24]
 8015ed2:	f000 f9e1 	bl	8016298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015ed6:	f107 030c 	add.w	r3, r7, #12
 8015eda:	2203      	movs	r2, #3
 8015edc:	69b9      	ldr	r1, [r7, #24]
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fe66 	bl	8016bb0 <dhcp_create_msg>
 8015ee4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015ee6:	697b      	ldr	r3, [r7, #20]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d04c      	beq.n	8015f86 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	685b      	ldr	r3, [r3, #4]
 8015ef0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ef2:	89b8      	ldrh	r0, [r7, #12]
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015efa:	2302      	movs	r3, #2
 8015efc:	2239      	movs	r2, #57	; 0x39
 8015efe:	f000 f9e5 	bl	80162cc <dhcp_option>
 8015f02:	4603      	mov	r3, r0
 8015f04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015f06:	89b8      	ldrh	r0, [r7, #12]
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f12:	461a      	mov	r2, r3
 8015f14:	f000 fa34 	bl	8016380 <dhcp_option_short>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015f1c:	89b8      	ldrh	r0, [r7, #12]
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f24:	2303      	movs	r3, #3
 8015f26:	2237      	movs	r2, #55	; 0x37
 8015f28:	f000 f9d0 	bl	80162cc <dhcp_option>
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f30:	2300      	movs	r3, #0
 8015f32:	77bb      	strb	r3, [r7, #30]
 8015f34:	e00e      	b.n	8015f54 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015f36:	89b8      	ldrh	r0, [r7, #12]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f3e:	7fbb      	ldrb	r3, [r7, #30]
 8015f40:	4a29      	ldr	r2, [pc, #164]	; (8015fe8 <dhcp_rebind+0x128>)
 8015f42:	5cd3      	ldrb	r3, [r2, r3]
 8015f44:	461a      	mov	r2, r3
 8015f46:	f000 f9f5 	bl	8016334 <dhcp_option_byte>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015f4e:	7fbb      	ldrb	r3, [r7, #30]
 8015f50:	3301      	adds	r3, #1
 8015f52:	77bb      	strb	r3, [r7, #30]
 8015f54:	7fbb      	ldrb	r3, [r7, #30]
 8015f56:	2b02      	cmp	r3, #2
 8015f58:	d9ed      	bls.n	8015f36 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f5a:	89b8      	ldrh	r0, [r7, #12]
 8015f5c:	693b      	ldr	r3, [r7, #16]
 8015f5e:	33f0      	adds	r3, #240	; 0xf0
 8015f60:	697a      	ldr	r2, [r7, #20]
 8015f62:	4619      	mov	r1, r3
 8015f64:	f000 fefa 	bl	8016d5c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015f68:	4b20      	ldr	r3, [pc, #128]	; (8015fec <dhcp_rebind+0x12c>)
 8015f6a:	6818      	ldr	r0, [r3, #0]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	2343      	movs	r3, #67	; 0x43
 8015f72:	4a1f      	ldr	r2, [pc, #124]	; (8015ff0 <dhcp_rebind+0x130>)
 8015f74:	6979      	ldr	r1, [r7, #20]
 8015f76:	f7fe fdb7 	bl	8014ae8 <udp_sendto_if>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015f7e:	6978      	ldr	r0, [r7, #20]
 8015f80:	f7f7 ff72 	bl	800de68 <pbuf_free>
 8015f84:	e001      	b.n	8015f8a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015f86:	23ff      	movs	r3, #255	; 0xff
 8015f88:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	799b      	ldrb	r3, [r3, #6]
 8015f8e:	2bff      	cmp	r3, #255	; 0xff
 8015f90:	d005      	beq.n	8015f9e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015f92:	69bb      	ldr	r3, [r7, #24]
 8015f94:	799b      	ldrb	r3, [r3, #6]
 8015f96:	3301      	adds	r3, #1
 8015f98:	b2da      	uxtb	r2, r3
 8015f9a:	69bb      	ldr	r3, [r7, #24]
 8015f9c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	799b      	ldrb	r3, [r3, #6]
 8015fa2:	2b09      	cmp	r3, #9
 8015fa4:	d80a      	bhi.n	8015fbc <dhcp_rebind+0xfc>
 8015fa6:	69bb      	ldr	r3, [r7, #24]
 8015fa8:	799b      	ldrb	r3, [r3, #6]
 8015faa:	b29b      	uxth	r3, r3
 8015fac:	461a      	mov	r2, r3
 8015fae:	0152      	lsls	r2, r2, #5
 8015fb0:	1ad2      	subs	r2, r2, r3
 8015fb2:	0092      	lsls	r2, r2, #2
 8015fb4:	4413      	add	r3, r2
 8015fb6:	00db      	lsls	r3, r3, #3
 8015fb8:	b29b      	uxth	r3, r3
 8015fba:	e001      	b.n	8015fc0 <dhcp_rebind+0x100>
 8015fbc:	f242 7310 	movw	r3, #10000	; 0x2710
 8015fc0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015fc2:	89fb      	ldrh	r3, [r7, #14]
 8015fc4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015fc8:	4a0a      	ldr	r2, [pc, #40]	; (8015ff4 <dhcp_rebind+0x134>)
 8015fca:	fb82 1203 	smull	r1, r2, r2, r3
 8015fce:	1152      	asrs	r2, r2, #5
 8015fd0:	17db      	asrs	r3, r3, #31
 8015fd2:	1ad3      	subs	r3, r2, r3
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	69bb      	ldr	r3, [r7, #24]
 8015fd8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015fda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3720      	adds	r7, #32
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	2000003c 	.word	0x2000003c
 8015fec:	2000cfa4 	.word	0x2000cfa4
 8015ff0:	0801ff1c 	.word	0x0801ff1c
 8015ff4:	10624dd3 	.word	0x10624dd3

08015ff8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015ff8:	b5b0      	push	{r4, r5, r7, lr}
 8015ffa:	b08a      	sub	sp, #40	; 0x28
 8015ffc:	af02      	add	r7, sp, #8
 8015ffe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016004:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016006:	2103      	movs	r1, #3
 8016008:	69b8      	ldr	r0, [r7, #24]
 801600a:	f000 f945 	bl	8016298 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801600e:	f107 030c 	add.w	r3, r7, #12
 8016012:	2203      	movs	r2, #3
 8016014:	69b9      	ldr	r1, [r7, #24]
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f000 fdca 	bl	8016bb0 <dhcp_create_msg>
 801601c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d066      	beq.n	80160f2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801602a:	89b8      	ldrh	r0, [r7, #12]
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016032:	2302      	movs	r3, #2
 8016034:	2239      	movs	r2, #57	; 0x39
 8016036:	f000 f949 	bl	80162cc <dhcp_option>
 801603a:	4603      	mov	r3, r0
 801603c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801603e:	89b8      	ldrh	r0, [r7, #12]
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	33f0      	adds	r3, #240	; 0xf0
 8016044:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016048:	4619      	mov	r1, r3
 801604a:	f000 f999 	bl	8016380 <dhcp_option_short>
 801604e:	4603      	mov	r3, r0
 8016050:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016052:	89b8      	ldrh	r0, [r7, #12]
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801605a:	2304      	movs	r3, #4
 801605c:	2232      	movs	r2, #50	; 0x32
 801605e:	f000 f935 	bl	80162cc <dhcp_option>
 8016062:	4603      	mov	r3, r0
 8016064:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016066:	89bc      	ldrh	r4, [r7, #12]
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801606e:	69bb      	ldr	r3, [r7, #24]
 8016070:	69db      	ldr	r3, [r3, #28]
 8016072:	4618      	mov	r0, r3
 8016074:	f7f6 faa5 	bl	800c5c2 <lwip_htonl>
 8016078:	4603      	mov	r3, r0
 801607a:	461a      	mov	r2, r3
 801607c:	4629      	mov	r1, r5
 801607e:	4620      	mov	r0, r4
 8016080:	f000 f9b0 	bl	80163e4 <dhcp_option_long>
 8016084:	4603      	mov	r3, r0
 8016086:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016088:	89b8      	ldrh	r0, [r7, #12]
 801608a:	693b      	ldr	r3, [r7, #16]
 801608c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016090:	2303      	movs	r3, #3
 8016092:	2237      	movs	r2, #55	; 0x37
 8016094:	f000 f91a 	bl	80162cc <dhcp_option>
 8016098:	4603      	mov	r3, r0
 801609a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801609c:	2300      	movs	r3, #0
 801609e:	77bb      	strb	r3, [r7, #30]
 80160a0:	e00e      	b.n	80160c0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80160a2:	89b8      	ldrh	r0, [r7, #12]
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80160aa:	7fbb      	ldrb	r3, [r7, #30]
 80160ac:	4a29      	ldr	r2, [pc, #164]	; (8016154 <dhcp_reboot+0x15c>)
 80160ae:	5cd3      	ldrb	r3, [r2, r3]
 80160b0:	461a      	mov	r2, r3
 80160b2:	f000 f93f 	bl	8016334 <dhcp_option_byte>
 80160b6:	4603      	mov	r3, r0
 80160b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80160ba:	7fbb      	ldrb	r3, [r7, #30]
 80160bc:	3301      	adds	r3, #1
 80160be:	77bb      	strb	r3, [r7, #30]
 80160c0:	7fbb      	ldrb	r3, [r7, #30]
 80160c2:	2b02      	cmp	r3, #2
 80160c4:	d9ed      	bls.n	80160a2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80160c6:	89b8      	ldrh	r0, [r7, #12]
 80160c8:	693b      	ldr	r3, [r7, #16]
 80160ca:	33f0      	adds	r3, #240	; 0xf0
 80160cc:	697a      	ldr	r2, [r7, #20]
 80160ce:	4619      	mov	r1, r3
 80160d0:	f000 fe44 	bl	8016d5c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80160d4:	4b20      	ldr	r3, [pc, #128]	; (8016158 <dhcp_reboot+0x160>)
 80160d6:	6818      	ldr	r0, [r3, #0]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	2343      	movs	r3, #67	; 0x43
 80160de:	4a1f      	ldr	r2, [pc, #124]	; (801615c <dhcp_reboot+0x164>)
 80160e0:	6979      	ldr	r1, [r7, #20]
 80160e2:	f7fe fd01 	bl	8014ae8 <udp_sendto_if>
 80160e6:	4603      	mov	r3, r0
 80160e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80160ea:	6978      	ldr	r0, [r7, #20]
 80160ec:	f7f7 febc 	bl	800de68 <pbuf_free>
 80160f0:	e001      	b.n	80160f6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80160f2:	23ff      	movs	r3, #255	; 0xff
 80160f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80160f6:	69bb      	ldr	r3, [r7, #24]
 80160f8:	799b      	ldrb	r3, [r3, #6]
 80160fa:	2bff      	cmp	r3, #255	; 0xff
 80160fc:	d005      	beq.n	801610a <dhcp_reboot+0x112>
    dhcp->tries++;
 80160fe:	69bb      	ldr	r3, [r7, #24]
 8016100:	799b      	ldrb	r3, [r3, #6]
 8016102:	3301      	adds	r3, #1
 8016104:	b2da      	uxtb	r2, r3
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801610a:	69bb      	ldr	r3, [r7, #24]
 801610c:	799b      	ldrb	r3, [r3, #6]
 801610e:	2b09      	cmp	r3, #9
 8016110:	d80a      	bhi.n	8016128 <dhcp_reboot+0x130>
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	799b      	ldrb	r3, [r3, #6]
 8016116:	b29b      	uxth	r3, r3
 8016118:	461a      	mov	r2, r3
 801611a:	0152      	lsls	r2, r2, #5
 801611c:	1ad2      	subs	r2, r2, r3
 801611e:	0092      	lsls	r2, r2, #2
 8016120:	4413      	add	r3, r2
 8016122:	00db      	lsls	r3, r3, #3
 8016124:	b29b      	uxth	r3, r3
 8016126:	e001      	b.n	801612c <dhcp_reboot+0x134>
 8016128:	f242 7310 	movw	r3, #10000	; 0x2710
 801612c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801612e:	89fb      	ldrh	r3, [r7, #14]
 8016130:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016134:	4a0a      	ldr	r2, [pc, #40]	; (8016160 <dhcp_reboot+0x168>)
 8016136:	fb82 1203 	smull	r1, r2, r2, r3
 801613a:	1152      	asrs	r2, r2, #5
 801613c:	17db      	asrs	r3, r3, #31
 801613e:	1ad3      	subs	r3, r2, r3
 8016140:	b29a      	uxth	r2, r3
 8016142:	69bb      	ldr	r3, [r7, #24]
 8016144:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016146:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801614a:	4618      	mov	r0, r3
 801614c:	3720      	adds	r7, #32
 801614e:	46bd      	mov	sp, r7
 8016150:	bdb0      	pop	{r4, r5, r7, pc}
 8016152:	bf00      	nop
 8016154:	2000003c 	.word	0x2000003c
 8016158:	2000cfa4 	.word	0x2000cfa4
 801615c:	0801ff1c 	.word	0x0801ff1c
 8016160:	10624dd3 	.word	0x10624dd3

08016164 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016164:	b5b0      	push	{r4, r5, r7, lr}
 8016166:	b08a      	sub	sp, #40	; 0x28
 8016168:	af02      	add	r7, sp, #8
 801616a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016170:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	2b00      	cmp	r3, #0
 8016176:	f000 8084 	beq.w	8016282 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	795b      	ldrb	r3, [r3, #5]
 801617e:	2b00      	cmp	r3, #0
 8016180:	f000 8081 	beq.w	8016286 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016184:	69fb      	ldr	r3, [r7, #28]
 8016186:	699b      	ldr	r3, [r3, #24]
 8016188:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801618a:	69fb      	ldr	r3, [r7, #28]
 801618c:	2200      	movs	r2, #0
 801618e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	2200      	movs	r2, #0
 8016194:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016196:	69fb      	ldr	r3, [r7, #28]
 8016198:	2200      	movs	r2, #0
 801619a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	2200      	movs	r2, #0
 80161a0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80161a2:	69fb      	ldr	r3, [r7, #28]
 80161a4:	2200      	movs	r2, #0
 80161a6:	631a      	str	r2, [r3, #48]	; 0x30
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	2200      	movs	r2, #0
 80161bc:	829a      	strh	r2, [r3, #20]
 80161be:	69fb      	ldr	r3, [r7, #28]
 80161c0:	8a9a      	ldrh	r2, [r3, #20]
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	825a      	strh	r2, [r3, #18]
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	8a5a      	ldrh	r2, [r3, #18]
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	821a      	strh	r2, [r3, #16]
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	8a1a      	ldrh	r2, [r3, #16]
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80161d6:	6878      	ldr	r0, [r7, #4]
 80161d8:	f000 fdee 	bl	8016db8 <dhcp_supplied_address>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d03b      	beq.n	801625a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80161e2:	f107 030e 	add.w	r3, r7, #14
 80161e6:	2207      	movs	r2, #7
 80161e8:	69f9      	ldr	r1, [r7, #28]
 80161ea:	6878      	ldr	r0, [r7, #4]
 80161ec:	f000 fce0 	bl	8016bb0 <dhcp_create_msg>
 80161f0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80161f2:	69bb      	ldr	r3, [r7, #24]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d030      	beq.n	801625a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80161f8:	69bb      	ldr	r3, [r7, #24]
 80161fa:	685b      	ldr	r3, [r3, #4]
 80161fc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80161fe:	89f8      	ldrh	r0, [r7, #14]
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016206:	2304      	movs	r3, #4
 8016208:	2236      	movs	r2, #54	; 0x36
 801620a:	f000 f85f 	bl	80162cc <dhcp_option>
 801620e:	4603      	mov	r3, r0
 8016210:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016212:	89fc      	ldrh	r4, [r7, #14]
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	4618      	mov	r0, r3
 801621e:	f7f6 f9d0 	bl	800c5c2 <lwip_htonl>
 8016222:	4603      	mov	r3, r0
 8016224:	461a      	mov	r2, r3
 8016226:	4629      	mov	r1, r5
 8016228:	4620      	mov	r0, r4
 801622a:	f000 f8db 	bl	80163e4 <dhcp_option_long>
 801622e:	4603      	mov	r3, r0
 8016230:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016232:	89f8      	ldrh	r0, [r7, #14]
 8016234:	697b      	ldr	r3, [r7, #20]
 8016236:	33f0      	adds	r3, #240	; 0xf0
 8016238:	69ba      	ldr	r2, [r7, #24]
 801623a:	4619      	mov	r1, r3
 801623c:	f000 fd8e 	bl	8016d5c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016240:	4b13      	ldr	r3, [pc, #76]	; (8016290 <dhcp_release_and_stop+0x12c>)
 8016242:	6818      	ldr	r0, [r3, #0]
 8016244:	f107 0210 	add.w	r2, r7, #16
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	9300      	str	r3, [sp, #0]
 801624c:	2343      	movs	r3, #67	; 0x43
 801624e:	69b9      	ldr	r1, [r7, #24]
 8016250:	f7fe fc4a 	bl	8014ae8 <udp_sendto_if>
      pbuf_free(p_out);
 8016254:	69b8      	ldr	r0, [r7, #24]
 8016256:	f7f7 fe07 	bl	800de68 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801625a:	4b0e      	ldr	r3, [pc, #56]	; (8016294 <dhcp_release_and_stop+0x130>)
 801625c:	4a0d      	ldr	r2, [pc, #52]	; (8016294 <dhcp_release_and_stop+0x130>)
 801625e:	490d      	ldr	r1, [pc, #52]	; (8016294 <dhcp_release_and_stop+0x130>)
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7f7 f8f3 	bl	800d44c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016266:	2100      	movs	r1, #0
 8016268:	69f8      	ldr	r0, [r7, #28]
 801626a:	f000 f815 	bl	8016298 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	791b      	ldrb	r3, [r3, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d008      	beq.n	8016288 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016276:	f7fe ff83 	bl	8015180 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	2200      	movs	r2, #0
 801627e:	711a      	strb	r2, [r3, #4]
 8016280:	e002      	b.n	8016288 <dhcp_release_and_stop+0x124>
    return;
 8016282:	bf00      	nop
 8016284:	e000      	b.n	8016288 <dhcp_release_and_stop+0x124>
    return;
 8016286:	bf00      	nop
  }
}
 8016288:	3720      	adds	r7, #32
 801628a:	46bd      	mov	sp, r7
 801628c:	bdb0      	pop	{r4, r5, r7, pc}
 801628e:	bf00      	nop
 8016290:	2000cfa4 	.word	0x2000cfa4
 8016294:	0801ff18 	.word	0x0801ff18

08016298 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016298:	b480      	push	{r7}
 801629a:	b083      	sub	sp, #12
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	460b      	mov	r3, r1
 80162a2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	795b      	ldrb	r3, [r3, #5]
 80162a8:	78fa      	ldrb	r2, [r7, #3]
 80162aa:	429a      	cmp	r2, r3
 80162ac:	d008      	beq.n	80162c0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	78fa      	ldrb	r2, [r7, #3]
 80162b2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2200      	movs	r2, #0
 80162b8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2200      	movs	r2, #0
 80162be:	811a      	strh	r2, [r3, #8]
  }
}
 80162c0:	bf00      	nop
 80162c2:	370c      	adds	r7, #12
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr

080162cc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6039      	str	r1, [r7, #0]
 80162d4:	4611      	mov	r1, r2
 80162d6:	461a      	mov	r2, r3
 80162d8:	4603      	mov	r3, r0
 80162da:	80fb      	strh	r3, [r7, #6]
 80162dc:	460b      	mov	r3, r1
 80162de:	717b      	strb	r3, [r7, #5]
 80162e0:	4613      	mov	r3, r2
 80162e2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80162e4:	88fa      	ldrh	r2, [r7, #6]
 80162e6:	793b      	ldrb	r3, [r7, #4]
 80162e8:	4413      	add	r3, r2
 80162ea:	3302      	adds	r3, #2
 80162ec:	2b44      	cmp	r3, #68	; 0x44
 80162ee:	d906      	bls.n	80162fe <dhcp_option+0x32>
 80162f0:	4b0d      	ldr	r3, [pc, #52]	; (8016328 <dhcp_option+0x5c>)
 80162f2:	f240 529a 	movw	r2, #1434	; 0x59a
 80162f6:	490d      	ldr	r1, [pc, #52]	; (801632c <dhcp_option+0x60>)
 80162f8:	480d      	ldr	r0, [pc, #52]	; (8016330 <dhcp_option+0x64>)
 80162fa:	f003 fb5b 	bl	80199b4 <iprintf>
  options[options_out_len++] = option_type;
 80162fe:	88fb      	ldrh	r3, [r7, #6]
 8016300:	1c5a      	adds	r2, r3, #1
 8016302:	80fa      	strh	r2, [r7, #6]
 8016304:	461a      	mov	r2, r3
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	4413      	add	r3, r2
 801630a:	797a      	ldrb	r2, [r7, #5]
 801630c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801630e:	88fb      	ldrh	r3, [r7, #6]
 8016310:	1c5a      	adds	r2, r3, #1
 8016312:	80fa      	strh	r2, [r7, #6]
 8016314:	461a      	mov	r2, r3
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	4413      	add	r3, r2
 801631a:	793a      	ldrb	r2, [r7, #4]
 801631c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801631e:	88fb      	ldrh	r3, [r7, #6]
}
 8016320:	4618      	mov	r0, r3
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	0801d028 	.word	0x0801d028
 801632c:	0801d1bc 	.word	0x0801d1bc
 8016330:	0801d088 	.word	0x0801d088

08016334 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b082      	sub	sp, #8
 8016338:	af00      	add	r7, sp, #0
 801633a:	4603      	mov	r3, r0
 801633c:	6039      	str	r1, [r7, #0]
 801633e:	80fb      	strh	r3, [r7, #6]
 8016340:	4613      	mov	r3, r2
 8016342:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016344:	88fb      	ldrh	r3, [r7, #6]
 8016346:	2b43      	cmp	r3, #67	; 0x43
 8016348:	d906      	bls.n	8016358 <dhcp_option_byte+0x24>
 801634a:	4b0a      	ldr	r3, [pc, #40]	; (8016374 <dhcp_option_byte+0x40>)
 801634c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016350:	4909      	ldr	r1, [pc, #36]	; (8016378 <dhcp_option_byte+0x44>)
 8016352:	480a      	ldr	r0, [pc, #40]	; (801637c <dhcp_option_byte+0x48>)
 8016354:	f003 fb2e 	bl	80199b4 <iprintf>
  options[options_out_len++] = value;
 8016358:	88fb      	ldrh	r3, [r7, #6]
 801635a:	1c5a      	adds	r2, r3, #1
 801635c:	80fa      	strh	r2, [r7, #6]
 801635e:	461a      	mov	r2, r3
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	4413      	add	r3, r2
 8016364:	797a      	ldrb	r2, [r7, #5]
 8016366:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016368:	88fb      	ldrh	r3, [r7, #6]
}
 801636a:	4618      	mov	r0, r3
 801636c:	3708      	adds	r7, #8
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	0801d028 	.word	0x0801d028
 8016378:	0801d200 	.word	0x0801d200
 801637c:	0801d088 	.word	0x0801d088

08016380 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	4603      	mov	r3, r0
 8016388:	6039      	str	r1, [r7, #0]
 801638a:	80fb      	strh	r3, [r7, #6]
 801638c:	4613      	mov	r3, r2
 801638e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016390:	88fb      	ldrh	r3, [r7, #6]
 8016392:	3302      	adds	r3, #2
 8016394:	2b44      	cmp	r3, #68	; 0x44
 8016396:	d906      	bls.n	80163a6 <dhcp_option_short+0x26>
 8016398:	4b0f      	ldr	r3, [pc, #60]	; (80163d8 <dhcp_option_short+0x58>)
 801639a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801639e:	490f      	ldr	r1, [pc, #60]	; (80163dc <dhcp_option_short+0x5c>)
 80163a0:	480f      	ldr	r0, [pc, #60]	; (80163e0 <dhcp_option_short+0x60>)
 80163a2:	f003 fb07 	bl	80199b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80163a6:	88bb      	ldrh	r3, [r7, #4]
 80163a8:	0a1b      	lsrs	r3, r3, #8
 80163aa:	b29a      	uxth	r2, r3
 80163ac:	88fb      	ldrh	r3, [r7, #6]
 80163ae:	1c59      	adds	r1, r3, #1
 80163b0:	80f9      	strh	r1, [r7, #6]
 80163b2:	4619      	mov	r1, r3
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	440b      	add	r3, r1
 80163b8:	b2d2      	uxtb	r2, r2
 80163ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80163bc:	88fb      	ldrh	r3, [r7, #6]
 80163be:	1c5a      	adds	r2, r3, #1
 80163c0:	80fa      	strh	r2, [r7, #6]
 80163c2:	461a      	mov	r2, r3
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	4413      	add	r3, r2
 80163c8:	88ba      	ldrh	r2, [r7, #4]
 80163ca:	b2d2      	uxtb	r2, r2
 80163cc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80163ce:	88fb      	ldrh	r3, [r7, #6]
}
 80163d0:	4618      	mov	r0, r3
 80163d2:	3708      	adds	r7, #8
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	0801d028 	.word	0x0801d028
 80163dc:	0801d238 	.word	0x0801d238
 80163e0:	0801d088 	.word	0x0801d088

080163e4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b084      	sub	sp, #16
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	4603      	mov	r3, r0
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
 80163f0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80163f2:	89fb      	ldrh	r3, [r7, #14]
 80163f4:	3304      	adds	r3, #4
 80163f6:	2b44      	cmp	r3, #68	; 0x44
 80163f8:	d906      	bls.n	8016408 <dhcp_option_long+0x24>
 80163fa:	4b19      	ldr	r3, [pc, #100]	; (8016460 <dhcp_option_long+0x7c>)
 80163fc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016400:	4918      	ldr	r1, [pc, #96]	; (8016464 <dhcp_option_long+0x80>)
 8016402:	4819      	ldr	r0, [pc, #100]	; (8016468 <dhcp_option_long+0x84>)
 8016404:	f003 fad6 	bl	80199b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	0e1a      	lsrs	r2, r3, #24
 801640c:	89fb      	ldrh	r3, [r7, #14]
 801640e:	1c59      	adds	r1, r3, #1
 8016410:	81f9      	strh	r1, [r7, #14]
 8016412:	4619      	mov	r1, r3
 8016414:	68bb      	ldr	r3, [r7, #8]
 8016416:	440b      	add	r3, r1
 8016418:	b2d2      	uxtb	r2, r2
 801641a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	0c1a      	lsrs	r2, r3, #16
 8016420:	89fb      	ldrh	r3, [r7, #14]
 8016422:	1c59      	adds	r1, r3, #1
 8016424:	81f9      	strh	r1, [r7, #14]
 8016426:	4619      	mov	r1, r3
 8016428:	68bb      	ldr	r3, [r7, #8]
 801642a:	440b      	add	r3, r1
 801642c:	b2d2      	uxtb	r2, r2
 801642e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	0a1a      	lsrs	r2, r3, #8
 8016434:	89fb      	ldrh	r3, [r7, #14]
 8016436:	1c59      	adds	r1, r3, #1
 8016438:	81f9      	strh	r1, [r7, #14]
 801643a:	4619      	mov	r1, r3
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	440b      	add	r3, r1
 8016440:	b2d2      	uxtb	r2, r2
 8016442:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016444:	89fb      	ldrh	r3, [r7, #14]
 8016446:	1c5a      	adds	r2, r3, #1
 8016448:	81fa      	strh	r2, [r7, #14]
 801644a:	461a      	mov	r2, r3
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	4413      	add	r3, r2
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	b2d2      	uxtb	r2, r2
 8016454:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016456:	89fb      	ldrh	r3, [r7, #14]
}
 8016458:	4618      	mov	r0, r3
 801645a:	3710      	adds	r7, #16
 801645c:	46bd      	mov	sp, r7
 801645e:	bd80      	pop	{r7, pc}
 8016460:	0801d028 	.word	0x0801d028
 8016464:	0801d274 	.word	0x0801d274
 8016468:	0801d088 	.word	0x0801d088

0801646c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b090      	sub	sp, #64	; 0x40
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016476:	2300      	movs	r3, #0
 8016478:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801647a:	2300      	movs	r3, #0
 801647c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801647e:	2208      	movs	r2, #8
 8016480:	2100      	movs	r1, #0
 8016482:	48b5      	ldr	r0, [pc, #724]	; (8016758 <dhcp_parse_reply+0x2ec>)
 8016484:	f003 fafb 	bl	8019a7e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	895b      	ldrh	r3, [r3, #10]
 801648c:	2b2b      	cmp	r3, #43	; 0x2b
 801648e:	d802      	bhi.n	8016496 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016490:	f06f 0301 	mvn.w	r3, #1
 8016494:	e2a7      	b.n	80169e6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801649c:	23f0      	movs	r3, #240	; 0xf0
 801649e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	891b      	ldrh	r3, [r3, #8]
 80164a4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80164aa:	e00c      	b.n	80164c6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80164ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ae:	895b      	ldrh	r3, [r3, #10]
 80164b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80164b2:	1ad3      	subs	r3, r2, r3
 80164b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80164b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b8:	895b      	ldrh	r3, [r3, #10]
 80164ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80164bc:	1ad3      	subs	r3, r2, r3
 80164be:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80164c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d004      	beq.n	80164d6 <dhcp_parse_reply+0x6a>
 80164cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ce:	895b      	ldrh	r3, [r3, #10]
 80164d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80164d2:	429a      	cmp	r2, r3
 80164d4:	d2ea      	bcs.n	80164ac <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80164d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d102      	bne.n	80164e2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80164dc:	f06f 0301 	mvn.w	r3, #1
 80164e0:	e281      	b.n	80169e6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80164e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80164e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80164e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164e8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80164ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80164f0:	e239      	b.n	8016966 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80164f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80164f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80164f6:	4413      	add	r3, r2
 80164f8:	781b      	ldrb	r3, [r3, #0]
 80164fa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80164fc:	2300      	movs	r3, #0
 80164fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016502:	f04f 33ff 	mov.w	r3, #4294967295
 8016506:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801650a:	3302      	adds	r3, #2
 801650c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801650e:	8bfa      	ldrh	r2, [r7, #30]
 8016510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016512:	429a      	cmp	r2, r3
 8016514:	d202      	bcs.n	801651c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016516:	f06f 0301 	mvn.w	r3, #1
 801651a:	e264      	b.n	80169e6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801651c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801651e:	3301      	adds	r3, #1
 8016520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016522:	8952      	ldrh	r2, [r2, #10]
 8016524:	4293      	cmp	r3, r2
 8016526:	da07      	bge.n	8016538 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801652a:	3301      	adds	r3, #1
 801652c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801652e:	4413      	add	r3, r2
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016536:	e00b      	b.n	8016550 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d004      	beq.n	801654a <dhcp_parse_reply+0xde>
 8016540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	e000      	b.n	801654c <dhcp_parse_reply+0xe0>
 801654a:	2300      	movs	r3, #0
 801654c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016554:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016558:	7dfb      	ldrb	r3, [r7, #23]
 801655a:	2b3b      	cmp	r3, #59	; 0x3b
 801655c:	f200 812c 	bhi.w	80167b8 <dhcp_parse_reply+0x34c>
 8016560:	a201      	add	r2, pc, #4	; (adr r2, 8016568 <dhcp_parse_reply+0xfc>)
 8016562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016566:	bf00      	nop
 8016568:	08016659 	.word	0x08016659
 801656c:	08016669 	.word	0x08016669
 8016570:	080167b9 	.word	0x080167b9
 8016574:	0801668b 	.word	0x0801668b
 8016578:	080167b9 	.word	0x080167b9
 801657c:	080167b9 	.word	0x080167b9
 8016580:	080167b9 	.word	0x080167b9
 8016584:	080167b9 	.word	0x080167b9
 8016588:	080167b9 	.word	0x080167b9
 801658c:	080167b9 	.word	0x080167b9
 8016590:	080167b9 	.word	0x080167b9
 8016594:	080167b9 	.word	0x080167b9
 8016598:	080167b9 	.word	0x080167b9
 801659c:	080167b9 	.word	0x080167b9
 80165a0:	080167b9 	.word	0x080167b9
 80165a4:	080167b9 	.word	0x080167b9
 80165a8:	080167b9 	.word	0x080167b9
 80165ac:	080167b9 	.word	0x080167b9
 80165b0:	080167b9 	.word	0x080167b9
 80165b4:	080167b9 	.word	0x080167b9
 80165b8:	080167b9 	.word	0x080167b9
 80165bc:	080167b9 	.word	0x080167b9
 80165c0:	080167b9 	.word	0x080167b9
 80165c4:	080167b9 	.word	0x080167b9
 80165c8:	080167b9 	.word	0x080167b9
 80165cc:	080167b9 	.word	0x080167b9
 80165d0:	080167b9 	.word	0x080167b9
 80165d4:	080167b9 	.word	0x080167b9
 80165d8:	080167b9 	.word	0x080167b9
 80165dc:	080167b9 	.word	0x080167b9
 80165e0:	080167b9 	.word	0x080167b9
 80165e4:	080167b9 	.word	0x080167b9
 80165e8:	080167b9 	.word	0x080167b9
 80165ec:	080167b9 	.word	0x080167b9
 80165f0:	080167b9 	.word	0x080167b9
 80165f4:	080167b9 	.word	0x080167b9
 80165f8:	080167b9 	.word	0x080167b9
 80165fc:	080167b9 	.word	0x080167b9
 8016600:	080167b9 	.word	0x080167b9
 8016604:	080167b9 	.word	0x080167b9
 8016608:	080167b9 	.word	0x080167b9
 801660c:	080167b9 	.word	0x080167b9
 8016610:	080167b9 	.word	0x080167b9
 8016614:	080167b9 	.word	0x080167b9
 8016618:	080167b9 	.word	0x080167b9
 801661c:	080167b9 	.word	0x080167b9
 8016620:	080167b9 	.word	0x080167b9
 8016624:	080167b9 	.word	0x080167b9
 8016628:	080167b9 	.word	0x080167b9
 801662c:	080167b9 	.word	0x080167b9
 8016630:	080167b9 	.word	0x080167b9
 8016634:	080166b7 	.word	0x080166b7
 8016638:	080166d9 	.word	0x080166d9
 801663c:	08016715 	.word	0x08016715
 8016640:	08016737 	.word	0x08016737
 8016644:	080167b9 	.word	0x080167b9
 8016648:	080167b9 	.word	0x080167b9
 801664c:	080167b9 	.word	0x080167b9
 8016650:	08016775 	.word	0x08016775
 8016654:	08016797 	.word	0x08016797
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016658:	2300      	movs	r3, #0
 801665a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801665e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016666:	e0ab      	b.n	80167c0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801666c:	2b04      	cmp	r3, #4
 801666e:	d009      	beq.n	8016684 <dhcp_parse_reply+0x218>
 8016670:	4b3a      	ldr	r3, [pc, #232]	; (801675c <dhcp_parse_reply+0x2f0>)
 8016672:	f240 622e 	movw	r2, #1582	; 0x62e
 8016676:	493a      	ldr	r1, [pc, #232]	; (8016760 <dhcp_parse_reply+0x2f4>)
 8016678:	483a      	ldr	r0, [pc, #232]	; (8016764 <dhcp_parse_reply+0x2f8>)
 801667a:	f003 f99b 	bl	80199b4 <iprintf>
 801667e:	f06f 0305 	mvn.w	r3, #5
 8016682:	e1b0      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016684:	2306      	movs	r3, #6
 8016686:	623b      	str	r3, [r7, #32]
        break;
 8016688:	e09a      	b.n	80167c0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801668a:	2304      	movs	r3, #4
 801668c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016690:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016694:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016698:	429a      	cmp	r2, r3
 801669a:	d209      	bcs.n	80166b0 <dhcp_parse_reply+0x244>
 801669c:	4b2f      	ldr	r3, [pc, #188]	; (801675c <dhcp_parse_reply+0x2f0>)
 801669e:	f240 6233 	movw	r2, #1587	; 0x633
 80166a2:	4931      	ldr	r1, [pc, #196]	; (8016768 <dhcp_parse_reply+0x2fc>)
 80166a4:	482f      	ldr	r0, [pc, #188]	; (8016764 <dhcp_parse_reply+0x2f8>)
 80166a6:	f003 f985 	bl	80199b4 <iprintf>
 80166aa:	f06f 0305 	mvn.w	r3, #5
 80166ae:	e19a      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80166b0:	2307      	movs	r3, #7
 80166b2:	623b      	str	r3, [r7, #32]
        break;
 80166b4:	e084      	b.n	80167c0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80166b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166ba:	2b04      	cmp	r3, #4
 80166bc:	d009      	beq.n	80166d2 <dhcp_parse_reply+0x266>
 80166be:	4b27      	ldr	r3, [pc, #156]	; (801675c <dhcp_parse_reply+0x2f0>)
 80166c0:	f240 6241 	movw	r2, #1601	; 0x641
 80166c4:	4926      	ldr	r1, [pc, #152]	; (8016760 <dhcp_parse_reply+0x2f4>)
 80166c6:	4827      	ldr	r0, [pc, #156]	; (8016764 <dhcp_parse_reply+0x2f8>)
 80166c8:	f003 f974 	bl	80199b4 <iprintf>
 80166cc:	f06f 0305 	mvn.w	r3, #5
 80166d0:	e189      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80166d2:	2303      	movs	r3, #3
 80166d4:	623b      	str	r3, [r7, #32]
        break;
 80166d6:	e073      	b.n	80167c0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80166d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166dc:	2b01      	cmp	r3, #1
 80166de:	d009      	beq.n	80166f4 <dhcp_parse_reply+0x288>
 80166e0:	4b1e      	ldr	r3, [pc, #120]	; (801675c <dhcp_parse_reply+0x2f0>)
 80166e2:	f240 624f 	movw	r2, #1615	; 0x64f
 80166e6:	4921      	ldr	r1, [pc, #132]	; (801676c <dhcp_parse_reply+0x300>)
 80166e8:	481e      	ldr	r0, [pc, #120]	; (8016764 <dhcp_parse_reply+0x2f8>)
 80166ea:	f003 f963 	bl	80199b4 <iprintf>
 80166ee:	f06f 0305 	mvn.w	r3, #5
 80166f2:	e178      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80166f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80166f6:	2bf0      	cmp	r3, #240	; 0xf0
 80166f8:	d009      	beq.n	801670e <dhcp_parse_reply+0x2a2>
 80166fa:	4b18      	ldr	r3, [pc, #96]	; (801675c <dhcp_parse_reply+0x2f0>)
 80166fc:	f240 6251 	movw	r2, #1617	; 0x651
 8016700:	491b      	ldr	r1, [pc, #108]	; (8016770 <dhcp_parse_reply+0x304>)
 8016702:	4818      	ldr	r0, [pc, #96]	; (8016764 <dhcp_parse_reply+0x2f8>)
 8016704:	f003 f956 	bl	80199b4 <iprintf>
 8016708:	f06f 0305 	mvn.w	r3, #5
 801670c:	e16b      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801670e:	2300      	movs	r3, #0
 8016710:	623b      	str	r3, [r7, #32]
        break;
 8016712:	e055      	b.n	80167c0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016718:	2b01      	cmp	r3, #1
 801671a:	d009      	beq.n	8016730 <dhcp_parse_reply+0x2c4>
 801671c:	4b0f      	ldr	r3, [pc, #60]	; (801675c <dhcp_parse_reply+0x2f0>)
 801671e:	f240 6255 	movw	r2, #1621	; 0x655
 8016722:	4912      	ldr	r1, [pc, #72]	; (801676c <dhcp_parse_reply+0x300>)
 8016724:	480f      	ldr	r0, [pc, #60]	; (8016764 <dhcp_parse_reply+0x2f8>)
 8016726:	f003 f945 	bl	80199b4 <iprintf>
 801672a:	f06f 0305 	mvn.w	r3, #5
 801672e:	e15a      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016730:	2301      	movs	r3, #1
 8016732:	623b      	str	r3, [r7, #32]
        break;
 8016734:	e044      	b.n	80167c0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801673a:	2b04      	cmp	r3, #4
 801673c:	d009      	beq.n	8016752 <dhcp_parse_reply+0x2e6>
 801673e:	4b07      	ldr	r3, [pc, #28]	; (801675c <dhcp_parse_reply+0x2f0>)
 8016740:	f240 6259 	movw	r2, #1625	; 0x659
 8016744:	4906      	ldr	r1, [pc, #24]	; (8016760 <dhcp_parse_reply+0x2f4>)
 8016746:	4807      	ldr	r0, [pc, #28]	; (8016764 <dhcp_parse_reply+0x2f8>)
 8016748:	f003 f934 	bl	80199b4 <iprintf>
 801674c:	f06f 0305 	mvn.w	r3, #5
 8016750:	e149      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016752:	2302      	movs	r3, #2
 8016754:	623b      	str	r3, [r7, #32]
        break;
 8016756:	e033      	b.n	80167c0 <dhcp_parse_reply+0x354>
 8016758:	2000cf9c 	.word	0x2000cf9c
 801675c:	0801d028 	.word	0x0801d028
 8016760:	0801d2b0 	.word	0x0801d2b0
 8016764:	0801d088 	.word	0x0801d088
 8016768:	0801d2bc 	.word	0x0801d2bc
 801676c:	0801d2d0 	.word	0x0801d2d0
 8016770:	0801d2dc 	.word	0x0801d2dc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016778:	2b04      	cmp	r3, #4
 801677a:	d009      	beq.n	8016790 <dhcp_parse_reply+0x324>
 801677c:	4b9c      	ldr	r3, [pc, #624]	; (80169f0 <dhcp_parse_reply+0x584>)
 801677e:	f240 625d 	movw	r2, #1629	; 0x65d
 8016782:	499c      	ldr	r1, [pc, #624]	; (80169f4 <dhcp_parse_reply+0x588>)
 8016784:	489c      	ldr	r0, [pc, #624]	; (80169f8 <dhcp_parse_reply+0x58c>)
 8016786:	f003 f915 	bl	80199b4 <iprintf>
 801678a:	f06f 0305 	mvn.w	r3, #5
 801678e:	e12a      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016790:	2304      	movs	r3, #4
 8016792:	623b      	str	r3, [r7, #32]
        break;
 8016794:	e014      	b.n	80167c0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801679a:	2b04      	cmp	r3, #4
 801679c:	d009      	beq.n	80167b2 <dhcp_parse_reply+0x346>
 801679e:	4b94      	ldr	r3, [pc, #592]	; (80169f0 <dhcp_parse_reply+0x584>)
 80167a0:	f240 6261 	movw	r2, #1633	; 0x661
 80167a4:	4993      	ldr	r1, [pc, #588]	; (80169f4 <dhcp_parse_reply+0x588>)
 80167a6:	4894      	ldr	r0, [pc, #592]	; (80169f8 <dhcp_parse_reply+0x58c>)
 80167a8:	f003 f904 	bl	80199b4 <iprintf>
 80167ac:	f06f 0305 	mvn.w	r3, #5
 80167b0:	e119      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80167b2:	2305      	movs	r3, #5
 80167b4:	623b      	str	r3, [r7, #32]
        break;
 80167b6:	e003      	b.n	80167c0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80167b8:	2300      	movs	r3, #0
 80167ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80167be:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80167c0:	7dfb      	ldrb	r3, [r7, #23]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d103      	bne.n	80167ce <dhcp_parse_reply+0x362>
      offset++;
 80167c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80167c8:	3301      	adds	r3, #1
 80167ca:	877b      	strh	r3, [r7, #58]	; 0x3a
 80167cc:	e0a1      	b.n	8016912 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80167ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80167d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167d4:	4413      	add	r3, r2
 80167d6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80167da:	4293      	cmp	r3, r2
 80167dc:	dd02      	ble.n	80167e4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80167de:	f06f 0301 	mvn.w	r3, #1
 80167e2:	e100      	b.n	80169e6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80167e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80167ec:	4413      	add	r3, r2
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	3302      	adds	r3, #2
 80167f2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80167f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	f000 808a 	beq.w	8016912 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80167fe:	2300      	movs	r3, #0
 8016800:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016802:	6a3b      	ldr	r3, [r7, #32]
 8016804:	2b00      	cmp	r3, #0
 8016806:	db02      	blt.n	801680e <dhcp_parse_reply+0x3a2>
 8016808:	6a3b      	ldr	r3, [r7, #32]
 801680a:	2b07      	cmp	r3, #7
 801680c:	dd06      	ble.n	801681c <dhcp_parse_reply+0x3b0>
 801680e:	4b78      	ldr	r3, [pc, #480]	; (80169f0 <dhcp_parse_reply+0x584>)
 8016810:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016814:	4979      	ldr	r1, [pc, #484]	; (80169fc <dhcp_parse_reply+0x590>)
 8016816:	4878      	ldr	r0, [pc, #480]	; (80169f8 <dhcp_parse_reply+0x58c>)
 8016818:	f003 f8cc 	bl	80199b4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801681c:	4a78      	ldr	r2, [pc, #480]	; (8016a00 <dhcp_parse_reply+0x594>)
 801681e:	6a3b      	ldr	r3, [r7, #32]
 8016820:	4413      	add	r3, r2
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d174      	bne.n	8016912 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8016828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801682c:	2b04      	cmp	r3, #4
 801682e:	bf28      	it	cs
 8016830:	2304      	movcs	r3, #4
 8016832:	b2db      	uxtb	r3, r3
 8016834:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016836:	8bfb      	ldrh	r3, [r7, #30]
 8016838:	8aba      	ldrh	r2, [r7, #20]
 801683a:	f107 0108 	add.w	r1, r7, #8
 801683e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016840:	f7f7 fd18 	bl	800e274 <pbuf_copy_partial>
 8016844:	4603      	mov	r3, r0
 8016846:	461a      	mov	r2, r3
 8016848:	8abb      	ldrh	r3, [r7, #20]
 801684a:	4293      	cmp	r3, r2
 801684c:	d002      	beq.n	8016854 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801684e:	f06f 0301 	mvn.w	r3, #1
 8016852:	e0c8      	b.n	80169e6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8016854:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016858:	2b04      	cmp	r3, #4
 801685a:	d933      	bls.n	80168c4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801685c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016860:	f003 0303 	and.w	r3, r3, #3
 8016864:	b2db      	uxtb	r3, r3
 8016866:	2b00      	cmp	r3, #0
 8016868:	d009      	beq.n	801687e <dhcp_parse_reply+0x412>
 801686a:	4b61      	ldr	r3, [pc, #388]	; (80169f0 <dhcp_parse_reply+0x584>)
 801686c:	f240 6281 	movw	r2, #1665	; 0x681
 8016870:	4964      	ldr	r1, [pc, #400]	; (8016a04 <dhcp_parse_reply+0x598>)
 8016872:	4861      	ldr	r0, [pc, #388]	; (80169f8 <dhcp_parse_reply+0x58c>)
 8016874:	f003 f89e 	bl	80199b4 <iprintf>
 8016878:	f06f 0305 	mvn.w	r3, #5
 801687c:	e0b3      	b.n	80169e6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801687e:	4a60      	ldr	r2, [pc, #384]	; (8016a00 <dhcp_parse_reply+0x594>)
 8016880:	6a3b      	ldr	r3, [r7, #32]
 8016882:	4413      	add	r3, r2
 8016884:	2201      	movs	r2, #1
 8016886:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	4618      	mov	r0, r3
 801688c:	f7f5 fe99 	bl	800c5c2 <lwip_htonl>
 8016890:	4602      	mov	r2, r0
 8016892:	495d      	ldr	r1, [pc, #372]	; (8016a08 <dhcp_parse_reply+0x59c>)
 8016894:	6a3b      	ldr	r3, [r7, #32]
 8016896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801689a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801689e:	3b04      	subs	r3, #4
 80168a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80168a4:	8bfb      	ldrh	r3, [r7, #30]
 80168a6:	3304      	adds	r3, #4
 80168a8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80168aa:	8a7a      	ldrh	r2, [r7, #18]
 80168ac:	8bfb      	ldrh	r3, [r7, #30]
 80168ae:	429a      	cmp	r2, r3
 80168b0:	d202      	bcs.n	80168b8 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80168b2:	f06f 0301 	mvn.w	r3, #1
 80168b6:	e096      	b.n	80169e6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80168b8:	8a7b      	ldrh	r3, [r7, #18]
 80168ba:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80168bc:	6a3b      	ldr	r3, [r7, #32]
 80168be:	3301      	adds	r3, #1
 80168c0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80168c2:	e79e      	b.n	8016802 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80168c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80168c8:	2b04      	cmp	r3, #4
 80168ca:	d106      	bne.n	80168da <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7f5 fe77 	bl	800c5c2 <lwip_htonl>
 80168d4:	4603      	mov	r3, r0
 80168d6:	60bb      	str	r3, [r7, #8]
 80168d8:	e011      	b.n	80168fe <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80168da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80168de:	2b01      	cmp	r3, #1
 80168e0:	d009      	beq.n	80168f6 <dhcp_parse_reply+0x48a>
 80168e2:	4b43      	ldr	r3, [pc, #268]	; (80169f0 <dhcp_parse_reply+0x584>)
 80168e4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80168e8:	4948      	ldr	r1, [pc, #288]	; (8016a0c <dhcp_parse_reply+0x5a0>)
 80168ea:	4843      	ldr	r0, [pc, #268]	; (80169f8 <dhcp_parse_reply+0x58c>)
 80168ec:	f003 f862 	bl	80199b4 <iprintf>
 80168f0:	f06f 0305 	mvn.w	r3, #5
 80168f4:	e077      	b.n	80169e6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80168f6:	f107 0308 	add.w	r3, r7, #8
 80168fa:	781b      	ldrb	r3, [r3, #0]
 80168fc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80168fe:	4a40      	ldr	r2, [pc, #256]	; (8016a00 <dhcp_parse_reply+0x594>)
 8016900:	6a3b      	ldr	r3, [r7, #32]
 8016902:	4413      	add	r3, r2
 8016904:	2201      	movs	r2, #1
 8016906:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016908:	68ba      	ldr	r2, [r7, #8]
 801690a:	493f      	ldr	r1, [pc, #252]	; (8016a08 <dhcp_parse_reply+0x59c>)
 801690c:	6a3b      	ldr	r3, [r7, #32]
 801690e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	895b      	ldrh	r3, [r3, #10]
 8016916:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016918:	429a      	cmp	r2, r3
 801691a:	d324      	bcc.n	8016966 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691e:	895b      	ldrh	r3, [r3, #10]
 8016920:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016922:	1ad3      	subs	r3, r2, r3
 8016924:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016928:	895b      	ldrh	r3, [r3, #10]
 801692a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801692c:	1ad3      	subs	r3, r2, r3
 801692e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016930:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016932:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016934:	429a      	cmp	r2, r3
 8016936:	d213      	bcs.n	8016960 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8016938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016940:	2b00      	cmp	r3, #0
 8016942:	d109      	bne.n	8016958 <dhcp_parse_reply+0x4ec>
 8016944:	4b2a      	ldr	r3, [pc, #168]	; (80169f0 <dhcp_parse_reply+0x584>)
 8016946:	f240 629d 	movw	r2, #1693	; 0x69d
 801694a:	4931      	ldr	r1, [pc, #196]	; (8016a10 <dhcp_parse_reply+0x5a4>)
 801694c:	482a      	ldr	r0, [pc, #168]	; (80169f8 <dhcp_parse_reply+0x58c>)
 801694e:	f003 f831 	bl	80199b4 <iprintf>
 8016952:	f06f 0305 	mvn.w	r3, #5
 8016956:	e046      	b.n	80169e6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801695e:	e002      	b.n	8016966 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016960:	f06f 0301 	mvn.w	r3, #1
 8016964:	e03f      	b.n	80169e6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00a      	beq.n	8016982 <dhcp_parse_reply+0x516>
 801696c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801696e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016970:	429a      	cmp	r2, r3
 8016972:	d206      	bcs.n	8016982 <dhcp_parse_reply+0x516>
 8016974:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016976:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016978:	4413      	add	r3, r2
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2bff      	cmp	r3, #255	; 0xff
 801697e:	f47f adb8 	bne.w	80164f2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016982:	4b1f      	ldr	r3, [pc, #124]	; (8016a00 <dhcp_parse_reply+0x594>)
 8016984:	781b      	ldrb	r3, [r3, #0]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d018      	beq.n	80169bc <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801698a:	4b1f      	ldr	r3, [pc, #124]	; (8016a08 <dhcp_parse_reply+0x59c>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016990:	4b1b      	ldr	r3, [pc, #108]	; (8016a00 <dhcp_parse_reply+0x594>)
 8016992:	2200      	movs	r2, #0
 8016994:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	2b01      	cmp	r3, #1
 801699a:	d102      	bne.n	80169a2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801699c:	2301      	movs	r3, #1
 801699e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80169a0:	e00c      	b.n	80169bc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d102      	bne.n	80169ae <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80169a8:	2301      	movs	r3, #1
 80169aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80169ac:	e006      	b.n	80169bc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	2b03      	cmp	r3, #3
 80169b2:	d103      	bne.n	80169bc <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80169b4:	2301      	movs	r3, #1
 80169b6:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80169b8:	2301      	movs	r3, #1
 80169ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80169bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d006      	beq.n	80169d0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80169c6:	236c      	movs	r3, #108	; 0x6c
 80169c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80169ca:	23ec      	movs	r3, #236	; 0xec
 80169cc:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80169ce:	e56a      	b.n	80164a6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80169d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d006      	beq.n	80169e4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80169d6:	2300      	movs	r3, #0
 80169d8:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80169da:	232c      	movs	r3, #44	; 0x2c
 80169dc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80169de:	236c      	movs	r3, #108	; 0x6c
 80169e0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80169e2:	e560      	b.n	80164a6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3740      	adds	r7, #64	; 0x40
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	0801d028 	.word	0x0801d028
 80169f4:	0801d2b0 	.word	0x0801d2b0
 80169f8:	0801d088 	.word	0x0801d088
 80169fc:	0801d2f4 	.word	0x0801d2f4
 8016a00:	2000cf9c 	.word	0x2000cf9c
 8016a04:	0801d308 	.word	0x0801d308
 8016a08:	2000cf7c 	.word	0x2000cf7c
 8016a0c:	0801d320 	.word	0x0801d320
 8016a10:	0801d334 	.word	0x0801d334

08016a14 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b08a      	sub	sp, #40	; 0x28
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	60b9      	str	r1, [r7, #8]
 8016a1e:	607a      	str	r2, [r7, #4]
 8016a20:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016a22:	4b60      	ldr	r3, [pc, #384]	; (8016ba4 <dhcp_recv+0x190>)
 8016a24:	685b      	ldr	r3, [r3, #4]
 8016a26:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a28:	6a3b      	ldr	r3, [r7, #32]
 8016a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a2c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	685b      	ldr	r3, [r3, #4]
 8016a32:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	f000 809d 	beq.w	8016b76 <dhcp_recv+0x162>
 8016a3c:	69fb      	ldr	r3, [r7, #28]
 8016a3e:	791b      	ldrb	r3, [r3, #4]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	f000 8098 	beq.w	8016b76 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	895b      	ldrh	r3, [r3, #10]
 8016a4a:	2b2b      	cmp	r3, #43	; 0x2b
 8016a4c:	f240 8095 	bls.w	8016b7a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	2b02      	cmp	r3, #2
 8016a56:	f040 8092 	bne.w	8016b7e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a60:	e012      	b.n	8016a88 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a66:	6a3a      	ldr	r2, [r7, #32]
 8016a68:	4413      	add	r3, r2
 8016a6a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a72:	69b9      	ldr	r1, [r7, #24]
 8016a74:	440b      	add	r3, r1
 8016a76:	7f1b      	ldrb	r3, [r3, #28]
 8016a78:	429a      	cmp	r2, r3
 8016a7a:	f040 8082 	bne.w	8016b82 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a82:	3301      	adds	r3, #1
 8016a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016a88:	6a3b      	ldr	r3, [r7, #32]
 8016a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d203      	bcs.n	8016a9e <dhcp_recv+0x8a>
 8016a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a9a:	2b05      	cmp	r3, #5
 8016a9c:	d9e1      	bls.n	8016a62 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016a9e:	69bb      	ldr	r3, [r7, #24]
 8016aa0:	685b      	ldr	r3, [r3, #4]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7f5 fd8d 	bl	800c5c2 <lwip_htonl>
 8016aa8:	4602      	mov	r2, r0
 8016aaa:	69fb      	ldr	r3, [r7, #28]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d169      	bne.n	8016b86 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016ab2:	69f9      	ldr	r1, [r7, #28]
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	f7ff fcd9 	bl	801646c <dhcp_parse_reply>
 8016aba:	4603      	mov	r3, r0
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d164      	bne.n	8016b8a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016ac0:	4b39      	ldr	r3, [pc, #228]	; (8016ba8 <dhcp_recv+0x194>)
 8016ac2:	785b      	ldrb	r3, [r3, #1]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d062      	beq.n	8016b8e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016ace:	4b37      	ldr	r3, [pc, #220]	; (8016bac <dhcp_recv+0x198>)
 8016ad0:	685b      	ldr	r3, [r3, #4]
 8016ad2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016ad4:	7cfb      	ldrb	r3, [r7, #19]
 8016ad6:	2b05      	cmp	r3, #5
 8016ad8:	d12a      	bne.n	8016b30 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016ada:	69fb      	ldr	r3, [r7, #28]
 8016adc:	795b      	ldrb	r3, [r3, #5]
 8016ade:	2b01      	cmp	r3, #1
 8016ae0:	d112      	bne.n	8016b08 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016ae2:	6979      	ldr	r1, [r7, #20]
 8016ae4:	6a38      	ldr	r0, [r7, #32]
 8016ae6:	f7fe fe17 	bl	8015718 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016af0:	f003 0308 	and.w	r3, r3, #8
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d003      	beq.n	8016b00 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016af8:	6a38      	ldr	r0, [r7, #32]
 8016afa:	f7fe fb85 	bl	8015208 <dhcp_check>
 8016afe:	e049      	b.n	8016b94 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016b00:	6a38      	ldr	r0, [r7, #32]
 8016b02:	f7ff f867 	bl	8015bd4 <dhcp_bind>
 8016b06:	e045      	b.n	8016b94 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016b08:	69fb      	ldr	r3, [r7, #28]
 8016b0a:	795b      	ldrb	r3, [r3, #5]
 8016b0c:	2b03      	cmp	r3, #3
 8016b0e:	d007      	beq.n	8016b20 <dhcp_recv+0x10c>
 8016b10:	69fb      	ldr	r3, [r7, #28]
 8016b12:	795b      	ldrb	r3, [r3, #5]
 8016b14:	2b04      	cmp	r3, #4
 8016b16:	d003      	beq.n	8016b20 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016b18:	69fb      	ldr	r3, [r7, #28]
 8016b1a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016b1c:	2b05      	cmp	r3, #5
 8016b1e:	d139      	bne.n	8016b94 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016b20:	6979      	ldr	r1, [r7, #20]
 8016b22:	6a38      	ldr	r0, [r7, #32]
 8016b24:	f7fe fdf8 	bl	8015718 <dhcp_handle_ack>
      dhcp_bind(netif);
 8016b28:	6a38      	ldr	r0, [r7, #32]
 8016b2a:	f7ff f853 	bl	8015bd4 <dhcp_bind>
 8016b2e:	e031      	b.n	8016b94 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016b30:	7cfb      	ldrb	r3, [r7, #19]
 8016b32:	2b06      	cmp	r3, #6
 8016b34:	d113      	bne.n	8016b5e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016b3a:	2b03      	cmp	r3, #3
 8016b3c:	d00b      	beq.n	8016b56 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	795b      	ldrb	r3, [r3, #5]
 8016b42:	2b01      	cmp	r3, #1
 8016b44:	d007      	beq.n	8016b56 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016b46:	69fb      	ldr	r3, [r7, #28]
 8016b48:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016b4a:	2b04      	cmp	r3, #4
 8016b4c:	d003      	beq.n	8016b56 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016b4e:	69fb      	ldr	r3, [r7, #28]
 8016b50:	795b      	ldrb	r3, [r3, #5]
 8016b52:	2b05      	cmp	r3, #5
 8016b54:	d103      	bne.n	8016b5e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016b56:	6a38      	ldr	r0, [r7, #32]
 8016b58:	f7fe fb3c 	bl	80151d4 <dhcp_handle_nak>
 8016b5c:	e01a      	b.n	8016b94 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8016b5e:	7cfb      	ldrb	r3, [r7, #19]
 8016b60:	2b02      	cmp	r3, #2
 8016b62:	d116      	bne.n	8016b92 <dhcp_recv+0x17e>
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	795b      	ldrb	r3, [r3, #5]
 8016b68:	2b06      	cmp	r3, #6
 8016b6a:	d112      	bne.n	8016b92 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016b6c:	6979      	ldr	r1, [r7, #20]
 8016b6e:	6a38      	ldr	r0, [r7, #32]
 8016b70:	f7fe fb7e 	bl	8015270 <dhcp_handle_offer>
 8016b74:	e00e      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b76:	bf00      	nop
 8016b78:	e00c      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b7a:	bf00      	nop
 8016b7c:	e00a      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b7e:	bf00      	nop
 8016b80:	e008      	b.n	8016b94 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016b82:	bf00      	nop
 8016b84:	e006      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b86:	bf00      	nop
 8016b88:	e004      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b8a:	bf00      	nop
 8016b8c:	e002      	b.n	8016b94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016b8e:	bf00      	nop
 8016b90:	e000      	b.n	8016b94 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016b92:	bf00      	nop
  pbuf_free(p);
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f7f7 f967 	bl	800de68 <pbuf_free>
}
 8016b9a:	bf00      	nop
 8016b9c:	3728      	adds	r7, #40	; 0x28
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}
 8016ba2:	bf00      	nop
 8016ba4:	200097a8 	.word	0x200097a8
 8016ba8:	2000cf9c 	.word	0x2000cf9c
 8016bac:	2000cf7c 	.word	0x2000cf7c

08016bb0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b088      	sub	sp, #32
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	603b      	str	r3, [r7, #0]
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d108      	bne.n	8016bd8 <dhcp_create_msg+0x28>
 8016bc6:	4b5f      	ldr	r3, [pc, #380]	; (8016d44 <dhcp_create_msg+0x194>)
 8016bc8:	f240 7269 	movw	r2, #1897	; 0x769
 8016bcc:	495e      	ldr	r1, [pc, #376]	; (8016d48 <dhcp_create_msg+0x198>)
 8016bce:	485f      	ldr	r0, [pc, #380]	; (8016d4c <dhcp_create_msg+0x19c>)
 8016bd0:	f002 fef0 	bl	80199b4 <iprintf>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	e0b1      	b.n	8016d3c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d108      	bne.n	8016bf0 <dhcp_create_msg+0x40>
 8016bde:	4b59      	ldr	r3, [pc, #356]	; (8016d44 <dhcp_create_msg+0x194>)
 8016be0:	f240 726a 	movw	r2, #1898	; 0x76a
 8016be4:	495a      	ldr	r1, [pc, #360]	; (8016d50 <dhcp_create_msg+0x1a0>)
 8016be6:	4859      	ldr	r0, [pc, #356]	; (8016d4c <dhcp_create_msg+0x19c>)
 8016be8:	f002 fee4 	bl	80199b4 <iprintf>
 8016bec:	2300      	movs	r3, #0
 8016bee:	e0a5      	b.n	8016d3c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016bf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016bf4:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016bf8:	2036      	movs	r0, #54	; 0x36
 8016bfa:	f7f6 fe51 	bl	800d8a0 <pbuf_alloc>
 8016bfe:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016c00:	69bb      	ldr	r3, [r7, #24]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d101      	bne.n	8016c0a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016c06:	2300      	movs	r3, #0
 8016c08:	e098      	b.n	8016d3c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	895b      	ldrh	r3, [r3, #10]
 8016c0e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016c12:	d206      	bcs.n	8016c22 <dhcp_create_msg+0x72>
 8016c14:	4b4b      	ldr	r3, [pc, #300]	; (8016d44 <dhcp_create_msg+0x194>)
 8016c16:	f240 7271 	movw	r2, #1905	; 0x771
 8016c1a:	494e      	ldr	r1, [pc, #312]	; (8016d54 <dhcp_create_msg+0x1a4>)
 8016c1c:	484b      	ldr	r0, [pc, #300]	; (8016d4c <dhcp_create_msg+0x19c>)
 8016c1e:	f002 fec9 	bl	80199b4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016c22:	79fb      	ldrb	r3, [r7, #7]
 8016c24:	2b03      	cmp	r3, #3
 8016c26:	d103      	bne.n	8016c30 <dhcp_create_msg+0x80>
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	795b      	ldrb	r3, [r3, #5]
 8016c2c:	2b03      	cmp	r3, #3
 8016c2e:	d10d      	bne.n	8016c4c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	799b      	ldrb	r3, [r3, #6]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d105      	bne.n	8016c44 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016c38:	f002 fd00 	bl	801963c <rand>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	461a      	mov	r2, r3
 8016c40:	4b45      	ldr	r3, [pc, #276]	; (8016d58 <dhcp_create_msg+0x1a8>)
 8016c42:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016c44:	4b44      	ldr	r3, [pc, #272]	; (8016d58 <dhcp_create_msg+0x1a8>)
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016c52:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016c56:	2100      	movs	r1, #0
 8016c58:	6978      	ldr	r0, [r7, #20]
 8016c5a:	f002 ff10 	bl	8019a7e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	2201      	movs	r2, #1
 8016c62:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	2201      	movs	r2, #1
 8016c68:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016c74:	68bb      	ldr	r3, [r7, #8]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f7f5 fca2 	bl	800c5c2 <lwip_htonl>
 8016c7e:	4602      	mov	r2, r0
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016c84:	79fb      	ldrb	r3, [r7, #7]
 8016c86:	2b08      	cmp	r3, #8
 8016c88:	d010      	beq.n	8016cac <dhcp_create_msg+0xfc>
 8016c8a:	79fb      	ldrb	r3, [r7, #7]
 8016c8c:	2b04      	cmp	r3, #4
 8016c8e:	d00d      	beq.n	8016cac <dhcp_create_msg+0xfc>
 8016c90:	79fb      	ldrb	r3, [r7, #7]
 8016c92:	2b07      	cmp	r3, #7
 8016c94:	d00a      	beq.n	8016cac <dhcp_create_msg+0xfc>
 8016c96:	79fb      	ldrb	r3, [r7, #7]
 8016c98:	2b03      	cmp	r3, #3
 8016c9a:	d10c      	bne.n	8016cb6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016ca0:	2b05      	cmp	r3, #5
 8016ca2:	d003      	beq.n	8016cac <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	795b      	ldrb	r3, [r3, #5]
 8016ca8:	2b04      	cmp	r3, #4
 8016caa:	d104      	bne.n	8016cb6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	3304      	adds	r3, #4
 8016cb0:	681a      	ldr	r2, [r3, #0]
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	83fb      	strh	r3, [r7, #30]
 8016cba:	e00c      	b.n	8016cd6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016cbc:	8bfa      	ldrh	r2, [r7, #30]
 8016cbe:	8bfb      	ldrh	r3, [r7, #30]
 8016cc0:	68f9      	ldr	r1, [r7, #12]
 8016cc2:	440a      	add	r2, r1
 8016cc4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016cc8:	697a      	ldr	r2, [r7, #20]
 8016cca:	4413      	add	r3, r2
 8016ccc:	460a      	mov	r2, r1
 8016cce:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016cd0:	8bfb      	ldrh	r3, [r7, #30]
 8016cd2:	3301      	adds	r3, #1
 8016cd4:	83fb      	strh	r3, [r7, #30]
 8016cd6:	8bfb      	ldrh	r3, [r7, #30]
 8016cd8:	2b05      	cmp	r3, #5
 8016cda:	d9ef      	bls.n	8016cbc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016cdc:	697b      	ldr	r3, [r7, #20]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016ce4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016ce8:	2200      	movs	r2, #0
 8016cea:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016cee:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016cf8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016d02:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	2235      	movs	r2, #53	; 0x35
 8016d10:	2000      	movs	r0, #0
 8016d12:	f7ff fadb 	bl	80162cc <dhcp_option>
 8016d16:	4603      	mov	r3, r0
 8016d18:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016d1a:	697b      	ldr	r3, [r7, #20]
 8016d1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016d20:	79fa      	ldrb	r2, [r7, #7]
 8016d22:	8a7b      	ldrh	r3, [r7, #18]
 8016d24:	4618      	mov	r0, r3
 8016d26:	f7ff fb05 	bl	8016334 <dhcp_option_byte>
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016d2e:	683b      	ldr	r3, [r7, #0]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d002      	beq.n	8016d3a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	8a7a      	ldrh	r2, [r7, #18]
 8016d38:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3720      	adds	r7, #32
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}
 8016d44:	0801d028 	.word	0x0801d028
 8016d48:	0801d348 	.word	0x0801d348
 8016d4c:	0801d088 	.word	0x0801d088
 8016d50:	0801d368 	.word	0x0801d368
 8016d54:	0801d388 	.word	0x0801d388
 8016d58:	2000cfac 	.word	0x2000cfac

08016d5c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b084      	sub	sp, #16
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	4603      	mov	r3, r0
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
 8016d68:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016d6a:	89fb      	ldrh	r3, [r7, #14]
 8016d6c:	1c5a      	adds	r2, r3, #1
 8016d6e:	81fa      	strh	r2, [r7, #14]
 8016d70:	461a      	mov	r2, r3
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	4413      	add	r3, r2
 8016d76:	22ff      	movs	r2, #255	; 0xff
 8016d78:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016d7a:	e007      	b.n	8016d8c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016d7c:	89fb      	ldrh	r3, [r7, #14]
 8016d7e:	1c5a      	adds	r2, r3, #1
 8016d80:	81fa      	strh	r2, [r7, #14]
 8016d82:	461a      	mov	r2, r3
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	4413      	add	r3, r2
 8016d88:	2200      	movs	r2, #0
 8016d8a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016d8c:	89fb      	ldrh	r3, [r7, #14]
 8016d8e:	2b43      	cmp	r3, #67	; 0x43
 8016d90:	d904      	bls.n	8016d9c <dhcp_option_trailer+0x40>
 8016d92:	89fb      	ldrh	r3, [r7, #14]
 8016d94:	f003 0303 	and.w	r3, r3, #3
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d002      	beq.n	8016da2 <dhcp_option_trailer+0x46>
 8016d9c:	89fb      	ldrh	r3, [r7, #14]
 8016d9e:	2b43      	cmp	r3, #67	; 0x43
 8016da0:	d9ec      	bls.n	8016d7c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016da2:	89fb      	ldrh	r3, [r7, #14]
 8016da4:	33f0      	adds	r3, #240	; 0xf0
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	4619      	mov	r1, r3
 8016daa:	6878      	ldr	r0, [r7, #4]
 8016dac:	f7f6 fed6 	bl	800db5c <pbuf_realloc>
}
 8016db0:	bf00      	nop
 8016db2:	3710      	adds	r7, #16
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016db8:	b480      	push	{r7}
 8016dba:	b085      	sub	sp, #20
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d017      	beq.n	8016df6 <dhcp_supplied_address+0x3e>
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d013      	beq.n	8016df6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dd2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	795b      	ldrb	r3, [r3, #5]
 8016dd8:	2b0a      	cmp	r3, #10
 8016dda:	d007      	beq.n	8016dec <dhcp_supplied_address+0x34>
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	795b      	ldrb	r3, [r3, #5]
 8016de0:	2b05      	cmp	r3, #5
 8016de2:	d003      	beq.n	8016dec <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016de8:	2b04      	cmp	r3, #4
 8016dea:	d101      	bne.n	8016df0 <dhcp_supplied_address+0x38>
 8016dec:	2301      	movs	r3, #1
 8016dee:	e000      	b.n	8016df2 <dhcp_supplied_address+0x3a>
 8016df0:	2300      	movs	r3, #0
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	e000      	b.n	8016df8 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016df6:	2300      	movs	r3, #0
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3714      	adds	r7, #20
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e02:	4770      	bx	lr

08016e04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016e0c:	4915      	ldr	r1, [pc, #84]	; (8016e64 <etharp_free_entry+0x60>)
 8016e0e:	687a      	ldr	r2, [r7, #4]
 8016e10:	4613      	mov	r3, r2
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	4413      	add	r3, r2
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	440b      	add	r3, r1
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d013      	beq.n	8016e48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016e20:	4910      	ldr	r1, [pc, #64]	; (8016e64 <etharp_free_entry+0x60>)
 8016e22:	687a      	ldr	r2, [r7, #4]
 8016e24:	4613      	mov	r3, r2
 8016e26:	005b      	lsls	r3, r3, #1
 8016e28:	4413      	add	r3, r2
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	440b      	add	r3, r1
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	4618      	mov	r0, r3
 8016e32:	f7f7 f819 	bl	800de68 <pbuf_free>
    arp_table[i].q = NULL;
 8016e36:	490b      	ldr	r1, [pc, #44]	; (8016e64 <etharp_free_entry+0x60>)
 8016e38:	687a      	ldr	r2, [r7, #4]
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	005b      	lsls	r3, r3, #1
 8016e3e:	4413      	add	r3, r2
 8016e40:	00db      	lsls	r3, r3, #3
 8016e42:	440b      	add	r3, r1
 8016e44:	2200      	movs	r2, #0
 8016e46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016e48:	4906      	ldr	r1, [pc, #24]	; (8016e64 <etharp_free_entry+0x60>)
 8016e4a:	687a      	ldr	r2, [r7, #4]
 8016e4c:	4613      	mov	r3, r2
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	4413      	add	r3, r2
 8016e52:	00db      	lsls	r3, r3, #3
 8016e54:	440b      	add	r3, r1
 8016e56:	3314      	adds	r3, #20
 8016e58:	2200      	movs	r2, #0
 8016e5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016e5c:	bf00      	nop
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	2000cfb0 	.word	0x2000cfb0

08016e68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e6e:	2300      	movs	r3, #0
 8016e70:	607b      	str	r3, [r7, #4]
 8016e72:	e096      	b.n	8016fa2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016e74:	494f      	ldr	r1, [pc, #316]	; (8016fb4 <etharp_tmr+0x14c>)
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	4613      	mov	r3, r2
 8016e7a:	005b      	lsls	r3, r3, #1
 8016e7c:	4413      	add	r3, r2
 8016e7e:	00db      	lsls	r3, r3, #3
 8016e80:	440b      	add	r3, r1
 8016e82:	3314      	adds	r3, #20
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016e88:	78fb      	ldrb	r3, [r7, #3]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	f000 8086 	beq.w	8016f9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016e90:	4948      	ldr	r1, [pc, #288]	; (8016fb4 <etharp_tmr+0x14c>)
 8016e92:	687a      	ldr	r2, [r7, #4]
 8016e94:	4613      	mov	r3, r2
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	4413      	add	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	3312      	adds	r3, #18
 8016ea0:	881b      	ldrh	r3, [r3, #0]
 8016ea2:	3301      	adds	r3, #1
 8016ea4:	b298      	uxth	r0, r3
 8016ea6:	4943      	ldr	r1, [pc, #268]	; (8016fb4 <etharp_tmr+0x14c>)
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	4613      	mov	r3, r2
 8016eac:	005b      	lsls	r3, r3, #1
 8016eae:	4413      	add	r3, r2
 8016eb0:	00db      	lsls	r3, r3, #3
 8016eb2:	440b      	add	r3, r1
 8016eb4:	3312      	adds	r3, #18
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016eba:	493e      	ldr	r1, [pc, #248]	; (8016fb4 <etharp_tmr+0x14c>)
 8016ebc:	687a      	ldr	r2, [r7, #4]
 8016ebe:	4613      	mov	r3, r2
 8016ec0:	005b      	lsls	r3, r3, #1
 8016ec2:	4413      	add	r3, r2
 8016ec4:	00db      	lsls	r3, r3, #3
 8016ec6:	440b      	add	r3, r1
 8016ec8:	3312      	adds	r3, #18
 8016eca:	881b      	ldrh	r3, [r3, #0]
 8016ecc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016ed0:	d215      	bcs.n	8016efe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ed2:	4938      	ldr	r1, [pc, #224]	; (8016fb4 <etharp_tmr+0x14c>)
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	005b      	lsls	r3, r3, #1
 8016eda:	4413      	add	r3, r2
 8016edc:	00db      	lsls	r3, r3, #3
 8016ede:	440b      	add	r3, r1
 8016ee0:	3314      	adds	r3, #20
 8016ee2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016ee4:	2b01      	cmp	r3, #1
 8016ee6:	d10e      	bne.n	8016f06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016ee8:	4932      	ldr	r1, [pc, #200]	; (8016fb4 <etharp_tmr+0x14c>)
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	4613      	mov	r3, r2
 8016eee:	005b      	lsls	r3, r3, #1
 8016ef0:	4413      	add	r3, r2
 8016ef2:	00db      	lsls	r3, r3, #3
 8016ef4:	440b      	add	r3, r1
 8016ef6:	3312      	adds	r3, #18
 8016ef8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016efa:	2b04      	cmp	r3, #4
 8016efc:	d903      	bls.n	8016f06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f7ff ff80 	bl	8016e04 <etharp_free_entry>
 8016f04:	e04a      	b.n	8016f9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016f06:	492b      	ldr	r1, [pc, #172]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	4613      	mov	r3, r2
 8016f0c:	005b      	lsls	r3, r3, #1
 8016f0e:	4413      	add	r3, r2
 8016f10:	00db      	lsls	r3, r3, #3
 8016f12:	440b      	add	r3, r1
 8016f14:	3314      	adds	r3, #20
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	2b03      	cmp	r3, #3
 8016f1a:	d10a      	bne.n	8016f32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016f1c:	4925      	ldr	r1, [pc, #148]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f1e:	687a      	ldr	r2, [r7, #4]
 8016f20:	4613      	mov	r3, r2
 8016f22:	005b      	lsls	r3, r3, #1
 8016f24:	4413      	add	r3, r2
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	440b      	add	r3, r1
 8016f2a:	3314      	adds	r3, #20
 8016f2c:	2204      	movs	r2, #4
 8016f2e:	701a      	strb	r2, [r3, #0]
 8016f30:	e034      	b.n	8016f9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016f32:	4920      	ldr	r1, [pc, #128]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f34:	687a      	ldr	r2, [r7, #4]
 8016f36:	4613      	mov	r3, r2
 8016f38:	005b      	lsls	r3, r3, #1
 8016f3a:	4413      	add	r3, r2
 8016f3c:	00db      	lsls	r3, r3, #3
 8016f3e:	440b      	add	r3, r1
 8016f40:	3314      	adds	r3, #20
 8016f42:	781b      	ldrb	r3, [r3, #0]
 8016f44:	2b04      	cmp	r3, #4
 8016f46:	d10a      	bne.n	8016f5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016f48:	491a      	ldr	r1, [pc, #104]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	005b      	lsls	r3, r3, #1
 8016f50:	4413      	add	r3, r2
 8016f52:	00db      	lsls	r3, r3, #3
 8016f54:	440b      	add	r3, r1
 8016f56:	3314      	adds	r3, #20
 8016f58:	2202      	movs	r2, #2
 8016f5a:	701a      	strb	r2, [r3, #0]
 8016f5c:	e01e      	b.n	8016f9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f5e:	4915      	ldr	r1, [pc, #84]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f60:	687a      	ldr	r2, [r7, #4]
 8016f62:	4613      	mov	r3, r2
 8016f64:	005b      	lsls	r3, r3, #1
 8016f66:	4413      	add	r3, r2
 8016f68:	00db      	lsls	r3, r3, #3
 8016f6a:	440b      	add	r3, r1
 8016f6c:	3314      	adds	r3, #20
 8016f6e:	781b      	ldrb	r3, [r3, #0]
 8016f70:	2b01      	cmp	r3, #1
 8016f72:	d113      	bne.n	8016f9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016f74:	490f      	ldr	r1, [pc, #60]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f76:	687a      	ldr	r2, [r7, #4]
 8016f78:	4613      	mov	r3, r2
 8016f7a:	005b      	lsls	r3, r3, #1
 8016f7c:	4413      	add	r3, r2
 8016f7e:	00db      	lsls	r3, r3, #3
 8016f80:	440b      	add	r3, r1
 8016f82:	3308      	adds	r3, #8
 8016f84:	6818      	ldr	r0, [r3, #0]
 8016f86:	687a      	ldr	r2, [r7, #4]
 8016f88:	4613      	mov	r3, r2
 8016f8a:	005b      	lsls	r3, r3, #1
 8016f8c:	4413      	add	r3, r2
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	4a08      	ldr	r2, [pc, #32]	; (8016fb4 <etharp_tmr+0x14c>)
 8016f92:	4413      	add	r3, r2
 8016f94:	3304      	adds	r3, #4
 8016f96:	4619      	mov	r1, r3
 8016f98:	f000 fe72 	bl	8017c80 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	3301      	adds	r3, #1
 8016fa0:	607b      	str	r3, [r7, #4]
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	2b09      	cmp	r3, #9
 8016fa6:	f77f af65 	ble.w	8016e74 <etharp_tmr+0xc>
      }
    }
  }
}
 8016faa:	bf00      	nop
 8016fac:	bf00      	nop
 8016fae:	3708      	adds	r7, #8
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	2000cfb0 	.word	0x2000cfb0

08016fb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b08a      	sub	sp, #40	; 0x28
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	60f8      	str	r0, [r7, #12]
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	607a      	str	r2, [r7, #4]
 8016fc4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016fc6:	230a      	movs	r3, #10
 8016fc8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016fca:	230a      	movs	r3, #10
 8016fcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016fce:	230a      	movs	r3, #10
 8016fd0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016fd6:	230a      	movs	r3, #10
 8016fd8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	83bb      	strh	r3, [r7, #28]
 8016fde:	2300      	movs	r3, #0
 8016fe0:	837b      	strh	r3, [r7, #26]
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	843b      	strh	r3, [r7, #32]
 8016fea:	e0ae      	b.n	801714a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016fec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ff0:	49a6      	ldr	r1, [pc, #664]	; (801728c <etharp_find_entry+0x2d4>)
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	005b      	lsls	r3, r3, #1
 8016ff6:	4413      	add	r3, r2
 8016ff8:	00db      	lsls	r3, r3, #3
 8016ffa:	440b      	add	r3, r1
 8016ffc:	3314      	adds	r3, #20
 8016ffe:	781b      	ldrb	r3, [r3, #0]
 8017000:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017002:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017006:	2b0a      	cmp	r3, #10
 8017008:	d105      	bne.n	8017016 <etharp_find_entry+0x5e>
 801700a:	7dfb      	ldrb	r3, [r7, #23]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d102      	bne.n	8017016 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017010:	8c3b      	ldrh	r3, [r7, #32]
 8017012:	847b      	strh	r3, [r7, #34]	; 0x22
 8017014:	e095      	b.n	8017142 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017016:	7dfb      	ldrb	r3, [r7, #23]
 8017018:	2b00      	cmp	r3, #0
 801701a:	f000 8092 	beq.w	8017142 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801701e:	7dfb      	ldrb	r3, [r7, #23]
 8017020:	2b01      	cmp	r3, #1
 8017022:	d009      	beq.n	8017038 <etharp_find_entry+0x80>
 8017024:	7dfb      	ldrb	r3, [r7, #23]
 8017026:	2b01      	cmp	r3, #1
 8017028:	d806      	bhi.n	8017038 <etharp_find_entry+0x80>
 801702a:	4b99      	ldr	r3, [pc, #612]	; (8017290 <etharp_find_entry+0x2d8>)
 801702c:	f240 1223 	movw	r2, #291	; 0x123
 8017030:	4998      	ldr	r1, [pc, #608]	; (8017294 <etharp_find_entry+0x2dc>)
 8017032:	4899      	ldr	r0, [pc, #612]	; (8017298 <etharp_find_entry+0x2e0>)
 8017034:	f002 fcbe 	bl	80199b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d020      	beq.n	8017080 <etharp_find_entry+0xc8>
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	6819      	ldr	r1, [r3, #0]
 8017042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017046:	4891      	ldr	r0, [pc, #580]	; (801728c <etharp_find_entry+0x2d4>)
 8017048:	4613      	mov	r3, r2
 801704a:	005b      	lsls	r3, r3, #1
 801704c:	4413      	add	r3, r2
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	4403      	add	r3, r0
 8017052:	3304      	adds	r3, #4
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	4299      	cmp	r1, r3
 8017058:	d112      	bne.n	8017080 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d00c      	beq.n	801707a <etharp_find_entry+0xc2>
 8017060:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017064:	4989      	ldr	r1, [pc, #548]	; (801728c <etharp_find_entry+0x2d4>)
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	440b      	add	r3, r1
 8017070:	3308      	adds	r3, #8
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	687a      	ldr	r2, [r7, #4]
 8017076:	429a      	cmp	r2, r3
 8017078:	d102      	bne.n	8017080 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801707a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801707e:	e100      	b.n	8017282 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017080:	7dfb      	ldrb	r3, [r7, #23]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d140      	bne.n	8017108 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017086:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801708a:	4980      	ldr	r1, [pc, #512]	; (801728c <etharp_find_entry+0x2d4>)
 801708c:	4613      	mov	r3, r2
 801708e:	005b      	lsls	r3, r3, #1
 8017090:	4413      	add	r3, r2
 8017092:	00db      	lsls	r3, r3, #3
 8017094:	440b      	add	r3, r1
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d01a      	beq.n	80170d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801709c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170a0:	497a      	ldr	r1, [pc, #488]	; (801728c <etharp_find_entry+0x2d4>)
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	440b      	add	r3, r1
 80170ac:	3312      	adds	r3, #18
 80170ae:	881b      	ldrh	r3, [r3, #0]
 80170b0:	8bba      	ldrh	r2, [r7, #28]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d845      	bhi.n	8017142 <etharp_find_entry+0x18a>
            old_queue = i;
 80170b6:	8c3b      	ldrh	r3, [r7, #32]
 80170b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80170ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170be:	4973      	ldr	r1, [pc, #460]	; (801728c <etharp_find_entry+0x2d4>)
 80170c0:	4613      	mov	r3, r2
 80170c2:	005b      	lsls	r3, r3, #1
 80170c4:	4413      	add	r3, r2
 80170c6:	00db      	lsls	r3, r3, #3
 80170c8:	440b      	add	r3, r1
 80170ca:	3312      	adds	r3, #18
 80170cc:	881b      	ldrh	r3, [r3, #0]
 80170ce:	83bb      	strh	r3, [r7, #28]
 80170d0:	e037      	b.n	8017142 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80170d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170d6:	496d      	ldr	r1, [pc, #436]	; (801728c <etharp_find_entry+0x2d4>)
 80170d8:	4613      	mov	r3, r2
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	4413      	add	r3, r2
 80170de:	00db      	lsls	r3, r3, #3
 80170e0:	440b      	add	r3, r1
 80170e2:	3312      	adds	r3, #18
 80170e4:	881b      	ldrh	r3, [r3, #0]
 80170e6:	8b7a      	ldrh	r2, [r7, #26]
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d82a      	bhi.n	8017142 <etharp_find_entry+0x18a>
            old_pending = i;
 80170ec:	8c3b      	ldrh	r3, [r7, #32]
 80170ee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80170f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170f4:	4965      	ldr	r1, [pc, #404]	; (801728c <etharp_find_entry+0x2d4>)
 80170f6:	4613      	mov	r3, r2
 80170f8:	005b      	lsls	r3, r3, #1
 80170fa:	4413      	add	r3, r2
 80170fc:	00db      	lsls	r3, r3, #3
 80170fe:	440b      	add	r3, r1
 8017100:	3312      	adds	r3, #18
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	837b      	strh	r3, [r7, #26]
 8017106:	e01c      	b.n	8017142 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017108:	7dfb      	ldrb	r3, [r7, #23]
 801710a:	2b01      	cmp	r3, #1
 801710c:	d919      	bls.n	8017142 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801710e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017112:	495e      	ldr	r1, [pc, #376]	; (801728c <etharp_find_entry+0x2d4>)
 8017114:	4613      	mov	r3, r2
 8017116:	005b      	lsls	r3, r3, #1
 8017118:	4413      	add	r3, r2
 801711a:	00db      	lsls	r3, r3, #3
 801711c:	440b      	add	r3, r1
 801711e:	3312      	adds	r3, #18
 8017120:	881b      	ldrh	r3, [r3, #0]
 8017122:	8b3a      	ldrh	r2, [r7, #24]
 8017124:	429a      	cmp	r2, r3
 8017126:	d80c      	bhi.n	8017142 <etharp_find_entry+0x18a>
            old_stable = i;
 8017128:	8c3b      	ldrh	r3, [r7, #32]
 801712a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801712c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017130:	4956      	ldr	r1, [pc, #344]	; (801728c <etharp_find_entry+0x2d4>)
 8017132:	4613      	mov	r3, r2
 8017134:	005b      	lsls	r3, r3, #1
 8017136:	4413      	add	r3, r2
 8017138:	00db      	lsls	r3, r3, #3
 801713a:	440b      	add	r3, r1
 801713c:	3312      	adds	r3, #18
 801713e:	881b      	ldrh	r3, [r3, #0]
 8017140:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017142:	8c3b      	ldrh	r3, [r7, #32]
 8017144:	3301      	adds	r3, #1
 8017146:	b29b      	uxth	r3, r3
 8017148:	843b      	strh	r3, [r7, #32]
 801714a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801714e:	2b09      	cmp	r3, #9
 8017150:	f77f af4c 	ble.w	8016fec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017154:	7afb      	ldrb	r3, [r7, #11]
 8017156:	f003 0302 	and.w	r3, r3, #2
 801715a:	2b00      	cmp	r3, #0
 801715c:	d108      	bne.n	8017170 <etharp_find_entry+0x1b8>
 801715e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017162:	2b0a      	cmp	r3, #10
 8017164:	d107      	bne.n	8017176 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017166:	7afb      	ldrb	r3, [r7, #11]
 8017168:	f003 0301 	and.w	r3, r3, #1
 801716c:	2b00      	cmp	r3, #0
 801716e:	d102      	bne.n	8017176 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017170:	f04f 33ff 	mov.w	r3, #4294967295
 8017174:	e085      	b.n	8017282 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017176:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801717a:	2b09      	cmp	r3, #9
 801717c:	dc02      	bgt.n	8017184 <etharp_find_entry+0x1cc>
    i = empty;
 801717e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017180:	843b      	strh	r3, [r7, #32]
 8017182:	e039      	b.n	80171f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017184:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017188:	2b09      	cmp	r3, #9
 801718a:	dc14      	bgt.n	80171b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801718c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801718e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017194:	493d      	ldr	r1, [pc, #244]	; (801728c <etharp_find_entry+0x2d4>)
 8017196:	4613      	mov	r3, r2
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	4413      	add	r3, r2
 801719c:	00db      	lsls	r3, r3, #3
 801719e:	440b      	add	r3, r1
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d018      	beq.n	80171d8 <etharp_find_entry+0x220>
 80171a6:	4b3a      	ldr	r3, [pc, #232]	; (8017290 <etharp_find_entry+0x2d8>)
 80171a8:	f240 126d 	movw	r2, #365	; 0x16d
 80171ac:	493b      	ldr	r1, [pc, #236]	; (801729c <etharp_find_entry+0x2e4>)
 80171ae:	483a      	ldr	r0, [pc, #232]	; (8017298 <etharp_find_entry+0x2e0>)
 80171b0:	f002 fc00 	bl	80199b4 <iprintf>
 80171b4:	e010      	b.n	80171d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80171b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80171ba:	2b09      	cmp	r3, #9
 80171bc:	dc02      	bgt.n	80171c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80171be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80171c0:	843b      	strh	r3, [r7, #32]
 80171c2:	e009      	b.n	80171d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80171c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80171c8:	2b09      	cmp	r3, #9
 80171ca:	dc02      	bgt.n	80171d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80171cc:	8bfb      	ldrh	r3, [r7, #30]
 80171ce:	843b      	strh	r3, [r7, #32]
 80171d0:	e002      	b.n	80171d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80171d2:	f04f 33ff 	mov.w	r3, #4294967295
 80171d6:	e054      	b.n	8017282 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171dc:	2b09      	cmp	r3, #9
 80171de:	dd06      	ble.n	80171ee <etharp_find_entry+0x236>
 80171e0:	4b2b      	ldr	r3, [pc, #172]	; (8017290 <etharp_find_entry+0x2d8>)
 80171e2:	f240 127f 	movw	r2, #383	; 0x17f
 80171e6:	492e      	ldr	r1, [pc, #184]	; (80172a0 <etharp_find_entry+0x2e8>)
 80171e8:	482b      	ldr	r0, [pc, #172]	; (8017298 <etharp_find_entry+0x2e0>)
 80171ea:	f002 fbe3 	bl	80199b4 <iprintf>
    etharp_free_entry(i);
 80171ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7ff fe06 	bl	8016e04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80171f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171fc:	2b09      	cmp	r3, #9
 80171fe:	dd06      	ble.n	801720e <etharp_find_entry+0x256>
 8017200:	4b23      	ldr	r3, [pc, #140]	; (8017290 <etharp_find_entry+0x2d8>)
 8017202:	f240 1283 	movw	r2, #387	; 0x183
 8017206:	4926      	ldr	r1, [pc, #152]	; (80172a0 <etharp_find_entry+0x2e8>)
 8017208:	4823      	ldr	r0, [pc, #140]	; (8017298 <etharp_find_entry+0x2e0>)
 801720a:	f002 fbd3 	bl	80199b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801720e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017212:	491e      	ldr	r1, [pc, #120]	; (801728c <etharp_find_entry+0x2d4>)
 8017214:	4613      	mov	r3, r2
 8017216:	005b      	lsls	r3, r3, #1
 8017218:	4413      	add	r3, r2
 801721a:	00db      	lsls	r3, r3, #3
 801721c:	440b      	add	r3, r1
 801721e:	3314      	adds	r3, #20
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d006      	beq.n	8017234 <etharp_find_entry+0x27c>
 8017226:	4b1a      	ldr	r3, [pc, #104]	; (8017290 <etharp_find_entry+0x2d8>)
 8017228:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801722c:	491d      	ldr	r1, [pc, #116]	; (80172a4 <etharp_find_entry+0x2ec>)
 801722e:	481a      	ldr	r0, [pc, #104]	; (8017298 <etharp_find_entry+0x2e0>)
 8017230:	f002 fbc0 	bl	80199b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d00b      	beq.n	8017252 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801723a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	6819      	ldr	r1, [r3, #0]
 8017242:	4812      	ldr	r0, [pc, #72]	; (801728c <etharp_find_entry+0x2d4>)
 8017244:	4613      	mov	r3, r2
 8017246:	005b      	lsls	r3, r3, #1
 8017248:	4413      	add	r3, r2
 801724a:	00db      	lsls	r3, r3, #3
 801724c:	4403      	add	r3, r0
 801724e:	3304      	adds	r3, #4
 8017250:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017256:	490d      	ldr	r1, [pc, #52]	; (801728c <etharp_find_entry+0x2d4>)
 8017258:	4613      	mov	r3, r2
 801725a:	005b      	lsls	r3, r3, #1
 801725c:	4413      	add	r3, r2
 801725e:	00db      	lsls	r3, r3, #3
 8017260:	440b      	add	r3, r1
 8017262:	3312      	adds	r3, #18
 8017264:	2200      	movs	r2, #0
 8017266:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017268:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801726c:	4907      	ldr	r1, [pc, #28]	; (801728c <etharp_find_entry+0x2d4>)
 801726e:	4613      	mov	r3, r2
 8017270:	005b      	lsls	r3, r3, #1
 8017272:	4413      	add	r3, r2
 8017274:	00db      	lsls	r3, r3, #3
 8017276:	440b      	add	r3, r1
 8017278:	3308      	adds	r3, #8
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801727e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017282:	4618      	mov	r0, r3
 8017284:	3728      	adds	r7, #40	; 0x28
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}
 801728a:	bf00      	nop
 801728c:	2000cfb0 	.word	0x2000cfb0
 8017290:	0801d3c8 	.word	0x0801d3c8
 8017294:	0801d400 	.word	0x0801d400
 8017298:	0801d440 	.word	0x0801d440
 801729c:	0801d468 	.word	0x0801d468
 80172a0:	0801d480 	.word	0x0801d480
 80172a4:	0801d494 	.word	0x0801d494

080172a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b088      	sub	sp, #32
 80172ac:	af02      	add	r7, sp, #8
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
 80172b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80172bc:	2b06      	cmp	r3, #6
 80172be:	d006      	beq.n	80172ce <etharp_update_arp_entry+0x26>
 80172c0:	4b48      	ldr	r3, [pc, #288]	; (80173e4 <etharp_update_arp_entry+0x13c>)
 80172c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80172c6:	4948      	ldr	r1, [pc, #288]	; (80173e8 <etharp_update_arp_entry+0x140>)
 80172c8:	4848      	ldr	r0, [pc, #288]	; (80173ec <etharp_update_arp_entry+0x144>)
 80172ca:	f002 fb73 	bl	80199b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80172ce:	68bb      	ldr	r3, [r7, #8]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d012      	beq.n	80172fa <etharp_update_arp_entry+0x52>
 80172d4:	68bb      	ldr	r3, [r7, #8]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d00e      	beq.n	80172fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172dc:	68bb      	ldr	r3, [r7, #8]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	68f9      	ldr	r1, [r7, #12]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f001 f920 	bl	8018528 <ip4_addr_isbroadcast_u32>
 80172e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d105      	bne.n	80172fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80172ee:	68bb      	ldr	r3, [r7, #8]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80172f6:	2be0      	cmp	r3, #224	; 0xe0
 80172f8:	d102      	bne.n	8017300 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80172fa:	f06f 030f 	mvn.w	r3, #15
 80172fe:	e06c      	b.n	80173da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017300:	78fb      	ldrb	r3, [r7, #3]
 8017302:	68fa      	ldr	r2, [r7, #12]
 8017304:	4619      	mov	r1, r3
 8017306:	68b8      	ldr	r0, [r7, #8]
 8017308:	f7ff fe56 	bl	8016fb8 <etharp_find_entry>
 801730c:	4603      	mov	r3, r0
 801730e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017310:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017314:	2b00      	cmp	r3, #0
 8017316:	da02      	bge.n	801731e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017318:	8afb      	ldrh	r3, [r7, #22]
 801731a:	b25b      	sxtb	r3, r3
 801731c:	e05d      	b.n	80173da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801731e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017322:	4933      	ldr	r1, [pc, #204]	; (80173f0 <etharp_update_arp_entry+0x148>)
 8017324:	4613      	mov	r3, r2
 8017326:	005b      	lsls	r3, r3, #1
 8017328:	4413      	add	r3, r2
 801732a:	00db      	lsls	r3, r3, #3
 801732c:	440b      	add	r3, r1
 801732e:	3314      	adds	r3, #20
 8017330:	2202      	movs	r2, #2
 8017332:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017334:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017338:	492d      	ldr	r1, [pc, #180]	; (80173f0 <etharp_update_arp_entry+0x148>)
 801733a:	4613      	mov	r3, r2
 801733c:	005b      	lsls	r3, r3, #1
 801733e:	4413      	add	r3, r2
 8017340:	00db      	lsls	r3, r3, #3
 8017342:	440b      	add	r3, r1
 8017344:	3308      	adds	r3, #8
 8017346:	68fa      	ldr	r2, [r7, #12]
 8017348:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801734a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801734e:	4613      	mov	r3, r2
 8017350:	005b      	lsls	r3, r3, #1
 8017352:	4413      	add	r3, r2
 8017354:	00db      	lsls	r3, r3, #3
 8017356:	3308      	adds	r3, #8
 8017358:	4a25      	ldr	r2, [pc, #148]	; (80173f0 <etharp_update_arp_entry+0x148>)
 801735a:	4413      	add	r3, r2
 801735c:	3304      	adds	r3, #4
 801735e:	2206      	movs	r2, #6
 8017360:	6879      	ldr	r1, [r7, #4]
 8017362:	4618      	mov	r0, r3
 8017364:	f002 fc2c 	bl	8019bc0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017368:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801736c:	4920      	ldr	r1, [pc, #128]	; (80173f0 <etharp_update_arp_entry+0x148>)
 801736e:	4613      	mov	r3, r2
 8017370:	005b      	lsls	r3, r3, #1
 8017372:	4413      	add	r3, r2
 8017374:	00db      	lsls	r3, r3, #3
 8017376:	440b      	add	r3, r1
 8017378:	3312      	adds	r3, #18
 801737a:	2200      	movs	r2, #0
 801737c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801737e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017382:	491b      	ldr	r1, [pc, #108]	; (80173f0 <etharp_update_arp_entry+0x148>)
 8017384:	4613      	mov	r3, r2
 8017386:	005b      	lsls	r3, r3, #1
 8017388:	4413      	add	r3, r2
 801738a:	00db      	lsls	r3, r3, #3
 801738c:	440b      	add	r3, r1
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d021      	beq.n	80173d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017394:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017398:	4915      	ldr	r1, [pc, #84]	; (80173f0 <etharp_update_arp_entry+0x148>)
 801739a:	4613      	mov	r3, r2
 801739c:	005b      	lsls	r3, r3, #1
 801739e:	4413      	add	r3, r2
 80173a0:	00db      	lsls	r3, r3, #3
 80173a2:	440b      	add	r3, r1
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80173a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173ac:	4910      	ldr	r1, [pc, #64]	; (80173f0 <etharp_update_arp_entry+0x148>)
 80173ae:	4613      	mov	r3, r2
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	4413      	add	r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	440b      	add	r3, r1
 80173b8:	2200      	movs	r2, #0
 80173ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80173c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80173c6:	9300      	str	r3, [sp, #0]
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6939      	ldr	r1, [r7, #16]
 80173cc:	68f8      	ldr	r0, [r7, #12]
 80173ce:	f001 ffb9 	bl	8019344 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80173d2:	6938      	ldr	r0, [r7, #16]
 80173d4:	f7f6 fd48 	bl	800de68 <pbuf_free>
  }
  return ERR_OK;
 80173d8:	2300      	movs	r3, #0
}
 80173da:	4618      	mov	r0, r3
 80173dc:	3718      	adds	r7, #24
 80173de:	46bd      	mov	sp, r7
 80173e0:	bd80      	pop	{r7, pc}
 80173e2:	bf00      	nop
 80173e4:	0801d3c8 	.word	0x0801d3c8
 80173e8:	0801d4c0 	.word	0x0801d4c0
 80173ec:	0801d440 	.word	0x0801d440
 80173f0:	2000cfb0 	.word	0x2000cfb0

080173f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b084      	sub	sp, #16
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80173fc:	2300      	movs	r3, #0
 80173fe:	60fb      	str	r3, [r7, #12]
 8017400:	e01e      	b.n	8017440 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017402:	4913      	ldr	r1, [pc, #76]	; (8017450 <etharp_cleanup_netif+0x5c>)
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	4613      	mov	r3, r2
 8017408:	005b      	lsls	r3, r3, #1
 801740a:	4413      	add	r3, r2
 801740c:	00db      	lsls	r3, r3, #3
 801740e:	440b      	add	r3, r1
 8017410:	3314      	adds	r3, #20
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017416:	7afb      	ldrb	r3, [r7, #11]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d00e      	beq.n	801743a <etharp_cleanup_netif+0x46>
 801741c:	490c      	ldr	r1, [pc, #48]	; (8017450 <etharp_cleanup_netif+0x5c>)
 801741e:	68fa      	ldr	r2, [r7, #12]
 8017420:	4613      	mov	r3, r2
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	4413      	add	r3, r2
 8017426:	00db      	lsls	r3, r3, #3
 8017428:	440b      	add	r3, r1
 801742a:	3308      	adds	r3, #8
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	429a      	cmp	r2, r3
 8017432:	d102      	bne.n	801743a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017434:	68f8      	ldr	r0, [r7, #12]
 8017436:	f7ff fce5 	bl	8016e04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	3301      	adds	r3, #1
 801743e:	60fb      	str	r3, [r7, #12]
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2b09      	cmp	r3, #9
 8017444:	dddd      	ble.n	8017402 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017446:	bf00      	nop
 8017448:	bf00      	nop
 801744a:	3710      	adds	r7, #16
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	2000cfb0 	.word	0x2000cfb0

08017454 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017454:	b5b0      	push	{r4, r5, r7, lr}
 8017456:	b08a      	sub	sp, #40	; 0x28
 8017458:	af04      	add	r7, sp, #16
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d107      	bne.n	8017474 <etharp_input+0x20>
 8017464:	4b3f      	ldr	r3, [pc, #252]	; (8017564 <etharp_input+0x110>)
 8017466:	f240 228a 	movw	r2, #650	; 0x28a
 801746a:	493f      	ldr	r1, [pc, #252]	; (8017568 <etharp_input+0x114>)
 801746c:	483f      	ldr	r0, [pc, #252]	; (801756c <etharp_input+0x118>)
 801746e:	f002 faa1 	bl	80199b4 <iprintf>
 8017472:	e074      	b.n	801755e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	685b      	ldr	r3, [r3, #4]
 8017478:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	b29b      	uxth	r3, r3
 8017480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017484:	d10c      	bne.n	80174a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017486:	693b      	ldr	r3, [r7, #16]
 8017488:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801748a:	2b06      	cmp	r3, #6
 801748c:	d108      	bne.n	80174a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801748e:	693b      	ldr	r3, [r7, #16]
 8017490:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017492:	2b04      	cmp	r3, #4
 8017494:	d104      	bne.n	80174a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	885b      	ldrh	r3, [r3, #2]
 801749a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801749c:	2b08      	cmp	r3, #8
 801749e:	d003      	beq.n	80174a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80174a0:	6878      	ldr	r0, [r7, #4]
 80174a2:	f7f6 fce1 	bl	800de68 <pbuf_free>
    return;
 80174a6:	e05a      	b.n	801755e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80174a8:	693b      	ldr	r3, [r7, #16]
 80174aa:	330e      	adds	r3, #14
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	3318      	adds	r3, #24
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	3304      	adds	r3, #4
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d102      	bne.n	80174c8 <etharp_input+0x74>
    for_us = 0;
 80174c2:	2300      	movs	r3, #0
 80174c4:	75fb      	strb	r3, [r7, #23]
 80174c6:	e009      	b.n	80174dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80174c8:	68ba      	ldr	r2, [r7, #8]
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	3304      	adds	r3, #4
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	429a      	cmp	r2, r3
 80174d2:	bf0c      	ite	eq
 80174d4:	2301      	moveq	r3, #1
 80174d6:	2300      	movne	r3, #0
 80174d8:	b2db      	uxtb	r3, r3
 80174da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	f103 0208 	add.w	r2, r3, #8
 80174e2:	7dfb      	ldrb	r3, [r7, #23]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d001      	beq.n	80174ec <etharp_input+0x98>
 80174e8:	2301      	movs	r3, #1
 80174ea:	e000      	b.n	80174ee <etharp_input+0x9a>
 80174ec:	2302      	movs	r3, #2
 80174ee:	f107 010c 	add.w	r1, r7, #12
 80174f2:	6838      	ldr	r0, [r7, #0]
 80174f4:	f7ff fed8 	bl	80172a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80174f8:	693b      	ldr	r3, [r7, #16]
 80174fa:	88db      	ldrh	r3, [r3, #6]
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017502:	d003      	beq.n	801750c <etharp_input+0xb8>
 8017504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017508:	d01e      	beq.n	8017548 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801750a:	e025      	b.n	8017558 <etharp_input+0x104>
      if (for_us) {
 801750c:	7dfb      	ldrb	r3, [r7, #23]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d021      	beq.n	8017556 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017528:	693a      	ldr	r2, [r7, #16]
 801752a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801752c:	2102      	movs	r1, #2
 801752e:	9103      	str	r1, [sp, #12]
 8017530:	f107 010c 	add.w	r1, r7, #12
 8017534:	9102      	str	r1, [sp, #8]
 8017536:	9201      	str	r2, [sp, #4]
 8017538:	9300      	str	r3, [sp, #0]
 801753a:	462b      	mov	r3, r5
 801753c:	4622      	mov	r2, r4
 801753e:	4601      	mov	r1, r0
 8017540:	6838      	ldr	r0, [r7, #0]
 8017542:	f000 faef 	bl	8017b24 <etharp_raw>
      break;
 8017546:	e006      	b.n	8017556 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017548:	f107 030c 	add.w	r3, r7, #12
 801754c:	4619      	mov	r1, r3
 801754e:	6838      	ldr	r0, [r7, #0]
 8017550:	f7fe f9fc 	bl	801594c <dhcp_arp_reply>
      break;
 8017554:	e000      	b.n	8017558 <etharp_input+0x104>
      break;
 8017556:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f7f6 fc85 	bl	800de68 <pbuf_free>
}
 801755e:	3718      	adds	r7, #24
 8017560:	46bd      	mov	sp, r7
 8017562:	bdb0      	pop	{r4, r5, r7, pc}
 8017564:	0801d3c8 	.word	0x0801d3c8
 8017568:	0801d518 	.word	0x0801d518
 801756c:	0801d440 	.word	0x0801d440

08017570 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b086      	sub	sp, #24
 8017574:	af02      	add	r7, sp, #8
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	4613      	mov	r3, r2
 801757c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801757e:	79fa      	ldrb	r2, [r7, #7]
 8017580:	4944      	ldr	r1, [pc, #272]	; (8017694 <etharp_output_to_arp_index+0x124>)
 8017582:	4613      	mov	r3, r2
 8017584:	005b      	lsls	r3, r3, #1
 8017586:	4413      	add	r3, r2
 8017588:	00db      	lsls	r3, r3, #3
 801758a:	440b      	add	r3, r1
 801758c:	3314      	adds	r3, #20
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	2b01      	cmp	r3, #1
 8017592:	d806      	bhi.n	80175a2 <etharp_output_to_arp_index+0x32>
 8017594:	4b40      	ldr	r3, [pc, #256]	; (8017698 <etharp_output_to_arp_index+0x128>)
 8017596:	f240 22ee 	movw	r2, #750	; 0x2ee
 801759a:	4940      	ldr	r1, [pc, #256]	; (801769c <etharp_output_to_arp_index+0x12c>)
 801759c:	4840      	ldr	r0, [pc, #256]	; (80176a0 <etharp_output_to_arp_index+0x130>)
 801759e:	f002 fa09 	bl	80199b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80175a2:	79fa      	ldrb	r2, [r7, #7]
 80175a4:	493b      	ldr	r1, [pc, #236]	; (8017694 <etharp_output_to_arp_index+0x124>)
 80175a6:	4613      	mov	r3, r2
 80175a8:	005b      	lsls	r3, r3, #1
 80175aa:	4413      	add	r3, r2
 80175ac:	00db      	lsls	r3, r3, #3
 80175ae:	440b      	add	r3, r1
 80175b0:	3314      	adds	r3, #20
 80175b2:	781b      	ldrb	r3, [r3, #0]
 80175b4:	2b02      	cmp	r3, #2
 80175b6:	d153      	bne.n	8017660 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80175b8:	79fa      	ldrb	r2, [r7, #7]
 80175ba:	4936      	ldr	r1, [pc, #216]	; (8017694 <etharp_output_to_arp_index+0x124>)
 80175bc:	4613      	mov	r3, r2
 80175be:	005b      	lsls	r3, r3, #1
 80175c0:	4413      	add	r3, r2
 80175c2:	00db      	lsls	r3, r3, #3
 80175c4:	440b      	add	r3, r1
 80175c6:	3312      	adds	r3, #18
 80175c8:	881b      	ldrh	r3, [r3, #0]
 80175ca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80175ce:	d919      	bls.n	8017604 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80175d0:	79fa      	ldrb	r2, [r7, #7]
 80175d2:	4613      	mov	r3, r2
 80175d4:	005b      	lsls	r3, r3, #1
 80175d6:	4413      	add	r3, r2
 80175d8:	00db      	lsls	r3, r3, #3
 80175da:	4a2e      	ldr	r2, [pc, #184]	; (8017694 <etharp_output_to_arp_index+0x124>)
 80175dc:	4413      	add	r3, r2
 80175de:	3304      	adds	r3, #4
 80175e0:	4619      	mov	r1, r3
 80175e2:	68f8      	ldr	r0, [r7, #12]
 80175e4:	f000 fb4c 	bl	8017c80 <etharp_request>
 80175e8:	4603      	mov	r3, r0
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d138      	bne.n	8017660 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80175ee:	79fa      	ldrb	r2, [r7, #7]
 80175f0:	4928      	ldr	r1, [pc, #160]	; (8017694 <etharp_output_to_arp_index+0x124>)
 80175f2:	4613      	mov	r3, r2
 80175f4:	005b      	lsls	r3, r3, #1
 80175f6:	4413      	add	r3, r2
 80175f8:	00db      	lsls	r3, r3, #3
 80175fa:	440b      	add	r3, r1
 80175fc:	3314      	adds	r3, #20
 80175fe:	2203      	movs	r2, #3
 8017600:	701a      	strb	r2, [r3, #0]
 8017602:	e02d      	b.n	8017660 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017604:	79fa      	ldrb	r2, [r7, #7]
 8017606:	4923      	ldr	r1, [pc, #140]	; (8017694 <etharp_output_to_arp_index+0x124>)
 8017608:	4613      	mov	r3, r2
 801760a:	005b      	lsls	r3, r3, #1
 801760c:	4413      	add	r3, r2
 801760e:	00db      	lsls	r3, r3, #3
 8017610:	440b      	add	r3, r1
 8017612:	3312      	adds	r3, #18
 8017614:	881b      	ldrh	r3, [r3, #0]
 8017616:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801761a:	d321      	bcc.n	8017660 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801761c:	79fa      	ldrb	r2, [r7, #7]
 801761e:	4613      	mov	r3, r2
 8017620:	005b      	lsls	r3, r3, #1
 8017622:	4413      	add	r3, r2
 8017624:	00db      	lsls	r3, r3, #3
 8017626:	4a1b      	ldr	r2, [pc, #108]	; (8017694 <etharp_output_to_arp_index+0x124>)
 8017628:	4413      	add	r3, r2
 801762a:	1d19      	adds	r1, r3, #4
 801762c:	79fa      	ldrb	r2, [r7, #7]
 801762e:	4613      	mov	r3, r2
 8017630:	005b      	lsls	r3, r3, #1
 8017632:	4413      	add	r3, r2
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	3308      	adds	r3, #8
 8017638:	4a16      	ldr	r2, [pc, #88]	; (8017694 <etharp_output_to_arp_index+0x124>)
 801763a:	4413      	add	r3, r2
 801763c:	3304      	adds	r3, #4
 801763e:	461a      	mov	r2, r3
 8017640:	68f8      	ldr	r0, [r7, #12]
 8017642:	f000 fafb 	bl	8017c3c <etharp_request_dst>
 8017646:	4603      	mov	r3, r0
 8017648:	2b00      	cmp	r3, #0
 801764a:	d109      	bne.n	8017660 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801764c:	79fa      	ldrb	r2, [r7, #7]
 801764e:	4911      	ldr	r1, [pc, #68]	; (8017694 <etharp_output_to_arp_index+0x124>)
 8017650:	4613      	mov	r3, r2
 8017652:	005b      	lsls	r3, r3, #1
 8017654:	4413      	add	r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	440b      	add	r3, r1
 801765a:	3314      	adds	r3, #20
 801765c:	2203      	movs	r2, #3
 801765e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017666:	79fa      	ldrb	r2, [r7, #7]
 8017668:	4613      	mov	r3, r2
 801766a:	005b      	lsls	r3, r3, #1
 801766c:	4413      	add	r3, r2
 801766e:	00db      	lsls	r3, r3, #3
 8017670:	3308      	adds	r3, #8
 8017672:	4a08      	ldr	r2, [pc, #32]	; (8017694 <etharp_output_to_arp_index+0x124>)
 8017674:	4413      	add	r3, r2
 8017676:	3304      	adds	r3, #4
 8017678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801767c:	9200      	str	r2, [sp, #0]
 801767e:	460a      	mov	r2, r1
 8017680:	68b9      	ldr	r1, [r7, #8]
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f001 fe5e 	bl	8019344 <ethernet_output>
 8017688:	4603      	mov	r3, r0
}
 801768a:	4618      	mov	r0, r3
 801768c:	3710      	adds	r7, #16
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	2000cfb0 	.word	0x2000cfb0
 8017698:	0801d3c8 	.word	0x0801d3c8
 801769c:	0801d538 	.word	0x0801d538
 80176a0:	0801d440 	.word	0x0801d440

080176a4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b08a      	sub	sp, #40	; 0x28
 80176a8:	af02      	add	r7, sp, #8
 80176aa:	60f8      	str	r0, [r7, #12]
 80176ac:	60b9      	str	r1, [r7, #8]
 80176ae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d106      	bne.n	80176c8 <etharp_output+0x24>
 80176ba:	4b73      	ldr	r3, [pc, #460]	; (8017888 <etharp_output+0x1e4>)
 80176bc:	f240 321e 	movw	r2, #798	; 0x31e
 80176c0:	4972      	ldr	r1, [pc, #456]	; (801788c <etharp_output+0x1e8>)
 80176c2:	4873      	ldr	r0, [pc, #460]	; (8017890 <etharp_output+0x1ec>)
 80176c4:	f002 f976 	bl	80199b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80176c8:	68bb      	ldr	r3, [r7, #8]
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d106      	bne.n	80176dc <etharp_output+0x38>
 80176ce:	4b6e      	ldr	r3, [pc, #440]	; (8017888 <etharp_output+0x1e4>)
 80176d0:	f240 321f 	movw	r2, #799	; 0x31f
 80176d4:	496f      	ldr	r1, [pc, #444]	; (8017894 <etharp_output+0x1f0>)
 80176d6:	486e      	ldr	r0, [pc, #440]	; (8017890 <etharp_output+0x1ec>)
 80176d8:	f002 f96c 	bl	80199b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d106      	bne.n	80176f0 <etharp_output+0x4c>
 80176e2:	4b69      	ldr	r3, [pc, #420]	; (8017888 <etharp_output+0x1e4>)
 80176e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80176e8:	496b      	ldr	r1, [pc, #428]	; (8017898 <etharp_output+0x1f4>)
 80176ea:	4869      	ldr	r0, [pc, #420]	; (8017890 <etharp_output+0x1ec>)
 80176ec:	f002 f962 	bl	80199b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	68f9      	ldr	r1, [r7, #12]
 80176f6:	4618      	mov	r0, r3
 80176f8:	f000 ff16 	bl	8018528 <ip4_addr_isbroadcast_u32>
 80176fc:	4603      	mov	r3, r0
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d002      	beq.n	8017708 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017702:	4b66      	ldr	r3, [pc, #408]	; (801789c <etharp_output+0x1f8>)
 8017704:	61fb      	str	r3, [r7, #28]
 8017706:	e0af      	b.n	8017868 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017710:	2be0      	cmp	r3, #224	; 0xe0
 8017712:	d118      	bne.n	8017746 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017714:	2301      	movs	r3, #1
 8017716:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017718:	2300      	movs	r3, #0
 801771a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801771c:	235e      	movs	r3, #94	; 0x5e
 801771e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	3301      	adds	r3, #1
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801772a:	b2db      	uxtb	r3, r3
 801772c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	3302      	adds	r3, #2
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	3303      	adds	r3, #3
 801773a:	781b      	ldrb	r3, [r3, #0]
 801773c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801773e:	f107 0310 	add.w	r3, r7, #16
 8017742:	61fb      	str	r3, [r7, #28]
 8017744:	e090      	b.n	8017868 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681a      	ldr	r2, [r3, #0]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	3304      	adds	r3, #4
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	405a      	eors	r2, r3
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	3308      	adds	r3, #8
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	4013      	ands	r3, r2
 801775a:	2b00      	cmp	r3, #0
 801775c:	d012      	beq.n	8017784 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017764:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017768:	4293      	cmp	r3, r2
 801776a:	d00b      	beq.n	8017784 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	330c      	adds	r3, #12
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d003      	beq.n	801777e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	330c      	adds	r3, #12
 801777a:	61bb      	str	r3, [r7, #24]
 801777c:	e002      	b.n	8017784 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801777e:	f06f 0303 	mvn.w	r3, #3
 8017782:	e07d      	b.n	8017880 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017784:	4b46      	ldr	r3, [pc, #280]	; (80178a0 <etharp_output+0x1fc>)
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	4619      	mov	r1, r3
 801778a:	4a46      	ldr	r2, [pc, #280]	; (80178a4 <etharp_output+0x200>)
 801778c:	460b      	mov	r3, r1
 801778e:	005b      	lsls	r3, r3, #1
 8017790:	440b      	add	r3, r1
 8017792:	00db      	lsls	r3, r3, #3
 8017794:	4413      	add	r3, r2
 8017796:	3314      	adds	r3, #20
 8017798:	781b      	ldrb	r3, [r3, #0]
 801779a:	2b01      	cmp	r3, #1
 801779c:	d925      	bls.n	80177ea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801779e:	4b40      	ldr	r3, [pc, #256]	; (80178a0 <etharp_output+0x1fc>)
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	4619      	mov	r1, r3
 80177a4:	4a3f      	ldr	r2, [pc, #252]	; (80178a4 <etharp_output+0x200>)
 80177a6:	460b      	mov	r3, r1
 80177a8:	005b      	lsls	r3, r3, #1
 80177aa:	440b      	add	r3, r1
 80177ac:	00db      	lsls	r3, r3, #3
 80177ae:	4413      	add	r3, r2
 80177b0:	3308      	adds	r3, #8
 80177b2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80177b4:	68fa      	ldr	r2, [r7, #12]
 80177b6:	429a      	cmp	r2, r3
 80177b8:	d117      	bne.n	80177ea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	681a      	ldr	r2, [r3, #0]
 80177be:	4b38      	ldr	r3, [pc, #224]	; (80178a0 <etharp_output+0x1fc>)
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	4618      	mov	r0, r3
 80177c4:	4937      	ldr	r1, [pc, #220]	; (80178a4 <etharp_output+0x200>)
 80177c6:	4603      	mov	r3, r0
 80177c8:	005b      	lsls	r3, r3, #1
 80177ca:	4403      	add	r3, r0
 80177cc:	00db      	lsls	r3, r3, #3
 80177ce:	440b      	add	r3, r1
 80177d0:	3304      	adds	r3, #4
 80177d2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d108      	bne.n	80177ea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80177d8:	4b31      	ldr	r3, [pc, #196]	; (80178a0 <etharp_output+0x1fc>)
 80177da:	781b      	ldrb	r3, [r3, #0]
 80177dc:	461a      	mov	r2, r3
 80177de:	68b9      	ldr	r1, [r7, #8]
 80177e0:	68f8      	ldr	r0, [r7, #12]
 80177e2:	f7ff fec5 	bl	8017570 <etharp_output_to_arp_index>
 80177e6:	4603      	mov	r3, r0
 80177e8:	e04a      	b.n	8017880 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80177ea:	2300      	movs	r3, #0
 80177ec:	75fb      	strb	r3, [r7, #23]
 80177ee:	e031      	b.n	8017854 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80177f0:	7dfa      	ldrb	r2, [r7, #23]
 80177f2:	492c      	ldr	r1, [pc, #176]	; (80178a4 <etharp_output+0x200>)
 80177f4:	4613      	mov	r3, r2
 80177f6:	005b      	lsls	r3, r3, #1
 80177f8:	4413      	add	r3, r2
 80177fa:	00db      	lsls	r3, r3, #3
 80177fc:	440b      	add	r3, r1
 80177fe:	3314      	adds	r3, #20
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	2b01      	cmp	r3, #1
 8017804:	d923      	bls.n	801784e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017806:	7dfa      	ldrb	r2, [r7, #23]
 8017808:	4926      	ldr	r1, [pc, #152]	; (80178a4 <etharp_output+0x200>)
 801780a:	4613      	mov	r3, r2
 801780c:	005b      	lsls	r3, r3, #1
 801780e:	4413      	add	r3, r2
 8017810:	00db      	lsls	r3, r3, #3
 8017812:	440b      	add	r3, r1
 8017814:	3308      	adds	r3, #8
 8017816:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017818:	68fa      	ldr	r2, [r7, #12]
 801781a:	429a      	cmp	r2, r3
 801781c:	d117      	bne.n	801784e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801781e:	69bb      	ldr	r3, [r7, #24]
 8017820:	6819      	ldr	r1, [r3, #0]
 8017822:	7dfa      	ldrb	r2, [r7, #23]
 8017824:	481f      	ldr	r0, [pc, #124]	; (80178a4 <etharp_output+0x200>)
 8017826:	4613      	mov	r3, r2
 8017828:	005b      	lsls	r3, r3, #1
 801782a:	4413      	add	r3, r2
 801782c:	00db      	lsls	r3, r3, #3
 801782e:	4403      	add	r3, r0
 8017830:	3304      	adds	r3, #4
 8017832:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017834:	4299      	cmp	r1, r3
 8017836:	d10a      	bne.n	801784e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017838:	4a19      	ldr	r2, [pc, #100]	; (80178a0 <etharp_output+0x1fc>)
 801783a:	7dfb      	ldrb	r3, [r7, #23]
 801783c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801783e:	7dfb      	ldrb	r3, [r7, #23]
 8017840:	461a      	mov	r2, r3
 8017842:	68b9      	ldr	r1, [r7, #8]
 8017844:	68f8      	ldr	r0, [r7, #12]
 8017846:	f7ff fe93 	bl	8017570 <etharp_output_to_arp_index>
 801784a:	4603      	mov	r3, r0
 801784c:	e018      	b.n	8017880 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801784e:	7dfb      	ldrb	r3, [r7, #23]
 8017850:	3301      	adds	r3, #1
 8017852:	75fb      	strb	r3, [r7, #23]
 8017854:	7dfb      	ldrb	r3, [r7, #23]
 8017856:	2b09      	cmp	r3, #9
 8017858:	d9ca      	bls.n	80177f0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801785a:	68ba      	ldr	r2, [r7, #8]
 801785c:	69b9      	ldr	r1, [r7, #24]
 801785e:	68f8      	ldr	r0, [r7, #12]
 8017860:	f000 f822 	bl	80178a8 <etharp_query>
 8017864:	4603      	mov	r3, r0
 8017866:	e00b      	b.n	8017880 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801786e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017872:	9300      	str	r3, [sp, #0]
 8017874:	69fb      	ldr	r3, [r7, #28]
 8017876:	68b9      	ldr	r1, [r7, #8]
 8017878:	68f8      	ldr	r0, [r7, #12]
 801787a:	f001 fd63 	bl	8019344 <ethernet_output>
 801787e:	4603      	mov	r3, r0
}
 8017880:	4618      	mov	r0, r3
 8017882:	3720      	adds	r7, #32
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}
 8017888:	0801d3c8 	.word	0x0801d3c8
 801788c:	0801d518 	.word	0x0801d518
 8017890:	0801d440 	.word	0x0801d440
 8017894:	0801d568 	.word	0x0801d568
 8017898:	0801d508 	.word	0x0801d508
 801789c:	0801ff20 	.word	0x0801ff20
 80178a0:	2000d0a0 	.word	0x2000d0a0
 80178a4:	2000cfb0 	.word	0x2000cfb0

080178a8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b08c      	sub	sp, #48	; 0x30
 80178ac:	af02      	add	r7, sp, #8
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	332a      	adds	r3, #42	; 0x2a
 80178b8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80178ba:	23ff      	movs	r3, #255	; 0xff
 80178bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80178c0:	2300      	movs	r3, #0
 80178c2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	68f9      	ldr	r1, [r7, #12]
 80178ca:	4618      	mov	r0, r3
 80178cc:	f000 fe2c 	bl	8018528 <ip4_addr_isbroadcast_u32>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d10c      	bne.n	80178f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80178de:	2be0      	cmp	r3, #224	; 0xe0
 80178e0:	d006      	beq.n	80178f0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80178e2:	68bb      	ldr	r3, [r7, #8]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d003      	beq.n	80178f0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d102      	bne.n	80178f6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80178f0:	f06f 030f 	mvn.w	r3, #15
 80178f4:	e101      	b.n	8017afa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80178f6:	68fa      	ldr	r2, [r7, #12]
 80178f8:	2101      	movs	r1, #1
 80178fa:	68b8      	ldr	r0, [r7, #8]
 80178fc:	f7ff fb5c 	bl	8016fb8 <etharp_find_entry>
 8017900:	4603      	mov	r3, r0
 8017902:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017904:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017908:	2b00      	cmp	r3, #0
 801790a:	da02      	bge.n	8017912 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801790c:	8a7b      	ldrh	r3, [r7, #18]
 801790e:	b25b      	sxtb	r3, r3
 8017910:	e0f3      	b.n	8017afa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017912:	8a7b      	ldrh	r3, [r7, #18]
 8017914:	2b7e      	cmp	r3, #126	; 0x7e
 8017916:	d906      	bls.n	8017926 <etharp_query+0x7e>
 8017918:	4b7a      	ldr	r3, [pc, #488]	; (8017b04 <etharp_query+0x25c>)
 801791a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801791e:	497a      	ldr	r1, [pc, #488]	; (8017b08 <etharp_query+0x260>)
 8017920:	487a      	ldr	r0, [pc, #488]	; (8017b0c <etharp_query+0x264>)
 8017922:	f002 f847 	bl	80199b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017926:	8a7b      	ldrh	r3, [r7, #18]
 8017928:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801792a:	7c7a      	ldrb	r2, [r7, #17]
 801792c:	4978      	ldr	r1, [pc, #480]	; (8017b10 <etharp_query+0x268>)
 801792e:	4613      	mov	r3, r2
 8017930:	005b      	lsls	r3, r3, #1
 8017932:	4413      	add	r3, r2
 8017934:	00db      	lsls	r3, r3, #3
 8017936:	440b      	add	r3, r1
 8017938:	3314      	adds	r3, #20
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d115      	bne.n	801796c <etharp_query+0xc4>
    is_new_entry = 1;
 8017940:	2301      	movs	r3, #1
 8017942:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017944:	7c7a      	ldrb	r2, [r7, #17]
 8017946:	4972      	ldr	r1, [pc, #456]	; (8017b10 <etharp_query+0x268>)
 8017948:	4613      	mov	r3, r2
 801794a:	005b      	lsls	r3, r3, #1
 801794c:	4413      	add	r3, r2
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	440b      	add	r3, r1
 8017952:	3314      	adds	r3, #20
 8017954:	2201      	movs	r2, #1
 8017956:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017958:	7c7a      	ldrb	r2, [r7, #17]
 801795a:	496d      	ldr	r1, [pc, #436]	; (8017b10 <etharp_query+0x268>)
 801795c:	4613      	mov	r3, r2
 801795e:	005b      	lsls	r3, r3, #1
 8017960:	4413      	add	r3, r2
 8017962:	00db      	lsls	r3, r3, #3
 8017964:	440b      	add	r3, r1
 8017966:	3308      	adds	r3, #8
 8017968:	68fa      	ldr	r2, [r7, #12]
 801796a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801796c:	7c7a      	ldrb	r2, [r7, #17]
 801796e:	4968      	ldr	r1, [pc, #416]	; (8017b10 <etharp_query+0x268>)
 8017970:	4613      	mov	r3, r2
 8017972:	005b      	lsls	r3, r3, #1
 8017974:	4413      	add	r3, r2
 8017976:	00db      	lsls	r3, r3, #3
 8017978:	440b      	add	r3, r1
 801797a:	3314      	adds	r3, #20
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	2b01      	cmp	r3, #1
 8017980:	d011      	beq.n	80179a6 <etharp_query+0xfe>
 8017982:	7c7a      	ldrb	r2, [r7, #17]
 8017984:	4962      	ldr	r1, [pc, #392]	; (8017b10 <etharp_query+0x268>)
 8017986:	4613      	mov	r3, r2
 8017988:	005b      	lsls	r3, r3, #1
 801798a:	4413      	add	r3, r2
 801798c:	00db      	lsls	r3, r3, #3
 801798e:	440b      	add	r3, r1
 8017990:	3314      	adds	r3, #20
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	2b01      	cmp	r3, #1
 8017996:	d806      	bhi.n	80179a6 <etharp_query+0xfe>
 8017998:	4b5a      	ldr	r3, [pc, #360]	; (8017b04 <etharp_query+0x25c>)
 801799a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801799e:	495d      	ldr	r1, [pc, #372]	; (8017b14 <etharp_query+0x26c>)
 80179a0:	485a      	ldr	r0, [pc, #360]	; (8017b0c <etharp_query+0x264>)
 80179a2:	f002 f807 	bl	80199b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80179a6:	6a3b      	ldr	r3, [r7, #32]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d102      	bne.n	80179b2 <etharp_query+0x10a>
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d10c      	bne.n	80179cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80179b2:	68b9      	ldr	r1, [r7, #8]
 80179b4:	68f8      	ldr	r0, [r7, #12]
 80179b6:	f000 f963 	bl	8017c80 <etharp_request>
 80179ba:	4603      	mov	r3, r0
 80179bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d102      	bne.n	80179cc <etharp_query+0x124>
      return result;
 80179c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80179ca:	e096      	b.n	8017afa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d106      	bne.n	80179e0 <etharp_query+0x138>
 80179d2:	4b4c      	ldr	r3, [pc, #304]	; (8017b04 <etharp_query+0x25c>)
 80179d4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80179d8:	494f      	ldr	r1, [pc, #316]	; (8017b18 <etharp_query+0x270>)
 80179da:	484c      	ldr	r0, [pc, #304]	; (8017b0c <etharp_query+0x264>)
 80179dc:	f001 ffea 	bl	80199b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80179e0:	7c7a      	ldrb	r2, [r7, #17]
 80179e2:	494b      	ldr	r1, [pc, #300]	; (8017b10 <etharp_query+0x268>)
 80179e4:	4613      	mov	r3, r2
 80179e6:	005b      	lsls	r3, r3, #1
 80179e8:	4413      	add	r3, r2
 80179ea:	00db      	lsls	r3, r3, #3
 80179ec:	440b      	add	r3, r1
 80179ee:	3314      	adds	r3, #20
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	2b01      	cmp	r3, #1
 80179f4:	d917      	bls.n	8017a26 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80179f6:	4a49      	ldr	r2, [pc, #292]	; (8017b1c <etharp_query+0x274>)
 80179f8:	7c7b      	ldrb	r3, [r7, #17]
 80179fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80179fc:	7c7a      	ldrb	r2, [r7, #17]
 80179fe:	4613      	mov	r3, r2
 8017a00:	005b      	lsls	r3, r3, #1
 8017a02:	4413      	add	r3, r2
 8017a04:	00db      	lsls	r3, r3, #3
 8017a06:	3308      	adds	r3, #8
 8017a08:	4a41      	ldr	r2, [pc, #260]	; (8017b10 <etharp_query+0x268>)
 8017a0a:	4413      	add	r3, r2
 8017a0c:	3304      	adds	r3, #4
 8017a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017a12:	9200      	str	r2, [sp, #0]
 8017a14:	697a      	ldr	r2, [r7, #20]
 8017a16:	6879      	ldr	r1, [r7, #4]
 8017a18:	68f8      	ldr	r0, [r7, #12]
 8017a1a:	f001 fc93 	bl	8019344 <ethernet_output>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017a24:	e067      	b.n	8017af6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017a26:	7c7a      	ldrb	r2, [r7, #17]
 8017a28:	4939      	ldr	r1, [pc, #228]	; (8017b10 <etharp_query+0x268>)
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	005b      	lsls	r3, r3, #1
 8017a2e:	4413      	add	r3, r2
 8017a30:	00db      	lsls	r3, r3, #3
 8017a32:	440b      	add	r3, r1
 8017a34:	3314      	adds	r3, #20
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	2b01      	cmp	r3, #1
 8017a3a:	d15c      	bne.n	8017af6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a44:	e01c      	b.n	8017a80 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017a46:	69fb      	ldr	r3, [r7, #28]
 8017a48:	895a      	ldrh	r2, [r3, #10]
 8017a4a:	69fb      	ldr	r3, [r7, #28]
 8017a4c:	891b      	ldrh	r3, [r3, #8]
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	d10a      	bne.n	8017a68 <etharp_query+0x1c0>
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d006      	beq.n	8017a68 <etharp_query+0x1c0>
 8017a5a:	4b2a      	ldr	r3, [pc, #168]	; (8017b04 <etharp_query+0x25c>)
 8017a5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017a60:	492f      	ldr	r1, [pc, #188]	; (8017b20 <etharp_query+0x278>)
 8017a62:	482a      	ldr	r0, [pc, #168]	; (8017b0c <etharp_query+0x264>)
 8017a64:	f001 ffa6 	bl	80199b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	7b1b      	ldrb	r3, [r3, #12]
 8017a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d002      	beq.n	8017a7a <etharp_query+0x1d2>
        copy_needed = 1;
 8017a74:	2301      	movs	r3, #1
 8017a76:	61bb      	str	r3, [r7, #24]
        break;
 8017a78:	e005      	b.n	8017a86 <etharp_query+0x1de>
      }
      p = p->next;
 8017a7a:	69fb      	ldr	r3, [r7, #28]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017a80:	69fb      	ldr	r3, [r7, #28]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d1df      	bne.n	8017a46 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017a86:	69bb      	ldr	r3, [r7, #24]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d007      	beq.n	8017a9c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017a92:	200e      	movs	r0, #14
 8017a94:	f7f6 fc60 	bl	800e358 <pbuf_clone>
 8017a98:	61f8      	str	r0, [r7, #28]
 8017a9a:	e004      	b.n	8017aa6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017aa0:	69f8      	ldr	r0, [r7, #28]
 8017aa2:	f7f6 fa87 	bl	800dfb4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017aa6:	69fb      	ldr	r3, [r7, #28]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d021      	beq.n	8017af0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017aac:	7c7a      	ldrb	r2, [r7, #17]
 8017aae:	4918      	ldr	r1, [pc, #96]	; (8017b10 <etharp_query+0x268>)
 8017ab0:	4613      	mov	r3, r2
 8017ab2:	005b      	lsls	r3, r3, #1
 8017ab4:	4413      	add	r3, r2
 8017ab6:	00db      	lsls	r3, r3, #3
 8017ab8:	440b      	add	r3, r1
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d00a      	beq.n	8017ad6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017ac0:	7c7a      	ldrb	r2, [r7, #17]
 8017ac2:	4913      	ldr	r1, [pc, #76]	; (8017b10 <etharp_query+0x268>)
 8017ac4:	4613      	mov	r3, r2
 8017ac6:	005b      	lsls	r3, r3, #1
 8017ac8:	4413      	add	r3, r2
 8017aca:	00db      	lsls	r3, r3, #3
 8017acc:	440b      	add	r3, r1
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7f6 f9c9 	bl	800de68 <pbuf_free>
      }
      arp_table[i].q = p;
 8017ad6:	7c7a      	ldrb	r2, [r7, #17]
 8017ad8:	490d      	ldr	r1, [pc, #52]	; (8017b10 <etharp_query+0x268>)
 8017ada:	4613      	mov	r3, r2
 8017adc:	005b      	lsls	r3, r3, #1
 8017ade:	4413      	add	r3, r2
 8017ae0:	00db      	lsls	r3, r3, #3
 8017ae2:	440b      	add	r3, r1
 8017ae4:	69fa      	ldr	r2, [r7, #28]
 8017ae6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017ae8:	2300      	movs	r3, #0
 8017aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017aee:	e002      	b.n	8017af6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017af0:	23ff      	movs	r3, #255	; 0xff
 8017af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017af6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	3728      	adds	r7, #40	; 0x28
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	0801d3c8 	.word	0x0801d3c8
 8017b08:	0801d574 	.word	0x0801d574
 8017b0c:	0801d440 	.word	0x0801d440
 8017b10:	2000cfb0 	.word	0x2000cfb0
 8017b14:	0801d584 	.word	0x0801d584
 8017b18:	0801d568 	.word	0x0801d568
 8017b1c:	2000d0a0 	.word	0x2000d0a0
 8017b20:	0801d5ac 	.word	0x0801d5ac

08017b24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b08a      	sub	sp, #40	; 0x28
 8017b28:	af02      	add	r7, sp, #8
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017b32:	2300      	movs	r3, #0
 8017b34:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d106      	bne.n	8017b4a <etharp_raw+0x26>
 8017b3c:	4b3a      	ldr	r3, [pc, #232]	; (8017c28 <etharp_raw+0x104>)
 8017b3e:	f240 4257 	movw	r2, #1111	; 0x457
 8017b42:	493a      	ldr	r1, [pc, #232]	; (8017c2c <etharp_raw+0x108>)
 8017b44:	483a      	ldr	r0, [pc, #232]	; (8017c30 <etharp_raw+0x10c>)
 8017b46:	f001 ff35 	bl	80199b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017b4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b4e:	211c      	movs	r1, #28
 8017b50:	200e      	movs	r0, #14
 8017b52:	f7f5 fea5 	bl	800d8a0 <pbuf_alloc>
 8017b56:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017b58:	69bb      	ldr	r3, [r7, #24]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d102      	bne.n	8017b64 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b62:	e05d      	b.n	8017c20 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017b64:	69bb      	ldr	r3, [r7, #24]
 8017b66:	895b      	ldrh	r3, [r3, #10]
 8017b68:	2b1b      	cmp	r3, #27
 8017b6a:	d806      	bhi.n	8017b7a <etharp_raw+0x56>
 8017b6c:	4b2e      	ldr	r3, [pc, #184]	; (8017c28 <etharp_raw+0x104>)
 8017b6e:	f240 4262 	movw	r2, #1122	; 0x462
 8017b72:	4930      	ldr	r1, [pc, #192]	; (8017c34 <etharp_raw+0x110>)
 8017b74:	482e      	ldr	r0, [pc, #184]	; (8017c30 <etharp_raw+0x10c>)
 8017b76:	f001 ff1d 	bl	80199b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	685b      	ldr	r3, [r3, #4]
 8017b7e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017b80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7f4 fd08 	bl	800c598 <lwip_htons>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	697b      	ldr	r3, [r7, #20]
 8017b8e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017b96:	2b06      	cmp	r3, #6
 8017b98:	d006      	beq.n	8017ba8 <etharp_raw+0x84>
 8017b9a:	4b23      	ldr	r3, [pc, #140]	; (8017c28 <etharp_raw+0x104>)
 8017b9c:	f240 4269 	movw	r2, #1129	; 0x469
 8017ba0:	4925      	ldr	r1, [pc, #148]	; (8017c38 <etharp_raw+0x114>)
 8017ba2:	4823      	ldr	r0, [pc, #140]	; (8017c30 <etharp_raw+0x10c>)
 8017ba4:	f001 ff06 	bl	80199b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	3308      	adds	r3, #8
 8017bac:	2206      	movs	r2, #6
 8017bae:	6839      	ldr	r1, [r7, #0]
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f002 f805 	bl	8019bc0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	3312      	adds	r3, #18
 8017bba:	2206      	movs	r2, #6
 8017bbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f001 fffe 	bl	8019bc0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017bc4:	697b      	ldr	r3, [r7, #20]
 8017bc6:	330e      	adds	r3, #14
 8017bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bca:	6812      	ldr	r2, [r2, #0]
 8017bcc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	3318      	adds	r3, #24
 8017bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bd4:	6812      	ldr	r2, [r2, #0]
 8017bd6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017bd8:	697b      	ldr	r3, [r7, #20]
 8017bda:	2200      	movs	r2, #0
 8017bdc:	701a      	strb	r2, [r3, #0]
 8017bde:	2200      	movs	r2, #0
 8017be0:	f042 0201 	orr.w	r2, r2, #1
 8017be4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	2200      	movs	r2, #0
 8017bea:	f042 0208 	orr.w	r2, r2, #8
 8017bee:	709a      	strb	r2, [r3, #2]
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	2206      	movs	r2, #6
 8017bf8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017bfa:	697b      	ldr	r3, [r7, #20]
 8017bfc:	2204      	movs	r2, #4
 8017bfe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017c00:	f640 0306 	movw	r3, #2054	; 0x806
 8017c04:	9300      	str	r3, [sp, #0]
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	68ba      	ldr	r2, [r7, #8]
 8017c0a:	69b9      	ldr	r1, [r7, #24]
 8017c0c:	68f8      	ldr	r0, [r7, #12]
 8017c0e:	f001 fb99 	bl	8019344 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017c12:	69b8      	ldr	r0, [r7, #24]
 8017c14:	f7f6 f928 	bl	800de68 <pbuf_free>
  p = NULL;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017c20:	4618      	mov	r0, r3
 8017c22:	3720      	adds	r7, #32
 8017c24:	46bd      	mov	sp, r7
 8017c26:	bd80      	pop	{r7, pc}
 8017c28:	0801d3c8 	.word	0x0801d3c8
 8017c2c:	0801d518 	.word	0x0801d518
 8017c30:	0801d440 	.word	0x0801d440
 8017c34:	0801d5c8 	.word	0x0801d5c8
 8017c38:	0801d5fc 	.word	0x0801d5fc

08017c3c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	b088      	sub	sp, #32
 8017c40:	af04      	add	r7, sp, #16
 8017c42:	60f8      	str	r0, [r7, #12]
 8017c44:	60b9      	str	r1, [r7, #8]
 8017c46:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c48:	68fb      	ldr	r3, [r7, #12]
 8017c4a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017c58:	2201      	movs	r2, #1
 8017c5a:	9203      	str	r2, [sp, #12]
 8017c5c:	68ba      	ldr	r2, [r7, #8]
 8017c5e:	9202      	str	r2, [sp, #8]
 8017c60:	4a06      	ldr	r2, [pc, #24]	; (8017c7c <etharp_request_dst+0x40>)
 8017c62:	9201      	str	r2, [sp, #4]
 8017c64:	9300      	str	r3, [sp, #0]
 8017c66:	4603      	mov	r3, r0
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	68f8      	ldr	r0, [r7, #12]
 8017c6c:	f7ff ff5a 	bl	8017b24 <etharp_raw>
 8017c70:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3710      	adds	r7, #16
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801ff28 	.word	0x0801ff28

08017c80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b082      	sub	sp, #8
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017c8a:	4a05      	ldr	r2, [pc, #20]	; (8017ca0 <etharp_request+0x20>)
 8017c8c:	6839      	ldr	r1, [r7, #0]
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f7ff ffd4 	bl	8017c3c <etharp_request_dst>
 8017c94:	4603      	mov	r3, r0
}
 8017c96:	4618      	mov	r0, r3
 8017c98:	3708      	adds	r7, #8
 8017c9a:	46bd      	mov	sp, r7
 8017c9c:	bd80      	pop	{r7, pc}
 8017c9e:	bf00      	nop
 8017ca0:	0801ff20 	.word	0x0801ff20

08017ca4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b08e      	sub	sp, #56	; 0x38
 8017ca8:	af04      	add	r7, sp, #16
 8017caa:	6078      	str	r0, [r7, #4]
 8017cac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017cae:	4b79      	ldr	r3, [pc, #484]	; (8017e94 <icmp_input+0x1f0>)
 8017cb0:	689b      	ldr	r3, [r3, #8]
 8017cb2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb6:	781b      	ldrb	r3, [r3, #0]
 8017cb8:	f003 030f 	and.w	r3, r3, #15
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	b2db      	uxtb	r3, r3
 8017cc2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cc6:	2b13      	cmp	r3, #19
 8017cc8:	f240 80cd 	bls.w	8017e66 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	895b      	ldrh	r3, [r3, #10]
 8017cd0:	2b03      	cmp	r3, #3
 8017cd2:	f240 80ca 	bls.w	8017e6a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017ce0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	f000 80b7 	beq.w	8017e58 <icmp_input+0x1b4>
 8017cea:	2b08      	cmp	r3, #8
 8017cec:	f040 80b7 	bne.w	8017e5e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017cf0:	4b69      	ldr	r3, [pc, #420]	; (8017e98 <icmp_input+0x1f4>)
 8017cf2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017cf4:	4b67      	ldr	r3, [pc, #412]	; (8017e94 <icmp_input+0x1f0>)
 8017cf6:	695b      	ldr	r3, [r3, #20]
 8017cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017cfc:	2be0      	cmp	r3, #224	; 0xe0
 8017cfe:	f000 80bb 	beq.w	8017e78 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017d02:	4b64      	ldr	r3, [pc, #400]	; (8017e94 <icmp_input+0x1f0>)
 8017d04:	695b      	ldr	r3, [r3, #20]
 8017d06:	4a63      	ldr	r2, [pc, #396]	; (8017e94 <icmp_input+0x1f0>)
 8017d08:	6812      	ldr	r2, [r2, #0]
 8017d0a:	4611      	mov	r1, r2
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f000 fc0b 	bl	8018528 <ip4_addr_isbroadcast_u32>
 8017d12:	4603      	mov	r3, r0
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	f040 80b1 	bne.w	8017e7c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	891b      	ldrh	r3, [r3, #8]
 8017d1e:	2b07      	cmp	r3, #7
 8017d20:	f240 80a5 	bls.w	8017e6e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d26:	330e      	adds	r3, #14
 8017d28:	4619      	mov	r1, r3
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7f6 f806 	bl	800dd3c <pbuf_add_header>
 8017d30:	4603      	mov	r3, r0
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d04b      	beq.n	8017dce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	891a      	ldrh	r2, [r3, #8]
 8017d3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d3c:	4413      	add	r3, r2
 8017d3e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	891b      	ldrh	r3, [r3, #8]
 8017d44:	8b7a      	ldrh	r2, [r7, #26]
 8017d46:	429a      	cmp	r2, r3
 8017d48:	f0c0 809a 	bcc.w	8017e80 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017d4c:	8b7b      	ldrh	r3, [r7, #26]
 8017d4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d52:	4619      	mov	r1, r3
 8017d54:	200e      	movs	r0, #14
 8017d56:	f7f5 fda3 	bl	800d8a0 <pbuf_alloc>
 8017d5a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017d5c:	697b      	ldr	r3, [r7, #20]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	f000 8090 	beq.w	8017e84 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	895b      	ldrh	r3, [r3, #10]
 8017d68:	461a      	mov	r2, r3
 8017d6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d6c:	3308      	adds	r3, #8
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d203      	bcs.n	8017d7a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017d72:	6978      	ldr	r0, [r7, #20]
 8017d74:	f7f6 f878 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017d78:	e085      	b.n	8017e86 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	685b      	ldr	r3, [r3, #4]
 8017d7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017d82:	4618      	mov	r0, r3
 8017d84:	f001 ff1c 	bl	8019bc0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017d88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d8a:	4619      	mov	r1, r3
 8017d8c:	6978      	ldr	r0, [r7, #20]
 8017d8e:	f7f5 ffe5 	bl	800dd5c <pbuf_remove_header>
 8017d92:	4603      	mov	r3, r0
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d009      	beq.n	8017dac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017d98:	4b40      	ldr	r3, [pc, #256]	; (8017e9c <icmp_input+0x1f8>)
 8017d9a:	22b6      	movs	r2, #182	; 0xb6
 8017d9c:	4940      	ldr	r1, [pc, #256]	; (8017ea0 <icmp_input+0x1fc>)
 8017d9e:	4841      	ldr	r0, [pc, #260]	; (8017ea4 <icmp_input+0x200>)
 8017da0:	f001 fe08 	bl	80199b4 <iprintf>
          pbuf_free(r);
 8017da4:	6978      	ldr	r0, [r7, #20]
 8017da6:	f7f6 f85f 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017daa:	e06c      	b.n	8017e86 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017dac:	6879      	ldr	r1, [r7, #4]
 8017dae:	6978      	ldr	r0, [r7, #20]
 8017db0:	f7f6 f98e 	bl	800e0d0 <pbuf_copy>
 8017db4:	4603      	mov	r3, r0
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d003      	beq.n	8017dc2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017dba:	6978      	ldr	r0, [r7, #20]
 8017dbc:	f7f6 f854 	bl	800de68 <pbuf_free>
          goto icmperr;
 8017dc0:	e061      	b.n	8017e86 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017dc2:	6878      	ldr	r0, [r7, #4]
 8017dc4:	f7f6 f850 	bl	800de68 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017dc8:	697b      	ldr	r3, [r7, #20]
 8017dca:	607b      	str	r3, [r7, #4]
 8017dcc:	e00f      	b.n	8017dee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017dce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dd0:	330e      	adds	r3, #14
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	6878      	ldr	r0, [r7, #4]
 8017dd6:	f7f5 ffc1 	bl	800dd5c <pbuf_remove_header>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d006      	beq.n	8017dee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017de0:	4b2e      	ldr	r3, [pc, #184]	; (8017e9c <icmp_input+0x1f8>)
 8017de2:	22c7      	movs	r2, #199	; 0xc7
 8017de4:	4930      	ldr	r1, [pc, #192]	; (8017ea8 <icmp_input+0x204>)
 8017de6:	482f      	ldr	r0, [pc, #188]	; (8017ea4 <icmp_input+0x200>)
 8017de8:	f001 fde4 	bl	80199b4 <iprintf>
          goto icmperr;
 8017dec:	e04b      	b.n	8017e86 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	685b      	ldr	r3, [r3, #4]
 8017df2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017df6:	4619      	mov	r1, r3
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	f7f5 ff9f 	bl	800dd3c <pbuf_add_header>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d12b      	bne.n	8017e5c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	681a      	ldr	r2, [r3, #0]
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017e12:	4b20      	ldr	r3, [pc, #128]	; (8017e94 <icmp_input+0x1f0>)
 8017e14:	691a      	ldr	r2, [r3, #16]
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017e1a:	693b      	ldr	r3, [r7, #16]
 8017e1c:	2200      	movs	r2, #0
 8017e1e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017e20:	693b      	ldr	r3, [r7, #16]
 8017e22:	2200      	movs	r2, #0
 8017e24:	709a      	strb	r2, [r3, #2]
 8017e26:	2200      	movs	r2, #0
 8017e28:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	22ff      	movs	r2, #255	; 0xff
 8017e2e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	2200      	movs	r2, #0
 8017e34:	729a      	strb	r2, [r3, #10]
 8017e36:	2200      	movs	r2, #0
 8017e38:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	9302      	str	r3, [sp, #8]
 8017e3e:	2301      	movs	r3, #1
 8017e40:	9301      	str	r3, [sp, #4]
 8017e42:	2300      	movs	r3, #0
 8017e44:	9300      	str	r3, [sp, #0]
 8017e46:	23ff      	movs	r3, #255	; 0xff
 8017e48:	2200      	movs	r2, #0
 8017e4a:	69f9      	ldr	r1, [r7, #28]
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f000 fa93 	bl	8018378 <ip4_output_if>
 8017e52:	4603      	mov	r3, r0
 8017e54:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017e56:	e001      	b.n	8017e5c <icmp_input+0x1b8>
      break;
 8017e58:	bf00      	nop
 8017e5a:	e000      	b.n	8017e5e <icmp_input+0x1ba>
      break;
 8017e5c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	f7f6 f802 	bl	800de68 <pbuf_free>
  return;
 8017e64:	e013      	b.n	8017e8e <icmp_input+0x1ea>
    goto lenerr;
 8017e66:	bf00      	nop
 8017e68:	e002      	b.n	8017e70 <icmp_input+0x1cc>
    goto lenerr;
 8017e6a:	bf00      	nop
 8017e6c:	e000      	b.n	8017e70 <icmp_input+0x1cc>
        goto lenerr;
 8017e6e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7f5 fff9 	bl	800de68 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e76:	e00a      	b.n	8017e8e <icmp_input+0x1ea>
        goto icmperr;
 8017e78:	bf00      	nop
 8017e7a:	e004      	b.n	8017e86 <icmp_input+0x1e2>
        goto icmperr;
 8017e7c:	bf00      	nop
 8017e7e:	e002      	b.n	8017e86 <icmp_input+0x1e2>
          goto icmperr;
 8017e80:	bf00      	nop
 8017e82:	e000      	b.n	8017e86 <icmp_input+0x1e2>
          goto icmperr;
 8017e84:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f7f5 ffee 	bl	800de68 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017e8c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017e8e:	3728      	adds	r7, #40	; 0x28
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}
 8017e94:	200097a8 	.word	0x200097a8
 8017e98:	200097bc 	.word	0x200097bc
 8017e9c:	0801d640 	.word	0x0801d640
 8017ea0:	0801d678 	.word	0x0801d678
 8017ea4:	0801d6b0 	.word	0x0801d6b0
 8017ea8:	0801d6d8 	.word	0x0801d6d8

08017eac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b082      	sub	sp, #8
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017eb8:	78fb      	ldrb	r3, [r7, #3]
 8017eba:	461a      	mov	r2, r3
 8017ebc:	2103      	movs	r1, #3
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f000 f814 	bl	8017eec <icmp_send_response>
}
 8017ec4:	bf00      	nop
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}

08017ecc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b082      	sub	sp, #8
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	460b      	mov	r3, r1
 8017ed6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ed8:	78fb      	ldrb	r3, [r7, #3]
 8017eda:	461a      	mov	r2, r3
 8017edc:	210b      	movs	r1, #11
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	f000 f804 	bl	8017eec <icmp_send_response>
}
 8017ee4:	bf00      	nop
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}

08017eec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b08c      	sub	sp, #48	; 0x30
 8017ef0:	af04      	add	r7, sp, #16
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	460b      	mov	r3, r1
 8017ef6:	70fb      	strb	r3, [r7, #3]
 8017ef8:	4613      	mov	r3, r2
 8017efa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f00:	2124      	movs	r1, #36	; 0x24
 8017f02:	2022      	movs	r0, #34	; 0x22
 8017f04:	f7f5 fccc 	bl	800d8a0 <pbuf_alloc>
 8017f08:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017f0a:	69fb      	ldr	r3, [r7, #28]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d04c      	beq.n	8017faa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	895b      	ldrh	r3, [r3, #10]
 8017f14:	2b23      	cmp	r3, #35	; 0x23
 8017f16:	d806      	bhi.n	8017f26 <icmp_send_response+0x3a>
 8017f18:	4b26      	ldr	r3, [pc, #152]	; (8017fb4 <icmp_send_response+0xc8>)
 8017f1a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017f1e:	4926      	ldr	r1, [pc, #152]	; (8017fb8 <icmp_send_response+0xcc>)
 8017f20:	4826      	ldr	r0, [pc, #152]	; (8017fbc <icmp_send_response+0xd0>)
 8017f22:	f001 fd47 	bl	80199b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	685b      	ldr	r3, [r3, #4]
 8017f2a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017f2c:	69fb      	ldr	r3, [r7, #28]
 8017f2e:	685b      	ldr	r3, [r3, #4]
 8017f30:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017f32:	697b      	ldr	r3, [r7, #20]
 8017f34:	78fa      	ldrb	r2, [r7, #3]
 8017f36:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	78ba      	ldrb	r2, [r7, #2]
 8017f3c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	2200      	movs	r2, #0
 8017f42:	711a      	strb	r2, [r3, #4]
 8017f44:	2200      	movs	r2, #0
 8017f46:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	719a      	strb	r2, [r3, #6]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017f52:	69fb      	ldr	r3, [r7, #28]
 8017f54:	685b      	ldr	r3, [r3, #4]
 8017f56:	f103 0008 	add.w	r0, r3, #8
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	221c      	movs	r2, #28
 8017f60:	4619      	mov	r1, r3
 8017f62:	f001 fe2d 	bl	8019bc0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017f66:	69bb      	ldr	r3, [r7, #24]
 8017f68:	68db      	ldr	r3, [r3, #12]
 8017f6a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017f6c:	f107 030c 	add.w	r3, r7, #12
 8017f70:	4618      	mov	r0, r3
 8017f72:	f000 f825 	bl	8017fc0 <ip4_route>
 8017f76:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d011      	beq.n	8017fa2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017f7e:	697b      	ldr	r3, [r7, #20]
 8017f80:	2200      	movs	r2, #0
 8017f82:	709a      	strb	r2, [r3, #2]
 8017f84:	2200      	movs	r2, #0
 8017f86:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017f88:	f107 020c 	add.w	r2, r7, #12
 8017f8c:	693b      	ldr	r3, [r7, #16]
 8017f8e:	9302      	str	r3, [sp, #8]
 8017f90:	2301      	movs	r3, #1
 8017f92:	9301      	str	r3, [sp, #4]
 8017f94:	2300      	movs	r3, #0
 8017f96:	9300      	str	r3, [sp, #0]
 8017f98:	23ff      	movs	r3, #255	; 0xff
 8017f9a:	2100      	movs	r1, #0
 8017f9c:	69f8      	ldr	r0, [r7, #28]
 8017f9e:	f000 f9eb 	bl	8018378 <ip4_output_if>
  }
  pbuf_free(q);
 8017fa2:	69f8      	ldr	r0, [r7, #28]
 8017fa4:	f7f5 ff60 	bl	800de68 <pbuf_free>
 8017fa8:	e000      	b.n	8017fac <icmp_send_response+0xc0>
    return;
 8017faa:	bf00      	nop
}
 8017fac:	3720      	adds	r7, #32
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}
 8017fb2:	bf00      	nop
 8017fb4:	0801d640 	.word	0x0801d640
 8017fb8:	0801d70c 	.word	0x0801d70c
 8017fbc:	0801d6b0 	.word	0x0801d6b0

08017fc0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017fc0:	b480      	push	{r7}
 8017fc2:	b085      	sub	sp, #20
 8017fc4:	af00      	add	r7, sp, #0
 8017fc6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017fc8:	4b33      	ldr	r3, [pc, #204]	; (8018098 <ip4_route+0xd8>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	60fb      	str	r3, [r7, #12]
 8017fce:	e036      	b.n	801803e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017fd6:	f003 0301 	and.w	r3, r3, #1
 8017fda:	b2db      	uxtb	r3, r3
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d02b      	beq.n	8018038 <ip4_route+0x78>
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017fe6:	089b      	lsrs	r3, r3, #2
 8017fe8:	f003 0301 	and.w	r3, r3, #1
 8017fec:	b2db      	uxtb	r3, r3
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d022      	beq.n	8018038 <ip4_route+0x78>
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	3304      	adds	r3, #4
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d01d      	beq.n	8018038 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	3304      	adds	r3, #4
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	405a      	eors	r2, r3
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	3308      	adds	r3, #8
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	4013      	ands	r3, r2
 8018010:	2b00      	cmp	r3, #0
 8018012:	d101      	bne.n	8018018 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	e038      	b.n	801808a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801801e:	f003 0302 	and.w	r3, r3, #2
 8018022:	2b00      	cmp	r3, #0
 8018024:	d108      	bne.n	8018038 <ip4_route+0x78>
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	681a      	ldr	r2, [r3, #0]
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	330c      	adds	r3, #12
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	429a      	cmp	r2, r3
 8018032:	d101      	bne.n	8018038 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	e028      	b.n	801808a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	60fb      	str	r3, [r7, #12]
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1c5      	bne.n	8017fd0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018044:	4b15      	ldr	r3, [pc, #84]	; (801809c <ip4_route+0xdc>)
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	2b00      	cmp	r3, #0
 801804a:	d01a      	beq.n	8018082 <ip4_route+0xc2>
 801804c:	4b13      	ldr	r3, [pc, #76]	; (801809c <ip4_route+0xdc>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	2b00      	cmp	r3, #0
 801805a:	d012      	beq.n	8018082 <ip4_route+0xc2>
 801805c:	4b0f      	ldr	r3, [pc, #60]	; (801809c <ip4_route+0xdc>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018064:	f003 0304 	and.w	r3, r3, #4
 8018068:	2b00      	cmp	r3, #0
 801806a:	d00a      	beq.n	8018082 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801806c:	4b0b      	ldr	r3, [pc, #44]	; (801809c <ip4_route+0xdc>)
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	3304      	adds	r3, #4
 8018072:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018074:	2b00      	cmp	r3, #0
 8018076:	d004      	beq.n	8018082 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	b2db      	uxtb	r3, r3
 801807e:	2b7f      	cmp	r3, #127	; 0x7f
 8018080:	d101      	bne.n	8018086 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018082:	2300      	movs	r3, #0
 8018084:	e001      	b.n	801808a <ip4_route+0xca>
  }

  return netif_default;
 8018086:	4b05      	ldr	r3, [pc, #20]	; (801809c <ip4_route+0xdc>)
 8018088:	681b      	ldr	r3, [r3, #0]
}
 801808a:	4618      	mov	r0, r3
 801808c:	3714      	adds	r7, #20
 801808e:	46bd      	mov	sp, r7
 8018090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018094:	4770      	bx	lr
 8018096:	bf00      	nop
 8018098:	2000cf10 	.word	0x2000cf10
 801809c:	2000cf14 	.word	0x2000cf14

080180a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b082      	sub	sp, #8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80180ae:	f003 0301 	and.w	r3, r3, #1
 80180b2:	b2db      	uxtb	r3, r3
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d016      	beq.n	80180e6 <ip4_input_accept+0x46>
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	3304      	adds	r3, #4
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d011      	beq.n	80180e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180c2:	4b0b      	ldr	r3, [pc, #44]	; (80180f0 <ip4_input_accept+0x50>)
 80180c4:	695a      	ldr	r2, [r3, #20]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	3304      	adds	r3, #4
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d008      	beq.n	80180e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80180d0:	4b07      	ldr	r3, [pc, #28]	; (80180f0 <ip4_input_accept+0x50>)
 80180d2:	695b      	ldr	r3, [r3, #20]
 80180d4:	6879      	ldr	r1, [r7, #4]
 80180d6:	4618      	mov	r0, r3
 80180d8:	f000 fa26 	bl	8018528 <ip4_addr_isbroadcast_u32>
 80180dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d001      	beq.n	80180e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80180e2:	2301      	movs	r3, #1
 80180e4:	e000      	b.n	80180e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80180e6:	2300      	movs	r3, #0
}
 80180e8:	4618      	mov	r0, r3
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	200097a8 	.word	0x200097a8

080180f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b088      	sub	sp, #32
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
 80180fc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80180fe:	2301      	movs	r3, #1
 8018100:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	685b      	ldr	r3, [r3, #4]
 8018106:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	091b      	lsrs	r3, r3, #4
 801810e:	b2db      	uxtb	r3, r3
 8018110:	2b04      	cmp	r3, #4
 8018112:	d004      	beq.n	801811e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7f5 fea7 	bl	800de68 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801811a:	2300      	movs	r3, #0
 801811c:	e123      	b.n	8018366 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	781b      	ldrb	r3, [r3, #0]
 8018122:	f003 030f 	and.w	r3, r3, #15
 8018126:	b2db      	uxtb	r3, r3
 8018128:	009b      	lsls	r3, r3, #2
 801812a:	b2db      	uxtb	r3, r3
 801812c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801812e:	69fb      	ldr	r3, [r7, #28]
 8018130:	885b      	ldrh	r3, [r3, #2]
 8018132:	b29b      	uxth	r3, r3
 8018134:	4618      	mov	r0, r3
 8018136:	f7f4 fa2f 	bl	800c598 <lwip_htons>
 801813a:	4603      	mov	r3, r0
 801813c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	891b      	ldrh	r3, [r3, #8]
 8018142:	8a3a      	ldrh	r2, [r7, #16]
 8018144:	429a      	cmp	r2, r3
 8018146:	d204      	bcs.n	8018152 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018148:	8a3b      	ldrh	r3, [r7, #16]
 801814a:	4619      	mov	r1, r3
 801814c:	6878      	ldr	r0, [r7, #4]
 801814e:	f7f5 fd05 	bl	800db5c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	895b      	ldrh	r3, [r3, #10]
 8018156:	8a7a      	ldrh	r2, [r7, #18]
 8018158:	429a      	cmp	r2, r3
 801815a:	d807      	bhi.n	801816c <ip4_input+0x78>
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	891b      	ldrh	r3, [r3, #8]
 8018160:	8a3a      	ldrh	r2, [r7, #16]
 8018162:	429a      	cmp	r2, r3
 8018164:	d802      	bhi.n	801816c <ip4_input+0x78>
 8018166:	8a7b      	ldrh	r3, [r7, #18]
 8018168:	2b13      	cmp	r3, #19
 801816a:	d804      	bhi.n	8018176 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801816c:	6878      	ldr	r0, [r7, #4]
 801816e:	f7f5 fe7b 	bl	800de68 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018172:	2300      	movs	r3, #0
 8018174:	e0f7      	b.n	8018366 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018176:	69fb      	ldr	r3, [r7, #28]
 8018178:	691b      	ldr	r3, [r3, #16]
 801817a:	4a7d      	ldr	r2, [pc, #500]	; (8018370 <ip4_input+0x27c>)
 801817c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801817e:	69fb      	ldr	r3, [r7, #28]
 8018180:	68db      	ldr	r3, [r3, #12]
 8018182:	4a7b      	ldr	r2, [pc, #492]	; (8018370 <ip4_input+0x27c>)
 8018184:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018186:	4b7a      	ldr	r3, [pc, #488]	; (8018370 <ip4_input+0x27c>)
 8018188:	695b      	ldr	r3, [r3, #20]
 801818a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801818e:	2be0      	cmp	r3, #224	; 0xe0
 8018190:	d112      	bne.n	80181b8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018192:	683b      	ldr	r3, [r7, #0]
 8018194:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018198:	f003 0301 	and.w	r3, r3, #1
 801819c:	b2db      	uxtb	r3, r3
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d007      	beq.n	80181b2 <ip4_input+0xbe>
 80181a2:	683b      	ldr	r3, [r7, #0]
 80181a4:	3304      	adds	r3, #4
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d002      	beq.n	80181b2 <ip4_input+0xbe>
      netif = inp;
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	61bb      	str	r3, [r7, #24]
 80181b0:	e02a      	b.n	8018208 <ip4_input+0x114>
    } else {
      netif = NULL;
 80181b2:	2300      	movs	r3, #0
 80181b4:	61bb      	str	r3, [r7, #24]
 80181b6:	e027      	b.n	8018208 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80181b8:	6838      	ldr	r0, [r7, #0]
 80181ba:	f7ff ff71 	bl	80180a0 <ip4_input_accept>
 80181be:	4603      	mov	r3, r0
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d002      	beq.n	80181ca <ip4_input+0xd6>
      netif = inp;
 80181c4:	683b      	ldr	r3, [r7, #0]
 80181c6:	61bb      	str	r3, [r7, #24]
 80181c8:	e01e      	b.n	8018208 <ip4_input+0x114>
    } else {
      netif = NULL;
 80181ca:	2300      	movs	r3, #0
 80181cc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80181ce:	4b68      	ldr	r3, [pc, #416]	; (8018370 <ip4_input+0x27c>)
 80181d0:	695b      	ldr	r3, [r3, #20]
 80181d2:	b2db      	uxtb	r3, r3
 80181d4:	2b7f      	cmp	r3, #127	; 0x7f
 80181d6:	d017      	beq.n	8018208 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80181d8:	4b66      	ldr	r3, [pc, #408]	; (8018374 <ip4_input+0x280>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	61bb      	str	r3, [r7, #24]
 80181de:	e00e      	b.n	80181fe <ip4_input+0x10a>
          if (netif == inp) {
 80181e0:	69ba      	ldr	r2, [r7, #24]
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	429a      	cmp	r2, r3
 80181e6:	d006      	beq.n	80181f6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80181e8:	69b8      	ldr	r0, [r7, #24]
 80181ea:	f7ff ff59 	bl	80180a0 <ip4_input_accept>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d108      	bne.n	8018206 <ip4_input+0x112>
 80181f4:	e000      	b.n	80181f8 <ip4_input+0x104>
            continue;
 80181f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80181f8:	69bb      	ldr	r3, [r7, #24]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	61bb      	str	r3, [r7, #24]
 80181fe:	69bb      	ldr	r3, [r7, #24]
 8018200:	2b00      	cmp	r3, #0
 8018202:	d1ed      	bne.n	80181e0 <ip4_input+0xec>
 8018204:	e000      	b.n	8018208 <ip4_input+0x114>
            break;
 8018206:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018208:	69bb      	ldr	r3, [r7, #24]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d111      	bne.n	8018232 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	7a5b      	ldrb	r3, [r3, #9]
 8018212:	2b11      	cmp	r3, #17
 8018214:	d10d      	bne.n	8018232 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018216:	8a7b      	ldrh	r3, [r7, #18]
 8018218:	69fa      	ldr	r2, [r7, #28]
 801821a:	4413      	add	r3, r2
 801821c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	885b      	ldrh	r3, [r3, #2]
 8018222:	b29b      	uxth	r3, r3
 8018224:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018228:	d103      	bne.n	8018232 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801822e:	2300      	movs	r3, #0
 8018230:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d017      	beq.n	8018268 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018238:	4b4d      	ldr	r3, [pc, #308]	; (8018370 <ip4_input+0x27c>)
 801823a:	691b      	ldr	r3, [r3, #16]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d013      	beq.n	8018268 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018240:	4b4b      	ldr	r3, [pc, #300]	; (8018370 <ip4_input+0x27c>)
 8018242:	691b      	ldr	r3, [r3, #16]
 8018244:	6839      	ldr	r1, [r7, #0]
 8018246:	4618      	mov	r0, r3
 8018248:	f000 f96e 	bl	8018528 <ip4_addr_isbroadcast_u32>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	d105      	bne.n	801825e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018252:	4b47      	ldr	r3, [pc, #284]	; (8018370 <ip4_input+0x27c>)
 8018254:	691b      	ldr	r3, [r3, #16]
 8018256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801825a:	2be0      	cmp	r3, #224	; 0xe0
 801825c:	d104      	bne.n	8018268 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f7f5 fe02 	bl	800de68 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018264:	2300      	movs	r3, #0
 8018266:	e07e      	b.n	8018366 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018268:	69bb      	ldr	r3, [r7, #24]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d104      	bne.n	8018278 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f7f5 fdfa 	bl	800de68 <pbuf_free>
    return ERR_OK;
 8018274:	2300      	movs	r3, #0
 8018276:	e076      	b.n	8018366 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018278:	69fb      	ldr	r3, [r7, #28]
 801827a:	88db      	ldrh	r3, [r3, #6]
 801827c:	b29b      	uxth	r3, r3
 801827e:	461a      	mov	r2, r3
 8018280:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018284:	4013      	ands	r3, r2
 8018286:	2b00      	cmp	r3, #0
 8018288:	d00b      	beq.n	80182a2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801828a:	6878      	ldr	r0, [r7, #4]
 801828c:	f000 fc92 	bl	8018bb4 <ip4_reass>
 8018290:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d101      	bne.n	801829c <ip4_input+0x1a8>
      return ERR_OK;
 8018298:	2300      	movs	r3, #0
 801829a:	e064      	b.n	8018366 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	685b      	ldr	r3, [r3, #4]
 80182a0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80182a2:	4a33      	ldr	r2, [pc, #204]	; (8018370 <ip4_input+0x27c>)
 80182a4:	69bb      	ldr	r3, [r7, #24]
 80182a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80182a8:	4a31      	ldr	r2, [pc, #196]	; (8018370 <ip4_input+0x27c>)
 80182aa:	683b      	ldr	r3, [r7, #0]
 80182ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80182ae:	4a30      	ldr	r2, [pc, #192]	; (8018370 <ip4_input+0x27c>)
 80182b0:	69fb      	ldr	r3, [r7, #28]
 80182b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80182b4:	69fb      	ldr	r3, [r7, #28]
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	f003 030f 	and.w	r3, r3, #15
 80182bc:	b2db      	uxtb	r3, r3
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	4b2a      	ldr	r3, [pc, #168]	; (8018370 <ip4_input+0x27c>)
 80182c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80182c8:	8a7b      	ldrh	r3, [r7, #18]
 80182ca:	4619      	mov	r1, r3
 80182cc:	6878      	ldr	r0, [r7, #4]
 80182ce:	f7f5 fd45 	bl	800dd5c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80182d2:	69fb      	ldr	r3, [r7, #28]
 80182d4:	7a5b      	ldrb	r3, [r3, #9]
 80182d6:	2b11      	cmp	r3, #17
 80182d8:	d006      	beq.n	80182e8 <ip4_input+0x1f4>
 80182da:	2b11      	cmp	r3, #17
 80182dc:	dc13      	bgt.n	8018306 <ip4_input+0x212>
 80182de:	2b01      	cmp	r3, #1
 80182e0:	d00c      	beq.n	80182fc <ip4_input+0x208>
 80182e2:	2b06      	cmp	r3, #6
 80182e4:	d005      	beq.n	80182f2 <ip4_input+0x1fe>
 80182e6:	e00e      	b.n	8018306 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80182e8:	6839      	ldr	r1, [r7, #0]
 80182ea:	6878      	ldr	r0, [r7, #4]
 80182ec:	f7fc fae8 	bl	80148c0 <udp_input>
        break;
 80182f0:	e026      	b.n	8018340 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80182f2:	6839      	ldr	r1, [r7, #0]
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7f7 fea1 	bl	801003c <tcp_input>
        break;
 80182fa:	e021      	b.n	8018340 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80182fc:	6839      	ldr	r1, [r7, #0]
 80182fe:	6878      	ldr	r0, [r7, #4]
 8018300:	f7ff fcd0 	bl	8017ca4 <icmp_input>
        break;
 8018304:	e01c      	b.n	8018340 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018306:	4b1a      	ldr	r3, [pc, #104]	; (8018370 <ip4_input+0x27c>)
 8018308:	695b      	ldr	r3, [r3, #20]
 801830a:	69b9      	ldr	r1, [r7, #24]
 801830c:	4618      	mov	r0, r3
 801830e:	f000 f90b 	bl	8018528 <ip4_addr_isbroadcast_u32>
 8018312:	4603      	mov	r3, r0
 8018314:	2b00      	cmp	r3, #0
 8018316:	d10f      	bne.n	8018338 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018318:	4b15      	ldr	r3, [pc, #84]	; (8018370 <ip4_input+0x27c>)
 801831a:	695b      	ldr	r3, [r3, #20]
 801831c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018320:	2be0      	cmp	r3, #224	; 0xe0
 8018322:	d009      	beq.n	8018338 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018328:	4619      	mov	r1, r3
 801832a:	6878      	ldr	r0, [r7, #4]
 801832c:	f7f5 fd89 	bl	800de42 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018330:	2102      	movs	r1, #2
 8018332:	6878      	ldr	r0, [r7, #4]
 8018334:	f7ff fdba 	bl	8017eac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018338:	6878      	ldr	r0, [r7, #4]
 801833a:	f7f5 fd95 	bl	800de68 <pbuf_free>
        break;
 801833e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018340:	4b0b      	ldr	r3, [pc, #44]	; (8018370 <ip4_input+0x27c>)
 8018342:	2200      	movs	r2, #0
 8018344:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018346:	4b0a      	ldr	r3, [pc, #40]	; (8018370 <ip4_input+0x27c>)
 8018348:	2200      	movs	r2, #0
 801834a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801834c:	4b08      	ldr	r3, [pc, #32]	; (8018370 <ip4_input+0x27c>)
 801834e:	2200      	movs	r2, #0
 8018350:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018352:	4b07      	ldr	r3, [pc, #28]	; (8018370 <ip4_input+0x27c>)
 8018354:	2200      	movs	r2, #0
 8018356:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018358:	4b05      	ldr	r3, [pc, #20]	; (8018370 <ip4_input+0x27c>)
 801835a:	2200      	movs	r2, #0
 801835c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801835e:	4b04      	ldr	r3, [pc, #16]	; (8018370 <ip4_input+0x27c>)
 8018360:	2200      	movs	r2, #0
 8018362:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018364:	2300      	movs	r3, #0
}
 8018366:	4618      	mov	r0, r3
 8018368:	3720      	adds	r7, #32
 801836a:	46bd      	mov	sp, r7
 801836c:	bd80      	pop	{r7, pc}
 801836e:	bf00      	nop
 8018370:	200097a8 	.word	0x200097a8
 8018374:	2000cf10 	.word	0x2000cf10

08018378 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b08a      	sub	sp, #40	; 0x28
 801837c:	af04      	add	r7, sp, #16
 801837e:	60f8      	str	r0, [r7, #12]
 8018380:	60b9      	str	r1, [r7, #8]
 8018382:	607a      	str	r2, [r7, #4]
 8018384:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d009      	beq.n	80183a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018390:	68bb      	ldr	r3, [r7, #8]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d003      	beq.n	801839e <ip4_output_if+0x26>
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d102      	bne.n	80183a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801839e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a0:	3304      	adds	r3, #4
 80183a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80183a4:	78fa      	ldrb	r2, [r7, #3]
 80183a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183a8:	9302      	str	r3, [sp, #8]
 80183aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80183ae:	9301      	str	r3, [sp, #4]
 80183b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80183b4:	9300      	str	r3, [sp, #0]
 80183b6:	4613      	mov	r3, r2
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	6979      	ldr	r1, [r7, #20]
 80183bc:	68f8      	ldr	r0, [r7, #12]
 80183be:	f000 f805 	bl	80183cc <ip4_output_if_src>
 80183c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	3718      	adds	r7, #24
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}

080183cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b088      	sub	sp, #32
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
 80183d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	7b9b      	ldrb	r3, [r3, #14]
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d006      	beq.n	80183f0 <ip4_output_if_src+0x24>
 80183e2:	4b4b      	ldr	r3, [pc, #300]	; (8018510 <ip4_output_if_src+0x144>)
 80183e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80183e8:	494a      	ldr	r1, [pc, #296]	; (8018514 <ip4_output_if_src+0x148>)
 80183ea:	484b      	ldr	r0, [pc, #300]	; (8018518 <ip4_output_if_src+0x14c>)
 80183ec:	f001 fae2 	bl	80199b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d060      	beq.n	80184b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80183f6:	2314      	movs	r3, #20
 80183f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80183fa:	2114      	movs	r1, #20
 80183fc:	68f8      	ldr	r0, [r7, #12]
 80183fe:	f7f5 fc9d 	bl	800dd3c <pbuf_add_header>
 8018402:	4603      	mov	r3, r0
 8018404:	2b00      	cmp	r3, #0
 8018406:	d002      	beq.n	801840e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018408:	f06f 0301 	mvn.w	r3, #1
 801840c:	e07c      	b.n	8018508 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	685b      	ldr	r3, [r3, #4]
 8018412:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	895b      	ldrh	r3, [r3, #10]
 8018418:	2b13      	cmp	r3, #19
 801841a:	d806      	bhi.n	801842a <ip4_output_if_src+0x5e>
 801841c:	4b3c      	ldr	r3, [pc, #240]	; (8018510 <ip4_output_if_src+0x144>)
 801841e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018422:	493e      	ldr	r1, [pc, #248]	; (801851c <ip4_output_if_src+0x150>)
 8018424:	483c      	ldr	r0, [pc, #240]	; (8018518 <ip4_output_if_src+0x14c>)
 8018426:	f001 fac5 	bl	80199b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	78fa      	ldrb	r2, [r7, #3]
 801842e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018436:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681a      	ldr	r2, [r3, #0]
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018440:	8b7b      	ldrh	r3, [r7, #26]
 8018442:	089b      	lsrs	r3, r3, #2
 8018444:	b29b      	uxth	r3, r3
 8018446:	b2db      	uxtb	r3, r3
 8018448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801844c:	b2da      	uxtb	r2, r3
 801844e:	69fb      	ldr	r3, [r7, #28]
 8018450:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018458:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	891b      	ldrh	r3, [r3, #8]
 801845e:	4618      	mov	r0, r3
 8018460:	f7f4 f89a 	bl	800c598 <lwip_htons>
 8018464:	4603      	mov	r3, r0
 8018466:	461a      	mov	r2, r3
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801846c:	69fb      	ldr	r3, [r7, #28]
 801846e:	2200      	movs	r2, #0
 8018470:	719a      	strb	r2, [r3, #6]
 8018472:	2200      	movs	r2, #0
 8018474:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018476:	4b2a      	ldr	r3, [pc, #168]	; (8018520 <ip4_output_if_src+0x154>)
 8018478:	881b      	ldrh	r3, [r3, #0]
 801847a:	4618      	mov	r0, r3
 801847c:	f7f4 f88c 	bl	800c598 <lwip_htons>
 8018480:	4603      	mov	r3, r0
 8018482:	461a      	mov	r2, r3
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018488:	4b25      	ldr	r3, [pc, #148]	; (8018520 <ip4_output_if_src+0x154>)
 801848a:	881b      	ldrh	r3, [r3, #0]
 801848c:	3301      	adds	r3, #1
 801848e:	b29a      	uxth	r2, r3
 8018490:	4b23      	ldr	r3, [pc, #140]	; (8018520 <ip4_output_if_src+0x154>)
 8018492:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d104      	bne.n	80184a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801849a:	4b22      	ldr	r3, [pc, #136]	; (8018524 <ip4_output_if_src+0x158>)
 801849c:	681a      	ldr	r2, [r3, #0]
 801849e:	69fb      	ldr	r3, [r7, #28]
 80184a0:	60da      	str	r2, [r3, #12]
 80184a2:	e003      	b.n	80184ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	681a      	ldr	r2, [r3, #0]
 80184a8:	69fb      	ldr	r3, [r7, #28]
 80184aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80184ac:	69fb      	ldr	r3, [r7, #28]
 80184ae:	2200      	movs	r2, #0
 80184b0:	729a      	strb	r2, [r3, #10]
 80184b2:	2200      	movs	r2, #0
 80184b4:	72da      	strb	r2, [r3, #11]
 80184b6:	e00f      	b.n	80184d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	895b      	ldrh	r3, [r3, #10]
 80184bc:	2b13      	cmp	r3, #19
 80184be:	d802      	bhi.n	80184c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184c0:	f06f 0301 	mvn.w	r3, #1
 80184c4:	e020      	b.n	8018508 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	691b      	ldr	r3, [r3, #16]
 80184d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80184d2:	f107 0314 	add.w	r3, r7, #20
 80184d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d00c      	beq.n	80184fa <ip4_output_if_src+0x12e>
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	891a      	ldrh	r2, [r3, #8]
 80184e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184e8:	429a      	cmp	r2, r3
 80184ea:	d906      	bls.n	80184fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80184ec:	687a      	ldr	r2, [r7, #4]
 80184ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80184f0:	68f8      	ldr	r0, [r7, #12]
 80184f2:	f000 fd53 	bl	8018f9c <ip4_frag>
 80184f6:	4603      	mov	r3, r0
 80184f8:	e006      	b.n	8018508 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80184fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184fc:	695b      	ldr	r3, [r3, #20]
 80184fe:	687a      	ldr	r2, [r7, #4]
 8018500:	68f9      	ldr	r1, [r7, #12]
 8018502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018504:	4798      	blx	r3
 8018506:	4603      	mov	r3, r0
}
 8018508:	4618      	mov	r0, r3
 801850a:	3720      	adds	r7, #32
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}
 8018510:	0801d738 	.word	0x0801d738
 8018514:	0801d76c 	.word	0x0801d76c
 8018518:	0801d778 	.word	0x0801d778
 801851c:	0801d7a0 	.word	0x0801d7a0
 8018520:	2000d0a2 	.word	0x2000d0a2
 8018524:	0801ff18 	.word	0x0801ff18

08018528 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018528:	b480      	push	{r7}
 801852a:	b085      	sub	sp, #20
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801853c:	d002      	beq.n	8018544 <ip4_addr_isbroadcast_u32+0x1c>
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d101      	bne.n	8018548 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018544:	2301      	movs	r3, #1
 8018546:	e02a      	b.n	801859e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801854e:	f003 0302 	and.w	r3, r3, #2
 8018552:	2b00      	cmp	r3, #0
 8018554:	d101      	bne.n	801855a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018556:	2300      	movs	r3, #0
 8018558:	e021      	b.n	801859e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801855a:	683b      	ldr	r3, [r7, #0]
 801855c:	3304      	adds	r3, #4
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	687a      	ldr	r2, [r7, #4]
 8018562:	429a      	cmp	r2, r3
 8018564:	d101      	bne.n	801856a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018566:	2300      	movs	r3, #0
 8018568:	e019      	b.n	801859e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801856a:	68fa      	ldr	r2, [r7, #12]
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	3304      	adds	r3, #4
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	405a      	eors	r2, r3
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	3308      	adds	r3, #8
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4013      	ands	r3, r2
 801857c:	2b00      	cmp	r3, #0
 801857e:	d10d      	bne.n	801859c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018580:	683b      	ldr	r3, [r7, #0]
 8018582:	3308      	adds	r3, #8
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	43da      	mvns	r2, r3
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	3308      	adds	r3, #8
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018594:	429a      	cmp	r2, r3
 8018596:	d101      	bne.n	801859c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018598:	2301      	movs	r3, #1
 801859a:	e000      	b.n	801859e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801859c:	2300      	movs	r3, #0
  }
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3714      	adds	r7, #20
 80185a2:	46bd      	mov	sp, r7
 80185a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a8:	4770      	bx	lr
	...

080185ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b084      	sub	sp, #16
 80185b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80185b2:	2300      	movs	r3, #0
 80185b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80185b6:	4b12      	ldr	r3, [pc, #72]	; (8018600 <ip_reass_tmr+0x54>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80185bc:	e018      	b.n	80185f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	7fdb      	ldrb	r3, [r3, #31]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d00b      	beq.n	80185de <ip_reass_tmr+0x32>
      r->timer--;
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	7fdb      	ldrb	r3, [r3, #31]
 80185ca:	3b01      	subs	r3, #1
 80185cc:	b2da      	uxtb	r2, r3
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	60fb      	str	r3, [r7, #12]
 80185dc:	e008      	b.n	80185f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80185e8:	68b9      	ldr	r1, [r7, #8]
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f000 f80a 	bl	8018604 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d1e3      	bne.n	80185be <ip_reass_tmr+0x12>
    }
  }
}
 80185f6:	bf00      	nop
 80185f8:	bf00      	nop
 80185fa:	3710      	adds	r7, #16
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	2000d0a4 	.word	0x2000d0a4

08018604 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b088      	sub	sp, #32
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801860e:	2300      	movs	r3, #0
 8018610:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018612:	683a      	ldr	r2, [r7, #0]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	429a      	cmp	r2, r3
 8018618:	d105      	bne.n	8018626 <ip_reass_free_complete_datagram+0x22>
 801861a:	4b45      	ldr	r3, [pc, #276]	; (8018730 <ip_reass_free_complete_datagram+0x12c>)
 801861c:	22ab      	movs	r2, #171	; 0xab
 801861e:	4945      	ldr	r1, [pc, #276]	; (8018734 <ip_reass_free_complete_datagram+0x130>)
 8018620:	4845      	ldr	r0, [pc, #276]	; (8018738 <ip_reass_free_complete_datagram+0x134>)
 8018622:	f001 f9c7 	bl	80199b4 <iprintf>
  if (prev != NULL) {
 8018626:	683b      	ldr	r3, [r7, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d00a      	beq.n	8018642 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801862c:	683b      	ldr	r3, [r7, #0]
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	687a      	ldr	r2, [r7, #4]
 8018632:	429a      	cmp	r2, r3
 8018634:	d005      	beq.n	8018642 <ip_reass_free_complete_datagram+0x3e>
 8018636:	4b3e      	ldr	r3, [pc, #248]	; (8018730 <ip_reass_free_complete_datagram+0x12c>)
 8018638:	22ad      	movs	r2, #173	; 0xad
 801863a:	4940      	ldr	r1, [pc, #256]	; (801873c <ip_reass_free_complete_datagram+0x138>)
 801863c:	483e      	ldr	r0, [pc, #248]	; (8018738 <ip_reass_free_complete_datagram+0x134>)
 801863e:	f001 f9b9 	bl	80199b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	685b      	ldr	r3, [r3, #4]
 8018646:	685b      	ldr	r3, [r3, #4]
 8018648:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801864a:	697b      	ldr	r3, [r7, #20]
 801864c:	889b      	ldrh	r3, [r3, #4]
 801864e:	b29b      	uxth	r3, r3
 8018650:	2b00      	cmp	r3, #0
 8018652:	d12a      	bne.n	80186aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	681a      	ldr	r2, [r3, #0]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018662:	69bb      	ldr	r3, [r7, #24]
 8018664:	6858      	ldr	r0, [r3, #4]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	3308      	adds	r3, #8
 801866a:	2214      	movs	r2, #20
 801866c:	4619      	mov	r1, r3
 801866e:	f001 faa7 	bl	8019bc0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018672:	2101      	movs	r1, #1
 8018674:	69b8      	ldr	r0, [r7, #24]
 8018676:	f7ff fc29 	bl	8017ecc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801867a:	69b8      	ldr	r0, [r7, #24]
 801867c:	f7f5 fc82 	bl	800df84 <pbuf_clen>
 8018680:	4603      	mov	r3, r0
 8018682:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018684:	8bfa      	ldrh	r2, [r7, #30]
 8018686:	8a7b      	ldrh	r3, [r7, #18]
 8018688:	4413      	add	r3, r2
 801868a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801868e:	db05      	blt.n	801869c <ip_reass_free_complete_datagram+0x98>
 8018690:	4b27      	ldr	r3, [pc, #156]	; (8018730 <ip_reass_free_complete_datagram+0x12c>)
 8018692:	22bc      	movs	r2, #188	; 0xbc
 8018694:	492a      	ldr	r1, [pc, #168]	; (8018740 <ip_reass_free_complete_datagram+0x13c>)
 8018696:	4828      	ldr	r0, [pc, #160]	; (8018738 <ip_reass_free_complete_datagram+0x134>)
 8018698:	f001 f98c 	bl	80199b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801869c:	8bfa      	ldrh	r2, [r7, #30]
 801869e:	8a7b      	ldrh	r3, [r7, #18]
 80186a0:	4413      	add	r3, r2
 80186a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80186a4:	69b8      	ldr	r0, [r7, #24]
 80186a6:	f7f5 fbdf 	bl	800de68 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80186b0:	e01f      	b.n	80186f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80186b2:	69bb      	ldr	r3, [r7, #24]
 80186b4:	685b      	ldr	r3, [r3, #4]
 80186b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80186b8:	69bb      	ldr	r3, [r7, #24]
 80186ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80186c2:	68f8      	ldr	r0, [r7, #12]
 80186c4:	f7f5 fc5e 	bl	800df84 <pbuf_clen>
 80186c8:	4603      	mov	r3, r0
 80186ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80186cc:	8bfa      	ldrh	r2, [r7, #30]
 80186ce:	8a7b      	ldrh	r3, [r7, #18]
 80186d0:	4413      	add	r3, r2
 80186d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186d6:	db05      	blt.n	80186e4 <ip_reass_free_complete_datagram+0xe0>
 80186d8:	4b15      	ldr	r3, [pc, #84]	; (8018730 <ip_reass_free_complete_datagram+0x12c>)
 80186da:	22cc      	movs	r2, #204	; 0xcc
 80186dc:	4918      	ldr	r1, [pc, #96]	; (8018740 <ip_reass_free_complete_datagram+0x13c>)
 80186de:	4816      	ldr	r0, [pc, #88]	; (8018738 <ip_reass_free_complete_datagram+0x134>)
 80186e0:	f001 f968 	bl	80199b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80186e4:	8bfa      	ldrh	r2, [r7, #30]
 80186e6:	8a7b      	ldrh	r3, [r7, #18]
 80186e8:	4413      	add	r3, r2
 80186ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80186ec:	68f8      	ldr	r0, [r7, #12]
 80186ee:	f7f5 fbbb 	bl	800de68 <pbuf_free>
  while (p != NULL) {
 80186f2:	69bb      	ldr	r3, [r7, #24]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d1dc      	bne.n	80186b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80186f8:	6839      	ldr	r1, [r7, #0]
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f000 f8c2 	bl	8018884 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018700:	4b10      	ldr	r3, [pc, #64]	; (8018744 <ip_reass_free_complete_datagram+0x140>)
 8018702:	881b      	ldrh	r3, [r3, #0]
 8018704:	8bfa      	ldrh	r2, [r7, #30]
 8018706:	429a      	cmp	r2, r3
 8018708:	d905      	bls.n	8018716 <ip_reass_free_complete_datagram+0x112>
 801870a:	4b09      	ldr	r3, [pc, #36]	; (8018730 <ip_reass_free_complete_datagram+0x12c>)
 801870c:	22d2      	movs	r2, #210	; 0xd2
 801870e:	490e      	ldr	r1, [pc, #56]	; (8018748 <ip_reass_free_complete_datagram+0x144>)
 8018710:	4809      	ldr	r0, [pc, #36]	; (8018738 <ip_reass_free_complete_datagram+0x134>)
 8018712:	f001 f94f 	bl	80199b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018716:	4b0b      	ldr	r3, [pc, #44]	; (8018744 <ip_reass_free_complete_datagram+0x140>)
 8018718:	881a      	ldrh	r2, [r3, #0]
 801871a:	8bfb      	ldrh	r3, [r7, #30]
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	b29a      	uxth	r2, r3
 8018720:	4b08      	ldr	r3, [pc, #32]	; (8018744 <ip_reass_free_complete_datagram+0x140>)
 8018722:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018724:	8bfb      	ldrh	r3, [r7, #30]
}
 8018726:	4618      	mov	r0, r3
 8018728:	3720      	adds	r7, #32
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop
 8018730:	0801d7d0 	.word	0x0801d7d0
 8018734:	0801d80c 	.word	0x0801d80c
 8018738:	0801d818 	.word	0x0801d818
 801873c:	0801d840 	.word	0x0801d840
 8018740:	0801d854 	.word	0x0801d854
 8018744:	2000d0a8 	.word	0x2000d0a8
 8018748:	0801d874 	.word	0x0801d874

0801874c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b08a      	sub	sp, #40	; 0x28
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
 8018754:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018756:	2300      	movs	r3, #0
 8018758:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801875e:	2300      	movs	r3, #0
 8018760:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018762:	2300      	movs	r3, #0
 8018764:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801876a:	4b28      	ldr	r3, [pc, #160]	; (801880c <ip_reass_remove_oldest_datagram+0xc0>)
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018770:	e030      	b.n	80187d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018774:	695a      	ldr	r2, [r3, #20]
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	68db      	ldr	r3, [r3, #12]
 801877a:	429a      	cmp	r2, r3
 801877c:	d10c      	bne.n	8018798 <ip_reass_remove_oldest_datagram+0x4c>
 801877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018780:	699a      	ldr	r2, [r3, #24]
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	691b      	ldr	r3, [r3, #16]
 8018786:	429a      	cmp	r2, r3
 8018788:	d106      	bne.n	8018798 <ip_reass_remove_oldest_datagram+0x4c>
 801878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878c:	899a      	ldrh	r2, [r3, #12]
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	889b      	ldrh	r3, [r3, #4]
 8018792:	b29b      	uxth	r3, r3
 8018794:	429a      	cmp	r2, r3
 8018796:	d014      	beq.n	80187c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	3301      	adds	r3, #1
 801879c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801879e:	6a3b      	ldr	r3, [r7, #32]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d104      	bne.n	80187ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80187a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	61bb      	str	r3, [r7, #24]
 80187ac:	e009      	b.n	80187c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80187ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187b0:	7fda      	ldrb	r2, [r3, #31]
 80187b2:	6a3b      	ldr	r3, [r7, #32]
 80187b4:	7fdb      	ldrb	r3, [r3, #31]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d803      	bhi.n	80187c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80187ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80187be:	69fb      	ldr	r3, [r7, #28]
 80187c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80187c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d001      	beq.n	80187ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80187ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80187ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80187d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d1cb      	bne.n	8018772 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80187da:	6a3b      	ldr	r3, [r7, #32]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d008      	beq.n	80187f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80187e0:	69b9      	ldr	r1, [r7, #24]
 80187e2:	6a38      	ldr	r0, [r7, #32]
 80187e4:	f7ff ff0e 	bl	8018604 <ip_reass_free_complete_datagram>
 80187e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80187ea:	697a      	ldr	r2, [r7, #20]
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	4413      	add	r3, r2
 80187f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80187f2:	697a      	ldr	r2, [r7, #20]
 80187f4:	683b      	ldr	r3, [r7, #0]
 80187f6:	429a      	cmp	r2, r3
 80187f8:	da02      	bge.n	8018800 <ip_reass_remove_oldest_datagram+0xb4>
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	2b01      	cmp	r3, #1
 80187fe:	dcac      	bgt.n	801875a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018800:	697b      	ldr	r3, [r7, #20]
}
 8018802:	4618      	mov	r0, r3
 8018804:	3728      	adds	r7, #40	; 0x28
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
 801880a:	bf00      	nop
 801880c:	2000d0a4 	.word	0x2000d0a4

08018810 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b084      	sub	sp, #16
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801881a:	2004      	movs	r0, #4
 801881c:	f7f4 fbfe 	bl	800d01c <memp_malloc>
 8018820:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d110      	bne.n	801884a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f7ff ff8e 	bl	801874c <ip_reass_remove_oldest_datagram>
 8018830:	4602      	mov	r2, r0
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	4293      	cmp	r3, r2
 8018836:	dc03      	bgt.n	8018840 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018838:	2004      	movs	r0, #4
 801883a:	f7f4 fbef 	bl	800d01c <memp_malloc>
 801883e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d101      	bne.n	801884a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018846:	2300      	movs	r3, #0
 8018848:	e016      	b.n	8018878 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801884a:	2220      	movs	r2, #32
 801884c:	2100      	movs	r1, #0
 801884e:	68f8      	ldr	r0, [r7, #12]
 8018850:	f001 f915 	bl	8019a7e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	220f      	movs	r2, #15
 8018858:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801885a:	4b09      	ldr	r3, [pc, #36]	; (8018880 <ip_reass_enqueue_new_datagram+0x70>)
 801885c:	681a      	ldr	r2, [r3, #0]
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018862:	4a07      	ldr	r2, [pc, #28]	; (8018880 <ip_reass_enqueue_new_datagram+0x70>)
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	3308      	adds	r3, #8
 801886c:	2214      	movs	r2, #20
 801886e:	6879      	ldr	r1, [r7, #4]
 8018870:	4618      	mov	r0, r3
 8018872:	f001 f9a5 	bl	8019bc0 <memcpy>
  return ipr;
 8018876:	68fb      	ldr	r3, [r7, #12]
}
 8018878:	4618      	mov	r0, r3
 801887a:	3710      	adds	r7, #16
 801887c:	46bd      	mov	sp, r7
 801887e:	bd80      	pop	{r7, pc}
 8018880:	2000d0a4 	.word	0x2000d0a4

08018884 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b082      	sub	sp, #8
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
 801888c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801888e:	4b10      	ldr	r3, [pc, #64]	; (80188d0 <ip_reass_dequeue_datagram+0x4c>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	687a      	ldr	r2, [r7, #4]
 8018894:	429a      	cmp	r2, r3
 8018896:	d104      	bne.n	80188a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	4a0c      	ldr	r2, [pc, #48]	; (80188d0 <ip_reass_dequeue_datagram+0x4c>)
 801889e:	6013      	str	r3, [r2, #0]
 80188a0:	e00d      	b.n	80188be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d106      	bne.n	80188b6 <ip_reass_dequeue_datagram+0x32>
 80188a8:	4b0a      	ldr	r3, [pc, #40]	; (80188d4 <ip_reass_dequeue_datagram+0x50>)
 80188aa:	f240 1245 	movw	r2, #325	; 0x145
 80188ae:	490a      	ldr	r1, [pc, #40]	; (80188d8 <ip_reass_dequeue_datagram+0x54>)
 80188b0:	480a      	ldr	r0, [pc, #40]	; (80188dc <ip_reass_dequeue_datagram+0x58>)
 80188b2:	f001 f87f 	bl	80199b4 <iprintf>
    prev->next = ipr->next;
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681a      	ldr	r2, [r3, #0]
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80188be:	6879      	ldr	r1, [r7, #4]
 80188c0:	2004      	movs	r0, #4
 80188c2:	f7f4 fc21 	bl	800d108 <memp_free>
}
 80188c6:	bf00      	nop
 80188c8:	3708      	adds	r7, #8
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	2000d0a4 	.word	0x2000d0a4
 80188d4:	0801d7d0 	.word	0x0801d7d0
 80188d8:	0801d898 	.word	0x0801d898
 80188dc:	0801d818 	.word	0x0801d818

080188e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b08c      	sub	sp, #48	; 0x30
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	60f8      	str	r0, [r7, #12]
 80188e8:	60b9      	str	r1, [r7, #8]
 80188ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80188ec:	2300      	movs	r3, #0
 80188ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80188f0:	2301      	movs	r3, #1
 80188f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	685b      	ldr	r3, [r3, #4]
 80188f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80188fa:	69fb      	ldr	r3, [r7, #28]
 80188fc:	885b      	ldrh	r3, [r3, #2]
 80188fe:	b29b      	uxth	r3, r3
 8018900:	4618      	mov	r0, r3
 8018902:	f7f3 fe49 	bl	800c598 <lwip_htons>
 8018906:	4603      	mov	r3, r0
 8018908:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801890a:	69fb      	ldr	r3, [r7, #28]
 801890c:	781b      	ldrb	r3, [r3, #0]
 801890e:	f003 030f 	and.w	r3, r3, #15
 8018912:	b2db      	uxtb	r3, r3
 8018914:	009b      	lsls	r3, r3, #2
 8018916:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018918:	7e7b      	ldrb	r3, [r7, #25]
 801891a:	b29b      	uxth	r3, r3
 801891c:	8b7a      	ldrh	r2, [r7, #26]
 801891e:	429a      	cmp	r2, r3
 8018920:	d202      	bcs.n	8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018922:	f04f 33ff 	mov.w	r3, #4294967295
 8018926:	e135      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018928:	7e7b      	ldrb	r3, [r7, #25]
 801892a:	b29b      	uxth	r3, r3
 801892c:	8b7a      	ldrh	r2, [r7, #26]
 801892e:	1ad3      	subs	r3, r2, r3
 8018930:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018932:	69fb      	ldr	r3, [r7, #28]
 8018934:	88db      	ldrh	r3, [r3, #6]
 8018936:	b29b      	uxth	r3, r3
 8018938:	4618      	mov	r0, r3
 801893a:	f7f3 fe2d 	bl	800c598 <lwip_htons>
 801893e:	4603      	mov	r3, r0
 8018940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018944:	b29b      	uxth	r3, r3
 8018946:	00db      	lsls	r3, r3, #3
 8018948:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	685b      	ldr	r3, [r3, #4]
 801894e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018952:	2200      	movs	r2, #0
 8018954:	701a      	strb	r2, [r3, #0]
 8018956:	2200      	movs	r2, #0
 8018958:	705a      	strb	r2, [r3, #1]
 801895a:	2200      	movs	r2, #0
 801895c:	709a      	strb	r2, [r3, #2]
 801895e:	2200      	movs	r2, #0
 8018960:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018964:	8afa      	ldrh	r2, [r7, #22]
 8018966:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018968:	8afa      	ldrh	r2, [r7, #22]
 801896a:	8b7b      	ldrh	r3, [r7, #26]
 801896c:	4413      	add	r3, r2
 801896e:	b29a      	uxth	r2, r3
 8018970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018972:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018976:	88db      	ldrh	r3, [r3, #6]
 8018978:	b29b      	uxth	r3, r3
 801897a:	8afa      	ldrh	r2, [r7, #22]
 801897c:	429a      	cmp	r2, r3
 801897e:	d902      	bls.n	8018986 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018980:	f04f 33ff 	mov.w	r3, #4294967295
 8018984:	e106      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	627b      	str	r3, [r7, #36]	; 0x24
 801898c:	e068      	b.n	8018a60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801898e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018990:	685b      	ldr	r3, [r3, #4]
 8018992:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018996:	889b      	ldrh	r3, [r3, #4]
 8018998:	b29a      	uxth	r2, r3
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	889b      	ldrh	r3, [r3, #4]
 801899e:	b29b      	uxth	r3, r3
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d235      	bcs.n	8018a10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80189a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80189aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d020      	beq.n	80189f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80189b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189b2:	889b      	ldrh	r3, [r3, #4]
 80189b4:	b29a      	uxth	r2, r3
 80189b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b8:	88db      	ldrh	r3, [r3, #6]
 80189ba:	b29b      	uxth	r3, r3
 80189bc:	429a      	cmp	r2, r3
 80189be:	d307      	bcc.n	80189d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80189c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c2:	88db      	ldrh	r3, [r3, #6]
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	693b      	ldr	r3, [r7, #16]
 80189c8:	889b      	ldrh	r3, [r3, #4]
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d902      	bls.n	80189d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189d0:	f04f 33ff 	mov.w	r3, #4294967295
 80189d4:	e0de      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80189d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d8:	68ba      	ldr	r2, [r7, #8]
 80189da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80189dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189de:	88db      	ldrh	r3, [r3, #6]
 80189e0:	b29a      	uxth	r2, r3
 80189e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e4:	889b      	ldrh	r3, [r3, #4]
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	429a      	cmp	r2, r3
 80189ea:	d03d      	beq.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80189ec:	2300      	movs	r3, #0
 80189ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80189f0:	e03a      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80189f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189f4:	88db      	ldrh	r3, [r3, #6]
 80189f6:	b29a      	uxth	r2, r3
 80189f8:	693b      	ldr	r3, [r7, #16]
 80189fa:	889b      	ldrh	r3, [r3, #4]
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d902      	bls.n	8018a08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a02:	f04f 33ff 	mov.w	r3, #4294967295
 8018a06:	e0c5      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	68ba      	ldr	r2, [r7, #8]
 8018a0c:	605a      	str	r2, [r3, #4]
      break;
 8018a0e:	e02b      	b.n	8018a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a12:	889b      	ldrh	r3, [r3, #4]
 8018a14:	b29a      	uxth	r2, r3
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	889b      	ldrh	r3, [r3, #4]
 8018a1a:	b29b      	uxth	r3, r3
 8018a1c:	429a      	cmp	r2, r3
 8018a1e:	d102      	bne.n	8018a26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a20:	f04f 33ff 	mov.w	r3, #4294967295
 8018a24:	e0b6      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a28:	889b      	ldrh	r3, [r3, #4]
 8018a2a:	b29a      	uxth	r2, r3
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	88db      	ldrh	r3, [r3, #6]
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d202      	bcs.n	8018a3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a36:	f04f 33ff 	mov.w	r3, #4294967295
 8018a3a:	e0ab      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d009      	beq.n	8018a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a44:	88db      	ldrh	r3, [r3, #6]
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	889b      	ldrh	r3, [r3, #4]
 8018a4c:	b29b      	uxth	r3, r3
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d001      	beq.n	8018a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a52:	2300      	movs	r3, #0
 8018a54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018a56:	693b      	ldr	r3, [r7, #16]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d193      	bne.n	801898e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018a66:	e000      	b.n	8018a6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018a68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d12d      	bne.n	8018acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d01c      	beq.n	8018ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a78:	88db      	ldrh	r3, [r3, #6]
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7e:	889b      	ldrh	r3, [r3, #4]
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	429a      	cmp	r2, r3
 8018a84:	d906      	bls.n	8018a94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018a86:	4b45      	ldr	r3, [pc, #276]	; (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018a88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018a8c:	4944      	ldr	r1, [pc, #272]	; (8018ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018a8e:	4845      	ldr	r0, [pc, #276]	; (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018a90:	f000 ff90 	bl	80199b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a96:	68ba      	ldr	r2, [r7, #8]
 8018a98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a9c:	88db      	ldrh	r3, [r3, #6]
 8018a9e:	b29a      	uxth	r2, r3
 8018aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa2:	889b      	ldrh	r3, [r3, #4]
 8018aa4:	b29b      	uxth	r3, r3
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d010      	beq.n	8018acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	623b      	str	r3, [r7, #32]
 8018aae:	e00d      	b.n	8018acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	685b      	ldr	r3, [r3, #4]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d006      	beq.n	8018ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018ab8:	4b38      	ldr	r3, [pc, #224]	; (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018aba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018abe:	493a      	ldr	r1, [pc, #232]	; (8018ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018ac0:	4838      	ldr	r0, [pc, #224]	; (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ac2:	f000 ff77 	bl	80199b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	68ba      	ldr	r2, [r7, #8]
 8018aca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d105      	bne.n	8018ade <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	7f9b      	ldrb	r3, [r3, #30]
 8018ad6:	f003 0301 	and.w	r3, r3, #1
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d059      	beq.n	8018b92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018ade:	6a3b      	ldr	r3, [r7, #32]
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d04f      	beq.n	8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	685b      	ldr	r3, [r3, #4]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d006      	beq.n	8018afa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	685b      	ldr	r3, [r3, #4]
 8018af0:	685b      	ldr	r3, [r3, #4]
 8018af2:	889b      	ldrh	r3, [r3, #4]
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d002      	beq.n	8018b00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018afa:	2300      	movs	r3, #0
 8018afc:	623b      	str	r3, [r7, #32]
 8018afe:	e041      	b.n	8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b0a:	e012      	b.n	8018b32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0e:	685b      	ldr	r3, [r3, #4]
 8018b10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b14:	88db      	ldrh	r3, [r3, #6]
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1a:	889b      	ldrh	r3, [r3, #4]
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	429a      	cmp	r2, r3
 8018b20:	d002      	beq.n	8018b28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018b22:	2300      	movs	r3, #0
 8018b24:	623b      	str	r3, [r7, #32]
            break;
 8018b26:	e007      	b.n	8018b38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d1e9      	bne.n	8018b0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018b38:	6a3b      	ldr	r3, [r7, #32]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d022      	beq.n	8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d106      	bne.n	8018b54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018b46:	4b15      	ldr	r3, [pc, #84]	; (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b48:	f240 12df 	movw	r2, #479	; 0x1df
 8018b4c:	4917      	ldr	r1, [pc, #92]	; (8018bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b4e:	4815      	ldr	r0, [pc, #84]	; (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b50:	f000 ff30 	bl	80199b4 <iprintf>
          LWIP_ASSERT("sanity check",
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	685b      	ldr	r3, [r3, #4]
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b5c:	429a      	cmp	r2, r3
 8018b5e:	d106      	bne.n	8018b6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018b60:	4b0e      	ldr	r3, [pc, #56]	; (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018b66:	4911      	ldr	r1, [pc, #68]	; (8018bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018b68:	480e      	ldr	r0, [pc, #56]	; (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b6a:	f000 ff23 	bl	80199b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d006      	beq.n	8018b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018b76:	4b09      	ldr	r3, [pc, #36]	; (8018b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b78:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018b7c:	490c      	ldr	r1, [pc, #48]	; (8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018b7e:	4809      	ldr	r0, [pc, #36]	; (8018ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b80:	f000 ff18 	bl	80199b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018b84:	6a3b      	ldr	r3, [r7, #32]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	bf14      	ite	ne
 8018b8a:	2301      	movne	r3, #1
 8018b8c:	2300      	moveq	r3, #0
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	e000      	b.n	8018b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018b92:	2300      	movs	r3, #0
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3730      	adds	r7, #48	; 0x30
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	0801d7d0 	.word	0x0801d7d0
 8018ba0:	0801d8b4 	.word	0x0801d8b4
 8018ba4:	0801d818 	.word	0x0801d818
 8018ba8:	0801d8d4 	.word	0x0801d8d4
 8018bac:	0801d90c 	.word	0x0801d90c
 8018bb0:	0801d91c 	.word	0x0801d91c

08018bb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018bb4:	b580      	push	{r7, lr}
 8018bb6:	b08e      	sub	sp, #56	; 0x38
 8018bb8:	af00      	add	r7, sp, #0
 8018bba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc4:	781b      	ldrb	r3, [r3, #0]
 8018bc6:	f003 030f 	and.w	r3, r3, #15
 8018bca:	b2db      	uxtb	r3, r3
 8018bcc:	009b      	lsls	r3, r3, #2
 8018bce:	b2db      	uxtb	r3, r3
 8018bd0:	2b14      	cmp	r3, #20
 8018bd2:	f040 8171 	bne.w	8018eb8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bd8:	88db      	ldrh	r3, [r3, #6]
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7f3 fcdb 	bl	800c598 <lwip_htons>
 8018be2:	4603      	mov	r3, r0
 8018be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018be8:	b29b      	uxth	r3, r3
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bf0:	885b      	ldrh	r3, [r3, #2]
 8018bf2:	b29b      	uxth	r3, r3
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7f3 fccf 	bl	800c598 <lwip_htons>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c00:	781b      	ldrb	r3, [r3, #0]
 8018c02:	f003 030f 	and.w	r3, r3, #15
 8018c06:	b2db      	uxtb	r3, r3
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c16:	429a      	cmp	r2, r3
 8018c18:	f0c0 8150 	bcc.w	8018ebc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018c20:	b29b      	uxth	r3, r3
 8018c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018c24:	1ad3      	subs	r3, r2, r3
 8018c26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f7f5 f9ab 	bl	800df84 <pbuf_clen>
 8018c2e:	4603      	mov	r3, r0
 8018c30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018c32:	4b8c      	ldr	r3, [pc, #560]	; (8018e64 <ip4_reass+0x2b0>)
 8018c34:	881b      	ldrh	r3, [r3, #0]
 8018c36:	461a      	mov	r2, r3
 8018c38:	8c3b      	ldrh	r3, [r7, #32]
 8018c3a:	4413      	add	r3, r2
 8018c3c:	2b0a      	cmp	r3, #10
 8018c3e:	dd10      	ble.n	8018c62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c40:	8c3b      	ldrh	r3, [r7, #32]
 8018c42:	4619      	mov	r1, r3
 8018c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018c46:	f7ff fd81 	bl	801874c <ip_reass_remove_oldest_datagram>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	f000 8137 	beq.w	8018ec0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018c52:	4b84      	ldr	r3, [pc, #528]	; (8018e64 <ip4_reass+0x2b0>)
 8018c54:	881b      	ldrh	r3, [r3, #0]
 8018c56:	461a      	mov	r2, r3
 8018c58:	8c3b      	ldrh	r3, [r7, #32]
 8018c5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018c5c:	2b0a      	cmp	r3, #10
 8018c5e:	f300 812f 	bgt.w	8018ec0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c62:	4b81      	ldr	r3, [pc, #516]	; (8018e68 <ip4_reass+0x2b4>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	633b      	str	r3, [r7, #48]	; 0x30
 8018c68:	e015      	b.n	8018c96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c6c:	695a      	ldr	r2, [r3, #20]
 8018c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c70:	68db      	ldr	r3, [r3, #12]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d10c      	bne.n	8018c90 <ip4_reass+0xdc>
 8018c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c78:	699a      	ldr	r2, [r3, #24]
 8018c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c7c:	691b      	ldr	r3, [r3, #16]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d106      	bne.n	8018c90 <ip4_reass+0xdc>
 8018c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c84:	899a      	ldrh	r2, [r3, #12]
 8018c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c88:	889b      	ldrh	r3, [r3, #4]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d006      	beq.n	8018c9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	633b      	str	r3, [r7, #48]	; 0x30
 8018c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d1e6      	bne.n	8018c6a <ip4_reass+0xb6>
 8018c9c:	e000      	b.n	8018ca0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018c9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d109      	bne.n	8018cba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018ca6:	8c3b      	ldrh	r3, [r7, #32]
 8018ca8:	4619      	mov	r1, r3
 8018caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cac:	f7ff fdb0 	bl	8018810 <ip_reass_enqueue_new_datagram>
 8018cb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d11c      	bne.n	8018cf2 <ip4_reass+0x13e>
      goto nullreturn;
 8018cb8:	e105      	b.n	8018ec6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cbc:	88db      	ldrh	r3, [r3, #6]
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f3 fc69 	bl	800c598 <lwip_htons>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d110      	bne.n	8018cf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd2:	89db      	ldrh	r3, [r3, #14]
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7f3 fc5f 	bl	800c598 <lwip_htons>
 8018cda:	4603      	mov	r3, r0
 8018cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d006      	beq.n	8018cf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ce6:	3308      	adds	r3, #8
 8018ce8:	2214      	movs	r2, #20
 8018cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018cec:	4618      	mov	r0, r3
 8018cee:	f000 ff67 	bl	8019bc0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cf4:	88db      	ldrh	r3, [r3, #6]
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	f003 0320 	and.w	r3, r3, #32
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	bf0c      	ite	eq
 8018d00:	2301      	moveq	r3, #1
 8018d02:	2300      	movne	r3, #0
 8018d04:	b2db      	uxtb	r3, r3
 8018d06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018d08:	69fb      	ldr	r3, [r7, #28]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d00e      	beq.n	8018d2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d12:	4413      	add	r3, r2
 8018d14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018d16:	8b7a      	ldrh	r2, [r7, #26]
 8018d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	f0c0 80a0 	bcc.w	8018e60 <ip4_reass+0x2ac>
 8018d20:	8b7b      	ldrh	r3, [r7, #26]
 8018d22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018d26:	4293      	cmp	r3, r2
 8018d28:	f200 809a 	bhi.w	8018e60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018d2c:	69fa      	ldr	r2, [r7, #28]
 8018d2e:	6879      	ldr	r1, [r7, #4]
 8018d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d32:	f7ff fdd5 	bl	80188e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8018d36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d3e:	f000 809b 	beq.w	8018e78 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018d42:	4b48      	ldr	r3, [pc, #288]	; (8018e64 <ip4_reass+0x2b0>)
 8018d44:	881a      	ldrh	r2, [r3, #0]
 8018d46:	8c3b      	ldrh	r3, [r7, #32]
 8018d48:	4413      	add	r3, r2
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	4b45      	ldr	r3, [pc, #276]	; (8018e64 <ip4_reass+0x2b0>)
 8018d4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018d50:	69fb      	ldr	r3, [r7, #28]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d00d      	beq.n	8018d72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018d56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d5a:	4413      	add	r3, r2
 8018d5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d60:	8a7a      	ldrh	r2, [r7, #18]
 8018d62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d66:	7f9b      	ldrb	r3, [r3, #30]
 8018d68:	f043 0301 	orr.w	r3, r3, #1
 8018d6c:	b2da      	uxtb	r2, r3
 8018d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018d72:	697b      	ldr	r3, [r7, #20]
 8018d74:	2b01      	cmp	r3, #1
 8018d76:	d171      	bne.n	8018e5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d7a:	8b9b      	ldrh	r3, [r3, #28]
 8018d7c:	3314      	adds	r3, #20
 8018d7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d82:	685b      	ldr	r3, [r3, #4]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d8c:	685b      	ldr	r3, [r3, #4]
 8018d8e:	685b      	ldr	r3, [r3, #4]
 8018d90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d94:	3308      	adds	r3, #8
 8018d96:	2214      	movs	r2, #20
 8018d98:	4619      	mov	r1, r3
 8018d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d9c:	f000 ff10 	bl	8019bc0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018da0:	8a3b      	ldrh	r3, [r7, #16]
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7f3 fbf8 	bl	800c598 <lwip_htons>
 8018da8:	4603      	mov	r3, r0
 8018daa:	461a      	mov	r2, r3
 8018dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018db2:	2200      	movs	r2, #0
 8018db4:	719a      	strb	r2, [r3, #6]
 8018db6:	2200      	movs	r2, #0
 8018db8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	729a      	strb	r2, [r3, #10]
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018dca:	e00d      	b.n	8018de8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dce:	685b      	ldr	r3, [r3, #4]
 8018dd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018dd2:	2114      	movs	r1, #20
 8018dd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018dd6:	f7f4 ffc1 	bl	800dd5c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018ddc:	6878      	ldr	r0, [r7, #4]
 8018dde:	f7f5 f911 	bl	800e004 <pbuf_cat>
      r = iprh->next_pbuf;
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d1ee      	bne.n	8018dcc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018dee:	4b1e      	ldr	r3, [pc, #120]	; (8018e68 <ip4_reass+0x2b4>)
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d102      	bne.n	8018dfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018dfc:	e010      	b.n	8018e20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018dfe:	4b1a      	ldr	r3, [pc, #104]	; (8018e68 <ip4_reass+0x2b4>)
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e04:	e007      	b.n	8018e16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	d006      	beq.n	8018e1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d1f4      	bne.n	8018e06 <ip4_reass+0x252>
 8018e1c:	e000      	b.n	8018e20 <ip4_reass+0x26c>
          break;
 8018e1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018e24:	f7ff fd2e 	bl	8018884 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f7f5 f8ab 	bl	800df84 <pbuf_clen>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018e32:	4b0c      	ldr	r3, [pc, #48]	; (8018e64 <ip4_reass+0x2b0>)
 8018e34:	881b      	ldrh	r3, [r3, #0]
 8018e36:	8c3a      	ldrh	r2, [r7, #32]
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	d906      	bls.n	8018e4a <ip4_reass+0x296>
 8018e3c:	4b0b      	ldr	r3, [pc, #44]	; (8018e6c <ip4_reass+0x2b8>)
 8018e3e:	f240 229b 	movw	r2, #667	; 0x29b
 8018e42:	490b      	ldr	r1, [pc, #44]	; (8018e70 <ip4_reass+0x2bc>)
 8018e44:	480b      	ldr	r0, [pc, #44]	; (8018e74 <ip4_reass+0x2c0>)
 8018e46:	f000 fdb5 	bl	80199b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018e4a:	4b06      	ldr	r3, [pc, #24]	; (8018e64 <ip4_reass+0x2b0>)
 8018e4c:	881a      	ldrh	r2, [r3, #0]
 8018e4e:	8c3b      	ldrh	r3, [r7, #32]
 8018e50:	1ad3      	subs	r3, r2, r3
 8018e52:	b29a      	uxth	r2, r3
 8018e54:	4b03      	ldr	r3, [pc, #12]	; (8018e64 <ip4_reass+0x2b0>)
 8018e56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	e038      	b.n	8018ece <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	e036      	b.n	8018ece <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018e60:	bf00      	nop
 8018e62:	e00a      	b.n	8018e7a <ip4_reass+0x2c6>
 8018e64:	2000d0a8 	.word	0x2000d0a8
 8018e68:	2000d0a4 	.word	0x2000d0a4
 8018e6c:	0801d7d0 	.word	0x0801d7d0
 8018e70:	0801d940 	.word	0x0801d940
 8018e74:	0801d818 	.word	0x0801d818
    goto nullreturn_ipr;
 8018e78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d106      	bne.n	8018e8e <ip4_reass+0x2da>
 8018e80:	4b15      	ldr	r3, [pc, #84]	; (8018ed8 <ip4_reass+0x324>)
 8018e82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018e86:	4915      	ldr	r1, [pc, #84]	; (8018edc <ip4_reass+0x328>)
 8018e88:	4815      	ldr	r0, [pc, #84]	; (8018ee0 <ip4_reass+0x32c>)
 8018e8a:	f000 fd93 	bl	80199b4 <iprintf>
  if (ipr->p == NULL) {
 8018e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e90:	685b      	ldr	r3, [r3, #4]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d116      	bne.n	8018ec4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018e96:	4b13      	ldr	r3, [pc, #76]	; (8018ee4 <ip4_reass+0x330>)
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d006      	beq.n	8018eae <ip4_reass+0x2fa>
 8018ea0:	4b0d      	ldr	r3, [pc, #52]	; (8018ed8 <ip4_reass+0x324>)
 8018ea2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018ea6:	4910      	ldr	r1, [pc, #64]	; (8018ee8 <ip4_reass+0x334>)
 8018ea8:	480d      	ldr	r0, [pc, #52]	; (8018ee0 <ip4_reass+0x32c>)
 8018eaa:	f000 fd83 	bl	80199b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018eae:	2100      	movs	r1, #0
 8018eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018eb2:	f7ff fce7 	bl	8018884 <ip_reass_dequeue_datagram>
 8018eb6:	e006      	b.n	8018ec6 <ip4_reass+0x312>
    goto nullreturn;
 8018eb8:	bf00      	nop
 8018eba:	e004      	b.n	8018ec6 <ip4_reass+0x312>
    goto nullreturn;
 8018ebc:	bf00      	nop
 8018ebe:	e002      	b.n	8018ec6 <ip4_reass+0x312>
      goto nullreturn;
 8018ec0:	bf00      	nop
 8018ec2:	e000      	b.n	8018ec6 <ip4_reass+0x312>
  }

nullreturn:
 8018ec4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018ec6:	6878      	ldr	r0, [r7, #4]
 8018ec8:	f7f4 ffce 	bl	800de68 <pbuf_free>
  return NULL;
 8018ecc:	2300      	movs	r3, #0
}
 8018ece:	4618      	mov	r0, r3
 8018ed0:	3738      	adds	r7, #56	; 0x38
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	0801d7d0 	.word	0x0801d7d0
 8018edc:	0801d95c 	.word	0x0801d95c
 8018ee0:	0801d818 	.word	0x0801d818
 8018ee4:	2000d0a4 	.word	0x2000d0a4
 8018ee8:	0801d968 	.word	0x0801d968

08018eec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018eec:	b580      	push	{r7, lr}
 8018eee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018ef0:	2005      	movs	r0, #5
 8018ef2:	f7f4 f893 	bl	800d01c <memp_malloc>
 8018ef6:	4603      	mov	r3, r0
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	bd80      	pop	{r7, pc}

08018efc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b082      	sub	sp, #8
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d106      	bne.n	8018f18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018f0a:	4b07      	ldr	r3, [pc, #28]	; (8018f28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018f0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018f10:	4906      	ldr	r1, [pc, #24]	; (8018f2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018f12:	4807      	ldr	r0, [pc, #28]	; (8018f30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018f14:	f000 fd4e 	bl	80199b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018f18:	6879      	ldr	r1, [r7, #4]
 8018f1a:	2005      	movs	r0, #5
 8018f1c:	f7f4 f8f4 	bl	800d108 <memp_free>
}
 8018f20:	bf00      	nop
 8018f22:	3708      	adds	r7, #8
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}
 8018f28:	0801d7d0 	.word	0x0801d7d0
 8018f2c:	0801d988 	.word	0x0801d988
 8018f30:	0801d818 	.word	0x0801d818

08018f34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	b084      	sub	sp, #16
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d106      	bne.n	8018f54 <ipfrag_free_pbuf_custom+0x20>
 8018f46:	4b11      	ldr	r3, [pc, #68]	; (8018f8c <ipfrag_free_pbuf_custom+0x58>)
 8018f48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018f4c:	4910      	ldr	r1, [pc, #64]	; (8018f90 <ipfrag_free_pbuf_custom+0x5c>)
 8018f4e:	4811      	ldr	r0, [pc, #68]	; (8018f94 <ipfrag_free_pbuf_custom+0x60>)
 8018f50:	f000 fd30 	bl	80199b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018f54:	68fa      	ldr	r2, [r7, #12]
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	429a      	cmp	r2, r3
 8018f5a:	d006      	beq.n	8018f6a <ipfrag_free_pbuf_custom+0x36>
 8018f5c:	4b0b      	ldr	r3, [pc, #44]	; (8018f8c <ipfrag_free_pbuf_custom+0x58>)
 8018f5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018f62:	490d      	ldr	r1, [pc, #52]	; (8018f98 <ipfrag_free_pbuf_custom+0x64>)
 8018f64:	480b      	ldr	r0, [pc, #44]	; (8018f94 <ipfrag_free_pbuf_custom+0x60>)
 8018f66:	f000 fd25 	bl	80199b4 <iprintf>
  if (pcr->original != NULL) {
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	695b      	ldr	r3, [r3, #20]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d004      	beq.n	8018f7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	695b      	ldr	r3, [r3, #20]
 8018f76:	4618      	mov	r0, r3
 8018f78:	f7f4 ff76 	bl	800de68 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018f7c:	68f8      	ldr	r0, [r7, #12]
 8018f7e:	f7ff ffbd 	bl	8018efc <ip_frag_free_pbuf_custom_ref>
}
 8018f82:	bf00      	nop
 8018f84:	3710      	adds	r7, #16
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	0801d7d0 	.word	0x0801d7d0
 8018f90:	0801d994 	.word	0x0801d994
 8018f94:	0801d818 	.word	0x0801d818
 8018f98:	0801d9a0 	.word	0x0801d9a0

08018f9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b094      	sub	sp, #80	; 0x50
 8018fa0:	af02      	add	r7, sp, #8
 8018fa2:	60f8      	str	r0, [r7, #12]
 8018fa4:	60b9      	str	r1, [r7, #8]
 8018fa6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018fa8:	2300      	movs	r3, #0
 8018faa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018fae:	68bb      	ldr	r3, [r7, #8]
 8018fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018fb2:	3b14      	subs	r3, #20
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	da00      	bge.n	8018fba <ip4_frag+0x1e>
 8018fb8:	3307      	adds	r3, #7
 8018fba:	10db      	asrs	r3, r3, #3
 8018fbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018fbe:	2314      	movs	r3, #20
 8018fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	685b      	ldr	r3, [r3, #4]
 8018fc6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fce:	781b      	ldrb	r3, [r3, #0]
 8018fd0:	f003 030f 	and.w	r3, r3, #15
 8018fd4:	b2db      	uxtb	r3, r3
 8018fd6:	009b      	lsls	r3, r3, #2
 8018fd8:	b2db      	uxtb	r3, r3
 8018fda:	2b14      	cmp	r3, #20
 8018fdc:	d002      	beq.n	8018fe4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018fde:	f06f 0305 	mvn.w	r3, #5
 8018fe2:	e110      	b.n	8019206 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	895b      	ldrh	r3, [r3, #10]
 8018fe8:	2b13      	cmp	r3, #19
 8018fea:	d809      	bhi.n	8019000 <ip4_frag+0x64>
 8018fec:	4b88      	ldr	r3, [pc, #544]	; (8019210 <ip4_frag+0x274>)
 8018fee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018ff2:	4988      	ldr	r1, [pc, #544]	; (8019214 <ip4_frag+0x278>)
 8018ff4:	4888      	ldr	r0, [pc, #544]	; (8019218 <ip4_frag+0x27c>)
 8018ff6:	f000 fcdd 	bl	80199b4 <iprintf>
 8018ffa:	f06f 0305 	mvn.w	r3, #5
 8018ffe:	e102      	b.n	8019206 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019002:	88db      	ldrh	r3, [r3, #6]
 8019004:	b29b      	uxth	r3, r3
 8019006:	4618      	mov	r0, r3
 8019008:	f7f3 fac6 	bl	800c598 <lwip_htons>
 801900c:	4603      	mov	r3, r0
 801900e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801901a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801901c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019020:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	891b      	ldrh	r3, [r3, #8]
 8019026:	3b14      	subs	r3, #20
 8019028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801902c:	e0e1      	b.n	80191f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801902e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019030:	00db      	lsls	r3, r3, #3
 8019032:	b29b      	uxth	r3, r3
 8019034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019038:	4293      	cmp	r3, r2
 801903a:	bf28      	it	cs
 801903c:	4613      	movcs	r3, r2
 801903e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019040:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019044:	2114      	movs	r1, #20
 8019046:	200e      	movs	r0, #14
 8019048:	f7f4 fc2a 	bl	800d8a0 <pbuf_alloc>
 801904c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019050:	2b00      	cmp	r3, #0
 8019052:	f000 80d5 	beq.w	8019200 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019058:	895b      	ldrh	r3, [r3, #10]
 801905a:	2b13      	cmp	r3, #19
 801905c:	d806      	bhi.n	801906c <ip4_frag+0xd0>
 801905e:	4b6c      	ldr	r3, [pc, #432]	; (8019210 <ip4_frag+0x274>)
 8019060:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019064:	496d      	ldr	r1, [pc, #436]	; (801921c <ip4_frag+0x280>)
 8019066:	486c      	ldr	r0, [pc, #432]	; (8019218 <ip4_frag+0x27c>)
 8019068:	f000 fca4 	bl	80199b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	2214      	movs	r2, #20
 8019072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019074:	4618      	mov	r0, r3
 8019076:	f000 fda3 	bl	8019bc0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019080:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019082:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019086:	e064      	b.n	8019152 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	895a      	ldrh	r2, [r3, #10]
 801908c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801908e:	1ad3      	subs	r3, r2, r3
 8019090:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	895b      	ldrh	r3, [r3, #10]
 8019096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019098:	429a      	cmp	r2, r3
 801909a:	d906      	bls.n	80190aa <ip4_frag+0x10e>
 801909c:	4b5c      	ldr	r3, [pc, #368]	; (8019210 <ip4_frag+0x274>)
 801909e:	f240 322d 	movw	r2, #813	; 0x32d
 80190a2:	495f      	ldr	r1, [pc, #380]	; (8019220 <ip4_frag+0x284>)
 80190a4:	485c      	ldr	r0, [pc, #368]	; (8019218 <ip4_frag+0x27c>)
 80190a6:	f000 fc85 	bl	80199b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80190aa:	8bfa      	ldrh	r2, [r7, #30]
 80190ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80190b0:	4293      	cmp	r3, r2
 80190b2:	bf28      	it	cs
 80190b4:	4613      	movcs	r3, r2
 80190b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80190ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d105      	bne.n	80190ce <ip4_frag+0x132>
        poff = 0;
 80190c2:	2300      	movs	r3, #0
 80190c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80190c6:	68fb      	ldr	r3, [r7, #12]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	60fb      	str	r3, [r7, #12]
        continue;
 80190cc:	e041      	b.n	8019152 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80190ce:	f7ff ff0d 	bl	8018eec <ip_frag_alloc_pbuf_custom_ref>
 80190d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80190d4:	69bb      	ldr	r3, [r7, #24]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d103      	bne.n	80190e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80190da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80190dc:	f7f4 fec4 	bl	800de68 <pbuf_free>
        goto memerr;
 80190e0:	e08f      	b.n	8019202 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80190e4:	68fb      	ldr	r3, [r7, #12]
 80190e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80190e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80190ea:	4413      	add	r3, r2
 80190ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80190f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80190f4:	9201      	str	r2, [sp, #4]
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	4603      	mov	r3, r0
 80190fa:	2241      	movs	r2, #65	; 0x41
 80190fc:	2000      	movs	r0, #0
 80190fe:	f7f4 fcf9 	bl	800daf4 <pbuf_alloced_custom>
 8019102:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019104:	697b      	ldr	r3, [r7, #20]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d106      	bne.n	8019118 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801910a:	69b8      	ldr	r0, [r7, #24]
 801910c:	f7ff fef6 	bl	8018efc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019112:	f7f4 fea9 	bl	800de68 <pbuf_free>
        goto memerr;
 8019116:	e074      	b.n	8019202 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019118:	68f8      	ldr	r0, [r7, #12]
 801911a:	f7f4 ff4b 	bl	800dfb4 <pbuf_ref>
      pcr->original = p;
 801911e:	69bb      	ldr	r3, [r7, #24]
 8019120:	68fa      	ldr	r2, [r7, #12]
 8019122:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019124:	69bb      	ldr	r3, [r7, #24]
 8019126:	4a3f      	ldr	r2, [pc, #252]	; (8019224 <ip4_frag+0x288>)
 8019128:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801912a:	6979      	ldr	r1, [r7, #20]
 801912c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801912e:	f7f4 ff69 	bl	800e004 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019132:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801913a:	1ad3      	subs	r3, r2, r3
 801913c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019140:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019144:	2b00      	cmp	r3, #0
 8019146:	d004      	beq.n	8019152 <ip4_frag+0x1b6>
        poff = 0;
 8019148:	2300      	movs	r3, #0
 801914a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019152:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019156:	2b00      	cmp	r3, #0
 8019158:	d196      	bne.n	8019088 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801915a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801915c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019160:	4413      	add	r3, r2
 8019162:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019168:	f1a3 0213 	sub.w	r2, r3, #19
 801916c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019170:	429a      	cmp	r2, r3
 8019172:	bfcc      	ite	gt
 8019174:	2301      	movgt	r3, #1
 8019176:	2300      	movle	r3, #0
 8019178:	b2db      	uxtb	r3, r3
 801917a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801917c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019184:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019186:	6a3b      	ldr	r3, [r7, #32]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d002      	beq.n	8019192 <ip4_frag+0x1f6>
 801918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801918e:	2b00      	cmp	r3, #0
 8019190:	d003      	beq.n	801919a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019198:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801919a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801919c:	4618      	mov	r0, r3
 801919e:	f7f3 f9fb 	bl	800c598 <lwip_htons>
 80191a2:	4603      	mov	r3, r0
 80191a4:	461a      	mov	r2, r3
 80191a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80191aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191ac:	3314      	adds	r3, #20
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	4618      	mov	r0, r3
 80191b2:	f7f3 f9f1 	bl	800c598 <lwip_htons>
 80191b6:	4603      	mov	r3, r0
 80191b8:	461a      	mov	r2, r3
 80191ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80191be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c0:	2200      	movs	r2, #0
 80191c2:	729a      	strb	r2, [r3, #10]
 80191c4:	2200      	movs	r2, #0
 80191c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80191c8:	68bb      	ldr	r3, [r7, #8]
 80191ca:	695b      	ldr	r3, [r3, #20]
 80191cc:	687a      	ldr	r2, [r7, #4]
 80191ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80191d0:	68b8      	ldr	r0, [r7, #8]
 80191d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80191d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191d6:	f7f4 fe47 	bl	800de68 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80191da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80191e0:	1ad3      	subs	r3, r2, r3
 80191e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80191e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80191ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191ec:	4413      	add	r3, r2
 80191ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80191f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	f47f af19 	bne.w	801902e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80191fc:	2300      	movs	r3, #0
 80191fe:	e002      	b.n	8019206 <ip4_frag+0x26a>
      goto memerr;
 8019200:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019206:	4618      	mov	r0, r3
 8019208:	3748      	adds	r7, #72	; 0x48
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
 801920e:	bf00      	nop
 8019210:	0801d7d0 	.word	0x0801d7d0
 8019214:	0801d9ac 	.word	0x0801d9ac
 8019218:	0801d818 	.word	0x0801d818
 801921c:	0801d9c8 	.word	0x0801d9c8
 8019220:	0801d9e8 	.word	0x0801d9e8
 8019224:	08018f35 	.word	0x08018f35

08019228 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b086      	sub	sp, #24
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019232:	230e      	movs	r3, #14
 8019234:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	895b      	ldrh	r3, [r3, #10]
 801923a:	2b0e      	cmp	r3, #14
 801923c:	d96e      	bls.n	801931c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	7bdb      	ldrb	r3, [r3, #15]
 8019242:	2b00      	cmp	r3, #0
 8019244:	d106      	bne.n	8019254 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019246:	683b      	ldr	r3, [r7, #0]
 8019248:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801924c:	3301      	adds	r3, #1
 801924e:	b2da      	uxtb	r2, r3
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	685b      	ldr	r3, [r3, #4]
 8019258:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801925a:	693b      	ldr	r3, [r7, #16]
 801925c:	7b1a      	ldrb	r2, [r3, #12]
 801925e:	7b5b      	ldrb	r3, [r3, #13]
 8019260:	021b      	lsls	r3, r3, #8
 8019262:	4313      	orrs	r3, r2
 8019264:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019266:	693b      	ldr	r3, [r7, #16]
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	f003 0301 	and.w	r3, r3, #1
 801926e:	2b00      	cmp	r3, #0
 8019270:	d023      	beq.n	80192ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019272:	693b      	ldr	r3, [r7, #16]
 8019274:	781b      	ldrb	r3, [r3, #0]
 8019276:	2b01      	cmp	r3, #1
 8019278:	d10f      	bne.n	801929a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801927a:	693b      	ldr	r3, [r7, #16]
 801927c:	785b      	ldrb	r3, [r3, #1]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d11b      	bne.n	80192ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019282:	693b      	ldr	r3, [r7, #16]
 8019284:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019286:	2b5e      	cmp	r3, #94	; 0x5e
 8019288:	d117      	bne.n	80192ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	7b5b      	ldrb	r3, [r3, #13]
 801928e:	f043 0310 	orr.w	r3, r3, #16
 8019292:	b2da      	uxtb	r2, r3
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	735a      	strb	r2, [r3, #13]
 8019298:	e00f      	b.n	80192ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	2206      	movs	r2, #6
 801929e:	4928      	ldr	r1, [pc, #160]	; (8019340 <ethernet_input+0x118>)
 80192a0:	4618      	mov	r0, r3
 80192a2:	f000 fbdc 	bl	8019a5e <memcmp>
 80192a6:	4603      	mov	r3, r0
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d106      	bne.n	80192ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	7b5b      	ldrb	r3, [r3, #13]
 80192b0:	f043 0308 	orr.w	r3, r3, #8
 80192b4:	b2da      	uxtb	r2, r3
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80192ba:	89fb      	ldrh	r3, [r7, #14]
 80192bc:	2b08      	cmp	r3, #8
 80192be:	d003      	beq.n	80192c8 <ethernet_input+0xa0>
 80192c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80192c4:	d014      	beq.n	80192f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80192c6:	e032      	b.n	801932e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192c8:	683b      	ldr	r3, [r7, #0]
 80192ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80192ce:	f003 0308 	and.w	r3, r3, #8
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d024      	beq.n	8019320 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192d6:	8afb      	ldrh	r3, [r7, #22]
 80192d8:	4619      	mov	r1, r3
 80192da:	6878      	ldr	r0, [r7, #4]
 80192dc:	f7f4 fd3e 	bl	800dd5c <pbuf_remove_header>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	d11e      	bne.n	8019324 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80192e6:	6839      	ldr	r1, [r7, #0]
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f7fe ff03 	bl	80180f4 <ip4_input>
      break;
 80192ee:	e013      	b.n	8019318 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80192f6:	f003 0308 	and.w	r3, r3, #8
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d014      	beq.n	8019328 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80192fe:	8afb      	ldrh	r3, [r7, #22]
 8019300:	4619      	mov	r1, r3
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	f7f4 fd2a 	bl	800dd5c <pbuf_remove_header>
 8019308:	4603      	mov	r3, r0
 801930a:	2b00      	cmp	r3, #0
 801930c:	d10e      	bne.n	801932c <ethernet_input+0x104>
        etharp_input(p, netif);
 801930e:	6839      	ldr	r1, [r7, #0]
 8019310:	6878      	ldr	r0, [r7, #4]
 8019312:	f7fe f89f 	bl	8017454 <etharp_input>
      break;
 8019316:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019318:	2300      	movs	r3, #0
 801931a:	e00c      	b.n	8019336 <ethernet_input+0x10e>
    goto free_and_return;
 801931c:	bf00      	nop
 801931e:	e006      	b.n	801932e <ethernet_input+0x106>
        goto free_and_return;
 8019320:	bf00      	nop
 8019322:	e004      	b.n	801932e <ethernet_input+0x106>
        goto free_and_return;
 8019324:	bf00      	nop
 8019326:	e002      	b.n	801932e <ethernet_input+0x106>
        goto free_and_return;
 8019328:	bf00      	nop
 801932a:	e000      	b.n	801932e <ethernet_input+0x106>
        goto free_and_return;
 801932c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	f7f4 fd9a 	bl	800de68 <pbuf_free>
  return ERR_OK;
 8019334:	2300      	movs	r3, #0
}
 8019336:	4618      	mov	r0, r3
 8019338:	3718      	adds	r7, #24
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop
 8019340:	0801ff20 	.word	0x0801ff20

08019344 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019344:	b580      	push	{r7, lr}
 8019346:	b086      	sub	sp, #24
 8019348:	af00      	add	r7, sp, #0
 801934a:	60f8      	str	r0, [r7, #12]
 801934c:	60b9      	str	r1, [r7, #8]
 801934e:	607a      	str	r2, [r7, #4]
 8019350:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019352:	8c3b      	ldrh	r3, [r7, #32]
 8019354:	4618      	mov	r0, r3
 8019356:	f7f3 f91f 	bl	800c598 <lwip_htons>
 801935a:	4603      	mov	r3, r0
 801935c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801935e:	210e      	movs	r1, #14
 8019360:	68b8      	ldr	r0, [r7, #8]
 8019362:	f7f4 fceb 	bl	800dd3c <pbuf_add_header>
 8019366:	4603      	mov	r3, r0
 8019368:	2b00      	cmp	r3, #0
 801936a:	d125      	bne.n	80193b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801936c:	68bb      	ldr	r3, [r7, #8]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019372:	693b      	ldr	r3, [r7, #16]
 8019374:	8afa      	ldrh	r2, [r7, #22]
 8019376:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019378:	693b      	ldr	r3, [r7, #16]
 801937a:	2206      	movs	r2, #6
 801937c:	6839      	ldr	r1, [r7, #0]
 801937e:	4618      	mov	r0, r3
 8019380:	f000 fc1e 	bl	8019bc0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	3306      	adds	r3, #6
 8019388:	2206      	movs	r2, #6
 801938a:	6879      	ldr	r1, [r7, #4]
 801938c:	4618      	mov	r0, r3
 801938e:	f000 fc17 	bl	8019bc0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019398:	2b06      	cmp	r3, #6
 801939a:	d006      	beq.n	80193aa <ethernet_output+0x66>
 801939c:	4b0a      	ldr	r3, [pc, #40]	; (80193c8 <ethernet_output+0x84>)
 801939e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80193a2:	490a      	ldr	r1, [pc, #40]	; (80193cc <ethernet_output+0x88>)
 80193a4:	480a      	ldr	r0, [pc, #40]	; (80193d0 <ethernet_output+0x8c>)
 80193a6:	f000 fb05 	bl	80199b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80193aa:	68fb      	ldr	r3, [r7, #12]
 80193ac:	699b      	ldr	r3, [r3, #24]
 80193ae:	68b9      	ldr	r1, [r7, #8]
 80193b0:	68f8      	ldr	r0, [r7, #12]
 80193b2:	4798      	blx	r3
 80193b4:	4603      	mov	r3, r0
 80193b6:	e002      	b.n	80193be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80193b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80193ba:	f06f 0301 	mvn.w	r3, #1
}
 80193be:	4618      	mov	r0, r3
 80193c0:	3718      	adds	r7, #24
 80193c2:	46bd      	mov	sp, r7
 80193c4:	bd80      	pop	{r7, pc}
 80193c6:	bf00      	nop
 80193c8:	0801d9f8 	.word	0x0801d9f8
 80193cc:	0801da30 	.word	0x0801da30
 80193d0:	0801da64 	.word	0x0801da64

080193d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80193d4:	b580      	push	{r7, lr}
 80193d6:	b086      	sub	sp, #24
 80193d8:	af00      	add	r7, sp, #0
 80193da:	6078      	str	r0, [r7, #4]
 80193dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80193de:	683b      	ldr	r3, [r7, #0]
 80193e0:	60bb      	str	r3, [r7, #8]
 80193e2:	2304      	movs	r3, #4
 80193e4:	60fb      	str	r3, [r7, #12]
 80193e6:	2300      	movs	r3, #0
 80193e8:	613b      	str	r3, [r7, #16]
 80193ea:	2300      	movs	r3, #0
 80193ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80193ee:	f107 0308 	add.w	r3, r7, #8
 80193f2:	2100      	movs	r1, #0
 80193f4:	4618      	mov	r0, r3
 80193f6:	f7ee fe65 	bl	80080c4 <osMessageCreate>
 80193fa:	4602      	mov	r2, r0
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	2b00      	cmp	r3, #0
 8019406:	d102      	bne.n	801940e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019408:	f04f 33ff 	mov.w	r3, #4294967295
 801940c:	e000      	b.n	8019410 <sys_mbox_new+0x3c>

  return ERR_OK;
 801940e:	2300      	movs	r3, #0
}
 8019410:	4618      	mov	r0, r3
 8019412:	3718      	adds	r7, #24
 8019414:	46bd      	mov	sp, r7
 8019416:	bd80      	pop	{r7, pc}

08019418 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b084      	sub	sp, #16
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	6839      	ldr	r1, [r7, #0]
 8019428:	2200      	movs	r2, #0
 801942a:	4618      	mov	r0, r3
 801942c:	f7ee fe72 	bl	8008114 <osMessagePut>
 8019430:	4603      	mov	r3, r0
 8019432:	2b00      	cmp	r3, #0
 8019434:	d102      	bne.n	801943c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019436:	2300      	movs	r3, #0
 8019438:	73fb      	strb	r3, [r7, #15]
 801943a:	e001      	b.n	8019440 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801943c:	23ff      	movs	r3, #255	; 0xff
 801943e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019440:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019444:	4618      	mov	r0, r3
 8019446:	3710      	adds	r7, #16
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}

0801944c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b08c      	sub	sp, #48	; 0x30
 8019450:	af00      	add	r7, sp, #0
 8019452:	61f8      	str	r0, [r7, #28]
 8019454:	61b9      	str	r1, [r7, #24]
 8019456:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019458:	f7ee fca4 	bl	8007da4 <osKernelSysTick>
 801945c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d017      	beq.n	8019494 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019464:	69fb      	ldr	r3, [r7, #28]
 8019466:	6819      	ldr	r1, [r3, #0]
 8019468:	f107 0320 	add.w	r3, r7, #32
 801946c:	697a      	ldr	r2, [r7, #20]
 801946e:	4618      	mov	r0, r3
 8019470:	f7ee fe90 	bl	8008194 <osMessageGet>

    if(event.status == osEventMessage)
 8019474:	6a3b      	ldr	r3, [r7, #32]
 8019476:	2b10      	cmp	r3, #16
 8019478:	d109      	bne.n	801948e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947c:	461a      	mov	r2, r3
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019482:	f7ee fc8f 	bl	8007da4 <osKernelSysTick>
 8019486:	4602      	mov	r2, r0
 8019488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948a:	1ad3      	subs	r3, r2, r3
 801948c:	e019      	b.n	80194c2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801948e:	f04f 33ff 	mov.w	r3, #4294967295
 8019492:	e016      	b.n	80194c2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	6819      	ldr	r1, [r3, #0]
 8019498:	463b      	mov	r3, r7
 801949a:	f04f 32ff 	mov.w	r2, #4294967295
 801949e:	4618      	mov	r0, r3
 80194a0:	f7ee fe78 	bl	8008194 <osMessageGet>
 80194a4:	f107 0320 	add.w	r3, r7, #32
 80194a8:	463a      	mov	r2, r7
 80194aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80194ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80194b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b2:	461a      	mov	r2, r3
 80194b4:	69bb      	ldr	r3, [r7, #24]
 80194b6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80194b8:	f7ee fc74 	bl	8007da4 <osKernelSysTick>
 80194bc:	4602      	mov	r2, r0
 80194be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	3730      	adds	r7, #48	; 0x30
 80194c6:	46bd      	mov	sp, r7
 80194c8:	bd80      	pop	{r7, pc}

080194ca <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80194ca:	b480      	push	{r7}
 80194cc:	b083      	sub	sp, #12
 80194ce:	af00      	add	r7, sp, #0
 80194d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d101      	bne.n	80194de <sys_mbox_valid+0x14>
    return 0;
 80194da:	2300      	movs	r3, #0
 80194dc:	e000      	b.n	80194e0 <sys_mbox_valid+0x16>
  else
    return 1;
 80194de:	2301      	movs	r3, #1
}
 80194e0:	4618      	mov	r0, r3
 80194e2:	370c      	adds	r7, #12
 80194e4:	46bd      	mov	sp, r7
 80194e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ea:	4770      	bx	lr

080194ec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80194f0:	4803      	ldr	r0, [pc, #12]	; (8019500 <sys_init+0x14>)
 80194f2:	f7ee fcc7 	bl	8007e84 <osMutexCreate>
 80194f6:	4603      	mov	r3, r0
 80194f8:	4a02      	ldr	r2, [pc, #8]	; (8019504 <sys_init+0x18>)
 80194fa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80194fc:	bf00      	nop
 80194fe:	bd80      	pop	{r7, pc}
 8019500:	0801ff30 	.word	0x0801ff30
 8019504:	2000d0b0 	.word	0x2000d0b0

08019508 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019508:	b580      	push	{r7, lr}
 801950a:	b084      	sub	sp, #16
 801950c:	af00      	add	r7, sp, #0
 801950e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019510:	2300      	movs	r3, #0
 8019512:	60bb      	str	r3, [r7, #8]
 8019514:	2300      	movs	r3, #0
 8019516:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019518:	f107 0308 	add.w	r3, r7, #8
 801951c:	4618      	mov	r0, r3
 801951e:	f7ee fcb1 	bl	8007e84 <osMutexCreate>
 8019522:	4602      	mov	r2, r0
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d102      	bne.n	8019536 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019530:	f04f 33ff 	mov.w	r3, #4294967295
 8019534:	e000      	b.n	8019538 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019536:	2300      	movs	r3, #0
}
 8019538:	4618      	mov	r0, r3
 801953a:	3710      	adds	r7, #16
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}

08019540 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019540:	b580      	push	{r7, lr}
 8019542:	b082      	sub	sp, #8
 8019544:	af00      	add	r7, sp, #0
 8019546:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	681b      	ldr	r3, [r3, #0]
 801954c:	f04f 31ff 	mov.w	r1, #4294967295
 8019550:	4618      	mov	r0, r3
 8019552:	f7ee fcaf 	bl	8007eb4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019556:	bf00      	nop
 8019558:	3708      	adds	r7, #8
 801955a:	46bd      	mov	sp, r7
 801955c:	bd80      	pop	{r7, pc}

0801955e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801955e:	b580      	push	{r7, lr}
 8019560:	b082      	sub	sp, #8
 8019562:	af00      	add	r7, sp, #0
 8019564:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	4618      	mov	r0, r3
 801956c:	f7ee fcf0 	bl	8007f50 <osMutexRelease>
}
 8019570:	bf00      	nop
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}

08019578 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019578:	b580      	push	{r7, lr}
 801957a:	b08c      	sub	sp, #48	; 0x30
 801957c:	af00      	add	r7, sp, #0
 801957e:	60f8      	str	r0, [r7, #12]
 8019580:	60b9      	str	r1, [r7, #8]
 8019582:	607a      	str	r2, [r7, #4]
 8019584:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019586:	f107 0314 	add.w	r3, r7, #20
 801958a:	2200      	movs	r2, #0
 801958c:	601a      	str	r2, [r3, #0]
 801958e:	605a      	str	r2, [r3, #4]
 8019590:	609a      	str	r2, [r3, #8]
 8019592:	60da      	str	r2, [r3, #12]
 8019594:	611a      	str	r2, [r3, #16]
 8019596:	615a      	str	r2, [r3, #20]
 8019598:	619a      	str	r2, [r3, #24]
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	617b      	str	r3, [r7, #20]
 801959e:	68bb      	ldr	r3, [r7, #8]
 80195a0:	61bb      	str	r3, [r7, #24]
 80195a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a4:	b21b      	sxth	r3, r3
 80195a6:	83bb      	strh	r3, [r7, #28]
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80195ac:	f107 0314 	add.w	r3, r7, #20
 80195b0:	6879      	ldr	r1, [r7, #4]
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7ee fc06 	bl	8007dc4 <osThreadCreate>
 80195b8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	3730      	adds	r7, #48	; 0x30
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
	...

080195c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80195c4:	b580      	push	{r7, lr}
 80195c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80195c8:	4b04      	ldr	r3, [pc, #16]	; (80195dc <sys_arch_protect+0x18>)
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	f04f 31ff 	mov.w	r1, #4294967295
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7ee fc6f 	bl	8007eb4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80195d6:	2301      	movs	r3, #1
}
 80195d8:	4618      	mov	r0, r3
 80195da:	bd80      	pop	{r7, pc}
 80195dc:	2000d0b0 	.word	0x2000d0b0

080195e0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b082      	sub	sp, #8
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80195e8:	4b04      	ldr	r3, [pc, #16]	; (80195fc <sys_arch_unprotect+0x1c>)
 80195ea:	681b      	ldr	r3, [r3, #0]
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7ee fcaf 	bl	8007f50 <osMutexRelease>
}
 80195f2:	bf00      	nop
 80195f4:	3708      	adds	r7, #8
 80195f6:	46bd      	mov	sp, r7
 80195f8:	bd80      	pop	{r7, pc}
 80195fa:	bf00      	nop
 80195fc:	2000d0b0 	.word	0x2000d0b0

08019600 <atoi>:
 8019600:	220a      	movs	r2, #10
 8019602:	2100      	movs	r1, #0
 8019604:	f000 b8da 	b.w	80197bc <strtol>

08019608 <__itoa>:
 8019608:	1e93      	subs	r3, r2, #2
 801960a:	2b22      	cmp	r3, #34	; 0x22
 801960c:	b510      	push	{r4, lr}
 801960e:	460c      	mov	r4, r1
 8019610:	d904      	bls.n	801961c <__itoa+0x14>
 8019612:	2300      	movs	r3, #0
 8019614:	700b      	strb	r3, [r1, #0]
 8019616:	461c      	mov	r4, r3
 8019618:	4620      	mov	r0, r4
 801961a:	bd10      	pop	{r4, pc}
 801961c:	2a0a      	cmp	r2, #10
 801961e:	d109      	bne.n	8019634 <__itoa+0x2c>
 8019620:	2800      	cmp	r0, #0
 8019622:	da07      	bge.n	8019634 <__itoa+0x2c>
 8019624:	232d      	movs	r3, #45	; 0x2d
 8019626:	700b      	strb	r3, [r1, #0]
 8019628:	4240      	negs	r0, r0
 801962a:	2101      	movs	r1, #1
 801962c:	4421      	add	r1, r4
 801962e:	f000 f8cf 	bl	80197d0 <__utoa>
 8019632:	e7f1      	b.n	8019618 <__itoa+0x10>
 8019634:	2100      	movs	r1, #0
 8019636:	e7f9      	b.n	801962c <__itoa+0x24>

08019638 <itoa>:
 8019638:	f7ff bfe6 	b.w	8019608 <__itoa>

0801963c <rand>:
 801963c:	4b16      	ldr	r3, [pc, #88]	; (8019698 <rand+0x5c>)
 801963e:	b510      	push	{r4, lr}
 8019640:	681c      	ldr	r4, [r3, #0]
 8019642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019644:	b9b3      	cbnz	r3, 8019674 <rand+0x38>
 8019646:	2018      	movs	r0, #24
 8019648:	f000 fae6 	bl	8019c18 <malloc>
 801964c:	4602      	mov	r2, r0
 801964e:	6320      	str	r0, [r4, #48]	; 0x30
 8019650:	b920      	cbnz	r0, 801965c <rand+0x20>
 8019652:	4b12      	ldr	r3, [pc, #72]	; (801969c <rand+0x60>)
 8019654:	4812      	ldr	r0, [pc, #72]	; (80196a0 <rand+0x64>)
 8019656:	2152      	movs	r1, #82	; 0x52
 8019658:	f000 fac0 	bl	8019bdc <__assert_func>
 801965c:	4911      	ldr	r1, [pc, #68]	; (80196a4 <rand+0x68>)
 801965e:	4b12      	ldr	r3, [pc, #72]	; (80196a8 <rand+0x6c>)
 8019660:	e9c0 1300 	strd	r1, r3, [r0]
 8019664:	4b11      	ldr	r3, [pc, #68]	; (80196ac <rand+0x70>)
 8019666:	6083      	str	r3, [r0, #8]
 8019668:	230b      	movs	r3, #11
 801966a:	8183      	strh	r3, [r0, #12]
 801966c:	2100      	movs	r1, #0
 801966e:	2001      	movs	r0, #1
 8019670:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019674:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019676:	480e      	ldr	r0, [pc, #56]	; (80196b0 <rand+0x74>)
 8019678:	690b      	ldr	r3, [r1, #16]
 801967a:	694c      	ldr	r4, [r1, #20]
 801967c:	4a0d      	ldr	r2, [pc, #52]	; (80196b4 <rand+0x78>)
 801967e:	4358      	muls	r0, r3
 8019680:	fb02 0004 	mla	r0, r2, r4, r0
 8019684:	fba3 3202 	umull	r3, r2, r3, r2
 8019688:	3301      	adds	r3, #1
 801968a:	eb40 0002 	adc.w	r0, r0, r2
 801968e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019692:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019696:	bd10      	pop	{r4, pc}
 8019698:	20000098 	.word	0x20000098
 801969c:	0801ff38 	.word	0x0801ff38
 80196a0:	0801ff4f 	.word	0x0801ff4f
 80196a4:	abcd330e 	.word	0xabcd330e
 80196a8:	e66d1234 	.word	0xe66d1234
 80196ac:	0005deec 	.word	0x0005deec
 80196b0:	5851f42d 	.word	0x5851f42d
 80196b4:	4c957f2d 	.word	0x4c957f2d

080196b8 <_strtol_l.constprop.0>:
 80196b8:	2b01      	cmp	r3, #1
 80196ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80196be:	d001      	beq.n	80196c4 <_strtol_l.constprop.0+0xc>
 80196c0:	2b24      	cmp	r3, #36	; 0x24
 80196c2:	d906      	bls.n	80196d2 <_strtol_l.constprop.0+0x1a>
 80196c4:	f000 fa48 	bl	8019b58 <__errno>
 80196c8:	2316      	movs	r3, #22
 80196ca:	6003      	str	r3, [r0, #0]
 80196cc:	2000      	movs	r0, #0
 80196ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80197b8 <_strtol_l.constprop.0+0x100>
 80196d6:	460d      	mov	r5, r1
 80196d8:	462e      	mov	r6, r5
 80196da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80196de:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80196e2:	f017 0708 	ands.w	r7, r7, #8
 80196e6:	d1f7      	bne.n	80196d8 <_strtol_l.constprop.0+0x20>
 80196e8:	2c2d      	cmp	r4, #45	; 0x2d
 80196ea:	d132      	bne.n	8019752 <_strtol_l.constprop.0+0x9a>
 80196ec:	782c      	ldrb	r4, [r5, #0]
 80196ee:	2701      	movs	r7, #1
 80196f0:	1cb5      	adds	r5, r6, #2
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d05b      	beq.n	80197ae <_strtol_l.constprop.0+0xf6>
 80196f6:	2b10      	cmp	r3, #16
 80196f8:	d109      	bne.n	801970e <_strtol_l.constprop.0+0x56>
 80196fa:	2c30      	cmp	r4, #48	; 0x30
 80196fc:	d107      	bne.n	801970e <_strtol_l.constprop.0+0x56>
 80196fe:	782c      	ldrb	r4, [r5, #0]
 8019700:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8019704:	2c58      	cmp	r4, #88	; 0x58
 8019706:	d14d      	bne.n	80197a4 <_strtol_l.constprop.0+0xec>
 8019708:	786c      	ldrb	r4, [r5, #1]
 801970a:	2310      	movs	r3, #16
 801970c:	3502      	adds	r5, #2
 801970e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8019712:	f108 38ff 	add.w	r8, r8, #4294967295
 8019716:	f04f 0e00 	mov.w	lr, #0
 801971a:	fbb8 f9f3 	udiv	r9, r8, r3
 801971e:	4676      	mov	r6, lr
 8019720:	fb03 8a19 	mls	sl, r3, r9, r8
 8019724:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8019728:	f1bc 0f09 	cmp.w	ip, #9
 801972c:	d816      	bhi.n	801975c <_strtol_l.constprop.0+0xa4>
 801972e:	4664      	mov	r4, ip
 8019730:	42a3      	cmp	r3, r4
 8019732:	dd24      	ble.n	801977e <_strtol_l.constprop.0+0xc6>
 8019734:	f1be 3fff 	cmp.w	lr, #4294967295
 8019738:	d008      	beq.n	801974c <_strtol_l.constprop.0+0x94>
 801973a:	45b1      	cmp	r9, r6
 801973c:	d31c      	bcc.n	8019778 <_strtol_l.constprop.0+0xc0>
 801973e:	d101      	bne.n	8019744 <_strtol_l.constprop.0+0x8c>
 8019740:	45a2      	cmp	sl, r4
 8019742:	db19      	blt.n	8019778 <_strtol_l.constprop.0+0xc0>
 8019744:	fb06 4603 	mla	r6, r6, r3, r4
 8019748:	f04f 0e01 	mov.w	lr, #1
 801974c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019750:	e7e8      	b.n	8019724 <_strtol_l.constprop.0+0x6c>
 8019752:	2c2b      	cmp	r4, #43	; 0x2b
 8019754:	bf04      	itt	eq
 8019756:	782c      	ldrbeq	r4, [r5, #0]
 8019758:	1cb5      	addeq	r5, r6, #2
 801975a:	e7ca      	b.n	80196f2 <_strtol_l.constprop.0+0x3a>
 801975c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8019760:	f1bc 0f19 	cmp.w	ip, #25
 8019764:	d801      	bhi.n	801976a <_strtol_l.constprop.0+0xb2>
 8019766:	3c37      	subs	r4, #55	; 0x37
 8019768:	e7e2      	b.n	8019730 <_strtol_l.constprop.0+0x78>
 801976a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801976e:	f1bc 0f19 	cmp.w	ip, #25
 8019772:	d804      	bhi.n	801977e <_strtol_l.constprop.0+0xc6>
 8019774:	3c57      	subs	r4, #87	; 0x57
 8019776:	e7db      	b.n	8019730 <_strtol_l.constprop.0+0x78>
 8019778:	f04f 3eff 	mov.w	lr, #4294967295
 801977c:	e7e6      	b.n	801974c <_strtol_l.constprop.0+0x94>
 801977e:	f1be 3fff 	cmp.w	lr, #4294967295
 8019782:	d105      	bne.n	8019790 <_strtol_l.constprop.0+0xd8>
 8019784:	2322      	movs	r3, #34	; 0x22
 8019786:	6003      	str	r3, [r0, #0]
 8019788:	4646      	mov	r6, r8
 801978a:	b942      	cbnz	r2, 801979e <_strtol_l.constprop.0+0xe6>
 801978c:	4630      	mov	r0, r6
 801978e:	e79e      	b.n	80196ce <_strtol_l.constprop.0+0x16>
 8019790:	b107      	cbz	r7, 8019794 <_strtol_l.constprop.0+0xdc>
 8019792:	4276      	negs	r6, r6
 8019794:	2a00      	cmp	r2, #0
 8019796:	d0f9      	beq.n	801978c <_strtol_l.constprop.0+0xd4>
 8019798:	f1be 0f00 	cmp.w	lr, #0
 801979c:	d000      	beq.n	80197a0 <_strtol_l.constprop.0+0xe8>
 801979e:	1e69      	subs	r1, r5, #1
 80197a0:	6011      	str	r1, [r2, #0]
 80197a2:	e7f3      	b.n	801978c <_strtol_l.constprop.0+0xd4>
 80197a4:	2430      	movs	r4, #48	; 0x30
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d1b1      	bne.n	801970e <_strtol_l.constprop.0+0x56>
 80197aa:	2308      	movs	r3, #8
 80197ac:	e7af      	b.n	801970e <_strtol_l.constprop.0+0x56>
 80197ae:	2c30      	cmp	r4, #48	; 0x30
 80197b0:	d0a5      	beq.n	80196fe <_strtol_l.constprop.0+0x46>
 80197b2:	230a      	movs	r3, #10
 80197b4:	e7ab      	b.n	801970e <_strtol_l.constprop.0+0x56>
 80197b6:	bf00      	nop
 80197b8:	0801ffcd 	.word	0x0801ffcd

080197bc <strtol>:
 80197bc:	4613      	mov	r3, r2
 80197be:	460a      	mov	r2, r1
 80197c0:	4601      	mov	r1, r0
 80197c2:	4802      	ldr	r0, [pc, #8]	; (80197cc <strtol+0x10>)
 80197c4:	6800      	ldr	r0, [r0, #0]
 80197c6:	f7ff bf77 	b.w	80196b8 <_strtol_l.constprop.0>
 80197ca:	bf00      	nop
 80197cc:	20000098 	.word	0x20000098

080197d0 <__utoa>:
 80197d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197d2:	4c1f      	ldr	r4, [pc, #124]	; (8019850 <__utoa+0x80>)
 80197d4:	b08b      	sub	sp, #44	; 0x2c
 80197d6:	4605      	mov	r5, r0
 80197d8:	460b      	mov	r3, r1
 80197da:	466e      	mov	r6, sp
 80197dc:	f104 0c20 	add.w	ip, r4, #32
 80197e0:	6820      	ldr	r0, [r4, #0]
 80197e2:	6861      	ldr	r1, [r4, #4]
 80197e4:	4637      	mov	r7, r6
 80197e6:	c703      	stmia	r7!, {r0, r1}
 80197e8:	3408      	adds	r4, #8
 80197ea:	4564      	cmp	r4, ip
 80197ec:	463e      	mov	r6, r7
 80197ee:	d1f7      	bne.n	80197e0 <__utoa+0x10>
 80197f0:	7921      	ldrb	r1, [r4, #4]
 80197f2:	7139      	strb	r1, [r7, #4]
 80197f4:	1e91      	subs	r1, r2, #2
 80197f6:	6820      	ldr	r0, [r4, #0]
 80197f8:	6038      	str	r0, [r7, #0]
 80197fa:	2922      	cmp	r1, #34	; 0x22
 80197fc:	f04f 0100 	mov.w	r1, #0
 8019800:	d904      	bls.n	801980c <__utoa+0x3c>
 8019802:	7019      	strb	r1, [r3, #0]
 8019804:	460b      	mov	r3, r1
 8019806:	4618      	mov	r0, r3
 8019808:	b00b      	add	sp, #44	; 0x2c
 801980a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801980c:	1e58      	subs	r0, r3, #1
 801980e:	4684      	mov	ip, r0
 8019810:	fbb5 f7f2 	udiv	r7, r5, r2
 8019814:	fb02 5617 	mls	r6, r2, r7, r5
 8019818:	3628      	adds	r6, #40	; 0x28
 801981a:	446e      	add	r6, sp
 801981c:	460c      	mov	r4, r1
 801981e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8019822:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8019826:	462e      	mov	r6, r5
 8019828:	42b2      	cmp	r2, r6
 801982a:	f101 0101 	add.w	r1, r1, #1
 801982e:	463d      	mov	r5, r7
 8019830:	d9ee      	bls.n	8019810 <__utoa+0x40>
 8019832:	2200      	movs	r2, #0
 8019834:	545a      	strb	r2, [r3, r1]
 8019836:	1919      	adds	r1, r3, r4
 8019838:	1aa5      	subs	r5, r4, r2
 801983a:	42aa      	cmp	r2, r5
 801983c:	dae3      	bge.n	8019806 <__utoa+0x36>
 801983e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8019842:	780e      	ldrb	r6, [r1, #0]
 8019844:	7006      	strb	r6, [r0, #0]
 8019846:	3201      	adds	r2, #1
 8019848:	f801 5901 	strb.w	r5, [r1], #-1
 801984c:	e7f4      	b.n	8019838 <__utoa+0x68>
 801984e:	bf00      	nop
 8019850:	0801ffa7 	.word	0x0801ffa7

08019854 <std>:
 8019854:	2300      	movs	r3, #0
 8019856:	b510      	push	{r4, lr}
 8019858:	4604      	mov	r4, r0
 801985a:	e9c0 3300 	strd	r3, r3, [r0]
 801985e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019862:	6083      	str	r3, [r0, #8]
 8019864:	8181      	strh	r1, [r0, #12]
 8019866:	6643      	str	r3, [r0, #100]	; 0x64
 8019868:	81c2      	strh	r2, [r0, #14]
 801986a:	6183      	str	r3, [r0, #24]
 801986c:	4619      	mov	r1, r3
 801986e:	2208      	movs	r2, #8
 8019870:	305c      	adds	r0, #92	; 0x5c
 8019872:	f000 f904 	bl	8019a7e <memset>
 8019876:	4b05      	ldr	r3, [pc, #20]	; (801988c <std+0x38>)
 8019878:	6263      	str	r3, [r4, #36]	; 0x24
 801987a:	4b05      	ldr	r3, [pc, #20]	; (8019890 <std+0x3c>)
 801987c:	62a3      	str	r3, [r4, #40]	; 0x28
 801987e:	4b05      	ldr	r3, [pc, #20]	; (8019894 <std+0x40>)
 8019880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019882:	4b05      	ldr	r3, [pc, #20]	; (8019898 <std+0x44>)
 8019884:	6224      	str	r4, [r4, #32]
 8019886:	6323      	str	r3, [r4, #48]	; 0x30
 8019888:	bd10      	pop	{r4, pc}
 801988a:	bf00      	nop
 801988c:	080199d9 	.word	0x080199d9
 8019890:	080199fb 	.word	0x080199fb
 8019894:	08019a33 	.word	0x08019a33
 8019898:	08019a57 	.word	0x08019a57

0801989c <stdio_exit_handler>:
 801989c:	4a02      	ldr	r2, [pc, #8]	; (80198a8 <stdio_exit_handler+0xc>)
 801989e:	4903      	ldr	r1, [pc, #12]	; (80198ac <stdio_exit_handler+0x10>)
 80198a0:	4803      	ldr	r0, [pc, #12]	; (80198b0 <stdio_exit_handler+0x14>)
 80198a2:	f000 b869 	b.w	8019978 <_fwalk_sglue>
 80198a6:	bf00      	nop
 80198a8:	20000040 	.word	0x20000040
 80198ac:	0801a435 	.word	0x0801a435
 80198b0:	2000004c 	.word	0x2000004c

080198b4 <cleanup_stdio>:
 80198b4:	6841      	ldr	r1, [r0, #4]
 80198b6:	4b0c      	ldr	r3, [pc, #48]	; (80198e8 <cleanup_stdio+0x34>)
 80198b8:	4299      	cmp	r1, r3
 80198ba:	b510      	push	{r4, lr}
 80198bc:	4604      	mov	r4, r0
 80198be:	d001      	beq.n	80198c4 <cleanup_stdio+0x10>
 80198c0:	f000 fdb8 	bl	801a434 <_fflush_r>
 80198c4:	68a1      	ldr	r1, [r4, #8]
 80198c6:	4b09      	ldr	r3, [pc, #36]	; (80198ec <cleanup_stdio+0x38>)
 80198c8:	4299      	cmp	r1, r3
 80198ca:	d002      	beq.n	80198d2 <cleanup_stdio+0x1e>
 80198cc:	4620      	mov	r0, r4
 80198ce:	f000 fdb1 	bl	801a434 <_fflush_r>
 80198d2:	68e1      	ldr	r1, [r4, #12]
 80198d4:	4b06      	ldr	r3, [pc, #24]	; (80198f0 <cleanup_stdio+0x3c>)
 80198d6:	4299      	cmp	r1, r3
 80198d8:	d004      	beq.n	80198e4 <cleanup_stdio+0x30>
 80198da:	4620      	mov	r0, r4
 80198dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80198e0:	f000 bda8 	b.w	801a434 <_fflush_r>
 80198e4:	bd10      	pop	{r4, pc}
 80198e6:	bf00      	nop
 80198e8:	2000d0b4 	.word	0x2000d0b4
 80198ec:	2000d11c 	.word	0x2000d11c
 80198f0:	2000d184 	.word	0x2000d184

080198f4 <global_stdio_init.part.0>:
 80198f4:	b510      	push	{r4, lr}
 80198f6:	4b0b      	ldr	r3, [pc, #44]	; (8019924 <global_stdio_init.part.0+0x30>)
 80198f8:	4c0b      	ldr	r4, [pc, #44]	; (8019928 <global_stdio_init.part.0+0x34>)
 80198fa:	4a0c      	ldr	r2, [pc, #48]	; (801992c <global_stdio_init.part.0+0x38>)
 80198fc:	601a      	str	r2, [r3, #0]
 80198fe:	4620      	mov	r0, r4
 8019900:	2200      	movs	r2, #0
 8019902:	2104      	movs	r1, #4
 8019904:	f7ff ffa6 	bl	8019854 <std>
 8019908:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801990c:	2201      	movs	r2, #1
 801990e:	2109      	movs	r1, #9
 8019910:	f7ff ffa0 	bl	8019854 <std>
 8019914:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019918:	2202      	movs	r2, #2
 801991a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801991e:	2112      	movs	r1, #18
 8019920:	f7ff bf98 	b.w	8019854 <std>
 8019924:	2000d1ec 	.word	0x2000d1ec
 8019928:	2000d0b4 	.word	0x2000d0b4
 801992c:	0801989d 	.word	0x0801989d

08019930 <__sfp_lock_acquire>:
 8019930:	4801      	ldr	r0, [pc, #4]	; (8019938 <__sfp_lock_acquire+0x8>)
 8019932:	f000 b93b 	b.w	8019bac <__retarget_lock_acquire_recursive>
 8019936:	bf00      	nop
 8019938:	2000d1f1 	.word	0x2000d1f1

0801993c <__sfp_lock_release>:
 801993c:	4801      	ldr	r0, [pc, #4]	; (8019944 <__sfp_lock_release+0x8>)
 801993e:	f000 b936 	b.w	8019bae <__retarget_lock_release_recursive>
 8019942:	bf00      	nop
 8019944:	2000d1f1 	.word	0x2000d1f1

08019948 <__sinit>:
 8019948:	b510      	push	{r4, lr}
 801994a:	4604      	mov	r4, r0
 801994c:	f7ff fff0 	bl	8019930 <__sfp_lock_acquire>
 8019950:	6a23      	ldr	r3, [r4, #32]
 8019952:	b11b      	cbz	r3, 801995c <__sinit+0x14>
 8019954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019958:	f7ff bff0 	b.w	801993c <__sfp_lock_release>
 801995c:	4b04      	ldr	r3, [pc, #16]	; (8019970 <__sinit+0x28>)
 801995e:	6223      	str	r3, [r4, #32]
 8019960:	4b04      	ldr	r3, [pc, #16]	; (8019974 <__sinit+0x2c>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d1f5      	bne.n	8019954 <__sinit+0xc>
 8019968:	f7ff ffc4 	bl	80198f4 <global_stdio_init.part.0>
 801996c:	e7f2      	b.n	8019954 <__sinit+0xc>
 801996e:	bf00      	nop
 8019970:	080198b5 	.word	0x080198b5
 8019974:	2000d1ec 	.word	0x2000d1ec

08019978 <_fwalk_sglue>:
 8019978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801997c:	4607      	mov	r7, r0
 801997e:	4688      	mov	r8, r1
 8019980:	4614      	mov	r4, r2
 8019982:	2600      	movs	r6, #0
 8019984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019988:	f1b9 0901 	subs.w	r9, r9, #1
 801998c:	d505      	bpl.n	801999a <_fwalk_sglue+0x22>
 801998e:	6824      	ldr	r4, [r4, #0]
 8019990:	2c00      	cmp	r4, #0
 8019992:	d1f7      	bne.n	8019984 <_fwalk_sglue+0xc>
 8019994:	4630      	mov	r0, r6
 8019996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801999a:	89ab      	ldrh	r3, [r5, #12]
 801999c:	2b01      	cmp	r3, #1
 801999e:	d907      	bls.n	80199b0 <_fwalk_sglue+0x38>
 80199a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80199a4:	3301      	adds	r3, #1
 80199a6:	d003      	beq.n	80199b0 <_fwalk_sglue+0x38>
 80199a8:	4629      	mov	r1, r5
 80199aa:	4638      	mov	r0, r7
 80199ac:	47c0      	blx	r8
 80199ae:	4306      	orrs	r6, r0
 80199b0:	3568      	adds	r5, #104	; 0x68
 80199b2:	e7e9      	b.n	8019988 <_fwalk_sglue+0x10>

080199b4 <iprintf>:
 80199b4:	b40f      	push	{r0, r1, r2, r3}
 80199b6:	b507      	push	{r0, r1, r2, lr}
 80199b8:	4906      	ldr	r1, [pc, #24]	; (80199d4 <iprintf+0x20>)
 80199ba:	ab04      	add	r3, sp, #16
 80199bc:	6808      	ldr	r0, [r1, #0]
 80199be:	f853 2b04 	ldr.w	r2, [r3], #4
 80199c2:	6881      	ldr	r1, [r0, #8]
 80199c4:	9301      	str	r3, [sp, #4]
 80199c6:	f000 fa05 	bl	8019dd4 <_vfiprintf_r>
 80199ca:	b003      	add	sp, #12
 80199cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80199d0:	b004      	add	sp, #16
 80199d2:	4770      	bx	lr
 80199d4:	20000098 	.word	0x20000098

080199d8 <__sread>:
 80199d8:	b510      	push	{r4, lr}
 80199da:	460c      	mov	r4, r1
 80199dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80199e0:	f000 f896 	bl	8019b10 <_read_r>
 80199e4:	2800      	cmp	r0, #0
 80199e6:	bfab      	itete	ge
 80199e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80199ea:	89a3      	ldrhlt	r3, [r4, #12]
 80199ec:	181b      	addge	r3, r3, r0
 80199ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80199f2:	bfac      	ite	ge
 80199f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80199f6:	81a3      	strhlt	r3, [r4, #12]
 80199f8:	bd10      	pop	{r4, pc}

080199fa <__swrite>:
 80199fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199fe:	461f      	mov	r7, r3
 8019a00:	898b      	ldrh	r3, [r1, #12]
 8019a02:	05db      	lsls	r3, r3, #23
 8019a04:	4605      	mov	r5, r0
 8019a06:	460c      	mov	r4, r1
 8019a08:	4616      	mov	r6, r2
 8019a0a:	d505      	bpl.n	8019a18 <__swrite+0x1e>
 8019a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a10:	2302      	movs	r3, #2
 8019a12:	2200      	movs	r2, #0
 8019a14:	f000 f86a 	bl	8019aec <_lseek_r>
 8019a18:	89a3      	ldrh	r3, [r4, #12]
 8019a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019a22:	81a3      	strh	r3, [r4, #12]
 8019a24:	4632      	mov	r2, r6
 8019a26:	463b      	mov	r3, r7
 8019a28:	4628      	mov	r0, r5
 8019a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a2e:	f000 b881 	b.w	8019b34 <_write_r>

08019a32 <__sseek>:
 8019a32:	b510      	push	{r4, lr}
 8019a34:	460c      	mov	r4, r1
 8019a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a3a:	f000 f857 	bl	8019aec <_lseek_r>
 8019a3e:	1c43      	adds	r3, r0, #1
 8019a40:	89a3      	ldrh	r3, [r4, #12]
 8019a42:	bf15      	itete	ne
 8019a44:	6560      	strne	r0, [r4, #84]	; 0x54
 8019a46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019a4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019a4e:	81a3      	strheq	r3, [r4, #12]
 8019a50:	bf18      	it	ne
 8019a52:	81a3      	strhne	r3, [r4, #12]
 8019a54:	bd10      	pop	{r4, pc}

08019a56 <__sclose>:
 8019a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019a5a:	f000 b837 	b.w	8019acc <_close_r>

08019a5e <memcmp>:
 8019a5e:	b510      	push	{r4, lr}
 8019a60:	3901      	subs	r1, #1
 8019a62:	4402      	add	r2, r0
 8019a64:	4290      	cmp	r0, r2
 8019a66:	d101      	bne.n	8019a6c <memcmp+0xe>
 8019a68:	2000      	movs	r0, #0
 8019a6a:	e005      	b.n	8019a78 <memcmp+0x1a>
 8019a6c:	7803      	ldrb	r3, [r0, #0]
 8019a6e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019a72:	42a3      	cmp	r3, r4
 8019a74:	d001      	beq.n	8019a7a <memcmp+0x1c>
 8019a76:	1b18      	subs	r0, r3, r4
 8019a78:	bd10      	pop	{r4, pc}
 8019a7a:	3001      	adds	r0, #1
 8019a7c:	e7f2      	b.n	8019a64 <memcmp+0x6>

08019a7e <memset>:
 8019a7e:	4402      	add	r2, r0
 8019a80:	4603      	mov	r3, r0
 8019a82:	4293      	cmp	r3, r2
 8019a84:	d100      	bne.n	8019a88 <memset+0xa>
 8019a86:	4770      	bx	lr
 8019a88:	f803 1b01 	strb.w	r1, [r3], #1
 8019a8c:	e7f9      	b.n	8019a82 <memset+0x4>

08019a8e <strchr>:
 8019a8e:	b2c9      	uxtb	r1, r1
 8019a90:	4603      	mov	r3, r0
 8019a92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a96:	b11a      	cbz	r2, 8019aa0 <strchr+0x12>
 8019a98:	428a      	cmp	r2, r1
 8019a9a:	d1f9      	bne.n	8019a90 <strchr+0x2>
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	4770      	bx	lr
 8019aa0:	2900      	cmp	r1, #0
 8019aa2:	bf18      	it	ne
 8019aa4:	2300      	movne	r3, #0
 8019aa6:	e7f9      	b.n	8019a9c <strchr+0xe>

08019aa8 <strncmp>:
 8019aa8:	b510      	push	{r4, lr}
 8019aaa:	b16a      	cbz	r2, 8019ac8 <strncmp+0x20>
 8019aac:	3901      	subs	r1, #1
 8019aae:	1884      	adds	r4, r0, r2
 8019ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ab4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019ab8:	429a      	cmp	r2, r3
 8019aba:	d103      	bne.n	8019ac4 <strncmp+0x1c>
 8019abc:	42a0      	cmp	r0, r4
 8019abe:	d001      	beq.n	8019ac4 <strncmp+0x1c>
 8019ac0:	2a00      	cmp	r2, #0
 8019ac2:	d1f5      	bne.n	8019ab0 <strncmp+0x8>
 8019ac4:	1ad0      	subs	r0, r2, r3
 8019ac6:	bd10      	pop	{r4, pc}
 8019ac8:	4610      	mov	r0, r2
 8019aca:	e7fc      	b.n	8019ac6 <strncmp+0x1e>

08019acc <_close_r>:
 8019acc:	b538      	push	{r3, r4, r5, lr}
 8019ace:	4d06      	ldr	r5, [pc, #24]	; (8019ae8 <_close_r+0x1c>)
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	4608      	mov	r0, r1
 8019ad6:	602b      	str	r3, [r5, #0]
 8019ad8:	f7e7 fd5f 	bl	800159a <_close>
 8019adc:	1c43      	adds	r3, r0, #1
 8019ade:	d102      	bne.n	8019ae6 <_close_r+0x1a>
 8019ae0:	682b      	ldr	r3, [r5, #0]
 8019ae2:	b103      	cbz	r3, 8019ae6 <_close_r+0x1a>
 8019ae4:	6023      	str	r3, [r4, #0]
 8019ae6:	bd38      	pop	{r3, r4, r5, pc}
 8019ae8:	2000d0ac 	.word	0x2000d0ac

08019aec <_lseek_r>:
 8019aec:	b538      	push	{r3, r4, r5, lr}
 8019aee:	4d07      	ldr	r5, [pc, #28]	; (8019b0c <_lseek_r+0x20>)
 8019af0:	4604      	mov	r4, r0
 8019af2:	4608      	mov	r0, r1
 8019af4:	4611      	mov	r1, r2
 8019af6:	2200      	movs	r2, #0
 8019af8:	602a      	str	r2, [r5, #0]
 8019afa:	461a      	mov	r2, r3
 8019afc:	f7e7 fd74 	bl	80015e8 <_lseek>
 8019b00:	1c43      	adds	r3, r0, #1
 8019b02:	d102      	bne.n	8019b0a <_lseek_r+0x1e>
 8019b04:	682b      	ldr	r3, [r5, #0]
 8019b06:	b103      	cbz	r3, 8019b0a <_lseek_r+0x1e>
 8019b08:	6023      	str	r3, [r4, #0]
 8019b0a:	bd38      	pop	{r3, r4, r5, pc}
 8019b0c:	2000d0ac 	.word	0x2000d0ac

08019b10 <_read_r>:
 8019b10:	b538      	push	{r3, r4, r5, lr}
 8019b12:	4d07      	ldr	r5, [pc, #28]	; (8019b30 <_read_r+0x20>)
 8019b14:	4604      	mov	r4, r0
 8019b16:	4608      	mov	r0, r1
 8019b18:	4611      	mov	r1, r2
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	602a      	str	r2, [r5, #0]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	f7e7 fd02 	bl	8001528 <_read>
 8019b24:	1c43      	adds	r3, r0, #1
 8019b26:	d102      	bne.n	8019b2e <_read_r+0x1e>
 8019b28:	682b      	ldr	r3, [r5, #0]
 8019b2a:	b103      	cbz	r3, 8019b2e <_read_r+0x1e>
 8019b2c:	6023      	str	r3, [r4, #0]
 8019b2e:	bd38      	pop	{r3, r4, r5, pc}
 8019b30:	2000d0ac 	.word	0x2000d0ac

08019b34 <_write_r>:
 8019b34:	b538      	push	{r3, r4, r5, lr}
 8019b36:	4d07      	ldr	r5, [pc, #28]	; (8019b54 <_write_r+0x20>)
 8019b38:	4604      	mov	r4, r0
 8019b3a:	4608      	mov	r0, r1
 8019b3c:	4611      	mov	r1, r2
 8019b3e:	2200      	movs	r2, #0
 8019b40:	602a      	str	r2, [r5, #0]
 8019b42:	461a      	mov	r2, r3
 8019b44:	f7e7 fd0d 	bl	8001562 <_write>
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	d102      	bne.n	8019b52 <_write_r+0x1e>
 8019b4c:	682b      	ldr	r3, [r5, #0]
 8019b4e:	b103      	cbz	r3, 8019b52 <_write_r+0x1e>
 8019b50:	6023      	str	r3, [r4, #0]
 8019b52:	bd38      	pop	{r3, r4, r5, pc}
 8019b54:	2000d0ac 	.word	0x2000d0ac

08019b58 <__errno>:
 8019b58:	4b01      	ldr	r3, [pc, #4]	; (8019b60 <__errno+0x8>)
 8019b5a:	6818      	ldr	r0, [r3, #0]
 8019b5c:	4770      	bx	lr
 8019b5e:	bf00      	nop
 8019b60:	20000098 	.word	0x20000098

08019b64 <__libc_init_array>:
 8019b64:	b570      	push	{r4, r5, r6, lr}
 8019b66:	4d0d      	ldr	r5, [pc, #52]	; (8019b9c <__libc_init_array+0x38>)
 8019b68:	4c0d      	ldr	r4, [pc, #52]	; (8019ba0 <__libc_init_array+0x3c>)
 8019b6a:	1b64      	subs	r4, r4, r5
 8019b6c:	10a4      	asrs	r4, r4, #2
 8019b6e:	2600      	movs	r6, #0
 8019b70:	42a6      	cmp	r6, r4
 8019b72:	d109      	bne.n	8019b88 <__libc_init_array+0x24>
 8019b74:	4d0b      	ldr	r5, [pc, #44]	; (8019ba4 <__libc_init_array+0x40>)
 8019b76:	4c0c      	ldr	r4, [pc, #48]	; (8019ba8 <__libc_init_array+0x44>)
 8019b78:	f000 fe58 	bl	801a82c <_init>
 8019b7c:	1b64      	subs	r4, r4, r5
 8019b7e:	10a4      	asrs	r4, r4, #2
 8019b80:	2600      	movs	r6, #0
 8019b82:	42a6      	cmp	r6, r4
 8019b84:	d105      	bne.n	8019b92 <__libc_init_array+0x2e>
 8019b86:	bd70      	pop	{r4, r5, r6, pc}
 8019b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b8c:	4798      	blx	r3
 8019b8e:	3601      	adds	r6, #1
 8019b90:	e7ee      	b.n	8019b70 <__libc_init_array+0xc>
 8019b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b96:	4798      	blx	r3
 8019b98:	3601      	adds	r6, #1
 8019b9a:	e7f2      	b.n	8019b82 <__libc_init_array+0x1e>
 8019b9c:	08020144 	.word	0x08020144
 8019ba0:	08020144 	.word	0x08020144
 8019ba4:	08020144 	.word	0x08020144
 8019ba8:	08020148 	.word	0x08020148

08019bac <__retarget_lock_acquire_recursive>:
 8019bac:	4770      	bx	lr

08019bae <__retarget_lock_release_recursive>:
 8019bae:	4770      	bx	lr

08019bb0 <strcpy>:
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019bb6:	f803 2b01 	strb.w	r2, [r3], #1
 8019bba:	2a00      	cmp	r2, #0
 8019bbc:	d1f9      	bne.n	8019bb2 <strcpy+0x2>
 8019bbe:	4770      	bx	lr

08019bc0 <memcpy>:
 8019bc0:	440a      	add	r2, r1
 8019bc2:	4291      	cmp	r1, r2
 8019bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8019bc8:	d100      	bne.n	8019bcc <memcpy+0xc>
 8019bca:	4770      	bx	lr
 8019bcc:	b510      	push	{r4, lr}
 8019bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019bd6:	4291      	cmp	r1, r2
 8019bd8:	d1f9      	bne.n	8019bce <memcpy+0xe>
 8019bda:	bd10      	pop	{r4, pc}

08019bdc <__assert_func>:
 8019bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019bde:	4614      	mov	r4, r2
 8019be0:	461a      	mov	r2, r3
 8019be2:	4b09      	ldr	r3, [pc, #36]	; (8019c08 <__assert_func+0x2c>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4605      	mov	r5, r0
 8019be8:	68d8      	ldr	r0, [r3, #12]
 8019bea:	b14c      	cbz	r4, 8019c00 <__assert_func+0x24>
 8019bec:	4b07      	ldr	r3, [pc, #28]	; (8019c0c <__assert_func+0x30>)
 8019bee:	9100      	str	r1, [sp, #0]
 8019bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019bf4:	4906      	ldr	r1, [pc, #24]	; (8019c10 <__assert_func+0x34>)
 8019bf6:	462b      	mov	r3, r5
 8019bf8:	f000 fc44 	bl	801a484 <fiprintf>
 8019bfc:	f000 fcfa 	bl	801a5f4 <abort>
 8019c00:	4b04      	ldr	r3, [pc, #16]	; (8019c14 <__assert_func+0x38>)
 8019c02:	461c      	mov	r4, r3
 8019c04:	e7f3      	b.n	8019bee <__assert_func+0x12>
 8019c06:	bf00      	nop
 8019c08:	20000098 	.word	0x20000098
 8019c0c:	080200cd 	.word	0x080200cd
 8019c10:	080200da 	.word	0x080200da
 8019c14:	08020108 	.word	0x08020108

08019c18 <malloc>:
 8019c18:	4b02      	ldr	r3, [pc, #8]	; (8019c24 <malloc+0xc>)
 8019c1a:	4601      	mov	r1, r0
 8019c1c:	6818      	ldr	r0, [r3, #0]
 8019c1e:	f000 b823 	b.w	8019c68 <_malloc_r>
 8019c22:	bf00      	nop
 8019c24:	20000098 	.word	0x20000098

08019c28 <sbrk_aligned>:
 8019c28:	b570      	push	{r4, r5, r6, lr}
 8019c2a:	4e0e      	ldr	r6, [pc, #56]	; (8019c64 <sbrk_aligned+0x3c>)
 8019c2c:	460c      	mov	r4, r1
 8019c2e:	6831      	ldr	r1, [r6, #0]
 8019c30:	4605      	mov	r5, r0
 8019c32:	b911      	cbnz	r1, 8019c3a <sbrk_aligned+0x12>
 8019c34:	f000 fcce 	bl	801a5d4 <_sbrk_r>
 8019c38:	6030      	str	r0, [r6, #0]
 8019c3a:	4621      	mov	r1, r4
 8019c3c:	4628      	mov	r0, r5
 8019c3e:	f000 fcc9 	bl	801a5d4 <_sbrk_r>
 8019c42:	1c43      	adds	r3, r0, #1
 8019c44:	d00a      	beq.n	8019c5c <sbrk_aligned+0x34>
 8019c46:	1cc4      	adds	r4, r0, #3
 8019c48:	f024 0403 	bic.w	r4, r4, #3
 8019c4c:	42a0      	cmp	r0, r4
 8019c4e:	d007      	beq.n	8019c60 <sbrk_aligned+0x38>
 8019c50:	1a21      	subs	r1, r4, r0
 8019c52:	4628      	mov	r0, r5
 8019c54:	f000 fcbe 	bl	801a5d4 <_sbrk_r>
 8019c58:	3001      	adds	r0, #1
 8019c5a:	d101      	bne.n	8019c60 <sbrk_aligned+0x38>
 8019c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8019c60:	4620      	mov	r0, r4
 8019c62:	bd70      	pop	{r4, r5, r6, pc}
 8019c64:	2000d1f8 	.word	0x2000d1f8

08019c68 <_malloc_r>:
 8019c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c6c:	1ccd      	adds	r5, r1, #3
 8019c6e:	f025 0503 	bic.w	r5, r5, #3
 8019c72:	3508      	adds	r5, #8
 8019c74:	2d0c      	cmp	r5, #12
 8019c76:	bf38      	it	cc
 8019c78:	250c      	movcc	r5, #12
 8019c7a:	2d00      	cmp	r5, #0
 8019c7c:	4607      	mov	r7, r0
 8019c7e:	db01      	blt.n	8019c84 <_malloc_r+0x1c>
 8019c80:	42a9      	cmp	r1, r5
 8019c82:	d905      	bls.n	8019c90 <_malloc_r+0x28>
 8019c84:	230c      	movs	r3, #12
 8019c86:	603b      	str	r3, [r7, #0]
 8019c88:	2600      	movs	r6, #0
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019d64 <_malloc_r+0xfc>
 8019c94:	f000 f868 	bl	8019d68 <__malloc_lock>
 8019c98:	f8d8 3000 	ldr.w	r3, [r8]
 8019c9c:	461c      	mov	r4, r3
 8019c9e:	bb5c      	cbnz	r4, 8019cf8 <_malloc_r+0x90>
 8019ca0:	4629      	mov	r1, r5
 8019ca2:	4638      	mov	r0, r7
 8019ca4:	f7ff ffc0 	bl	8019c28 <sbrk_aligned>
 8019ca8:	1c43      	adds	r3, r0, #1
 8019caa:	4604      	mov	r4, r0
 8019cac:	d155      	bne.n	8019d5a <_malloc_r+0xf2>
 8019cae:	f8d8 4000 	ldr.w	r4, [r8]
 8019cb2:	4626      	mov	r6, r4
 8019cb4:	2e00      	cmp	r6, #0
 8019cb6:	d145      	bne.n	8019d44 <_malloc_r+0xdc>
 8019cb8:	2c00      	cmp	r4, #0
 8019cba:	d048      	beq.n	8019d4e <_malloc_r+0xe6>
 8019cbc:	6823      	ldr	r3, [r4, #0]
 8019cbe:	4631      	mov	r1, r6
 8019cc0:	4638      	mov	r0, r7
 8019cc2:	eb04 0903 	add.w	r9, r4, r3
 8019cc6:	f000 fc85 	bl	801a5d4 <_sbrk_r>
 8019cca:	4581      	cmp	r9, r0
 8019ccc:	d13f      	bne.n	8019d4e <_malloc_r+0xe6>
 8019cce:	6821      	ldr	r1, [r4, #0]
 8019cd0:	1a6d      	subs	r5, r5, r1
 8019cd2:	4629      	mov	r1, r5
 8019cd4:	4638      	mov	r0, r7
 8019cd6:	f7ff ffa7 	bl	8019c28 <sbrk_aligned>
 8019cda:	3001      	adds	r0, #1
 8019cdc:	d037      	beq.n	8019d4e <_malloc_r+0xe6>
 8019cde:	6823      	ldr	r3, [r4, #0]
 8019ce0:	442b      	add	r3, r5
 8019ce2:	6023      	str	r3, [r4, #0]
 8019ce4:	f8d8 3000 	ldr.w	r3, [r8]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d038      	beq.n	8019d5e <_malloc_r+0xf6>
 8019cec:	685a      	ldr	r2, [r3, #4]
 8019cee:	42a2      	cmp	r2, r4
 8019cf0:	d12b      	bne.n	8019d4a <_malloc_r+0xe2>
 8019cf2:	2200      	movs	r2, #0
 8019cf4:	605a      	str	r2, [r3, #4]
 8019cf6:	e00f      	b.n	8019d18 <_malloc_r+0xb0>
 8019cf8:	6822      	ldr	r2, [r4, #0]
 8019cfa:	1b52      	subs	r2, r2, r5
 8019cfc:	d41f      	bmi.n	8019d3e <_malloc_r+0xd6>
 8019cfe:	2a0b      	cmp	r2, #11
 8019d00:	d917      	bls.n	8019d32 <_malloc_r+0xca>
 8019d02:	1961      	adds	r1, r4, r5
 8019d04:	42a3      	cmp	r3, r4
 8019d06:	6025      	str	r5, [r4, #0]
 8019d08:	bf18      	it	ne
 8019d0a:	6059      	strne	r1, [r3, #4]
 8019d0c:	6863      	ldr	r3, [r4, #4]
 8019d0e:	bf08      	it	eq
 8019d10:	f8c8 1000 	streq.w	r1, [r8]
 8019d14:	5162      	str	r2, [r4, r5]
 8019d16:	604b      	str	r3, [r1, #4]
 8019d18:	4638      	mov	r0, r7
 8019d1a:	f104 060b 	add.w	r6, r4, #11
 8019d1e:	f000 f829 	bl	8019d74 <__malloc_unlock>
 8019d22:	f026 0607 	bic.w	r6, r6, #7
 8019d26:	1d23      	adds	r3, r4, #4
 8019d28:	1af2      	subs	r2, r6, r3
 8019d2a:	d0ae      	beq.n	8019c8a <_malloc_r+0x22>
 8019d2c:	1b9b      	subs	r3, r3, r6
 8019d2e:	50a3      	str	r3, [r4, r2]
 8019d30:	e7ab      	b.n	8019c8a <_malloc_r+0x22>
 8019d32:	42a3      	cmp	r3, r4
 8019d34:	6862      	ldr	r2, [r4, #4]
 8019d36:	d1dd      	bne.n	8019cf4 <_malloc_r+0x8c>
 8019d38:	f8c8 2000 	str.w	r2, [r8]
 8019d3c:	e7ec      	b.n	8019d18 <_malloc_r+0xb0>
 8019d3e:	4623      	mov	r3, r4
 8019d40:	6864      	ldr	r4, [r4, #4]
 8019d42:	e7ac      	b.n	8019c9e <_malloc_r+0x36>
 8019d44:	4634      	mov	r4, r6
 8019d46:	6876      	ldr	r6, [r6, #4]
 8019d48:	e7b4      	b.n	8019cb4 <_malloc_r+0x4c>
 8019d4a:	4613      	mov	r3, r2
 8019d4c:	e7cc      	b.n	8019ce8 <_malloc_r+0x80>
 8019d4e:	230c      	movs	r3, #12
 8019d50:	603b      	str	r3, [r7, #0]
 8019d52:	4638      	mov	r0, r7
 8019d54:	f000 f80e 	bl	8019d74 <__malloc_unlock>
 8019d58:	e797      	b.n	8019c8a <_malloc_r+0x22>
 8019d5a:	6025      	str	r5, [r4, #0]
 8019d5c:	e7dc      	b.n	8019d18 <_malloc_r+0xb0>
 8019d5e:	605b      	str	r3, [r3, #4]
 8019d60:	deff      	udf	#255	; 0xff
 8019d62:	bf00      	nop
 8019d64:	2000d1f4 	.word	0x2000d1f4

08019d68 <__malloc_lock>:
 8019d68:	4801      	ldr	r0, [pc, #4]	; (8019d70 <__malloc_lock+0x8>)
 8019d6a:	f7ff bf1f 	b.w	8019bac <__retarget_lock_acquire_recursive>
 8019d6e:	bf00      	nop
 8019d70:	2000d1f0 	.word	0x2000d1f0

08019d74 <__malloc_unlock>:
 8019d74:	4801      	ldr	r0, [pc, #4]	; (8019d7c <__malloc_unlock+0x8>)
 8019d76:	f7ff bf1a 	b.w	8019bae <__retarget_lock_release_recursive>
 8019d7a:	bf00      	nop
 8019d7c:	2000d1f0 	.word	0x2000d1f0

08019d80 <__sfputc_r>:
 8019d80:	6893      	ldr	r3, [r2, #8]
 8019d82:	3b01      	subs	r3, #1
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	b410      	push	{r4}
 8019d88:	6093      	str	r3, [r2, #8]
 8019d8a:	da08      	bge.n	8019d9e <__sfputc_r+0x1e>
 8019d8c:	6994      	ldr	r4, [r2, #24]
 8019d8e:	42a3      	cmp	r3, r4
 8019d90:	db01      	blt.n	8019d96 <__sfputc_r+0x16>
 8019d92:	290a      	cmp	r1, #10
 8019d94:	d103      	bne.n	8019d9e <__sfputc_r+0x1e>
 8019d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d9a:	f000 bb85 	b.w	801a4a8 <__swbuf_r>
 8019d9e:	6813      	ldr	r3, [r2, #0]
 8019da0:	1c58      	adds	r0, r3, #1
 8019da2:	6010      	str	r0, [r2, #0]
 8019da4:	7019      	strb	r1, [r3, #0]
 8019da6:	4608      	mov	r0, r1
 8019da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019dac:	4770      	bx	lr

08019dae <__sfputs_r>:
 8019dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019db0:	4606      	mov	r6, r0
 8019db2:	460f      	mov	r7, r1
 8019db4:	4614      	mov	r4, r2
 8019db6:	18d5      	adds	r5, r2, r3
 8019db8:	42ac      	cmp	r4, r5
 8019dba:	d101      	bne.n	8019dc0 <__sfputs_r+0x12>
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	e007      	b.n	8019dd0 <__sfputs_r+0x22>
 8019dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dc4:	463a      	mov	r2, r7
 8019dc6:	4630      	mov	r0, r6
 8019dc8:	f7ff ffda 	bl	8019d80 <__sfputc_r>
 8019dcc:	1c43      	adds	r3, r0, #1
 8019dce:	d1f3      	bne.n	8019db8 <__sfputs_r+0xa>
 8019dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019dd4 <_vfiprintf_r>:
 8019dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd8:	460d      	mov	r5, r1
 8019dda:	b09d      	sub	sp, #116	; 0x74
 8019ddc:	4614      	mov	r4, r2
 8019dde:	4698      	mov	r8, r3
 8019de0:	4606      	mov	r6, r0
 8019de2:	b118      	cbz	r0, 8019dec <_vfiprintf_r+0x18>
 8019de4:	6a03      	ldr	r3, [r0, #32]
 8019de6:	b90b      	cbnz	r3, 8019dec <_vfiprintf_r+0x18>
 8019de8:	f7ff fdae 	bl	8019948 <__sinit>
 8019dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019dee:	07d9      	lsls	r1, r3, #31
 8019df0:	d405      	bmi.n	8019dfe <_vfiprintf_r+0x2a>
 8019df2:	89ab      	ldrh	r3, [r5, #12]
 8019df4:	059a      	lsls	r2, r3, #22
 8019df6:	d402      	bmi.n	8019dfe <_vfiprintf_r+0x2a>
 8019df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019dfa:	f7ff fed7 	bl	8019bac <__retarget_lock_acquire_recursive>
 8019dfe:	89ab      	ldrh	r3, [r5, #12]
 8019e00:	071b      	lsls	r3, r3, #28
 8019e02:	d501      	bpl.n	8019e08 <_vfiprintf_r+0x34>
 8019e04:	692b      	ldr	r3, [r5, #16]
 8019e06:	b99b      	cbnz	r3, 8019e30 <_vfiprintf_r+0x5c>
 8019e08:	4629      	mov	r1, r5
 8019e0a:	4630      	mov	r0, r6
 8019e0c:	f000 fb8a 	bl	801a524 <__swsetup_r>
 8019e10:	b170      	cbz	r0, 8019e30 <_vfiprintf_r+0x5c>
 8019e12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019e14:	07dc      	lsls	r4, r3, #31
 8019e16:	d504      	bpl.n	8019e22 <_vfiprintf_r+0x4e>
 8019e18:	f04f 30ff 	mov.w	r0, #4294967295
 8019e1c:	b01d      	add	sp, #116	; 0x74
 8019e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e22:	89ab      	ldrh	r3, [r5, #12]
 8019e24:	0598      	lsls	r0, r3, #22
 8019e26:	d4f7      	bmi.n	8019e18 <_vfiprintf_r+0x44>
 8019e28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019e2a:	f7ff fec0 	bl	8019bae <__retarget_lock_release_recursive>
 8019e2e:	e7f3      	b.n	8019e18 <_vfiprintf_r+0x44>
 8019e30:	2300      	movs	r3, #0
 8019e32:	9309      	str	r3, [sp, #36]	; 0x24
 8019e34:	2320      	movs	r3, #32
 8019e36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e3e:	2330      	movs	r3, #48	; 0x30
 8019e40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019ff4 <_vfiprintf_r+0x220>
 8019e44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e48:	f04f 0901 	mov.w	r9, #1
 8019e4c:	4623      	mov	r3, r4
 8019e4e:	469a      	mov	sl, r3
 8019e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e54:	b10a      	cbz	r2, 8019e5a <_vfiprintf_r+0x86>
 8019e56:	2a25      	cmp	r2, #37	; 0x25
 8019e58:	d1f9      	bne.n	8019e4e <_vfiprintf_r+0x7a>
 8019e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8019e5e:	d00b      	beq.n	8019e78 <_vfiprintf_r+0xa4>
 8019e60:	465b      	mov	r3, fp
 8019e62:	4622      	mov	r2, r4
 8019e64:	4629      	mov	r1, r5
 8019e66:	4630      	mov	r0, r6
 8019e68:	f7ff ffa1 	bl	8019dae <__sfputs_r>
 8019e6c:	3001      	adds	r0, #1
 8019e6e:	f000 80a9 	beq.w	8019fc4 <_vfiprintf_r+0x1f0>
 8019e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e74:	445a      	add	r2, fp
 8019e76:	9209      	str	r2, [sp, #36]	; 0x24
 8019e78:	f89a 3000 	ldrb.w	r3, [sl]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	f000 80a1 	beq.w	8019fc4 <_vfiprintf_r+0x1f0>
 8019e82:	2300      	movs	r3, #0
 8019e84:	f04f 32ff 	mov.w	r2, #4294967295
 8019e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e8c:	f10a 0a01 	add.w	sl, sl, #1
 8019e90:	9304      	str	r3, [sp, #16]
 8019e92:	9307      	str	r3, [sp, #28]
 8019e94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e98:	931a      	str	r3, [sp, #104]	; 0x68
 8019e9a:	4654      	mov	r4, sl
 8019e9c:	2205      	movs	r2, #5
 8019e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ea2:	4854      	ldr	r0, [pc, #336]	; (8019ff4 <_vfiprintf_r+0x220>)
 8019ea4:	f7e6 f9cc 	bl	8000240 <memchr>
 8019ea8:	9a04      	ldr	r2, [sp, #16]
 8019eaa:	b9d8      	cbnz	r0, 8019ee4 <_vfiprintf_r+0x110>
 8019eac:	06d1      	lsls	r1, r2, #27
 8019eae:	bf44      	itt	mi
 8019eb0:	2320      	movmi	r3, #32
 8019eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019eb6:	0713      	lsls	r3, r2, #28
 8019eb8:	bf44      	itt	mi
 8019eba:	232b      	movmi	r3, #43	; 0x2b
 8019ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8019ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8019ec6:	d015      	beq.n	8019ef4 <_vfiprintf_r+0x120>
 8019ec8:	9a07      	ldr	r2, [sp, #28]
 8019eca:	4654      	mov	r4, sl
 8019ecc:	2000      	movs	r0, #0
 8019ece:	f04f 0c0a 	mov.w	ip, #10
 8019ed2:	4621      	mov	r1, r4
 8019ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ed8:	3b30      	subs	r3, #48	; 0x30
 8019eda:	2b09      	cmp	r3, #9
 8019edc:	d94d      	bls.n	8019f7a <_vfiprintf_r+0x1a6>
 8019ede:	b1b0      	cbz	r0, 8019f0e <_vfiprintf_r+0x13a>
 8019ee0:	9207      	str	r2, [sp, #28]
 8019ee2:	e014      	b.n	8019f0e <_vfiprintf_r+0x13a>
 8019ee4:	eba0 0308 	sub.w	r3, r0, r8
 8019ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8019eec:	4313      	orrs	r3, r2
 8019eee:	9304      	str	r3, [sp, #16]
 8019ef0:	46a2      	mov	sl, r4
 8019ef2:	e7d2      	b.n	8019e9a <_vfiprintf_r+0xc6>
 8019ef4:	9b03      	ldr	r3, [sp, #12]
 8019ef6:	1d19      	adds	r1, r3, #4
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	9103      	str	r1, [sp, #12]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	bfbb      	ittet	lt
 8019f00:	425b      	neglt	r3, r3
 8019f02:	f042 0202 	orrlt.w	r2, r2, #2
 8019f06:	9307      	strge	r3, [sp, #28]
 8019f08:	9307      	strlt	r3, [sp, #28]
 8019f0a:	bfb8      	it	lt
 8019f0c:	9204      	strlt	r2, [sp, #16]
 8019f0e:	7823      	ldrb	r3, [r4, #0]
 8019f10:	2b2e      	cmp	r3, #46	; 0x2e
 8019f12:	d10c      	bne.n	8019f2e <_vfiprintf_r+0x15a>
 8019f14:	7863      	ldrb	r3, [r4, #1]
 8019f16:	2b2a      	cmp	r3, #42	; 0x2a
 8019f18:	d134      	bne.n	8019f84 <_vfiprintf_r+0x1b0>
 8019f1a:	9b03      	ldr	r3, [sp, #12]
 8019f1c:	1d1a      	adds	r2, r3, #4
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	9203      	str	r2, [sp, #12]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	bfb8      	it	lt
 8019f26:	f04f 33ff 	movlt.w	r3, #4294967295
 8019f2a:	3402      	adds	r4, #2
 8019f2c:	9305      	str	r3, [sp, #20]
 8019f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a004 <_vfiprintf_r+0x230>
 8019f32:	7821      	ldrb	r1, [r4, #0]
 8019f34:	2203      	movs	r2, #3
 8019f36:	4650      	mov	r0, sl
 8019f38:	f7e6 f982 	bl	8000240 <memchr>
 8019f3c:	b138      	cbz	r0, 8019f4e <_vfiprintf_r+0x17a>
 8019f3e:	9b04      	ldr	r3, [sp, #16]
 8019f40:	eba0 000a 	sub.w	r0, r0, sl
 8019f44:	2240      	movs	r2, #64	; 0x40
 8019f46:	4082      	lsls	r2, r0
 8019f48:	4313      	orrs	r3, r2
 8019f4a:	3401      	adds	r4, #1
 8019f4c:	9304      	str	r3, [sp, #16]
 8019f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f52:	4829      	ldr	r0, [pc, #164]	; (8019ff8 <_vfiprintf_r+0x224>)
 8019f54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f58:	2206      	movs	r2, #6
 8019f5a:	f7e6 f971 	bl	8000240 <memchr>
 8019f5e:	2800      	cmp	r0, #0
 8019f60:	d03f      	beq.n	8019fe2 <_vfiprintf_r+0x20e>
 8019f62:	4b26      	ldr	r3, [pc, #152]	; (8019ffc <_vfiprintf_r+0x228>)
 8019f64:	bb1b      	cbnz	r3, 8019fae <_vfiprintf_r+0x1da>
 8019f66:	9b03      	ldr	r3, [sp, #12]
 8019f68:	3307      	adds	r3, #7
 8019f6a:	f023 0307 	bic.w	r3, r3, #7
 8019f6e:	3308      	adds	r3, #8
 8019f70:	9303      	str	r3, [sp, #12]
 8019f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f74:	443b      	add	r3, r7
 8019f76:	9309      	str	r3, [sp, #36]	; 0x24
 8019f78:	e768      	b.n	8019e4c <_vfiprintf_r+0x78>
 8019f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f7e:	460c      	mov	r4, r1
 8019f80:	2001      	movs	r0, #1
 8019f82:	e7a6      	b.n	8019ed2 <_vfiprintf_r+0xfe>
 8019f84:	2300      	movs	r3, #0
 8019f86:	3401      	adds	r4, #1
 8019f88:	9305      	str	r3, [sp, #20]
 8019f8a:	4619      	mov	r1, r3
 8019f8c:	f04f 0c0a 	mov.w	ip, #10
 8019f90:	4620      	mov	r0, r4
 8019f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f96:	3a30      	subs	r2, #48	; 0x30
 8019f98:	2a09      	cmp	r2, #9
 8019f9a:	d903      	bls.n	8019fa4 <_vfiprintf_r+0x1d0>
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d0c6      	beq.n	8019f2e <_vfiprintf_r+0x15a>
 8019fa0:	9105      	str	r1, [sp, #20]
 8019fa2:	e7c4      	b.n	8019f2e <_vfiprintf_r+0x15a>
 8019fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8019fa8:	4604      	mov	r4, r0
 8019faa:	2301      	movs	r3, #1
 8019fac:	e7f0      	b.n	8019f90 <_vfiprintf_r+0x1bc>
 8019fae:	ab03      	add	r3, sp, #12
 8019fb0:	9300      	str	r3, [sp, #0]
 8019fb2:	462a      	mov	r2, r5
 8019fb4:	4b12      	ldr	r3, [pc, #72]	; (801a000 <_vfiprintf_r+0x22c>)
 8019fb6:	a904      	add	r1, sp, #16
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f3af 8000 	nop.w
 8019fbe:	4607      	mov	r7, r0
 8019fc0:	1c78      	adds	r0, r7, #1
 8019fc2:	d1d6      	bne.n	8019f72 <_vfiprintf_r+0x19e>
 8019fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019fc6:	07d9      	lsls	r1, r3, #31
 8019fc8:	d405      	bmi.n	8019fd6 <_vfiprintf_r+0x202>
 8019fca:	89ab      	ldrh	r3, [r5, #12]
 8019fcc:	059a      	lsls	r2, r3, #22
 8019fce:	d402      	bmi.n	8019fd6 <_vfiprintf_r+0x202>
 8019fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019fd2:	f7ff fdec 	bl	8019bae <__retarget_lock_release_recursive>
 8019fd6:	89ab      	ldrh	r3, [r5, #12]
 8019fd8:	065b      	lsls	r3, r3, #25
 8019fda:	f53f af1d 	bmi.w	8019e18 <_vfiprintf_r+0x44>
 8019fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019fe0:	e71c      	b.n	8019e1c <_vfiprintf_r+0x48>
 8019fe2:	ab03      	add	r3, sp, #12
 8019fe4:	9300      	str	r3, [sp, #0]
 8019fe6:	462a      	mov	r2, r5
 8019fe8:	4b05      	ldr	r3, [pc, #20]	; (801a000 <_vfiprintf_r+0x22c>)
 8019fea:	a904      	add	r1, sp, #16
 8019fec:	4630      	mov	r0, r6
 8019fee:	f000 f879 	bl	801a0e4 <_printf_i>
 8019ff2:	e7e4      	b.n	8019fbe <_vfiprintf_r+0x1ea>
 8019ff4:	08020109 	.word	0x08020109
 8019ff8:	08020113 	.word	0x08020113
 8019ffc:	00000000 	.word	0x00000000
 801a000:	08019daf 	.word	0x08019daf
 801a004:	0802010f 	.word	0x0802010f

0801a008 <_printf_common>:
 801a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a00c:	4616      	mov	r6, r2
 801a00e:	4699      	mov	r9, r3
 801a010:	688a      	ldr	r2, [r1, #8]
 801a012:	690b      	ldr	r3, [r1, #16]
 801a014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a018:	4293      	cmp	r3, r2
 801a01a:	bfb8      	it	lt
 801a01c:	4613      	movlt	r3, r2
 801a01e:	6033      	str	r3, [r6, #0]
 801a020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a024:	4607      	mov	r7, r0
 801a026:	460c      	mov	r4, r1
 801a028:	b10a      	cbz	r2, 801a02e <_printf_common+0x26>
 801a02a:	3301      	adds	r3, #1
 801a02c:	6033      	str	r3, [r6, #0]
 801a02e:	6823      	ldr	r3, [r4, #0]
 801a030:	0699      	lsls	r1, r3, #26
 801a032:	bf42      	ittt	mi
 801a034:	6833      	ldrmi	r3, [r6, #0]
 801a036:	3302      	addmi	r3, #2
 801a038:	6033      	strmi	r3, [r6, #0]
 801a03a:	6825      	ldr	r5, [r4, #0]
 801a03c:	f015 0506 	ands.w	r5, r5, #6
 801a040:	d106      	bne.n	801a050 <_printf_common+0x48>
 801a042:	f104 0a19 	add.w	sl, r4, #25
 801a046:	68e3      	ldr	r3, [r4, #12]
 801a048:	6832      	ldr	r2, [r6, #0]
 801a04a:	1a9b      	subs	r3, r3, r2
 801a04c:	42ab      	cmp	r3, r5
 801a04e:	dc26      	bgt.n	801a09e <_printf_common+0x96>
 801a050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a054:	1e13      	subs	r3, r2, #0
 801a056:	6822      	ldr	r2, [r4, #0]
 801a058:	bf18      	it	ne
 801a05a:	2301      	movne	r3, #1
 801a05c:	0692      	lsls	r2, r2, #26
 801a05e:	d42b      	bmi.n	801a0b8 <_printf_common+0xb0>
 801a060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a064:	4649      	mov	r1, r9
 801a066:	4638      	mov	r0, r7
 801a068:	47c0      	blx	r8
 801a06a:	3001      	adds	r0, #1
 801a06c:	d01e      	beq.n	801a0ac <_printf_common+0xa4>
 801a06e:	6823      	ldr	r3, [r4, #0]
 801a070:	6922      	ldr	r2, [r4, #16]
 801a072:	f003 0306 	and.w	r3, r3, #6
 801a076:	2b04      	cmp	r3, #4
 801a078:	bf02      	ittt	eq
 801a07a:	68e5      	ldreq	r5, [r4, #12]
 801a07c:	6833      	ldreq	r3, [r6, #0]
 801a07e:	1aed      	subeq	r5, r5, r3
 801a080:	68a3      	ldr	r3, [r4, #8]
 801a082:	bf0c      	ite	eq
 801a084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a088:	2500      	movne	r5, #0
 801a08a:	4293      	cmp	r3, r2
 801a08c:	bfc4      	itt	gt
 801a08e:	1a9b      	subgt	r3, r3, r2
 801a090:	18ed      	addgt	r5, r5, r3
 801a092:	2600      	movs	r6, #0
 801a094:	341a      	adds	r4, #26
 801a096:	42b5      	cmp	r5, r6
 801a098:	d11a      	bne.n	801a0d0 <_printf_common+0xc8>
 801a09a:	2000      	movs	r0, #0
 801a09c:	e008      	b.n	801a0b0 <_printf_common+0xa8>
 801a09e:	2301      	movs	r3, #1
 801a0a0:	4652      	mov	r2, sl
 801a0a2:	4649      	mov	r1, r9
 801a0a4:	4638      	mov	r0, r7
 801a0a6:	47c0      	blx	r8
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	d103      	bne.n	801a0b4 <_printf_common+0xac>
 801a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0b4:	3501      	adds	r5, #1
 801a0b6:	e7c6      	b.n	801a046 <_printf_common+0x3e>
 801a0b8:	18e1      	adds	r1, r4, r3
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	2030      	movs	r0, #48	; 0x30
 801a0be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a0c2:	4422      	add	r2, r4
 801a0c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a0c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a0cc:	3302      	adds	r3, #2
 801a0ce:	e7c7      	b.n	801a060 <_printf_common+0x58>
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	4622      	mov	r2, r4
 801a0d4:	4649      	mov	r1, r9
 801a0d6:	4638      	mov	r0, r7
 801a0d8:	47c0      	blx	r8
 801a0da:	3001      	adds	r0, #1
 801a0dc:	d0e6      	beq.n	801a0ac <_printf_common+0xa4>
 801a0de:	3601      	adds	r6, #1
 801a0e0:	e7d9      	b.n	801a096 <_printf_common+0x8e>
	...

0801a0e4 <_printf_i>:
 801a0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a0e8:	7e0f      	ldrb	r7, [r1, #24]
 801a0ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a0ec:	2f78      	cmp	r7, #120	; 0x78
 801a0ee:	4691      	mov	r9, r2
 801a0f0:	4680      	mov	r8, r0
 801a0f2:	460c      	mov	r4, r1
 801a0f4:	469a      	mov	sl, r3
 801a0f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a0fa:	d807      	bhi.n	801a10c <_printf_i+0x28>
 801a0fc:	2f62      	cmp	r7, #98	; 0x62
 801a0fe:	d80a      	bhi.n	801a116 <_printf_i+0x32>
 801a100:	2f00      	cmp	r7, #0
 801a102:	f000 80d4 	beq.w	801a2ae <_printf_i+0x1ca>
 801a106:	2f58      	cmp	r7, #88	; 0x58
 801a108:	f000 80c0 	beq.w	801a28c <_printf_i+0x1a8>
 801a10c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a114:	e03a      	b.n	801a18c <_printf_i+0xa8>
 801a116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a11a:	2b15      	cmp	r3, #21
 801a11c:	d8f6      	bhi.n	801a10c <_printf_i+0x28>
 801a11e:	a101      	add	r1, pc, #4	; (adr r1, 801a124 <_printf_i+0x40>)
 801a120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a124:	0801a17d 	.word	0x0801a17d
 801a128:	0801a191 	.word	0x0801a191
 801a12c:	0801a10d 	.word	0x0801a10d
 801a130:	0801a10d 	.word	0x0801a10d
 801a134:	0801a10d 	.word	0x0801a10d
 801a138:	0801a10d 	.word	0x0801a10d
 801a13c:	0801a191 	.word	0x0801a191
 801a140:	0801a10d 	.word	0x0801a10d
 801a144:	0801a10d 	.word	0x0801a10d
 801a148:	0801a10d 	.word	0x0801a10d
 801a14c:	0801a10d 	.word	0x0801a10d
 801a150:	0801a295 	.word	0x0801a295
 801a154:	0801a1bd 	.word	0x0801a1bd
 801a158:	0801a24f 	.word	0x0801a24f
 801a15c:	0801a10d 	.word	0x0801a10d
 801a160:	0801a10d 	.word	0x0801a10d
 801a164:	0801a2b7 	.word	0x0801a2b7
 801a168:	0801a10d 	.word	0x0801a10d
 801a16c:	0801a1bd 	.word	0x0801a1bd
 801a170:	0801a10d 	.word	0x0801a10d
 801a174:	0801a10d 	.word	0x0801a10d
 801a178:	0801a257 	.word	0x0801a257
 801a17c:	682b      	ldr	r3, [r5, #0]
 801a17e:	1d1a      	adds	r2, r3, #4
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	602a      	str	r2, [r5, #0]
 801a184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a18c:	2301      	movs	r3, #1
 801a18e:	e09f      	b.n	801a2d0 <_printf_i+0x1ec>
 801a190:	6820      	ldr	r0, [r4, #0]
 801a192:	682b      	ldr	r3, [r5, #0]
 801a194:	0607      	lsls	r7, r0, #24
 801a196:	f103 0104 	add.w	r1, r3, #4
 801a19a:	6029      	str	r1, [r5, #0]
 801a19c:	d501      	bpl.n	801a1a2 <_printf_i+0xbe>
 801a19e:	681e      	ldr	r6, [r3, #0]
 801a1a0:	e003      	b.n	801a1aa <_printf_i+0xc6>
 801a1a2:	0646      	lsls	r6, r0, #25
 801a1a4:	d5fb      	bpl.n	801a19e <_printf_i+0xba>
 801a1a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a1aa:	2e00      	cmp	r6, #0
 801a1ac:	da03      	bge.n	801a1b6 <_printf_i+0xd2>
 801a1ae:	232d      	movs	r3, #45	; 0x2d
 801a1b0:	4276      	negs	r6, r6
 801a1b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a1b6:	485a      	ldr	r0, [pc, #360]	; (801a320 <_printf_i+0x23c>)
 801a1b8:	230a      	movs	r3, #10
 801a1ba:	e012      	b.n	801a1e2 <_printf_i+0xfe>
 801a1bc:	682b      	ldr	r3, [r5, #0]
 801a1be:	6820      	ldr	r0, [r4, #0]
 801a1c0:	1d19      	adds	r1, r3, #4
 801a1c2:	6029      	str	r1, [r5, #0]
 801a1c4:	0605      	lsls	r5, r0, #24
 801a1c6:	d501      	bpl.n	801a1cc <_printf_i+0xe8>
 801a1c8:	681e      	ldr	r6, [r3, #0]
 801a1ca:	e002      	b.n	801a1d2 <_printf_i+0xee>
 801a1cc:	0641      	lsls	r1, r0, #25
 801a1ce:	d5fb      	bpl.n	801a1c8 <_printf_i+0xe4>
 801a1d0:	881e      	ldrh	r6, [r3, #0]
 801a1d2:	4853      	ldr	r0, [pc, #332]	; (801a320 <_printf_i+0x23c>)
 801a1d4:	2f6f      	cmp	r7, #111	; 0x6f
 801a1d6:	bf0c      	ite	eq
 801a1d8:	2308      	moveq	r3, #8
 801a1da:	230a      	movne	r3, #10
 801a1dc:	2100      	movs	r1, #0
 801a1de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a1e2:	6865      	ldr	r5, [r4, #4]
 801a1e4:	60a5      	str	r5, [r4, #8]
 801a1e6:	2d00      	cmp	r5, #0
 801a1e8:	bfa2      	ittt	ge
 801a1ea:	6821      	ldrge	r1, [r4, #0]
 801a1ec:	f021 0104 	bicge.w	r1, r1, #4
 801a1f0:	6021      	strge	r1, [r4, #0]
 801a1f2:	b90e      	cbnz	r6, 801a1f8 <_printf_i+0x114>
 801a1f4:	2d00      	cmp	r5, #0
 801a1f6:	d04b      	beq.n	801a290 <_printf_i+0x1ac>
 801a1f8:	4615      	mov	r5, r2
 801a1fa:	fbb6 f1f3 	udiv	r1, r6, r3
 801a1fe:	fb03 6711 	mls	r7, r3, r1, r6
 801a202:	5dc7      	ldrb	r7, [r0, r7]
 801a204:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a208:	4637      	mov	r7, r6
 801a20a:	42bb      	cmp	r3, r7
 801a20c:	460e      	mov	r6, r1
 801a20e:	d9f4      	bls.n	801a1fa <_printf_i+0x116>
 801a210:	2b08      	cmp	r3, #8
 801a212:	d10b      	bne.n	801a22c <_printf_i+0x148>
 801a214:	6823      	ldr	r3, [r4, #0]
 801a216:	07de      	lsls	r6, r3, #31
 801a218:	d508      	bpl.n	801a22c <_printf_i+0x148>
 801a21a:	6923      	ldr	r3, [r4, #16]
 801a21c:	6861      	ldr	r1, [r4, #4]
 801a21e:	4299      	cmp	r1, r3
 801a220:	bfde      	ittt	le
 801a222:	2330      	movle	r3, #48	; 0x30
 801a224:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a228:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a22c:	1b52      	subs	r2, r2, r5
 801a22e:	6122      	str	r2, [r4, #16]
 801a230:	f8cd a000 	str.w	sl, [sp]
 801a234:	464b      	mov	r3, r9
 801a236:	aa03      	add	r2, sp, #12
 801a238:	4621      	mov	r1, r4
 801a23a:	4640      	mov	r0, r8
 801a23c:	f7ff fee4 	bl	801a008 <_printf_common>
 801a240:	3001      	adds	r0, #1
 801a242:	d14a      	bne.n	801a2da <_printf_i+0x1f6>
 801a244:	f04f 30ff 	mov.w	r0, #4294967295
 801a248:	b004      	add	sp, #16
 801a24a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a24e:	6823      	ldr	r3, [r4, #0]
 801a250:	f043 0320 	orr.w	r3, r3, #32
 801a254:	6023      	str	r3, [r4, #0]
 801a256:	4833      	ldr	r0, [pc, #204]	; (801a324 <_printf_i+0x240>)
 801a258:	2778      	movs	r7, #120	; 0x78
 801a25a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a25e:	6823      	ldr	r3, [r4, #0]
 801a260:	6829      	ldr	r1, [r5, #0]
 801a262:	061f      	lsls	r7, r3, #24
 801a264:	f851 6b04 	ldr.w	r6, [r1], #4
 801a268:	d402      	bmi.n	801a270 <_printf_i+0x18c>
 801a26a:	065f      	lsls	r7, r3, #25
 801a26c:	bf48      	it	mi
 801a26e:	b2b6      	uxthmi	r6, r6
 801a270:	07df      	lsls	r7, r3, #31
 801a272:	bf48      	it	mi
 801a274:	f043 0320 	orrmi.w	r3, r3, #32
 801a278:	6029      	str	r1, [r5, #0]
 801a27a:	bf48      	it	mi
 801a27c:	6023      	strmi	r3, [r4, #0]
 801a27e:	b91e      	cbnz	r6, 801a288 <_printf_i+0x1a4>
 801a280:	6823      	ldr	r3, [r4, #0]
 801a282:	f023 0320 	bic.w	r3, r3, #32
 801a286:	6023      	str	r3, [r4, #0]
 801a288:	2310      	movs	r3, #16
 801a28a:	e7a7      	b.n	801a1dc <_printf_i+0xf8>
 801a28c:	4824      	ldr	r0, [pc, #144]	; (801a320 <_printf_i+0x23c>)
 801a28e:	e7e4      	b.n	801a25a <_printf_i+0x176>
 801a290:	4615      	mov	r5, r2
 801a292:	e7bd      	b.n	801a210 <_printf_i+0x12c>
 801a294:	682b      	ldr	r3, [r5, #0]
 801a296:	6826      	ldr	r6, [r4, #0]
 801a298:	6961      	ldr	r1, [r4, #20]
 801a29a:	1d18      	adds	r0, r3, #4
 801a29c:	6028      	str	r0, [r5, #0]
 801a29e:	0635      	lsls	r5, r6, #24
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	d501      	bpl.n	801a2a8 <_printf_i+0x1c4>
 801a2a4:	6019      	str	r1, [r3, #0]
 801a2a6:	e002      	b.n	801a2ae <_printf_i+0x1ca>
 801a2a8:	0670      	lsls	r0, r6, #25
 801a2aa:	d5fb      	bpl.n	801a2a4 <_printf_i+0x1c0>
 801a2ac:	8019      	strh	r1, [r3, #0]
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	6123      	str	r3, [r4, #16]
 801a2b2:	4615      	mov	r5, r2
 801a2b4:	e7bc      	b.n	801a230 <_printf_i+0x14c>
 801a2b6:	682b      	ldr	r3, [r5, #0]
 801a2b8:	1d1a      	adds	r2, r3, #4
 801a2ba:	602a      	str	r2, [r5, #0]
 801a2bc:	681d      	ldr	r5, [r3, #0]
 801a2be:	6862      	ldr	r2, [r4, #4]
 801a2c0:	2100      	movs	r1, #0
 801a2c2:	4628      	mov	r0, r5
 801a2c4:	f7e5 ffbc 	bl	8000240 <memchr>
 801a2c8:	b108      	cbz	r0, 801a2ce <_printf_i+0x1ea>
 801a2ca:	1b40      	subs	r0, r0, r5
 801a2cc:	6060      	str	r0, [r4, #4]
 801a2ce:	6863      	ldr	r3, [r4, #4]
 801a2d0:	6123      	str	r3, [r4, #16]
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2d8:	e7aa      	b.n	801a230 <_printf_i+0x14c>
 801a2da:	6923      	ldr	r3, [r4, #16]
 801a2dc:	462a      	mov	r2, r5
 801a2de:	4649      	mov	r1, r9
 801a2e0:	4640      	mov	r0, r8
 801a2e2:	47d0      	blx	sl
 801a2e4:	3001      	adds	r0, #1
 801a2e6:	d0ad      	beq.n	801a244 <_printf_i+0x160>
 801a2e8:	6823      	ldr	r3, [r4, #0]
 801a2ea:	079b      	lsls	r3, r3, #30
 801a2ec:	d413      	bmi.n	801a316 <_printf_i+0x232>
 801a2ee:	68e0      	ldr	r0, [r4, #12]
 801a2f0:	9b03      	ldr	r3, [sp, #12]
 801a2f2:	4298      	cmp	r0, r3
 801a2f4:	bfb8      	it	lt
 801a2f6:	4618      	movlt	r0, r3
 801a2f8:	e7a6      	b.n	801a248 <_printf_i+0x164>
 801a2fa:	2301      	movs	r3, #1
 801a2fc:	4632      	mov	r2, r6
 801a2fe:	4649      	mov	r1, r9
 801a300:	4640      	mov	r0, r8
 801a302:	47d0      	blx	sl
 801a304:	3001      	adds	r0, #1
 801a306:	d09d      	beq.n	801a244 <_printf_i+0x160>
 801a308:	3501      	adds	r5, #1
 801a30a:	68e3      	ldr	r3, [r4, #12]
 801a30c:	9903      	ldr	r1, [sp, #12]
 801a30e:	1a5b      	subs	r3, r3, r1
 801a310:	42ab      	cmp	r3, r5
 801a312:	dcf2      	bgt.n	801a2fa <_printf_i+0x216>
 801a314:	e7eb      	b.n	801a2ee <_printf_i+0x20a>
 801a316:	2500      	movs	r5, #0
 801a318:	f104 0619 	add.w	r6, r4, #25
 801a31c:	e7f5      	b.n	801a30a <_printf_i+0x226>
 801a31e:	bf00      	nop
 801a320:	0802011a 	.word	0x0802011a
 801a324:	0802012b 	.word	0x0802012b

0801a328 <__sflush_r>:
 801a328:	898a      	ldrh	r2, [r1, #12]
 801a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a32e:	4605      	mov	r5, r0
 801a330:	0710      	lsls	r0, r2, #28
 801a332:	460c      	mov	r4, r1
 801a334:	d458      	bmi.n	801a3e8 <__sflush_r+0xc0>
 801a336:	684b      	ldr	r3, [r1, #4]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	dc05      	bgt.n	801a348 <__sflush_r+0x20>
 801a33c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a33e:	2b00      	cmp	r3, #0
 801a340:	dc02      	bgt.n	801a348 <__sflush_r+0x20>
 801a342:	2000      	movs	r0, #0
 801a344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a34a:	2e00      	cmp	r6, #0
 801a34c:	d0f9      	beq.n	801a342 <__sflush_r+0x1a>
 801a34e:	2300      	movs	r3, #0
 801a350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a354:	682f      	ldr	r7, [r5, #0]
 801a356:	6a21      	ldr	r1, [r4, #32]
 801a358:	602b      	str	r3, [r5, #0]
 801a35a:	d032      	beq.n	801a3c2 <__sflush_r+0x9a>
 801a35c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a35e:	89a3      	ldrh	r3, [r4, #12]
 801a360:	075a      	lsls	r2, r3, #29
 801a362:	d505      	bpl.n	801a370 <__sflush_r+0x48>
 801a364:	6863      	ldr	r3, [r4, #4]
 801a366:	1ac0      	subs	r0, r0, r3
 801a368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a36a:	b10b      	cbz	r3, 801a370 <__sflush_r+0x48>
 801a36c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a36e:	1ac0      	subs	r0, r0, r3
 801a370:	2300      	movs	r3, #0
 801a372:	4602      	mov	r2, r0
 801a374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a376:	6a21      	ldr	r1, [r4, #32]
 801a378:	4628      	mov	r0, r5
 801a37a:	47b0      	blx	r6
 801a37c:	1c43      	adds	r3, r0, #1
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	d106      	bne.n	801a390 <__sflush_r+0x68>
 801a382:	6829      	ldr	r1, [r5, #0]
 801a384:	291d      	cmp	r1, #29
 801a386:	d82b      	bhi.n	801a3e0 <__sflush_r+0xb8>
 801a388:	4a29      	ldr	r2, [pc, #164]	; (801a430 <__sflush_r+0x108>)
 801a38a:	410a      	asrs	r2, r1
 801a38c:	07d6      	lsls	r6, r2, #31
 801a38e:	d427      	bmi.n	801a3e0 <__sflush_r+0xb8>
 801a390:	2200      	movs	r2, #0
 801a392:	6062      	str	r2, [r4, #4]
 801a394:	04d9      	lsls	r1, r3, #19
 801a396:	6922      	ldr	r2, [r4, #16]
 801a398:	6022      	str	r2, [r4, #0]
 801a39a:	d504      	bpl.n	801a3a6 <__sflush_r+0x7e>
 801a39c:	1c42      	adds	r2, r0, #1
 801a39e:	d101      	bne.n	801a3a4 <__sflush_r+0x7c>
 801a3a0:	682b      	ldr	r3, [r5, #0]
 801a3a2:	b903      	cbnz	r3, 801a3a6 <__sflush_r+0x7e>
 801a3a4:	6560      	str	r0, [r4, #84]	; 0x54
 801a3a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3a8:	602f      	str	r7, [r5, #0]
 801a3aa:	2900      	cmp	r1, #0
 801a3ac:	d0c9      	beq.n	801a342 <__sflush_r+0x1a>
 801a3ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3b2:	4299      	cmp	r1, r3
 801a3b4:	d002      	beq.n	801a3bc <__sflush_r+0x94>
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f000 f924 	bl	801a604 <_free_r>
 801a3bc:	2000      	movs	r0, #0
 801a3be:	6360      	str	r0, [r4, #52]	; 0x34
 801a3c0:	e7c0      	b.n	801a344 <__sflush_r+0x1c>
 801a3c2:	2301      	movs	r3, #1
 801a3c4:	4628      	mov	r0, r5
 801a3c6:	47b0      	blx	r6
 801a3c8:	1c41      	adds	r1, r0, #1
 801a3ca:	d1c8      	bne.n	801a35e <__sflush_r+0x36>
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d0c5      	beq.n	801a35e <__sflush_r+0x36>
 801a3d2:	2b1d      	cmp	r3, #29
 801a3d4:	d001      	beq.n	801a3da <__sflush_r+0xb2>
 801a3d6:	2b16      	cmp	r3, #22
 801a3d8:	d101      	bne.n	801a3de <__sflush_r+0xb6>
 801a3da:	602f      	str	r7, [r5, #0]
 801a3dc:	e7b1      	b.n	801a342 <__sflush_r+0x1a>
 801a3de:	89a3      	ldrh	r3, [r4, #12]
 801a3e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3e4:	81a3      	strh	r3, [r4, #12]
 801a3e6:	e7ad      	b.n	801a344 <__sflush_r+0x1c>
 801a3e8:	690f      	ldr	r7, [r1, #16]
 801a3ea:	2f00      	cmp	r7, #0
 801a3ec:	d0a9      	beq.n	801a342 <__sflush_r+0x1a>
 801a3ee:	0793      	lsls	r3, r2, #30
 801a3f0:	680e      	ldr	r6, [r1, #0]
 801a3f2:	bf08      	it	eq
 801a3f4:	694b      	ldreq	r3, [r1, #20]
 801a3f6:	600f      	str	r7, [r1, #0]
 801a3f8:	bf18      	it	ne
 801a3fa:	2300      	movne	r3, #0
 801a3fc:	eba6 0807 	sub.w	r8, r6, r7
 801a400:	608b      	str	r3, [r1, #8]
 801a402:	f1b8 0f00 	cmp.w	r8, #0
 801a406:	dd9c      	ble.n	801a342 <__sflush_r+0x1a>
 801a408:	6a21      	ldr	r1, [r4, #32]
 801a40a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a40c:	4643      	mov	r3, r8
 801a40e:	463a      	mov	r2, r7
 801a410:	4628      	mov	r0, r5
 801a412:	47b0      	blx	r6
 801a414:	2800      	cmp	r0, #0
 801a416:	dc06      	bgt.n	801a426 <__sflush_r+0xfe>
 801a418:	89a3      	ldrh	r3, [r4, #12]
 801a41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a41e:	81a3      	strh	r3, [r4, #12]
 801a420:	f04f 30ff 	mov.w	r0, #4294967295
 801a424:	e78e      	b.n	801a344 <__sflush_r+0x1c>
 801a426:	4407      	add	r7, r0
 801a428:	eba8 0800 	sub.w	r8, r8, r0
 801a42c:	e7e9      	b.n	801a402 <__sflush_r+0xda>
 801a42e:	bf00      	nop
 801a430:	dfbffffe 	.word	0xdfbffffe

0801a434 <_fflush_r>:
 801a434:	b538      	push	{r3, r4, r5, lr}
 801a436:	690b      	ldr	r3, [r1, #16]
 801a438:	4605      	mov	r5, r0
 801a43a:	460c      	mov	r4, r1
 801a43c:	b913      	cbnz	r3, 801a444 <_fflush_r+0x10>
 801a43e:	2500      	movs	r5, #0
 801a440:	4628      	mov	r0, r5
 801a442:	bd38      	pop	{r3, r4, r5, pc}
 801a444:	b118      	cbz	r0, 801a44e <_fflush_r+0x1a>
 801a446:	6a03      	ldr	r3, [r0, #32]
 801a448:	b90b      	cbnz	r3, 801a44e <_fflush_r+0x1a>
 801a44a:	f7ff fa7d 	bl	8019948 <__sinit>
 801a44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a452:	2b00      	cmp	r3, #0
 801a454:	d0f3      	beq.n	801a43e <_fflush_r+0xa>
 801a456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a458:	07d0      	lsls	r0, r2, #31
 801a45a:	d404      	bmi.n	801a466 <_fflush_r+0x32>
 801a45c:	0599      	lsls	r1, r3, #22
 801a45e:	d402      	bmi.n	801a466 <_fflush_r+0x32>
 801a460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a462:	f7ff fba3 	bl	8019bac <__retarget_lock_acquire_recursive>
 801a466:	4628      	mov	r0, r5
 801a468:	4621      	mov	r1, r4
 801a46a:	f7ff ff5d 	bl	801a328 <__sflush_r>
 801a46e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a470:	07da      	lsls	r2, r3, #31
 801a472:	4605      	mov	r5, r0
 801a474:	d4e4      	bmi.n	801a440 <_fflush_r+0xc>
 801a476:	89a3      	ldrh	r3, [r4, #12]
 801a478:	059b      	lsls	r3, r3, #22
 801a47a:	d4e1      	bmi.n	801a440 <_fflush_r+0xc>
 801a47c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a47e:	f7ff fb96 	bl	8019bae <__retarget_lock_release_recursive>
 801a482:	e7dd      	b.n	801a440 <_fflush_r+0xc>

0801a484 <fiprintf>:
 801a484:	b40e      	push	{r1, r2, r3}
 801a486:	b503      	push	{r0, r1, lr}
 801a488:	4601      	mov	r1, r0
 801a48a:	ab03      	add	r3, sp, #12
 801a48c:	4805      	ldr	r0, [pc, #20]	; (801a4a4 <fiprintf+0x20>)
 801a48e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a492:	6800      	ldr	r0, [r0, #0]
 801a494:	9301      	str	r3, [sp, #4]
 801a496:	f7ff fc9d 	bl	8019dd4 <_vfiprintf_r>
 801a49a:	b002      	add	sp, #8
 801a49c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4a0:	b003      	add	sp, #12
 801a4a2:	4770      	bx	lr
 801a4a4:	20000098 	.word	0x20000098

0801a4a8 <__swbuf_r>:
 801a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4aa:	460e      	mov	r6, r1
 801a4ac:	4614      	mov	r4, r2
 801a4ae:	4605      	mov	r5, r0
 801a4b0:	b118      	cbz	r0, 801a4ba <__swbuf_r+0x12>
 801a4b2:	6a03      	ldr	r3, [r0, #32]
 801a4b4:	b90b      	cbnz	r3, 801a4ba <__swbuf_r+0x12>
 801a4b6:	f7ff fa47 	bl	8019948 <__sinit>
 801a4ba:	69a3      	ldr	r3, [r4, #24]
 801a4bc:	60a3      	str	r3, [r4, #8]
 801a4be:	89a3      	ldrh	r3, [r4, #12]
 801a4c0:	071a      	lsls	r2, r3, #28
 801a4c2:	d525      	bpl.n	801a510 <__swbuf_r+0x68>
 801a4c4:	6923      	ldr	r3, [r4, #16]
 801a4c6:	b31b      	cbz	r3, 801a510 <__swbuf_r+0x68>
 801a4c8:	6823      	ldr	r3, [r4, #0]
 801a4ca:	6922      	ldr	r2, [r4, #16]
 801a4cc:	1a98      	subs	r0, r3, r2
 801a4ce:	6963      	ldr	r3, [r4, #20]
 801a4d0:	b2f6      	uxtb	r6, r6
 801a4d2:	4283      	cmp	r3, r0
 801a4d4:	4637      	mov	r7, r6
 801a4d6:	dc04      	bgt.n	801a4e2 <__swbuf_r+0x3a>
 801a4d8:	4621      	mov	r1, r4
 801a4da:	4628      	mov	r0, r5
 801a4dc:	f7ff ffaa 	bl	801a434 <_fflush_r>
 801a4e0:	b9e0      	cbnz	r0, 801a51c <__swbuf_r+0x74>
 801a4e2:	68a3      	ldr	r3, [r4, #8]
 801a4e4:	3b01      	subs	r3, #1
 801a4e6:	60a3      	str	r3, [r4, #8]
 801a4e8:	6823      	ldr	r3, [r4, #0]
 801a4ea:	1c5a      	adds	r2, r3, #1
 801a4ec:	6022      	str	r2, [r4, #0]
 801a4ee:	701e      	strb	r6, [r3, #0]
 801a4f0:	6962      	ldr	r2, [r4, #20]
 801a4f2:	1c43      	adds	r3, r0, #1
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	d004      	beq.n	801a502 <__swbuf_r+0x5a>
 801a4f8:	89a3      	ldrh	r3, [r4, #12]
 801a4fa:	07db      	lsls	r3, r3, #31
 801a4fc:	d506      	bpl.n	801a50c <__swbuf_r+0x64>
 801a4fe:	2e0a      	cmp	r6, #10
 801a500:	d104      	bne.n	801a50c <__swbuf_r+0x64>
 801a502:	4621      	mov	r1, r4
 801a504:	4628      	mov	r0, r5
 801a506:	f7ff ff95 	bl	801a434 <_fflush_r>
 801a50a:	b938      	cbnz	r0, 801a51c <__swbuf_r+0x74>
 801a50c:	4638      	mov	r0, r7
 801a50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a510:	4621      	mov	r1, r4
 801a512:	4628      	mov	r0, r5
 801a514:	f000 f806 	bl	801a524 <__swsetup_r>
 801a518:	2800      	cmp	r0, #0
 801a51a:	d0d5      	beq.n	801a4c8 <__swbuf_r+0x20>
 801a51c:	f04f 37ff 	mov.w	r7, #4294967295
 801a520:	e7f4      	b.n	801a50c <__swbuf_r+0x64>
	...

0801a524 <__swsetup_r>:
 801a524:	b538      	push	{r3, r4, r5, lr}
 801a526:	4b2a      	ldr	r3, [pc, #168]	; (801a5d0 <__swsetup_r+0xac>)
 801a528:	4605      	mov	r5, r0
 801a52a:	6818      	ldr	r0, [r3, #0]
 801a52c:	460c      	mov	r4, r1
 801a52e:	b118      	cbz	r0, 801a538 <__swsetup_r+0x14>
 801a530:	6a03      	ldr	r3, [r0, #32]
 801a532:	b90b      	cbnz	r3, 801a538 <__swsetup_r+0x14>
 801a534:	f7ff fa08 	bl	8019948 <__sinit>
 801a538:	89a3      	ldrh	r3, [r4, #12]
 801a53a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a53e:	0718      	lsls	r0, r3, #28
 801a540:	d422      	bmi.n	801a588 <__swsetup_r+0x64>
 801a542:	06d9      	lsls	r1, r3, #27
 801a544:	d407      	bmi.n	801a556 <__swsetup_r+0x32>
 801a546:	2309      	movs	r3, #9
 801a548:	602b      	str	r3, [r5, #0]
 801a54a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a54e:	81a3      	strh	r3, [r4, #12]
 801a550:	f04f 30ff 	mov.w	r0, #4294967295
 801a554:	e034      	b.n	801a5c0 <__swsetup_r+0x9c>
 801a556:	0758      	lsls	r0, r3, #29
 801a558:	d512      	bpl.n	801a580 <__swsetup_r+0x5c>
 801a55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a55c:	b141      	cbz	r1, 801a570 <__swsetup_r+0x4c>
 801a55e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a562:	4299      	cmp	r1, r3
 801a564:	d002      	beq.n	801a56c <__swsetup_r+0x48>
 801a566:	4628      	mov	r0, r5
 801a568:	f000 f84c 	bl	801a604 <_free_r>
 801a56c:	2300      	movs	r3, #0
 801a56e:	6363      	str	r3, [r4, #52]	; 0x34
 801a570:	89a3      	ldrh	r3, [r4, #12]
 801a572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a576:	81a3      	strh	r3, [r4, #12]
 801a578:	2300      	movs	r3, #0
 801a57a:	6063      	str	r3, [r4, #4]
 801a57c:	6923      	ldr	r3, [r4, #16]
 801a57e:	6023      	str	r3, [r4, #0]
 801a580:	89a3      	ldrh	r3, [r4, #12]
 801a582:	f043 0308 	orr.w	r3, r3, #8
 801a586:	81a3      	strh	r3, [r4, #12]
 801a588:	6923      	ldr	r3, [r4, #16]
 801a58a:	b94b      	cbnz	r3, 801a5a0 <__swsetup_r+0x7c>
 801a58c:	89a3      	ldrh	r3, [r4, #12]
 801a58e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a596:	d003      	beq.n	801a5a0 <__swsetup_r+0x7c>
 801a598:	4621      	mov	r1, r4
 801a59a:	4628      	mov	r0, r5
 801a59c:	f000 f8a4 	bl	801a6e8 <__smakebuf_r>
 801a5a0:	89a0      	ldrh	r0, [r4, #12]
 801a5a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a5a6:	f010 0301 	ands.w	r3, r0, #1
 801a5aa:	d00a      	beq.n	801a5c2 <__swsetup_r+0x9e>
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	60a3      	str	r3, [r4, #8]
 801a5b0:	6963      	ldr	r3, [r4, #20]
 801a5b2:	425b      	negs	r3, r3
 801a5b4:	61a3      	str	r3, [r4, #24]
 801a5b6:	6923      	ldr	r3, [r4, #16]
 801a5b8:	b943      	cbnz	r3, 801a5cc <__swsetup_r+0xa8>
 801a5ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a5be:	d1c4      	bne.n	801a54a <__swsetup_r+0x26>
 801a5c0:	bd38      	pop	{r3, r4, r5, pc}
 801a5c2:	0781      	lsls	r1, r0, #30
 801a5c4:	bf58      	it	pl
 801a5c6:	6963      	ldrpl	r3, [r4, #20]
 801a5c8:	60a3      	str	r3, [r4, #8]
 801a5ca:	e7f4      	b.n	801a5b6 <__swsetup_r+0x92>
 801a5cc:	2000      	movs	r0, #0
 801a5ce:	e7f7      	b.n	801a5c0 <__swsetup_r+0x9c>
 801a5d0:	20000098 	.word	0x20000098

0801a5d4 <_sbrk_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4d06      	ldr	r5, [pc, #24]	; (801a5f0 <_sbrk_r+0x1c>)
 801a5d8:	2300      	movs	r3, #0
 801a5da:	4604      	mov	r4, r0
 801a5dc:	4608      	mov	r0, r1
 801a5de:	602b      	str	r3, [r5, #0]
 801a5e0:	f7e7 f810 	bl	8001604 <_sbrk>
 801a5e4:	1c43      	adds	r3, r0, #1
 801a5e6:	d102      	bne.n	801a5ee <_sbrk_r+0x1a>
 801a5e8:	682b      	ldr	r3, [r5, #0]
 801a5ea:	b103      	cbz	r3, 801a5ee <_sbrk_r+0x1a>
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	bd38      	pop	{r3, r4, r5, pc}
 801a5f0:	2000d0ac 	.word	0x2000d0ac

0801a5f4 <abort>:
 801a5f4:	b508      	push	{r3, lr}
 801a5f6:	2006      	movs	r0, #6
 801a5f8:	f000 f8da 	bl	801a7b0 <raise>
 801a5fc:	2001      	movs	r0, #1
 801a5fe:	f7e6 ff89 	bl	8001514 <_exit>
	...

0801a604 <_free_r>:
 801a604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a606:	2900      	cmp	r1, #0
 801a608:	d044      	beq.n	801a694 <_free_r+0x90>
 801a60a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a60e:	9001      	str	r0, [sp, #4]
 801a610:	2b00      	cmp	r3, #0
 801a612:	f1a1 0404 	sub.w	r4, r1, #4
 801a616:	bfb8      	it	lt
 801a618:	18e4      	addlt	r4, r4, r3
 801a61a:	f7ff fba5 	bl	8019d68 <__malloc_lock>
 801a61e:	4a1e      	ldr	r2, [pc, #120]	; (801a698 <_free_r+0x94>)
 801a620:	9801      	ldr	r0, [sp, #4]
 801a622:	6813      	ldr	r3, [r2, #0]
 801a624:	b933      	cbnz	r3, 801a634 <_free_r+0x30>
 801a626:	6063      	str	r3, [r4, #4]
 801a628:	6014      	str	r4, [r2, #0]
 801a62a:	b003      	add	sp, #12
 801a62c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a630:	f7ff bba0 	b.w	8019d74 <__malloc_unlock>
 801a634:	42a3      	cmp	r3, r4
 801a636:	d908      	bls.n	801a64a <_free_r+0x46>
 801a638:	6825      	ldr	r5, [r4, #0]
 801a63a:	1961      	adds	r1, r4, r5
 801a63c:	428b      	cmp	r3, r1
 801a63e:	bf01      	itttt	eq
 801a640:	6819      	ldreq	r1, [r3, #0]
 801a642:	685b      	ldreq	r3, [r3, #4]
 801a644:	1949      	addeq	r1, r1, r5
 801a646:	6021      	streq	r1, [r4, #0]
 801a648:	e7ed      	b.n	801a626 <_free_r+0x22>
 801a64a:	461a      	mov	r2, r3
 801a64c:	685b      	ldr	r3, [r3, #4]
 801a64e:	b10b      	cbz	r3, 801a654 <_free_r+0x50>
 801a650:	42a3      	cmp	r3, r4
 801a652:	d9fa      	bls.n	801a64a <_free_r+0x46>
 801a654:	6811      	ldr	r1, [r2, #0]
 801a656:	1855      	adds	r5, r2, r1
 801a658:	42a5      	cmp	r5, r4
 801a65a:	d10b      	bne.n	801a674 <_free_r+0x70>
 801a65c:	6824      	ldr	r4, [r4, #0]
 801a65e:	4421      	add	r1, r4
 801a660:	1854      	adds	r4, r2, r1
 801a662:	42a3      	cmp	r3, r4
 801a664:	6011      	str	r1, [r2, #0]
 801a666:	d1e0      	bne.n	801a62a <_free_r+0x26>
 801a668:	681c      	ldr	r4, [r3, #0]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	6053      	str	r3, [r2, #4]
 801a66e:	440c      	add	r4, r1
 801a670:	6014      	str	r4, [r2, #0]
 801a672:	e7da      	b.n	801a62a <_free_r+0x26>
 801a674:	d902      	bls.n	801a67c <_free_r+0x78>
 801a676:	230c      	movs	r3, #12
 801a678:	6003      	str	r3, [r0, #0]
 801a67a:	e7d6      	b.n	801a62a <_free_r+0x26>
 801a67c:	6825      	ldr	r5, [r4, #0]
 801a67e:	1961      	adds	r1, r4, r5
 801a680:	428b      	cmp	r3, r1
 801a682:	bf04      	itt	eq
 801a684:	6819      	ldreq	r1, [r3, #0]
 801a686:	685b      	ldreq	r3, [r3, #4]
 801a688:	6063      	str	r3, [r4, #4]
 801a68a:	bf04      	itt	eq
 801a68c:	1949      	addeq	r1, r1, r5
 801a68e:	6021      	streq	r1, [r4, #0]
 801a690:	6054      	str	r4, [r2, #4]
 801a692:	e7ca      	b.n	801a62a <_free_r+0x26>
 801a694:	b003      	add	sp, #12
 801a696:	bd30      	pop	{r4, r5, pc}
 801a698:	2000d1f4 	.word	0x2000d1f4

0801a69c <__swhatbuf_r>:
 801a69c:	b570      	push	{r4, r5, r6, lr}
 801a69e:	460c      	mov	r4, r1
 801a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6a4:	2900      	cmp	r1, #0
 801a6a6:	b096      	sub	sp, #88	; 0x58
 801a6a8:	4615      	mov	r5, r2
 801a6aa:	461e      	mov	r6, r3
 801a6ac:	da0d      	bge.n	801a6ca <__swhatbuf_r+0x2e>
 801a6ae:	89a3      	ldrh	r3, [r4, #12]
 801a6b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a6b4:	f04f 0100 	mov.w	r1, #0
 801a6b8:	bf0c      	ite	eq
 801a6ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a6be:	2340      	movne	r3, #64	; 0x40
 801a6c0:	2000      	movs	r0, #0
 801a6c2:	6031      	str	r1, [r6, #0]
 801a6c4:	602b      	str	r3, [r5, #0]
 801a6c6:	b016      	add	sp, #88	; 0x58
 801a6c8:	bd70      	pop	{r4, r5, r6, pc}
 801a6ca:	466a      	mov	r2, sp
 801a6cc:	f000 f878 	bl	801a7c0 <_fstat_r>
 801a6d0:	2800      	cmp	r0, #0
 801a6d2:	dbec      	blt.n	801a6ae <__swhatbuf_r+0x12>
 801a6d4:	9901      	ldr	r1, [sp, #4]
 801a6d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a6da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a6de:	4259      	negs	r1, r3
 801a6e0:	4159      	adcs	r1, r3
 801a6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6e6:	e7eb      	b.n	801a6c0 <__swhatbuf_r+0x24>

0801a6e8 <__smakebuf_r>:
 801a6e8:	898b      	ldrh	r3, [r1, #12]
 801a6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6ec:	079d      	lsls	r5, r3, #30
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	d507      	bpl.n	801a704 <__smakebuf_r+0x1c>
 801a6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	6123      	str	r3, [r4, #16]
 801a6fc:	2301      	movs	r3, #1
 801a6fe:	6163      	str	r3, [r4, #20]
 801a700:	b002      	add	sp, #8
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	ab01      	add	r3, sp, #4
 801a706:	466a      	mov	r2, sp
 801a708:	f7ff ffc8 	bl	801a69c <__swhatbuf_r>
 801a70c:	9900      	ldr	r1, [sp, #0]
 801a70e:	4605      	mov	r5, r0
 801a710:	4630      	mov	r0, r6
 801a712:	f7ff faa9 	bl	8019c68 <_malloc_r>
 801a716:	b948      	cbnz	r0, 801a72c <__smakebuf_r+0x44>
 801a718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a71c:	059a      	lsls	r2, r3, #22
 801a71e:	d4ef      	bmi.n	801a700 <__smakebuf_r+0x18>
 801a720:	f023 0303 	bic.w	r3, r3, #3
 801a724:	f043 0302 	orr.w	r3, r3, #2
 801a728:	81a3      	strh	r3, [r4, #12]
 801a72a:	e7e3      	b.n	801a6f4 <__smakebuf_r+0xc>
 801a72c:	89a3      	ldrh	r3, [r4, #12]
 801a72e:	6020      	str	r0, [r4, #0]
 801a730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a734:	81a3      	strh	r3, [r4, #12]
 801a736:	9b00      	ldr	r3, [sp, #0]
 801a738:	6163      	str	r3, [r4, #20]
 801a73a:	9b01      	ldr	r3, [sp, #4]
 801a73c:	6120      	str	r0, [r4, #16]
 801a73e:	b15b      	cbz	r3, 801a758 <__smakebuf_r+0x70>
 801a740:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a744:	4630      	mov	r0, r6
 801a746:	f000 f84d 	bl	801a7e4 <_isatty_r>
 801a74a:	b128      	cbz	r0, 801a758 <__smakebuf_r+0x70>
 801a74c:	89a3      	ldrh	r3, [r4, #12]
 801a74e:	f023 0303 	bic.w	r3, r3, #3
 801a752:	f043 0301 	orr.w	r3, r3, #1
 801a756:	81a3      	strh	r3, [r4, #12]
 801a758:	89a3      	ldrh	r3, [r4, #12]
 801a75a:	431d      	orrs	r5, r3
 801a75c:	81a5      	strh	r5, [r4, #12]
 801a75e:	e7cf      	b.n	801a700 <__smakebuf_r+0x18>

0801a760 <_raise_r>:
 801a760:	291f      	cmp	r1, #31
 801a762:	b538      	push	{r3, r4, r5, lr}
 801a764:	4604      	mov	r4, r0
 801a766:	460d      	mov	r5, r1
 801a768:	d904      	bls.n	801a774 <_raise_r+0x14>
 801a76a:	2316      	movs	r3, #22
 801a76c:	6003      	str	r3, [r0, #0]
 801a76e:	f04f 30ff 	mov.w	r0, #4294967295
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a776:	b112      	cbz	r2, 801a77e <_raise_r+0x1e>
 801a778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a77c:	b94b      	cbnz	r3, 801a792 <_raise_r+0x32>
 801a77e:	4620      	mov	r0, r4
 801a780:	f000 f852 	bl	801a828 <_getpid_r>
 801a784:	462a      	mov	r2, r5
 801a786:	4601      	mov	r1, r0
 801a788:	4620      	mov	r0, r4
 801a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a78e:	f000 b839 	b.w	801a804 <_kill_r>
 801a792:	2b01      	cmp	r3, #1
 801a794:	d00a      	beq.n	801a7ac <_raise_r+0x4c>
 801a796:	1c59      	adds	r1, r3, #1
 801a798:	d103      	bne.n	801a7a2 <_raise_r+0x42>
 801a79a:	2316      	movs	r3, #22
 801a79c:	6003      	str	r3, [r0, #0]
 801a79e:	2001      	movs	r0, #1
 801a7a0:	e7e7      	b.n	801a772 <_raise_r+0x12>
 801a7a2:	2400      	movs	r4, #0
 801a7a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a7a8:	4628      	mov	r0, r5
 801a7aa:	4798      	blx	r3
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	e7e0      	b.n	801a772 <_raise_r+0x12>

0801a7b0 <raise>:
 801a7b0:	4b02      	ldr	r3, [pc, #8]	; (801a7bc <raise+0xc>)
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	6818      	ldr	r0, [r3, #0]
 801a7b6:	f7ff bfd3 	b.w	801a760 <_raise_r>
 801a7ba:	bf00      	nop
 801a7bc:	20000098 	.word	0x20000098

0801a7c0 <_fstat_r>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	4d07      	ldr	r5, [pc, #28]	; (801a7e0 <_fstat_r+0x20>)
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4608      	mov	r0, r1
 801a7ca:	4611      	mov	r1, r2
 801a7cc:	602b      	str	r3, [r5, #0]
 801a7ce:	f7e6 fef0 	bl	80015b2 <_fstat>
 801a7d2:	1c43      	adds	r3, r0, #1
 801a7d4:	d102      	bne.n	801a7dc <_fstat_r+0x1c>
 801a7d6:	682b      	ldr	r3, [r5, #0]
 801a7d8:	b103      	cbz	r3, 801a7dc <_fstat_r+0x1c>
 801a7da:	6023      	str	r3, [r4, #0]
 801a7dc:	bd38      	pop	{r3, r4, r5, pc}
 801a7de:	bf00      	nop
 801a7e0:	2000d0ac 	.word	0x2000d0ac

0801a7e4 <_isatty_r>:
 801a7e4:	b538      	push	{r3, r4, r5, lr}
 801a7e6:	4d06      	ldr	r5, [pc, #24]	; (801a800 <_isatty_r+0x1c>)
 801a7e8:	2300      	movs	r3, #0
 801a7ea:	4604      	mov	r4, r0
 801a7ec:	4608      	mov	r0, r1
 801a7ee:	602b      	str	r3, [r5, #0]
 801a7f0:	f7e6 feef 	bl	80015d2 <_isatty>
 801a7f4:	1c43      	adds	r3, r0, #1
 801a7f6:	d102      	bne.n	801a7fe <_isatty_r+0x1a>
 801a7f8:	682b      	ldr	r3, [r5, #0]
 801a7fa:	b103      	cbz	r3, 801a7fe <_isatty_r+0x1a>
 801a7fc:	6023      	str	r3, [r4, #0]
 801a7fe:	bd38      	pop	{r3, r4, r5, pc}
 801a800:	2000d0ac 	.word	0x2000d0ac

0801a804 <_kill_r>:
 801a804:	b538      	push	{r3, r4, r5, lr}
 801a806:	4d07      	ldr	r5, [pc, #28]	; (801a824 <_kill_r+0x20>)
 801a808:	2300      	movs	r3, #0
 801a80a:	4604      	mov	r4, r0
 801a80c:	4608      	mov	r0, r1
 801a80e:	4611      	mov	r1, r2
 801a810:	602b      	str	r3, [r5, #0]
 801a812:	f7e6 fe6d 	bl	80014f0 <_kill>
 801a816:	1c43      	adds	r3, r0, #1
 801a818:	d102      	bne.n	801a820 <_kill_r+0x1c>
 801a81a:	682b      	ldr	r3, [r5, #0]
 801a81c:	b103      	cbz	r3, 801a820 <_kill_r+0x1c>
 801a81e:	6023      	str	r3, [r4, #0]
 801a820:	bd38      	pop	{r3, r4, r5, pc}
 801a822:	bf00      	nop
 801a824:	2000d0ac 	.word	0x2000d0ac

0801a828 <_getpid_r>:
 801a828:	f7e6 be5a 	b.w	80014e0 <_getpid>

0801a82c <_init>:
 801a82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a82e:	bf00      	nop
 801a830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a832:	bc08      	pop	{r3}
 801a834:	469e      	mov	lr, r3
 801a836:	4770      	bx	lr

0801a838 <_fini>:
 801a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a83a:	bf00      	nop
 801a83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a83e:	bc08      	pop	{r3}
 801a840:	469e      	mov	lr, r3
 801a842:	4770      	bx	lr
