
ECE471_Hw10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019940  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a38  08019b10  08019b10  00029b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d548  0801d548  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801d548  0801d548  0002d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d550  0801d550  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d550  0801d550  0002d550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d554  0801d554  0002d554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801d558  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801d5e8  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801d688  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000cd3c  200001d0  0801d728  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000cf0c  0801d728  0003cf0c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003541d  00000000  00000000  00030243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008333  00000000  00000000  00065660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002860  00000000  00000000  0006d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000200e  00000000  00000000  000701f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003960c  00000000  00000000  00072206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003f13c  00000000  00000000  000ab812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00121034  00000000  00000000  000ea94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b290  00000000  00000000  0020b984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00216c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019af8 	.word	0x08019af8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08019af8 	.word	0x08019af8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200001ec 	.word	0x200001ec
 800060c:	20000240 	.word	0x20000240

08000610 <mqtt_incoming_publish_cb>:
   Example here uses a global variable, better would be to use a member in arg
   If RAM and CPU budget allows it, the easiest implementation might be to just take a copy of
   the topic string and use it in mqtt_incoming_data_cb
*/
static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  // first this function is called with the topic string
  // in our case the topic can be "test/bradley_edu" or something more specific
  // such as "test/bradley_edu/xxx_something_more_specific_here_xxx"
  // then the function mqtt_incoming_data_cb is called.
}
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	460b      	mov	r3, r1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4613      	mov	r3, r2
 800063c:	717b      	strb	r3, [r7, #5]
  if(flags & MQTT_DATA_FLAG_LAST) {
 800063e:	797b      	ldrb	r3, [r7, #5]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d00c      	beq.n	8000662 <mqtt_incoming_data_cb+0x3a>
    /* Warning! the incoming data is not \0 terminated !!!
     * If the data is short copy it and terminate with \0
     * then you can use strxxx and atoi, etc. safely
     * OTHERWISE, use strNxxx functions like strncmp, but cannot use atoi function
     */
    if ( len<20 ) {
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	2b13      	cmp	r3, #19
 800064c:	d809      	bhi.n	8000662 <mqtt_incoming_data_cb+0x3a>
      //static char buffer[21];
      strncpy(buffer, (const char *)data, len);
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	461a      	mov	r2, r3
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <mqtt_incoming_data_cb+0x44>)
 8000656:	f018 fb94 	bl	8018d82 <strncpy>
      buffer[len]='\0';
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	4a03      	ldr	r2, [pc, #12]	; (800066c <mqtt_incoming_data_cb+0x44>)
 800065e:	2100      	movs	r1, #0
 8000660:	54d1      	strb	r1, [r2, r3]



    }

 }
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000c10 	.word	0x20000c10

08000670 <mqtt_sub_request_cb>:




static void mqtt_sub_request_cb(void *arg, err_t result)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  /* Normal behavior would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
    if (result != ERR_OK ) {
 800067c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d002      	beq.n	800068a <mqtt_sub_request_cb+0x1a>
        mqtt_disconnect(arg);
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f00b f883 	bl	800b790 <mqtt_disconnect>
        // the task loop will try to reconnect and subscribe again
    }
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <mqtt_connection_cb>:

static void example_do_connect(mqtt_client_t *client);

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af02      	add	r7, sp, #8
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	80fb      	strh	r3, [r7, #6]
  err_t err;
  if(status == MQTT_CONNECT_ACCEPTED) {
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d112      	bne.n	80006ce <mqtt_connection_cb+0x3a>
    /* Setup callback for incoming publish requests */
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4a0c      	ldr	r2, [pc, #48]	; (80006dc <mqtt_connection_cb+0x48>)
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <mqtt_connection_cb+0x4c>)
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f00a fdce 	bl	800b250 <mqtt_set_inpub_callback>

    /* Subscribe to a topic named "subtopic" with QoS level 1, call mqtt_sub_request_cb with result */
    err = mqtt_subscribe(client, "test/bradley_edu", 1, mqtt_sub_request_cb, client); // arg=client for calling disconnect on failure
 80006b4:	2301      	movs	r3, #1
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <mqtt_connection_cb+0x50>)
 80006be:	2201      	movs	r2, #1
 80006c0:	4909      	ldr	r1, [pc, #36]	; (80006e8 <mqtt_connection_cb+0x54>)
 80006c2:	68f8      	ldr	r0, [r7, #12]
 80006c4:	f00a fcee 	bl	800b0a4 <mqtt_sub_unsub>
 80006c8:	4603      	mov	r3, r0
 80006ca:	75fb      	strb	r3, [r7, #23]
    }
  } else {
    /* Its more nice to be connected, so try to reconnect */
    example_do_connect(client);
  }
}
 80006cc:	e002      	b.n	80006d4 <mqtt_connection_cb+0x40>
    example_do_connect(client);
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f000 f80c 	bl	80006ec <example_do_connect>
}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	08000629 	.word	0x08000629
 80006e0:	08000611 	.word	0x08000611
 80006e4:	08000671 	.word	0x08000671
 80006e8:	08019b10 	.word	0x08019b10

080006ec <example_do_connect>:

static void example_do_connect(mqtt_client_t *client)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	; 0x38
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6078      	str	r0, [r7, #4]
  struct mqtt_connect_client_info_t ci;
  err_t err;

  /* Setup an empty client info structure */
  memset(&ci, 0, sizeof(ci));
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	221c      	movs	r2, #28
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f018 fb38 	bl	8018d72 <memset>

  /* Minimal amount of information required is client identifier, so set it here */
  ci.client_id   = "st32f7-Nate";     // each end note MUST have an unique short client ID!
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <example_do_connect+0x54>)
 8000704:	613b      	str	r3, [r7, #16]
  ci.client_user = 0;  // = "UserID";   // =0; must point to NULL when not used
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  ci.client_pass = 0;  // = "password"; // =0; must point to NULL when not used
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  ci.keep_alive  = 0;  // optional, already set to 0
 800070e:	2300      	movs	r3, #0
 8000710:	83bb      	strh	r3, [r7, #28]
     // Choice 2: mqtt.eclipseprojects.io => 137.135.83.217
  // IP4_ADDR( &mqtt_server_addr, 137, 135, 83, 217 );
     // Choice 3: a server on a local computer
  //192.168.1.129
  //192.168.1.129
  IP4_ADDR( &mqtt_server_addr, 192, 168, 1, 129);
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <example_do_connect+0x58>)
 8000714:	60fb      	str	r3, [r7, #12]

  err = mqtt_client_connect(client, &mqtt_server_addr, MQTT_PORT, mqtt_connection_cb, 0, &ci);
 8000716:	f107 010c 	add.w	r1, r7, #12
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	2300      	movs	r3, #0
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <example_do_connect+0x5c>)
 8000726:	f240 725b 	movw	r2, #1883	; 0x75b
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f00a fdb4 	bl	800b298 <mqtt_client_connect>
 8000730:	4603      	mov	r3, r0
 8000732:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    // ..
    // Note: either an immediate error that something went very wrong or,
    //        otherwise, the error code -4 telling that the actual status
    //        will be reported later when the callback function is called
  }
}
 8000736:	bf00      	nop
 8000738:	3730      	adds	r7, #48	; 0x30
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	08019b24 	.word	0x08019b24
 8000744:	8101a8c0 	.word	0x8101a8c0
 8000748:	08000695 	.word	0x08000695

0800074c <mqtt_pub_request_cb>:



/* Called when publish is complete either with success or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  if(result != ERR_OK) {
    // .. the message did not get out
  }
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <example_publish>:

void example_publish(mqtt_client_t *client, const char * payload, void *arg)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af04      	add	r7, sp, #16
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
  err_t err;
  u8_t qos = 2; /* 0 1 or 2, see MQTT specification */
 8000770:	2302      	movs	r3, #2
 8000772:	75fb      	strb	r3, [r7, #23]
  u8_t retain = 0; /* No don't retain such crappy payload... */
 8000774:	2300      	movs	r3, #0
 8000776:	75bb      	strb	r3, [r7, #22]
  err = mqtt_publish(client, "test/bradley_edu", payload, strlen(payload), qos, retain, mqtt_pub_request_cb, arg);
 8000778:	68b8      	ldr	r0, [r7, #8]
 800077a:	f7ff fd53 	bl	8000224 <strlen>
 800077e:	4603      	mov	r3, r0
 8000780:	b29a      	uxth	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	9303      	str	r3, [sp, #12]
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <example_publish+0x48>)
 8000788:	9302      	str	r3, [sp, #8]
 800078a:	7dbb      	ldrb	r3, [r7, #22]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	4613      	mov	r3, r2
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	4906      	ldr	r1, [pc, #24]	; (80007b0 <example_publish+0x4c>)
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f00a fbaf 	bl	800aefc <mqtt_publish>
 800079e:	4603      	mov	r3, r0
 80007a0:	757b      	strb	r3, [r7, #21]
    // ..
    // Note: either an immediate error that something went very wrong or,
    //        otherwise, the error code -4 telling that the actual status
    //        will be reported later when the callback function is called
  }
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	0800074d 	.word	0x0800074d
 80007b0:	08019b10 	.word	0x08019b10

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b5b0      	push	{r4, r5, r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fee1 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f821 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f937 	bl	8000a34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007c6:	f000 f8d7 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ca:	f000 f905 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80007ce:	f000 f87f 	bl	80008d0 <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <main+0x48>)
 80007d4:	1d3c      	adds	r4, r7, #4
 80007d6:	461d      	mov	r5, r3
 80007d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fa2b 	bl	8006c44 <osThreadCreate>
 80007ee:	4603      	mov	r3, r0
 80007f0:	4a03      	ldr	r2, [pc, #12]	; (8000800 <main+0x4c>)
 80007f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007f4:	f006 fa0f 	bl	8006c16 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x44>
 80007fa:	bf00      	nop
 80007fc:	08019b3c 	.word	0x08019b3c
 8000800:	20000a18 	.word	0x20000a18

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f018 faad 	bl	8018d72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000828:	f003 f966 	bl	8003af8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <SystemClock_Config+0xc4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <SystemClock_Config+0xc4>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <SystemClock_Config+0xc4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000844:	4b21      	ldr	r3, [pc, #132]	; (80008cc <SystemClock_Config+0xc8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084c:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <SystemClock_Config+0xc8>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <SystemClock_Config+0xc8>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086e:	2304      	movs	r3, #4
 8000870:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000872:	2348      	movs	r3, #72	; 0x48
 8000874:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800087a:	2303      	movs	r3, #3
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f003 f948 	bl	8003b18 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800088e:	f000 fa46 	bl	8000d1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2102      	movs	r1, #2
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fbd6 	bl	8004060 <HAL_RCC_ClockConfig>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008ba:	f000 fa30 	bl	8000d1e <Error_Handler>
  }
}
 80008be:	bf00      	nop
 80008c0:	3750      	adds	r7, #80	; 0x50
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e2:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_ADC1_Init+0x98>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	; (800096c <MX_ADC1_Init+0x9c>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090e:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_ADC1_Init+0x98>)
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <MX_ADC1_Init+0xa0>)
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_ADC1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_ADC1_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_ADC1_Init+0x98>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_ADC1_Init+0x98>)
 8000930:	f000 fe78 	bl	8001624 <HAL_ADC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f9f0 	bl	8000d1e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_ADC1_Init+0xa4>)
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000942:	2301      	movs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000946:	2307      	movs	r3, #7
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_ADC1_Init+0x98>)
 8000950:	f001 f812 	bl	8001978 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800095a:	f000 f9e0 	bl	8000d1e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000440 	.word	0x20000440
 800096c:	40012000 	.word	0x40012000
 8000970:	0f000001 	.word	0x0f000001
 8000974:	10000012 	.word	0x10000012

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART3_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009bc:	f004 fc78 	bl	80052b0 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f9aa 	bl	8000d1e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000488 	.word	0x20000488
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2206      	movs	r2, #6
 80009e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	f002 ff23 	bl	8003866 <HAL_PCD_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f97a 	bl	8000d1e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000510 	.word	0x20000510

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b46      	ldr	r3, [pc, #280]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a45      	ldr	r2, [pc, #276]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b40      	ldr	r3, [pc, #256]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a3f      	ldr	r2, [pc, #252]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a39      	ldr	r2, [pc, #228]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b37      	ldr	r3, [pc, #220]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b34      	ldr	r3, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b2e      	ldr	r3, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b2b      	ldr	r3, [pc, #172]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a27      	ldr	r2, [pc, #156]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_GPIO_Init+0x130>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000ae2:	f002 fe8d 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4820      	ldr	r0, [pc, #128]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000aec:	f002 fe88 	bl	8003800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x13c>)
 8000b06:	f002 fcb7 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x134>)
 8000b24:	f002 fca8 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b28:	2340      	movs	r3, #64	; 0x40
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000b40:	f002 fc9a 	bl	8003478 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_GPIO_Init+0x138>)
 8000b58:	f002 fc8e 	bl	8003478 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	bf00      	nop
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	40021800 	.word	0x40021800
 8000b70:	40020800 	.word	0x40020800

08000b74 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b090      	sub	sp, #64	; 0x40
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b7c:	f005 fade 	bl	800613c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  //GPIO_PinState old = GPIO_PIN_RESET;
  unsigned int mqtt_reconnect_cnt = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000b84:	4853      	ldr	r0, [pc, #332]	; (8000cd4 <StartDefaultTask+0x160>)
 8000b86:	f000 fd91 	bl	80016ac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b8e:	4851      	ldr	r0, [pc, #324]	; (8000cd4 <StartDefaultTask+0x160>)
 8000b90:	f000 fe5a 	bl	8001848 <HAL_ADC_PollForConversion>
	  uint32_t raw_temp = HAL_ADC_GetValue(&hadc1);
 8000b94:	484f      	ldr	r0, [pc, #316]	; (8000cd4 <StartDefaultTask+0x160>)
 8000b96:	f000 fee2 	bl	800195e <HAL_ADC_GetValue>
 8000b9a:	63b8      	str	r0, [r7, #56]	; 0x38
	  uint32_t cht_voltage = (raw_temp * 3300) / 4095;
 8000b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b9e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000ba2:	fb03 f202 	mul.w	r2, r3, r2
 8000ba6:	4b4c      	ldr	r3, [pc, #304]	; (8000cd8 <StartDefaultTask+0x164>)
 8000ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bac:	1ad2      	subs	r2, r2, r3
 8000bae:	0852      	lsrs	r2, r2, #1
 8000bb0:	4413      	add	r3, r2
 8000bb2:	0adb      	lsrs	r3, r3, #11
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
	  temp = 25 + (cht_voltage * 10 - 7600) / 25;
 8000bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000bb8:	4613      	mov	r3, r2
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4413      	add	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b46      	ldr	r3, [pc, #280]	; (8000cdc <StartDefaultTask+0x168>)
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a46      	ldr	r2, [pc, #280]	; (8000ce0 <StartDefaultTask+0x16c>)
 8000bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bcc:	08db      	lsrs	r3, r3, #3
 8000bce:	3319      	adds	r3, #25
 8000bd0:	4a44      	ldr	r2, [pc, #272]	; (8000ce4 <StartDefaultTask+0x170>)
 8000bd2:	6013      	str	r3, [r2, #0]
    // periodically check if MQTT is connected and (re)connect if needed
    if ( ! mqtt_client_is_connected(&mqtt_client_state) ) {
 8000bd4:	4844      	ldr	r0, [pc, #272]	; (8000ce8 <StartDefaultTask+0x174>)
 8000bd6:	f00a fdff 	bl	800b7d8 <mqtt_client_is_connected>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d112      	bne.n	8000c06 <StartDefaultTask+0x92>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2101      	movs	r1, #1
 8000be4:	4841      	ldr	r0, [pc, #260]	; (8000cec <StartDefaultTask+0x178>)
 8000be6:	f002 fe0b 	bl	8003800 <HAL_GPIO_WritePin>
      if (mqtt_reconnect_cnt>0) {
 8000bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <StartDefaultTask+0x84>
        mqtt_reconnect_cnt--;
 8000bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bf6:	e7c5      	b.n	8000b84 <StartDefaultTask+0x10>
      }

      else {
        example_do_connect(&mqtt_client_state);
 8000bf8:	483b      	ldr	r0, [pc, #236]	; (8000ce8 <StartDefaultTask+0x174>)
 8000bfa:	f7ff fd77 	bl	80006ec <example_do_connect>
        // Note: this is a non-blocking call as all of the MQTT - will not wait until connected
            // Any delay is not really needed to prevent from starting multiple attempts in parallel
            // because subsequent attempts are ignored as long as the corresponding TCP socket state
            // is not "fully disconnected"
        mqtt_reconnect_cnt = 500; // but... allow five seconds to prevent flood of requests
 8000bfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c04:	e7be      	b.n	8000b84 <StartDefaultTask+0x10>
      }
    }


    else if ( mqtt_client_is_connected(&mqtt_client_state) ){
 8000c06:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <StartDefaultTask+0x174>)
 8000c08:	f00a fde6 	bl	800b7d8 <mqtt_client_is_connected>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0b8      	beq.n	8000b84 <StartDefaultTask+0x10>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2101      	movs	r1, #1
 8000c16:	4835      	ldr	r0, [pc, #212]	; (8000cec <StartDefaultTask+0x178>)
 8000c18:	f002 fdf2 	bl	8003800 <HAL_GPIO_WritePin>
    	int count =0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    	if(strncmp(buffer,"Nate-TSET=", 11) == 0){
 8000c20:	4933      	ldr	r1, [pc, #204]	; (8000cf0 <StartDefaultTask+0x17c>)
 8000c22:	4834      	ldr	r0, [pc, #208]	; (8000cf4 <StartDefaultTask+0x180>)
 8000c24:	f7ff faf4 	bl	8000210 <strcmp>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d11a      	bne.n	8000c64 <StartDefaultTask+0xf0>
    		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	482e      	ldr	r0, [pc, #184]	; (8000cec <StartDefaultTask+0x178>)
 8000c32:	f002 fdfe 	bl	8003832 <HAL_GPIO_TogglePin>

    		int tempTemp = atoi(buffer +11);
 8000c36:	4b30      	ldr	r3, [pc, #192]	; (8000cf8 <StartDefaultTask+0x184>)
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f017 fe5b 	bl	80188f4 <atoi>
 8000c3e:	62f8      	str	r0, [r7, #44]	; 0x2c
    		if(tempTemp > temp){
 8000c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <StartDefaultTask+0x170>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d906      	bls.n	8000c58 <StartDefaultTask+0xe4>

    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c50:	4826      	ldr	r0, [pc, #152]	; (8000cec <StartDefaultTask+0x178>)
 8000c52:	f002 fdd5 	bl	8003800 <HAL_GPIO_WritePin>
 8000c56:	e005      	b.n	8000c64 <StartDefaultTask+0xf0>
    		}
    		else{
    			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5e:	4823      	ldr	r0, [pc, #140]	; (8000cec <StartDefaultTask+0x178>)
 8000c60:	f002 fdce 	bl	8003800 <HAL_GPIO_WritePin>
    		}
    	}
    	// osDelay(100);
    	 count++;
 8000c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c66:	3301      	adds	r3, #1
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30

    	 if(count>=10){
 8000c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6c:	2b09      	cmp	r3, #9
 8000c6e:	dd10      	ble.n	8000c92 <StartDefaultTask+0x11e>

    		 char buff[32];

    		 example_publish(&mqtt_client_state, itoa(temp, buff, 10), 0);
 8000c70:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <StartDefaultTask+0x170>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	220a      	movs	r2, #10
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f017 fe55 	bl	801892c <itoa>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2200      	movs	r2, #0
 8000c86:	4619      	mov	r1, r3
 8000c88:	4817      	ldr	r0, [pc, #92]	; (8000ce8 <StartDefaultTask+0x174>)
 8000c8a:	f7ff fd6b 	bl	8000764 <example_publish>
    		 count =0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
    	 }
    	 GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4819      	ldr	r0, [pc, #100]	; (8000cfc <StartDefaultTask+0x188>)
 8000c98:	f002 fd9a 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    	 if(buttonState){
 8000ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f43f af6c 	beq.w	8000b84 <StartDefaultTask+0x10>
    		 char buff[32];

    		 example_publish(&mqtt_client_state, itoa(temp, buff, 10), 0);
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <StartDefaultTask+0x170>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	220a      	movs	r2, #10
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f017 fe37 	bl	801892c <itoa>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <StartDefaultTask+0x174>)
 8000cc6:	f7ff fd4d 	bl	8000764 <example_publish>
    		 osDelay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f006 f806 	bl	8006cdc <osDelay>
  {
 8000cd0:	e758      	b.n	8000b84 <StartDefaultTask+0x10>
 8000cd2:	bf00      	nop
 8000cd4:	20000440 	.word	0x20000440
 8000cd8:	00100101 	.word	0x00100101
 8000cdc:	ffffe250 	.word	0xffffe250
 8000ce0:	51eb851f 	.word	0x51eb851f
 8000ce4:	20000c0c 	.word	0x20000c0c
 8000ce8:	20000a1c 	.word	0x20000a1c
 8000cec:	40020400 	.word	0x40020400
 8000cf0:	08019b58 	.word	0x08019b58
 8000cf4:	20000c10 	.word	0x20000c10
 8000cf8:	20000c1b 	.word	0x20000c1b
 8000cfc:	40020800 	.word	0x40020800

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f000 fc43 	bl	800159c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d22:	b672      	cpsid	i
}
 8000d24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <Error_Handler+0x8>

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210f      	movs	r1, #15
 8000d62:	f06f 0001 	mvn.w	r0, #1
 8000d66:	f001 f90f 	bl	8001f88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_ADC_MspInit+0x38>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d10b      	bne.n	8000da2 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <HAL_ADC_MspInit+0x3c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a09      	ldr	r2, [pc, #36]	; (8000db4 <HAL_ADC_MspInit+0x3c>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b07      	ldr	r3, [pc, #28]	; (8000db4 <HAL_ADC_MspInit+0x3c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40012000 	.word	0x40012000
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0aa      	sub	sp, #168	; 0xa8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2284      	movs	r2, #132	; 0x84
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f017 ffca 	bl	8018d72 <memset>
  if(huart->Instance==USART3)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_UART_MspInit+0xb4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d13c      	bne.n	8000e62 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000de8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 fb8a 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e02:	f7ff ff8c 	bl	8000d1e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a19      	ldr	r2, [pc, #100]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e24:	f043 0308 	orr.w	r3, r3, #8
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0xb8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0308 	and.w	r3, r3, #8
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e50:	2307      	movs	r3, #7
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <HAL_UART_MspInit+0xbc>)
 8000e5e:	f002 fb0b 	bl	8003478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	37a8      	adds	r7, #168	; 0xa8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ac      	sub	sp, #176	; 0xb0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2284      	movs	r2, #132	; 0x84
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f017 ff6a 	bl	8018d72 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea6:	d159      	bne.n	8000f5c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000eac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fb29 	bl	8004510 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ec4:	f7ff ff2b 	bl	8000d1e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a25      	ldr	r2, [pc, #148]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ee0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000efa:	230a      	movs	r3, #10
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <HAL_PCD_MspInit+0xf0>)
 8000f08:	f002 fab6 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f24:	4619      	mov	r1, r3
 8000f26:	4810      	ldr	r0, [pc, #64]	; (8000f68 <HAL_PCD_MspInit+0xf0>)
 8000f28:	f002 faa6 	bl	8003478 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f36:	6353      	str	r3, [r2, #52]	; 0x34
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <HAL_PCD_MspInit+0xec>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	37b0      	adds	r7, #176	; 0xb0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000

08000f6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7c:	4b34      	ldr	r3, [pc, #208]	; (8001050 <HAL_InitTick+0xe4>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a33      	ldr	r2, [pc, #204]	; (8001050 <HAL_InitTick+0xe4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_InitTick+0xe4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f94:	f107 0210 	add.w	r2, r7, #16
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fa84 	bl	80044ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fae:	f003 fa55 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8000fb2:	6378      	str	r0, [r7, #52]	; 0x34
 8000fb4:	e004      	b.n	8000fc0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fb6:	f003 fa51 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_InitTick+0xe8>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	0c9b      	lsrs	r3, r3, #18
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_InitTick+0xec>)
 8000fd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_InitTick+0xec>)
 8000fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fdc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <HAL_InitTick+0xec>)
 8000fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_InitTick+0xec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_InitTick+0xec>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_InitTick+0xec>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <HAL_InitTick+0xec>)
 8000ff8:	f003 fe7a 	bl	8004cf0 <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001006:	2b00      	cmp	r3, #0
 8001008:	d11b      	bne.n	8001042 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800100a:	4813      	ldr	r0, [pc, #76]	; (8001058 <HAL_InitTick+0xec>)
 800100c:	f003 fed2 	bl	8004db4 <HAL_TIM_Base_Start_IT>
 8001010:	4603      	mov	r3, r0
 8001012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800101a:	2b00      	cmp	r3, #0
 800101c:	d111      	bne.n	8001042 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101e:	201c      	movs	r0, #28
 8001020:	f000 ffce 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d808      	bhi.n	800103c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	201c      	movs	r0, #28
 8001030:	f000 ffaa 	bl	8001f88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_InitTick+0xf0>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e002      	b.n	8001042 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001042:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001046:	4618      	mov	r0, r3
 8001048:	3738      	adds	r7, #56	; 0x38
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	431bde83 	.word	0x431bde83
 8001058:	20000c28 	.word	0x20000c28
 800105c:	20000004 	.word	0x20000004

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM2_IRQHandler+0x10>)
 8001092:	f003 ff07 	bl	8004ea4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000c28 	.word	0x20000c28

080010a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <ETH_IRQHandler+0x10>)
 80010a6:	f001 fb13 	bl	80026d0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20005654 	.word	0x20005654

080010b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_kill>:

int _kill(int pid, int sig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <_kill+0x20>)
 80010d0:	2216      	movs	r2, #22
 80010d2:	601a      	str	r2, [r3, #0]
  return -1;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	2000cdbc 	.word	0x2000cdbc

080010e8 <_exit>:

void _exit (int status)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffe5 	bl	80010c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010fa:	e7fe      	b.n	80010fa <_exit+0x12>

080010fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	e00a      	b.n	8001124 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800110e:	f3af 8000 	nop.w
 8001112:	4601      	mov	r1, r0
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	b2ca      	uxtb	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	3301      	adds	r3, #1
 8001122:	617b      	str	r3, [r7, #20]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	dbf0      	blt.n	800110e <_read+0x12>
  }

  return len;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e009      	b.n	800115c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	1c5a      	adds	r2, r3, #1
 800114c:	60ba      	str	r2, [r7, #8]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf1      	blt.n	8001148 <_write+0x12>
  }
  return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <_close>:

int _close(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117a:	4618      	mov	r0, r3
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001196:	605a      	str	r2, [r3, #4]
  return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_isatty>:

int _isatty(int file)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b480      	push	{r7}
 80011da:	b087      	sub	sp, #28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d205      	bcs.n	8001214 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <_sbrk+0x6c>)
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a06      	ldr	r2, [pc, #24]	; (800123c <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20050000 	.word	0x20050000
 8001238:	00000400 	.word	0x00000400
 800123c:	20000c74 	.word	0x20000c74
 8001240:	2000cf10 	.word	0x2000cf10
 8001244:	2000cdbc 	.word	0x2000cdbc

08001248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001270:	480d      	ldr	r0, [pc, #52]	; (80012a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001274:	4a0e      	ldr	r2, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001278:	e002      	b.n	8001280 <LoopCopyDataInit>

0800127a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800127c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127e:	3304      	adds	r3, #4

08001280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001284:	d3f9      	bcc.n	800127a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001288:	4c0b      	ldr	r4, [pc, #44]	; (80012b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800128c:	e001      	b.n	8001292 <LoopFillZerobss>

0800128e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001290:	3204      	adds	r2, #4

08001292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001294:	d3fb      	bcc.n	800128e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001296:	f7ff ffd7 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f017 fdd1 	bl	8018e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff fa89 	bl	80007b4 <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012b0:	0801d558 	.word	0x0801d558
  ldr r2, =_sbss
 80012b4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80012b8:	2000cf0c 	.word	0x2000cf0c

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>

080012be <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <LAN8742_RegisterBusIO+0x28>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <LAN8742_RegisterBusIO+0x28>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <LAN8742_RegisterBusIO+0x28>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e014      	b.n	8001316 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d17c      	bne.n	800143c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2220      	movs	r2, #32
 8001354:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	e01c      	b.n	8001396 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f107 0208 	add.w	r2, r7, #8
 8001364:	2112      	movs	r1, #18
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	4798      	blx	r3
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	da03      	bge.n	8001378 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001370:	f06f 0304 	mvn.w	r3, #4
 8001374:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001376:	e00b      	b.n	8001390 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	d105      	bne.n	8001390 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
         break;
 800138e:	e005      	b.n	800139c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b1f      	cmp	r3, #31
 800139a:	d9df      	bls.n	800135c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b1f      	cmp	r3, #31
 80013a2:	d902      	bls.n	80013aa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80013a4:	f06f 0302 	mvn.w	r3, #2
 80013a8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d145      	bne.n	800143c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6810      	ldr	r0, [r2, #0]
 80013b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013bc:	2100      	movs	r1, #0
 80013be:	4798      	blx	r3
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	db37      	blt.n	8001436 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6810      	ldr	r0, [r2, #0]
 80013ce:	f107 0208 	add.w	r2, r7, #8
 80013d2:	2100      	movs	r1, #0
 80013d4:	4798      	blx	r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db28      	blt.n	800142e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4798      	blx	r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013e6:	e01c      	b.n	8001422 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4798      	blx	r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013fa:	d80e      	bhi.n	800141a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6810      	ldr	r0, [r2, #0]
 8001404:	f107 0208 	add.w	r2, r7, #8
 8001408:	2100      	movs	r1, #0
 800140a:	4798      	blx	r3
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	da07      	bge.n	8001422 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001412:	f06f 0304 	mvn.w	r3, #4
 8001416:	613b      	str	r3, [r7, #16]
                 break;
 8001418:	e010      	b.n	800143c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800141a:	f06f 0301 	mvn.w	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
               break;
 8001420:	e00c      	b.n	800143c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1dd      	bne.n	80013e8 <LAN8742_Init+0xc6>
 800142c:	e006      	b.n	800143c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800142e:	f06f 0304 	mvn.w	r3, #4
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	e002      	b.n	800143c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001436:	f06f 0303 	mvn.w	r3, #3
 800143a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d112      	bne.n	8001468 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	4798      	blx	r3
 8001448:	4603      	mov	r3, r0
 800144a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800144c:	bf00      	nop
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	4798      	blx	r3
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001460:	d9f5      	bls.n	800144e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001468:	693b      	ldr	r3, [r7, #16]
 }
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6810      	ldr	r0, [r2, #0]
 8001486:	f107 020c 	add.w	r2, r7, #12
 800148a:	2101      	movs	r1, #1
 800148c:	4798      	blx	r3
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	da02      	bge.n	800149a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001494:	f06f 0304 	mvn.w	r3, #4
 8001498:	e06e      	b.n	8001578 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6810      	ldr	r0, [r2, #0]
 80014a2:	f107 020c 	add.w	r2, r7, #12
 80014a6:	2101      	movs	r1, #1
 80014a8:	4798      	blx	r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da02      	bge.n	80014b6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014b0:	f06f 0304 	mvn.w	r3, #4
 80014b4:	e060      	b.n	8001578 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80014c0:	2301      	movs	r3, #1
 80014c2:	e059      	b.n	8001578 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6810      	ldr	r0, [r2, #0]
 80014cc:	f107 020c 	add.w	r2, r7, #12
 80014d0:	2100      	movs	r1, #0
 80014d2:	4798      	blx	r3
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da02      	bge.n	80014e0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80014da:	f06f 0304 	mvn.w	r3, #4
 80014de:	e04b      	b.n	8001578 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11b      	bne.n	8001522 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <LAN8742_GetLinkState+0x90>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014fe:	2302      	movs	r3, #2
 8001500:	e03a      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800150c:	2303      	movs	r3, #3
 800150e:	e033      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800151a:	2304      	movs	r3, #4
 800151c:	e02c      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800151e:	2305      	movs	r3, #5
 8001520:	e02a      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6810      	ldr	r0, [r2, #0]
 800152a:	f107 020c 	add.w	r2, r7, #12
 800152e:	211f      	movs	r1, #31
 8001530:	4798      	blx	r3
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	da02      	bge.n	800153e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001538:	f06f 0304 	mvn.w	r3, #4
 800153c:	e01c      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001548:	2306      	movs	r3, #6
 800154a:	e015      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f003 031c 	and.w	r3, r3, #28
 8001552:	2b18      	cmp	r3, #24
 8001554:	d101      	bne.n	800155a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001556:	2302      	movs	r3, #2
 8001558:	e00e      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f003 031c 	and.w	r3, r3, #28
 8001560:	2b08      	cmp	r3, #8
 8001562:	d101      	bne.n	8001568 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001564:	2303      	movs	r3, #3
 8001566:	e007      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 031c 	and.w	r3, r3, #28
 800156e:	2b14      	cmp	r3, #20
 8001570:	d101      	bne.n	8001576 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001572:	2304      	movs	r3, #4
 8001574:	e000      	b.n	8001578 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001576:	2305      	movs	r3, #5
    }				
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001584:	2003      	movs	r0, #3
 8001586:	f000 fcf4 	bl	8001f72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800158a:	200f      	movs	r0, #15
 800158c:	f7ff fcee 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001590:	f7ff fbca 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_IncTick+0x20>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_IncTick+0x24>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4413      	add	r3, r2
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_IncTick+0x24>)
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000c78 	.word	0x20000c78

080015c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetTick+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000c78 	.word	0x20000c78

080015dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e4:	f7ff ffee 	bl	80015c4 <HAL_GetTick>
 80015e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d005      	beq.n	8001602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_Delay+0x44>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001602:	bf00      	nop
 8001604:	f7ff ffde 	bl	80015c4 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8f7      	bhi.n	8001604 <HAL_Delay+0x28>
  {
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e031      	b.n	800169e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fb98 	bl	8000d78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_ADC_Init+0x84>)
 8001668:	4013      	ands	r3, r2
 800166a:	f043 0202 	orr.w	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fad6 	bl	8001c24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	e001      	b.n	8001694 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800169c:	7bfb      	ldrb	r3, [r7, #15]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	ffffeefd 	.word	0xffffeefd

080016ac <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Start+0x1a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0ad      	b.n	8001822 <HAL_ADC_Start+0x176>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d018      	beq.n	800170e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <HAL_ADC_Start+0x184>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_ADC_Start+0x188>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3b01      	subs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	d175      	bne.n	8001808 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001720:	4b45      	ldr	r3, [pc, #276]	; (8001838 <HAL_ADC_Start+0x18c>)
 8001722:	4013      	ands	r3, r2
 8001724:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001742:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001756:	d106      	bne.n	8001766 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f023 0206 	bic.w	r2, r3, #6
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
 8001764:	e002      	b.n	800176c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800177c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800177e:	4b2f      	ldr	r3, [pc, #188]	; (800183c <HAL_ADC_Start+0x190>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10f      	bne.n	80017aa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d143      	bne.n	8001820 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e03a      	b.n	8001820 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_ADC_Start+0x194>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d10e      	bne.n	80017d2 <HAL_ADC_Start+0x126>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017d0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <HAL_ADC_Start+0x190>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d120      	bne.n	8001820 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_ADC_Start+0x198>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d11b      	bne.n	8001820 <HAL_ADC_Start+0x174>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d114      	bne.n	8001820 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f043 0210 	orr.w	r2, r3, #16
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83
 8001838:	fffff8fe 	.word	0xfffff8fe
 800183c:	40012300 	.word	0x40012300
 8001840:	40012000 	.word	0x40012000
 8001844:	40012200 	.word	0x40012200

08001848 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	d113      	bne.n	800188e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001874:	d10b      	bne.n	800188e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e063      	b.n	8001956 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800188e:	f7ff fe99 	bl	80015c4 <HAL_GetTick>
 8001892:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001894:	e021      	b.n	80018da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d01d      	beq.n	80018da <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_ADC_PollForConversion+0x6c>
 80018a4:	f7ff fe8e 	bl	80015c4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d212      	bcs.n	80018da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d00b      	beq.n	80018da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f043 0204 	orr.w	r2, r3, #4
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e03d      	b.n	8001956 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d1d6      	bne.n	8001896 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0212 	mvn.w	r2, #18
 80018f0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d123      	bne.n	8001954 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d11f      	bne.n	8001954 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800192c:	2b00      	cmp	r3, #0
 800192e:	d111      	bne.n	8001954 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1c>
 8001990:	2302      	movs	r3, #2
 8001992:	e136      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x28a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d93a      	bls.n	8001a1a <HAL_ADC_ConfigChannel+0xa2>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019ac:	d035      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68d9      	ldr	r1, [r3, #12]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	461a      	mov	r2, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	3b1e      	subs	r3, #30
 80019c4:	2207      	movs	r2, #7
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a8d      	ldr	r2, [pc, #564]	; (8001c10 <HAL_ADC_ConfigChannel+0x298>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10a      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68d9      	ldr	r1, [r3, #12]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	061a      	lsls	r2, r3, #24
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f2:	e035      	b.n	8001a60 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68d9      	ldr	r1, [r3, #12]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4403      	add	r3, r0
 8001a0c:	3b1e      	subs	r3, #30
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a18:	e022      	b.n	8001a60 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6919      	ldr	r1, [r3, #16]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2207      	movs	r2, #7
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43da      	mvns	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6919      	ldr	r1, [r3, #16]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4403      	add	r3, r0
 8001a56:	409a      	lsls	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b06      	cmp	r3, #6
 8001a66:	d824      	bhi.n	8001ab2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b05      	subs	r3, #5
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43da      	mvns	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	400a      	ands	r2, r1
 8001a88:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	4618      	mov	r0, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3b05      	subs	r3, #5
 8001aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab0:	e04c      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d824      	bhi.n	8001b04 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b23      	subs	r3, #35	; 0x23
 8001acc:	221f      	movs	r2, #31
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	400a      	ands	r2, r1
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	4613      	mov	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4413      	add	r3, r2
 8001af4:	3b23      	subs	r3, #35	; 0x23
 8001af6:	fa00 f203 	lsl.w	r2, r0, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	631a      	str	r2, [r3, #48]	; 0x30
 8001b02:	e023      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b41      	subs	r3, #65	; 0x41
 8001b16:	221f      	movs	r2, #31
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43da      	mvns	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	400a      	ands	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3b41      	subs	r3, #65	; 0x41
 8001b40:	fa00 f203 	lsl.w	r2, r0, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <HAL_ADC_ConfigChannel+0x29c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1f4>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b5e:	d105      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a2c      	ldr	r2, [pc, #176]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b6a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a28      	ldr	r2, [pc, #160]	; (8001c14 <HAL_ADC_ConfigChannel+0x29c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10f      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x21e>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d10b      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a25      	ldr	r2, [pc, #148]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b88:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001b8a:	4b23      	ldr	r3, [pc, #140]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <HAL_ADC_ConfigChannel+0x29c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d12b      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x280>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_ADC_ConfigChannel+0x298>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_ADC_ConfigChannel+0x23a>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b11      	cmp	r3, #17
 8001bb0:	d122      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001bb2:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bb8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bbc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_ADC_ConfigChannel+0x2a0>)
 8001bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bc8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <HAL_ADC_ConfigChannel+0x298>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_ADC_ConfigChannel+0x2a4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_ADC_ConfigChannel+0x2a8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9a      	lsrs	r2, r3, #18
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001bea:	e002      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f9      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	10000012 	.word	0x10000012
 8001c14:	40012000 	.word	0x40012000
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	431bde83 	.word	0x431bde83

08001c24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001c2c:	4b78      	ldr	r3, [pc, #480]	; (8001e10 <ADC_Init+0x1ec>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a77      	ldr	r2, [pc, #476]	; (8001e10 <ADC_Init+0x1ec>)
 8001c32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001c36:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001c38:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <ADC_Init+0x1ec>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4973      	ldr	r1, [pc, #460]	; (8001e10 <ADC_Init+0x1ec>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	021a      	lsls	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6899      	ldr	r1, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <ADC_Init+0x1f0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d022      	beq.n	8001cfe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	e00f      	b.n	8001d1e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0202 	bic.w	r2, r2, #2
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	005a      	lsls	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	3b01      	subs	r3, #1
 8001d78:	035a      	lsls	r2, r3, #13
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e007      	b.n	8001d94 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	051a      	lsls	r2, r3, #20
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd6:	025a      	lsls	r2, r3, #9
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	029a      	lsls	r2, r3, #10
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40012300 	.word	0x40012300
 8001e14:	0f000001 	.word	0x0f000001

08001e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <__NVIC_SetPriorityGrouping+0x40>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e34:	4013      	ands	r3, r2
 8001e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x40>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000ed00 	.word	0xe000ed00
 8001e5c:	05fa0000 	.word	0x05fa0000

08001e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e64:	4b04      	ldr	r3, [pc, #16]	; (8001e78 <__NVIC_GetPriorityGrouping+0x18>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 0307 	and.w	r3, r3, #7
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	db0b      	blt.n	8001ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	f003 021f 	and.w	r2, r3, #31
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <__NVIC_EnableIRQ+0x38>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	095b      	lsrs	r3, r3, #5
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	6039      	str	r1, [r7, #0]
 8001ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db0a      	blt.n	8001ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	490c      	ldr	r1, [pc, #48]	; (8001f04 <__NVIC_SetPriority+0x4c>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	0112      	lsls	r2, r2, #4
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	440b      	add	r3, r1
 8001edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee0:	e00a      	b.n	8001ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	4908      	ldr	r1, [pc, #32]	; (8001f08 <__NVIC_SetPriority+0x50>)
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	3b04      	subs	r3, #4
 8001ef0:	0112      	lsls	r2, r2, #4
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	761a      	strb	r2, [r3, #24]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000e100 	.word	0xe000e100
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b089      	sub	sp, #36	; 0x24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f1c3 0307 	rsb	r3, r3, #7
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	bf28      	it	cs
 8001f2a:	2304      	movcs	r3, #4
 8001f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3304      	adds	r3, #4
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d902      	bls.n	8001f3c <NVIC_EncodePriority+0x30>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3b03      	subs	r3, #3
 8001f3a:	e000      	b.n	8001f3e <NVIC_EncodePriority+0x32>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f40:	f04f 32ff 	mov.w	r2, #4294967295
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f54:	f04f 31ff 	mov.w	r1, #4294967295
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5e:	43d9      	mvns	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	4313      	orrs	r3, r2
         );
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3724      	adds	r7, #36	; 0x24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ff4c 	bl	8001e18 <__NVIC_SetPriorityGrouping>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9a:	f7ff ff61 	bl	8001e60 <__NVIC_GetPriorityGrouping>
 8001f9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	6978      	ldr	r0, [r7, #20]
 8001fa6:	f7ff ffb1 	bl	8001f0c <NVIC_EncodePriority>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff80 	bl	8001eb8 <__NVIC_SetPriority>
}
 8001fb8:	bf00      	nop
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff54 	bl	8001e7c <__NVIC_EnableIRQ>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06a      	b.n	80020c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d106      	bne.n	8002006 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2223      	movs	r2, #35	; 0x23
 8001ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f004 fbc5 	bl	8006790 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_ETH_Init+0xf0>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_ETH_Init+0xf0>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_ETH_Init+0xf0>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_ETH_Init+0xf4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <HAL_ETH_Init+0xf4>)
 8002024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002028:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_ETH_Init+0xf4>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_ETH_Init+0xf4>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_ETH_Init+0xf4>)
 800203a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7ff fab6 	bl	80015c4 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800205a:	e011      	b.n	8002080 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800205c:	f7ff fab2 	bl	80015c4 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800206a:	d909      	bls.n	8002080 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	22e0      	movs	r2, #224	; 0xe0
 8002078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e021      	b.n	80020c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e4      	bne.n	800205c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 ff4c 	bl	8002f30 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fff3 	bl	8003084 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f001 f849 	bl	8003136 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 ffb1 	bl	8003014 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2210      	movs	r2, #16
 80020be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800

080020d4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d17b      	bne.n	80021de <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2223      	movs	r2, #35	; 0x23
 80020ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_ETH_Start_IT+0x114>)
 8002112:	430b      	orrs	r3, r1
 8002114:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002128:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f9fc 	bl	8002530 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0208 	orr.w	r2, r2, #8
 8002146:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002150:	2001      	movs	r0, #1
 8002152:	f7ff fa43 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0204 	orr.w	r2, r2, #4
 800216c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff fa30 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 fd74 	bl	8002c72 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800219c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021a0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021b8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c2:	69d9      	ldr	r1, [r3, #28]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_ETH_Start_IT+0x118>)
 80021ca:	430b      	orrs	r3, r1
 80021cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2223      	movs	r2, #35	; 0x23
 80021d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	00020060 	.word	0x00020060
 80021ec:	0001a0c1 	.word	0x0001a0c1

080021f0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021fe:	2b23      	cmp	r3, #35	; 0x23
 8002200:	d16e      	bne.n	80022e0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2223      	movs	r2, #35	; 0x23
 8002206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	69d9      	ldr	r1, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <HAL_ETH_Stop_IT+0xfc>)
 800221a:	400b      	ands	r3, r1
 800221c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002220:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002234:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002238:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	f023 0302 	bic.w	r3, r3, #2
 800224c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002250:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0204 	bic.w	r2, r2, #4
 8002260:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff f9b6 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fcfa 	bl	8002c72 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff f9a0 	bl	80015dc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e00e      	b.n	80022c8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	3212      	adds	r2, #18
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d9ed      	bls.n	80022aa <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2210      	movs	r2, #16
 80022d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e000      	b.n	80022e2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
  }
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	fffe5f3e 	.word	0xfffe5f3e

080022f0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e045      	b.n	80023a0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231a:	2b23      	cmp	r3, #35	; 0x23
 800231c:	d13f      	bne.n	800239e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002326:	2201      	movs	r2, #1
 8002328:	6839      	ldr	r1, [r7, #0]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 ff70 	bl	8003210 <ETH_Prepare_Tx_Descriptors>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e02a      	b.n	80023a0 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800234a:	f3bf 8f4f 	dsb	sy
}
 800234e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	2b03      	cmp	r3, #3
 8002360:	d904      	bls.n	800236c <HAL_ETH_Transmit_IT+0x7c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	1f1a      	subs	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	461a      	mov	r2, r3
 8002388:	2304      	movs	r3, #4
 800238a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f043 0201 	orr.w	r2, r3, #1
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0a8      	b.n	8002526 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023da:	2b23      	cmp	r3, #35	; 0x23
 80023dc:	d001      	beq.n	80023e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0a1      	b.n	8002526 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	3212      	adds	r2, #18
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023f8:	f1c3 0304 	rsb	r3, r3, #4
 80023fc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80023fe:	e06a      	b.n	80024d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	699a      	ldr	r2, [r3, #24]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002424:	2b00      	cmp	r3, #0
 8002426:	d103      	bne.n	8002430 <HAL_ETH_ReadData+0x88>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d040      	beq.n	80024b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00c      	beq.n	8002474 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0c1b      	lsrs	r3, r3, #16
 8002460:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002464:	3b04      	subs	r3, #4
 8002466:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002470:	2301      	movs	r3, #1
 8002472:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800248c:	461a      	mov	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	b29b      	uxth	r3, r3
 8002492:	f004 fb49 	bl	8006b28 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	441a      	add	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2200      	movs	r2, #0
 80024b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3301      	adds	r3, #1
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d902      	bls.n	80024c4 <HAL_ETH_ReadData+0x11c>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b04      	subs	r3, #4
 80024c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	3212      	adds	r2, #18
 80024ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	3301      	adds	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db06      	blt.n	80024ec <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d202      	bcs.n	80024ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d089      	beq.n	8002400 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	441a      	add	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f815 	bl	8002530 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	e000      	b.n	8002526 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800253c:	2301      	movs	r3, #1
 800253e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002544:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	3212      	adds	r2, #18
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002556:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002558:	e040      	b.n	80025dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	4618      	mov	r0, r3
 8002568:	f004 faae 	bl	8006ac8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	74fb      	strb	r3, [r7, #19]
 8002576:	e007      	b.n	8002588 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	461a      	mov	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d026      	beq.n	80025dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	4a1e      	ldr	r2, [pc, #120]	; (8002614 <ETH_UpdateDescriptor+0xe4>)
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	e003      	b.n	80025a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80025a4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80025a6:	f3bf 8f5f 	dmb	sy
}
 80025aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d902      	bls.n	80025ca <ETH_UpdateDescriptor+0x9a>
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	3b04      	subs	r3, #4
 80025c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69fa      	ldr	r2, [r7, #28]
 80025ce:	3212      	adds	r2, #18
 80025d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3b01      	subs	r3, #1
 80025da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <ETH_UpdateDescriptor+0xb8>
 80025e2:	7cfb      	ldrb	r3, [r7, #19]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1b8      	bne.n	800255a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d00c      	beq.n	800260c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fa:	461a      	mov	r2, r3
 80025fc:	2300      	movs	r3, #0
 80025fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	80004600 	.word	0x80004600

08002618 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3318      	adds	r3, #24
 8002624:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002636:	e03f      	b.n	80026b8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002638:	2301      	movs	r3, #1
 800263a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3b01      	subs	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	3304      	adds	r3, #4
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	3301      	adds	r3, #1
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d028      	beq.n	80026b8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68d9      	ldr	r1, [r3, #12]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db1b      	blt.n	80026b4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	3304      	adds	r3, #4
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	4618      	mov	r0, r3
 800268a:	f004 fa8f 	bl	8006bac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	3304      	adds	r3, #4
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3301      	adds	r3, #1
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80026b2:	e001      	b.n	80026b8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_ETH_ReleaseTxPacket+0xac>
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1b9      	bne.n	8002638 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d112      	bne.n	8002710 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d109      	bne.n	8002710 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002704:	461a      	mov	r2, r3
 8002706:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_ETH_IRQHandler+0x178>)
 8002708:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f003 fda4 	bl	8006258 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d113      	bne.n	800274a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b01      	cmp	r3, #1
 8002732:	d10a      	bne.n	800274a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800273c:	461a      	mov	r2, r3
 800273e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002742:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f003 fd97 	bl	8006278 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	d14c      	bne.n	80027f8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002770:	d142      	bne.n	80027f8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f043 0208 	orr.w	r2, r3, #8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002794:	d11a      	bne.n	80027cc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	4b2a      	ldr	r3, [pc, #168]	; (800284c <HAL_ETH_IRQHandler+0x17c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80027bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027c0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	22e0      	movs	r2, #224	; 0xe0
 80027c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027ca:	e012      	b.n	80027f2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d4:	695a      	ldr	r2, [r3, #20]
 80027d6:	f248 6380 	movw	r3, #34432	; 0x8680
 80027da:	4013      	ands	r3, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ea:	461a      	mov	r2, r3
 80027ec:	f248 6380 	movw	r3, #34432	; 0x8680
 80027f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f003 fd50 	bl	8006298 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b08      	cmp	r3, #8
 8002804:	d10e      	bne.n	8002824 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f81c 	bl	8002854 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_ETH_IRQHandler+0x180>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d006      	beq.n	800283e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_ETH_IRQHandler+0x180>)
 8002832:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002836:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f815 	bl	8002868 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	00010040 	.word	0x00010040
 800284c:	007e2000 	.word	0x007e2000
 8002850:	40013c00 	.word	0x40013c00

08002854 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 031c 	and.w	r3, r3, #28
 8002898:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	02db      	lsls	r3, r3, #11
 800289e:	b29b      	uxth	r3, r3
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	019b      	lsls	r3, r3, #6
 80028aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f023 0302 	bic.w	r3, r3, #2
 80028ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80028cc:	f7fe fe7a 	bl	80015c4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028d2:	e00d      	b.n	80028f0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80028d4:	f7fe fe76 	bl	80015c4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d301      	bcc.n	80028e8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e010      	b.n	800290a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1ec      	bne.n	80028d4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	b29b      	uxth	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 031c 	and.w	r3, r3, #28
 800292e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	02db      	lsls	r3, r3, #11
 8002934:	b29b      	uxth	r3, r3
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	019b      	lsls	r3, r3, #6
 8002940:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800296c:	f7fe fe2a 	bl	80015c4 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002972:	e00d      	b.n	8002990 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002974:	f7fe fe26 	bl	80015c4 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d301      	bcc.n	8002988 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e009      	b.n	800299c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1ec      	bne.n	8002974 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0d9      	b.n	8002b6c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bf14      	ite	ne
 80029c6:	2301      	movne	r3, #1
 80029c8:	2300      	moveq	r3, #0
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf0c      	ite	eq
 80029f0:	2301      	moveq	r3, #1
 80029f2:	2300      	movne	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	bf0c      	ite	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	2300      	movne	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf0c      	ite	eq
 8002b08:	2301      	moveq	r3, #1
 8002b0a:	2300      	movne	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	bf14      	ite	ne
 8002b40:	2301      	movne	r3, #1
 8002b42:	2300      	moveq	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e00b      	b.n	8002ba4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d105      	bne.n	8002ba2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b96:	6839      	ldr	r1, [r7, #0]
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f88f 	bl	8002cbc <ETH_SetMACConfig>

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f023 031c 	bic.w	r3, r3, #28
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bc4:	f001 fc3e 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8002bc8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d908      	bls.n	8002be4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d804      	bhi.n	8002be4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f043 0308 	orr.w	r3, r3, #8
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	e027      	b.n	8002c34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4a18      	ldr	r2, [pc, #96]	; (8002c48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d908      	bls.n	8002bfe <HAL_ETH_SetMDIOClockRange+0x52>
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d204      	bcs.n	8002bfe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f043 030c 	orr.w	r3, r3, #12
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e01a      	b.n	8002c34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d303      	bcc.n	8002c0e <HAL_ETH_SetMDIOClockRange+0x62>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d911      	bls.n	8002c32 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d908      	bls.n	8002c28 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d804      	bhi.n	8002c28 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e005      	b.n	8002c34 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f043 0310 	orr.w	r3, r3, #16
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e000      	b.n	8002c34 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002c32:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	01312cff 	.word	0x01312cff
 8002c48:	02160ebf 	.word	0x02160ebf
 8002c4c:	03938700 	.word	0x03938700
 8002c50:	05f5e0ff 	.word	0x05f5e0ff
 8002c54:	08f0d17f 	.word	0x08f0d17f

08002c58 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6812      	ldr	r2, [r2, #0]
 8002c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c94:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fe fc9a 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cb2:	6193      	str	r3, [r2, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4b51      	ldr	r3, [pc, #324]	; (8002e18 <ETH_SetMACConfig+0x15c>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	7c1b      	ldrb	r3, [r3, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <ETH_SetMACConfig+0x28>
 8002cde:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ce2:	e000      	b.n	8002ce6 <ETH_SetMACConfig+0x2a>
 8002ce4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7c5b      	ldrb	r3, [r3, #17]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <ETH_SetMACConfig+0x38>
 8002cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf2:	e000      	b.n	8002cf6 <ETH_SetMACConfig+0x3a>
 8002cf4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cf6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cfc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	7fdb      	ldrb	r3, [r3, #31]
 8002d02:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d04:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	7f92      	ldrb	r2, [r2, #30]
 8002d10:	2a00      	cmp	r2, #0
 8002d12:	d102      	bne.n	8002d1a <ETH_SetMACConfig+0x5e>
 8002d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d18:	e000      	b.n	8002d1c <ETH_SetMACConfig+0x60>
 8002d1a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	7f1b      	ldrb	r3, [r3, #28]
 8002d22:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d24:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d2a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	791b      	ldrb	r3, [r3, #4]
 8002d30:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d3a:	2a00      	cmp	r2, #0
 8002d3c:	d102      	bne.n	8002d44 <ETH_SetMACConfig+0x88>
 8002d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d42:	e000      	b.n	8002d46 <ETH_SetMACConfig+0x8a>
 8002d44:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d46:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	7bdb      	ldrb	r3, [r3, #15]
 8002d4c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d4e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d5c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d76:	2001      	movs	r0, #1
 8002d78:	f7fe fc30 	bl	80015dc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d92:	4013      	ands	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	d101      	bne.n	8002daa <ETH_SetMACConfig+0xee>
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	e000      	b.n	8002dac <ETH_SetMACConfig+0xf0>
 8002daa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002dac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002db2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002dba:	2a01      	cmp	r2, #1
 8002dbc:	d101      	bne.n	8002dc2 <ETH_SetMACConfig+0x106>
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	e000      	b.n	8002dc4 <ETH_SetMACConfig+0x108>
 8002dc2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dc4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002dcc:	2a01      	cmp	r2, #1
 8002dce:	d101      	bne.n	8002dd4 <ETH_SetMACConfig+0x118>
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	e000      	b.n	8002dd6 <ETH_SetMACConfig+0x11a>
 8002dd4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dd6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002dde:	2a01      	cmp	r2, #1
 8002de0:	d101      	bne.n	8002de6 <ETH_SetMACConfig+0x12a>
 8002de2:	2202      	movs	r2, #2
 8002de4:	e000      	b.n	8002de8 <ETH_SetMACConfig+0x12c>
 8002de6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002de8:	4313      	orrs	r3, r2
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e00:	2001      	movs	r0, #1
 8002e02:	f7fe fbeb 	bl	80015dc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	ff20810f 	.word	0xff20810f

08002e1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <ETH_SetDMAConfig+0x110>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	7b1b      	ldrb	r3, [r3, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d102      	bne.n	8002e48 <ETH_SetDMAConfig+0x2c>
 8002e42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e46:	e000      	b.n	8002e4a <ETH_SetDMAConfig+0x2e>
 8002e48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	7b5b      	ldrb	r3, [r3, #13]
 8002e4e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e50:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	7f52      	ldrb	r2, [r2, #29]
 8002e56:	2a00      	cmp	r2, #0
 8002e58:	d102      	bne.n	8002e60 <ETH_SetDMAConfig+0x44>
 8002e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e5e:	e000      	b.n	8002e62 <ETH_SetDMAConfig+0x46>
 8002e60:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e62:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	7b9b      	ldrb	r3, [r3, #14]
 8002e68:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e6a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	7f1b      	ldrb	r3, [r3, #28]
 8002e76:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	7f9b      	ldrb	r3, [r3, #30]
 8002e7e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e80:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e86:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e8e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e90:	4313      	orrs	r3, r2
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7fe fb92 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	791b      	ldrb	r3, [r3, #4]
 8002eca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ed0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ed6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002edc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ee4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ee6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ef4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f02:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7fe fb63 	bl	80015dc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6013      	str	r3, [r2, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	f8de3f23 	.word	0xf8de3f23

08002f30 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b0a6      	sub	sp, #152	; 0x98
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f96:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe86 	bl	8002cbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fe6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003000:	f107 0308 	add.w	r3, r7, #8
 8003004:	4619      	mov	r1, r3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ff08 	bl	8002e1c <ETH_SetDMAConfig>
}
 800300c:	bf00      	nop
 800300e:	3798      	adds	r7, #152	; 0x98
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003014:	b480      	push	{r7}
 8003016:	b087      	sub	sp, #28
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3305      	adds	r3, #5
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	3204      	adds	r2, #4
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <ETH_MACAddressConfig+0x68>)
 8003036:	4413      	add	r3, r2
 8003038:	461a      	mov	r2, r3
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3303      	adds	r3, #3
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	061a      	lsls	r2, r3, #24
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3302      	adds	r3, #2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3301      	adds	r3, #1
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	4313      	orrs	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	7812      	ldrb	r2, [r2, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <ETH_MACAddressConfig+0x6c>)
 8003066:	4413      	add	r3, r2
 8003068:	461a      	mov	r2, r3
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40028040 	.word	0x40028040
 8003080:	40028044 	.word	0x40028044

08003084 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e03e      	b.n	8003110 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68d9      	ldr	r1, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	3206      	adds	r2, #6
 80030c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d80c      	bhi.n	80030f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68d9      	ldr	r1, [r3, #12]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	461a      	mov	r2, r3
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e004      	b.n	80030fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d9bd      	bls.n	8003092 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003128:	611a      	str	r2, [r3, #16]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e046      	b.n	80031d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6919      	ldr	r1, [r3, #16]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2200      	movs	r2, #0
 8003172:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003180:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003188:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	3212      	adds	r2, #18
 800319e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d80c      	bhi.n	80031c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6919      	ldr	r1, [r3, #16]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	461a      	mov	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	e004      	b.n	80031cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d9b5      	bls.n	8003144 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003202:	60da      	str	r2, [r3, #12]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003210:	b480      	push	{r7}
 8003212:	b08d      	sub	sp, #52	; 0x34
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	3318      	adds	r3, #24
 8003220:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003252:	d007      	beq.n	8003264 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	3304      	adds	r3, #4
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003264:	2302      	movs	r3, #2
 8003266:	e0ff      	b.n	8003468 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	3301      	adds	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4b7d      	ldr	r3, [pc, #500]	; (8003474 <ETH_Prepare_Tx_Descriptors+0x264>)
 800327e:	4013      	ands	r3, r2
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	6852      	ldr	r2, [r2, #4]
 8003284:	431a      	orrs	r2, r3
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80032ea:	f3bf 8f5f 	dmb	sy
}
 80032ee:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80032fc:	e082      	b.n	8003404 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e005      	b.n	800332a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	3301      	adds	r3, #1
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	2b03      	cmp	r3, #3
 8003334:	d902      	bls.n	800333c <ETH_Prepare_Tx_Descriptors+0x12c>
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	3b04      	subs	r3, #4
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003344:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800335a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800335e:	d007      	beq.n	8003370 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	3304      	adds	r3, #4
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d029      	beq.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800337e:	2300      	movs	r3, #0
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 8003382:	e019      	b.n	80033b8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003384:	f3bf 8f5f 	dmb	sy
}
 8003388:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	3301      	adds	r3, #1
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d902      	bls.n	80033a8 <ETH_Prepare_Tx_Descriptors+0x198>
 80033a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a4:	3b04      	subs	r3, #4
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80033b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b4:	3301      	adds	r3, #1
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80033b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3e1      	bcc.n	8003384 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	e051      	b.n	8003468 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <ETH_Prepare_Tx_Descriptors+0x264>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	3301      	adds	r3, #1
 80033f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80033f2:	f3bf 8f5f 	dmb	sy
}
 80033f6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f47f af78 	bne.w	80032fe <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	e005      	b.n	800342e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800343e:	6979      	ldr	r1, [r7, #20]
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	3304      	adds	r3, #4
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003450:	b672      	cpsid	i
}
 8003452:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003462:	b662      	cpsie	i
}
 8003464:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3734      	adds	r7, #52	; 0x34
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	ffffe000 	.word	0xffffe000

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e175      	b.n	8003784 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	f040 8164 	bne.w	800377e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d005      	beq.n	80034ce <HAL_GPIO_Init+0x56>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d130      	bne.n	8003530 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003504:	2201      	movs	r2, #1
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 0201 	and.w	r2, r3, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b03      	cmp	r3, #3
 800353a:	d017      	beq.n	800356c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	2203      	movs	r2, #3
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d123      	bne.n	80035c0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	08da      	lsrs	r2, r3, #3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3208      	adds	r2, #8
 8003580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	220f      	movs	r2, #15
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	08da      	lsrs	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3208      	adds	r2, #8
 80035ba:	69b9      	ldr	r1, [r7, #24]
 80035bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	2203      	movs	r2, #3
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0203 	and.w	r2, r3, #3
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80be 	beq.w	800377e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_GPIO_Init+0x324>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_GPIO_Init+0x324>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_GPIO_Init+0x324>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800361a:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_GPIO_Init+0x328>)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a58      	ldr	r2, [pc, #352]	; (80037a4 <HAL_GPIO_Init+0x32c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d037      	beq.n	80036b6 <HAL_GPIO_Init+0x23e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_GPIO_Init+0x330>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_GPIO_Init+0x23a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a56      	ldr	r2, [pc, #344]	; (80037ac <HAL_GPIO_Init+0x334>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02b      	beq.n	80036ae <HAL_GPIO_Init+0x236>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a55      	ldr	r2, [pc, #340]	; (80037b0 <HAL_GPIO_Init+0x338>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d025      	beq.n	80036aa <HAL_GPIO_Init+0x232>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a54      	ldr	r2, [pc, #336]	; (80037b4 <HAL_GPIO_Init+0x33c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <HAL_GPIO_Init+0x22e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a53      	ldr	r2, [pc, #332]	; (80037b8 <HAL_GPIO_Init+0x340>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x22a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a52      	ldr	r2, [pc, #328]	; (80037bc <HAL_GPIO_Init+0x344>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x226>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_GPIO_Init+0x348>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x222>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_GPIO_Init+0x34c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x21e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4f      	ldr	r2, [pc, #316]	; (80037c8 <HAL_GPIO_Init+0x350>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x21a>
 800368e:	2309      	movs	r3, #9
 8003690:	e012      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 8003692:	230a      	movs	r3, #10
 8003694:	e010      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 8003696:	2308      	movs	r3, #8
 8003698:	e00e      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 800369a:	2307      	movs	r3, #7
 800369c:	e00c      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 800369e:	2306      	movs	r3, #6
 80036a0:	e00a      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036a2:	2305      	movs	r3, #5
 80036a4:	e008      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036a6:	2304      	movs	r3, #4
 80036a8:	e006      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036aa:	2303      	movs	r3, #3
 80036ac:	e004      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e002      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_GPIO_Init+0x240>
 80036b6:	2300      	movs	r3, #0
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f002 0203 	and.w	r2, r2, #3
 80036be:	0092      	lsls	r2, r2, #2
 80036c0:	4093      	lsls	r3, r2
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80036c8:	4935      	ldr	r1, [pc, #212]	; (80037a0 <HAL_GPIO_Init+0x328>)
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	089b      	lsrs	r3, r3, #2
 80036ce:	3302      	adds	r3, #2
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_GPIO_Init+0x354>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a34      	ldr	r2, [pc, #208]	; (80037cc <HAL_GPIO_Init+0x354>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a29      	ldr	r2, [pc, #164]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_GPIO_Init+0x354>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	43db      	mvns	r3, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4013      	ands	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_GPIO_Init+0x354>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_GPIO_Init+0x354>)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3301      	adds	r3, #1
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	f67f ae86 	bls.w	8003498 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3724      	adds	r7, #36	; 0x24
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40013800 	.word	0x40013800
 80037a4:	40020000 	.word	0x40020000
 80037a8:	40020400 	.word	0x40020400
 80037ac:	40020800 	.word	0x40020800
 80037b0:	40020c00 	.word	0x40020c00
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40021400 	.word	0x40021400
 80037bc:	40021800 	.word	0x40021800
 80037c0:	40021c00 	.word	0x40021c00
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022400 	.word	0x40022400
 80037cc:	40013c00 	.word	0x40013c00

080037d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003810:	787b      	ldrb	r3, [r7, #1]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003816:	887a      	ldrh	r2, [r7, #2]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800381c:	e003      	b.n	8003826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	041a      	lsls	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	619a      	str	r2, [r3, #24]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003832:	b480      	push	{r7}
 8003834:	b085      	sub	sp, #20
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003844:	887a      	ldrh	r2, [r7, #2]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	041a      	lsls	r2, r3, #16
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	43d9      	mvns	r1, r3
 8003850:	887b      	ldrh	r3, [r7, #2]
 8003852:	400b      	ands	r3, r1
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	619a      	str	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003868:	b08f      	sub	sp, #60	; 0x3c
 800386a:	af0a      	add	r7, sp, #40	; 0x28
 800386c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e116      	b.n	8003aa6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fd faf0 	bl	8000e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d102      	bne.n	80038b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f002 f9a4 	bl	8005c04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	687e      	ldr	r6, [r7, #4]
 80038c4:	466d      	mov	r5, sp
 80038c6:	f106 0410 	add.w	r4, r6, #16
 80038ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80038da:	1d33      	adds	r3, r6, #4
 80038dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038de:	6838      	ldr	r0, [r7, #0]
 80038e0:	f002 f938 	bl	8005b54 <USB_CoreInit>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e0d7      	b.n	8003aa6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 f992 	bl	8005c26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
 8003906:	e04a      	b.n	800399e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4413      	add	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	333d      	adds	r3, #61	; 0x3d
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800391c:	7bfa      	ldrb	r2, [r7, #15]
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	333c      	adds	r3, #60	; 0x3c
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	b298      	uxth	r0, r3
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	3344      	adds	r3, #68	; 0x44
 8003944:	4602      	mov	r2, r0
 8003946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3340      	adds	r3, #64	; 0x40
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3348      	adds	r3, #72	; 0x48
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003970:	7bfa      	ldrb	r2, [r7, #15]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	334c      	adds	r3, #76	; 0x4c
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	4413      	add	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	3354      	adds	r3, #84	; 0x54
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	3301      	adds	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3af      	bcc.n	8003908 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	e044      	b.n	8003a38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039ae:	7bfa      	ldrb	r2, [r7, #15]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4413      	add	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80039d6:	7bfa      	ldrb	r2, [r7, #15]
 80039d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039da:	7bfa      	ldrb	r2, [r7, #15]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039f0:	7bfa      	ldrb	r2, [r7, #15]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	3301      	adds	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d3b5      	bcc.n	80039ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	687e      	ldr	r6, [r7, #4]
 8003a4a:	466d      	mov	r5, sp
 8003a4c:	f106 0410 	add.w	r4, r6, #16
 8003a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a60:	1d33      	adds	r3, r6, #4
 8003a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f002 f92b 	bl	8005cc0 <USB_DevInit>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e014      	b.n	8003aa6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d102      	bne.n	8003a9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f80b 	bl	8003ab0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fae9 	bl	8006076 <USB_DevDisconnect>

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003ab0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	10000003 	.word	0x10000003

08003af8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40007000 	.word	0x40007000

08003b18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e291      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8087 	beq.w	8003c4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b3c:	4b96      	ldr	r3, [pc, #600]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 030c 	and.w	r3, r3, #12
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d00c      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b48:	4b93      	ldr	r3, [pc, #588]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 030c 	and.w	r3, r3, #12
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d112      	bne.n	8003b7a <HAL_RCC_OscConfig+0x62>
 8003b54:	4b90      	ldr	r3, [pc, #576]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b60:	d10b      	bne.n	8003b7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b62:	4b8d      	ldr	r3, [pc, #564]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d06c      	beq.n	8003c48 <HAL_RCC_OscConfig+0x130>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d168      	bne.n	8003c48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e26b      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x7a>
 8003b84:	4b84      	ldr	r3, [pc, #528]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a83      	ldr	r2, [pc, #524]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	e02e      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd8>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x9c>
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7e      	ldr	r2, [pc, #504]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a7b      	ldr	r2, [pc, #492]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xc0>
 8003bbe:	4b76      	ldr	r3, [pc, #472]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a75      	ldr	r2, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b73      	ldr	r3, [pc, #460]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0xd8>
 8003bd8:	4b6f      	ldr	r3, [pc, #444]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6e      	ldr	r2, [pc, #440]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b6c      	ldr	r3, [pc, #432]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a6b      	ldr	r2, [pc, #428]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d013      	beq.n	8003c20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fd fce4 	bl	80015c4 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c00:	f7fd fce0 	bl	80015c4 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b64      	cmp	r3, #100	; 0x64
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e21f      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b61      	ldr	r3, [pc, #388]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe8>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd fcd0 	bl	80015c4 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c28:	f7fd fccc 	bl	80015c4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b64      	cmp	r3, #100	; 0x64
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e20b      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3a:	4b57      	ldr	r3, [pc, #348]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x110>
 8003c46:	e000      	b.n	8003c4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d069      	beq.n	8003d2a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c56:	4b50      	ldr	r3, [pc, #320]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 030c 	and.w	r3, r3, #12
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c62:	4b4d      	ldr	r3, [pc, #308]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d11c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x190>
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d116      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7a:	4b47      	ldr	r3, [pc, #284]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1df      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c92:	4b41      	ldr	r3, [pc, #260]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	493d      	ldr	r1, [pc, #244]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	e040      	b.n	8003d2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d023      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fc82 	bl	80015c4 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc4:	f7fd fc7e 	bl	80015c4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1bd      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd6:	4b30      	ldr	r3, [pc, #192]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4929      	ldr	r1, [pc, #164]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
 8003cf6:	e018      	b.n	8003d2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf8:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fd fc5e 	bl	80015c4 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0c:	f7fd fc5a 	bl	80015c4 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e199      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	4b1e      	ldr	r3, [pc, #120]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d038      	beq.n	8003da8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d019      	beq.n	8003d72 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3e:	4b16      	ldr	r3, [pc, #88]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d42:	4a15      	ldr	r2, [pc, #84]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fc3b 	bl	80015c4 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d52:	f7fd fc37 	bl	80015c4 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e176      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x23a>
 8003d70:	e01a      	b.n	8003da8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fd fc21 	bl	80015c4 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d86:	f7fd fc1d 	bl	80015c4 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d903      	bls.n	8003d9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e15c      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
 8003d98:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d9c:	4b91      	ldr	r3, [pc, #580]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ee      	bne.n	8003d86 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a4 	beq.w	8003efe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a87      	ldr	r2, [pc, #540]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dde:	4b82      	ldr	r3, [pc, #520]	; (8003fe8 <HAL_RCC_OscConfig+0x4d0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d118      	bne.n	8003e1c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dea:	4b7f      	ldr	r3, [pc, #508]	; (8003fe8 <HAL_RCC_OscConfig+0x4d0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a7e      	ldr	r2, [pc, #504]	; (8003fe8 <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df6:	f7fd fbe5 	bl	80015c4 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dfe:	f7fd fbe1 	bl	80015c4 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b64      	cmp	r3, #100	; 0x64
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e120      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e10:	4b75      	ldr	r3, [pc, #468]	; (8003fe8 <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0f0      	beq.n	8003dfe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d106      	bne.n	8003e32 <HAL_RCC_OscConfig+0x31a>
 8003e24:	4b6f      	ldr	r3, [pc, #444]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e28:	4a6e      	ldr	r2, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e30:	e02d      	b.n	8003e8e <HAL_RCC_OscConfig+0x376>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x33c>
 8003e3a:	4b6a      	ldr	r3, [pc, #424]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	f023 0301 	bic.w	r3, r3, #1
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
 8003e46:	4b67      	ldr	r3, [pc, #412]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	4a66      	ldr	r2, [pc, #408]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	6713      	str	r3, [r2, #112]	; 0x70
 8003e52:	e01c      	b.n	8003e8e <HAL_RCC_OscConfig+0x376>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d10c      	bne.n	8003e76 <HAL_RCC_OscConfig+0x35e>
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	4a60      	ldr	r2, [pc, #384]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	6713      	str	r3, [r2, #112]	; 0x70
 8003e68:	4b5e      	ldr	r3, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a5d      	ldr	r2, [pc, #372]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	e00b      	b.n	8003e8e <HAL_RCC_OscConfig+0x376>
 8003e76:	4b5b      	ldr	r3, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a5a      	ldr	r2, [pc, #360]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a57      	ldr	r2, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d015      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fd fb95 	bl	80015c4 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9c:	e00a      	b.n	8003eb4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9e:	f7fd fb91 	bl	80015c4 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e0ce      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0ee      	beq.n	8003e9e <HAL_RCC_OscConfig+0x386>
 8003ec0:	e014      	b.n	8003eec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fd fb7f 	bl	80015c4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fd fb7b 	bl	80015c4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0b8      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ee      	bne.n	8003eca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef2:	4b3c      	ldr	r3, [pc, #240]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a3b      	ldr	r2, [pc, #236]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a4 	beq.w	8004050 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f08:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d06b      	beq.n	8003fec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d149      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1c:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd fb4c 	bl	80015c4 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd fb48 	bl	80015c4 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e087      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f42:	4b28      	ldr	r3, [pc, #160]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	4313      	orrs	r3, r2
 8003f74:	4a1b      	ldr	r2, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f7a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd fb1c 	bl	80015c4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd fb18 	bl	80015c4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e057      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0f0      	beq.n	8003f90 <HAL_RCC_OscConfig+0x478>
 8003fae:	e04f      	b.n	8004050 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbc:	f7fd fb02 	bl	80015c4 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fd fafe 	bl	80015c4 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e03d      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x4ac>
 8003fe2:	e035      	b.n	8004050 <HAL_RCC_OscConfig+0x538>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <HAL_RCC_OscConfig+0x544>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d028      	beq.n	800404c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	429a      	cmp	r2, r3
 8004006:	d121      	bne.n	800404c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d11a      	bne.n	800404c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004022:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004024:	4293      	cmp	r3, r2
 8004026:	d111      	bne.n	800404c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	3b01      	subs	r3, #1
 8004036:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0d0      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b6a      	ldr	r3, [pc, #424]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d910      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 020f 	bic.w	r2, r3, #15
 800408e:	4965      	ldr	r1, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d040      	beq.n	8004184 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d115      	bne.n	8004142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e073      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3d      	ldr	r3, [pc, #244]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e06b      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b39      	ldr	r3, [pc, #228]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4936      	ldr	r1, [pc, #216]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fa36 	bl	80015c4 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fa32 	bl	80015c4 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e053      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2d      	ldr	r3, [pc, #180]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d210      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b24      	ldr	r3, [pc, #144]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 020f 	bic.w	r2, r3, #15
 800419a:	4922      	ldr	r1, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1cc>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1d0>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1d4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc feaa 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	0801d1e0 	.word	0x0801d1e0
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b094      	sub	sp, #80	; 0x50
 800423e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004240:	2300      	movs	r3, #0
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
 8004244:	2300      	movs	r3, #0
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004248:	2300      	movs	r3, #0
 800424a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004250:	4b79      	ldr	r3, [pc, #484]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00d      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 800425c:	2b08      	cmp	r3, #8
 800425e:	f200 80e1 	bhi.w	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004266:	2b04      	cmp	r3, #4
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x3a>
 800426a:	e0db      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b73      	ldr	r3, [pc, #460]	; (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 800426e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004270:	e0db      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b73      	ldr	r3, [pc, #460]	; (8004440 <HAL_RCC_GetSysClockFreq+0x208>)
 8004274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004276:	e0d8      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b6f      	ldr	r3, [pc, #444]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004282:	4b6d      	ldr	r3, [pc, #436]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d063      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b6a      	ldr	r3, [pc, #424]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	63bb      	str	r3, [r7, #56]	; 0x38
 8004298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042bc:	0150      	lsls	r0, r2, #5
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4621      	mov	r1, r4
 80042c4:	1a51      	subs	r1, r2, r1
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042dc:	4659      	mov	r1, fp
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e6:	4651      	mov	r1, sl
 80042e8:	018a      	lsls	r2, r1, #6
 80042ea:	4651      	mov	r1, sl
 80042ec:	ebb2 0801 	subs.w	r8, r2, r1
 80042f0:	4659      	mov	r1, fp
 80042f2:	eb63 0901 	sbc.w	r9, r3, r1
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430a:	4690      	mov	r8, r2
 800430c:	4699      	mov	r9, r3
 800430e:	4623      	mov	r3, r4
 8004310:	eb18 0303 	adds.w	r3, r8, r3
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	462b      	mov	r3, r5
 8004318:	eb49 0303 	adc.w	r3, r9, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800432a:	4629      	mov	r1, r5
 800432c:	024b      	lsls	r3, r1, #9
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004334:	4621      	mov	r1, r4
 8004336:	024a      	lsls	r2, r1, #9
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433e:	2200      	movs	r2, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004348:	f7fb ffca 	bl	80002e0 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	e058      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	4618      	mov	r0, r3
 8004360:	4611      	mov	r1, r2
 8004362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004382:	0150      	lsls	r0, r2, #5
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4641      	mov	r1, r8
 800438a:	ebb2 0a01 	subs.w	sl, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb63 0b01 	sbc.w	fp, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043a8:	ebb2 040a 	subs.w	r4, r2, sl
 80043ac:	eb63 050b 	sbc.w	r5, r3, fp
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	00eb      	lsls	r3, r5, #3
 80043ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043be:	00e2      	lsls	r2, r4, #3
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	4643      	mov	r3, r8
 80043c6:	18e3      	adds	r3, r4, r3
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	464b      	mov	r3, r9
 80043cc:	eb45 0303 	adc.w	r3, r5, r3
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043de:	4629      	mov	r1, r5
 80043e0:	028b      	lsls	r3, r1, #10
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e8:	4621      	mov	r1, r4
 80043ea:	028a      	lsls	r2, r1, #10
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	61fa      	str	r2, [r7, #28]
 80043f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043fc:	f7fb ff70 	bl	80002e0 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800442c:	4618      	mov	r0, r3
 800442e:	3750      	adds	r7, #80	; 0x50
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	0801d1f0 	.word	0x0801d1f0

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004488:	f7ff ffdc 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0b5b      	lsrs	r3, r3, #13
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	0801d1f0 	.word	0x0801d1f0

080044ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	220f      	movs	r2, #15
 80044ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_RCC_GetClockConfig+0x5c>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <HAL_RCC_GetClockConfig+0x5c>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80044d4:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <HAL_RCC_GetClockConfig+0x5c>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_GetClockConfig+0x5c>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <HAL_RCC_GetClockConfig+0x60>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 020f 	and.w	r2, r3, #15
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	40023c00 	.word	0x40023c00

08004510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	d012      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004538:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	4a68      	ldr	r2, [pc, #416]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004542:	6093      	str	r3, [r2, #8]
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800454c:	4964      	ldr	r1, [pc, #400]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454e:	4313      	orrs	r3, r2
 8004550:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800455a:	2301      	movs	r3, #1
 800455c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800456a:	4b5d      	ldr	r3, [pc, #372]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	4959      	ldr	r1, [pc, #356]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045a6:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	494a      	ldr	r1, [pc, #296]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c4:	d101      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80045c6:	2301      	movs	r3, #1
 80045c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80045e2:	2301      	movs	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 808b 	beq.w	800470a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	4a39      	ldr	r2, [pc, #228]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004600:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004618:	f7fc ffd4 	bl	80015c4 <HAL_GetTick>
 800461c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004620:	f7fc ffd0 	bl	80015c4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e357      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800463e:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004646:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d035      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	429a      	cmp	r2, r3
 800465a:	d02e      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004670:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	4a1a      	ldr	r2, [pc, #104]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800467c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d114      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fc ff98 	bl	80015c4 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fc ff94 	bl	80015c4 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e319      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ee      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c6:	d111      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046d6:	400b      	ands	r3, r1
 80046d8:	4901      	ldr	r1, [pc, #4]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	608b      	str	r3, [r1, #8]
 80046de:	e00b      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40007000 	.word	0x40007000
 80046e8:	0ffffcff 	.word	0x0ffffcff
 80046ec:	4baa      	ldr	r3, [pc, #680]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4aa9      	ldr	r2, [pc, #676]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	4ba7      	ldr	r3, [pc, #668]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004704:	49a4      	ldr	r1, [pc, #656]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004706:	4313      	orrs	r3, r2
 8004708:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	d010      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004716:	4ba0      	ldr	r3, [pc, #640]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800471c:	4a9e      	ldr	r2, [pc, #632]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004722:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004726:	4b9c      	ldr	r3, [pc, #624]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004728:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	4999      	ldr	r1, [pc, #612]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004744:	4b94      	ldr	r3, [pc, #592]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004752:	4991      	ldr	r1, [pc, #580]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004766:	4b8c      	ldr	r3, [pc, #560]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004774:	4988      	ldr	r1, [pc, #544]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004788:	4b83      	ldr	r3, [pc, #524]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004796:	4980      	ldr	r1, [pc, #512]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b8:	4977      	ldr	r1, [pc, #476]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047cc:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f023 0203 	bic.w	r2, r3, #3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	496f      	ldr	r1, [pc, #444]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047ee:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f4:	f023 020c 	bic.w	r2, r3, #12
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	4966      	ldr	r1, [pc, #408]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	495e      	ldr	r1, [pc, #376]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	4955      	ldr	r1, [pc, #340]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004854:	4b50      	ldr	r3, [pc, #320]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	494d      	ldr	r1, [pc, #308]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004876:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004884:	4944      	ldr	r1, [pc, #272]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004898:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	493c      	ldr	r1, [pc, #240]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c8:	4933      	ldr	r1, [pc, #204]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ea:	492b      	ldr	r1, [pc, #172]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004904:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800490c:	4922      	ldr	r1, [pc, #136]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800491c:	d101      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494c:	4912      	ldr	r1, [pc, #72]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00b      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004970:	4909      	ldr	r1, [pc, #36]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d006      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 80d9 	beq.w	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a01      	ldr	r2, [pc, #4]	; (8004998 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004992:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004996:	e001      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004998:	40023800 	.word	0x40023800
 800499c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800499e:	f7fc fe11 	bl	80015c4 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049a6:	f7fc fe0d 	bl	80015c4 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b64      	cmp	r3, #100	; 0x64
 80049b2:	d901      	bls.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e194      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049b8:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f0      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d021      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d11d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049e6:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ec:	0e1b      	lsrs	r3, r3, #24
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	019a      	lsls	r2, r3, #6
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	061b      	lsls	r3, r3, #24
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	071b      	lsls	r3, r3, #28
 8004a0c:	4957      	ldr	r1, [pc, #348]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a28:	d00a      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02e      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3e:	d129      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a40:	4b4a      	ldr	r3, [pc, #296]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a4e:	4b47      	ldr	r3, [pc, #284]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0f1b      	lsrs	r3, r3, #28
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	019a      	lsls	r2, r3, #6
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	041b      	lsls	r3, r3, #16
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	071b      	lsls	r3, r3, #28
 8004a74:	493d      	ldr	r1, [pc, #244]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a82:	f023 021f 	bic.w	r2, r3, #31
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	4937      	ldr	r1, [pc, #220]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01d      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004aa0:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa6:	0e1b      	lsrs	r3, r3, #24
 8004aa8:	f003 030f 	and.w	r3, r3, #15
 8004aac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004aae:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab4:	0f1b      	lsrs	r3, r3, #28
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	019a      	lsls	r2, r3, #6
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	061b      	lsls	r3, r3, #24
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	071b      	lsls	r3, r3, #28
 8004ad4:	4925      	ldr	r1, [pc, #148]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d011      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	019a      	lsls	r2, r3, #6
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	071b      	lsls	r3, r3, #28
 8004b04:	4919      	ldr	r1, [pc, #100]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b0c:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b18:	f7fc fd54 	bl	80015c4 <HAL_GetTick>
 8004b1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b20:	f7fc fd50 	bl	80015c4 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e0d7      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	f040 80cd 	bne.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b52:	f7fc fd37 	bl	80015c4 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b5a:	f7fc fd33 	bl	80015c4 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b64      	cmp	r3, #100	; 0x64
 8004b66:	d903      	bls.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e0ba      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b70:	4b5e      	ldr	r3, [pc, #376]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7c:	d0ed      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02e      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d12a      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ba6:	4b51      	ldr	r3, [pc, #324]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bb4:	4b4d      	ldr	r3, [pc, #308]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	0f1b      	lsrs	r3, r3, #28
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	019a      	lsls	r2, r3, #6
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	071b      	lsls	r3, r3, #28
 8004bda:	4944      	ldr	r1, [pc, #272]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004be2:	4b42      	ldr	r3, [pc, #264]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	493d      	ldr	r1, [pc, #244]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d022      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c10:	d11d      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c20:	4b32      	ldr	r3, [pc, #200]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	0f1b      	lsrs	r3, r3, #28
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	019a      	lsls	r2, r3, #6
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	041b      	lsls	r3, r3, #16
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	061b      	lsls	r3, r3, #24
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	071b      	lsls	r3, r3, #28
 8004c46:	4929      	ldr	r1, [pc, #164]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d028      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c5a:	4b24      	ldr	r3, [pc, #144]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	0c1b      	lsrs	r3, r3, #16
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	019a      	lsls	r2, r3, #6
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	041b      	lsls	r3, r3, #16
 8004c80:	431a      	orrs	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	071b      	lsls	r3, r3, #28
 8004c8e:	4917      	ldr	r1, [pc, #92]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca4:	4911      	ldr	r1, [pc, #68]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fc fc84 	bl	80015c4 <HAL_GetTick>
 8004cbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cc0:	f7fc fc80 	bl	80015c4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e007      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cde:	d1ef      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e049      	b.n	8004d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f841 	bl	8004d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fa00 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e054      	b.n	8004e76 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a26      	ldr	r2, [pc, #152]	; (8004e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d022      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d01d      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a22      	ldr	r2, [pc, #136]	; (8004e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d018      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a21      	ldr	r2, [pc, #132]	; (8004e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_TIM_Base_Start_IT+0xe0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_TIM_Base_Start_IT+0x80>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1b      	ldr	r2, [pc, #108]	; (8004e9c <HAL_TIM_Base_Start_IT+0xe8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d115      	bne.n	8004e60 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_TIM_Base_Start_IT+0xec>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d015      	beq.n	8004e72 <HAL_TIM_Base_Start_IT+0xbe>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d011      	beq.n	8004e72 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e008      	b.n	8004e72 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40010400 	.word	0x40010400
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40001800 	.word	0x40001800
 8004ea0:	00010007 	.word	0x00010007

08004ea4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d122      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d11b      	bne.n	8004f00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0202 	mvn.w	r2, #2
 8004ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f905 	bl	80050f6 <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f8f7 	bl	80050e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f908 	bl	800510a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d122      	bne.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d11b      	bne.n	8004f54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f06f 0204 	mvn.w	r2, #4
 8004f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8db 	bl	80050f6 <HAL_TIM_IC_CaptureCallback>
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f8cd 	bl	80050e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 f8de 	bl	800510a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d122      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d11b      	bne.n	8004fa8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0208 	mvn.w	r2, #8
 8004f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8b1 	bl	80050f6 <HAL_TIM_IC_CaptureCallback>
 8004f94:	e005      	b.n	8004fa2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f8a3 	bl	80050e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8b4 	bl	800510a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2b10      	cmp	r3, #16
 8004fb4:	d122      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d11b      	bne.n	8004ffc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0210 	mvn.w	r2, #16
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f887 	bl	80050f6 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f879 	bl	80050e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f88a 	bl	800510a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d10e      	bne.n	8005028 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d107      	bne.n	8005028 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f06f 0201 	mvn.w	r2, #1
 8005020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fb fe6c 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d10e      	bne.n	8005054 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005040:	2b80      	cmp	r3, #128	; 0x80
 8005042:	d107      	bne.n	8005054 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f91a 	bl	8005288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005062:	d10e      	bne.n	8005082 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b80      	cmp	r3, #128	; 0x80
 8005070:	d107      	bne.n	8005082 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f90d 	bl	800529c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508c:	2b40      	cmp	r3, #64	; 0x40
 800508e:	d10e      	bne.n	80050ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d107      	bne.n	80050ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f838 	bl	800511e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d10e      	bne.n	80050da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d107      	bne.n	80050da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f06f 0220 	mvn.w	r2, #32
 80050d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8cd 	bl	8005274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050da:	bf00      	nop
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a40      	ldr	r2, [pc, #256]	; (8005248 <TIM_Base_SetConfig+0x114>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3d      	ldr	r2, [pc, #244]	; (800524c <TIM_Base_SetConfig+0x118>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <TIM_Base_SetConfig+0x11c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3b      	ldr	r2, [pc, #236]	; (8005254 <TIM_Base_SetConfig+0x120>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a3a      	ldr	r2, [pc, #232]	; (8005258 <TIM_Base_SetConfig+0x124>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2f      	ldr	r2, [pc, #188]	; (8005248 <TIM_Base_SetConfig+0x114>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d02b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d027      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2c      	ldr	r2, [pc, #176]	; (800524c <TIM_Base_SetConfig+0x118>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d023      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2b      	ldr	r2, [pc, #172]	; (8005250 <TIM_Base_SetConfig+0x11c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2a      	ldr	r2, [pc, #168]	; (8005254 <TIM_Base_SetConfig+0x120>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a29      	ldr	r2, [pc, #164]	; (8005258 <TIM_Base_SetConfig+0x124>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d017      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a28      	ldr	r2, [pc, #160]	; (800525c <TIM_Base_SetConfig+0x128>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <TIM_Base_SetConfig+0x12c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a26      	ldr	r2, [pc, #152]	; (8005264 <TIM_Base_SetConfig+0x130>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <TIM_Base_SetConfig+0x134>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a24      	ldr	r2, [pc, #144]	; (800526c <TIM_Base_SetConfig+0x138>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a23      	ldr	r2, [pc, #140]	; (8005270 <TIM_Base_SetConfig+0x13c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <TIM_Base_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_Base_SetConfig+0xf8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <TIM_Base_SetConfig+0x124>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d103      	bne.n	8005234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	615a      	str	r2, [r3, #20]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	40001800 	.word	0x40001800
 800526c:	40001c00 	.word	0x40001c00
 8005270:	40002000 	.word	0x40002000

08005274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e040      	b.n	8005344 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d106      	bne.n	80052d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fb fd70 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2224      	movs	r2, #36	; 0x24
 80052dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0201 	bic.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f82c 	bl	800534c <UART_SetConfig>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e022      	b.n	8005344 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa84 	bl	8005814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800531a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800532a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fb0b 	bl	8005958 <UART_CheckIdleState>
 8005342:	4603      	mov	r3, r0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	4ba6      	ldr	r3, [pc, #664]	; (8005610 <UART_SetConfig+0x2c4>)
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6812      	ldr	r2, [r2, #0]
 800537e:	6979      	ldr	r1, [r7, #20]
 8005380:	430b      	orrs	r3, r1
 8005382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a94      	ldr	r2, [pc, #592]	; (8005614 <UART_SetConfig+0x2c8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d120      	bne.n	800540a <UART_SetConfig+0xbe>
 80053c8:	4b93      	ldr	r3, [pc, #588]	; (8005618 <UART_SetConfig+0x2cc>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d816      	bhi.n	8005404 <UART_SetConfig+0xb8>
 80053d6:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0x90>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053f9 	.word	0x080053f9
 80053e4:	080053f3 	.word	0x080053f3
 80053e8:	080053ff 	.word	0x080053ff
 80053ec:	2301      	movs	r3, #1
 80053ee:	77fb      	strb	r3, [r7, #31]
 80053f0:	e150      	b.n	8005694 <UART_SetConfig+0x348>
 80053f2:	2302      	movs	r3, #2
 80053f4:	77fb      	strb	r3, [r7, #31]
 80053f6:	e14d      	b.n	8005694 <UART_SetConfig+0x348>
 80053f8:	2304      	movs	r3, #4
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e14a      	b.n	8005694 <UART_SetConfig+0x348>
 80053fe:	2308      	movs	r3, #8
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e147      	b.n	8005694 <UART_SetConfig+0x348>
 8005404:	2310      	movs	r3, #16
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e144      	b.n	8005694 <UART_SetConfig+0x348>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a83      	ldr	r2, [pc, #524]	; (800561c <UART_SetConfig+0x2d0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d132      	bne.n	800547a <UART_SetConfig+0x12e>
 8005414:	4b80      	ldr	r3, [pc, #512]	; (8005618 <UART_SetConfig+0x2cc>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d828      	bhi.n	8005474 <UART_SetConfig+0x128>
 8005422:	a201      	add	r2, pc, #4	; (adr r2, 8005428 <UART_SetConfig+0xdc>)
 8005424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005428:	0800545d 	.word	0x0800545d
 800542c:	08005475 	.word	0x08005475
 8005430:	08005475 	.word	0x08005475
 8005434:	08005475 	.word	0x08005475
 8005438:	08005469 	.word	0x08005469
 800543c:	08005475 	.word	0x08005475
 8005440:	08005475 	.word	0x08005475
 8005444:	08005475 	.word	0x08005475
 8005448:	08005463 	.word	0x08005463
 800544c:	08005475 	.word	0x08005475
 8005450:	08005475 	.word	0x08005475
 8005454:	08005475 	.word	0x08005475
 8005458:	0800546f 	.word	0x0800546f
 800545c:	2300      	movs	r3, #0
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e118      	b.n	8005694 <UART_SetConfig+0x348>
 8005462:	2302      	movs	r3, #2
 8005464:	77fb      	strb	r3, [r7, #31]
 8005466:	e115      	b.n	8005694 <UART_SetConfig+0x348>
 8005468:	2304      	movs	r3, #4
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e112      	b.n	8005694 <UART_SetConfig+0x348>
 800546e:	2308      	movs	r3, #8
 8005470:	77fb      	strb	r3, [r7, #31]
 8005472:	e10f      	b.n	8005694 <UART_SetConfig+0x348>
 8005474:	2310      	movs	r3, #16
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e10c      	b.n	8005694 <UART_SetConfig+0x348>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a68      	ldr	r2, [pc, #416]	; (8005620 <UART_SetConfig+0x2d4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d120      	bne.n	80054c6 <UART_SetConfig+0x17a>
 8005484:	4b64      	ldr	r3, [pc, #400]	; (8005618 <UART_SetConfig+0x2cc>)
 8005486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800548a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800548e:	2b30      	cmp	r3, #48	; 0x30
 8005490:	d013      	beq.n	80054ba <UART_SetConfig+0x16e>
 8005492:	2b30      	cmp	r3, #48	; 0x30
 8005494:	d814      	bhi.n	80054c0 <UART_SetConfig+0x174>
 8005496:	2b20      	cmp	r3, #32
 8005498:	d009      	beq.n	80054ae <UART_SetConfig+0x162>
 800549a:	2b20      	cmp	r3, #32
 800549c:	d810      	bhi.n	80054c0 <UART_SetConfig+0x174>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <UART_SetConfig+0x15c>
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d006      	beq.n	80054b4 <UART_SetConfig+0x168>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x174>
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e0f2      	b.n	8005694 <UART_SetConfig+0x348>
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e0ef      	b.n	8005694 <UART_SetConfig+0x348>
 80054b4:	2304      	movs	r3, #4
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e0ec      	b.n	8005694 <UART_SetConfig+0x348>
 80054ba:	2308      	movs	r3, #8
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e0e9      	b.n	8005694 <UART_SetConfig+0x348>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e0e6      	b.n	8005694 <UART_SetConfig+0x348>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a56      	ldr	r2, [pc, #344]	; (8005624 <UART_SetConfig+0x2d8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d120      	bne.n	8005512 <UART_SetConfig+0x1c6>
 80054d0:	4b51      	ldr	r3, [pc, #324]	; (8005618 <UART_SetConfig+0x2cc>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054da:	2bc0      	cmp	r3, #192	; 0xc0
 80054dc:	d013      	beq.n	8005506 <UART_SetConfig+0x1ba>
 80054de:	2bc0      	cmp	r3, #192	; 0xc0
 80054e0:	d814      	bhi.n	800550c <UART_SetConfig+0x1c0>
 80054e2:	2b80      	cmp	r3, #128	; 0x80
 80054e4:	d009      	beq.n	80054fa <UART_SetConfig+0x1ae>
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d810      	bhi.n	800550c <UART_SetConfig+0x1c0>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <UART_SetConfig+0x1a8>
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d006      	beq.n	8005500 <UART_SetConfig+0x1b4>
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x1c0>
 80054f4:	2300      	movs	r3, #0
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e0cc      	b.n	8005694 <UART_SetConfig+0x348>
 80054fa:	2302      	movs	r3, #2
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e0c9      	b.n	8005694 <UART_SetConfig+0x348>
 8005500:	2304      	movs	r3, #4
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e0c6      	b.n	8005694 <UART_SetConfig+0x348>
 8005506:	2308      	movs	r3, #8
 8005508:	77fb      	strb	r3, [r7, #31]
 800550a:	e0c3      	b.n	8005694 <UART_SetConfig+0x348>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e0c0      	b.n	8005694 <UART_SetConfig+0x348>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a44      	ldr	r2, [pc, #272]	; (8005628 <UART_SetConfig+0x2dc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d125      	bne.n	8005568 <UART_SetConfig+0x21c>
 800551c:	4b3e      	ldr	r3, [pc, #248]	; (8005618 <UART_SetConfig+0x2cc>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800552a:	d017      	beq.n	800555c <UART_SetConfig+0x210>
 800552c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005530:	d817      	bhi.n	8005562 <UART_SetConfig+0x216>
 8005532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005536:	d00b      	beq.n	8005550 <UART_SetConfig+0x204>
 8005538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800553c:	d811      	bhi.n	8005562 <UART_SetConfig+0x216>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <UART_SetConfig+0x1fe>
 8005542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005546:	d006      	beq.n	8005556 <UART_SetConfig+0x20a>
 8005548:	e00b      	b.n	8005562 <UART_SetConfig+0x216>
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e0a1      	b.n	8005694 <UART_SetConfig+0x348>
 8005550:	2302      	movs	r3, #2
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e09e      	b.n	8005694 <UART_SetConfig+0x348>
 8005556:	2304      	movs	r3, #4
 8005558:	77fb      	strb	r3, [r7, #31]
 800555a:	e09b      	b.n	8005694 <UART_SetConfig+0x348>
 800555c:	2308      	movs	r3, #8
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e098      	b.n	8005694 <UART_SetConfig+0x348>
 8005562:	2310      	movs	r3, #16
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e095      	b.n	8005694 <UART_SetConfig+0x348>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a2f      	ldr	r2, [pc, #188]	; (800562c <UART_SetConfig+0x2e0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d125      	bne.n	80055be <UART_SetConfig+0x272>
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <UART_SetConfig+0x2cc>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800557c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005580:	d017      	beq.n	80055b2 <UART_SetConfig+0x266>
 8005582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005586:	d817      	bhi.n	80055b8 <UART_SetConfig+0x26c>
 8005588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558c:	d00b      	beq.n	80055a6 <UART_SetConfig+0x25a>
 800558e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005592:	d811      	bhi.n	80055b8 <UART_SetConfig+0x26c>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <UART_SetConfig+0x254>
 8005598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559c:	d006      	beq.n	80055ac <UART_SetConfig+0x260>
 800559e:	e00b      	b.n	80055b8 <UART_SetConfig+0x26c>
 80055a0:	2301      	movs	r3, #1
 80055a2:	77fb      	strb	r3, [r7, #31]
 80055a4:	e076      	b.n	8005694 <UART_SetConfig+0x348>
 80055a6:	2302      	movs	r3, #2
 80055a8:	77fb      	strb	r3, [r7, #31]
 80055aa:	e073      	b.n	8005694 <UART_SetConfig+0x348>
 80055ac:	2304      	movs	r3, #4
 80055ae:	77fb      	strb	r3, [r7, #31]
 80055b0:	e070      	b.n	8005694 <UART_SetConfig+0x348>
 80055b2:	2308      	movs	r3, #8
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e06d      	b.n	8005694 <UART_SetConfig+0x348>
 80055b8:	2310      	movs	r3, #16
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e06a      	b.n	8005694 <UART_SetConfig+0x348>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <UART_SetConfig+0x2e4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d138      	bne.n	800563a <UART_SetConfig+0x2ee>
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d6:	d017      	beq.n	8005608 <UART_SetConfig+0x2bc>
 80055d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055dc:	d82a      	bhi.n	8005634 <UART_SetConfig+0x2e8>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	d00b      	beq.n	80055fc <UART_SetConfig+0x2b0>
 80055e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e8:	d824      	bhi.n	8005634 <UART_SetConfig+0x2e8>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <UART_SetConfig+0x2aa>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d006      	beq.n	8005602 <UART_SetConfig+0x2b6>
 80055f4:	e01e      	b.n	8005634 <UART_SetConfig+0x2e8>
 80055f6:	2300      	movs	r3, #0
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e04b      	b.n	8005694 <UART_SetConfig+0x348>
 80055fc:	2302      	movs	r3, #2
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e048      	b.n	8005694 <UART_SetConfig+0x348>
 8005602:	2304      	movs	r3, #4
 8005604:	77fb      	strb	r3, [r7, #31]
 8005606:	e045      	b.n	8005694 <UART_SetConfig+0x348>
 8005608:	2308      	movs	r3, #8
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e042      	b.n	8005694 <UART_SetConfig+0x348>
 800560e:	bf00      	nop
 8005610:	efff69f3 	.word	0xefff69f3
 8005614:	40011000 	.word	0x40011000
 8005618:	40023800 	.word	0x40023800
 800561c:	40004400 	.word	0x40004400
 8005620:	40004800 	.word	0x40004800
 8005624:	40004c00 	.word	0x40004c00
 8005628:	40005000 	.word	0x40005000
 800562c:	40011400 	.word	0x40011400
 8005630:	40007800 	.word	0x40007800
 8005634:	2310      	movs	r3, #16
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e02c      	b.n	8005694 <UART_SetConfig+0x348>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a72      	ldr	r2, [pc, #456]	; (8005808 <UART_SetConfig+0x4bc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d125      	bne.n	8005690 <UART_SetConfig+0x344>
 8005644:	4b71      	ldr	r3, [pc, #452]	; (800580c <UART_SetConfig+0x4c0>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800564e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005652:	d017      	beq.n	8005684 <UART_SetConfig+0x338>
 8005654:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005658:	d817      	bhi.n	800568a <UART_SetConfig+0x33e>
 800565a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565e:	d00b      	beq.n	8005678 <UART_SetConfig+0x32c>
 8005660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005664:	d811      	bhi.n	800568a <UART_SetConfig+0x33e>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <UART_SetConfig+0x326>
 800566a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566e:	d006      	beq.n	800567e <UART_SetConfig+0x332>
 8005670:	e00b      	b.n	800568a <UART_SetConfig+0x33e>
 8005672:	2300      	movs	r3, #0
 8005674:	77fb      	strb	r3, [r7, #31]
 8005676:	e00d      	b.n	8005694 <UART_SetConfig+0x348>
 8005678:	2302      	movs	r3, #2
 800567a:	77fb      	strb	r3, [r7, #31]
 800567c:	e00a      	b.n	8005694 <UART_SetConfig+0x348>
 800567e:	2304      	movs	r3, #4
 8005680:	77fb      	strb	r3, [r7, #31]
 8005682:	e007      	b.n	8005694 <UART_SetConfig+0x348>
 8005684:	2308      	movs	r3, #8
 8005686:	77fb      	strb	r3, [r7, #31]
 8005688:	e004      	b.n	8005694 <UART_SetConfig+0x348>
 800568a:	2310      	movs	r3, #16
 800568c:	77fb      	strb	r3, [r7, #31]
 800568e:	e001      	b.n	8005694 <UART_SetConfig+0x348>
 8005690:	2310      	movs	r3, #16
 8005692:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569c:	d15b      	bne.n	8005756 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d828      	bhi.n	80056f6 <UART_SetConfig+0x3aa>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x360>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056f7 	.word	0x080056f7
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080056f7 	.word	0x080056f7
 80056c4:	080056f7 	.word	0x080056f7
 80056c8:	080056f7 	.word	0x080056f7
 80056cc:	080056ef 	.word	0x080056ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fe fec4 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 80056d4:	61b8      	str	r0, [r7, #24]
        break;
 80056d6:	e013      	b.n	8005700 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe fed4 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 80056dc:	61b8      	str	r0, [r7, #24]
        break;
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <UART_SetConfig+0x4c4>)
 80056e2:	61bb      	str	r3, [r7, #24]
        break;
 80056e4:	e00c      	b.n	8005700 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fe fda7 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80056ea:	61b8      	str	r0, [r7, #24]
        break;
 80056ec:	e008      	b.n	8005700 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	61bb      	str	r3, [r7, #24]
        break;
 80056f4:	e004      	b.n	8005700 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	77bb      	strb	r3, [r7, #30]
        break;
 80056fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d074      	beq.n	80057f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	005a      	lsls	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	441a      	add	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d916      	bls.n	8005750 <UART_SetConfig+0x404>
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005728:	d212      	bcs.n	8005750 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	b29b      	uxth	r3, r3
 800572e:	f023 030f 	bic.w	r3, r3, #15
 8005732:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	b29b      	uxth	r3, r3
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	b29a      	uxth	r2, r3
 8005740:	89fb      	ldrh	r3, [r7, #14]
 8005742:	4313      	orrs	r3, r2
 8005744:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	89fa      	ldrh	r2, [r7, #14]
 800574c:	60da      	str	r2, [r3, #12]
 800574e:	e04f      	b.n	80057f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	77bb      	strb	r3, [r7, #30]
 8005754:	e04c      	b.n	80057f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005756:	7ffb      	ldrb	r3, [r7, #31]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d828      	bhi.n	80057ae <UART_SetConfig+0x462>
 800575c:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <UART_SetConfig+0x418>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005789 	.word	0x08005789
 8005768:	08005791 	.word	0x08005791
 800576c:	08005799 	.word	0x08005799
 8005770:	080057af 	.word	0x080057af
 8005774:	0800579f 	.word	0x0800579f
 8005778:	080057af 	.word	0x080057af
 800577c:	080057af 	.word	0x080057af
 8005780:	080057af 	.word	0x080057af
 8005784:	080057a7 	.word	0x080057a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005788:	f7fe fe68 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 800578c:	61b8      	str	r0, [r7, #24]
        break;
 800578e:	e013      	b.n	80057b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005790:	f7fe fe78 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8005794:	61b8      	str	r0, [r7, #24]
        break;
 8005796:	e00f      	b.n	80057b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005798:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <UART_SetConfig+0x4c4>)
 800579a:	61bb      	str	r3, [r7, #24]
        break;
 800579c:	e00c      	b.n	80057b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800579e:	f7fe fd4b 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80057a2:	61b8      	str	r0, [r7, #24]
        break;
 80057a4:	e008      	b.n	80057b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057aa:	61bb      	str	r3, [r7, #24]
        break;
 80057ac:	e004      	b.n	80057b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	77bb      	strb	r3, [r7, #30]
        break;
 80057b6:	bf00      	nop
    }

    if (pclk != 0U)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085a      	lsrs	r2, r3, #1
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	441a      	add	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b0f      	cmp	r3, #15
 80057d6:	d909      	bls.n	80057ec <UART_SetConfig+0x4a0>
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057de:	d205      	bcs.n	80057ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e001      	b.n	80057f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40007c00 	.word	0x40007c00
 800580c:	40023800 	.word	0x40023800
 8005810:	00f42400 	.word	0x00f42400

08005814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005912:	d10a      	bne.n	800592a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005968:	f7fb fe2c 	bl	80015c4 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d10e      	bne.n	800599a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f81b 	bl	80059c6 <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e011      	b.n	80059be <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b09c      	sub	sp, #112	; 0x70
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	60f8      	str	r0, [r7, #12]
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d6:	e0a7      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	f000 80a3 	beq.w	8005b28 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7fb fdef 	bl	80015c4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80059f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d13f      	bne.n	8005a78 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3308      	adds	r3, #8
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a34:	e853 3f00 	ldrex	r3, [r3]
 8005a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	663b      	str	r3, [r7, #96]	; 0x60
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3308      	adds	r3, #8
 8005a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a52:	e841 2300 	strex	r3, r2, [r1]
 8005a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1e5      	bne.n	8005a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e068      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d050      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a94:	d148      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa8:	e853 3f00 	ldrex	r3, [r3]
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abe:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e6      	bne.n	8005aa0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3308      	adds	r3, #8
 8005af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005af2:	623a      	str	r2, [r7, #32]
 8005af4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af6:	69f9      	ldr	r1, [r7, #28]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	e841 2300 	strex	r3, r2, [r1]
 8005afe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1e5      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e010      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f43f af48 	beq.w	80059d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3770      	adds	r7, #112	; 0x70
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b54:	b084      	sub	sp, #16
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	f107 001c 	add.w	r0, r7, #28
 8005b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d120      	bne.n	8005bae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <USB_CoreInit+0xac>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa96 	bl	80060d4 <USB_CoreReset>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
 8005bac:	e010      	b.n	8005bd0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa8a 	bl	80060d4 <USB_CoreReset>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d10b      	bne.n	8005bee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f043 0206 	orr.w	r2, r3, #6
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bfa:	b004      	add	sp, #16
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	ffbdffbf 	.word	0xffbdffbf

08005c04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f023 0201 	bic.w	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d115      	bne.n	8005c74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f7fb fcc1 	bl	80015dc <HAL_Delay>
      ms++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa29 	bl	80060b8 <USB_GetMode>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d01e      	beq.n	8005caa <USB_SetCurrentMode+0x84>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b31      	cmp	r3, #49	; 0x31
 8005c70:	d9f0      	bls.n	8005c54 <USB_SetCurrentMode+0x2e>
 8005c72:	e01a      	b.n	8005caa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c74:	78fb      	ldrb	r3, [r7, #3]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d115      	bne.n	8005ca6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c86:	2001      	movs	r0, #1
 8005c88:	f7fb fca8 	bl	80015dc <HAL_Delay>
      ms++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa10 	bl	80060b8 <USB_GetMode>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <USB_SetCurrentMode+0x84>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b31      	cmp	r3, #49	; 0x31
 8005ca2:	d9f0      	bls.n	8005c86 <USB_SetCurrentMode+0x60>
 8005ca4:	e001      	b.n	8005caa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e005      	b.n	8005cb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b32      	cmp	r3, #50	; 0x32
 8005cae:	d101      	bne.n	8005cb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e009      	b.n	8005cf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3340      	adds	r3, #64	; 0x40
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	2200      	movs	r2, #0
 8005cec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b0e      	cmp	r3, #14
 8005cf8:	d9f2      	bls.n	8005ce0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11c      	bne.n	8005d3a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d0e:	f043 0302 	orr.w	r3, r3, #2
 8005d12:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	e005      	b.n	8005d46 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	4619      	mov	r1, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d60:	461a      	mov	r2, r3
 8005d62:	680b      	ldr	r3, [r1, #0]
 8005d64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10c      	bne.n	8005d86 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d72:	2100      	movs	r1, #0
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f965 	bl	8006044 <USB_SetDevSpeed>
 8005d7a:	e008      	b.n	8005d8e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f960 	bl	8006044 <USB_SetDevSpeed>
 8005d84:	e003      	b.n	8005d8e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d86:	2103      	movs	r1, #3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f95b 	bl	8006044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d8e:	2110      	movs	r1, #16
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 f8f3 	bl	8005f7c <USB_FlushTxFifo>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d001      	beq.n	8005da0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f91f 	bl	8005fe4 <USB_FlushRxFifo>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dce:	461a      	mov	r2, r3
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	e043      	b.n	8005e62 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df0:	d118      	bne.n	8005e24 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	461a      	mov	r2, r3
 8005e06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e013      	b.n	8005e36 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e008      	b.n	8005e36 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3b7      	bcc.n	8005dda <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e043      	b.n	8005ef8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e86:	d118      	bne.n	8005eba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e013      	b.n	8005ecc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	e008      	b.n	8005ecc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	015a      	lsls	r2, r3, #5
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed8:	461a      	mov	r2, r3
 8005eda:	2300      	movs	r3, #0
 8005edc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3b7      	bcc.n	8005e70 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d105      	bne.n	8005f34 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f043 0210 	orr.w	r2, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <USB_DevInit+0x2b4>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f043 0208 	orr.w	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d105      	bne.n	8005f64 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <USB_DevInit+0x2b8>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr
 8005f74:	803c3800 	.word	0x803c3800
 8005f78:	40000004 	.word	0x40000004

08005f7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <USB_FlushTxFifo+0x64>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01b      	b.n	8005fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	daf2      	bge.n	8005f8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	019b      	lsls	r3, r3, #6
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <USB_FlushTxFifo+0x64>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e006      	b.n	8005fd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d0f0      	beq.n	8005fb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	00030d40 	.word	0x00030d40

08005fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a11      	ldr	r2, [pc, #68]	; (8006040 <USB_FlushRxFifo+0x5c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d901      	bls.n	8006002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e018      	b.n	8006034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	daf2      	bge.n	8005ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2210      	movs	r2, #16
 8006012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3301      	adds	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <USB_FlushRxFifo+0x5c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d901      	bls.n	8006026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e006      	b.n	8006034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0310 	and.w	r3, r3, #16
 800602e:	2b10      	cmp	r3, #16
 8006030:	d0f0      	beq.n	8006014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	00030d40 	.word	0x00030d40

08006044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006064:	4313      	orrs	r3, r2
 8006066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006090:	f023 0303 	bic.w	r3, r3, #3
 8006094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a4:	f043 0302 	orr.w	r3, r3, #2
 80060a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0301 	and.w	r3, r3, #1
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3301      	adds	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <USB_CoreReset+0x64>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e01b      	b.n	800612a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	daf2      	bge.n	80060e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f043 0201 	orr.w	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a09      	ldr	r2, [pc, #36]	; (8006138 <USB_CoreReset+0x64>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e006      	b.n	800612a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d0f0      	beq.n	800610a <USB_CoreReset+0x36>

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	00030d40 	.word	0x00030d40

0800613c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800613c:	b5b0      	push	{r4, r5, r7, lr}
 800613e:	b08c      	sub	sp, #48	; 0x30
 8006140:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006142:	2100      	movs	r1, #0
 8006144:	2000      	movs	r0, #0
 8006146:	f003 fdc9 	bl	8009cdc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800614a:	4b20      	ldr	r3, [pc, #128]	; (80061cc <MX_LWIP_Init+0x90>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006150:	4b1f      	ldr	r3, [pc, #124]	; (80061d0 <MX_LWIP_Init+0x94>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006156:	4b1f      	ldr	r3, [pc, #124]	; (80061d4 <MX_LWIP_Init+0x98>)
 8006158:	2200      	movs	r2, #0
 800615a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800615c:	4b1e      	ldr	r3, [pc, #120]	; (80061d8 <MX_LWIP_Init+0x9c>)
 800615e:	9302      	str	r3, [sp, #8]
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <MX_LWIP_Init+0xa0>)
 8006162:	9301      	str	r3, [sp, #4]
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <MX_LWIP_Init+0x98>)
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <MX_LWIP_Init+0x94>)
 800616c:	4917      	ldr	r1, [pc, #92]	; (80061cc <MX_LWIP_Init+0x90>)
 800616e:	481c      	ldr	r0, [pc, #112]	; (80061e0 <MX_LWIP_Init+0xa4>)
 8006170:	f006 f8d2 	bl	800c318 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006174:	481a      	ldr	r0, [pc, #104]	; (80061e0 <MX_LWIP_Init+0xa4>)
 8006176:	f006 fa89 	bl	800c68c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800617a:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <MX_LWIP_Init+0xa4>)
 800617c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006180:	089b      	lsrs	r3, r3, #2
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800618c:	4814      	ldr	r0, [pc, #80]	; (80061e0 <MX_LWIP_Init+0xa4>)
 800618e:	f006 fa8d 	bl	800c6ac <netif_set_up>
 8006192:	e002      	b.n	800619a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006194:	4812      	ldr	r0, [pc, #72]	; (80061e0 <MX_LWIP_Init+0xa4>)
 8006196:	f006 faf5 	bl	800c784 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800619a:	4912      	ldr	r1, [pc, #72]	; (80061e4 <MX_LWIP_Init+0xa8>)
 800619c:	4810      	ldr	r0, [pc, #64]	; (80061e0 <MX_LWIP_Init+0xa4>)
 800619e:	f006 fb8b 	bl	800c8b8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <MX_LWIP_Init+0xac>)
 80061a4:	1d3c      	adds	r4, r7, #4
 80061a6:	461d      	mov	r5, r3
 80061a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80061b4:	1d3b      	adds	r3, r7, #4
 80061b6:	490a      	ldr	r1, [pc, #40]	; (80061e0 <MX_LWIP_Init+0xa4>)
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fd43 	bl	8006c44 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80061be:	4808      	ldr	r0, [pc, #32]	; (80061e0 <MX_LWIP_Init+0xa4>)
 80061c0:	f00e fc84 	bl	8014acc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80061c4:	bf00      	nop
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bdb0      	pop	{r4, r5, r7, pc}
 80061cc:	20000cb4 	.word	0x20000cb4
 80061d0:	20000cb8 	.word	0x20000cb8
 80061d4:	20000cbc 	.word	0x20000cbc
 80061d8:	08009c19 	.word	0x08009c19
 80061dc:	080066e5 	.word	0x080066e5
 80061e0:	20000c7c 	.word	0x20000c7c
 80061e4:	080061ed 	.word	0x080061ed
 80061e8:	08019b6c 	.word	0x08019b6c

080061ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006212:	2320      	movs	r3, #32
 8006214:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006216:	f3bf 8f4f 	dsb	sy
}
 800621a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800621c:	e00b      	b.n	8006236 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800621e:	4a0d      	ldr	r2, [pc, #52]	; (8006254 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4413      	add	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	dcf0      	bgt.n	800621e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800623c:	f3bf 8f4f 	dsb	sy
}
 8006240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006242:	f3bf 8f6f 	isb	sy
}
 8006246:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	e000ed00 	.word	0xe000ed00

08006258 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006260:	4b04      	ldr	r3, [pc, #16]	; (8006274 <HAL_ETH_RxCpltCallback+0x1c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fe37 	bl	8006ed8 <osSemaphoreRelease>
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	2000564c 	.word	0x2000564c

08006278 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006280:	4b04      	ldr	r3, [pc, #16]	; (8006294 <HAL_ETH_TxCpltCallback+0x1c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fe27 	bl	8006ed8 <osSemaphoreRelease>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20005650 	.word	0x20005650

08006298 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7fc fcd9 	bl	8002c58 <HAL_ETH_GetDMAError>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ac:	2b80      	cmp	r3, #128	; 0x80
 80062ae:	d104      	bne.n	80062ba <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <HAL_ETH_ErrorCallback+0x2c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fe0f 	bl	8006ed8 <osSemaphoreRelease>
  }
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	2000564c 	.word	0x2000564c

080062c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80062c8:	b5b0      	push	{r4, r5, r7, lr}
 80062ca:	b0a8      	sub	sp, #160	; 0xa0
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80062e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062e6:	2264      	movs	r2, #100	; 0x64
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f012 fd41 	bl	8018d72 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80062f0:	4b85      	ldr	r3, [pc, #532]	; (8006508 <low_level_init+0x240>)
 80062f2:	4a86      	ldr	r2, [pc, #536]	; (800650c <low_level_init+0x244>)
 80062f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8006302:	23e1      	movs	r3, #225	; 0xe1
 8006304:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006308:	2300      	movs	r3, #0
 800630a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x22;
 800630e:	2322      	movs	r3, #34	; 0x22
 8006310:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x23;
 8006314:	2323      	movs	r3, #35	; 0x23
 8006316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800631a:	4a7b      	ldr	r2, [pc, #492]	; (8006508 <low_level_init+0x240>)
 800631c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006320:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006322:	4b79      	ldr	r3, [pc, #484]	; (8006508 <low_level_init+0x240>)
 8006324:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006328:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800632a:	4b77      	ldr	r3, [pc, #476]	; (8006508 <low_level_init+0x240>)
 800632c:	4a78      	ldr	r2, [pc, #480]	; (8006510 <low_level_init+0x248>)
 800632e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006330:	4b75      	ldr	r3, [pc, #468]	; (8006508 <low_level_init+0x240>)
 8006332:	4a78      	ldr	r2, [pc, #480]	; (8006514 <low_level_init+0x24c>)
 8006334:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006336:	4b74      	ldr	r3, [pc, #464]	; (8006508 <low_level_init+0x240>)
 8006338:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800633c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800633e:	4872      	ldr	r0, [pc, #456]	; (8006508 <low_level_init+0x240>)
 8006340:	f7fb fe4c 	bl	8001fdc <HAL_ETH_Init>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800634a:	2238      	movs	r2, #56	; 0x38
 800634c:	2100      	movs	r1, #0
 800634e:	4872      	ldr	r0, [pc, #456]	; (8006518 <low_level_init+0x250>)
 8006350:	f012 fd0f 	bl	8018d72 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006354:	4b70      	ldr	r3, [pc, #448]	; (8006518 <low_level_init+0x250>)
 8006356:	2221      	movs	r2, #33	; 0x21
 8006358:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800635a:	4b6f      	ldr	r3, [pc, #444]	; (8006518 <low_level_init+0x250>)
 800635c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006360:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006362:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <low_level_init+0x250>)
 8006364:	2200      	movs	r2, #0
 8006366:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006368:	486c      	ldr	r0, [pc, #432]	; (800651c <low_level_init+0x254>)
 800636a:	f005 fe8f 	bl	800c08c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2206      	movs	r2, #6
 8006372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006376:	4b64      	ldr	r3, [pc, #400]	; (8006508 <low_level_init+0x240>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	781a      	ldrb	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006382:	4b61      	ldr	r3, [pc, #388]	; (8006508 <low_level_init+0x240>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	785a      	ldrb	r2, [r3, #1]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800638e:	4b5e      	ldr	r3, [pc, #376]	; (8006508 <low_level_init+0x240>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	789a      	ldrb	r2, [r3, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800639a:	4b5b      	ldr	r3, [pc, #364]	; (8006508 <low_level_init+0x240>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	78da      	ldrb	r2, [r3, #3]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80063a6:	4b58      	ldr	r3, [pc, #352]	; (8006508 <low_level_init+0x240>)
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	791a      	ldrb	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80063b2:	4b55      	ldr	r3, [pc, #340]	; (8006508 <low_level_init+0x240>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	795a      	ldrb	r2, [r3, #5]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80063c4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80063cc:	f043 030a 	orr.w	r3, r3, #10
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80063d8:	2203      	movs	r2, #3
 80063da:	2100      	movs	r1, #0
 80063dc:	2001      	movs	r0, #1
 80063de:	f001 f82d 	bl	800743c <xQueueGenericCreate>
 80063e2:	4603      	mov	r3, r0
 80063e4:	4a4e      	ldr	r2, [pc, #312]	; (8006520 <low_level_init+0x258>)
 80063e6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 80063e8:	2203      	movs	r2, #3
 80063ea:	2100      	movs	r1, #0
 80063ec:	2001      	movs	r0, #1
 80063ee:	f001 f825 	bl	800743c <xQueueGenericCreate>
 80063f2:	4603      	mov	r3, r0
 80063f4:	4a4b      	ldr	r2, [pc, #300]	; (8006524 <low_level_init+0x25c>)
 80063f6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80063f8:	4b4b      	ldr	r3, [pc, #300]	; (8006528 <low_level_init+0x260>)
 80063fa:	f107 0408 	add.w	r4, r7, #8
 80063fe:	461d      	mov	r5, r3
 8006400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006404:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006408:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800640c:	f107 0308 	add.w	r3, r7, #8
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fc16 	bl	8006c44 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006418:	4944      	ldr	r1, [pc, #272]	; (800652c <low_level_init+0x264>)
 800641a:	4845      	ldr	r0, [pc, #276]	; (8006530 <low_level_init+0x268>)
 800641c:	f7fa ff4f 	bl	80012be <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006420:	4843      	ldr	r0, [pc, #268]	; (8006530 <low_level_init+0x268>)
 8006422:	f7fa ff7e 	bl	8001322 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006426:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800642a:	2b00      	cmp	r3, #0
 800642c:	d165      	bne.n	80064fa <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800642e:	4840      	ldr	r0, [pc, #256]	; (8006530 <low_level_init+0x268>)
 8006430:	f7fb f81f 	bl	8001472 <LAN8742_GetLinkState>
 8006434:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800643c:	2b01      	cmp	r3, #1
 800643e:	dc06      	bgt.n	800644e <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f006 fa09 	bl	800c858 <netif_set_link_down>
      netif_set_down(netif);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f006 f99c 	bl	800c784 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800644c:	e057      	b.n	80064fe <low_level_init+0x236>
      switch (PHYLinkState)
 800644e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006452:	3b02      	subs	r3, #2
 8006454:	2b03      	cmp	r3, #3
 8006456:	d82b      	bhi.n	80064b0 <low_level_init+0x1e8>
 8006458:	a201      	add	r2, pc, #4	; (adr r2, 8006460 <low_level_init+0x198>)
 800645a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645e:	bf00      	nop
 8006460:	08006471 	.word	0x08006471
 8006464:	08006483 	.word	0x08006483
 8006468:	08006493 	.word	0x08006493
 800646c:	080064a3 	.word	0x080064a3
        duplex = ETH_FULLDUPLEX_MODE;
 8006470:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006478:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800647c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006480:	e01f      	b.n	80064c2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006482:	2300      	movs	r3, #0
 8006484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800648c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006490:	e017      	b.n	80064c2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006492:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064a0:	e00f      	b.n	80064c2 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064ae:	e008      	b.n	80064c2 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80064b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80064b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80064c0:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80064c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064c6:	4619      	mov	r1, r3
 80064c8:	480f      	ldr	r0, [pc, #60]	; (8006508 <low_level_init+0x240>)
 80064ca:	f7fc fa6b 	bl	80029a4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80064ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80064d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d8:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80064da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064de:	4619      	mov	r1, r3
 80064e0:	4809      	ldr	r0, [pc, #36]	; (8006508 <low_level_init+0x240>)
 80064e2:	f7fc fb49 	bl	8002b78 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80064e6:	4808      	ldr	r0, [pc, #32]	; (8006508 <low_level_init+0x240>)
 80064e8:	f7fb fdf4 	bl	80020d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f006 f8dd 	bl	800c6ac <netif_set_up>
    netif_set_link_up(netif);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f006 f978 	bl	800c7e8 <netif_set_link_up>
}
 80064f8:	e001      	b.n	80064fe <low_level_init+0x236>
    Error_Handler();
 80064fa:	f7fa fc10 	bl	8000d1e <Error_Handler>
}
 80064fe:	bf00      	nop
 8006500:	37a0      	adds	r7, #160	; 0xa0
 8006502:	46bd      	mov	sp, r7
 8006504:	bdb0      	pop	{r4, r5, r7, pc}
 8006506:	bf00      	nop
 8006508:	20005654 	.word	0x20005654
 800650c:	40028000 	.word	0x40028000
 8006510:	20000130 	.word	0x20000130
 8006514:	20000090 	.word	0x20000090
 8006518:	20005704 	.word	0x20005704
 800651c:	0801d1f8 	.word	0x0801d1f8
 8006520:	2000564c 	.word	0x2000564c
 8006524:	20005650 	.word	0x20005650
 8006528:	08019b90 	.word	0x08019b90
 800652c:	2000000c 	.word	0x2000000c
 8006530:	2000573c 	.word	0x2000573c

08006534 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b092      	sub	sp, #72	; 0x48
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800654c:	f107 030c 	add.w	r3, r7, #12
 8006550:	2230      	movs	r2, #48	; 0x30
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f012 fc0c 	bl	8018d72 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	2230      	movs	r2, #48	; 0x30
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f012 fc05 	bl	8018d72 <memset>

  for(q = p; q != NULL; q = q->next)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	643b      	str	r3, [r7, #64]	; 0x40
 800656c:	e045      	b.n	80065fa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800656e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006570:	2b03      	cmp	r3, #3
 8006572:	d902      	bls.n	800657a <low_level_output+0x46>
      return ERR_IF;
 8006574:	f06f 030b 	mvn.w	r3, #11
 8006578:	e065      	b.n	8006646 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800657a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800657c:	6859      	ldr	r1, [r3, #4]
 800657e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006580:	4613      	mov	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	3348      	adds	r3, #72	; 0x48
 800658a:	443b      	add	r3, r7
 800658c:	3b3c      	subs	r3, #60	; 0x3c
 800658e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006592:	895b      	ldrh	r3, [r3, #10]
 8006594:	4619      	mov	r1, r3
 8006596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	3348      	adds	r3, #72	; 0x48
 80065a2:	443b      	add	r3, r7
 80065a4:	3b38      	subs	r3, #56	; 0x38
 80065a6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80065a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80065ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	f107 000c 	add.w	r0, r7, #12
 80065b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065b8:	460b      	mov	r3, r1
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	440b      	add	r3, r1
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	18c1      	adds	r1, r0, r3
 80065c2:	4613      	mov	r3, r2
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	3348      	adds	r3, #72	; 0x48
 80065cc:	443b      	add	r3, r7
 80065ce:	3b34      	subs	r3, #52	; 0x34
 80065d0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80065d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80065da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065dc:	4613      	mov	r3, r2
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3348      	adds	r3, #72	; 0x48
 80065e6:	443b      	add	r3, r7
 80065e8:	3b34      	subs	r3, #52	; 0x34
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    }

    i++;
 80065ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f0:	3301      	adds	r3, #1
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80065f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	643b      	str	r3, [r7, #64]	; 0x40
 80065fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1b6      	bne.n	800656e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	891b      	ldrh	r3, [r3, #8]
 8006604:	461a      	mov	r2, r3
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <low_level_output+0x11c>)
 8006608:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800660a:	4a11      	ldr	r2, [pc, #68]	; (8006650 <low_level_output+0x11c>)
 800660c:	f107 030c 	add.w	r3, r7, #12
 8006610:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006612:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <low_level_output+0x11c>)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f006 fda1 	bl	800d160 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800661e:	490c      	ldr	r1, [pc, #48]	; (8006650 <low_level_output+0x11c>)
 8006620:	480c      	ldr	r0, [pc, #48]	; (8006654 <low_level_output+0x120>)
 8006622:	f7fb fe65 	bl	80022f0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006626:	bf00      	nop
 8006628:	4b0b      	ldr	r3, [pc, #44]	; (8006658 <low_level_output+0x124>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f04f 31ff 	mov.w	r1, #4294967295
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fc03 	bl	8006e3c <osSemaphoreWait>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f5      	bne.n	8006628 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800663c:	4805      	ldr	r0, [pc, #20]	; (8006654 <low_level_output+0x120>)
 800663e:	f7fb ffeb 	bl	8002618 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006642:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006646:	4618      	mov	r0, r3
 8006648:	3748      	adds	r7, #72	; 0x48
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20005704 	.word	0x20005704
 8006654:	20005654 	.word	0x20005654
 8006658:	20005650 	.word	0x20005650

0800665c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <low_level_input+0x2c>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d105      	bne.n	800667c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006670:	f107 030c 	add.w	r3, r7, #12
 8006674:	4619      	mov	r1, r3
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <low_level_input+0x30>)
 8006678:	f7fb fe96 	bl	80023a8 <HAL_ETH_ReadData>
  }

  return p;
 800667c:	68fb      	ldr	r3, [r7, #12]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20005648 	.word	0x20005648
 800668c:	20005654 	.word	0x20005654

08006690 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80066a0:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <ethernetif_input+0x50>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f04f 31ff 	mov.w	r1, #4294967295
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 fbc7 	bl	8006e3c <osSemaphoreWait>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f5      	bne.n	80066a0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	f7ff ffd1 	bl	800665c <low_level_input>
 80066ba:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f006 fc9e 	bl	800d014 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ea      	bne.n	80066b4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80066de:	e7df      	b.n	80066a0 <ethernetif_input+0x10>
 80066e0:	2000564c 	.word	0x2000564c

080066e4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <ethernetif_init+0x1c>
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <ethernetif_init+0x48>)
 80066f4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80066f8:	490d      	ldr	r1, [pc, #52]	; (8006730 <ethernetif_init+0x4c>)
 80066fa:	480e      	ldr	r0, [pc, #56]	; (8006734 <ethernetif_init+0x50>)
 80066fc:	f012 fad4 	bl	8018ca8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2273      	movs	r2, #115	; 0x73
 8006704:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2274      	movs	r2, #116	; 0x74
 800670c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <ethernetif_init+0x54>)
 8006714:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a08      	ldr	r2, [pc, #32]	; (800673c <ethernetif_init+0x58>)
 800671a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fdd3 	bl	80062c8 <low_level_init>

  return ERR_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	08019bac 	.word	0x08019bac
 8006730:	08019bc8 	.word	0x08019bc8
 8006734:	08019bd8 	.word	0x08019bd8
 8006738:	08016999 	.word	0x08016999
 800673c:	08006535 	.word	0x08006535

08006740 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800674c:	68f9      	ldr	r1, [r7, #12]
 800674e:	4809      	ldr	r0, [pc, #36]	; (8006774 <pbuf_free_custom+0x34>)
 8006750:	f005 fd8c 	bl	800c26c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <pbuf_free_custom+0x38>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d107      	bne.n	800676c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800675c:	4b06      	ldr	r3, [pc, #24]	; (8006778 <pbuf_free_custom+0x38>)
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006762:	4b06      	ldr	r3, [pc, #24]	; (800677c <pbuf_free_custom+0x3c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fbb6 	bl	8006ed8 <osSemaphoreRelease>
  }
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	0801d1f8 	.word	0x0801d1f8
 8006778:	20005648 	.word	0x20005648
 800677c:	2000564c 	.word	0x2000564c

08006780 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006784:	f7fa ff1e 	bl	80015c4 <HAL_GetTick>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08e      	sub	sp, #56	; 0x38
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a52      	ldr	r2, [pc, #328]	; (80068f8 <HAL_ETH_MspInit+0x168>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	f040 809e 	bne.w	80068f0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80067b4:	4b51      	ldr	r3, [pc, #324]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	4a50      	ldr	r2, [pc, #320]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067be:	6313      	str	r3, [r2, #48]	; 0x30
 80067c0:	4b4e      	ldr	r3, [pc, #312]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067d6:	6313      	str	r3, [r2, #48]	; 0x30
 80067d8:	4b48      	ldr	r3, [pc, #288]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4b45      	ldr	r3, [pc, #276]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	4a44      	ldr	r2, [pc, #272]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067ee:	6313      	str	r3, [r2, #48]	; 0x30
 80067f0:	4b42      	ldr	r3, [pc, #264]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067fc:	4b3f      	ldr	r3, [pc, #252]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 80067fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006800:	4a3e      	ldr	r2, [pc, #248]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006802:	f043 0304 	orr.w	r3, r3, #4
 8006806:	6313      	str	r3, [r2, #48]	; 0x30
 8006808:	4b3c      	ldr	r3, [pc, #240]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006814:	4b39      	ldr	r3, [pc, #228]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006818:	4a38      	ldr	r2, [pc, #224]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	6313      	str	r3, [r2, #48]	; 0x30
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800682c:	4b33      	ldr	r3, [pc, #204]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	4a32      	ldr	r2, [pc, #200]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006832:	f043 0302 	orr.w	r3, r3, #2
 8006836:	6313      	str	r3, [r2, #48]	; 0x30
 8006838:	4b30      	ldr	r3, [pc, #192]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006844:	4b2d      	ldr	r3, [pc, #180]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006848:	4a2c      	ldr	r2, [pc, #176]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 800684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684e:	6313      	str	r3, [r2, #48]	; 0x30
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <HAL_ETH_MspInit+0x16c>)
 8006852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	60bb      	str	r3, [r7, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800685c:	2332      	movs	r3, #50	; 0x32
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006860:	2302      	movs	r3, #2
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006864:	2300      	movs	r3, #0
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006868:	2303      	movs	r3, #3
 800686a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800686c:	230b      	movs	r3, #11
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006874:	4619      	mov	r1, r3
 8006876:	4822      	ldr	r0, [pc, #136]	; (8006900 <HAL_ETH_MspInit+0x170>)
 8006878:	f7fc fdfe 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800687c:	2386      	movs	r3, #134	; 0x86
 800687e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006880:	2302      	movs	r3, #2
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006884:	2300      	movs	r3, #0
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006888:	2303      	movs	r3, #3
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800688c:	230b      	movs	r3, #11
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006894:	4619      	mov	r1, r3
 8006896:	481b      	ldr	r0, [pc, #108]	; (8006904 <HAL_ETH_MspInit+0x174>)
 8006898:	f7fc fdee 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800689c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a2:	2302      	movs	r3, #2
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068aa:	2303      	movs	r3, #3
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068ae:	230b      	movs	r3, #11
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80068b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b6:	4619      	mov	r1, r3
 80068b8:	4813      	ldr	r0, [pc, #76]	; (8006908 <HAL_ETH_MspInit+0x178>)
 80068ba:	f7fc fddd 	bl	8003478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80068be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068c4:	2302      	movs	r3, #2
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068cc:	2303      	movs	r3, #3
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80068d0:	230b      	movs	r3, #11
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80068d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068d8:	4619      	mov	r1, r3
 80068da:	480c      	ldr	r0, [pc, #48]	; (800690c <HAL_ETH_MspInit+0x17c>)
 80068dc:	f7fc fdcc 	bl	8003478 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80068e0:	2200      	movs	r2, #0
 80068e2:	2105      	movs	r1, #5
 80068e4:	203d      	movs	r0, #61	; 0x3d
 80068e6:	f7fb fb4f 	bl	8001f88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80068ea:	203d      	movs	r0, #61	; 0x3d
 80068ec:	f7fb fb68 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80068f0:	bf00      	nop
 80068f2:	3738      	adds	r7, #56	; 0x38
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40028000 	.word	0x40028000
 80068fc:	40023800 	.word	0x40023800
 8006900:	40020800 	.word	0x40020800
 8006904:	40020000 	.word	0x40020000
 8006908:	40020400 	.word	0x40020400
 800690c:	40021800 	.word	0x40021800

08006910 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006914:	4802      	ldr	r0, [pc, #8]	; (8006920 <ETH_PHY_IO_Init+0x10>)
 8006916:	f7fc f949 	bl	8002bac <HAL_ETH_SetMDIOClockRange>

  return 0;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	bd80      	pop	{r7, pc}
 8006920:	20005654 	.word	0x20005654

08006924 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  return 0;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	4807      	ldr	r0, [pc, #28]	; (8006964 <ETH_PHY_IO_ReadReg+0x30>)
 8006948:	f7fb ff98 	bl	800287c <HAL_ETH_ReadPHYRegister>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e000      	b.n	800695a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20005654 	.word	0x20005654

08006968 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	4807      	ldr	r0, [pc, #28]	; (8006998 <ETH_PHY_IO_WriteReg+0x30>)
 800697c:	f7fb ffc9 	bl	8002912 <HAL_ETH_WritePHYRegister>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	e000      	b.n	800698e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20005654 	.word	0x20005654

0800699c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80069a0:	f7fa fe10 	bl	80015c4 <HAL_GetTick>
 80069a4:	4603      	mov	r3, r0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b0a0      	sub	sp, #128	; 0x80
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80069b4:	f107 0308 	add.w	r3, r7, #8
 80069b8:	2264      	movs	r2, #100	; 0x64
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f012 f9d8 	bl	8018d72 <memset>
  int32_t PHYLinkState = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069ca:	2300      	movs	r3, #0
 80069cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ce:	2300      	movs	r3, #0
 80069d0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80069d6:	483a      	ldr	r0, [pc, #232]	; (8006ac0 <ethernet_link_thread+0x114>)
 80069d8:	f7fa fd4b 	bl	8001472 <LAN8742_GetLinkState>
 80069dc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80069de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069e4:	089b      	lsrs	r3, r3, #2
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <ethernet_link_thread+0x5e>
 80069f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	dc09      	bgt.n	8006a0a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80069f6:	4833      	ldr	r0, [pc, #204]	; (8006ac4 <ethernet_link_thread+0x118>)
 80069f8:	f7fb fbfa 	bl	80021f0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80069fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80069fe:	f005 fec1 	bl	800c784 <netif_set_down>
    netif_set_link_down(netif);
 8006a02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006a04:	f005 ff28 	bl	800c858 <netif_set_link_down>
 8006a08:	e055      	b.n	8006ab6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d14e      	bne.n	8006ab6 <ethernet_link_thread+0x10a>
 8006a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	dd4b      	ble.n	8006ab6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a20:	3b02      	subs	r3, #2
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d82a      	bhi.n	8006a7c <ethernet_link_thread+0xd0>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <ethernet_link_thread+0x80>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a3d 	.word	0x08006a3d
 8006a30:	08006a4f 	.word	0x08006a4f
 8006a34:	08006a5f 	.word	0x08006a5f
 8006a38:	08006a6f 	.word	0x08006a6f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006a3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006a42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a46:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006a4c:	e017      	b.n	8006a7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006a52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a56:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006a5c:	e00f      	b.n	8006a7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a62:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006a64:	2300      	movs	r3, #0
 8006a66:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006a6c:	e007      	b.n	8006a7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006a72:	2300      	movs	r3, #0
 8006a74:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006a76:	2301      	movs	r3, #1
 8006a78:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006a7a:	e000      	b.n	8006a7e <ethernet_link_thread+0xd2>
    default:
      break;
 8006a7c:	bf00      	nop
    }

    if(linkchanged)
 8006a7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d018      	beq.n	8006ab6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006a84:	f107 0308 	add.w	r3, r7, #8
 8006a88:	4619      	mov	r1, r3
 8006a8a:	480e      	ldr	r0, [pc, #56]	; (8006ac4 <ethernet_link_thread+0x118>)
 8006a8c:	f7fb ff8a 	bl	80029a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006a90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a92:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a96:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006a98:	f107 0308 	add.w	r3, r7, #8
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	4809      	ldr	r0, [pc, #36]	; (8006ac4 <ethernet_link_thread+0x118>)
 8006aa0:	f7fc f86a 	bl	8002b78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006aa4:	4807      	ldr	r0, [pc, #28]	; (8006ac4 <ethernet_link_thread+0x118>)
 8006aa6:	f7fb fb15 	bl	80020d4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006aaa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006aac:	f005 fdfe 	bl	800c6ac <netif_set_up>
      netif_set_link_up(netif);
 8006ab0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006ab2:	f005 fe99 	bl	800c7e8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006ab6:	2064      	movs	r0, #100	; 0x64
 8006ab8:	f000 f910 	bl	8006cdc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006abc:	e78b      	b.n	80069d6 <ethernet_link_thread+0x2a>
 8006abe:	bf00      	nop
 8006ac0:	2000573c 	.word	0x2000573c
 8006ac4:	20005654 	.word	0x20005654

08006ac8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006ad0:	4812      	ldr	r0, [pc, #72]	; (8006b1c <HAL_ETH_RxAllocateCallback+0x54>)
 8006ad2:	f005 fb57 	bl	800c184 <memp_malloc_pool>
 8006ad6:	60f8      	str	r0, [r7, #12]
  if (p)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d014      	beq.n	8006b08 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f103 0220 	add.w	r2, r3, #32
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a0d      	ldr	r2, [pc, #52]	; (8006b20 <HAL_ETH_RxAllocateCallback+0x58>)
 8006aec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2241      	movs	r2, #65	; 0x41
 8006afe:	2100      	movs	r1, #0
 8006b00:	2000      	movs	r0, #0
 8006b02:	f006 f8cd 	bl	800cca0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006b06:	e005      	b.n	8006b14 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006b08:	4b06      	ldr	r3, [pc, #24]	; (8006b24 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	0801d1f8 	.word	0x0801d1f8
 8006b20:	08006741 	.word	0x08006741
 8006b24:	20005648 	.word	0x20005648

08006b28 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3b20      	subs	r3, #32
 8006b46:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	887a      	ldrh	r2, [r7, #2]
 8006b58:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d103      	bne.n	8006b6a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e003      	b.n	8006b72 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	e009      	b.n	8006b94 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	891a      	ldrh	r2, [r3, #8]
 8006b84:	887b      	ldrh	r3, [r7, #2]
 8006b86:	4413      	add	r3, r2
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1f2      	bne.n	8006b80 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006b9a:	887b      	ldrh	r3, [r7, #2]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff fb2e 	bl	8006200 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006ba4:	bf00      	nop
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f006 fa2d 	bl	800d014 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	4603      	mov	r3, r0
 8006bca:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006bd4:	2b84      	cmp	r3, #132	; 0x84
 8006bd6:	d005      	beq.n	8006be4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006bd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	3303      	adds	r3, #3
 8006be2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006be4:	68fb      	ldr	r3, [r7, #12]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf8:	f3ef 8305 	mrs	r3, IPSR
 8006bfc:	607b      	str	r3, [r7, #4]
  return(result);
 8006bfe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	bf14      	ite	ne
 8006c04:	2301      	movne	r3, #1
 8006c06:	2300      	moveq	r3, #0
 8006c08:	b2db      	uxtb	r3, r3
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006c1a:	f001 fc73 	bl	8008504 <vTaskStartScheduler>
  
  return osOK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006c28:	f7ff ffe3 	bl	8006bf2 <inHandlerMode>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006c32:	f001 fd87 	bl	8008744 <xTaskGetTickCountFromISR>
 8006c36:	4603      	mov	r3, r0
 8006c38:	e002      	b.n	8006c40 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006c3a:	f001 fd73 	bl	8008724 <xTaskGetTickCount>
 8006c3e:	4603      	mov	r3, r0
  }
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c46:	b089      	sub	sp, #36	; 0x24
 8006c48:	af04      	add	r7, sp, #16
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d020      	beq.n	8006c98 <osThreadCreate+0x54>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01c      	beq.n	8006c98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685c      	ldr	r4, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691e      	ldr	r6, [r3, #16]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff ffa6 	bl	8006bc2 <makeFreeRtosPriority>
 8006c76:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c80:	9202      	str	r2, [sp, #8]
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	9100      	str	r1, [sp, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4632      	mov	r2, r6
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f001 fa67 	bl	8008160 <xTaskCreateStatic>
 8006c92:	4603      	mov	r3, r0
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	e01c      	b.n	8006cd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685c      	ldr	r4, [r3, #4]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ca4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff ff88 	bl	8006bc2 <makeFreeRtosPriority>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	f107 030c 	add.w	r3, r7, #12
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	9200      	str	r2, [sp, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f001 faaf 	bl	8008226 <xTaskCreate>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d001      	beq.n	8006cd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006cdc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <osDelay+0x16>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	e000      	b.n	8006cf4 <osDelay+0x18>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f001 fbcf 	bl	8008498 <vTaskDelay>
  
  return osOK;
 8006cfa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	4619      	mov	r1, r3
 8006d1a:	2001      	movs	r0, #1
 8006d1c:	f000 fc21 	bl	8007562 <xQueueCreateMutexStatic>
 8006d20:	4603      	mov	r3, r0
 8006d22:	e003      	b.n	8006d2c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006d24:	2001      	movs	r0, #1
 8006d26:	f000 fc04 	bl	8007532 <xQueueCreateMutex>
 8006d2a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <osMutexWait+0x18>
    return osErrorParameter;
 8006d48:	2380      	movs	r3, #128	; 0x80
 8006d4a:	e03a      	b.n	8006dc2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	d103      	bne.n	8006d60 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006d58:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	e009      	b.n	8006d74 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <osMutexWait+0x40>
      ticks = 1;
 8006d70:	2301      	movs	r3, #1
 8006d72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006d74:	f7ff ff3d 	bl	8006bf2 <inHandlerMode>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d017      	beq.n	8006dae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	461a      	mov	r2, r3
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 f83c 	bl	8007e04 <xQueueReceiveFromISR>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d001      	beq.n	8006d96 <osMutexWait+0x62>
      return osErrorOS;
 8006d92:	23ff      	movs	r3, #255	; 0xff
 8006d94:	e015      	b.n	8006dc2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d011      	beq.n	8006dc0 <osMutexWait+0x8c>
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <osMutexWait+0x98>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	e008      	b.n	8006dc0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006dae:	68f9      	ldr	r1, [r7, #12]
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 ff13 	bl	8007bdc <xQueueSemaphoreTake>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d001      	beq.n	8006dc0 <osMutexWait+0x8c>
    return osErrorOS;
 8006dbc:	23ff      	movs	r3, #255	; 0xff
 8006dbe:	e000      	b.n	8006dc2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006de0:	f7ff ff07 	bl	8006bf2 <inHandlerMode>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d016      	beq.n	8006e18 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006dea:	f107 0308 	add.w	r3, r7, #8
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fd77 	bl	80078e4 <xQueueGiveFromISR>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d001      	beq.n	8006e00 <osMutexRelease+0x30>
      return osErrorOS;
 8006dfc:	23ff      	movs	r3, #255	; 0xff
 8006dfe:	e017      	b.n	8006e30 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d013      	beq.n	8006e2e <osMutexRelease+0x5e>
 8006e06:	4b0c      	ldr	r3, [pc, #48]	; (8006e38 <osMutexRelease+0x68>)
 8006e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	e00a      	b.n	8006e2e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006e18:	2300      	movs	r3, #0
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fbba 	bl	8007598 <xQueueGenericSend>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d001      	beq.n	8006e2e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006e2a:	23ff      	movs	r3, #255	; 0xff
 8006e2c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	e000ed04 	.word	0xe000ed04

08006e3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	e03a      	b.n	8006eca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d103      	bne.n	8006e68 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006e60:	f04f 33ff 	mov.w	r3, #4294967295
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	e009      	b.n	8006e7c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d006      	beq.n	8006e7c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <osSemaphoreWait+0x40>
      ticks = 1;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006e7c:	f7ff feb9 	bl	8006bf2 <inHandlerMode>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d017      	beq.n	8006eb6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006e86:	f107 0308 	add.w	r3, r7, #8
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 ffb8 	bl	8007e04 <xQueueReceiveFromISR>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d001      	beq.n	8006e9e <osSemaphoreWait+0x62>
      return osErrorOS;
 8006e9a:	23ff      	movs	r3, #255	; 0xff
 8006e9c:	e015      	b.n	8006eca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d011      	beq.n	8006ec8 <osSemaphoreWait+0x8c>
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <osSemaphoreWait+0x98>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	e008      	b.n	8006ec8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006eb6:	68f9      	ldr	r1, [r7, #12]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fe8f 	bl	8007bdc <xQueueSemaphoreTake>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d001      	beq.n	8006ec8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006ec4:	23ff      	movs	r3, #255	; 0xff
 8006ec6:	e000      	b.n	8006eca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006ee8:	f7ff fe83 	bl	8006bf2 <inHandlerMode>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006ef2:	f107 0308 	add.w	r3, r7, #8
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fcf3 	bl	80078e4 <xQueueGiveFromISR>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d001      	beq.n	8006f08 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006f04:	23ff      	movs	r3, #255	; 0xff
 8006f06:	e017      	b.n	8006f38 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d013      	beq.n	8006f36 <osSemaphoreRelease+0x5e>
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <osSemaphoreRelease+0x68>)
 8006f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	e00a      	b.n	8006f36 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006f20:	2300      	movs	r3, #0
 8006f22:	2200      	movs	r2, #0
 8006f24:	2100      	movs	r1, #0
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fb36 	bl	8007598 <xQueueGenericSend>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d001      	beq.n	8006f36 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006f32:	23ff      	movs	r3, #255	; 0xff
 8006f34:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af02      	add	r7, sp, #8
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d011      	beq.n	8006f7a <osMessageCreate+0x36>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00d      	beq.n	8006f7a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6859      	ldr	r1, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2400      	movs	r4, #0
 8006f70:	9400      	str	r4, [sp, #0]
 8006f72:	f000 f9e1 	bl	8007338 <xQueueGenericCreateStatic>
 8006f76:	4603      	mov	r3, r0
 8006f78:	e008      	b.n	8006f8c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	4619      	mov	r1, r3
 8006f86:	f000 fa59 	bl	800743c <xQueueGenericCreate>
 8006f8a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd90      	pop	{r4, r7, pc}

08006f94 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <osMessagePut+0x1e>
    ticks = 1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006fb2:	f7ff fe1e 	bl	8006bf2 <inHandlerMode>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d018      	beq.n	8006fee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006fbc:	f107 0210 	add.w	r2, r7, #16
 8006fc0:	f107 0108 	add.w	r1, r7, #8
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 fbec 	bl	80077a4 <xQueueGenericSendFromISR>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d001      	beq.n	8006fd6 <osMessagePut+0x42>
      return osErrorOS;
 8006fd2:	23ff      	movs	r3, #255	; 0xff
 8006fd4:	e018      	b.n	8007008 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d014      	beq.n	8007006 <osMessagePut+0x72>
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	; (8007010 <osMessagePut+0x7c>)
 8006fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	e00b      	b.n	8007006 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006fee:	f107 0108 	add.w	r1, r7, #8
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 face 	bl	8007598 <xQueueGenericSend>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d001      	beq.n	8007006 <osMessagePut+0x72>
      return osErrorOS;
 8007002:	23ff      	movs	r3, #255	; 0xff
 8007004:	e000      	b.n	8007008 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b08b      	sub	sp, #44	; 0x2c
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800702e:	2380      	movs	r3, #128	; 0x80
 8007030:	617b      	str	r3, [r7, #20]
    return event;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	461c      	mov	r4, r3
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800703e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007042:	e054      	b.n	80070ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007044:	2300      	movs	r3, #0
 8007046:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007052:	d103      	bne.n	800705c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
 800705a:	e009      	b.n	8007070 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d006      	beq.n	8007070 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <osMessageGet+0x5c>
      ticks = 1;
 800706c:	2301      	movs	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007070:	f7ff fdbf 	bl	8006bf2 <inHandlerMode>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01c      	beq.n	80070b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800707a:	f107 0220 	add.w	r2, r7, #32
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	3304      	adds	r3, #4
 8007084:	4619      	mov	r1, r3
 8007086:	68b8      	ldr	r0, [r7, #8]
 8007088:	f000 febc 	bl	8007e04 <xQueueReceiveFromISR>
 800708c:	4603      	mov	r3, r0
 800708e:	2b01      	cmp	r3, #1
 8007090:	d102      	bne.n	8007098 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007092:	2310      	movs	r3, #16
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	e001      	b.n	800709c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01d      	beq.n	80070de <osMessageGet+0xca>
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <osMessageGet+0xe4>)
 80070a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	e014      	b.n	80070de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	3304      	adds	r3, #4
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	4619      	mov	r1, r3
 80070be:	68b8      	ldr	r0, [r7, #8]
 80070c0:	f000 fca6 	bl	8007a10 <xQueueReceive>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d102      	bne.n	80070d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80070ca:	2310      	movs	r3, #16
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e006      	b.n	80070de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <osMessageGet+0xc6>
 80070d6:	2300      	movs	r3, #0
 80070d8:	e000      	b.n	80070dc <osMessageGet+0xc8>
 80070da:	2340      	movs	r3, #64	; 0x40
 80070dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	461c      	mov	r4, r3
 80070e2:	f107 0314 	add.w	r3, r7, #20
 80070e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	372c      	adds	r7, #44	; 0x2c
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd90      	pop	{r4, r7, pc}
 80070f6:	bf00      	nop
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f103 0208 	add.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f04f 32ff 	mov.w	r2, #4294967295
 8007114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f103 0208 	add.w	r2, r3, #8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f103 0208 	add.w	r2, r3, #8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800714a:	bf00      	nop
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d103      	bne.n	80071be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e00c      	b.n	80071d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3308      	adds	r3, #8
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e002      	b.n	80071cc <vListInsert+0x2e>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d2f6      	bcs.n	80071c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	bf00      	nop
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6892      	ldr	r2, [r2, #8]
 8007226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6852      	ldr	r2, [r2, #4]
 8007230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	429a      	cmp	r2, r3
 800723a:	d103      	bne.n	8007244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	1e5a      	subs	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10c      	bne.n	8007292 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007292:	f002 f8bb 	bl	800940c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072a2:	fb01 f303 	mul.w	r3, r1, r3
 80072a6:	441a      	add	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	3b01      	subs	r3, #1
 80072c4:	68f9      	ldr	r1, [r7, #12]
 80072c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	441a      	add	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	22ff      	movs	r2, #255	; 0xff
 80072d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22ff      	movs	r2, #255	; 0xff
 80072de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d114      	bne.n	8007312 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d01a      	beq.n	8007326 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3310      	adds	r3, #16
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 fb75 	bl	80089e4 <xTaskRemoveFromEventList>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d012      	beq.n	8007326 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <xQueueGenericReset+0xd0>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	e009      	b.n	8007326 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3310      	adds	r3, #16
 8007316:	4618      	mov	r0, r3
 8007318:	f7ff fef0 	bl	80070fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	3324      	adds	r3, #36	; 0x24
 8007320:	4618      	mov	r0, r3
 8007322:	f7ff feeb 	bl	80070fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007326:	f002 f8a5 	bl	8009474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800732a:	2301      	movs	r3, #1
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08e      	sub	sp, #56	; 0x38
 800733c:	af02      	add	r7, sp, #8
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007362:	bf00      	nop
 8007364:	e7fe      	b.n	8007364 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	b672      	cpsid	i
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	b662      	cpsie	i
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007382:	bf00      	nop
 8007384:	e7fe      	b.n	8007384 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <xQueueGenericCreateStatic+0x5a>
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <xQueueGenericCreateStatic+0x5e>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <xQueueGenericCreateStatic+0x60>
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10c      	bne.n	80073b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800739c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a0:	b672      	cpsid	i
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	b662      	cpsie	i
 80073b0:	623b      	str	r3, [r7, #32]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <xQueueGenericCreateStatic+0x8a>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d101      	bne.n	80073c6 <xQueueGenericCreateStatic+0x8e>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <xQueueGenericCreateStatic+0x90>
 80073c6:	2300      	movs	r3, #0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80073cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d0:	b672      	cpsid	i
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	b662      	cpsie	i
 80073e0:	61fb      	str	r3, [r7, #28]
}
 80073e2:	bf00      	nop
 80073e4:	e7fe      	b.n	80073e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073e6:	2348      	movs	r3, #72	; 0x48
 80073e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b48      	cmp	r3, #72	; 0x48
 80073ee:	d00c      	beq.n	800740a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	b672      	cpsid	i
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	b662      	cpsie	i
 8007404:	61bb      	str	r3, [r7, #24]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800740a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00d      	beq.n	8007432 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800741e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	9300      	str	r3, [sp, #0]
 8007426:	4613      	mov	r3, r2
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f847 	bl	80074c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007434:	4618      	mov	r0, r3
 8007436:	3730      	adds	r7, #48	; 0x30
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af02      	add	r7, sp, #8
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	4613      	mov	r3, r2
 8007448:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	b672      	cpsid	i
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	b662      	cpsie	i
 8007464:	613b      	str	r3, [r7, #16]
}
 8007466:	bf00      	nop
 8007468:	e7fe      	b.n	8007468 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]
 8007474:	e004      	b.n	8007480 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	fb02 f303 	mul.w	r3, r2, r3
 800747e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3348      	adds	r3, #72	; 0x48
 8007484:	4618      	mov	r0, r3
 8007486:	f002 f8ed 	bl	8009664 <pvPortMalloc>
 800748a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d011      	beq.n	80074b6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	3348      	adds	r3, #72	; 0x48
 800749a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074a4:	79fa      	ldrb	r2, [r7, #7]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	4613      	mov	r3, r2
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f805 	bl	80074c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074b6:	69bb      	ldr	r3, [r7, #24]
	}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3720      	adds	r7, #32
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e002      	b.n	80074e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074ee:	2101      	movs	r1, #1
 80074f0:	69b8      	ldr	r0, [r7, #24]
 80074f2:	f7ff feb7 	bl	8007264 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00e      	beq.n	800752a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800751e:	2300      	movs	r3, #0
 8007520:	2200      	movs	r2, #0
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f837 	bl	8007598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	4603      	mov	r3, r0
 800753a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800753c:	2301      	movs	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	461a      	mov	r2, r3
 8007548:	6939      	ldr	r1, [r7, #16]
 800754a:	6978      	ldr	r0, [r7, #20]
 800754c:	f7ff ff76 	bl	800743c <xQueueGenericCreate>
 8007550:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f7ff ffd3 	bl	80074fe <prvInitialiseMutex>

		return xNewQueue;
 8007558:	68fb      	ldr	r3, [r7, #12]
	}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007562:	b580      	push	{r7, lr}
 8007564:	b088      	sub	sp, #32
 8007566:	af02      	add	r7, sp, #8
 8007568:	4603      	mov	r3, r0
 800756a:	6039      	str	r1, [r7, #0]
 800756c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800756e:	2301      	movs	r3, #1
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	6939      	ldr	r1, [r7, #16]
 8007580:	6978      	ldr	r0, [r7, #20]
 8007582:	f7ff fed9 	bl	8007338 <xQueueGenericCreateStatic>
 8007586:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f7ff ffb8 	bl	80074fe <prvInitialiseMutex>

		return xNewQueue;
 800758e:	68fb      	ldr	r3, [r7, #12]
	}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075a6:	2300      	movs	r3, #0
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10c      	bne.n	80075ce <xQueueGenericSend+0x36>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	b672      	cpsid	i
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	b662      	cpsie	i
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d103      	bne.n	80075dc <xQueueGenericSend+0x44>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d101      	bne.n	80075e0 <xQueueGenericSend+0x48>
 80075dc:	2301      	movs	r3, #1
 80075de:	e000      	b.n	80075e2 <xQueueGenericSend+0x4a>
 80075e0:	2300      	movs	r3, #0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10c      	bne.n	8007600 <xQueueGenericSend+0x68>
	__asm volatile
 80075e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ea:	b672      	cpsid	i
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	b662      	cpsie	i
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d103      	bne.n	800760e <xQueueGenericSend+0x76>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	2b01      	cmp	r3, #1
 800760c:	d101      	bne.n	8007612 <xQueueGenericSend+0x7a>
 800760e:	2301      	movs	r3, #1
 8007610:	e000      	b.n	8007614 <xQueueGenericSend+0x7c>
 8007612:	2300      	movs	r3, #0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10c      	bne.n	8007632 <xQueueGenericSend+0x9a>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761c:	b672      	cpsid	i
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	b662      	cpsie	i
 800762c:	623b      	str	r3, [r7, #32]
}
 800762e:	bf00      	nop
 8007630:	e7fe      	b.n	8007630 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007632:	f001 fb9b 	bl	8008d6c <xTaskGetSchedulerState>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <xQueueGenericSend+0xaa>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <xQueueGenericSend+0xae>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericSend+0xb0>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10c      	bne.n	8007666 <xQueueGenericSend+0xce>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	b672      	cpsid	i
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	b662      	cpsie	i
 8007660:	61fb      	str	r3, [r7, #28]
}
 8007662:	bf00      	nop
 8007664:	e7fe      	b.n	8007664 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007666:	f001 fed1 	bl	800940c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <xQueueGenericSend+0xe4>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b02      	cmp	r3, #2
 800767a:	d129      	bne.n	80076d0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007682:	f000 fc5d 	bl	8007f40 <prvCopyDataToQueue>
 8007686:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d010      	beq.n	80076b2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	3324      	adds	r3, #36	; 0x24
 8007694:	4618      	mov	r0, r3
 8007696:	f001 f9a5 	bl	80089e4 <xTaskRemoveFromEventList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d013      	beq.n	80076c8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076a0:	4b3f      	ldr	r3, [pc, #252]	; (80077a0 <xQueueGenericSend+0x208>)
 80076a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	e00a      	b.n	80076c8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076b8:	4b39      	ldr	r3, [pc, #228]	; (80077a0 <xQueueGenericSend+0x208>)
 80076ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076c8:	f001 fed4 	bl	8009474 <vPortExitCritical>
				return pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e063      	b.n	8007798 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076d6:	f001 fecd 	bl	8009474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	e05c      	b.n	8007798 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076e4:	f107 0314 	add.w	r3, r7, #20
 80076e8:	4618      	mov	r0, r3
 80076ea:	f001 f9df 	bl	8008aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076f2:	f001 febf 	bl	8009474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076f6:	f000 ff69 	bl	80085cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076fa:	f001 fe87 	bl	800940c <vPortEnterCritical>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007704:	b25b      	sxtb	r3, r3
 8007706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770a:	d103      	bne.n	8007714 <xQueueGenericSend+0x17c>
 800770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800771a:	b25b      	sxtb	r3, r3
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d103      	bne.n	800772a <xQueueGenericSend+0x192>
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800772a:	f001 fea3 	bl	8009474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800772e:	1d3a      	adds	r2, r7, #4
 8007730:	f107 0314 	add.w	r3, r7, #20
 8007734:	4611      	mov	r1, r2
 8007736:	4618      	mov	r0, r3
 8007738:	f001 f9ce 	bl	8008ad8 <xTaskCheckForTimeOut>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d124      	bne.n	800778c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007744:	f000 fcf4 	bl	8008130 <prvIsQueueFull>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d018      	beq.n	8007780 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	3310      	adds	r3, #16
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f91e 	bl	8008998 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800775c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800775e:	f000 fc7f 	bl	8008060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007762:	f000 ff41 	bl	80085e8 <xTaskResumeAll>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	f47f af7c 	bne.w	8007666 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800776e:	4b0c      	ldr	r3, [pc, #48]	; (80077a0 <xQueueGenericSend+0x208>)
 8007770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	e772      	b.n	8007666 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007782:	f000 fc6d 	bl	8008060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007786:	f000 ff2f 	bl	80085e8 <xTaskResumeAll>
 800778a:	e76c      	b.n	8007666 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800778c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800778e:	f000 fc67 	bl	8008060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007792:	f000 ff29 	bl	80085e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007796:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007798:	4618      	mov	r0, r3
 800779a:	3738      	adds	r7, #56	; 0x38
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	e000ed04 	.word	0xe000ed04

080077a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08e      	sub	sp, #56	; 0x38
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
 80077b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	b672      	cpsid	i
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	b662      	cpsie	i
 80077d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077d2:	bf00      	nop
 80077d4:	e7fe      	b.n	80077d4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <xQueueGenericSendFromISR+0x40>
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <xQueueGenericSendFromISR+0x44>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e000      	b.n	80077ea <xQueueGenericSendFromISR+0x46>
 80077e8:	2300      	movs	r3, #0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10c      	bne.n	8007808 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	b672      	cpsid	i
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	b662      	cpsie	i
 8007802:	623b      	str	r3, [r7, #32]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d103      	bne.n	8007816 <xQueueGenericSendFromISR+0x72>
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	2b01      	cmp	r3, #1
 8007814:	d101      	bne.n	800781a <xQueueGenericSendFromISR+0x76>
 8007816:	2301      	movs	r3, #1
 8007818:	e000      	b.n	800781c <xQueueGenericSendFromISR+0x78>
 800781a:	2300      	movs	r3, #0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	b672      	cpsid	i
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	b662      	cpsie	i
 8007834:	61fb      	str	r3, [r7, #28]
}
 8007836:	bf00      	nop
 8007838:	e7fe      	b.n	8007838 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800783a:	f001 fecf 	bl	80095dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800783e:	f3ef 8211 	mrs	r2, BASEPRI
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	b672      	cpsid	i
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	b662      	cpsie	i
 8007856:	61ba      	str	r2, [r7, #24]
 8007858:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800785a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800785c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <xQueueGenericSendFromISR+0xcc>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d12c      	bne.n	80078ca <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007880:	f000 fb5e 	bl	8007f40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007884:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788c:	d112      	bne.n	80078b4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d016      	beq.n	80078c4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	3324      	adds	r3, #36	; 0x24
 800789a:	4618      	mov	r0, r3
 800789c:	f001 f8a2 	bl	80089e4 <xTaskRemoveFromEventList>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00e      	beq.n	80078c4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	e007      	b.n	80078c4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	b25a      	sxtb	r2, r3
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078c4:	2301      	movs	r3, #1
 80078c6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80078c8:	e001      	b.n	80078ce <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3738      	adds	r7, #56	; 0x38
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08e      	sub	sp, #56	; 0x38
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10c      	bne.n	8007912 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	b672      	cpsid	i
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	b662      	cpsie	i
 800790c:	623b      	str	r3, [r7, #32]
}
 800790e:	bf00      	nop
 8007910:	e7fe      	b.n	8007910 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00c      	beq.n	8007934 <xQueueGiveFromISR+0x50>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	b672      	cpsid	i
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	b662      	cpsie	i
 800792e:	61fb      	str	r3, [r7, #28]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d103      	bne.n	8007944 <xQueueGiveFromISR+0x60>
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <xQueueGiveFromISR+0x64>
 8007944:	2301      	movs	r3, #1
 8007946:	e000      	b.n	800794a <xQueueGiveFromISR+0x66>
 8007948:	2300      	movs	r3, #0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10c      	bne.n	8007968 <xQueueGiveFromISR+0x84>
	__asm volatile
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	b672      	cpsid	i
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	b662      	cpsie	i
 8007962:	61bb      	str	r3, [r7, #24]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007968:	f001 fe38 	bl	80095dc <vPortValidateInterruptPriority>
	__asm volatile
 800796c:	f3ef 8211 	mrs	r2, BASEPRI
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	b672      	cpsid	i
 8007976:	f383 8811 	msr	BASEPRI, r3
 800797a:	f3bf 8f6f 	isb	sy
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	b662      	cpsie	i
 8007984:	617a      	str	r2, [r7, #20]
 8007986:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007988:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007998:	429a      	cmp	r2, r3
 800799a:	d22b      	bcs.n	80079f4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b6:	d112      	bne.n	80079de <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d016      	beq.n	80079ee <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	3324      	adds	r3, #36	; 0x24
 80079c4:	4618      	mov	r0, r3
 80079c6:	f001 f80d 	bl	80089e4 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00e      	beq.n	80079ee <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00b      	beq.n	80079ee <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e007      	b.n	80079ee <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e2:	3301      	adds	r3, #1
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	b25a      	sxtb	r2, r3
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079ee:	2301      	movs	r3, #1
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
 80079f2:	e001      	b.n	80079f8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f383 8811 	msr	BASEPRI, r3
}
 8007a02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3738      	adds	r7, #56	; 0x38
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b08c      	sub	sp, #48	; 0x30
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <xQueueReceive+0x34>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	b672      	cpsid	i
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	b662      	cpsie	i
 8007a3e:	623b      	str	r3, [r7, #32]
}
 8007a40:	bf00      	nop
 8007a42:	e7fe      	b.n	8007a42 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d103      	bne.n	8007a52 <xQueueReceive+0x42>
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <xQueueReceive+0x46>
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <xQueueReceive+0x48>
 8007a56:	2300      	movs	r3, #0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10c      	bne.n	8007a76 <xQueueReceive+0x66>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	b672      	cpsid	i
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	b662      	cpsie	i
 8007a70:	61fb      	str	r3, [r7, #28]
}
 8007a72:	bf00      	nop
 8007a74:	e7fe      	b.n	8007a74 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a76:	f001 f979 	bl	8008d6c <xTaskGetSchedulerState>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d102      	bne.n	8007a86 <xQueueReceive+0x76>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <xQueueReceive+0x7a>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueReceive+0x7c>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <xQueueReceive+0x9a>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a94:	b672      	cpsid	i
 8007a96:	f383 8811 	msr	BASEPRI, r3
 8007a9a:	f3bf 8f6f 	isb	sy
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	b662      	cpsie	i
 8007aa4:	61bb      	str	r3, [r7, #24]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aaa:	f001 fcaf 	bl	800940c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d01f      	beq.n	8007afa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007aba:	68b9      	ldr	r1, [r7, #8]
 8007abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007abe:	f000 faa9 	bl	8008014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	1e5a      	subs	r2, r3, #1
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00f      	beq.n	8007af2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 ff84 	bl	80089e4 <xTaskRemoveFromEventList>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ae2:	4b3d      	ldr	r3, [pc, #244]	; (8007bd8 <xQueueReceive+0x1c8>)
 8007ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007af2:	f001 fcbf 	bl	8009474 <vPortExitCritical>
				return pdPASS;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e069      	b.n	8007bce <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b00:	f001 fcb8 	bl	8009474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b04:	2300      	movs	r3, #0
 8007b06:	e062      	b.n	8007bce <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b0e:	f107 0310 	add.w	r3, r7, #16
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 ffca 	bl	8008aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b1c:	f001 fcaa 	bl	8009474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b20:	f000 fd54 	bl	80085cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b24:	f001 fc72 	bl	800940c <vPortEnterCritical>
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b2e:	b25b      	sxtb	r3, r3
 8007b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b34:	d103      	bne.n	8007b3e <xQueueReceive+0x12e>
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b44:	b25b      	sxtb	r3, r3
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d103      	bne.n	8007b54 <xQueueReceive+0x144>
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b54:	f001 fc8e 	bl	8009474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b58:	1d3a      	adds	r2, r7, #4
 8007b5a:	f107 0310 	add.w	r3, r7, #16
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 ffb9 	bl	8008ad8 <xTaskCheckForTimeOut>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d123      	bne.n	8007bb4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6e:	f000 fac9 	bl	8008104 <prvIsQueueEmpty>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	3324      	adds	r3, #36	; 0x24
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 ff09 	bl	8008998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b88:	f000 fa6a 	bl	8008060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b8c:	f000 fd2c 	bl	80085e8 <xTaskResumeAll>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d189      	bne.n	8007aaa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007b96:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <xQueueReceive+0x1c8>)
 8007b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	e780      	b.n	8007aaa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007baa:	f000 fa59 	bl	8008060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bae:	f000 fd1b 	bl	80085e8 <xTaskResumeAll>
 8007bb2:	e77a      	b.n	8007aaa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bb6:	f000 fa53 	bl	8008060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bba:	f000 fd15 	bl	80085e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bc0:	f000 faa0 	bl	8008104 <prvIsQueueEmpty>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	f43f af6f 	beq.w	8007aaa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3730      	adds	r7, #48	; 0x30
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08e      	sub	sp, #56	; 0x38
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10c      	bne.n	8007c12 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	b672      	cpsid	i
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	b662      	cpsie	i
 8007c0c:	623b      	str	r3, [r7, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	e7fe      	b.n	8007c10 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	b672      	cpsid	i
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	b662      	cpsie	i
 8007c2e:	61fb      	str	r3, [r7, #28]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c34:	f001 f89a 	bl	8008d6c <xTaskGetSchedulerState>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <xQueueSemaphoreTake+0x68>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <xQueueSemaphoreTake+0x6c>
 8007c44:	2301      	movs	r3, #1
 8007c46:	e000      	b.n	8007c4a <xQueueSemaphoreTake+0x6e>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	b672      	cpsid	i
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	b662      	cpsie	i
 8007c62:	61bb      	str	r3, [r7, #24]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c68:	f001 fbd0 	bl	800940c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d024      	beq.n	8007cc2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7a:	1e5a      	subs	r2, r3, #1
 8007c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c88:	f001 fa36 	bl	80090f8 <pvTaskIncrementMutexHeldCount>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 fea0 	bl	80089e4 <xTaskRemoveFromEventList>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d007      	beq.n	8007cba <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007caa:	4b55      	ldr	r3, [pc, #340]	; (8007e00 <xQueueSemaphoreTake+0x224>)
 8007cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb0:	601a      	str	r2, [r3, #0]
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007cba:	f001 fbdb 	bl	8009474 <vPortExitCritical>
				return pdPASS;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e099      	b.n	8007df6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d113      	bne.n	8007cf0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	b672      	cpsid	i
 8007cd4:	f383 8811 	msr	BASEPRI, r3
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	b662      	cpsie	i
 8007ce2:	617b      	str	r3, [r7, #20]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ce8:	f001 fbc4 	bl	8009474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cec:	2300      	movs	r3, #0
 8007cee:	e082      	b.n	8007df6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cf6:	f107 030c 	add.w	r3, r7, #12
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fed6 	bl	8008aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d04:	f001 fbb6 	bl	8009474 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d08:	f000 fc60 	bl	80085cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d0c:	f001 fb7e 	bl	800940c <vPortEnterCritical>
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d16:	b25b      	sxtb	r3, r3
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d103      	bne.n	8007d26 <xQueueSemaphoreTake+0x14a>
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d2c:	b25b      	sxtb	r3, r3
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d103      	bne.n	8007d3c <xQueueSemaphoreTake+0x160>
 8007d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d3c:	f001 fb9a 	bl	8009474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d40:	463a      	mov	r2, r7
 8007d42:	f107 030c 	add.w	r3, r7, #12
 8007d46:	4611      	mov	r1, r2
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fec5 	bl	8008ad8 <xTaskCheckForTimeOut>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d132      	bne.n	8007dba <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d56:	f000 f9d5 	bl	8008104 <prvIsQueueEmpty>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d026      	beq.n	8007dae <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007d68:	f001 fb50 	bl	800940c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f819 	bl	8008da8 <xTaskPriorityInherit>
 8007d76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007d78:	f001 fb7c 	bl	8009474 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	3324      	adds	r3, #36	; 0x24
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	4611      	mov	r1, r2
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fe07 	bl	8008998 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d8c:	f000 f968 	bl	8008060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d90:	f000 fc2a 	bl	80085e8 <xTaskResumeAll>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f47f af66 	bne.w	8007c68 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007d9c:	4b18      	ldr	r3, [pc, #96]	; (8007e00 <xQueueSemaphoreTake+0x224>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	e75c      	b.n	8007c68 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007db0:	f000 f956 	bl	8008060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db4:	f000 fc18 	bl	80085e8 <xTaskResumeAll>
 8007db8:	e756      	b.n	8007c68 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007dba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dbc:	f000 f950 	bl	8008060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dc0:	f000 fc12 	bl	80085e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dc6:	f000 f99d 	bl	8008104 <prvIsQueueEmpty>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f43f af4b 	beq.w	8007c68 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00d      	beq.n	8007df4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007dd8:	f001 fb18 	bl	800940c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dde:	f000 f897 	bl	8007f10 <prvGetDisinheritPriorityAfterTimeout>
 8007de2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 f8e6 	bl	8008fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007df0:	f001 fb40 	bl	8009474 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007df4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3738      	adds	r7, #56	; 0x38
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08e      	sub	sp, #56	; 0x38
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10c      	bne.n	8007e34 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	623b      	str	r3, [r7, #32]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d103      	bne.n	8007e42 <xQueueReceiveFromISR+0x3e>
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <xQueueReceiveFromISR+0x42>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <xQueueReceiveFromISR+0x44>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10c      	bne.n	8007e66 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	b672      	cpsid	i
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	b662      	cpsie	i
 8007e60:	61fb      	str	r3, [r7, #28]
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e66:	f001 fbb9 	bl	80095dc <vPortValidateInterruptPriority>
	__asm volatile
 8007e6a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	b672      	cpsid	i
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	b662      	cpsie	i
 8007e82:	61ba      	str	r2, [r7, #24]
 8007e84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d02f      	beq.n	8007ef6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ea0:	68b9      	ldr	r1, [r7, #8]
 8007ea2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea4:	f000 f8b6 	bl	8008014 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eaa:	1e5a      	subs	r2, r3, #1
 8007eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007eb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb8:	d112      	bne.n	8007ee0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d016      	beq.n	8007ef0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	3310      	adds	r3, #16
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 fd8c 	bl	80089e4 <xTaskRemoveFromEventList>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e007      	b.n	8007ef0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	b25a      	sxtb	r2, r3
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef4:	e001      	b.n	8007efa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8007efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f383 8811 	msr	BASEPRI, r3
}
 8007f04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3738      	adds	r7, #56	; 0x38
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f1c3 0307 	rsb	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e001      	b.n	8007f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f32:	68fb      	ldr	r3, [r7, #12]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10d      	bne.n	8007f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d14d      	bne.n	8008002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 ff9c 	bl	8008ea8 <xTaskPriorityDisinherit>
 8007f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	e043      	b.n	8008002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d119      	bne.n	8007fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6858      	ldr	r0, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	f010 ff7e 	bl	8018e8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685a      	ldr	r2, [r3, #4]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	441a      	add	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	685a      	ldr	r2, [r3, #4]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d32b      	bcc.n	8008002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	e026      	b.n	8008002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	68d8      	ldr	r0, [r3, #12]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	f010 ff64 	bl	8018e8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	425b      	negs	r3, r3
 8007fce:	441a      	add	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d207      	bcs.n	8007ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	689a      	ldr	r2, [r3, #8]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	425b      	negs	r3, r3
 8007fea:	441a      	add	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d105      	bne.n	8008002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1c5a      	adds	r2, r3, #1
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800800a:	697b      	ldr	r3, [r7, #20]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	2b00      	cmp	r3, #0
 8008024:	d018      	beq.n	8008058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802e:	441a      	add	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	d303      	bcc.n	8008048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68d9      	ldr	r1, [r3, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	461a      	mov	r2, r3
 8008052:	6838      	ldr	r0, [r7, #0]
 8008054:	f010 ff1a 	bl	8018e8c <memcpy>
	}
}
 8008058:	bf00      	nop
 800805a:	3708      	adds	r7, #8
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008068:	f001 f9d0 	bl	800940c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008074:	e011      	b.n	800809a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b00      	cmp	r3, #0
 800807c:	d012      	beq.n	80080a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3324      	adds	r3, #36	; 0x24
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fcae 	bl	80089e4 <xTaskRemoveFromEventList>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800808e:	f000 fd89 	bl	8008ba4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	3b01      	subs	r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800809a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dce9      	bgt.n	8008076 <prvUnlockQueue+0x16>
 80080a2:	e000      	b.n	80080a6 <prvUnlockQueue+0x46>
					break;
 80080a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	22ff      	movs	r2, #255	; 0xff
 80080aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080ae:	f001 f9e1 	bl	8009474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080b2:	f001 f9ab 	bl	800940c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080be:	e011      	b.n	80080e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d012      	beq.n	80080ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3310      	adds	r3, #16
 80080cc:	4618      	mov	r0, r3
 80080ce:	f000 fc89 	bl	80089e4 <xTaskRemoveFromEventList>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080d8:	f000 fd64 	bl	8008ba4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	3b01      	subs	r3, #1
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dce9      	bgt.n	80080c0 <prvUnlockQueue+0x60>
 80080ec:	e000      	b.n	80080f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	22ff      	movs	r2, #255	; 0xff
 80080f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080f8:	f001 f9bc 	bl	8009474 <vPortExitCritical>
}
 80080fc:	bf00      	nop
 80080fe:	3710      	adds	r7, #16
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800810c:	f001 f97e 	bl	800940c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008114:	2b00      	cmp	r3, #0
 8008116:	d102      	bne.n	800811e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008118:	2301      	movs	r3, #1
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	e001      	b.n	8008122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800811e:	2300      	movs	r3, #0
 8008120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008122:	f001 f9a7 	bl	8009474 <vPortExitCritical>

	return xReturn;
 8008126:	68fb      	ldr	r3, [r7, #12]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008138:	f001 f968 	bl	800940c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008144:	429a      	cmp	r2, r3
 8008146:	d102      	bne.n	800814e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	e001      	b.n	8008152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008152:	f001 f98f 	bl	8009474 <vPortExitCritical>

	return xReturn;
 8008156:	68fb      	ldr	r3, [r7, #12]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08e      	sub	sp, #56	; 0x38
 8008164:	af04      	add	r7, sp, #16
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10c      	bne.n	800818e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	b672      	cpsid	i
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	b662      	cpsie	i
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10c      	bne.n	80081ae <xTaskCreateStatic+0x4e>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	b672      	cpsid	i
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	b662      	cpsie	i
 80081a8:	61fb      	str	r3, [r7, #28]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081ae:	2354      	movs	r3, #84	; 0x54
 80081b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b54      	cmp	r3, #84	; 0x54
 80081b6:	d00c      	beq.n	80081d2 <xTaskCreateStatic+0x72>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	b672      	cpsid	i
 80081be:	f383 8811 	msr	BASEPRI, r3
 80081c2:	f3bf 8f6f 	isb	sy
 80081c6:	f3bf 8f4f 	dsb	sy
 80081ca:	b662      	cpsie	i
 80081cc:	61bb      	str	r3, [r7, #24]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01e      	beq.n	8008218 <xTaskCreateStatic+0xb8>
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01b      	beq.n	8008218 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80081f2:	2300      	movs	r3, #0
 80081f4:	9303      	str	r3, [sp, #12]
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	9302      	str	r3, [sp, #8]
 80081fa:	f107 0314 	add.w	r3, r7, #20
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 f850 	bl	80082b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008212:	f000 f8d7 	bl	80083c4 <prvAddNewTaskToReadyList>
 8008216:	e001      	b.n	800821c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800821c:	697b      	ldr	r3, [r7, #20]
	}
 800821e:	4618      	mov	r0, r3
 8008220:	3728      	adds	r7, #40	; 0x28
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08c      	sub	sp, #48	; 0x30
 800822a:	af04      	add	r7, sp, #16
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	603b      	str	r3, [r7, #0]
 8008232:	4613      	mov	r3, r2
 8008234:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	4618      	mov	r0, r3
 800823c:	f001 fa12 	bl	8009664 <pvPortMalloc>
 8008240:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00e      	beq.n	8008266 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008248:	2054      	movs	r0, #84	; 0x54
 800824a:	f001 fa0b 	bl	8009664 <pvPortMalloc>
 800824e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	631a      	str	r2, [r3, #48]	; 0x30
 800825c:	e005      	b.n	800826a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800825e:	6978      	ldr	r0, [r7, #20]
 8008260:	f001 faca 	bl	80097f8 <vPortFree>
 8008264:	e001      	b.n	800826a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d017      	beq.n	80082a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	2300      	movs	r3, #0
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68b9      	ldr	r1, [r7, #8]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f80e 	bl	80082b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008294:	69f8      	ldr	r0, [r7, #28]
 8008296:	f000 f895 	bl	80083c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800829a:	2301      	movs	r3, #1
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	e002      	b.n	80082a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082a0:	f04f 33ff 	mov.w	r3, #4294967295
 80082a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082a6:	69bb      	ldr	r3, [r7, #24]
	}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80082c8:	440b      	add	r3, r1
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00c      	beq.n	80082fc <prvInitialiseNewTask+0x4c>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	617b      	str	r3, [r7, #20]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d01f      	beq.n	8008342 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	e012      	b.n	800832e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	4413      	add	r3, r2
 800830e:	7819      	ldrb	r1, [r3, #0]
 8008310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	3334      	adds	r3, #52	; 0x34
 8008318:	460a      	mov	r2, r1
 800831a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	4413      	add	r3, r2
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	3301      	adds	r3, #1
 800832c:	61fb      	str	r3, [r7, #28]
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	2b0f      	cmp	r3, #15
 8008332:	d9e9      	bls.n	8008308 <prvInitialiseNewTask+0x58>
 8008334:	e000      	b.n	8008338 <prvInitialiseNewTask+0x88>
			{
				break;
 8008336:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833a:	2200      	movs	r2, #0
 800833c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008340:	e003      	b.n	800834a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800834c:	2b06      	cmp	r3, #6
 800834e:	d901      	bls.n	8008354 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008350:	2306      	movs	r3, #6
 8008352:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008358:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800835e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	2200      	movs	r2, #0
 8008364:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	3304      	adds	r3, #4
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fee6 	bl	800713c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	3318      	adds	r3, #24
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe fee1 	bl	800713c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	f1c3 0207 	rsb	r2, r3, #7
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800838e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	2200      	movs	r2, #0
 8008394:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	68f9      	ldr	r1, [r7, #12]
 80083a2:	69b8      	ldr	r0, [r7, #24]
 80083a4:	f000 ff22 	bl	80091ec <pxPortInitialiseStack>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ba:	bf00      	nop
 80083bc:	3720      	adds	r7, #32
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083cc:	f001 f81e 	bl	800940c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083d0:	4b2a      	ldr	r3, [pc, #168]	; (800847c <prvAddNewTaskToReadyList+0xb8>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	4a29      	ldr	r2, [pc, #164]	; (800847c <prvAddNewTaskToReadyList+0xb8>)
 80083d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80083da:	4b29      	ldr	r3, [pc, #164]	; (8008480 <prvAddNewTaskToReadyList+0xbc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d109      	bne.n	80083f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083e2:	4a27      	ldr	r2, [pc, #156]	; (8008480 <prvAddNewTaskToReadyList+0xbc>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083e8:	4b24      	ldr	r3, [pc, #144]	; (800847c <prvAddNewTaskToReadyList+0xb8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d110      	bne.n	8008412 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80083f0:	f000 fbfc 	bl	8008bec <prvInitialiseTaskLists>
 80083f4:	e00d      	b.n	8008412 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80083f6:	4b23      	ldr	r3, [pc, #140]	; (8008484 <prvAddNewTaskToReadyList+0xc0>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80083fe:	4b20      	ldr	r3, [pc, #128]	; (8008480 <prvAddNewTaskToReadyList+0xbc>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008408:	429a      	cmp	r2, r3
 800840a:	d802      	bhi.n	8008412 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800840c:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <prvAddNewTaskToReadyList+0xbc>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008412:	4b1d      	ldr	r3, [pc, #116]	; (8008488 <prvAddNewTaskToReadyList+0xc4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <prvAddNewTaskToReadyList+0xc4>)
 800841a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	2201      	movs	r2, #1
 8008422:	409a      	lsls	r2, r3
 8008424:	4b19      	ldr	r3, [pc, #100]	; (800848c <prvAddNewTaskToReadyList+0xc8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4313      	orrs	r3, r2
 800842a:	4a18      	ldr	r2, [pc, #96]	; (800848c <prvAddNewTaskToReadyList+0xc8>)
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4a15      	ldr	r2, [pc, #84]	; (8008490 <prvAddNewTaskToReadyList+0xcc>)
 800843c:	441a      	add	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	4619      	mov	r1, r3
 8008444:	4610      	mov	r0, r2
 8008446:	f7fe fe86 	bl	8007156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800844a:	f001 f813 	bl	8009474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800844e:	4b0d      	ldr	r3, [pc, #52]	; (8008484 <prvAddNewTaskToReadyList+0xc0>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008456:	4b0a      	ldr	r3, [pc, #40]	; (8008480 <prvAddNewTaskToReadyList+0xbc>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008460:	429a      	cmp	r2, r3
 8008462:	d207      	bcs.n	8008474 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <prvAddNewTaskToReadyList+0xd0>)
 8008466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	2000585c 	.word	0x2000585c
 8008480:	2000575c 	.word	0x2000575c
 8008484:	20005868 	.word	0x20005868
 8008488:	20005878 	.word	0x20005878
 800848c:	20005864 	.word	0x20005864
 8008490:	20005760 	.word	0x20005760
 8008494:	e000ed04 	.word	0xe000ed04

08008498 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d019      	beq.n	80084de <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80084aa:	4b14      	ldr	r3, [pc, #80]	; (80084fc <vTaskDelay+0x64>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00c      	beq.n	80084cc <vTaskDelay+0x34>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	b672      	cpsid	i
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	b662      	cpsie	i
 80084c6:	60bb      	str	r3, [r7, #8]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 80084cc:	f000 f87e 	bl	80085cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80084d0:	2100      	movs	r1, #0
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fe24 	bl	8009120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80084d8:	f000 f886 	bl	80085e8 <xTaskResumeAll>
 80084dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d107      	bne.n	80084f4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80084e4:	4b06      	ldr	r3, [pc, #24]	; (8008500 <vTaskDelay+0x68>)
 80084e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ea:	601a      	str	r2, [r3, #0]
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	20005884 	.word	0x20005884
 8008500:	e000ed04 	.word	0xe000ed04

08008504 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08a      	sub	sp, #40	; 0x28
 8008508:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800850a:	2300      	movs	r3, #0
 800850c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008512:	463a      	mov	r2, r7
 8008514:	1d39      	adds	r1, r7, #4
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4618      	mov	r0, r3
 800851c:	f7f8 f85e 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	9202      	str	r2, [sp, #8]
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	2300      	movs	r3, #0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	2300      	movs	r3, #0
 8008530:	460a      	mov	r2, r1
 8008532:	4920      	ldr	r1, [pc, #128]	; (80085b4 <vTaskStartScheduler+0xb0>)
 8008534:	4820      	ldr	r0, [pc, #128]	; (80085b8 <vTaskStartScheduler+0xb4>)
 8008536:	f7ff fe13 	bl	8008160 <xTaskCreateStatic>
 800853a:	4603      	mov	r3, r0
 800853c:	4a1f      	ldr	r2, [pc, #124]	; (80085bc <vTaskStartScheduler+0xb8>)
 800853e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008540:	4b1e      	ldr	r3, [pc, #120]	; (80085bc <vTaskStartScheduler+0xb8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008548:	2301      	movs	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e001      	b.n	8008552 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800854e:	2300      	movs	r3, #0
 8008550:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d118      	bne.n	800858a <vTaskStartScheduler+0x86>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	b672      	cpsid	i
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	b662      	cpsie	i
 800856c:	613b      	str	r3, [r7, #16]
}
 800856e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008570:	4b13      	ldr	r3, [pc, #76]	; (80085c0 <vTaskStartScheduler+0xbc>)
 8008572:	f04f 32ff 	mov.w	r2, #4294967295
 8008576:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008578:	4b12      	ldr	r3, [pc, #72]	; (80085c4 <vTaskStartScheduler+0xc0>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800857e:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <vTaskStartScheduler+0xc4>)
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008584:	f000 fec4 	bl	8009310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008588:	e010      	b.n	80085ac <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008590:	d10c      	bne.n	80085ac <vTaskStartScheduler+0xa8>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	b672      	cpsid	i
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	b662      	cpsie	i
 80085a6:	60fb      	str	r3, [r7, #12]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <vTaskStartScheduler+0xa6>
}
 80085ac:	bf00      	nop
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	08019c00 	.word	0x08019c00
 80085b8:	08008bbd 	.word	0x08008bbd
 80085bc:	20005880 	.word	0x20005880
 80085c0:	2000587c 	.word	0x2000587c
 80085c4:	20005868 	.word	0x20005868
 80085c8:	20005860 	.word	0x20005860

080085cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085cc:	b480      	push	{r7}
 80085ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80085d0:	4b04      	ldr	r3, [pc, #16]	; (80085e4 <vTaskSuspendAll+0x18>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4a03      	ldr	r2, [pc, #12]	; (80085e4 <vTaskSuspendAll+0x18>)
 80085d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80085da:	bf00      	nop
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20005884 	.word	0x20005884

080085e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085f6:	4b42      	ldr	r3, [pc, #264]	; (8008700 <xTaskResumeAll+0x118>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10c      	bne.n	8008618 <xTaskResumeAll+0x30>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	b672      	cpsid	i
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	b662      	cpsie	i
 8008612:	603b      	str	r3, [r7, #0]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008618:	f000 fef8 	bl	800940c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800861c:	4b38      	ldr	r3, [pc, #224]	; (8008700 <xTaskResumeAll+0x118>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	4a37      	ldr	r2, [pc, #220]	; (8008700 <xTaskResumeAll+0x118>)
 8008624:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <xTaskResumeAll+0x118>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d161      	bne.n	80086f2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <xTaskResumeAll+0x11c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05d      	beq.n	80086f2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008636:	e02e      	b.n	8008696 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008638:	4b33      	ldr	r3, [pc, #204]	; (8008708 <xTaskResumeAll+0x120>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3318      	adds	r3, #24
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fde3 	bl	8007210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fdde 	bl	8007210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	2201      	movs	r2, #1
 800865a:	409a      	lsls	r2, r3
 800865c:	4b2b      	ldr	r3, [pc, #172]	; (800870c <xTaskResumeAll+0x124>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4313      	orrs	r3, r2
 8008662:	4a2a      	ldr	r2, [pc, #168]	; (800870c <xTaskResumeAll+0x124>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a27      	ldr	r2, [pc, #156]	; (8008710 <xTaskResumeAll+0x128>)
 8008674:	441a      	add	r2, r3
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7fe fd6a 	bl	8007156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008686:	4b23      	ldr	r3, [pc, #140]	; (8008714 <xTaskResumeAll+0x12c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800868c:	429a      	cmp	r2, r3
 800868e:	d302      	bcc.n	8008696 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008690:	4b21      	ldr	r3, [pc, #132]	; (8008718 <xTaskResumeAll+0x130>)
 8008692:	2201      	movs	r2, #1
 8008694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008696:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <xTaskResumeAll+0x120>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1cc      	bne.n	8008638 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086a4:	f000 fb42 	bl	8008d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80086a8:	4b1c      	ldr	r3, [pc, #112]	; (800871c <xTaskResumeAll+0x134>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086b4:	f000 f858 	bl	8008768 <xTaskIncrementTick>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80086be:	4b16      	ldr	r3, [pc, #88]	; (8008718 <xTaskResumeAll+0x130>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1f1      	bne.n	80086b4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80086d0:	4b12      	ldr	r3, [pc, #72]	; (800871c <xTaskResumeAll+0x134>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <xTaskResumeAll+0x130>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086de:	2301      	movs	r3, #1
 80086e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <xTaskResumeAll+0x138>)
 80086e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086f2:	f000 febf 	bl	8009474 <vPortExitCritical>

	return xAlreadyYielded;
 80086f6:	68bb      	ldr	r3, [r7, #8]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20005884 	.word	0x20005884
 8008704:	2000585c 	.word	0x2000585c
 8008708:	2000581c 	.word	0x2000581c
 800870c:	20005864 	.word	0x20005864
 8008710:	20005760 	.word	0x20005760
 8008714:	2000575c 	.word	0x2000575c
 8008718:	20005870 	.word	0x20005870
 800871c:	2000586c 	.word	0x2000586c
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800872a:	4b05      	ldr	r3, [pc, #20]	; (8008740 <xTaskGetTickCount+0x1c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008730:	687b      	ldr	r3, [r7, #4]
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	20005860 	.word	0x20005860

08008744 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800874a:	f000 ff47 	bl	80095dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800874e:	2300      	movs	r3, #0
 8008750:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008752:	4b04      	ldr	r3, [pc, #16]	; (8008764 <xTaskGetTickCountFromISR+0x20>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008758:	683b      	ldr	r3, [r7, #0]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20005860 	.word	0x20005860

08008768 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008772:	4b4f      	ldr	r3, [pc, #316]	; (80088b0 <xTaskIncrementTick+0x148>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 808a 	bne.w	8008890 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800877c:	4b4d      	ldr	r3, [pc, #308]	; (80088b4 <xTaskIncrementTick+0x14c>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008784:	4a4b      	ldr	r2, [pc, #300]	; (80088b4 <xTaskIncrementTick+0x14c>)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d122      	bne.n	80087d6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008790:	4b49      	ldr	r3, [pc, #292]	; (80088b8 <xTaskIncrementTick+0x150>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	b672      	cpsid	i
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	b662      	cpsie	i
 80087ae:	603b      	str	r3, [r7, #0]
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <xTaskIncrementTick+0x4a>
 80087b4:	4b40      	ldr	r3, [pc, #256]	; (80088b8 <xTaskIncrementTick+0x150>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	4b40      	ldr	r3, [pc, #256]	; (80088bc <xTaskIncrementTick+0x154>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a3e      	ldr	r2, [pc, #248]	; (80088b8 <xTaskIncrementTick+0x150>)
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	4a3e      	ldr	r2, [pc, #248]	; (80088bc <xTaskIncrementTick+0x154>)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	4b3d      	ldr	r3, [pc, #244]	; (80088c0 <xTaskIncrementTick+0x158>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3301      	adds	r3, #1
 80087ce:	4a3c      	ldr	r2, [pc, #240]	; (80088c0 <xTaskIncrementTick+0x158>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	f000 faab 	bl	8008d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087d6:	4b3b      	ldr	r3, [pc, #236]	; (80088c4 <xTaskIncrementTick+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d348      	bcc.n	8008872 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087e0:	4b35      	ldr	r3, [pc, #212]	; (80088b8 <xTaskIncrementTick+0x150>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d104      	bne.n	80087f4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ea:	4b36      	ldr	r3, [pc, #216]	; (80088c4 <xTaskIncrementTick+0x15c>)
 80087ec:	f04f 32ff 	mov.w	r2, #4294967295
 80087f0:	601a      	str	r2, [r3, #0]
					break;
 80087f2:	e03e      	b.n	8008872 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087f4:	4b30      	ldr	r3, [pc, #192]	; (80088b8 <xTaskIncrementTick+0x150>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	429a      	cmp	r2, r3
 800880a:	d203      	bcs.n	8008814 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800880c:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <xTaskIncrementTick+0x15c>)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008812:	e02e      	b.n	8008872 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	3304      	adds	r3, #4
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe fcf9 	bl	8007210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d004      	beq.n	8008830 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	3318      	adds	r3, #24
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe fcf0 	bl	8007210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008834:	2201      	movs	r2, #1
 8008836:	409a      	lsls	r2, r3
 8008838:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <xTaskIncrementTick+0x160>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4313      	orrs	r3, r2
 800883e:	4a22      	ldr	r2, [pc, #136]	; (80088c8 <xTaskIncrementTick+0x160>)
 8008840:	6013      	str	r3, [r2, #0]
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	4613      	mov	r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4a1f      	ldr	r2, [pc, #124]	; (80088cc <xTaskIncrementTick+0x164>)
 8008850:	441a      	add	r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	3304      	adds	r3, #4
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f7fe fc7c 	bl	8007156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008862:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <xTaskIncrementTick+0x168>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	429a      	cmp	r2, r3
 800886a:	d3b9      	bcc.n	80087e0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800886c:	2301      	movs	r3, #1
 800886e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008870:	e7b6      	b.n	80087e0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008872:	4b17      	ldr	r3, [pc, #92]	; (80088d0 <xTaskIncrementTick+0x168>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4914      	ldr	r1, [pc, #80]	; (80088cc <xTaskIncrementTick+0x164>)
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	440b      	add	r3, r1
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d907      	bls.n	800889a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800888a:	2301      	movs	r3, #1
 800888c:	617b      	str	r3, [r7, #20]
 800888e:	e004      	b.n	800889a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008890:	4b10      	ldr	r3, [pc, #64]	; (80088d4 <xTaskIncrementTick+0x16c>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	4a0f      	ldr	r2, [pc, #60]	; (80088d4 <xTaskIncrementTick+0x16c>)
 8008898:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800889a:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <xTaskIncrementTick+0x170>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80088a2:	2301      	movs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80088a6:	697b      	ldr	r3, [r7, #20]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	20005884 	.word	0x20005884
 80088b4:	20005860 	.word	0x20005860
 80088b8:	20005814 	.word	0x20005814
 80088bc:	20005818 	.word	0x20005818
 80088c0:	20005874 	.word	0x20005874
 80088c4:	2000587c 	.word	0x2000587c
 80088c8:	20005864 	.word	0x20005864
 80088cc:	20005760 	.word	0x20005760
 80088d0:	2000575c 	.word	0x2000575c
 80088d4:	2000586c 	.word	0x2000586c
 80088d8:	20005870 	.word	0x20005870

080088dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088e2:	4b28      	ldr	r3, [pc, #160]	; (8008984 <vTaskSwitchContext+0xa8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088ea:	4b27      	ldr	r3, [pc, #156]	; (8008988 <vTaskSwitchContext+0xac>)
 80088ec:	2201      	movs	r2, #1
 80088ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80088f0:	e041      	b.n	8008976 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80088f2:	4b25      	ldr	r3, [pc, #148]	; (8008988 <vTaskSwitchContext+0xac>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f8:	4b24      	ldr	r3, [pc, #144]	; (800898c <vTaskSwitchContext+0xb0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	fab3 f383 	clz	r3, r3
 8008904:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008906:	7afb      	ldrb	r3, [r7, #11]
 8008908:	f1c3 031f 	rsb	r3, r3, #31
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	4920      	ldr	r1, [pc, #128]	; (8008990 <vTaskSwitchContext+0xb4>)
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	440b      	add	r3, r1
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10c      	bne.n	800893c <vTaskSwitchContext+0x60>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008926:	b672      	cpsid	i
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	b662      	cpsie	i
 8008936:	607b      	str	r3, [r7, #4]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <vTaskSwitchContext+0x5e>
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4613      	mov	r3, r2
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4413      	add	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4a12      	ldr	r2, [pc, #72]	; (8008990 <vTaskSwitchContext+0xb4>)
 8008948:	4413      	add	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	685a      	ldr	r2, [r3, #4]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3308      	adds	r3, #8
 800895e:	429a      	cmp	r2, r3
 8008960:	d104      	bne.n	800896c <vTaskSwitchContext+0x90>
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	605a      	str	r2, [r3, #4]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	4a08      	ldr	r2, [pc, #32]	; (8008994 <vTaskSwitchContext+0xb8>)
 8008974:	6013      	str	r3, [r2, #0]
}
 8008976:	bf00      	nop
 8008978:	371c      	adds	r7, #28
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	20005884 	.word	0x20005884
 8008988:	20005870 	.word	0x20005870
 800898c:	20005864 	.word	0x20005864
 8008990:	20005760 	.word	0x20005760
 8008994:	2000575c 	.word	0x2000575c

08008998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10c      	bne.n	80089c2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ac:	b672      	cpsid	i
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	b662      	cpsie	i
 80089bc:	60fb      	str	r3, [r7, #12]
}
 80089be:	bf00      	nop
 80089c0:	e7fe      	b.n	80089c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089c2:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <vTaskPlaceOnEventList+0x48>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3318      	adds	r3, #24
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fe fbe7 	bl	800719e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089d0:	2101      	movs	r1, #1
 80089d2:	6838      	ldr	r0, [r7, #0]
 80089d4:	f000 fba4 	bl	8009120 <prvAddCurrentTaskToDelayedList>
}
 80089d8:	bf00      	nop
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	2000575c 	.word	0x2000575c

080089e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10c      	bne.n	8008a14 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	b672      	cpsid	i
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	b662      	cpsie	i
 8008a0e:	60fb      	str	r3, [r7, #12]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	3318      	adds	r3, #24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fbf9 	bl	8007210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <xTaskRemoveFromEventList+0xb0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11c      	bne.n	8008a60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fbf0 	bl	8007210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	2201      	movs	r2, #1
 8008a36:	409a      	lsls	r2, r3
 8008a38:	4b17      	ldr	r3, [pc, #92]	; (8008a98 <xTaskRemoveFromEventList+0xb4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	4a16      	ldr	r2, [pc, #88]	; (8008a98 <xTaskRemoveFromEventList+0xb4>)
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a46:	4613      	mov	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4a13      	ldr	r2, [pc, #76]	; (8008a9c <xTaskRemoveFromEventList+0xb8>)
 8008a50:	441a      	add	r2, r3
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4619      	mov	r1, r3
 8008a58:	4610      	mov	r0, r2
 8008a5a:	f7fe fb7c 	bl	8007156 <vListInsertEnd>
 8008a5e:	e005      	b.n	8008a6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3318      	adds	r3, #24
 8008a64:	4619      	mov	r1, r3
 8008a66:	480e      	ldr	r0, [pc, #56]	; (8008aa0 <xTaskRemoveFromEventList+0xbc>)
 8008a68:	f7fe fb75 	bl	8007156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <xTaskRemoveFromEventList+0xc0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d905      	bls.n	8008a86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a7e:	4b0a      	ldr	r3, [pc, #40]	; (8008aa8 <xTaskRemoveFromEventList+0xc4>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e001      	b.n	8008a8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a8a:	697b      	ldr	r3, [r7, #20]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20005884 	.word	0x20005884
 8008a98:	20005864 	.word	0x20005864
 8008a9c:	20005760 	.word	0x20005760
 8008aa0:	2000581c 	.word	0x2000581c
 8008aa4:	2000575c 	.word	0x2000575c
 8008aa8:	20005870 	.word	0x20005870

08008aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ab4:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <vTaskInternalSetTimeOutState+0x24>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008abc:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <vTaskInternalSetTimeOutState+0x28>)
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	605a      	str	r2, [r3, #4]
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	20005874 	.word	0x20005874
 8008ad4:	20005860 	.word	0x20005860

08008ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10c      	bne.n	8008b02 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	613b      	str	r3, [r7, #16]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10c      	bne.n	8008b22 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	b672      	cpsid	i
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	b662      	cpsie	i
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008b22:	f000 fc73 	bl	800940c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b26:	4b1d      	ldr	r3, [pc, #116]	; (8008b9c <xTaskCheckForTimeOut+0xc4>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3e:	d102      	bne.n	8008b46 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e023      	b.n	8008b8e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <xTaskCheckForTimeOut+0xc8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d007      	beq.n	8008b62 <xTaskCheckForTimeOut+0x8a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d302      	bcc.n	8008b62 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	61fb      	str	r3, [r7, #28]
 8008b60:	e015      	b.n	8008b8e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d20b      	bcs.n	8008b84 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad2      	subs	r2, r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff ff97 	bl	8008aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	61fb      	str	r3, [r7, #28]
 8008b82:	e004      	b.n	8008b8e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b8e:	f000 fc71 	bl	8009474 <vPortExitCritical>

	return xReturn;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3720      	adds	r7, #32
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20005860 	.word	0x20005860
 8008ba0:	20005874 	.word	0x20005874

08008ba4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba8:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <vTaskMissedYield+0x14>)
 8008baa:	2201      	movs	r2, #1
 8008bac:	601a      	str	r2, [r3, #0]
}
 8008bae:	bf00      	nop
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	20005870 	.word	0x20005870

08008bbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bc4:	f000 f852 	bl	8008c6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <prvIdleTask+0x28>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d9f9      	bls.n	8008bc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <prvIdleTask+0x2c>)
 8008bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008be0:	e7f0      	b.n	8008bc4 <prvIdleTask+0x8>
 8008be2:	bf00      	nop
 8008be4:	20005760 	.word	0x20005760
 8008be8:	e000ed04 	.word	0xe000ed04

08008bec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	e00c      	b.n	8008c12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4a12      	ldr	r2, [pc, #72]	; (8008c4c <prvInitialiseTaskLists+0x60>)
 8008c04:	4413      	add	r3, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fa78 	bl	80070fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	607b      	str	r3, [r7, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b06      	cmp	r3, #6
 8008c16:	d9ef      	bls.n	8008bf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c18:	480d      	ldr	r0, [pc, #52]	; (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c1a:	f7fe fa6f 	bl	80070fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c1e:	480d      	ldr	r0, [pc, #52]	; (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c20:	f7fe fa6c 	bl	80070fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c24:	480c      	ldr	r0, [pc, #48]	; (8008c58 <prvInitialiseTaskLists+0x6c>)
 8008c26:	f7fe fa69 	bl	80070fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c2a:	480c      	ldr	r0, [pc, #48]	; (8008c5c <prvInitialiseTaskLists+0x70>)
 8008c2c:	f7fe fa66 	bl	80070fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c30:	480b      	ldr	r0, [pc, #44]	; (8008c60 <prvInitialiseTaskLists+0x74>)
 8008c32:	f7fe fa63 	bl	80070fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <prvInitialiseTaskLists+0x78>)
 8008c38:	4a05      	ldr	r2, [pc, #20]	; (8008c50 <prvInitialiseTaskLists+0x64>)
 8008c3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <prvInitialiseTaskLists+0x7c>)
 8008c3e:	4a05      	ldr	r2, [pc, #20]	; (8008c54 <prvInitialiseTaskLists+0x68>)
 8008c40:	601a      	str	r2, [r3, #0]
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20005760 	.word	0x20005760
 8008c50:	200057ec 	.word	0x200057ec
 8008c54:	20005800 	.word	0x20005800
 8008c58:	2000581c 	.word	0x2000581c
 8008c5c:	20005830 	.word	0x20005830
 8008c60:	20005848 	.word	0x20005848
 8008c64:	20005814 	.word	0x20005814
 8008c68:	20005818 	.word	0x20005818

08008c6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c72:	e019      	b.n	8008ca8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c74:	f000 fbca 	bl	800940c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <prvCheckTasksWaitingTermination+0x50>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3304      	adds	r3, #4
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fe fac3 	bl	8007210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <prvCheckTasksWaitingTermination+0x54>)
 8008c92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c94:	4b0b      	ldr	r3, [pc, #44]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008c9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c9e:	f000 fbe9 	bl	8009474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 f810 	bl	8008cc8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <prvCheckTasksWaitingTermination+0x58>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1e1      	bne.n	8008c74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20005830 	.word	0x20005830
 8008cc0:	2000585c 	.word	0x2000585c
 8008cc4:	20005844 	.word	0x20005844

08008cc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d108      	bne.n	8008cec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fd8a 	bl	80097f8 <vPortFree>
				vPortFree( pxTCB );
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd87 	bl	80097f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cea:	e01a      	b.n	8008d22 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d103      	bne.n	8008cfe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fd7e 	bl	80097f8 <vPortFree>
	}
 8008cfc:	e011      	b.n	8008d22 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d00c      	beq.n	8008d22 <prvDeleteTCB+0x5a>
	__asm volatile
 8008d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0c:	b672      	cpsid	i
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	b662      	cpsie	i
 8008d1c:	60fb      	str	r3, [r7, #12]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <prvDeleteTCB+0x58>
	}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
	...

08008d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <prvResetNextTaskUnblockTime+0x38>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d104      	bne.n	8008d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <prvResetNextTaskUnblockTime+0x3c>)
 8008d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d44:	e008      	b.n	8008d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <prvResetNextTaskUnblockTime+0x38>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	4a04      	ldr	r2, [pc, #16]	; (8008d68 <prvResetNextTaskUnblockTime+0x3c>)
 8008d56:	6013      	str	r3, [r2, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	20005814 	.word	0x20005814
 8008d68:	2000587c 	.word	0x2000587c

08008d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d72:	4b0b      	ldr	r3, [pc, #44]	; (8008da0 <xTaskGetSchedulerState+0x34>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d102      	bne.n	8008d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	e008      	b.n	8008d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d80:	4b08      	ldr	r3, [pc, #32]	; (8008da4 <xTaskGetSchedulerState+0x38>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d88:	2302      	movs	r3, #2
 8008d8a:	607b      	str	r3, [r7, #4]
 8008d8c:	e001      	b.n	8008d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d92:	687b      	ldr	r3, [r7, #4]
	}
 8008d94:	4618      	mov	r0, r3
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	20005868 	.word	0x20005868
 8008da4:	20005884 	.word	0x20005884

08008da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d069      	beq.n	8008e92 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	4b36      	ldr	r3, [pc, #216]	; (8008e9c <xTaskPriorityInherit+0xf4>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d259      	bcs.n	8008e80 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db06      	blt.n	8008de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd4:	4b31      	ldr	r3, [pc, #196]	; (8008e9c <xTaskPriorityInherit+0xf4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	f1c3 0207 	rsb	r2, r3, #7
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6959      	ldr	r1, [r3, #20]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4a2b      	ldr	r2, [pc, #172]	; (8008ea0 <xTaskPriorityInherit+0xf8>)
 8008df4:	4413      	add	r3, r2
 8008df6:	4299      	cmp	r1, r3
 8008df8:	d13a      	bne.n	8008e70 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fa06 	bl	8007210 <uxListRemove>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d115      	bne.n	8008e36 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	4924      	ldr	r1, [pc, #144]	; (8008ea0 <xTaskPriorityInherit+0xf8>)
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xTaskPriorityInherit+0x8e>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	2201      	movs	r2, #1
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43da      	mvns	r2, r3
 8008e2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ea4 <xTaskPriorityInherit+0xfc>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4013      	ands	r3, r2
 8008e32:	4a1c      	ldr	r2, [pc, #112]	; (8008ea4 <xTaskPriorityInherit+0xfc>)
 8008e34:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e36:	4b19      	ldr	r3, [pc, #100]	; (8008e9c <xTaskPriorityInherit+0xf4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	2201      	movs	r2, #1
 8008e46:	409a      	lsls	r2, r3
 8008e48:	4b16      	ldr	r3, [pc, #88]	; (8008ea4 <xTaskPriorityInherit+0xfc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	4a15      	ldr	r2, [pc, #84]	; (8008ea4 <xTaskPriorityInherit+0xfc>)
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e56:	4613      	mov	r3, r2
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4a10      	ldr	r2, [pc, #64]	; (8008ea0 <xTaskPriorityInherit+0xf8>)
 8008e60:	441a      	add	r2, r3
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	3304      	adds	r3, #4
 8008e66:	4619      	mov	r1, r3
 8008e68:	4610      	mov	r0, r2
 8008e6a:	f7fe f974 	bl	8007156 <vListInsertEnd>
 8008e6e:	e004      	b.n	8008e7a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e70:	4b0a      	ldr	r3, [pc, #40]	; (8008e9c <xTaskPriorityInherit+0xf4>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	60fb      	str	r3, [r7, #12]
 8008e7e:	e008      	b.n	8008e92 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e84:	4b05      	ldr	r3, [pc, #20]	; (8008e9c <xTaskPriorityInherit+0xf4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d201      	bcs.n	8008e92 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e92:	68fb      	ldr	r3, [r7, #12]
	}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	2000575c 	.word	0x2000575c
 8008ea0:	20005760 	.word	0x20005760
 8008ea4:	20005864 	.word	0x20005864

08008ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d072      	beq.n	8008fa4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ebe:	4b3c      	ldr	r3, [pc, #240]	; (8008fb0 <xTaskPriorityDisinherit+0x108>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d00c      	beq.n	8008ee2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	b672      	cpsid	i
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	b662      	cpsie	i
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10c      	bne.n	8008f04 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	b672      	cpsid	i
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	b662      	cpsie	i
 8008efe:	60bb      	str	r3, [r7, #8]
}
 8008f00:	bf00      	nop
 8008f02:	e7fe      	b.n	8008f02 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f08:	1e5a      	subs	r2, r3, #1
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d044      	beq.n	8008fa4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d140      	bne.n	8008fa4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe f972 	bl	8007210 <uxListRemove>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d115      	bne.n	8008f5e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	491f      	ldr	r1, [pc, #124]	; (8008fb4 <xTaskPriorityDisinherit+0x10c>)
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <xTaskPriorityDisinherit+0xb6>
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43da      	mvns	r2, r3
 8008f54:	4b18      	ldr	r3, [pc, #96]	; (8008fb8 <xTaskPriorityDisinherit+0x110>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	4a17      	ldr	r2, [pc, #92]	; (8008fb8 <xTaskPriorityDisinherit+0x110>)
 8008f5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6a:	f1c3 0207 	rsb	r2, r3, #7
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	2201      	movs	r2, #1
 8008f78:	409a      	lsls	r2, r3
 8008f7a:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <xTaskPriorityDisinherit+0x110>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	4a0d      	ldr	r2, [pc, #52]	; (8008fb8 <xTaskPriorityDisinherit+0x110>)
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4a08      	ldr	r2, [pc, #32]	; (8008fb4 <xTaskPriorityDisinherit+0x10c>)
 8008f92:	441a      	add	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f7fe f8db 	bl	8007156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008fa4:	697b      	ldr	r3, [r7, #20]
	}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	2000575c 	.word	0x2000575c
 8008fb4:	20005760 	.word	0x20005760
 8008fb8:	20005864 	.word	0x20005864

08008fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8087 	beq.w	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10c      	bne.n	8008ff8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe2:	b672      	cpsid	i
 8008fe4:	f383 8811 	msr	BASEPRI, r3
 8008fe8:	f3bf 8f6f 	isb	sy
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	b662      	cpsie	i
 8008ff2:	60fb      	str	r3, [r7, #12]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d902      	bls.n	8009008 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	61fb      	str	r3, [r7, #28]
 8009006:	e002      	b.n	800900e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	69fa      	ldr	r2, [r7, #28]
 8009014:	429a      	cmp	r2, r3
 8009016:	d065      	beq.n	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	429a      	cmp	r2, r3
 8009020:	d160      	bne.n	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009022:	4b32      	ldr	r3, [pc, #200]	; (80090ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	429a      	cmp	r2, r3
 800902a:	d10c      	bne.n	8009046 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	b672      	cpsid	i
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	b662      	cpsie	i
 8009040:	60bb      	str	r3, [r7, #8]
}
 8009042:	bf00      	nop
 8009044:	e7fe      	b.n	8009044 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	699b      	ldr	r3, [r3, #24]
 8009056:	2b00      	cmp	r3, #0
 8009058:	db04      	blt.n	8009064 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f1c3 0207 	rsb	r2, r3, #7
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009064:	69bb      	ldr	r3, [r7, #24]
 8009066:	6959      	ldr	r1, [r3, #20]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009074:	4413      	add	r3, r2
 8009076:	4299      	cmp	r1, r3
 8009078:	d134      	bne.n	80090e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fe f8c6 	bl	8007210 <uxListRemove>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d115      	bne.n	80090b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908e:	4918      	ldr	r1, [pc, #96]	; (80090f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	2201      	movs	r2, #1
 80090a6:	fa02 f303 	lsl.w	r3, r2, r3
 80090aa:	43da      	mvns	r2, r3
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4013      	ands	r3, r2
 80090b2:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80090b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	2201      	movs	r2, #1
 80090bc:	409a      	lsls	r2, r3
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4a06      	ldr	r2, [pc, #24]	; (80090f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80090d6:	441a      	add	r2, r3
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	3304      	adds	r3, #4
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f7fe f839 	bl	8007156 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090e4:	bf00      	nop
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	2000575c 	.word	0x2000575c
 80090f0:	20005760 	.word	0x20005760
 80090f4:	20005864 	.word	0x20005864

080090f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80090f8:	b480      	push	{r7}
 80090fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <pvTaskIncrementMutexHeldCount+0x24>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d004      	beq.n	800910e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009104:	4b05      	ldr	r3, [pc, #20]	; (800911c <pvTaskIncrementMutexHeldCount+0x24>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800910a:	3201      	adds	r2, #1
 800910c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800910e:	4b03      	ldr	r3, [pc, #12]	; (800911c <pvTaskIncrementMutexHeldCount+0x24>)
 8009110:	681b      	ldr	r3, [r3, #0]
	}
 8009112:	4618      	mov	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	2000575c 	.word	0x2000575c

08009120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800912a:	4b29      	ldr	r3, [pc, #164]	; (80091d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3304      	adds	r3, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe f86a 	bl	8007210 <uxListRemove>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10b      	bne.n	800915a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009142:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009148:	2201      	movs	r2, #1
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	43da      	mvns	r2, r3
 8009150:	4b21      	ldr	r3, [pc, #132]	; (80091d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4013      	ands	r3, r2
 8009156:	4a20      	ldr	r2, [pc, #128]	; (80091d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009158:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009160:	d10a      	bne.n	8009178 <prvAddCurrentTaskToDelayedList+0x58>
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d007      	beq.n	8009178 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009168:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	481a      	ldr	r0, [pc, #104]	; (80091dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009172:	f7fd fff0 	bl	8007156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009176:	e026      	b.n	80091c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009180:	4b14      	ldr	r3, [pc, #80]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	429a      	cmp	r2, r3
 800918e:	d209      	bcs.n	80091a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009190:	4b13      	ldr	r3, [pc, #76]	; (80091e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3304      	adds	r3, #4
 800919a:	4619      	mov	r1, r3
 800919c:	4610      	mov	r0, r2
 800919e:	f7fd fffe 	bl	800719e <vListInsert>
}
 80091a2:	e010      	b.n	80091c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a4:	4b0f      	ldr	r3, [pc, #60]	; (80091e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4619      	mov	r1, r3
 80091b0:	4610      	mov	r0, r2
 80091b2:	f7fd fff4 	bl	800719e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d202      	bcs.n	80091c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091c0:	4a09      	ldr	r2, [pc, #36]	; (80091e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6013      	str	r3, [r2, #0]
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20005860 	.word	0x20005860
 80091d4:	2000575c 	.word	0x2000575c
 80091d8:	20005864 	.word	0x20005864
 80091dc:	20005848 	.word	0x20005848
 80091e0:	20005818 	.word	0x20005818
 80091e4:	20005814 	.word	0x20005814
 80091e8:	2000587c 	.word	0x2000587c

080091ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	3b04      	subs	r3, #4
 80091fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f023 0201 	bic.w	r2, r3, #1
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3b04      	subs	r3, #4
 800921a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800921c:	4a0c      	ldr	r2, [pc, #48]	; (8009250 <pxPortInitialiseStack+0x64>)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3b14      	subs	r3, #20
 8009226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3b04      	subs	r3, #4
 8009232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f06f 0202 	mvn.w	r2, #2
 800923a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3b20      	subs	r3, #32
 8009240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009242:	68fb      	ldr	r3, [r7, #12]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	08009255 	.word	0x08009255

08009254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800925a:	2300      	movs	r3, #0
 800925c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <prvTaskExitError+0x5c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009266:	d00c      	beq.n	8009282 <prvTaskExitError+0x2e>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	b672      	cpsid	i
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	b662      	cpsie	i
 800927c:	60fb      	str	r3, [r7, #12]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <prvTaskExitError+0x2c>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	b672      	cpsid	i
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	b662      	cpsie	i
 8009296:	60bb      	str	r3, [r7, #8]
}
 8009298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800929a:	bf00      	nop
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0fc      	beq.n	800929c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092a2:	bf00      	nop
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20000020 	.word	0x20000020
	...

080092c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092c0:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <pxCurrentTCBConst2>)
 80092c2:	6819      	ldr	r1, [r3, #0]
 80092c4:	6808      	ldr	r0, [r1, #0]
 80092c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ca:	f380 8809 	msr	PSP, r0
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8811 	msr	BASEPRI, r0
 80092da:	4770      	bx	lr
 80092dc:	f3af 8000 	nop.w

080092e0 <pxCurrentTCBConst2>:
 80092e0:	2000575c 	.word	0x2000575c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop

080092e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092e8:	4808      	ldr	r0, [pc, #32]	; (800930c <prvPortStartFirstTask+0x24>)
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	6800      	ldr	r0, [r0, #0]
 80092ee:	f380 8808 	msr	MSP, r0
 80092f2:	f04f 0000 	mov.w	r0, #0
 80092f6:	f380 8814 	msr	CONTROL, r0
 80092fa:	b662      	cpsie	i
 80092fc:	b661      	cpsie	f
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	df00      	svc	0
 8009308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800930a:	bf00      	nop
 800930c:	e000ed08 	.word	0xe000ed08

08009310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009316:	4b37      	ldr	r3, [pc, #220]	; (80093f4 <xPortStartScheduler+0xe4>)
 8009318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	b2db      	uxtb	r3, r3
 800932e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009338:	b2da      	uxtb	r2, r3
 800933a:	4b2f      	ldr	r3, [pc, #188]	; (80093f8 <xPortStartScheduler+0xe8>)
 800933c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800933e:	4b2f      	ldr	r3, [pc, #188]	; (80093fc <xPortStartScheduler+0xec>)
 8009340:	2207      	movs	r2, #7
 8009342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009344:	e009      	b.n	800935a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009346:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <xPortStartScheduler+0xec>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	3b01      	subs	r3, #1
 800934c:	4a2b      	ldr	r2, [pc, #172]	; (80093fc <xPortStartScheduler+0xec>)
 800934e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	b2db      	uxtb	r3, r3
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	b2db      	uxtb	r3, r3
 800935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009362:	2b80      	cmp	r3, #128	; 0x80
 8009364:	d0ef      	beq.n	8009346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009366:	4b25      	ldr	r3, [pc, #148]	; (80093fc <xPortStartScheduler+0xec>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f1c3 0307 	rsb	r3, r3, #7
 800936e:	2b04      	cmp	r3, #4
 8009370:	d00c      	beq.n	800938c <xPortStartScheduler+0x7c>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	b672      	cpsid	i
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	b662      	cpsie	i
 8009386:	60bb      	str	r3, [r7, #8]
}
 8009388:	bf00      	nop
 800938a:	e7fe      	b.n	800938a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800938c:	4b1b      	ldr	r3, [pc, #108]	; (80093fc <xPortStartScheduler+0xec>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	4a1a      	ldr	r2, [pc, #104]	; (80093fc <xPortStartScheduler+0xec>)
 8009394:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <xPortStartScheduler+0xec>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800939e:	4a17      	ldr	r2, [pc, #92]	; (80093fc <xPortStartScheduler+0xec>)
 80093a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093aa:	4b15      	ldr	r3, [pc, #84]	; (8009400 <xPortStartScheduler+0xf0>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a14      	ldr	r2, [pc, #80]	; (8009400 <xPortStartScheduler+0xf0>)
 80093b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093b6:	4b12      	ldr	r3, [pc, #72]	; (8009400 <xPortStartScheduler+0xf0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a11      	ldr	r2, [pc, #68]	; (8009400 <xPortStartScheduler+0xf0>)
 80093bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80093c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093c2:	f000 f8dd 	bl	8009580 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093c6:	4b0f      	ldr	r3, [pc, #60]	; (8009404 <xPortStartScheduler+0xf4>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093cc:	f000 f8fc 	bl	80095c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093d0:	4b0d      	ldr	r3, [pc, #52]	; (8009408 <xPortStartScheduler+0xf8>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a0c      	ldr	r2, [pc, #48]	; (8009408 <xPortStartScheduler+0xf8>)
 80093d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80093da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093dc:	f7ff ff84 	bl	80092e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80093e0:	f7ff fa7c 	bl	80088dc <vTaskSwitchContext>
	prvTaskExitError();
 80093e4:	f7ff ff36 	bl	8009254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	e000e400 	.word	0xe000e400
 80093f8:	20005888 	.word	0x20005888
 80093fc:	2000588c 	.word	0x2000588c
 8009400:	e000ed20 	.word	0xe000ed20
 8009404:	20000020 	.word	0x20000020
 8009408:	e000ef34 	.word	0xe000ef34

0800940c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	b672      	cpsid	i
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	b662      	cpsie	i
 8009426:	607b      	str	r3, [r7, #4]
}
 8009428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800942a:	4b10      	ldr	r3, [pc, #64]	; (800946c <vPortEnterCritical+0x60>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	4a0e      	ldr	r2, [pc, #56]	; (800946c <vPortEnterCritical+0x60>)
 8009432:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009434:	4b0d      	ldr	r3, [pc, #52]	; (800946c <vPortEnterCritical+0x60>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b01      	cmp	r3, #1
 800943a:	d111      	bne.n	8009460 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <vPortEnterCritical+0x64>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00c      	beq.n	8009460 <vPortEnterCritical+0x54>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944a:	b672      	cpsid	i
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	b662      	cpsie	i
 800945a:	603b      	str	r3, [r7, #0]
}
 800945c:	bf00      	nop
 800945e:	e7fe      	b.n	800945e <vPortEnterCritical+0x52>
	}
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	20000020 	.word	0x20000020
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <vPortExitCritical+0x54>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10c      	bne.n	800949c <vPortExitCritical+0x28>
	__asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	b672      	cpsid	i
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	b662      	cpsie	i
 8009496:	607b      	str	r3, [r7, #4]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <vPortExitCritical+0x54>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	3b01      	subs	r3, #1
 80094a2:	4a09      	ldr	r2, [pc, #36]	; (80094c8 <vPortExitCritical+0x54>)
 80094a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094a6:	4b08      	ldr	r3, [pc, #32]	; (80094c8 <vPortExitCritical+0x54>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d105      	bne.n	80094ba <vPortExitCritical+0x46>
 80094ae:	2300      	movs	r3, #0
 80094b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	f383 8811 	msr	BASEPRI, r3
}
 80094b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20000020 	.word	0x20000020
 80094cc:	00000000 	.word	0x00000000

080094d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094d0:	f3ef 8009 	mrs	r0, PSP
 80094d4:	f3bf 8f6f 	isb	sy
 80094d8:	4b15      	ldr	r3, [pc, #84]	; (8009530 <pxCurrentTCBConst>)
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	f01e 0f10 	tst.w	lr, #16
 80094e0:	bf08      	it	eq
 80094e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80094e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ea:	6010      	str	r0, [r2, #0]
 80094ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80094f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80094f4:	b672      	cpsid	i
 80094f6:	f380 8811 	msr	BASEPRI, r0
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	b662      	cpsie	i
 8009504:	f7ff f9ea 	bl	80088dc <vTaskSwitchContext>
 8009508:	f04f 0000 	mov.w	r0, #0
 800950c:	f380 8811 	msr	BASEPRI, r0
 8009510:	bc09      	pop	{r0, r3}
 8009512:	6819      	ldr	r1, [r3, #0]
 8009514:	6808      	ldr	r0, [r1, #0]
 8009516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	f01e 0f10 	tst.w	lr, #16
 800951e:	bf08      	it	eq
 8009520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009524:	f380 8809 	msr	PSP, r0
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop

08009530 <pxCurrentTCBConst>:
 8009530:	2000575c 	.word	0x2000575c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop

08009538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009556:	f7ff f907 	bl	8008768 <xTaskIncrementTick>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009560:	4b06      	ldr	r3, [pc, #24]	; (800957c <SysTick_Handler+0x44>)
 8009562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	2300      	movs	r3, #0
 800956a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f383 8811 	msr	BASEPRI, r3
}
 8009572:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009580:	b480      	push	{r7}
 8009582:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <vPortSetupTimerInterrupt+0x34>)
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800958a:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <vPortSetupTimerInterrupt+0x38>)
 800958c:	2200      	movs	r2, #0
 800958e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <vPortSetupTimerInterrupt+0x3c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a0a      	ldr	r2, [pc, #40]	; (80095c0 <vPortSetupTimerInterrupt+0x40>)
 8009596:	fba2 2303 	umull	r2, r3, r2, r3
 800959a:	099b      	lsrs	r3, r3, #6
 800959c:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <vPortSetupTimerInterrupt+0x44>)
 800959e:	3b01      	subs	r3, #1
 80095a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095a2:	4b04      	ldr	r3, [pc, #16]	; (80095b4 <vPortSetupTimerInterrupt+0x34>)
 80095a4:	2207      	movs	r2, #7
 80095a6:	601a      	str	r2, [r3, #0]
}
 80095a8:	bf00      	nop
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	e000e010 	.word	0xe000e010
 80095b8:	e000e018 	.word	0xe000e018
 80095bc:	20000000 	.word	0x20000000
 80095c0:	10624dd3 	.word	0x10624dd3
 80095c4:	e000e014 	.word	0xe000e014

080095c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80095d8 <vPortEnableVFP+0x10>
 80095cc:	6801      	ldr	r1, [r0, #0]
 80095ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80095d2:	6001      	str	r1, [r0, #0]
 80095d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095d6:	bf00      	nop
 80095d8:	e000ed88 	.word	0xe000ed88

080095dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095e2:	f3ef 8305 	mrs	r3, IPSR
 80095e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2b0f      	cmp	r3, #15
 80095ec:	d916      	bls.n	800961c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80095ee:	4a19      	ldr	r2, [pc, #100]	; (8009654 <vPortValidateInterruptPriority+0x78>)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80095f8:	4b17      	ldr	r3, [pc, #92]	; (8009658 <vPortValidateInterruptPriority+0x7c>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	7afa      	ldrb	r2, [r7, #11]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d20c      	bcs.n	800961c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009606:	b672      	cpsid	i
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	b662      	cpsie	i
 8009616:	607b      	str	r3, [r7, #4]
}
 8009618:	bf00      	nop
 800961a:	e7fe      	b.n	800961a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <vPortValidateInterruptPriority+0x80>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009624:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <vPortValidateInterruptPriority+0x84>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d90c      	bls.n	8009646 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	b672      	cpsid	i
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	b662      	cpsie	i
 8009640:	603b      	str	r3, [r7, #0]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <vPortValidateInterruptPriority+0x68>
	}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	e000e3f0 	.word	0xe000e3f0
 8009658:	20005888 	.word	0x20005888
 800965c:	e000ed0c 	.word	0xe000ed0c
 8009660:	2000588c 	.word	0x2000588c

08009664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009670:	f7fe ffac 	bl	80085cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009674:	4b5b      	ldr	r3, [pc, #364]	; (80097e4 <pvPortMalloc+0x180>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800967c:	f000 f91a 	bl	80098b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009680:	4b59      	ldr	r3, [pc, #356]	; (80097e8 <pvPortMalloc+0x184>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4013      	ands	r3, r2
 8009688:	2b00      	cmp	r3, #0
 800968a:	f040 8092 	bne.w	80097b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d01f      	beq.n	80096d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009694:	2208      	movs	r2, #8
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4413      	add	r3, r2
 800969a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d016      	beq.n	80096d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f023 0307 	bic.w	r3, r3, #7
 80096ac:	3308      	adds	r3, #8
 80096ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00c      	beq.n	80096d4 <pvPortMalloc+0x70>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	b672      	cpsid	i
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	b662      	cpsie	i
 80096ce:	617b      	str	r3, [r7, #20]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d06b      	beq.n	80097b2 <pvPortMalloc+0x14e>
 80096da:	4b44      	ldr	r3, [pc, #272]	; (80097ec <pvPortMalloc+0x188>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d866      	bhi.n	80097b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096e4:	4b42      	ldr	r3, [pc, #264]	; (80097f0 <pvPortMalloc+0x18c>)
 80096e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096e8:	4b41      	ldr	r3, [pc, #260]	; (80097f0 <pvPortMalloc+0x18c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096ee:	e004      	b.n	80096fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	d903      	bls.n	800970c <pvPortMalloc+0xa8>
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f1      	bne.n	80096f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800970c:	4b35      	ldr	r3, [pc, #212]	; (80097e4 <pvPortMalloc+0x180>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009712:	429a      	cmp	r2, r3
 8009714:	d04d      	beq.n	80097b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2208      	movs	r2, #8
 800971c:	4413      	add	r3, r2
 800971e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	2308      	movs	r3, #8
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	429a      	cmp	r2, r3
 8009736:	d921      	bls.n	800977c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4413      	add	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	f003 0307 	and.w	r3, r3, #7
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <pvPortMalloc+0x100>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	b672      	cpsid	i
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	b662      	cpsie	i
 800975e:	613b      	str	r3, [r7, #16]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009776:	69b8      	ldr	r0, [r7, #24]
 8009778:	f000 f8fe 	bl	8009978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <pvPortMalloc+0x188>)
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	4a19      	ldr	r2, [pc, #100]	; (80097ec <pvPortMalloc+0x188>)
 8009788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800978a:	4b18      	ldr	r3, [pc, #96]	; (80097ec <pvPortMalloc+0x188>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4b19      	ldr	r3, [pc, #100]	; (80097f4 <pvPortMalloc+0x190>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	429a      	cmp	r2, r3
 8009794:	d203      	bcs.n	800979e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009796:	4b15      	ldr	r3, [pc, #84]	; (80097ec <pvPortMalloc+0x188>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <pvPortMalloc+0x190>)
 800979c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	685a      	ldr	r2, [r3, #4]
 80097a2:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <pvPortMalloc+0x184>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	431a      	orrs	r2, r3
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097b2:	f7fe ff19 	bl	80085e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	f003 0307 	and.w	r3, r3, #7
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00c      	beq.n	80097da <pvPortMalloc+0x176>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	b672      	cpsid	i
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	b662      	cpsie	i
 80097d4:	60fb      	str	r3, [r7, #12]
}
 80097d6:	bf00      	nop
 80097d8:	e7fe      	b.n	80097d8 <pvPortMalloc+0x174>
	return pvReturn;
 80097da:	69fb      	ldr	r3, [r7, #28]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3728      	adds	r7, #40	; 0x28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20009498 	.word	0x20009498
 80097e8:	200094a4 	.word	0x200094a4
 80097ec:	2000949c 	.word	0x2000949c
 80097f0:	20009490 	.word	0x20009490
 80097f4:	200094a0 	.word	0x200094a0

080097f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d04c      	beq.n	80098a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800980a:	2308      	movs	r3, #8
 800980c:	425b      	negs	r3, r3
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4413      	add	r3, r2
 8009812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	4b23      	ldr	r3, [pc, #140]	; (80098ac <vPortFree+0xb4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4013      	ands	r3, r2
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10c      	bne.n	8009840 <vPortFree+0x48>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982a:	b672      	cpsid	i
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	b662      	cpsie	i
 800983a:	60fb      	str	r3, [r7, #12]
}
 800983c:	bf00      	nop
 800983e:	e7fe      	b.n	800983e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00c      	beq.n	8009862 <vPortFree+0x6a>
	__asm volatile
 8009848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984c:	b672      	cpsid	i
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	b662      	cpsie	i
 800985c:	60bb      	str	r3, [r7, #8]
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	4b11      	ldr	r3, [pc, #68]	; (80098ac <vPortFree+0xb4>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d019      	beq.n	80098a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d115      	bne.n	80098a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	4b0b      	ldr	r3, [pc, #44]	; (80098ac <vPortFree+0xb4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	43db      	mvns	r3, r3
 8009882:	401a      	ands	r2, r3
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009888:	f7fe fea0 	bl	80085cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <vPortFree+0xb8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4413      	add	r3, r2
 8009896:	4a06      	ldr	r2, [pc, #24]	; (80098b0 <vPortFree+0xb8>)
 8009898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800989a:	6938      	ldr	r0, [r7, #16]
 800989c:	f000 f86c 	bl	8009978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80098a0:	f7fe fea2 	bl	80085e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098a4:	bf00      	nop
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200094a4 	.word	0x200094a4
 80098b0:	2000949c 	.word	0x2000949c

080098b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80098be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098c0:	4b27      	ldr	r3, [pc, #156]	; (8009960 <prvHeapInit+0xac>)
 80098c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f003 0307 	and.w	r3, r3, #7
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00c      	beq.n	80098e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3307      	adds	r3, #7
 80098d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f023 0307 	bic.w	r3, r3, #7
 80098da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	4a1f      	ldr	r2, [pc, #124]	; (8009960 <prvHeapInit+0xac>)
 80098e4:	4413      	add	r3, r2
 80098e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098ec:	4a1d      	ldr	r2, [pc, #116]	; (8009964 <prvHeapInit+0xb0>)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <prvHeapInit+0xb0>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009900:	2208      	movs	r2, #8
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0307 	bic.w	r3, r3, #7
 800990e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4a15      	ldr	r2, [pc, #84]	; (8009968 <prvHeapInit+0xb4>)
 8009914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <prvHeapInit+0xb4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2200      	movs	r2, #0
 800991c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800991e:	4b12      	ldr	r3, [pc, #72]	; (8009968 <prvHeapInit+0xb4>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	1ad2      	subs	r2, r2, r3
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009934:	4b0c      	ldr	r3, [pc, #48]	; (8009968 <prvHeapInit+0xb4>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	4a0a      	ldr	r2, [pc, #40]	; (800996c <prvHeapInit+0xb8>)
 8009942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	4a09      	ldr	r2, [pc, #36]	; (8009970 <prvHeapInit+0xbc>)
 800994a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800994c:	4b09      	ldr	r3, [pc, #36]	; (8009974 <prvHeapInit+0xc0>)
 800994e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009952:	601a      	str	r2, [r3, #0]
}
 8009954:	bf00      	nop
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20005890 	.word	0x20005890
 8009964:	20009490 	.word	0x20009490
 8009968:	20009498 	.word	0x20009498
 800996c:	200094a0 	.word	0x200094a0
 8009970:	2000949c 	.word	0x2000949c
 8009974:	200094a4 	.word	0x200094a4

08009978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009980:	4b28      	ldr	r3, [pc, #160]	; (8009a24 <prvInsertBlockIntoFreeList+0xac>)
 8009982:	60fb      	str	r3, [r7, #12]
 8009984:	e002      	b.n	800998c <prvInsertBlockIntoFreeList+0x14>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	d8f7      	bhi.n	8009986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	4413      	add	r3, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d108      	bne.n	80099ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	441a      	add	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	441a      	add	r2, r3
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d118      	bne.n	8009a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <prvInsertBlockIntoFreeList+0xb0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d00d      	beq.n	80099f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	441a      	add	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	e008      	b.n	8009a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099f6:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <prvInsertBlockIntoFreeList+0xb0>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	e003      	b.n	8009a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d002      	beq.n	8009a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	20009490 	.word	0x20009490
 8009a28:	20009498 	.word	0x20009498

08009a2c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009a36:	f009 ffd7 	bl	80139e8 <sys_timeouts_sleeptime>
 8009a3a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a42:	d10b      	bne.n	8009a5c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009a44:	4813      	ldr	r0, [pc, #76]	; (8009a94 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a46:	f00e ff04 	bl	8018852 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f00e fe76 	bl	8018740 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009a54:	480f      	ldr	r0, [pc, #60]	; (8009a94 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a56:	f00e feed 	bl	8018834 <sys_mutex_lock>
    return;
 8009a5a:	e018      	b.n	8009a8e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d102      	bne.n	8009a68 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009a62:	f009 ff87 	bl	8013974 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009a66:	e7e6      	b.n	8009a36 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009a68:	480a      	ldr	r0, [pc, #40]	; (8009a94 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a6a:	f00e fef2 	bl	8018852 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f00e fe64 	bl	8018740 <sys_arch_mbox_fetch>
 8009a78:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009a7a:	4806      	ldr	r0, [pc, #24]	; (8009a94 <tcpip_timeouts_mbox_fetch+0x68>)
 8009a7c:	f00e feda 	bl	8018834 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a86:	d102      	bne.n	8009a8e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009a88:	f009 ff74 	bl	8013974 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009a8c:	e7d3      	b.n	8009a36 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009a8e:	3710      	adds	r7, #16
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	200094b4 	.word	0x200094b4

08009a98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009aa0:	4810      	ldr	r0, [pc, #64]	; (8009ae4 <tcpip_thread+0x4c>)
 8009aa2:	f00e fec7 	bl	8018834 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009aa6:	4b10      	ldr	r3, [pc, #64]	; (8009ae8 <tcpip_thread+0x50>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009aae:	4b0e      	ldr	r3, [pc, #56]	; (8009ae8 <tcpip_thread+0x50>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a0e      	ldr	r2, [pc, #56]	; (8009aec <tcpip_thread+0x54>)
 8009ab4:	6812      	ldr	r2, [r2, #0]
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009aba:	f107 030c 	add.w	r3, r7, #12
 8009abe:	4619      	mov	r1, r3
 8009ac0:	480b      	ldr	r0, [pc, #44]	; (8009af0 <tcpip_thread+0x58>)
 8009ac2:	f7ff ffb3 	bl	8009a2c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009acc:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <tcpip_thread+0x5c>)
 8009ace:	2291      	movs	r2, #145	; 0x91
 8009ad0:	4909      	ldr	r1, [pc, #36]	; (8009af8 <tcpip_thread+0x60>)
 8009ad2:	480a      	ldr	r0, [pc, #40]	; (8009afc <tcpip_thread+0x64>)
 8009ad4:	f00f f8e8 	bl	8018ca8 <iprintf>
      continue;
 8009ad8:	e003      	b.n	8009ae2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 f80f 	bl	8009b00 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009ae2:	e7ea      	b.n	8009aba <tcpip_thread+0x22>
 8009ae4:	200094b4 	.word	0x200094b4
 8009ae8:	200094a8 	.word	0x200094a8
 8009aec:	200094ac 	.word	0x200094ac
 8009af0:	200094b0 	.word	0x200094b0
 8009af4:	08019c08 	.word	0x08019c08
 8009af8:	08019c38 	.word	0x08019c38
 8009afc:	08019c58 	.word	0x08019c58

08009b00 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d026      	beq.n	8009b5e <tcpip_thread_handle_msg+0x5e>
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	dc2b      	bgt.n	8009b6c <tcpip_thread_handle_msg+0x6c>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <tcpip_thread_handle_msg+0x1e>
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d015      	beq.n	8009b48 <tcpip_thread_handle_msg+0x48>
 8009b1c:	e026      	b.n	8009b6c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6850      	ldr	r0, [r2, #4]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6892      	ldr	r2, [r2, #8]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4798      	blx	r3
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f003 fa6b 	bl	800d014 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009b3e:	6879      	ldr	r1, [r7, #4]
 8009b40:	2009      	movs	r0, #9
 8009b42:	f002 fbb7 	bl	800c2b4 <memp_free>
      break;
 8009b46:	e018      	b.n	8009b7a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6892      	ldr	r2, [r2, #8]
 8009b50:	4610      	mov	r0, r2
 8009b52:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	2008      	movs	r0, #8
 8009b58:	f002 fbac 	bl	800c2b4 <memp_free>
      break;
 8009b5c:	e00d      	b.n	8009b7a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	6892      	ldr	r2, [r2, #8]
 8009b66:	4610      	mov	r0, r2
 8009b68:	4798      	blx	r3
      break;
 8009b6a:	e006      	b.n	8009b7a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009b6c:	4b05      	ldr	r3, [pc, #20]	; (8009b84 <tcpip_thread_handle_msg+0x84>)
 8009b6e:	22cf      	movs	r2, #207	; 0xcf
 8009b70:	4905      	ldr	r1, [pc, #20]	; (8009b88 <tcpip_thread_handle_msg+0x88>)
 8009b72:	4806      	ldr	r0, [pc, #24]	; (8009b8c <tcpip_thread_handle_msg+0x8c>)
 8009b74:	f00f f898 	bl	8018ca8 <iprintf>
      break;
 8009b78:	bf00      	nop
  }
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	08019c08 	.word	0x08019c08
 8009b88:	08019c38 	.word	0x08019c38
 8009b8c:	08019c58 	.word	0x08019c58

08009b90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009b9c:	481a      	ldr	r0, [pc, #104]	; (8009c08 <tcpip_inpkt+0x78>)
 8009b9e:	f00e fe0e 	bl	80187be <sys_mbox_valid>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d105      	bne.n	8009bb4 <tcpip_inpkt+0x24>
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <tcpip_inpkt+0x7c>)
 8009baa:	22fc      	movs	r2, #252	; 0xfc
 8009bac:	4918      	ldr	r1, [pc, #96]	; (8009c10 <tcpip_inpkt+0x80>)
 8009bae:	4819      	ldr	r0, [pc, #100]	; (8009c14 <tcpip_inpkt+0x84>)
 8009bb0:	f00f f87a 	bl	8018ca8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009bb4:	2009      	movs	r0, #9
 8009bb6:	f002 fb07 	bl	800c1c8 <memp_malloc>
 8009bba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009bc6:	e01a      	b.n	8009bfe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009be0:	6979      	ldr	r1, [r7, #20]
 8009be2:	4809      	ldr	r0, [pc, #36]	; (8009c08 <tcpip_inpkt+0x78>)
 8009be4:	f00e fd92 	bl	801870c <sys_mbox_trypost>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d006      	beq.n	8009bfc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009bee:	6979      	ldr	r1, [r7, #20]
 8009bf0:	2009      	movs	r0, #9
 8009bf2:	f002 fb5f 	bl	800c2b4 <memp_free>
    return ERR_MEM;
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfa:	e000      	b.n	8009bfe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009bfc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	200094b0 	.word	0x200094b0
 8009c0c:	08019c08 	.word	0x08019c08
 8009c10:	08019c80 	.word	0x08019c80
 8009c14:	08019c58 	.word	0x08019c58

08009c18 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009c28:	f003 0318 	and.w	r3, r3, #24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d006      	beq.n	8009c3e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009c30:	4a08      	ldr	r2, [pc, #32]	; (8009c54 <tcpip_input+0x3c>)
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f7ff ffab 	bl	8009b90 <tcpip_inpkt>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	e005      	b.n	8009c4a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009c3e:	4a06      	ldr	r2, [pc, #24]	; (8009c58 <tcpip_input+0x40>)
 8009c40:	6839      	ldr	r1, [r7, #0]
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7ff ffa4 	bl	8009b90 <tcpip_inpkt>
 8009c48:	4603      	mov	r3, r0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	0801851d 	.word	0x0801851d
 8009c58:	080173e9 	.word	0x080173e9

08009c5c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b084      	sub	sp, #16
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c66:	4819      	ldr	r0, [pc, #100]	; (8009ccc <tcpip_try_callback+0x70>)
 8009c68:	f00e fda9 	bl	80187be <sys_mbox_valid>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d106      	bne.n	8009c80 <tcpip_try_callback+0x24>
 8009c72:	4b17      	ldr	r3, [pc, #92]	; (8009cd0 <tcpip_try_callback+0x74>)
 8009c74:	f240 125d 	movw	r2, #349	; 0x15d
 8009c78:	4916      	ldr	r1, [pc, #88]	; (8009cd4 <tcpip_try_callback+0x78>)
 8009c7a:	4817      	ldr	r0, [pc, #92]	; (8009cd8 <tcpip_try_callback+0x7c>)
 8009c7c:	f00f f814 	bl	8018ca8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009c80:	2008      	movs	r0, #8
 8009c82:	f002 faa1 	bl	800c1c8 <memp_malloc>
 8009c86:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c92:	e017      	b.n	8009cc4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2201      	movs	r2, #1
 8009c98:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	683a      	ldr	r2, [r7, #0]
 8009ca4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009ca6:	68f9      	ldr	r1, [r7, #12]
 8009ca8:	4808      	ldr	r0, [pc, #32]	; (8009ccc <tcpip_try_callback+0x70>)
 8009caa:	f00e fd2f 	bl	801870c <sys_mbox_trypost>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d006      	beq.n	8009cc2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009cb4:	68f9      	ldr	r1, [r7, #12]
 8009cb6:	2008      	movs	r0, #8
 8009cb8:	f002 fafc 	bl	800c2b4 <memp_free>
    return ERR_MEM;
 8009cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8009cc0:	e000      	b.n	8009cc4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	200094b0 	.word	0x200094b0
 8009cd0:	08019c08 	.word	0x08019c08
 8009cd4:	08019c80 	.word	0x08019c80
 8009cd8:	08019c58 	.word	0x08019c58

08009cdc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b084      	sub	sp, #16
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009ce6:	f001 fdc5 	bl	800b874 <lwip_init>

  tcpip_init_done = initfunc;
 8009cea:	4a17      	ldr	r2, [pc, #92]	; (8009d48 <tcpip_init+0x6c>)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009cf0:	4a16      	ldr	r2, [pc, #88]	; (8009d4c <tcpip_init+0x70>)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009cf6:	2106      	movs	r1, #6
 8009cf8:	4815      	ldr	r0, [pc, #84]	; (8009d50 <tcpip_init+0x74>)
 8009cfa:	f00e fce5 	bl	80186c8 <sys_mbox_new>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d006      	beq.n	8009d12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009d04:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <tcpip_init+0x78>)
 8009d06:	f240 2261 	movw	r2, #609	; 0x261
 8009d0a:	4913      	ldr	r1, [pc, #76]	; (8009d58 <tcpip_init+0x7c>)
 8009d0c:	4813      	ldr	r0, [pc, #76]	; (8009d5c <tcpip_init+0x80>)
 8009d0e:	f00e ffcb 	bl	8018ca8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009d12:	4813      	ldr	r0, [pc, #76]	; (8009d60 <tcpip_init+0x84>)
 8009d14:	f00e fd72 	bl	80187fc <sys_mutex_new>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <tcpip_init+0x78>)
 8009d20:	f240 2265 	movw	r2, #613	; 0x265
 8009d24:	490f      	ldr	r1, [pc, #60]	; (8009d64 <tcpip_init+0x88>)
 8009d26:	480d      	ldr	r0, [pc, #52]	; (8009d5c <tcpip_init+0x80>)
 8009d28:	f00e ffbe 	bl	8018ca8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d34:	2200      	movs	r2, #0
 8009d36:	490c      	ldr	r1, [pc, #48]	; (8009d68 <tcpip_init+0x8c>)
 8009d38:	480c      	ldr	r0, [pc, #48]	; (8009d6c <tcpip_init+0x90>)
 8009d3a:	f00e fd97 	bl	801886c <sys_thread_new>
}
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	200094a8 	.word	0x200094a8
 8009d4c:	200094ac 	.word	0x200094ac
 8009d50:	200094b0 	.word	0x200094b0
 8009d54:	08019c08 	.word	0x08019c08
 8009d58:	08019c90 	.word	0x08019c90
 8009d5c:	08019c58 	.word	0x08019c58
 8009d60:	200094b4 	.word	0x200094b4
 8009d64:	08019cb4 	.word	0x08019cb4
 8009d68:	08009a99 	.word	0x08009a99
 8009d6c:	08019cd8 	.word	0x08019cd8

08009d70 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	88db      	ldrh	r3, [r3, #6]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	88db      	ldrh	r3, [r3, #6]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d105      	bne.n	8009d98 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	88db      	ldrh	r3, [r3, #6]
 8009d90:	3301      	adds	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	88db      	ldrh	r3, [r3, #6]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	78fa      	ldrb	r2, [r7, #3]
 8009dc0:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	881b      	ldrh	r3, [r3, #0]
 8009dd2:	2bff      	cmp	r3, #255	; 0xff
 8009dd4:	d902      	bls.n	8009ddc <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	801a      	strh	r2, [r3, #0]
  }
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8009e14:	887b      	ldrh	r3, [r7, #2]
 8009e16:	2bff      	cmp	r3, #255	; 0xff
 8009e18:	d905      	bls.n	8009e26 <mqtt_ringbuf_advance_get_idx+0x1e>
 8009e1a:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8009e1c:	22cb      	movs	r2, #203	; 0xcb
 8009e1e:	490e      	ldr	r1, [pc, #56]	; (8009e58 <mqtt_ringbuf_advance_get_idx+0x50>)
 8009e20:	480e      	ldr	r0, [pc, #56]	; (8009e5c <mqtt_ringbuf_advance_get_idx+0x54>)
 8009e22:	f00e ff41 	bl	8018ca8 <iprintf>

  rb->get += len;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	885a      	ldrh	r2, [r3, #2]
 8009e2a:	887b      	ldrh	r3, [r7, #2]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	885b      	ldrh	r3, [r3, #2]
 8009e38:	2bff      	cmp	r3, #255	; 0xff
 8009e3a:	d906      	bls.n	8009e4a <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	885b      	ldrh	r3, [r3, #2]
 8009e40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	805a      	strh	r2, [r3, #2]
  }
}
 8009e4a:	bf00      	nop
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	08019ce8 	.word	0x08019ce8
 8009e58:	08019d20 	.word	0x08019d20
 8009e5c:	08019d60 	.word	0x08019d60

08009e60 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e7c:	d303      	bcc.n	8009e86 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009e84:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	b29b      	uxth	r3, r3
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr
	...

08009e98 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f7ff ffda 	bl	8009e60 <mqtt_ringbuf_len>
 8009eac:	4603      	mov	r3, r0
 8009eae:	461a      	mov	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	885b      	ldrh	r3, [r3, #2]
 8009eb4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	da04      	bge.n	8009ec6 <mqtt_output_send+0x2e>
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff ffcf 	bl	8009e60 <mqtt_ringbuf_len>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	e004      	b.n	8009ed0 <mqtt_output_send+0x38>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	885b      	ldrh	r3, [r3, #2]
 8009eca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ed8:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d105      	bne.n	8009eec <mqtt_output_send+0x54>
 8009ee0:	4b44      	ldr	r3, [pc, #272]	; (8009ff4 <mqtt_output_send+0x15c>)
 8009ee2:	22f0      	movs	r2, #240	; 0xf0
 8009ee4:	4944      	ldr	r1, [pc, #272]	; (8009ff8 <mqtt_output_send+0x160>)
 8009ee6:	4845      	ldr	r0, [pc, #276]	; (8009ffc <mqtt_output_send+0x164>)
 8009ee8:	f00e fede 	bl	8018ca8 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8009eec:	89bb      	ldrh	r3, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d07c      	beq.n	8009fec <mqtt_output_send+0x154>
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d079      	beq.n	8009fec <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8009ef8:	89ba      	ldrh	r2, [r7, #12]
 8009efa:	897b      	ldrh	r3, [r7, #10]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d90d      	bls.n	8009f1c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8009f00:	897b      	ldrh	r3, [r7, #10]
 8009f02:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7ff ffab 	bl	8009e60 <mqtt_ringbuf_len>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	897b      	ldrh	r3, [r7, #10]
 8009f10:	4293      	cmp	r3, r2
 8009f12:	bf34      	ite	cc
 8009f14:	2301      	movcc	r3, #1
 8009f16:	2300      	movcs	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f7ff ff63 	bl	8009de8 <mqtt_ringbuf_get_ptr>
 8009f22:	4601      	mov	r1, r0
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <mqtt_output_send+0x96>
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e000      	b.n	8009f30 <mqtt_output_send+0x98>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	89ba      	ldrh	r2, [r7, #12]
 8009f32:	6838      	ldr	r0, [r7, #0]
 8009f34:	f007 fe7c 	bl	8011c30 <tcp_write>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8009f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d146      	bne.n	8009fd2 <mqtt_output_send+0x13a>
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d043      	beq.n	8009fd2 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009f4a:	89bb      	ldrh	r3, [r7, #12]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff ff5a 	bl	8009e08 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f5a:	461c      	mov	r4, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f7ff ff7f 	bl	8009e60 <mqtt_ringbuf_len>
 8009f62:	4603      	mov	r3, r0
 8009f64:	461a      	mov	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	885b      	ldrh	r3, [r3, #2]
 8009f6a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	da04      	bge.n	8009f7c <mqtt_output_send+0xe4>
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff ff74 	bl	8009e60 <mqtt_ringbuf_len>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	e003      	b.n	8009f84 <mqtt_output_send+0xec>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	885b      	ldrh	r3, [r3, #2]
 8009f80:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	dd03      	ble.n	8009f90 <mqtt_output_send+0xf8>
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f8e:	e014      	b.n	8009fba <mqtt_output_send+0x122>
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff65 	bl	8009e60 <mqtt_ringbuf_len>
 8009f96:	4603      	mov	r3, r0
 8009f98:	461a      	mov	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	885b      	ldrh	r3, [r3, #2]
 8009f9e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	da04      	bge.n	8009fb0 <mqtt_output_send+0x118>
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f7ff ff5a 	bl	8009e60 <mqtt_ringbuf_len>
 8009fac:	4603      	mov	r3, r0
 8009fae:	e004      	b.n	8009fba <mqtt_output_send+0x122>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	885b      	ldrh	r3, [r3, #2]
 8009fb4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff ff13 	bl	8009de8 <mqtt_ringbuf_get_ptr>
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	89ba      	ldrh	r2, [r7, #12]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	6838      	ldr	r0, [r7, #0]
 8009fca:	f007 fe31 	bl	8011c30 <tcp_write>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8009fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8009fda:	89bb      	ldrh	r3, [r7, #12]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ff12 	bl	8009e08 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8009fe4:	6838      	ldr	r0, [r7, #0]
 8009fe6:	f008 fc0d 	bl	8012804 <tcp_output>
 8009fea:	e000      	b.n	8009fee <mqtt_output_send+0x156>
    return;
 8009fec:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}
 8009ff4:	08019ce8 	.word	0x08019ce8
 8009ff8:	08019d88 	.word	0x08019d88
 8009ffc:	08019d60 	.word	0x08019d60

0800a000 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <mqtt_create_request+0x28>
 800a01a:	4b19      	ldr	r3, [pc, #100]	; (800a080 <mqtt_create_request+0x80>)
 800a01c:	f240 1223 	movw	r2, #291	; 0x123
 800a020:	4918      	ldr	r1, [pc, #96]	; (800a084 <mqtt_create_request+0x84>)
 800a022:	4819      	ldr	r0, [pc, #100]	; (800a088 <mqtt_create_request+0x88>)
 800a024:	f00e fe40 	bl	8018ca8 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a028:	2300      	movs	r3, #0
 800a02a:	74fb      	strb	r3, [r7, #19]
 800a02c:	e01f      	b.n	800a06e <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 800a02e:	7cfb      	ldrb	r3, [r7, #19]
 800a030:	011b      	lsls	r3, r3, #4
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	7cfb      	ldrb	r3, [r7, #19]
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	68f9      	ldr	r1, [r7, #12]
 800a03e:	440b      	add	r3, r1
 800a040:	429a      	cmp	r2, r3
 800a042:	d111      	bne.n	800a068 <mqtt_create_request+0x68>
      r = &r_objs[n];
 800a044:	7cfb      	ldrb	r3, [r7, #19]
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	2200      	movs	r2, #0
 800a052:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	88fa      	ldrh	r2, [r7, #6]
 800a064:	819a      	strh	r2, [r3, #12]
      break;
 800a066:	e006      	b.n	800a076 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 800a068:	7cfb      	ldrb	r3, [r7, #19]
 800a06a:	3301      	adds	r3, #1
 800a06c:	74fb      	strb	r3, [r7, #19]
 800a06e:	7cfb      	ldrb	r3, [r7, #19]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8db      	bhi.n	800a02e <mqtt_create_request+0x2e>
    }
  }
  return r;
 800a076:	697b      	ldr	r3, [r7, #20]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08019ce8 	.word	0x08019ce8
 800a084:	08019da8 	.word	0x08019da8
 800a088:	08019d60 	.word	0x08019d60

0800a08c <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d106      	bne.n	800a0b2 <mqtt_append_request+0x26>
 800a0a4:	4b1b      	ldr	r3, [pc, #108]	; (800a114 <mqtt_append_request+0x88>)
 800a0a6:	f240 123f 	movw	r2, #319	; 0x13f
 800a0aa:	491b      	ldr	r1, [pc, #108]	; (800a118 <mqtt_append_request+0x8c>)
 800a0ac:	481b      	ldr	r0, [pc, #108]	; (800a11c <mqtt_append_request+0x90>)
 800a0ae:	f00e fdfb 	bl	8018ca8 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e00a      	b.n	800a0d0 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	89da      	ldrh	r2, [r3, #14]
 800a0be:	8a7b      	ldrh	r3, [r7, #18]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	b29b      	uxth	r3, r3
 800a0c4:	827b      	strh	r3, [r7, #18]
    head = iter;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1f1      	bne.n	800a0ba <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 800a0d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0da:	2b1e      	cmp	r3, #30
 800a0dc:	dd06      	ble.n	800a0ec <mqtt_append_request+0x60>
 800a0de:	4b0d      	ldr	r3, [pc, #52]	; (800a114 <mqtt_append_request+0x88>)
 800a0e0:	f240 1247 	movw	r2, #327	; 0x147
 800a0e4:	490e      	ldr	r1, [pc, #56]	; (800a120 <mqtt_append_request+0x94>)
 800a0e6:	480d      	ldr	r0, [pc, #52]	; (800a11c <mqtt_append_request+0x90>)
 800a0e8:	f00e fdde 	bl	8018ca8 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 800a0ec:	8a7b      	ldrh	r3, [r7, #18]
 800a0ee:	f1c3 031e 	rsb	r3, r3, #30
 800a0f2:	b29a      	uxth	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d103      	bne.n	800a106 <mqtt_append_request+0x7a>
    *tail = r;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 800a104:	e002      	b.n	800a10c <mqtt_append_request+0x80>
    head->next = r;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	601a      	str	r2, [r3, #0]
}
 800a10c:	bf00      	nop
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	08019ce8 	.word	0x08019ce8
 800a118:	08019dcc 	.word	0x08019dcc
 800a11c:	08019d60 	.word	0x08019d60
 800a120:	08019df0 	.word	0x08019df0

0800a124 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <mqtt_delete_request+0x14>
    r->next = r;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	601a      	str	r2, [r3, #0]
  }
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 800a150:	2300      	movs	r3, #0
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	2300      	movs	r3, #0
 800a156:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d106      	bne.n	800a16c <mqtt_take_request+0x28>
 800a15e:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <mqtt_take_request+0x98>)
 800a160:	f240 1267 	movw	r2, #359	; 0x167
 800a164:	491e      	ldr	r1, [pc, #120]	; (800a1e0 <mqtt_take_request+0x9c>)
 800a166:	481f      	ldr	r0, [pc, #124]	; (800a1e4 <mqtt_take_request+0xa0>)
 800a168:	f00e fd9e 	bl	8018ca8 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60fb      	str	r3, [r7, #12]
 800a172:	e009      	b.n	800a188 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	899b      	ldrh	r3, [r3, #12]
 800a178:	887a      	ldrh	r2, [r7, #2]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d008      	beq.n	800a190 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1f2      	bne.n	800a174 <mqtt_take_request+0x30>
 800a18e:	e000      	b.n	800a192 <mqtt_take_request+0x4e>
      break;
 800a190:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01c      	beq.n	800a1d2 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d104      	bne.n	800a1a8 <mqtt_take_request+0x64>
      *tail = iter->next;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	e003      	b.n	800a1b0 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d009      	beq.n	800a1cc <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	89d9      	ldrh	r1, [r3, #14]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	89da      	ldrh	r2, [r3, #14]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	b292      	uxth	r2, r2
 800a1ca:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	601a      	str	r2, [r3, #0]
  }
  return iter;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	08019ce8 	.word	0x08019ce8
 800a1e0:	08019e28 	.word	0x08019e28
 800a1e4:	08019d60 	.word	0x08019d60

0800a1e8 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <mqtt_request_time_elapsed+0x20>
 800a1fa:	4b21      	ldr	r3, [pc, #132]	; (800a280 <mqtt_request_time_elapsed+0x98>)
 800a1fc:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 800a200:	4920      	ldr	r1, [pc, #128]	; (800a284 <mqtt_request_time_elapsed+0x9c>)
 800a202:	4821      	ldr	r0, [pc, #132]	; (800a288 <mqtt_request_time_elapsed+0xa0>)
 800a204:	f00e fd50 	bl	8018ca8 <iprintf>
  r = *tail;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800a20e:	e02c      	b.n	800a26a <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	b29a      	uxth	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	89db      	ldrh	r3, [r3, #14]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d31c      	bcc.n	800a256 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	89db      	ldrh	r3, [r3, #14]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681a      	ldr	r2, [r3, #0]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	6892      	ldr	r2, [r2, #8]
 800a240:	f06f 0102 	mvn.w	r1, #2
 800a244:	4610      	mov	r0, r2
 800a246:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f7ff ff6b 	bl	800a124 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e009      	b.n	800a26a <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	89da      	ldrh	r2, [r3, #14]
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	b29a      	uxth	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	81da      	strh	r2, [r3, #14]
      t = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 800a26a:	78fb      	ldrb	r3, [r7, #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d002      	beq.n	800a276 <mqtt_request_time_elapsed+0x8e>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1cc      	bne.n	800a210 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 800a276:	bf00      	nop
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	08019ce8 	.word	0x08019ce8
 800a284:	08019e48 	.word	0x08019e48
 800a288:	08019d60 	.word	0x08019d60

0800a28c <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d106      	bne.n	800a2a8 <mqtt_clear_requests+0x1c>
 800a29a:	4b0e      	ldr	r3, [pc, #56]	; (800a2d4 <mqtt_clear_requests+0x48>)
 800a29c:	f240 12a7 	movw	r2, #423	; 0x1a7
 800a2a0:	490d      	ldr	r1, [pc, #52]	; (800a2d8 <mqtt_clear_requests+0x4c>)
 800a2a2:	480e      	ldr	r0, [pc, #56]	; (800a2dc <mqtt_clear_requests+0x50>)
 800a2a4:	f00e fd00 	bl	8018ca8 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e007      	b.n	800a2c0 <mqtt_clear_requests+0x34>
    next = iter->next;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff ff34 	bl	800a124 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1f4      	bne.n	800a2b0 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
}
 800a2cc:	bf00      	nop
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	08019ce8 	.word	0x08019ce8
 800a2d8:	08019e70 	.word	0x08019e70
 800a2dc:	08019d60 	.word	0x08019d60

0800a2e0 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <mqtt_init_requests+0x1e>
 800a2f0:	4b0f      	ldr	r3, [pc, #60]	; (800a330 <mqtt_init_requests+0x50>)
 800a2f2:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a2f6:	490f      	ldr	r1, [pc, #60]	; (800a334 <mqtt_init_requests+0x54>)
 800a2f8:	480f      	ldr	r0, [pc, #60]	; (800a338 <mqtt_init_requests+0x58>)
 800a2fa:	f00e fcd5 	bl	8018ca8 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]
 800a302:	e00b      	b.n	800a31c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	011a      	lsls	r2, r3, #4
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	011b      	lsls	r3, r3, #4
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	440b      	add	r3, r1
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	440a      	add	r2, r1
 800a314:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	3301      	adds	r3, #1
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	683a      	ldr	r2, [r7, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d8ef      	bhi.n	800a304 <mqtt_init_requests+0x24>
  }
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	08019ce8 	.word	0x08019ce8
 800a334:	08019e94 	.word	0x08019e94
 800a338:	08019d60 	.word	0x08019d60

0800a33c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	4619      	mov	r1, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff fd2b 	bl	8009da8 <mqtt_ringbuf_put>
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 800a366:	887b      	ldrh	r3, [r7, #2]
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fd19 	bl	8009da8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f7ff fd13 	bl	8009da8 <mqtt_ringbuf_put>
}
 800a382:	bf00      	nop
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b086      	sub	sp, #24
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	4613      	mov	r3, r2
 800a396:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 800a398:	2300      	movs	r3, #0
 800a39a:	82fb      	strh	r3, [r7, #22]
 800a39c:	e00a      	b.n	800a3b4 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800a39e:	8afb      	ldrh	r3, [r7, #22]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f7ff fcfd 	bl	8009da8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a3ae:	8afb      	ldrh	r3, [r7, #22]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	82fb      	strh	r3, [r7, #22]
 800a3b4:	8afa      	ldrh	r2, [r7, #22]
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d3f0      	bcc.n	800a39e <mqtt_output_append_buf+0x14>
  }
}
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b086      	sub	sp, #24
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 800a3d4:	88fb      	ldrh	r3, [r7, #6]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	4619      	mov	r1, r3
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	f7ff fce2 	bl	8009da8 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 800a3e4:	88fb      	ldrh	r3, [r7, #6]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f7ff fcdc 	bl	8009da8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	82fb      	strh	r3, [r7, #22]
 800a3f4:	e00a      	b.n	800a40c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 800a3f6:	8afb      	ldrh	r3, [r7, #22]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	4619      	mov	r1, r3
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff fcd1 	bl	8009da8 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800a406:	8afb      	ldrh	r3, [r7, #22]
 800a408:	3301      	adds	r3, #1
 800a40a:	82fb      	strh	r3, [r7, #22]
 800a40c:	8afa      	ldrh	r2, [r7, #22]
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	429a      	cmp	r2, r3
 800a412:	d3f0      	bcc.n	800a3f6 <mqtt_output_append_string+0x30>
  }
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	3718      	adds	r7, #24
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	461a      	mov	r2, r3
 800a42c:	4603      	mov	r3, r0
 800a42e:	70fb      	strb	r3, [r7, #3]
 800a430:	460b      	mov	r3, r1
 800a432:	70bb      	strb	r3, [r7, #2]
 800a434:	4613      	mov	r3, r2
 800a436:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	b25a      	sxtb	r2, r3
 800a43e:	78bb      	ldrb	r3, [r7, #2]
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	b25b      	sxtb	r3, r3
 800a444:	f003 0308 	and.w	r3, r3, #8
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	b25a      	sxtb	r2, r3
 800a44e:	787b      	ldrb	r3, [r7, #1]
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	b25b      	sxtb	r3, r3
 800a454:	f003 0306 	and.w	r3, r3, #6
 800a458:	b25b      	sxtb	r3, r3
 800a45a:	4313      	orrs	r3, r2
 800a45c:	b25a      	sxtb	r2, r3
 800a45e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	b25b      	sxtb	r3, r3
 800a468:	4313      	orrs	r3, r2
 800a46a:	b25b      	sxtb	r3, r3
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ff63 	bl	800a33c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 800a476:	8abb      	ldrh	r3, [r7, #20]
 800a478:	b25b      	sxtb	r3, r3
 800a47a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a47e:	b25b      	sxtb	r3, r3
 800a480:	8aba      	ldrh	r2, [r7, #20]
 800a482:	2a7f      	cmp	r2, #127	; 0x7f
 800a484:	d902      	bls.n	800a48c <mqtt_output_append_fixed_header+0x6e>
 800a486:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800a48a:	e000      	b.n	800a48e <mqtt_output_append_fixed_header+0x70>
 800a48c:	2200      	movs	r2, #0
 800a48e:	4313      	orrs	r3, r2
 800a490:	b25b      	sxtb	r3, r3
 800a492:	b2db      	uxtb	r3, r3
 800a494:	4619      	mov	r1, r3
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7ff ff50 	bl	800a33c <mqtt_output_append_u8>
    r_length >>= 7;
 800a49c:	8abb      	ldrh	r3, [r7, #20]
 800a49e:	09db      	lsrs	r3, r3, #7
 800a4a0:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 800a4a2:	8abb      	ldrh	r3, [r7, #20]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1e6      	bne.n	800a476 <mqtt_output_append_fixed_header+0x58>
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
	...

0800a4b4 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 800a4b4:	b590      	push	{r4, r7, lr}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <mqtt_output_check_space+0x26>
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <mqtt_output_check_space+0x58>)
 800a4ce:	f240 2207 	movw	r2, #519	; 0x207
 800a4d2:	490f      	ldr	r1, [pc, #60]	; (800a510 <mqtt_output_check_space+0x5c>)
 800a4d4:	480f      	ldr	r0, [pc, #60]	; (800a514 <mqtt_output_check_space+0x60>)
 800a4d6:	f00e fbe7 	bl	8018ca8 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800a4da:	89fb      	ldrh	r3, [r7, #14]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 800a4e0:	887b      	ldrh	r3, [r7, #2]
 800a4e2:	09db      	lsrs	r3, r3, #7
 800a4e4:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 800a4e6:	887b      	ldrh	r3, [r7, #2]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1f6      	bne.n	800a4da <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800a4ec:	89fc      	ldrh	r4, [r7, #14]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fcb6 	bl	8009e60 <mqtt_ringbuf_len>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800a4fa:	429c      	cmp	r4, r3
 800a4fc:	bfd4      	ite	le
 800a4fe:	2301      	movle	r3, #1
 800a500:	2300      	movgt	r3, #0
 800a502:	b2db      	uxtb	r3, r3
}
 800a504:	4618      	mov	r0, r3
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd90      	pop	{r4, r7, pc}
 800a50c:	08019ce8 	.word	0x08019ce8
 800a510:	08019eb8 	.word	0x08019eb8
 800a514:	08019d60 	.word	0x08019d60

0800a518 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d106      	bne.n	800a538 <mqtt_close+0x20>
 800a52a:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <mqtt_close+0xb0>)
 800a52c:	f240 221b 	movw	r2, #539	; 0x21b
 800a530:	4926      	ldr	r1, [pc, #152]	; (800a5cc <mqtt_close+0xb4>)
 800a532:	4827      	ldr	r0, [pc, #156]	; (800a5d0 <mqtt_close+0xb8>)
 800a534:	f00e fbb8 	bl	8018ca8 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d024      	beq.n	800a58a <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f004 fc5a 	bl	800ee00 <tcp_recv>
    altcp_err(client->conn,  NULL);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f004 fc98 	bl	800ee88 <tcp_err>
    altcp_sent(client->conn, NULL);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f004 fc70 	bl	800ee44 <tcp_sent>
    res = altcp_close(client->conn);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	4618      	mov	r0, r3
 800a56a:	f003 fa71 	bl	800da50 <tcp_close>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 800a572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d004      	beq.n	800a584 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	4618      	mov	r0, r3
 800a580:	f003 fb50 	bl	800dc24 <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3318      	adds	r3, #24
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fe7c 	bl	800a28c <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	480f      	ldr	r0, [pc, #60]	; (800a5d4 <mqtt_close+0xbc>)
 800a598:	f009 f9b2 	bl	8013900 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	7a9b      	ldrb	r3, [r3, #10]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00d      	beq.n	800a5c0 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d006      	beq.n	800a5c0 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6911      	ldr	r1, [r2, #16]
 800a5ba:	887a      	ldrh	r2, [r7, #2]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	4798      	blx	r3
    }
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	08019ce8 	.word	0x08019ce8
 800a5cc:	08019edc 	.word	0x08019edc
 800a5d0:	08019d60 	.word	0x08019d60
 800a5d4:	0800a5d9 	.word	0x0800a5d9

0800a5d8 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af02      	add	r7, sp, #8
 800a5de:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d106      	bne.n	800a5fc <mqtt_cyclic_timer+0x24>
 800a5ee:	4b42      	ldr	r3, [pc, #264]	; (800a6f8 <mqtt_cyclic_timer+0x120>)
 800a5f0:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a5f4:	4941      	ldr	r1, [pc, #260]	; (800a6fc <mqtt_cyclic_timer+0x124>)
 800a5f6:	4842      	ldr	r0, [pc, #264]	; (800a700 <mqtt_cyclic_timer+0x128>)
 800a5f8:	f00e fb56 	bl	8018ca8 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	7a9b      	ldrb	r3, [r3, #10]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d115      	bne.n	800a630 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	2b63      	cmp	r3, #99	; 0x63
 800a61e:	dd5e      	ble.n	800a6de <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a620:	f240 1101 	movw	r1, #257	; 0x101
 800a624:	68b8      	ldr	r0, [r7, #8]
 800a626:	f7ff ff77 	bl	800a518 <mqtt_close>
      restart_timer = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
 800a62e:	e056      	b.n	800a6de <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	7a9b      	ldrb	r3, [r3, #10]
 800a634:	2b03      	cmp	r3, #3
 800a636:	d150      	bne.n	800a6da <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	3318      	adds	r3, #24
 800a63c:	2105      	movs	r1, #5
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff fdd2 	bl	800a1e8 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	885b      	ldrh	r3, [r3, #2]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d048      	beq.n	800a6de <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	889b      	ldrh	r3, [r3, #4]
 800a650:	3301      	adds	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	889b      	ldrh	r3, [r3, #4]
 800a65c:	461a      	mov	r2, r3
 800a65e:	4613      	mov	r3, r2
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	441a      	add	r2, r3
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	4619      	mov	r1, r3
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	885b      	ldrh	r3, [r3, #2]
 800a66e:	085b      	lsrs	r3, r3, #1
 800a670:	b29b      	uxth	r3, r3
 800a672:	440b      	add	r3, r1
 800a674:	429a      	cmp	r2, r3
 800a676:	dd06      	ble.n	800a686 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 800a678:	f240 1101 	movw	r1, #257	; 0x101
 800a67c:	68b8      	ldr	r0, [r7, #8]
 800a67e:	f7ff ff4b 	bl	800a518 <mqtt_close>
        restart_timer = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	68ba      	ldr	r2, [r7, #8]
 800a694:	8852      	ldrh	r2, [r2, #2]
 800a696:	4293      	cmp	r3, r2
 800a698:	db18      	blt.n	800a6cc <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	33ec      	adds	r3, #236	; 0xec
 800a69e:	2100      	movs	r1, #0
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff ff07 	bl	800a4b4 <mqtt_output_check_space>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d018      	beq.n	800a6de <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2200      	movs	r2, #0
 800a6be:	210c      	movs	r1, #12
 800a6c0:	f7ff fead 	bl	800a41e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	801a      	strh	r2, [r3, #0]
 800a6ca:	e008      	b.n	800a6de <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	881b      	ldrh	r3, [r3, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	801a      	strh	r2, [r3, #0]
 800a6d8:	e001      	b.n	800a6de <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d005      	beq.n	800a6f0 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	4907      	ldr	r1, [pc, #28]	; (800a704 <mqtt_cyclic_timer+0x12c>)
 800a6e8:	f241 3088 	movw	r0, #5000	; 0x1388
 800a6ec:	f009 f8e2 	bl	80138b4 <sys_timeout>
  }
}
 800a6f0:	bf00      	nop
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	08019ce8 	.word	0x08019ce8
 800a6fc:	08019ef8 	.word	0x08019ef8
 800a700:	08019d60 	.word	0x08019d60
 800a704:	0800a5d9 	.word	0x0800a5d9

0800a708 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	4608      	mov	r0, r1
 800a712:	4611      	mov	r1, r2
 800a714:	461a      	mov	r2, r3
 800a716:	4603      	mov	r3, r0
 800a718:	70fb      	strb	r3, [r7, #3]
 800a71a:	460b      	mov	r3, r1
 800a71c:	803b      	strh	r3, [r7, #0]
 800a71e:	4613      	mov	r3, r2
 800a720:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	33ec      	adds	r3, #236	; 0xec
 800a72a:	2102      	movs	r1, #2
 800a72c:	4618      	mov	r0, r3
 800a72e:	f7ff fec1 	bl	800a4b4 <mqtt_output_check_space>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01c      	beq.n	800a772 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a73e:	78bb      	ldrb	r3, [r7, #2]
 800a740:	78f9      	ldrb	r1, [r7, #3]
 800a742:	2202      	movs	r2, #2
 800a744:	9201      	str	r2, [sp, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	9200      	str	r2, [sp, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f7ff fe67 	bl	800a41e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	33ec      	adds	r3, #236	; 0xec
 800a754:	883a      	ldrh	r2, [r7, #0]
 800a756:	4611      	mov	r1, r2
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff fdfe 	bl	800a35a <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7ff fb94 	bl	8009e98 <mqtt_output_send>
 800a770:	e001      	b.n	800a776 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 800a772:	23ff      	movs	r3, #255	; 0xff
 800a774:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 800a776:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00c      	beq.n	800a7b0 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	6890      	ldr	r0, [r2, #8]
 800a79e:	78fa      	ldrb	r2, [r7, #3]
 800a7a0:	2a02      	cmp	r2, #2
 800a7a2:	d801      	bhi.n	800a7a8 <mqtt_incomming_suback+0x26>
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	e001      	b.n	800a7ac <mqtt_incomming_suback+0x2a>
 800a7a8:	f06f 020c 	mvn.w	r2, #12
 800a7ac:	4611      	mov	r1, r2
 800a7ae:	4798      	blx	r3
  }
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 800a7b8:	b590      	push	{r4, r7, lr}
 800a7ba:	b08f      	sub	sp, #60	; 0x3c
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	607b      	str	r3, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	72fb      	strb	r3, [r7, #11]
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800a7da:	7afb      	ldrb	r3, [r7, #11]
 800a7dc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800a7e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a7e8:	091b      	lsrs	r3, r3, #4
 800a7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f6:	2b7f      	cmp	r3, #127	; 0x7f
 800a7f8:	d906      	bls.n	800a808 <mqtt_message_received+0x50>
 800a7fa:	4b97      	ldr	r3, [pc, #604]	; (800aa58 <mqtt_message_received+0x2a0>)
 800a7fc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a800:	4996      	ldr	r1, [pc, #600]	; (800aa5c <mqtt_message_received+0x2a4>)
 800a802:	4897      	ldr	r0, [pc, #604]	; (800aa60 <mqtt_message_received+0x2a8>)
 800a804:	f00e fa50 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80e:	429a      	cmp	r2, r3
 800a810:	d906      	bls.n	800a820 <mqtt_message_received+0x68>
 800a812:	4b91      	ldr	r3, [pc, #580]	; (800aa58 <mqtt_message_received+0x2a0>)
 800a814:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 800a818:	4992      	ldr	r1, [pc, #584]	; (800aa64 <mqtt_message_received+0x2ac>)
 800a81a:	4891      	ldr	r0, [pc, #580]	; (800aa60 <mqtt_message_received+0x2a8>)
 800a81c:	f00e fa44 	bl	8018ca8 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 800a820:	7afa      	ldrb	r2, [r7, #11]
 800a822:	893b      	ldrh	r3, [r7, #8]
 800a824:	4413      	add	r3, r2
 800a826:	2b80      	cmp	r3, #128	; 0x80
 800a828:	dd09      	ble.n	800a83e <mqtt_message_received+0x86>
 800a82a:	4b8b      	ldr	r3, [pc, #556]	; (800aa58 <mqtt_message_received+0x2a0>)
 800a82c:	f240 22ad 	movw	r2, #685	; 0x2ad
 800a830:	498d      	ldr	r1, [pc, #564]	; (800aa68 <mqtt_message_received+0x2b0>)
 800a832:	488b      	ldr	r0, [pc, #556]	; (800aa60 <mqtt_message_received+0x2a8>)
 800a834:	f00e fa38 	bl	8018ca8 <iprintf>
 800a838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a83c:	e16f      	b.n	800ab1e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800a83e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a842:	2b02      	cmp	r3, #2
 800a844:	d123      	bne.n	800a88e <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	7a9b      	ldrb	r3, [r3, #10]
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	f040 8152 	bne.w	800aaf4 <mqtt_message_received+0x33c>
      if (length < 2) {
 800a850:	893b      	ldrh	r3, [r7, #8]
 800a852:	2b01      	cmp	r3, #1
 800a854:	f240 8150 	bls.w	800aaf8 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 800a858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85a:	3301      	adds	r3, #1
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 800a860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a862:	2b00      	cmp	r3, #0
 800a864:	f040 8146 	bne.w	800aaf4 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2203      	movs	r2, #3
 800a872:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 813b 	beq.w	800aaf4 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	6911      	ldr	r1, [r2, #16]
 800a886:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	4798      	blx	r3
 800a88c:	e132      	b.n	800aaf4 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 800a88e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a892:	2b0d      	cmp	r3, #13
 800a894:	f000 812e 	beq.w	800aaf4 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 800a898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	f040 80c0 	bne.w	800aa22 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 800a8a6:	893b      	ldrh	r3, [r7, #8]
 800a8a8:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800a8b0:	105b      	asrs	r3, r3, #1
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	f003 0303 	and.w	r3, r3, #3
 800a8b8:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8be:	2b80      	cmp	r3, #128	; 0x80
 800a8c0:	d87d      	bhi.n	800a9be <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 800a8c2:	7ffb      	ldrb	r3, [r7, #31]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <mqtt_message_received+0x114>
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e000      	b.n	800a8ce <mqtt_message_received+0x116>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 800a8d0:	8bbb      	ldrh	r3, [r7, #28]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	893b      	ldrh	r3, [r7, #8]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	f280 8110 	bge.w	800aafc <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 800a8e2:	8b7b      	ldrh	r3, [r7, #26]
 800a8e4:	021b      	lsls	r3, r3, #8
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	4413      	add	r3, r2
 800a8f2:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 800a8f4:	8b7a      	ldrh	r2, [r7, #26]
 800a8f6:	8939      	ldrh	r1, [r7, #8]
 800a8f8:	8bbb      	ldrh	r3, [r7, #28]
 800a8fa:	3302      	adds	r3, #2
 800a8fc:	1acb      	subs	r3, r1, r3
 800a8fe:	429a      	cmp	r2, r3
 800a900:	f300 80fe 	bgt.w	800ab00 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 800a904:	8b7a      	ldrh	r2, [r7, #26]
 800a906:	8bbb      	ldrh	r3, [r7, #28]
 800a908:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a90a:	1acb      	subs	r3, r1, r3
 800a90c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800a90e:	429a      	cmp	r2, r3
 800a910:	f200 80f6 	bhi.w	800ab00 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	3302      	adds	r3, #2
 800a918:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800a91a:	8b7b      	ldrh	r3, [r7, #26]
 800a91c:	3302      	adds	r3, #2
 800a91e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 800a920:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a922:	7ffa      	ldrb	r2, [r7, #31]
 800a924:	2a00      	cmp	r2, #0
 800a926:	d001      	beq.n	800a92c <mqtt_message_received+0x174>
 800a928:	2202      	movs	r2, #2
 800a92a:	e000      	b.n	800a92e <mqtt_message_received+0x176>
 800a92c:	2201      	movs	r2, #1
 800a92e:	4413      	add	r3, r2
 800a930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a932:	429a      	cmp	r2, r3
 800a934:	f0c0 80e6 	bcc.w	800ab04 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 800a938:	7ffb      	ldrb	r3, [r7, #31]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d01a      	beq.n	800a974 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800a93e:	893a      	ldrh	r2, [r7, #8]
 800a940:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a942:	3302      	adds	r3, #2
 800a944:	429a      	cmp	r2, r3
 800a946:	f0c0 80df 	bcc.w	800ab08 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 800a94a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a94e:	4413      	add	r3, r2
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	b29b      	uxth	r3, r3
 800a954:	021b      	lsls	r3, r3, #8
 800a956:	b29a      	uxth	r2, r3
 800a958:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a95a:	3301      	adds	r3, #1
 800a95c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a95e:	440b      	add	r3, r1
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	b29b      	uxth	r3, r3
 800a964:	4413      	add	r3, r2
 800a966:	b29a      	uxth	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 800a96c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a96e:	3302      	adds	r3, #2
 800a970:	863b      	strh	r3, [r7, #48]	; 0x30
 800a972:	e002      	b.n	800a97a <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2200      	movs	r2, #0
 800a978:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 800a97a:	8b7b      	ldrh	r3, [r7, #26]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	4413      	add	r3, r2
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 800a984:	8b7b      	ldrh	r3, [r7, #26]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4413      	add	r3, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 800a98e:	893a      	ldrh	r2, [r7, #8]
 800a990:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a992:	1ad3      	subs	r3, r2, r3
 800a994:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 800a996:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a998:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d008      	beq.n	800a9b4 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a9aa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	440a      	add	r2, r1
 800a9b0:	6979      	ldr	r1, [r7, #20]
 800a9b2:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 800a9b4:	8b7b      	ldrh	r3, [r7, #26]
 800a9b6:	697a      	ldr	r2, [r7, #20]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	7cfa      	ldrb	r2, [r7, #19]
 800a9bc:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800a9be:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <mqtt_message_received+0x214>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f040 8094 	bne.w	800aaf4 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800a9cc:	893b      	ldrh	r3, [r7, #8]
 800a9ce:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800a9d0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a9d2:	440a      	add	r2, r1
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	f0c0 8099 	bcc.w	800ab0c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800a9e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9e6:	18d1      	adds	r1, r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	bf0c      	ite	eq
 800a9ee:	2301      	moveq	r3, #1
 800a9f0:	2300      	movne	r3, #0
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a9f6:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d17a      	bne.n	800aaf4 <mqtt_message_received+0x33c>
 800a9fe:	7ffb      	ldrb	r3, [r7, #31]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d077      	beq.n	800aaf4 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 800aa04:	7ffb      	ldrb	r3, [r7, #31]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d101      	bne.n	800aa0e <mqtt_message_received+0x256>
 800aa0a:	2304      	movs	r3, #4
 800aa0c:	e000      	b.n	800aa10 <mqtt_message_received+0x258>
 800aa0e:	2305      	movs	r3, #5
 800aa10:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	891a      	ldrh	r2, [r3, #8]
 800aa16:	7cb9      	ldrb	r1, [r7, #18]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff fe74 	bl	800a708 <pub_ack_rec_rel_response>
 800aa20:	e068      	b.n	800aaf4 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	021b      	lsls	r3, r3, #8
 800aa2a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	3301      	adds	r3, #1
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa36:	4313      	orrs	r3, r2
 800aa38:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800aa3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d067      	beq.n	800ab10 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 800aa40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d111      	bne.n	800aa6c <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 800aa48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	2106      	movs	r1, #6
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7ff fe5a 	bl	800a708 <pub_ack_rec_rel_response>
 800aa54:	e04e      	b.n	800aaf4 <mqtt_message_received+0x33c>
 800aa56:	bf00      	nop
 800aa58:	08019ce8 	.word	0x08019ce8
 800aa5c:	08019f1c 	.word	0x08019f1c
 800aa60:	08019d60 	.word	0x08019d60
 800aa64:	08019f4c 	.word	0x08019f4c
 800aa68:	08019f70 	.word	0x08019f70

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 800aa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa70:	2b06      	cmp	r3, #6
 800aa72:	d106      	bne.n	800aa82 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 800aa74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa76:	2300      	movs	r3, #0
 800aa78:	2107      	movs	r1, #7
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f7ff fe44 	bl	800a708 <pub_ack_rec_rel_response>
 800aa80:	e038      	b.n	800aaf4 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 800aa82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d00b      	beq.n	800aaa2 <mqtt_message_received+0x2ea>
 800aa8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa8e:	2b0b      	cmp	r3, #11
 800aa90:	d007      	beq.n	800aaa2 <mqtt_message_received+0x2ea>
 800aa92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa96:	2b07      	cmp	r3, #7
 800aa98:	d003      	beq.n	800aaa2 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800aa9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa9e:	2b04      	cmp	r3, #4
 800aaa0:	d138      	bne.n	800ab14 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3318      	adds	r3, #24
 800aaa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff fb4a 	bl	800a144 <mqtt_take_request>
 800aab0:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01c      	beq.n	800aaf2 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 800aab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aabc:	2b09      	cmp	r3, #9
 800aabe:	d10a      	bne.n	800aad6 <mqtt_message_received+0x31e>
          if (length < 3) {
 800aac0:	893b      	ldrh	r3, [r7, #8]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d928      	bls.n	800ab18 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 800aac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac8:	3302      	adds	r3, #2
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	4619      	mov	r1, r3
 800aace:	6a38      	ldr	r0, [r7, #32]
 800aad0:	f7ff fe57 	bl	800a782 <mqtt_incomming_suback>
 800aad4:	e00a      	b.n	800aaec <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d006      	beq.n	800aaec <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800aade:	6a3b      	ldr	r3, [r7, #32]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	6a3a      	ldr	r2, [r7, #32]
 800aae4:	6892      	ldr	r2, [r2, #8]
 800aae6:	2100      	movs	r1, #0
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800aaec:	6a38      	ldr	r0, [r7, #32]
 800aaee:	f7ff fb19 	bl	800a124 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 800aaf2:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 800aaf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaf6:	e012      	b.n	800ab1e <mqtt_message_received+0x366>
        goto out_disconnect;
 800aaf8:	bf00      	nop
 800aafa:	e00e      	b.n	800ab1a <mqtt_message_received+0x362>
        goto out_disconnect;
 800aafc:	bf00      	nop
 800aafe:	e00c      	b.n	800ab1a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ab00:	bf00      	nop
 800ab02:	e00a      	b.n	800ab1a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ab04:	bf00      	nop
 800ab06:	e008      	b.n	800ab1a <mqtt_message_received+0x362>
          goto out_disconnect;
 800ab08:	bf00      	nop
 800ab0a:	e006      	b.n	800ab1a <mqtt_message_received+0x362>
        goto out_disconnect;
 800ab0c:	bf00      	nop
 800ab0e:	e004      	b.n	800ab1a <mqtt_message_received+0x362>
      goto out_disconnect;
 800ab10:	bf00      	nop
 800ab12:	e002      	b.n	800ab1a <mqtt_message_received+0x362>
      goto out_disconnect;
 800ab14:	bf00      	nop
 800ab16:	e000      	b.n	800ab1a <mqtt_message_received+0x362>
            goto out_disconnect;
 800ab18:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800ab1a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	373c      	adds	r7, #60	; 0x3c
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd90      	pop	{r4, r7, pc}
 800ab26:	bf00      	nop

0800ab28 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 800ab32:	2300      	movs	r3, #0
 800ab34:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 800ab42:	e0bc      	b.n	800acbe <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 800ab44:	7dfb      	ldrb	r3, [r7, #23]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d903      	bls.n	800ab52 <mqtt_parse_incoming+0x2a>
 800ab4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da4d      	bge.n	800abee <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 800ab52:	7dfa      	ldrb	r2, [r7, #23]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d206      	bcs.n	800ab6a <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	4413      	add	r3, r2
 800ab62:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800ab66:	75bb      	strb	r3, [r7, #22]
 800ab68:	e012      	b.n	800ab90 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 800ab6a:	8bfb      	ldrh	r3, [r7, #30]
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	83fa      	strh	r2, [r7, #30]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6838      	ldr	r0, [r7, #0]
 800ab74:	f002 fd22 	bl	800d5bc <pbuf_get_at>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab80:	1c59      	adds	r1, r3, #1
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6691      	str	r1, [r2, #104]	; 0x68
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	4413      	add	r3, r2
 800ab8a:	7dba      	ldrb	r2, [r7, #22]
 800ab8c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 800ab90:	7dfb      	ldrb	r3, [r7, #23]
 800ab92:	3301      	adds	r3, #1
 800ab94:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 800ab96:	7dfb      	ldrb	r3, [r7, #23]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	f240 8090 	bls.w	800acbe <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 800ab9e:	7dbb      	ldrb	r3, [r7, #22]
 800aba0:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
 800aba6:	1e9a      	subs	r2, r3, #2
 800aba8:	4613      	mov	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	1a9b      	subs	r3, r3, r2
 800abae:	fa01 f303 	lsl.w	r3, r1, r3
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 800abb8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	db7e      	blt.n	800acbe <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10b      	bne.n	800abde <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800abc6:	7df9      	ldrb	r1, [r7, #23]
 800abc8:	2300      	movs	r3, #0
 800abca:	2200      	movs	r2, #0
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f7ff fdf3 	bl	800a7b8 <mqtt_message_received>
            client->msg_idx = 0;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	75fb      	strb	r3, [r7, #23]
 800abdc:	e06f      	b.n	800acbe <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 800abde:	7dfa      	ldrb	r2, [r7, #23]
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	441a      	add	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 800abec:	e067      	b.n	800acbe <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	7dfa      	ldrb	r2, [r7, #23]
 800abf8:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 800abfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac00:	fb01 f202 	mul.w	r2, r1, r2
 800ac04:	1a9b      	subs	r3, r3, r2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	7dfb      	ldrb	r3, [r7, #23]
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	4413      	add	r3, r2
 800ac0e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	891a      	ldrh	r2, [r3, #8]
 800ac14:	8bfb      	ldrh	r3, [r7, #30]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d905      	bls.n	800ac2e <mqtt_parse_incoming+0x106>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	891a      	ldrh	r2, [r3, #8]
 800ac26:	8bfb      	ldrh	r3, [r7, #30]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	e001      	b.n	800ac32 <mqtt_parse_incoming+0x10a>
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 800ac34:	8a7b      	ldrh	r3, [r7, #18]
 800ac36:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800ac3a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 800ac3c:	8aba      	ldrh	r2, [r7, #20]
 800ac3e:	8a3b      	ldrh	r3, [r7, #16]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d901      	bls.n	800ac48 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 800ac44:	8a3b      	ldrh	r3, [r7, #16]
 800ac46:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800ac4e:	8a7b      	ldrh	r3, [r7, #18]
 800ac50:	18d1      	adds	r1, r2, r3
 800ac52:	8bfb      	ldrh	r3, [r7, #30]
 800ac54:	8aba      	ldrh	r2, [r7, #20]
 800ac56:	6838      	ldr	r0, [r7, #0]
 800ac58:	f002 fbe2 	bl	800d420 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ac60:	8abb      	ldrh	r3, [r7, #20]
 800ac62:	441a      	add	r2, r3
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 800ac68:	8bfa      	ldrh	r2, [r7, #30]
 800ac6a:	8abb      	ldrh	r3, [r7, #20]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 800ac70:	8abb      	ldrh	r3, [r7, #20]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d003      	beq.n	800ac86 <mqtt_parse_incoming+0x15e>
 800ac7e:	8aba      	ldrh	r2, [r7, #20]
 800ac80:	8a3b      	ldrh	r3, [r7, #16]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d11b      	bne.n	800acbe <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800ac86:	8a7a      	ldrh	r2, [r7, #18]
 800ac88:	8abb      	ldrh	r3, [r7, #20]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	b29a      	uxth	r2, r3
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	1ad3      	subs	r3, r2, r3
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	7df9      	ldrb	r1, [r7, #23]
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fd8c 	bl	800a7b8 <mqtt_message_received>
 800aca0:	4603      	mov	r3, r0
 800aca2:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 800aca4:	89fb      	ldrh	r3, [r7, #14]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <mqtt_parse_incoming+0x186>
          return res;
 800acaa:	89fb      	ldrh	r3, [r7, #14]
 800acac:	e00e      	b.n	800accc <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d104      	bne.n	800acbe <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	891b      	ldrh	r3, [r3, #8]
 800acc2:	8bfa      	ldrh	r2, [r7, #30]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	f4ff af3d 	bcc.w	800ab44 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3720      	adds	r7, #32
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d106      	bne.n	800acfa <mqtt_tcp_recv_cb+0x26>
 800acec:	4b24      	ldr	r3, [pc, #144]	; (800ad80 <mqtt_tcp_recv_cb+0xac>)
 800acee:	f240 32a7 	movw	r2, #935	; 0x3a7
 800acf2:	4924      	ldr	r1, [pc, #144]	; (800ad84 <mqtt_tcp_recv_cb+0xb0>)
 800acf4:	4824      	ldr	r0, [pc, #144]	; (800ad88 <mqtt_tcp_recv_cb+0xb4>)
 800acf6:	f00d ffd7 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d006      	beq.n	800ad12 <mqtt_tcp_recv_cb+0x3e>
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <mqtt_tcp_recv_cb+0xac>)
 800ad06:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ad0a:	4920      	ldr	r1, [pc, #128]	; (800ad8c <mqtt_tcp_recv_cb+0xb8>)
 800ad0c:	481e      	ldr	r0, [pc, #120]	; (800ad88 <mqtt_tcp_recv_cb+0xb4>)
 800ad0e:	f00d ffcb 	bl	8018ca8 <iprintf>

  if (p == NULL) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d105      	bne.n	800ad24 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ad18:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad1c:	6978      	ldr	r0, [r7, #20]
 800ad1e:	f7ff fbfb 	bl	800a518 <mqtt_close>
 800ad22:	e027      	b.n	800ad74 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 800ad24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f002 f971 	bl	800d014 <pbuf_free>
      return err;
 800ad32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad36:	e01e      	b.n	800ad76 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	891b      	ldrh	r3, [r3, #8]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	68b8      	ldr	r0, [r7, #8]
 800ad40:	f003 f86e 	bl	800de20 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 800ad44:	6879      	ldr	r1, [r7, #4]
 800ad46:	6978      	ldr	r0, [r7, #20]
 800ad48:	f7ff feee 	bl	800ab28 <mqtt_parse_incoming>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f002 f95f 	bl	800d014 <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 800ad56:	8a7b      	ldrh	r3, [r7, #18]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d004      	beq.n	800ad66 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 800ad5c:	8a7b      	ldrh	r3, [r7, #18]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6978      	ldr	r0, [r7, #20]
 800ad62:	f7ff fbd9 	bl	800a518 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	885b      	ldrh	r3, [r3, #2]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d002      	beq.n	800ad74 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2200      	movs	r2, #0
 800ad72:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	08019ce8 	.word	0x08019ce8
 800ad84:	08019f88 	.word	0x08019f88
 800ad88:	08019d60 	.word	0x08019d60
 800ad8c:	08019fac 	.word	0x08019fac

0800ad90 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	4613      	mov	r3, r2
 800ad9c:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	7a9b      	ldrb	r3, [r3, #10]
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d127      	bne.n	800adfa <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2200      	movs	r2, #0
 800adae:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2200      	movs	r2, #0
 800adb4:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800adb6:	e00d      	b.n	800add4 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d006      	beq.n	800adce <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	6892      	ldr	r2, [r2, #8]
 800adc8:	2100      	movs	r1, #0
 800adca:	4610      	mov	r0, r2
 800adcc:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 800adce:	6938      	ldr	r0, [r7, #16]
 800add0:	f7ff f9a8 	bl	800a124 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	3318      	adds	r3, #24
 800add8:	2100      	movs	r1, #0
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff f9b2 	bl	800a144 <mqtt_take_request>
 800ade0:	6138      	str	r0, [r7, #16]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d1e7      	bne.n	800adb8 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	4619      	mov	r1, r3
 800adf4:	4610      	mov	r0, r2
 800adf6:	f7ff f84f 	bl	8009e98 <mqtt_output_send>
  }
  return ERR_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <mqtt_tcp_err_cb+0x24>
 800ae1a:	4b09      	ldr	r3, [pc, #36]	; (800ae40 <mqtt_tcp_err_cb+0x3c>)
 800ae1c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 800ae20:	4908      	ldr	r1, [pc, #32]	; (800ae44 <mqtt_tcp_err_cb+0x40>)
 800ae22:	4809      	ldr	r0, [pc, #36]	; (800ae48 <mqtt_tcp_err_cb+0x44>)
 800ae24:	f00d ff40 	bl	8018ca8 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 800ae2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f7ff fb70 	bl	800a518 <mqtt_close>
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	08019ce8 	.word	0x08019ce8
 800ae44:	08019fd4 	.word	0x08019fd4
 800ae48:	08019d60 	.word	0x08019d60

0800ae4c <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	7a9b      	ldrb	r3, [r3, #10]
 800ae5e:	2b03      	cmp	r3, #3
 800ae60:	d105      	bne.n	800ae6e <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	33ec      	adds	r3, #236	; 0xec
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff f815 	bl	8009e98 <mqtt_output_send>
  }
  return ERR_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	4613      	mov	r3, r2
 800ae84:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 800ae8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d002      	beq.n	800ae98 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 800ae92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae96:	e025      	b.n	800aee4 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 800ae9e:	4913      	ldr	r1, [pc, #76]	; (800aeec <mqtt_tcp_connect_cb+0x74>)
 800aea0:	68b8      	ldr	r0, [r7, #8]
 800aea2:	f003 ffad 	bl	800ee00 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 800aea6:	4912      	ldr	r1, [pc, #72]	; (800aef0 <mqtt_tcp_connect_cb+0x78>)
 800aea8:	68b8      	ldr	r0, [r7, #8]
 800aeaa:	f003 ffcb 	bl	800ee44 <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 800aeae:	2202      	movs	r2, #2
 800aeb0:	4910      	ldr	r1, [pc, #64]	; (800aef4 <mqtt_tcp_connect_cb+0x7c>)
 800aeb2:	68b8      	ldr	r0, [r7, #8]
 800aeb4:	f004 f80a 	bl	800eecc <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	2202      	movs	r2, #2
 800aebc:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	490d      	ldr	r1, [pc, #52]	; (800aef8 <mqtt_tcp_connect_cb+0x80>)
 800aec2:	f241 3088 	movw	r0, #5000	; 0x1388
 800aec6:	f008 fcf5 	bl	80138b4 <sys_timeout>
  client->cyclic_tick = 0;
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2200      	movs	r2, #0
 800aece:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe ffdb 	bl	8009e98 <mqtt_output_send>

  return ERR_OK;
 800aee2:	2300      	movs	r3, #0
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	0800acd5 	.word	0x0800acd5
 800aef0:	0800ad91 	.word	0x0800ad91
 800aef4:	0800ae4d 	.word	0x0800ae4d
 800aef8:	0800a5d9 	.word	0x0800a5d9

0800aefc <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08c      	sub	sp, #48	; 0x30
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <mqtt_publish+0x22>
 800af10:	4b5d      	ldr	r3, [pc, #372]	; (800b088 <mqtt_publish+0x18c>)
 800af12:	f240 4254 	movw	r2, #1108	; 0x454
 800af16:	495d      	ldr	r1, [pc, #372]	; (800b08c <mqtt_publish+0x190>)
 800af18:	485d      	ldr	r0, [pc, #372]	; (800b090 <mqtt_publish+0x194>)
 800af1a:	f00d fec5 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <mqtt_publish+0x36>
 800af24:	4b58      	ldr	r3, [pc, #352]	; (800b088 <mqtt_publish+0x18c>)
 800af26:	f240 4255 	movw	r2, #1109	; 0x455
 800af2a:	495a      	ldr	r1, [pc, #360]	; (800b094 <mqtt_publish+0x198>)
 800af2c:	4858      	ldr	r0, [pc, #352]	; (800b090 <mqtt_publish+0x194>)
 800af2e:	f00d febb 	bl	8018ca8 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	7a9b      	ldrb	r3, [r3, #10]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d109      	bne.n	800af4e <mqtt_publish+0x52>
 800af3a:	4b53      	ldr	r3, [pc, #332]	; (800b088 <mqtt_publish+0x18c>)
 800af3c:	f240 4256 	movw	r2, #1110	; 0x456
 800af40:	4955      	ldr	r1, [pc, #340]	; (800b098 <mqtt_publish+0x19c>)
 800af42:	4853      	ldr	r0, [pc, #332]	; (800b090 <mqtt_publish+0x194>)
 800af44:	f00d feb0 	bl	8018ca8 <iprintf>
 800af48:	f06f 030a 	mvn.w	r3, #10
 800af4c:	e097      	b.n	800b07e <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 800af4e:	68b8      	ldr	r0, [r7, #8]
 800af50:	f7f5 f968 	bl	8000224 <strlen>
 800af54:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d909      	bls.n	800af74 <mqtt_publish+0x78>
 800af60:	4b49      	ldr	r3, [pc, #292]	; (800b088 <mqtt_publish+0x18c>)
 800af62:	f240 4259 	movw	r2, #1113	; 0x459
 800af66:	494d      	ldr	r1, [pc, #308]	; (800b09c <mqtt_publish+0x1a0>)
 800af68:	4849      	ldr	r0, [pc, #292]	; (800b090 <mqtt_publish+0x194>)
 800af6a:	f00d fe9d 	bl	8018ca8 <iprintf>
 800af6e:	f06f 030f 	mvn.w	r3, #15
 800af72:	e084      	b.n	800b07e <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 800af78:	8b7b      	ldrh	r3, [r7, #26]
 800af7a:	1c9a      	adds	r2, r3, #2
 800af7c:	887b      	ldrh	r3, [r7, #2]
 800af7e:	4413      	add	r3, r2
 800af80:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 800af82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800af86:	2b00      	cmp	r3, #0
 800af88:	d008      	beq.n	800af9c <mqtt_publish+0xa0>
    total_len += 2;
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	3302      	adds	r3, #2
 800af8e:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7fe feed 	bl	8009d70 <msg_generate_packet_id>
 800af96:	4603      	mov	r3, r0
 800af98:	84fb      	strh	r3, [r7, #38]	; 0x26
 800af9a:	e001      	b.n	800afa0 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa6:	d309      	bcc.n	800afbc <mqtt_publish+0xc0>
 800afa8:	4b37      	ldr	r3, [pc, #220]	; (800b088 <mqtt_publish+0x18c>)
 800afaa:	f240 4265 	movw	r2, #1125	; 0x465
 800afae:	493c      	ldr	r1, [pc, #240]	; (800b0a0 <mqtt_publish+0x1a4>)
 800afb0:	4837      	ldr	r0, [pc, #220]	; (800b090 <mqtt_publish+0x194>)
 800afb2:	f00d fe79 	bl	8018ca8 <iprintf>
 800afb6:	f06f 030f 	mvn.w	r3, #15
 800afba:	e060      	b.n	800b07e <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 800afbc:	6a3b      	ldr	r3, [r7, #32]
 800afbe:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f103 001c 	add.w	r0, r3, #28
 800afc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800afc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	2104      	movs	r1, #4
 800afd0:	f7ff f816 	bl	800a000 <mqtt_create_request>
 800afd4:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d102      	bne.n	800afe2 <mqtt_publish+0xe6>
    return ERR_MEM;
 800afdc:	f04f 33ff 	mov.w	r3, #4294967295
 800afe0:	e04d      	b.n	800b07e <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	33ec      	adds	r3, #236	; 0xec
 800afe6:	8b3a      	ldrh	r2, [r7, #24]
 800afe8:	4611      	mov	r1, r2
 800afea:	4618      	mov	r0, r3
 800afec:	f7ff fa62 	bl	800a4b4 <mqtt_output_check_space>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d105      	bne.n	800b002 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 800aff6:	6978      	ldr	r0, [r7, #20]
 800aff8:	f7ff f894 	bl	800a124 <mqtt_delete_request>
    return ERR_MEM;
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	e03d      	b.n	800b07e <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b008:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800b00c:	8b3b      	ldrh	r3, [r7, #24]
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	4613      	mov	r3, r2
 800b018:	2200      	movs	r2, #0
 800b01a:	2103      	movs	r1, #3
 800b01c:	f7ff f9ff 	bl	800a41e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	33ec      	adds	r3, #236	; 0xec
 800b024:	8b7a      	ldrh	r2, [r7, #26]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff f9cc 	bl	800a3c6 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 800b02e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800b032:	2b00      	cmp	r3, #0
 800b034:	d006      	beq.n	800b044 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	33ec      	adds	r3, #236	; 0xec
 800b03a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b03c:	4611      	mov	r1, r2
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff f98b 	bl	800a35a <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d009      	beq.n	800b05e <mqtt_publish+0x162>
 800b04a:	887b      	ldrh	r3, [r7, #2]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d006      	beq.n	800b05e <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	33ec      	adds	r3, #236	; 0xec
 800b054:	887a      	ldrh	r2, [r7, #2]
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff f996 	bl	800a38a <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3318      	adds	r3, #24
 800b062:	6979      	ldr	r1, [r7, #20]
 800b064:	4618      	mov	r0, r3
 800b066:	f7ff f811 	bl	800a08c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4619      	mov	r1, r3
 800b076:	4610      	mov	r0, r2
 800b078:	f7fe ff0e 	bl	8009e98 <mqtt_output_send>
  return ERR_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3728      	adds	r7, #40	; 0x28
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	08019ce8 	.word	0x08019ce8
 800b08c:	08019ff4 	.word	0x08019ff4
 800b090:	08019d60 	.word	0x08019d60
 800b094:	0801a014 	.word	0x0801a014
 800b098:	0801a030 	.word	0x0801a030
 800b09c:	0801a050 	.word	0x0801a050
 800b0a0:	0801a074 	.word	0x0801a074

0800b0a4 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08c      	sub	sp, #48	; 0x30
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	4613      	mov	r3, r2
 800b0b2:	71fb      	strb	r3, [r7, #7]
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d106      	bne.n	800b0c8 <mqtt_sub_unsub+0x24>
 800b0ba:	4b5e      	ldr	r3, [pc, #376]	; (800b234 <mqtt_sub_unsub+0x190>)
 800b0bc:	f240 429f 	movw	r2, #1183	; 0x49f
 800b0c0:	495d      	ldr	r1, [pc, #372]	; (800b238 <mqtt_sub_unsub+0x194>)
 800b0c2:	485e      	ldr	r0, [pc, #376]	; (800b23c <mqtt_sub_unsub+0x198>)
 800b0c4:	f00d fdf0 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d106      	bne.n	800b0dc <mqtt_sub_unsub+0x38>
 800b0ce:	4b59      	ldr	r3, [pc, #356]	; (800b234 <mqtt_sub_unsub+0x190>)
 800b0d0:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800b0d4:	495a      	ldr	r1, [pc, #360]	; (800b240 <mqtt_sub_unsub+0x19c>)
 800b0d6:	4859      	ldr	r0, [pc, #356]	; (800b23c <mqtt_sub_unsub+0x198>)
 800b0d8:	f00d fde6 	bl	8018ca8 <iprintf>

  topic_strlen = strlen(topic);
 800b0dc:	68b8      	ldr	r0, [r7, #8]
 800b0de:	f7f5 f8a1 	bl	8000224 <strlen>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d909      	bls.n	800b102 <mqtt_sub_unsub+0x5e>
 800b0ee:	4b51      	ldr	r3, [pc, #324]	; (800b234 <mqtt_sub_unsub+0x190>)
 800b0f0:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800b0f4:	4953      	ldr	r1, [pc, #332]	; (800b244 <mqtt_sub_unsub+0x1a0>)
 800b0f6:	4851      	ldr	r0, [pc, #324]	; (800b23c <mqtt_sub_unsub+0x198>)
 800b0f8:	f00d fdd6 	bl	8018ca8 <iprintf>
 800b0fc:	f06f 030f 	mvn.w	r3, #15
 800b100:	e093      	b.n	800b22a <mqtt_sub_unsub+0x186>
  topic_len = (u16_t)topic_strlen;
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800b106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b108:	3304      	adds	r3, #4
 800b10a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800b10e:	2a00      	cmp	r2, #0
 800b110:	bf14      	ite	ne
 800b112:	2201      	movne	r2, #1
 800b114:	2200      	moveq	r2, #0
 800b116:	b2d2      	uxtb	r2, r2
 800b118:	4413      	add	r3, r2
 800b11a:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b122:	d309      	bcc.n	800b138 <mqtt_sub_unsub+0x94>
 800b124:	4b43      	ldr	r3, [pc, #268]	; (800b234 <mqtt_sub_unsub+0x190>)
 800b126:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800b12a:	4947      	ldr	r1, [pc, #284]	; (800b248 <mqtt_sub_unsub+0x1a4>)
 800b12c:	4843      	ldr	r0, [pc, #268]	; (800b23c <mqtt_sub_unsub+0x198>)
 800b12e:	f00d fdbb 	bl	8018ca8 <iprintf>
 800b132:	f06f 030f 	mvn.w	r3, #15
 800b136:	e078      	b.n	800b22a <mqtt_sub_unsub+0x186>
  remaining_length = (u16_t)total_len;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	837b      	strh	r3, [r7, #26]

  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d906      	bls.n	800b150 <mqtt_sub_unsub+0xac>
 800b142:	4b3c      	ldr	r3, [pc, #240]	; (800b234 <mqtt_sub_unsub+0x190>)
 800b144:	f240 42aa 	movw	r2, #1194	; 0x4aa
 800b148:	4940      	ldr	r1, [pc, #256]	; (800b24c <mqtt_sub_unsub+0x1a8>)
 800b14a:	483c      	ldr	r0, [pc, #240]	; (800b23c <mqtt_sub_unsub+0x198>)
 800b14c:	f00d fdac 	bl	8018ca8 <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	7a9b      	ldrb	r3, [r3, #10]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <mqtt_sub_unsub+0xba>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_sub_unsub: Can not (un)subscribe in disconnected state\n"));
    return ERR_CONN;
 800b158:	f06f 030a 	mvn.w	r3, #10
 800b15c:	e065      	b.n	800b22a <mqtt_sub_unsub+0x186>
  }

  pkt_id = msg_generate_packet_id(client);
 800b15e:	68f8      	ldr	r0, [r7, #12]
 800b160:	f7fe fe06 	bl	8009d70 <msg_generate_packet_id>
 800b164:	4603      	mov	r3, r0
 800b166:	833b      	strh	r3, [r7, #24]
  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f103 001c 	add.w	r0, r3, #28
 800b16e:	8b3a      	ldrh	r2, [r7, #24]
 800b170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2104      	movs	r1, #4
 800b178:	f7fe ff42 	bl	800a000 <mqtt_create_request>
 800b17c:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <mqtt_sub_unsub+0xe6>
    return ERR_MEM;
 800b184:	f04f 33ff 	mov.w	r3, #4294967295
 800b188:	e04f      	b.n	800b22a <mqtt_sub_unsub+0x186>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	33ec      	adds	r3, #236	; 0xec
 800b18e:	8b7a      	ldrh	r2, [r7, #26]
 800b190:	4611      	mov	r1, r2
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff f98e 	bl	800a4b4 <mqtt_output_check_space>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d105      	bne.n	800b1aa <mqtt_sub_unsub+0x106>
    mqtt_delete_request(r);
 800b19e:	6978      	ldr	r0, [r7, #20]
 800b1a0:	f7fe ffc0 	bl	800a124 <mqtt_delete_request>
    return ERR_MEM;
 800b1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a8:	e03f      	b.n	800b22a <mqtt_sub_unsub+0x186>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_sub_unsub: Client (un)subscribe to topic \"%s\", id: %d\n", topic, pkt_id));

  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b1b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d001      	beq.n	800b1bc <mqtt_sub_unsub+0x118>
 800b1b8:	2108      	movs	r1, #8
 800b1ba:	e000      	b.n	800b1be <mqtt_sub_unsub+0x11a>
 800b1bc:	210a      	movs	r1, #10
 800b1be:	8b7b      	ldrh	r3, [r7, #26]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f7ff f928 	bl	800a41e <mqtt_output_append_fixed_header>
  /* Packet id */
  mqtt_output_append_u16(&client->output, pkt_id);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	33ec      	adds	r3, #236	; 0xec
 800b1d2:	8b3a      	ldrh	r2, [r7, #24]
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff f8bf 	bl	800a35a <mqtt_output_append_u16>
  /* Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	33ec      	adds	r3, #236	; 0xec
 800b1e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff f8ee 	bl	800a3c6 <mqtt_output_append_string>
  /* QoS */
  if (sub != 0) {
 800b1ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <mqtt_sub_unsub+0x166>
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	bf28      	it	cs
 800b1fe:	2302      	movcs	r3, #2
 800b200:	b2db      	uxtb	r3, r3
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f7ff f899 	bl	800a33c <mqtt_output_append_u8>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3318      	adds	r3, #24
 800b20e:	6979      	ldr	r1, [r7, #20]
 800b210:	4618      	mov	r0, r3
 800b212:	f7fe ff3b 	bl	800a08c <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4619      	mov	r1, r3
 800b222:	4610      	mov	r0, r2
 800b224:	f7fe fe38 	bl	8009e98 <mqtt_output_send>
  return ERR_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3728      	adds	r7, #40	; 0x28
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	08019ce8 	.word	0x08019ce8
 800b238:	0801a098 	.word	0x0801a098
 800b23c:	08019d60 	.word	0x08019d60
 800b240:	0801a0b8 	.word	0x0801a0b8
 800b244:	0801a0d8 	.word	0x0801a0d8
 800b248:	0801a100 	.word	0x0801a100
 800b24c:	0801a128 	.word	0x0801a128

0800b250 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d106      	bne.n	800b272 <mqtt_set_inpub_callback+0x22>
 800b264:	4b09      	ldr	r3, [pc, #36]	; (800b28c <mqtt_set_inpub_callback+0x3c>)
 800b266:	f240 42da 	movw	r2, #1242	; 0x4da
 800b26a:	4909      	ldr	r1, [pc, #36]	; (800b290 <mqtt_set_inpub_callback+0x40>)
 800b26c:	4809      	ldr	r0, [pc, #36]	; (800b294 <mqtt_set_inpub_callback+0x44>)
 800b26e:	f00d fd1b 	bl	8018ca8 <iprintf>
  client->data_cb = data_cb;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800b284:	bf00      	nop
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}
 800b28c:	08019ce8 	.word	0x08019ce8
 800b290:	0801a140 	.word	0x0801a140
 800b294:	08019d60 	.word	0x08019d60

0800b298 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b08c      	sub	sp, #48	; 0x30
 800b29c:	af02      	add	r7, sp, #8
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	603b      	str	r3, [r7, #0]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800b2a8:	230a      	movs	r3, #10
 800b2aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	83fb      	strh	r3, [r7, #30]
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d106      	bne.n	800b2da <mqtt_client_connect+0x42>
 800b2cc:	4b9e      	ldr	r3, [pc, #632]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b2ce:	f240 520f 	movw	r2, #1295	; 0x50f
 800b2d2:	499e      	ldr	r1, [pc, #632]	; (800b54c <mqtt_client_connect+0x2b4>)
 800b2d4:	489e      	ldr	r0, [pc, #632]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b2d6:	f00d fce7 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <mqtt_client_connect+0x56>
 800b2e0:	4b99      	ldr	r3, [pc, #612]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b2e2:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800b2e6:	499b      	ldr	r1, [pc, #620]	; (800b554 <mqtt_client_connect+0x2bc>)
 800b2e8:	4899      	ldr	r0, [pc, #612]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b2ea:	f00d fcdd 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <mqtt_client_connect+0x6a>
 800b2f4:	4b94      	ldr	r3, [pc, #592]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b2f6:	f240 5211 	movw	r2, #1297	; 0x511
 800b2fa:	4997      	ldr	r1, [pc, #604]	; (800b558 <mqtt_client_connect+0x2c0>)
 800b2fc:	4894      	ldr	r0, [pc, #592]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b2fe:	f00d fcd3 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 800b302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d106      	bne.n	800b318 <mqtt_client_connect+0x80>
 800b30a:	4b8f      	ldr	r3, [pc, #572]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b30c:	f240 5212 	movw	r2, #1298	; 0x512
 800b310:	4992      	ldr	r1, [pc, #584]	; (800b55c <mqtt_client_connect+0x2c4>)
 800b312:	488f      	ldr	r0, [pc, #572]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b314:	f00d fcc8 	bl	8018ca8 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	7a9b      	ldrb	r3, [r3, #10]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 800b320:	f06f 0309 	mvn.w	r3, #9
 800b324:	e21f      	b.n	800b766 <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 800b326:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 800b32a:	2100      	movs	r1, #0
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f00d fd20 	bl	8018d72 <memset>
  client->connect_arg = arg;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b336:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800b33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b340:	899a      	ldrh	r2, [r3, #12]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	331c      	adds	r3, #28
 800b34a:	2104      	movs	r1, #4
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe ffc7 	bl	800a2e0 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800b352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d073      	beq.n	800b442 <mqtt_client_connect+0x1aa>
 800b35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d06f      	beq.n	800b442 <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800b362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b366:	f043 0304 	orr.w	r3, r3, #4
 800b36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	7e1b      	ldrb	r3, [r3, #24]
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	b25b      	sxtb	r3, r3
 800b376:	f003 0318 	and.w	r3, r3, #24
 800b37a:	b25a      	sxtb	r2, r3
 800b37c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b380:	4313      	orrs	r3, r2
 800b382:	b25b      	sxtb	r3, r3
 800b384:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800b388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38a:	7e5b      	ldrb	r3, [r3, #25]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800b390:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b394:	f043 0320 	orr.w	r3, r3, #32
 800b398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800b39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f4 ff3f 	bl	8000224 <strlen>
 800b3a6:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2bff      	cmp	r3, #255	; 0xff
 800b3ac:	d909      	bls.n	800b3c2 <mqtt_client_connect+0x12a>
 800b3ae:	4b66      	ldr	r3, [pc, #408]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b3b0:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800b3b4:	496a      	ldr	r1, [pc, #424]	; (800b560 <mqtt_client_connect+0x2c8>)
 800b3b6:	4866      	ldr	r0, [pc, #408]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b3b8:	f00d fc76 	bl	8018ca8 <iprintf>
 800b3bc:	f06f 0305 	mvn.w	r3, #5
 800b3c0:	e1d1      	b.n	800b766 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d109      	bne.n	800b3dc <mqtt_client_connect+0x144>
 800b3c8:	4b5f      	ldr	r3, [pc, #380]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b3ca:	f240 5229 	movw	r2, #1321	; 0x529
 800b3ce:	4965      	ldr	r1, [pc, #404]	; (800b564 <mqtt_client_connect+0x2cc>)
 800b3d0:	485f      	ldr	r0, [pc, #380]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b3d2:	f00d fc69 	bl	8018ca8 <iprintf>
 800b3d6:	f06f 0305 	mvn.w	r3, #5
 800b3da:	e1c4      	b.n	800b766 <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	695b      	ldr	r3, [r3, #20]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f7f4 ff1c 	bl	8000224 <strlen>
 800b3ec:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	2bff      	cmp	r3, #255	; 0xff
 800b3f2:	d909      	bls.n	800b408 <mqtt_client_connect+0x170>
 800b3f4:	4b54      	ldr	r3, [pc, #336]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b3f6:	f240 522c 	movw	r2, #1324	; 0x52c
 800b3fa:	495b      	ldr	r1, [pc, #364]	; (800b568 <mqtt_client_connect+0x2d0>)
 800b3fc:	4854      	ldr	r0, [pc, #336]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b3fe:	f00d fc53 	bl	8018ca8 <iprintf>
 800b402:	f06f 0305 	mvn.w	r3, #5
 800b406:	e1ae      	b.n	800b766 <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800b40e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b410:	1c9a      	adds	r2, r3, #2
 800b412:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b416:	4413      	add	r3, r2
 800b418:	1c9a      	adds	r2, r3, #2
 800b41a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800b41e:	4413      	add	r3, r2
 800b420:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b428:	d309      	bcc.n	800b43e <mqtt_client_connect+0x1a6>
 800b42a:	4b47      	ldr	r3, [pc, #284]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b42c:	f240 522f 	movw	r2, #1327	; 0x52f
 800b430:	494e      	ldr	r1, [pc, #312]	; (800b56c <mqtt_client_connect+0x2d4>)
 800b432:	4847      	ldr	r0, [pc, #284]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b434:	f00d fc38 	bl	8018ca8 <iprintf>
 800b438:	f06f 0305 	mvn.w	r3, #5
 800b43c:	e193      	b.n	800b766 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800b442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d03d      	beq.n	800b4c6 <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800b44a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b44e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800b456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7f4 fee2 	bl	8000224 <strlen>
 800b460:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b468:	d309      	bcc.n	800b47e <mqtt_client_connect+0x1e6>
 800b46a:	4b37      	ldr	r3, [pc, #220]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b46c:	f240 5235 	movw	r2, #1333	; 0x535
 800b470:	493f      	ldr	r1, [pc, #252]	; (800b570 <mqtt_client_connect+0x2d8>)
 800b472:	4837      	ldr	r0, [pc, #220]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b474:	f00d fc18 	bl	8018ca8 <iprintf>
 800b478:	f06f 0305 	mvn.w	r3, #5
 800b47c:	e173      	b.n	800b766 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d109      	bne.n	800b498 <mqtt_client_connect+0x200>
 800b484:	4b30      	ldr	r3, [pc, #192]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b486:	f240 5236 	movw	r2, #1334	; 0x536
 800b48a:	493a      	ldr	r1, [pc, #232]	; (800b574 <mqtt_client_connect+0x2dc>)
 800b48c:	4830      	ldr	r0, [pc, #192]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b48e:	f00d fc0b 	bl	8018ca8 <iprintf>
 800b492:	f06f 0305 	mvn.w	r3, #5
 800b496:	e166      	b.n	800b766 <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800b49c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b49e:	1c9a      	adds	r2, r3, #2
 800b4a0:	8bfb      	ldrh	r3, [r7, #30]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ac:	d309      	bcc.n	800b4c2 <mqtt_client_connect+0x22a>
 800b4ae:	4b26      	ldr	r3, [pc, #152]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b4b0:	f240 5239 	movw	r2, #1337	; 0x539
 800b4b4:	492d      	ldr	r1, [pc, #180]	; (800b56c <mqtt_client_connect+0x2d4>)
 800b4b6:	4826      	ldr	r0, [pc, #152]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b4b8:	f00d fbf6 	bl	8018ca8 <iprintf>
 800b4bc:	f06f 0305 	mvn.w	r3, #5
 800b4c0:	e151      	b.n	800b766 <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d05a      	beq.n	800b584 <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800b4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800b4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f4 fea0 	bl	8000224 <strlen>
 800b4e4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ec:	d309      	bcc.n	800b502 <mqtt_client_connect+0x26a>
 800b4ee:	4b16      	ldr	r3, [pc, #88]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b4f0:	f240 523f 	movw	r2, #1343	; 0x53f
 800b4f4:	4920      	ldr	r1, [pc, #128]	; (800b578 <mqtt_client_connect+0x2e0>)
 800b4f6:	4816      	ldr	r0, [pc, #88]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b4f8:	f00d fbd6 	bl	8018ca8 <iprintf>
 800b4fc:	f06f 0305 	mvn.w	r3, #5
 800b500:	e131      	b.n	800b766 <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d109      	bne.n	800b51c <mqtt_client_connect+0x284>
 800b508:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b50a:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800b50e:	491b      	ldr	r1, [pc, #108]	; (800b57c <mqtt_client_connect+0x2e4>)
 800b510:	480f      	ldr	r0, [pc, #60]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b512:	f00d fbc9 	bl	8018ca8 <iprintf>
 800b516:	f06f 0305 	mvn.w	r3, #5
 800b51a:	e124      	b.n	800b766 <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800b520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b522:	1c9a      	adds	r2, r3, #2
 800b524:	8bbb      	ldrh	r3, [r7, #28]
 800b526:	4413      	add	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b530:	d326      	bcc.n	800b580 <mqtt_client_connect+0x2e8>
 800b532:	4b05      	ldr	r3, [pc, #20]	; (800b548 <mqtt_client_connect+0x2b0>)
 800b534:	f240 5243 	movw	r2, #1347	; 0x543
 800b538:	490c      	ldr	r1, [pc, #48]	; (800b56c <mqtt_client_connect+0x2d4>)
 800b53a:	4805      	ldr	r0, [pc, #20]	; (800b550 <mqtt_client_connect+0x2b8>)
 800b53c:	f00d fbb4 	bl	8018ca8 <iprintf>
 800b540:	f06f 0305 	mvn.w	r3, #5
 800b544:	e10f      	b.n	800b766 <mqtt_client_connect+0x4ce>
 800b546:	bf00      	nop
 800b548:	08019ce8 	.word	0x08019ce8
 800b54c:	0801a168 	.word	0x0801a168
 800b550:	08019d60 	.word	0x08019d60
 800b554:	0801a18c 	.word	0x0801a18c
 800b558:	0801a1b4 	.word	0x0801a1b4
 800b55c:	0801a1e0 	.word	0x0801a1e0
 800b560:	0801a214 	.word	0x0801a214
 800b564:	0801a254 	.word	0x0801a254
 800b568:	0801a294 	.word	0x0801a294
 800b56c:	0801a2d0 	.word	0x0801a2d0
 800b570:	0801a300 	.word	0x0801a300
 800b574:	0801a340 	.word	0x0801a340
 800b578:	0801a384 	.word	0x0801a384
 800b57c:	0801a3c4 	.word	0x0801a3c4
    remaining_length = (u16_t)len;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800b584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b588:	f043 0302 	orr.w	r3, r3, #2
 800b58c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4618      	mov	r0, r3
 800b596:	f7f4 fe45 	bl	8000224 <strlen>
 800b59a:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a2:	d309      	bcc.n	800b5b8 <mqtt_client_connect+0x320>
 800b5a4:	4b72      	ldr	r3, [pc, #456]	; (800b770 <mqtt_client_connect+0x4d8>)
 800b5a6:	f240 524b 	movw	r2, #1355	; 0x54b
 800b5aa:	4972      	ldr	r1, [pc, #456]	; (800b774 <mqtt_client_connect+0x4dc>)
 800b5ac:	4872      	ldr	r0, [pc, #456]	; (800b778 <mqtt_client_connect+0x4e0>)
 800b5ae:	f00d fb7b 	bl	8018ca8 <iprintf>
 800b5b2:	f06f 0305 	mvn.w	r3, #5
 800b5b6:	e0d6      	b.n	800b766 <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800b5bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5be:	1c9a      	adds	r2, r3, #2
 800b5c0:	8afb      	ldrh	r3, [r7, #22]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800b5c6:	69bb      	ldr	r3, [r7, #24]
 800b5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5cc:	d309      	bcc.n	800b5e2 <mqtt_client_connect+0x34a>
 800b5ce:	4b68      	ldr	r3, [pc, #416]	; (800b770 <mqtt_client_connect+0x4d8>)
 800b5d0:	f240 524e 	movw	r2, #1358	; 0x54e
 800b5d4:	4969      	ldr	r1, [pc, #420]	; (800b77c <mqtt_client_connect+0x4e4>)
 800b5d6:	4868      	ldr	r0, [pc, #416]	; (800b778 <mqtt_client_connect+0x4e0>)
 800b5d8:	f00d fb66 	bl	8018ca8 <iprintf>
 800b5dc:	f06f 0305 	mvn.w	r3, #5
 800b5e0:	e0c1      	b.n	800b766 <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	33ec      	adds	r3, #236	; 0xec
 800b5ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe ff60 	bl	800a4b4 <mqtt_output_check_space>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800b5fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b5fe:	e0b2      	b.n	800b766 <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800b600:	2000      	movs	r0, #0
 800b602:	f003 fbdd 	bl	800edc0 <tcp_new_ip_type>
 800b606:	4602      	mov	r2, r0
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <mqtt_client_connect+0x382>
    return ERR_MEM;
 800b614:	f04f 33ff 	mov.w	r3, #4294967295
 800b618:	e0a5      	b.n	800b766 <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	4618      	mov	r0, r3
 800b622:	f003 fbdb 	bl	800eddc <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	68db      	ldr	r3, [r3, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	4954      	ldr	r1, [pc, #336]	; (800b780 <mqtt_client_connect+0x4e8>)
 800b62e:	4618      	mov	r0, r3
 800b630:	f002 fb04 	bl	800dc3c <tcp_bind>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b63a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f040 8084 	bne.w	800b74c <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	68d8      	ldr	r0, [r3, #12]
 800b648:	88fa      	ldrh	r2, [r7, #6]
 800b64a:	4b4e      	ldr	r3, [pc, #312]	; (800b784 <mqtt_client_connect+0x4ec>)
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	f002 fc7d 	bl	800df4c <tcp_connect>
 800b652:	4603      	mov	r3, r0
 800b654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800b658:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d177      	bne.n	800b750 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	68db      	ldr	r3, [r3, #12]
 800b664:	4948      	ldr	r1, [pc, #288]	; (800b788 <mqtt_client_connect+0x4f0>)
 800b666:	4618      	mov	r0, r3
 800b668:	f003 fc0e 	bl	800ee88 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2201      	movs	r2, #1
 800b670:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	2300      	movs	r3, #0
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2300      	movs	r3, #0
 800b682:	2200      	movs	r2, #0
 800b684:	2101      	movs	r1, #1
 800b686:	f7fe feca 	bl	800a41e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	33ec      	adds	r3, #236	; 0xec
 800b68e:	2204      	movs	r2, #4
 800b690:	493e      	ldr	r1, [pc, #248]	; (800b78c <mqtt_client_connect+0x4f4>)
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe fe97 	bl	800a3c6 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	33ec      	adds	r3, #236	; 0xec
 800b69c:	2104      	movs	r1, #4
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fe4c 	bl	800a33c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	33ec      	adds	r3, #236	; 0xec
 800b6a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fe44 	bl	800a33c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800b6ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6bc:	899b      	ldrh	r3, [r3, #12]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	f7fe fe4a 	bl	800a35a <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	8afa      	ldrh	r2, [r7, #22]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7fe fe77 	bl	800a3c6 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800b6d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d015      	beq.n	800b710 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	f7fe fe66 	bl	800a3c6 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b702:	695b      	ldr	r3, [r3, #20]
 800b704:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b708:	b292      	uxth	r2, r2
 800b70a:	4619      	mov	r1, r3
 800b70c:	f7fe fe5b 	bl	800a3c6 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800b710:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b714:	2b00      	cmp	r3, #0
 800b716:	da08      	bge.n	800b72a <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	8bfa      	ldrh	r2, [r7, #30]
 800b724:	4619      	mov	r1, r3
 800b726:	f7fe fe4e 	bl	800a3c6 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800b72a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b732:	2b00      	cmp	r3, #0
 800b734:	d008      	beq.n	800b748 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	8bba      	ldrh	r2, [r7, #28]
 800b742:	4619      	mov	r1, r3
 800b744:	f7fe fe3f 	bl	800a3c6 <mqtt_output_append_string>
  }
  return ERR_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	e00c      	b.n	800b766 <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800b74c:	bf00      	nop
 800b74e:	e000      	b.n	800b752 <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800b750:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	4618      	mov	r0, r3
 800b758:	f002 fa64 	bl	800dc24 <tcp_abort>
  client->conn = NULL;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	60da      	str	r2, [r3, #12]
  return err;
 800b762:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b766:	4618      	mov	r0, r3
 800b768:	3728      	adds	r7, #40	; 0x28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	08019ce8 	.word	0x08019ce8
 800b774:	0801a408 	.word	0x0801a408
 800b778:	08019d60 	.word	0x08019d60
 800b77c:	0801a2d0 	.word	0x0801a2d0
 800b780:	0801d324 	.word	0x0801d324
 800b784:	0800ae79 	.word	0x0800ae79
 800b788:	0800ae05 	.word	0x0800ae05
 800b78c:	0801a444 	.word	0x0801a444

0800b790 <mqtt_disconnect>:
 * Disconnect from MQTT server
 * @param client MQTT client
 */
void
mqtt_disconnect(mqtt_client_t *client)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_disconnect: client != NULL", client);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <mqtt_disconnect+0x1c>
 800b79e:	4b0b      	ldr	r3, [pc, #44]	; (800b7cc <mqtt_disconnect+0x3c>)
 800b7a0:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800b7a4:	490a      	ldr	r1, [pc, #40]	; (800b7d0 <mqtt_disconnect+0x40>)
 800b7a6:	480b      	ldr	r0, [pc, #44]	; (800b7d4 <mqtt_disconnect+0x44>)
 800b7a8:	f00d fa7e 	bl	8018ca8 <iprintf>
  /* If connection in not already closed */
  if (client->conn_state != TCP_DISCONNECTED) {
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	7a9b      	ldrb	r3, [r3, #10]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <mqtt_disconnect+0x32>
    /* Set conn_state before calling mqtt_close to prevent callback from being called */
    client->conn_state = TCP_DISCONNECTED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	729a      	strb	r2, [r3, #10]
    mqtt_close(client, (mqtt_connection_status_t)0);
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7fe feab 	bl	800a518 <mqtt_close>
  }
}
 800b7c2:	bf00      	nop
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	08019ce8 	.word	0x08019ce8
 800b7d0:	0801a44c 	.word	0x0801a44c
 800b7d4:	08019d60 	.word	0x08019d60

0800b7d8 <mqtt_client_is_connected>:
 * @param client MQTT client
 * @return 1 if connected to server, 0 otherwise
 */
u8_t
mqtt_client_is_connected(mqtt_client_t *client)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_is_connected: client != NULL", client);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d106      	bne.n	800b7f4 <mqtt_client_is_connected+0x1c>
 800b7e6:	4b09      	ldr	r3, [pc, #36]	; (800b80c <mqtt_client_is_connected+0x34>)
 800b7e8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b7ec:	4908      	ldr	r1, [pc, #32]	; (800b810 <mqtt_client_is_connected+0x38>)
 800b7ee:	4809      	ldr	r0, [pc, #36]	; (800b814 <mqtt_client_is_connected+0x3c>)
 800b7f0:	f00d fa5a 	bl	8018ca8 <iprintf>
  return client->conn_state == MQTT_CONNECTED;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	7a9b      	ldrb	r3, [r3, #10]
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	bf0c      	ite	eq
 800b7fc:	2301      	moveq	r3, #1
 800b7fe:	2300      	movne	r3, #0
 800b800:	b2db      	uxtb	r3, r3
}
 800b802:	4618      	mov	r0, r3
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	08019ce8 	.word	0x08019ce8
 800b810:	0801a46c 	.word	0x0801a46c
 800b814:	08019d60 	.word	0x08019d60

0800b818 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b822:	88fb      	ldrh	r3, [r7, #6]
 800b824:	021b      	lsls	r3, r3, #8
 800b826:	b21a      	sxth	r2, r3
 800b828:	88fb      	ldrh	r3, [r7, #6]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	b21b      	sxth	r3, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	b21b      	sxth	r3, r3
 800b834:	b29b      	uxth	r3, r3
}
 800b836:	4618      	mov	r0, r3
 800b838:	370c      	adds	r7, #12
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr

0800b842 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	061a      	lsls	r2, r3, #24
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	021b      	lsls	r3, r3, #8
 800b852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b856:	431a      	orrs	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	0a1b      	lsrs	r3, r3, #8
 800b85c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b860:	431a      	orrs	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	0e1b      	lsrs	r3, r3, #24
 800b866:	4313      	orrs	r3, r2
}
 800b868:	4618      	mov	r0, r3
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b87a:	2300      	movs	r3, #0
 800b87c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b87e:	f00c ffaf 	bl	80187e0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b882:	f000 f8d5 	bl	800ba30 <mem_init>
  memp_init();
 800b886:	f000 fc31 	bl	800c0ec <memp_init>
  pbuf_init();
  netif_init();
 800b88a:	f000 fd3d 	bl	800c308 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b88e:	f008 f8e3 	bl	8013a58 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b892:	f001 fecd 	bl	800d630 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b896:	f007 ffeb 	bl	8013870 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <ptr_to_mem+0x20>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	4413      	add	r3, r2
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20009b24 	.word	0x20009b24

0800b8c8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b8d0:	4b05      	ldr	r3, [pc, #20]	; (800b8e8 <mem_to_ptr+0x20>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	b29b      	uxth	r3, r3
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20009b24 	.word	0x20009b24

0800b8ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b8f4:	4b45      	ldr	r3, [pc, #276]	; (800ba0c <plug_holes+0x120>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d206      	bcs.n	800b90c <plug_holes+0x20>
 800b8fe:	4b44      	ldr	r3, [pc, #272]	; (800ba10 <plug_holes+0x124>)
 800b900:	f240 12df 	movw	r2, #479	; 0x1df
 800b904:	4943      	ldr	r1, [pc, #268]	; (800ba14 <plug_holes+0x128>)
 800b906:	4844      	ldr	r0, [pc, #272]	; (800ba18 <plug_holes+0x12c>)
 800b908:	f00d f9ce 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b90c:	4b43      	ldr	r3, [pc, #268]	; (800ba1c <plug_holes+0x130>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d306      	bcc.n	800b924 <plug_holes+0x38>
 800b916:	4b3e      	ldr	r3, [pc, #248]	; (800ba10 <plug_holes+0x124>)
 800b918:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b91c:	4940      	ldr	r1, [pc, #256]	; (800ba20 <plug_holes+0x134>)
 800b91e:	483e      	ldr	r0, [pc, #248]	; (800ba18 <plug_holes+0x12c>)
 800b920:	f00d f9c2 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	791b      	ldrb	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d006      	beq.n	800b93a <plug_holes+0x4e>
 800b92c:	4b38      	ldr	r3, [pc, #224]	; (800ba10 <plug_holes+0x124>)
 800b92e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b932:	493c      	ldr	r1, [pc, #240]	; (800ba24 <plug_holes+0x138>)
 800b934:	4838      	ldr	r0, [pc, #224]	; (800ba18 <plug_holes+0x12c>)
 800b936:	f00d f9b7 	bl	8018ca8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b942:	d906      	bls.n	800b952 <plug_holes+0x66>
 800b944:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <plug_holes+0x124>)
 800b946:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b94a:	4937      	ldr	r1, [pc, #220]	; (800ba28 <plug_holes+0x13c>)
 800b94c:	4832      	ldr	r0, [pc, #200]	; (800ba18 <plug_holes+0x12c>)
 800b94e:	f00d f9ab 	bl	8018ca8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff ffa4 	bl	800b8a4 <ptr_to_mem>
 800b95c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	429a      	cmp	r2, r3
 800b964:	d024      	beq.n	800b9b0 <plug_holes+0xc4>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d120      	bne.n	800b9b0 <plug_holes+0xc4>
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <plug_holes+0x130>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d01b      	beq.n	800b9b0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b978:	4b2c      	ldr	r3, [pc, #176]	; (800ba2c <plug_holes+0x140>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d102      	bne.n	800b988 <plug_holes+0x9c>
      lfree = mem;
 800b982:	4a2a      	ldr	r2, [pc, #168]	; (800ba2c <plug_holes+0x140>)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	881a      	ldrh	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b998:	d00a      	beq.n	800b9b0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff ff80 	bl	800b8a4 <ptr_to_mem>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ff8e 	bl	800b8c8 <mem_to_ptr>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	885b      	ldrh	r3, [r3, #2]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff ff75 	bl	800b8a4 <ptr_to_mem>
 800b9ba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d01f      	beq.n	800ba04 <plug_holes+0x118>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	791b      	ldrb	r3, [r3, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d11b      	bne.n	800ba04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b9cc:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <plug_holes+0x140>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d102      	bne.n	800b9dc <plug_holes+0xf0>
      lfree = pmem;
 800b9d6:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <plug_holes+0x140>)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	881a      	ldrh	r2, [r3, #0]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9ec:	d00a      	beq.n	800ba04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff ff56 	bl	800b8a4 <ptr_to_mem>
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	68b8      	ldr	r0, [r7, #8]
 800b9fc:	f7ff ff64 	bl	800b8c8 <mem_to_ptr>
 800ba00:	4603      	mov	r3, r0
 800ba02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba04:	bf00      	nop
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd90      	pop	{r4, r7, pc}
 800ba0c:	20009b24 	.word	0x20009b24
 800ba10:	0801a498 	.word	0x0801a498
 800ba14:	0801a4c8 	.word	0x0801a4c8
 800ba18:	0801a4e0 	.word	0x0801a4e0
 800ba1c:	20009b28 	.word	0x20009b28
 800ba20:	0801a508 	.word	0x0801a508
 800ba24:	0801a524 	.word	0x0801a524
 800ba28:	0801a540 	.word	0x0801a540
 800ba2c:	20009b30 	.word	0x20009b30

0800ba30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba36:	4b1f      	ldr	r3, [pc, #124]	; (800bab4 <mem_init+0x84>)
 800ba38:	3303      	adds	r3, #3
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4b1d      	ldr	r3, [pc, #116]	; (800bab8 <mem_init+0x88>)
 800ba42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba44:	4b1c      	ldr	r3, [pc, #112]	; (800bab8 <mem_init+0x88>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ba5e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ba62:	f7ff ff1f 	bl	800b8a4 <ptr_to_mem>
 800ba66:	4603      	mov	r3, r0
 800ba68:	4a14      	ldr	r2, [pc, #80]	; (800babc <mem_init+0x8c>)
 800ba6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ba6c:	4b13      	ldr	r3, [pc, #76]	; (800babc <mem_init+0x8c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2201      	movs	r2, #1
 800ba72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ba74:	4b11      	ldr	r3, [pc, #68]	; (800babc <mem_init+0x8c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <mem_init+0x8c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba88:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <mem_init+0x88>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a0c      	ldr	r2, [pc, #48]	; (800bac0 <mem_init+0x90>)
 800ba8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba90:	480c      	ldr	r0, [pc, #48]	; (800bac4 <mem_init+0x94>)
 800ba92:	f00c feb3 	bl	80187fc <sys_mutex_new>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d006      	beq.n	800baaa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <mem_init+0x98>)
 800ba9e:	f240 221f 	movw	r2, #543	; 0x21f
 800baa2:	490a      	ldr	r1, [pc, #40]	; (800bacc <mem_init+0x9c>)
 800baa4:	480a      	ldr	r0, [pc, #40]	; (800bad0 <mem_init+0xa0>)
 800baa6:	f00d f8ff 	bl	8018ca8 <iprintf>
  }
}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	200094d0 	.word	0x200094d0
 800bab8:	20009b24 	.word	0x20009b24
 800babc:	20009b28 	.word	0x20009b28
 800bac0:	20009b30 	.word	0x20009b30
 800bac4:	20009b2c 	.word	0x20009b2c
 800bac8:	0801a498 	.word	0x0801a498
 800bacc:	0801a56c 	.word	0x0801a56c
 800bad0:	0801a4e0 	.word	0x0801a4e0

0800bad4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fef3 	bl	800b8c8 <mem_to_ptr>
 800bae2:	4603      	mov	r3, r0
 800bae4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff feda 	bl	800b8a4 <ptr_to_mem>
 800baf0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fed4 	bl	800b8a4 <ptr_to_mem>
 800bafc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb06:	d818      	bhi.n	800bb3a <mem_link_valid+0x66>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb10:	d813      	bhi.n	800bb3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb16:	8afa      	ldrh	r2, [r7, #22]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d004      	beq.n	800bb26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	8afa      	ldrh	r2, [r7, #22]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d109      	bne.n	800bb3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb26:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <mem_link_valid+0x74>)
 800bb28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d006      	beq.n	800bb3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	885b      	ldrh	r3, [r3, #2]
 800bb34:	8afa      	ldrh	r2, [r7, #22]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d001      	beq.n	800bb3e <mem_link_valid+0x6a>
    return 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e000      	b.n	800bb40 <mem_link_valid+0x6c>
  }
  return 1;
 800bb3e:	2301      	movs	r3, #1
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20009b28 	.word	0x20009b28

0800bb4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d070      	beq.n	800bc3c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00d      	beq.n	800bb80 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bb64:	4b37      	ldr	r3, [pc, #220]	; (800bc44 <mem_free+0xf8>)
 800bb66:	f240 2273 	movw	r2, #627	; 0x273
 800bb6a:	4937      	ldr	r1, [pc, #220]	; (800bc48 <mem_free+0xfc>)
 800bb6c:	4837      	ldr	r0, [pc, #220]	; (800bc4c <mem_free+0x100>)
 800bb6e:	f00d f89b 	bl	8018ca8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb72:	f00c fea1 	bl	80188b8 <sys_arch_protect>
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f00c feab 	bl	80188d4 <sys_arch_unprotect>
    return;
 800bb7e:	e05e      	b.n	800bc3e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3b08      	subs	r3, #8
 800bb84:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bb86:	4b32      	ldr	r3, [pc, #200]	; (800bc50 <mem_free+0x104>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d306      	bcc.n	800bb9e <mem_free+0x52>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f103 020c 	add.w	r2, r3, #12
 800bb96:	4b2f      	ldr	r3, [pc, #188]	; (800bc54 <mem_free+0x108>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d90d      	bls.n	800bbba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bb9e:	4b29      	ldr	r3, [pc, #164]	; (800bc44 <mem_free+0xf8>)
 800bba0:	f240 227f 	movw	r2, #639	; 0x27f
 800bba4:	492c      	ldr	r1, [pc, #176]	; (800bc58 <mem_free+0x10c>)
 800bba6:	4829      	ldr	r0, [pc, #164]	; (800bc4c <mem_free+0x100>)
 800bba8:	f00d f87e 	bl	8018ca8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbac:	f00c fe84 	bl	80188b8 <sys_arch_protect>
 800bbb0:	6138      	str	r0, [r7, #16]
 800bbb2:	6938      	ldr	r0, [r7, #16]
 800bbb4:	f00c fe8e 	bl	80188d4 <sys_arch_unprotect>
    return;
 800bbb8:	e041      	b.n	800bc3e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbba:	4828      	ldr	r0, [pc, #160]	; (800bc5c <mem_free+0x110>)
 800bbbc:	f00c fe3a 	bl	8018834 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	791b      	ldrb	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d110      	bne.n	800bbea <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <mem_free+0xf8>)
 800bbca:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bbce:	4924      	ldr	r1, [pc, #144]	; (800bc60 <mem_free+0x114>)
 800bbd0:	481e      	ldr	r0, [pc, #120]	; (800bc4c <mem_free+0x100>)
 800bbd2:	f00d f869 	bl	8018ca8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbd6:	4821      	ldr	r0, [pc, #132]	; (800bc5c <mem_free+0x110>)
 800bbd8:	f00c fe3b 	bl	8018852 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbdc:	f00c fe6c 	bl	80188b8 <sys_arch_protect>
 800bbe0:	6178      	str	r0, [r7, #20]
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f00c fe76 	bl	80188d4 <sys_arch_unprotect>
    return;
 800bbe8:	e029      	b.n	800bc3e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bbea:	69f8      	ldr	r0, [r7, #28]
 800bbec:	f7ff ff72 	bl	800bad4 <mem_link_valid>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d110      	bne.n	800bc18 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <mem_free+0xf8>)
 800bbf8:	f240 2295 	movw	r2, #661	; 0x295
 800bbfc:	4919      	ldr	r1, [pc, #100]	; (800bc64 <mem_free+0x118>)
 800bbfe:	4813      	ldr	r0, [pc, #76]	; (800bc4c <mem_free+0x100>)
 800bc00:	f00d f852 	bl	8018ca8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc04:	4815      	ldr	r0, [pc, #84]	; (800bc5c <mem_free+0x110>)
 800bc06:	f00c fe24 	bl	8018852 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc0a:	f00c fe55 	bl	80188b8 <sys_arch_protect>
 800bc0e:	61b8      	str	r0, [r7, #24]
 800bc10:	69b8      	ldr	r0, [r7, #24]
 800bc12:	f00c fe5f 	bl	80188d4 <sys_arch_unprotect>
    return;
 800bc16:	e012      	b.n	800bc3e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <mem_free+0x11c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	69fa      	ldr	r2, [r7, #28]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d202      	bcs.n	800bc2e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc28:	4a0f      	ldr	r2, [pc, #60]	; (800bc68 <mem_free+0x11c>)
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc2e:	69f8      	ldr	r0, [r7, #28]
 800bc30:	f7ff fe5c 	bl	800b8ec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc34:	4809      	ldr	r0, [pc, #36]	; (800bc5c <mem_free+0x110>)
 800bc36:	f00c fe0c 	bl	8018852 <sys_mutex_unlock>
 800bc3a:	e000      	b.n	800bc3e <mem_free+0xf2>
    return;
 800bc3c:	bf00      	nop
}
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0801a498 	.word	0x0801a498
 800bc48:	0801a588 	.word	0x0801a588
 800bc4c:	0801a4e0 	.word	0x0801a4e0
 800bc50:	20009b24 	.word	0x20009b24
 800bc54:	20009b28 	.word	0x20009b28
 800bc58:	0801a5ac 	.word	0x0801a5ac
 800bc5c:	20009b2c 	.word	0x20009b2c
 800bc60:	0801a5c8 	.word	0x0801a5c8
 800bc64:	0801a5f0 	.word	0x0801a5f0
 800bc68:	20009b30 	.word	0x20009b30

0800bc6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bc78:	887b      	ldrh	r3, [r7, #2]
 800bc7a:	3303      	adds	r3, #3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bc84:	8bfb      	ldrh	r3, [r7, #30]
 800bc86:	2b0b      	cmp	r3, #11
 800bc88:	d801      	bhi.n	800bc8e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bc8a:	230c      	movs	r3, #12
 800bc8c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bc8e:	8bfb      	ldrh	r3, [r7, #30]
 800bc90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc94:	d803      	bhi.n	800bc9e <mem_trim+0x32>
 800bc96:	8bfa      	ldrh	r2, [r7, #30]
 800bc98:	887b      	ldrh	r3, [r7, #2]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d201      	bcs.n	800bca2 <mem_trim+0x36>
    return NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e0d8      	b.n	800be54 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bca2:	4b6e      	ldr	r3, [pc, #440]	; (800be5c <mem_trim+0x1f0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d304      	bcc.n	800bcb6 <mem_trim+0x4a>
 800bcac:	4b6c      	ldr	r3, [pc, #432]	; (800be60 <mem_trim+0x1f4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d306      	bcc.n	800bcc4 <mem_trim+0x58>
 800bcb6:	4b6b      	ldr	r3, [pc, #428]	; (800be64 <mem_trim+0x1f8>)
 800bcb8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bcbc:	496a      	ldr	r1, [pc, #424]	; (800be68 <mem_trim+0x1fc>)
 800bcbe:	486b      	ldr	r0, [pc, #428]	; (800be6c <mem_trim+0x200>)
 800bcc0:	f00c fff2 	bl	8018ca8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bcc4:	4b65      	ldr	r3, [pc, #404]	; (800be5c <mem_trim+0x1f0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d304      	bcc.n	800bcd8 <mem_trim+0x6c>
 800bcce:	4b64      	ldr	r3, [pc, #400]	; (800be60 <mem_trim+0x1f4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d307      	bcc.n	800bce8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bcd8:	f00c fdee 	bl	80188b8 <sys_arch_protect>
 800bcdc:	60b8      	str	r0, [r7, #8]
 800bcde:	68b8      	ldr	r0, [r7, #8]
 800bce0:	f00c fdf8 	bl	80188d4 <sys_arch_unprotect>
    return rmem;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	e0b5      	b.n	800be54 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3b08      	subs	r3, #8
 800bcec:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bcee:	69b8      	ldr	r0, [r7, #24]
 800bcf0:	f7ff fdea 	bl	800b8c8 <mem_to_ptr>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	881a      	ldrh	r2, [r3, #0]
 800bcfc:	8afb      	ldrh	r3, [r7, #22]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3b08      	subs	r3, #8
 800bd04:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd06:	8bfa      	ldrh	r2, [r7, #30]
 800bd08:	8abb      	ldrh	r3, [r7, #20]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d906      	bls.n	800bd1c <mem_trim+0xb0>
 800bd0e:	4b55      	ldr	r3, [pc, #340]	; (800be64 <mem_trim+0x1f8>)
 800bd10:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd14:	4956      	ldr	r1, [pc, #344]	; (800be70 <mem_trim+0x204>)
 800bd16:	4855      	ldr	r0, [pc, #340]	; (800be6c <mem_trim+0x200>)
 800bd18:	f00c ffc6 	bl	8018ca8 <iprintf>
  if (newsize > size) {
 800bd1c:	8bfa      	ldrh	r2, [r7, #30]
 800bd1e:	8abb      	ldrh	r3, [r7, #20]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d901      	bls.n	800bd28 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e095      	b.n	800be54 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd28:	8bfa      	ldrh	r2, [r7, #30]
 800bd2a:	8abb      	ldrh	r3, [r7, #20]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d101      	bne.n	800bd34 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	e08f      	b.n	800be54 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd34:	484f      	ldr	r0, [pc, #316]	; (800be74 <mem_trim+0x208>)
 800bd36:	f00c fd7d 	bl	8018834 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fdb0 	bl	800b8a4 <ptr_to_mem>
 800bd44:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	791b      	ldrb	r3, [r3, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d13f      	bne.n	800bdce <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd56:	d106      	bne.n	800bd66 <mem_trim+0xfa>
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <mem_trim+0x1f8>)
 800bd5a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd5e:	4946      	ldr	r1, [pc, #280]	; (800be78 <mem_trim+0x20c>)
 800bd60:	4842      	ldr	r0, [pc, #264]	; (800be6c <mem_trim+0x200>)
 800bd62:	f00c ffa1 	bl	8018ca8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd6c:	8afa      	ldrh	r2, [r7, #22]
 800bd6e:	8bfb      	ldrh	r3, [r7, #30]
 800bd70:	4413      	add	r3, r2
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3308      	adds	r3, #8
 800bd76:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bd78:	4b40      	ldr	r3, [pc, #256]	; (800be7c <mem_trim+0x210>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d106      	bne.n	800bd90 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bd82:	89fb      	ldrh	r3, [r7, #14]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fd8d 	bl	800b8a4 <ptr_to_mem>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	4a3b      	ldr	r2, [pc, #236]	; (800be7c <mem_trim+0x210>)
 800bd8e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bd90:	89fb      	ldrh	r3, [r7, #14]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fd86 	bl	800b8a4 <ptr_to_mem>
 800bd98:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	89ba      	ldrh	r2, [r7, #12]
 800bda4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	8afa      	ldrh	r2, [r7, #22]
 800bdaa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	89fa      	ldrh	r2, [r7, #14]
 800bdb0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdba:	d047      	beq.n	800be4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fd6f 	bl	800b8a4 <ptr_to_mem>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	8053      	strh	r3, [r2, #2]
 800bdcc:	e03e      	b.n	800be4c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bdce:	8bfb      	ldrh	r3, [r7, #30]
 800bdd0:	f103 0214 	add.w	r2, r3, #20
 800bdd4:	8abb      	ldrh	r3, [r7, #20]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d838      	bhi.n	800be4c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdda:	8afa      	ldrh	r2, [r7, #22]
 800bddc:	8bfb      	ldrh	r3, [r7, #30]
 800bdde:	4413      	add	r3, r2
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	3308      	adds	r3, #8
 800bde4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdee:	d106      	bne.n	800bdfe <mem_trim+0x192>
 800bdf0:	4b1c      	ldr	r3, [pc, #112]	; (800be64 <mem_trim+0x1f8>)
 800bdf2:	f240 3216 	movw	r2, #790	; 0x316
 800bdf6:	4920      	ldr	r1, [pc, #128]	; (800be78 <mem_trim+0x20c>)
 800bdf8:	481c      	ldr	r0, [pc, #112]	; (800be6c <mem_trim+0x200>)
 800bdfa:	f00c ff55 	bl	8018ca8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bdfe:	89fb      	ldrh	r3, [r7, #14]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fd4f 	bl	800b8a4 <ptr_to_mem>
 800be06:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <mem_trim+0x210>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d202      	bcs.n	800be18 <mem_trim+0x1ac>
      lfree = mem2;
 800be12:	4a1a      	ldr	r2, [pc, #104]	; (800be7c <mem_trim+0x210>)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	2200      	movs	r2, #0
 800be1c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	881a      	ldrh	r2, [r3, #0]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	8afa      	ldrh	r2, [r7, #22]
 800be2a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	89fa      	ldrh	r2, [r7, #14]
 800be30:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be3a:	d007      	beq.n	800be4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fd2f 	bl	800b8a4 <ptr_to_mem>
 800be46:	4602      	mov	r2, r0
 800be48:	89fb      	ldrh	r3, [r7, #14]
 800be4a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be4c:	4809      	ldr	r0, [pc, #36]	; (800be74 <mem_trim+0x208>)
 800be4e:	f00c fd00 	bl	8018852 <sys_mutex_unlock>
  return rmem;
 800be52:	687b      	ldr	r3, [r7, #4]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3720      	adds	r7, #32
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20009b24 	.word	0x20009b24
 800be60:	20009b28 	.word	0x20009b28
 800be64:	0801a498 	.word	0x0801a498
 800be68:	0801a624 	.word	0x0801a624
 800be6c:	0801a4e0 	.word	0x0801a4e0
 800be70:	0801a63c 	.word	0x0801a63c
 800be74:	20009b2c 	.word	0x20009b2c
 800be78:	0801a65c 	.word	0x0801a65c
 800be7c:	20009b30 	.word	0x20009b30

0800be80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <mem_malloc+0x14>
    return NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	e0e2      	b.n	800c05a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	3303      	adds	r3, #3
 800be98:	b29b      	uxth	r3, r3
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bea0:	8bbb      	ldrh	r3, [r7, #28]
 800bea2:	2b0b      	cmp	r3, #11
 800bea4:	d801      	bhi.n	800beaa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bea6:	230c      	movs	r3, #12
 800bea8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800beaa:	8bbb      	ldrh	r3, [r7, #28]
 800beac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800beb0:	d803      	bhi.n	800beba <mem_malloc+0x3a>
 800beb2:	8bba      	ldrh	r2, [r7, #28]
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d201      	bcs.n	800bebe <mem_malloc+0x3e>
    return NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	e0cd      	b.n	800c05a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bebe:	4869      	ldr	r0, [pc, #420]	; (800c064 <mem_malloc+0x1e4>)
 800bec0:	f00c fcb8 	bl	8018834 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bec4:	4b68      	ldr	r3, [pc, #416]	; (800c068 <mem_malloc+0x1e8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff fcfd 	bl	800b8c8 <mem_to_ptr>
 800bece:	4603      	mov	r3, r0
 800bed0:	83fb      	strh	r3, [r7, #30]
 800bed2:	e0b7      	b.n	800c044 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bed4:	8bfb      	ldrh	r3, [r7, #30]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fce4 	bl	800b8a4 <ptr_to_mem>
 800bedc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	791b      	ldrb	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f040 80a7 	bne.w	800c036 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	8bfb      	ldrh	r3, [r7, #30]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	f1a3 0208 	sub.w	r2, r3, #8
 800bef6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bef8:	429a      	cmp	r2, r3
 800befa:	f0c0 809c 	bcc.w	800c036 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	8bfb      	ldrh	r3, [r7, #30]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	f1a3 0208 	sub.w	r2, r3, #8
 800bf0c:	8bbb      	ldrh	r3, [r7, #28]
 800bf0e:	3314      	adds	r3, #20
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d333      	bcc.n	800bf7c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf14:	8bfa      	ldrh	r2, [r7, #30]
 800bf16:	8bbb      	ldrh	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bf20:	8a7b      	ldrh	r3, [r7, #18]
 800bf22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf26:	d106      	bne.n	800bf36 <mem_malloc+0xb6>
 800bf28:	4b50      	ldr	r3, [pc, #320]	; (800c06c <mem_malloc+0x1ec>)
 800bf2a:	f240 3287 	movw	r2, #903	; 0x387
 800bf2e:	4950      	ldr	r1, [pc, #320]	; (800c070 <mem_malloc+0x1f0>)
 800bf30:	4850      	ldr	r0, [pc, #320]	; (800c074 <mem_malloc+0x1f4>)
 800bf32:	f00c feb9 	bl	8018ca8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf36:	8a7b      	ldrh	r3, [r7, #18]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fcb3 	bl	800b8a4 <ptr_to_mem>
 800bf3e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	881a      	ldrh	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8bfa      	ldrh	r2, [r7, #30]
 800bf52:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	8a7a      	ldrh	r2, [r7, #18]
 800bf58:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	881b      	ldrh	r3, [r3, #0]
 800bf64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf68:	d00b      	beq.n	800bf82 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff fc98 	bl	800b8a4 <ptr_to_mem>
 800bf74:	4602      	mov	r2, r0
 800bf76:	8a7b      	ldrh	r3, [r7, #18]
 800bf78:	8053      	strh	r3, [r2, #2]
 800bf7a:	e002      	b.n	800bf82 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bf82:	4b39      	ldr	r3, [pc, #228]	; (800c068 <mem_malloc+0x1e8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d127      	bne.n	800bfdc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bf8c:	4b36      	ldr	r3, [pc, #216]	; (800c068 <mem_malloc+0x1e8>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bf92:	e005      	b.n	800bfa0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff fc83 	bl	800b8a4 <ptr_to_mem>
 800bf9e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <mem_malloc+0x132>
 800bfa8:	4b33      	ldr	r3, [pc, #204]	; (800c078 <mem_malloc+0x1f8>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d1f0      	bne.n	800bf94 <mem_malloc+0x114>
          }
          lfree = cur;
 800bfb2:	4a2d      	ldr	r2, [pc, #180]	; (800c068 <mem_malloc+0x1e8>)
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bfb8:	4b2b      	ldr	r3, [pc, #172]	; (800c068 <mem_malloc+0x1e8>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <mem_malloc+0x1f8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d00b      	beq.n	800bfdc <mem_malloc+0x15c>
 800bfc4:	4b28      	ldr	r3, [pc, #160]	; (800c068 <mem_malloc+0x1e8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	791b      	ldrb	r3, [r3, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d006      	beq.n	800bfdc <mem_malloc+0x15c>
 800bfce:	4b27      	ldr	r3, [pc, #156]	; (800c06c <mem_malloc+0x1ec>)
 800bfd0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bfd4:	4929      	ldr	r1, [pc, #164]	; (800c07c <mem_malloc+0x1fc>)
 800bfd6:	4827      	ldr	r0, [pc, #156]	; (800c074 <mem_malloc+0x1f4>)
 800bfd8:	f00c fe66 	bl	8018ca8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bfdc:	4821      	ldr	r0, [pc, #132]	; (800c064 <mem_malloc+0x1e4>)
 800bfde:	f00c fc38 	bl	8018852 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bfe2:	8bba      	ldrh	r2, [r7, #28]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3308      	adds	r3, #8
 800bfea:	4a23      	ldr	r2, [pc, #140]	; (800c078 <mem_malloc+0x1f8>)
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d906      	bls.n	800c000 <mem_malloc+0x180>
 800bff2:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <mem_malloc+0x1ec>)
 800bff4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bff8:	4921      	ldr	r1, [pc, #132]	; (800c080 <mem_malloc+0x200>)
 800bffa:	481e      	ldr	r0, [pc, #120]	; (800c074 <mem_malloc+0x1f4>)
 800bffc:	f00c fe54 	bl	8018ca8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	f003 0303 	and.w	r3, r3, #3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d006      	beq.n	800c018 <mem_malloc+0x198>
 800c00a:	4b18      	ldr	r3, [pc, #96]	; (800c06c <mem_malloc+0x1ec>)
 800c00c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c010:	491c      	ldr	r1, [pc, #112]	; (800c084 <mem_malloc+0x204>)
 800c012:	4818      	ldr	r0, [pc, #96]	; (800c074 <mem_malloc+0x1f4>)
 800c014:	f00c fe48 	bl	8018ca8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <mem_malloc+0x1b0>
 800c022:	4b12      	ldr	r3, [pc, #72]	; (800c06c <mem_malloc+0x1ec>)
 800c024:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c028:	4917      	ldr	r1, [pc, #92]	; (800c088 <mem_malloc+0x208>)
 800c02a:	4812      	ldr	r0, [pc, #72]	; (800c074 <mem_malloc+0x1f4>)
 800c02c:	f00c fe3c 	bl	8018ca8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	3308      	adds	r3, #8
 800c034:	e011      	b.n	800c05a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c036:	8bfb      	ldrh	r3, [r7, #30]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fc33 	bl	800b8a4 <ptr_to_mem>
 800c03e:	4603      	mov	r3, r0
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c044:	8bfa      	ldrh	r2, [r7, #30]
 800c046:	8bbb      	ldrh	r3, [r7, #28]
 800c048:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c04c:	429a      	cmp	r2, r3
 800c04e:	f4ff af41 	bcc.w	800bed4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c052:	4804      	ldr	r0, [pc, #16]	; (800c064 <mem_malloc+0x1e4>)
 800c054:	f00c fbfd 	bl	8018852 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20009b2c 	.word	0x20009b2c
 800c068:	20009b30 	.word	0x20009b30
 800c06c:	0801a498 	.word	0x0801a498
 800c070:	0801a65c 	.word	0x0801a65c
 800c074:	0801a4e0 	.word	0x0801a4e0
 800c078:	20009b28 	.word	0x20009b28
 800c07c:	0801a670 	.word	0x0801a670
 800c080:	0801a68c 	.word	0x0801a68c
 800c084:	0801a6bc 	.word	0x0801a6bc
 800c088:	0801a6ec 	.word	0x0801a6ec

0800c08c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	f023 0303 	bic.w	r3, r3, #3
 800c0a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e011      	b.n	800c0d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	885b      	ldrh	r3, [r3, #2]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	dbe7      	blt.n	800c0ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c0de:	bf00      	nop
 800c0e0:	bf00      	nop
 800c0e2:	3714      	adds	r7, #20
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ea:	4770      	bx	lr

0800c0ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	80fb      	strh	r3, [r7, #6]
 800c0f6:	e009      	b.n	800c10c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	4a08      	ldr	r2, [pc, #32]	; (800c11c <memp_init+0x30>)
 800c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff ffc3 	bl	800c08c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	3301      	adds	r3, #1
 800c10a:	80fb      	strh	r3, [r7, #6]
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	2b0c      	cmp	r3, #12
 800c110:	d9f2      	bls.n	800c0f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	0801d2a0 	.word	0x0801d2a0

0800c120 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c128:	f00c fbc6 	bl	80188b8 <sys_arch_protect>
 800c12c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d015      	beq.n	800c168 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d006      	beq.n	800c15e <do_memp_malloc_pool+0x3e>
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <do_memp_malloc_pool+0x58>)
 800c152:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c156:	4909      	ldr	r1, [pc, #36]	; (800c17c <do_memp_malloc_pool+0x5c>)
 800c158:	4809      	ldr	r0, [pc, #36]	; (800c180 <do_memp_malloc_pool+0x60>)
 800c15a:	f00c fda5 	bl	8018ca8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f00c fbb8 	bl	80188d4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	e003      	b.n	800c170 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f00c fbb3 	bl	80188d4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	0801a710 	.word	0x0801a710
 800c17c:	0801a740 	.word	0x0801a740
 800c180:	0801a764 	.word	0x0801a764

0800c184 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <memp_malloc_pool+0x1c>
 800c192:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <memp_malloc_pool+0x38>)
 800c194:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c198:	4909      	ldr	r1, [pc, #36]	; (800c1c0 <memp_malloc_pool+0x3c>)
 800c19a:	480a      	ldr	r0, [pc, #40]	; (800c1c4 <memp_malloc_pool+0x40>)
 800c19c:	f00c fd84 	bl	8018ca8 <iprintf>
  if (desc == NULL) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <memp_malloc_pool+0x26>
    return NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e003      	b.n	800c1b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff ffb8 	bl	800c120 <do_memp_malloc_pool>
 800c1b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3708      	adds	r7, #8
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0801a710 	.word	0x0801a710
 800c1c0:	0801a78c 	.word	0x0801a78c
 800c1c4:	0801a764 	.word	0x0801a764

0800c1c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2b0c      	cmp	r3, #12
 800c1d6:	d908      	bls.n	800c1ea <memp_malloc+0x22>
 800c1d8:	4b0a      	ldr	r3, [pc, #40]	; (800c204 <memp_malloc+0x3c>)
 800c1da:	f240 1257 	movw	r2, #343	; 0x157
 800c1de:	490a      	ldr	r1, [pc, #40]	; (800c208 <memp_malloc+0x40>)
 800c1e0:	480a      	ldr	r0, [pc, #40]	; (800c20c <memp_malloc+0x44>)
 800c1e2:	f00c fd61 	bl	8018ca8 <iprintf>
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	e008      	b.n	800c1fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	4a08      	ldr	r2, [pc, #32]	; (800c210 <memp_malloc+0x48>)
 800c1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff ff94 	bl	800c120 <do_memp_malloc_pool>
 800c1f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	0801a710 	.word	0x0801a710
 800c208:	0801a7a0 	.word	0x0801a7a0
 800c20c:	0801a764 	.word	0x0801a764
 800c210:	0801d2a0 	.word	0x0801d2a0

0800c214 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	f003 0303 	and.w	r3, r3, #3
 800c224:	2b00      	cmp	r3, #0
 800c226:	d006      	beq.n	800c236 <do_memp_free_pool+0x22>
 800c228:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <do_memp_free_pool+0x4c>)
 800c22a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c22e:	490d      	ldr	r1, [pc, #52]	; (800c264 <do_memp_free_pool+0x50>)
 800c230:	480d      	ldr	r0, [pc, #52]	; (800c268 <do_memp_free_pool+0x54>)
 800c232:	f00c fd39 	bl	8018ca8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c23a:	f00c fb3d 	bl	80188b8 <sys_arch_protect>
 800c23e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c252:	68b8      	ldr	r0, [r7, #8]
 800c254:	f00c fb3e 	bl	80188d4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0801a710 	.word	0x0801a710
 800c264:	0801a7c0 	.word	0x0801a7c0
 800c268:	0801a764 	.word	0x0801a764

0800c26c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b082      	sub	sp, #8
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
 800c274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d106      	bne.n	800c28a <memp_free_pool+0x1e>
 800c27c:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <memp_free_pool+0x3c>)
 800c27e:	f240 1295 	movw	r2, #405	; 0x195
 800c282:	490a      	ldr	r1, [pc, #40]	; (800c2ac <memp_free_pool+0x40>)
 800c284:	480a      	ldr	r0, [pc, #40]	; (800c2b0 <memp_free_pool+0x44>)
 800c286:	f00c fd0f 	bl	8018ca8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d007      	beq.n	800c2a0 <memp_free_pool+0x34>
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d004      	beq.n	800c2a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff ffbb 	bl	800c214 <do_memp_free_pool>
 800c29e:	e000      	b.n	800c2a2 <memp_free_pool+0x36>
    return;
 800c2a0:	bf00      	nop
}
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	0801a710 	.word	0x0801a710
 800c2ac:	0801a78c 	.word	0x0801a78c
 800c2b0:	0801a764 	.word	0x0801a764

0800c2b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	6039      	str	r1, [r7, #0]
 800c2be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c2c0:	79fb      	ldrb	r3, [r7, #7]
 800c2c2:	2b0c      	cmp	r3, #12
 800c2c4:	d907      	bls.n	800c2d6 <memp_free+0x22>
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	; (800c2f8 <memp_free+0x44>)
 800c2c8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c2cc:	490b      	ldr	r1, [pc, #44]	; (800c2fc <memp_free+0x48>)
 800c2ce:	480c      	ldr	r0, [pc, #48]	; (800c300 <memp_free+0x4c>)
 800c2d0:	f00c fcea 	bl	8018ca8 <iprintf>
 800c2d4:	e00c      	b.n	800c2f0 <memp_free+0x3c>

  if (mem == NULL) {
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d008      	beq.n	800c2ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2dc:	79fb      	ldrb	r3, [r7, #7]
 800c2de:	4a09      	ldr	r2, [pc, #36]	; (800c304 <memp_free+0x50>)
 800c2e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff ff94 	bl	800c214 <do_memp_free_pool>
 800c2ec:	e000      	b.n	800c2f0 <memp_free+0x3c>
    return;
 800c2ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0801a710 	.word	0x0801a710
 800c2fc:	0801a7e0 	.word	0x0801a7e0
 800c300:	0801a764 	.word	0x0801a764
 800c304:	0801d2a0 	.word	0x0801d2a0

0800c308 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c308:	b480      	push	{r7}
 800c30a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c30c:	bf00      	nop
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr
	...

0800c318 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b086      	sub	sp, #24
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d108      	bne.n	800c33e <netif_add+0x26>
 800c32c:	4b5b      	ldr	r3, [pc, #364]	; (800c49c <netif_add+0x184>)
 800c32e:	f240 1227 	movw	r2, #295	; 0x127
 800c332:	495b      	ldr	r1, [pc, #364]	; (800c4a0 <netif_add+0x188>)
 800c334:	485b      	ldr	r0, [pc, #364]	; (800c4a4 <netif_add+0x18c>)
 800c336:	f00c fcb7 	bl	8018ca8 <iprintf>
 800c33a:	2300      	movs	r3, #0
 800c33c:	e0a9      	b.n	800c492 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c340:	2b00      	cmp	r3, #0
 800c342:	d108      	bne.n	800c356 <netif_add+0x3e>
 800c344:	4b55      	ldr	r3, [pc, #340]	; (800c49c <netif_add+0x184>)
 800c346:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c34a:	4957      	ldr	r1, [pc, #348]	; (800c4a8 <netif_add+0x190>)
 800c34c:	4855      	ldr	r0, [pc, #340]	; (800c4a4 <netif_add+0x18c>)
 800c34e:	f00c fcab 	bl	8018ca8 <iprintf>
 800c352:	2300      	movs	r3, #0
 800c354:	e09d      	b.n	800c492 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c35c:	4b53      	ldr	r3, [pc, #332]	; (800c4ac <netif_add+0x194>)
 800c35e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c366:	4b51      	ldr	r3, [pc, #324]	; (800c4ac <netif_add+0x194>)
 800c368:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d101      	bne.n	800c374 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c370:	4b4e      	ldr	r3, [pc, #312]	; (800c4ac <netif_add+0x194>)
 800c372:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2200      	movs	r2, #0
 800c378:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4a49      	ldr	r2, [pc, #292]	; (800c4b0 <netif_add+0x198>)
 800c38a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3324      	adds	r3, #36	; 0x24
 800c39e:	2204      	movs	r2, #4
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f00c fce5 	bl	8018d72 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a3a      	ldr	r2, [r7, #32]
 800c3b2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c3b4:	4b3f      	ldr	r3, [pc, #252]	; (800c4b4 <netif_add+0x19c>)
 800c3b6:	781a      	ldrb	r2, [r3, #0]
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	68b9      	ldr	r1, [r7, #8]
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f000 f914 	bl	800c5f8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	4798      	blx	r3
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <netif_add+0xc8>
    return NULL;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e058      	b.n	800c492 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3e6:	2bff      	cmp	r3, #255	; 0xff
 800c3e8:	d103      	bne.n	800c3f2 <netif_add+0xda>
        netif->num = 0;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3f6:	4b30      	ldr	r3, [pc, #192]	; (800c4b8 <netif_add+0x1a0>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	e02b      	b.n	800c456 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	429a      	cmp	r2, r3
 800c404:	d106      	bne.n	800c414 <netif_add+0xfc>
 800c406:	4b25      	ldr	r3, [pc, #148]	; (800c49c <netif_add+0x184>)
 800c408:	f240 128b 	movw	r2, #395	; 0x18b
 800c40c:	492b      	ldr	r1, [pc, #172]	; (800c4bc <netif_add+0x1a4>)
 800c40e:	4825      	ldr	r0, [pc, #148]	; (800c4a4 <netif_add+0x18c>)
 800c410:	f00c fc4a 	bl	8018ca8 <iprintf>
        num_netifs++;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	3301      	adds	r3, #1
 800c418:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2bff      	cmp	r3, #255	; 0xff
 800c41e:	dd06      	ble.n	800c42e <netif_add+0x116>
 800c420:	4b1e      	ldr	r3, [pc, #120]	; (800c49c <netif_add+0x184>)
 800c422:	f240 128d 	movw	r2, #397	; 0x18d
 800c426:	4926      	ldr	r1, [pc, #152]	; (800c4c0 <netif_add+0x1a8>)
 800c428:	481e      	ldr	r0, [pc, #120]	; (800c4a4 <netif_add+0x18c>)
 800c42a:	f00c fc3d 	bl	8018ca8 <iprintf>
        if (netif2->num == netif->num) {
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d108      	bne.n	800c450 <netif_add+0x138>
          netif->num++;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c444:	3301      	adds	r3, #1
 800c446:	b2da      	uxtb	r2, r3
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c44e:	e005      	b.n	800c45c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1d0      	bne.n	800c3fe <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1be      	bne.n	800c3e0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c468:	2bfe      	cmp	r3, #254	; 0xfe
 800c46a:	d103      	bne.n	800c474 <netif_add+0x15c>
    netif_num = 0;
 800c46c:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <netif_add+0x19c>)
 800c46e:	2200      	movs	r2, #0
 800c470:	701a      	strb	r2, [r3, #0]
 800c472:	e006      	b.n	800c482 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c47a:	3301      	adds	r3, #1
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4b0d      	ldr	r3, [pc, #52]	; (800c4b4 <netif_add+0x19c>)
 800c480:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c482:	4b0d      	ldr	r3, [pc, #52]	; (800c4b8 <netif_add+0x1a0>)
 800c484:	681a      	ldr	r2, [r3, #0]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c48a:	4a0b      	ldr	r2, [pc, #44]	; (800c4b8 <netif_add+0x1a0>)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c490:	68fb      	ldr	r3, [r7, #12]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	0801a7fc 	.word	0x0801a7fc
 800c4a0:	0801a890 	.word	0x0801a890
 800c4a4:	0801a84c 	.word	0x0801a84c
 800c4a8:	0801a8ac 	.word	0x0801a8ac
 800c4ac:	0801d324 	.word	0x0801d324
 800c4b0:	0800c8db 	.word	0x0800c8db
 800c4b4:	2000cc28 	.word	0x2000cc28
 800c4b8:	2000cc20 	.word	0x2000cc20
 800c4bc:	0801a8d0 	.word	0x0801a8d0
 800c4c0:	0801a8e4 	.word	0x0801a8e4

0800c4c4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f002 fea1 	bl	800f218 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f007 ff49 	bl	8014370 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c4de:	bf00      	nop
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
	...

0800c4e8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d106      	bne.n	800c508 <netif_do_set_ipaddr+0x20>
 800c4fa:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <netif_do_set_ipaddr+0x88>)
 800c4fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c500:	491c      	ldr	r1, [pc, #112]	; (800c574 <netif_do_set_ipaddr+0x8c>)
 800c502:	481d      	ldr	r0, [pc, #116]	; (800c578 <netif_do_set_ipaddr+0x90>)
 800c504:	f00c fbd0 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <netif_do_set_ipaddr+0x34>
 800c50e:	4b18      	ldr	r3, [pc, #96]	; (800c570 <netif_do_set_ipaddr+0x88>)
 800c510:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c514:	4917      	ldr	r1, [pc, #92]	; (800c574 <netif_do_set_ipaddr+0x8c>)
 800c516:	4818      	ldr	r0, [pc, #96]	; (800c578 <netif_do_set_ipaddr+0x90>)
 800c518:	f00c fbc6 	bl	8018ca8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	3304      	adds	r3, #4
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	429a      	cmp	r2, r3
 800c528:	d01c      	beq.n	800c564 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	3304      	adds	r3, #4
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c53a:	f107 0314 	add.w	r3, r7, #20
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f7ff ffbf 	bl	800c4c4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <netif_do_set_ipaddr+0x6a>
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	e000      	b.n	800c554 <netif_do_set_ipaddr+0x6c>
 800c552:	2300      	movs	r3, #0
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c558:	2101      	movs	r1, #1
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f000 f8d2 	bl	800c704 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c560:	2301      	movs	r3, #1
 800c562:	e000      	b.n	800c566 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	0801a7fc 	.word	0x0801a7fc
 800c574:	0801a914 	.word	0x0801a914
 800c578:	0801a84c 	.word	0x0801a84c

0800c57c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	60f8      	str	r0, [r7, #12]
 800c584:	60b9      	str	r1, [r7, #8]
 800c586:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	3308      	adds	r3, #8
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d00a      	beq.n	800c5ac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <netif_do_set_netmask+0x26>
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	e000      	b.n	800c5a4 <netif_do_set_netmask+0x28>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e000      	b.n	800c5ae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c5ac:	2300      	movs	r3, #0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	60f8      	str	r0, [r7, #12]
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d00a      	beq.n	800c5ea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <netif_do_set_gw+0x26>
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	e000      	b.n	800c5e2 <netif_do_set_gw+0x28>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	68fa      	ldr	r2, [r7, #12]
 800c5e4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c614:	4b1c      	ldr	r3, [pc, #112]	; (800c688 <netif_set_addr+0x90>)
 800c616:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c61e:	4b1a      	ldr	r3, [pc, #104]	; (800c688 <netif_set_addr+0x90>)
 800c620:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <netif_set_addr+0x90>)
 800c62a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <netif_set_addr+0x42>
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <netif_set_addr+0x46>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e000      	b.n	800c640 <netif_set_addr+0x48>
 800c63e:	2300      	movs	r3, #0
 800c640:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d006      	beq.n	800c656 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c648:	f107 0310 	add.w	r3, r7, #16
 800c64c:	461a      	mov	r2, r3
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff ff49 	bl	800c4e8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	6879      	ldr	r1, [r7, #4]
 800c65a:	68f8      	ldr	r0, [r7, #12]
 800c65c:	f7ff ff8e 	bl	800c57c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c660:	69ba      	ldr	r2, [r7, #24]
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	68f8      	ldr	r0, [r7, #12]
 800c666:	f7ff ffa8 	bl	800c5ba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d106      	bne.n	800c67e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c670:	f107 0310 	add.w	r3, r7, #16
 800c674:	461a      	mov	r2, r3
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f7ff ff35 	bl	800c4e8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c67e:	bf00      	nop
 800c680:	3720      	adds	r7, #32
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	0801d324 	.word	0x0801d324

0800c68c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c694:	4a04      	ldr	r2, [pc, #16]	; (800c6a8 <netif_set_default+0x1c>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c69a:	bf00      	nop
 800c69c:	370c      	adds	r7, #12
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	2000cc24 	.word	0x2000cc24

0800c6ac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d107      	bne.n	800c6ca <netif_set_up+0x1e>
 800c6ba:	4b0f      	ldr	r3, [pc, #60]	; (800c6f8 <netif_set_up+0x4c>)
 800c6bc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c6c0:	490e      	ldr	r1, [pc, #56]	; (800c6fc <netif_set_up+0x50>)
 800c6c2:	480f      	ldr	r0, [pc, #60]	; (800c700 <netif_set_up+0x54>)
 800c6c4:	f00c faf0 	bl	8018ca8 <iprintf>
 800c6c8:	e013      	b.n	800c6f2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10c      	bne.n	800c6f2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6de:	f043 0301 	orr.w	r3, r3, #1
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6ea:	2103      	movs	r1, #3
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f809 	bl	800c704 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	0801a7fc 	.word	0x0801a7fc
 800c6fc:	0801a984 	.word	0x0801a984
 800c700:	0801a84c 	.word	0x0801a84c

0800c704 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d106      	bne.n	800c724 <netif_issue_reports+0x20>
 800c716:	4b18      	ldr	r3, [pc, #96]	; (800c778 <netif_issue_reports+0x74>)
 800c718:	f240 326d 	movw	r2, #877	; 0x36d
 800c71c:	4917      	ldr	r1, [pc, #92]	; (800c77c <netif_issue_reports+0x78>)
 800c71e:	4818      	ldr	r0, [pc, #96]	; (800c780 <netif_issue_reports+0x7c>)
 800c720:	f00c fac2 	bl	8018ca8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c72a:	f003 0304 	and.w	r3, r3, #4
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d01e      	beq.n	800c770 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c738:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d017      	beq.n	800c770 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c740:	78fb      	ldrb	r3, [r7, #3]
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d013      	beq.n	800c772 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	3304      	adds	r3, #4
 800c74e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00e      	beq.n	800c772 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c75a:	f003 0308 	and.w	r3, r3, #8
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3304      	adds	r3, #4
 800c766:	4619      	mov	r1, r3
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f00a fc03 	bl	8016f74 <etharp_request>
 800c76e:	e000      	b.n	800c772 <netif_issue_reports+0x6e>
    return;
 800c770:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c772:	3708      	adds	r7, #8
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}
 800c778:	0801a7fc 	.word	0x0801a7fc
 800c77c:	0801a9a0 	.word	0x0801a9a0
 800c780:	0801a84c 	.word	0x0801a84c

0800c784 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d107      	bne.n	800c7a2 <netif_set_down+0x1e>
 800c792:	4b12      	ldr	r3, [pc, #72]	; (800c7dc <netif_set_down+0x58>)
 800c794:	f240 329b 	movw	r2, #923	; 0x39b
 800c798:	4911      	ldr	r1, [pc, #68]	; (800c7e0 <netif_set_down+0x5c>)
 800c79a:	4812      	ldr	r0, [pc, #72]	; (800c7e4 <netif_set_down+0x60>)
 800c79c:	f00c fa84 	bl	8018ca8 <iprintf>
 800c7a0:	e019      	b.n	800c7d6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d012      	beq.n	800c7d6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7b6:	f023 0301 	bic.w	r3, r3, #1
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7c8:	f003 0308 	and.w	r3, r3, #8
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f009 ff89 	bl	80166e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	0801a7fc 	.word	0x0801a7fc
 800c7e0:	0801a9c4 	.word	0x0801a9c4
 800c7e4:	0801a84c 	.word	0x0801a84c

0800c7e8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d107      	bne.n	800c806 <netif_set_link_up+0x1e>
 800c7f6:	4b15      	ldr	r3, [pc, #84]	; (800c84c <netif_set_link_up+0x64>)
 800c7f8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c7fc:	4914      	ldr	r1, [pc, #80]	; (800c850 <netif_set_link_up+0x68>)
 800c7fe:	4815      	ldr	r0, [pc, #84]	; (800c854 <netif_set_link_up+0x6c>)
 800c800:	f00c fa52 	bl	8018ca8 <iprintf>
 800c804:	e01e      	b.n	800c844 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c80c:	f003 0304 	and.w	r3, r3, #4
 800c810:	2b00      	cmp	r3, #0
 800c812:	d117      	bne.n	800c844 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c81a:	f043 0304 	orr.w	r3, r3, #4
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f008 f9ce 	bl	8014bc8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c82c:	2103      	movs	r1, #3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff ff68 	bl	800c704 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <netif_set_link_up+0x5c>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	69db      	ldr	r3, [r3, #28]
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c844:	3708      	adds	r7, #8
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	0801a7fc 	.word	0x0801a7fc
 800c850:	0801a9e4 	.word	0x0801a9e4
 800c854:	0801a84c 	.word	0x0801a84c

0800c858 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d107      	bne.n	800c876 <netif_set_link_down+0x1e>
 800c866:	4b11      	ldr	r3, [pc, #68]	; (800c8ac <netif_set_link_down+0x54>)
 800c868:	f240 4206 	movw	r2, #1030	; 0x406
 800c86c:	4910      	ldr	r1, [pc, #64]	; (800c8b0 <netif_set_link_down+0x58>)
 800c86e:	4811      	ldr	r0, [pc, #68]	; (800c8b4 <netif_set_link_down+0x5c>)
 800c870:	f00c fa1a 	bl	8018ca8 <iprintf>
 800c874:	e017      	b.n	800c8a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d010      	beq.n	800c8a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c88a:	f023 0304 	bic.w	r3, r3, #4
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d003      	beq.n	800c8a6 <netif_set_link_down+0x4e>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	0801a7fc 	.word	0x0801a7fc
 800c8b0:	0801aa08 	.word	0x0801aa08
 800c8b4:	0801a84c 	.word	0x0801a84c

0800c8b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d002      	beq.n	800c8ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	683a      	ldr	r2, [r7, #0]
 800c8cc:	61da      	str	r2, [r3, #28]
  }
}
 800c8ce:	bf00      	nop
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c8da:	b480      	push	{r7}
 800c8dc:	b085      	sub	sp, #20
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	60b9      	str	r1, [r7, #8]
 800c8e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c8e6:	f06f 030b 	mvn.w	r3, #11
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	4603      	mov	r3, r0
 800c900:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c902:	79fb      	ldrb	r3, [r7, #7]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d013      	beq.n	800c930 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c908:	4b0d      	ldr	r3, [pc, #52]	; (800c940 <netif_get_by_index+0x48>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e00c      	b.n	800c92a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c916:	3301      	adds	r3, #1
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	79fa      	ldrb	r2, [r7, #7]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d101      	bne.n	800c924 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	e006      	b.n	800c932 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d1ef      	bne.n	800c910 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	2000cc20 	.word	0x2000cc20

0800c944 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c94a:	f00b ffb5 	bl	80188b8 <sys_arch_protect>
 800c94e:	6038      	str	r0, [r7, #0]
 800c950:	4b0d      	ldr	r3, [pc, #52]	; (800c988 <pbuf_free_ooseq+0x44>)
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	6838      	ldr	r0, [r7, #0]
 800c958:	f00b ffbc 	bl	80188d4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c95c:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <pbuf_free_ooseq+0x48>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	607b      	str	r3, [r7, #4]
 800c962:	e00a      	b.n	800c97a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f002 fc91 	bl	800f294 <tcp_free_ooseq>
      return;
 800c972:	e005      	b.n	800c980 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	607b      	str	r3, [r7, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1f1      	bne.n	800c964 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	2000cc29 	.word	0x2000cc29
 800c98c:	2000cc38 	.word	0x2000cc38

0800c990 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c998:	f7ff ffd4 	bl	800c944 <pbuf_free_ooseq>
}
 800c99c:	bf00      	nop
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c9aa:	f00b ff85 	bl	80188b8 <sys_arch_protect>
 800c9ae:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c9b0:	4b0f      	ldr	r3, [pc, #60]	; (800c9f0 <pbuf_pool_is_empty+0x4c>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c9b6:	4b0e      	ldr	r3, [pc, #56]	; (800c9f0 <pbuf_pool_is_empty+0x4c>)
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f00b ff89 	bl	80188d4 <sys_arch_unprotect>

  if (!queued) {
 800c9c2:	78fb      	ldrb	r3, [r7, #3]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10f      	bne.n	800c9e8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	480a      	ldr	r0, [pc, #40]	; (800c9f4 <pbuf_pool_is_empty+0x50>)
 800c9cc:	f7fd f946 	bl	8009c5c <tcpip_try_callback>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d008      	beq.n	800c9e8 <pbuf_pool_is_empty+0x44>
 800c9d6:	f00b ff6f 	bl	80188b8 <sys_arch_protect>
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	4b04      	ldr	r3, [pc, #16]	; (800c9f0 <pbuf_pool_is_empty+0x4c>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	701a      	strb	r2, [r3, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f00b ff76 	bl	80188d4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c9e8:	bf00      	nop
 800c9ea:	3708      	adds	r7, #8
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	2000cc29 	.word	0x2000cc29
 800c9f4:	0800c991 	.word	0x0800c991

0800c9f8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	4611      	mov	r1, r2
 800ca04:	461a      	mov	r2, r3
 800ca06:	460b      	mov	r3, r1
 800ca08:	80fb      	strh	r3, [r7, #6]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	88fa      	ldrh	r2, [r7, #6]
 800ca1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	88ba      	ldrh	r2, [r7, #4]
 800ca24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ca26:	8b3b      	ldrh	r3, [r7, #24]
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	7f3a      	ldrb	r2, [r7, #28]
 800ca32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2201      	movs	r2, #1
 800ca38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	73da      	strb	r2, [r3, #15]
}
 800ca40:	bf00      	nop
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08c      	sub	sp, #48	; 0x30
 800ca50:	af02      	add	r7, sp, #8
 800ca52:	4603      	mov	r3, r0
 800ca54:	71fb      	strb	r3, [r7, #7]
 800ca56:	460b      	mov	r3, r1
 800ca58:	80bb      	strh	r3, [r7, #4]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ca62:	887b      	ldrh	r3, [r7, #2]
 800ca64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca68:	d07f      	beq.n	800cb6a <pbuf_alloc+0x11e>
 800ca6a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca6e:	f300 80c8 	bgt.w	800cc02 <pbuf_alloc+0x1b6>
 800ca72:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca76:	d010      	beq.n	800ca9a <pbuf_alloc+0x4e>
 800ca78:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca7c:	f300 80c1 	bgt.w	800cc02 <pbuf_alloc+0x1b6>
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d002      	beq.n	800ca8a <pbuf_alloc+0x3e>
 800ca84:	2b41      	cmp	r3, #65	; 0x41
 800ca86:	f040 80bc 	bne.w	800cc02 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ca8a:	887a      	ldrh	r2, [r7, #2]
 800ca8c:	88bb      	ldrh	r3, [r7, #4]
 800ca8e:	4619      	mov	r1, r3
 800ca90:	2000      	movs	r0, #0
 800ca92:	f000 f8d1 	bl	800cc38 <pbuf_alloc_reference>
 800ca96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ca98:	e0bd      	b.n	800cc16 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800caa2:	88bb      	ldrh	r3, [r7, #4]
 800caa4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800caa6:	200c      	movs	r0, #12
 800caa8:	f7ff fb8e 	bl	800c1c8 <memp_malloc>
 800caac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d109      	bne.n	800cac8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cab4:	f7ff ff76 	bl	800c9a4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cabe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cac0:	f000 faa8 	bl	800d014 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cac4:	2300      	movs	r3, #0
 800cac6:	e0a7      	b.n	800cc18 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caca:	3303      	adds	r3, #3
 800cacc:	b29b      	uxth	r3, r3
 800cace:	f023 0303 	bic.w	r3, r3, #3
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cad8:	b29b      	uxth	r3, r3
 800cada:	8b7a      	ldrh	r2, [r7, #26]
 800cadc:	4293      	cmp	r3, r2
 800cade:	bf28      	it	cs
 800cae0:	4613      	movcs	r3, r2
 800cae2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cae6:	3310      	adds	r3, #16
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	4413      	add	r3, r2
 800caec:	3303      	adds	r3, #3
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	4618      	mov	r0, r3
 800caf4:	89f9      	ldrh	r1, [r7, #14]
 800caf6:	8b7a      	ldrh	r2, [r7, #26]
 800caf8:	2300      	movs	r3, #0
 800cafa:	9301      	str	r3, [sp, #4]
 800cafc:	887b      	ldrh	r3, [r7, #2]
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	460b      	mov	r3, r1
 800cb02:	4601      	mov	r1, r0
 800cb04:	6938      	ldr	r0, [r7, #16]
 800cb06:	f7ff ff77 	bl	800c9f8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	f003 0303 	and.w	r3, r3, #3
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d006      	beq.n	800cb24 <pbuf_alloc+0xd8>
 800cb16:	4b42      	ldr	r3, [pc, #264]	; (800cc20 <pbuf_alloc+0x1d4>)
 800cb18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb1c:	4941      	ldr	r1, [pc, #260]	; (800cc24 <pbuf_alloc+0x1d8>)
 800cb1e:	4842      	ldr	r0, [pc, #264]	; (800cc28 <pbuf_alloc+0x1dc>)
 800cb20:	f00c f8c2 	bl	8018ca8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cb24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb26:	3303      	adds	r3, #3
 800cb28:	f023 0303 	bic.w	r3, r3, #3
 800cb2c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cb30:	d106      	bne.n	800cb40 <pbuf_alloc+0xf4>
 800cb32:	4b3b      	ldr	r3, [pc, #236]	; (800cc20 <pbuf_alloc+0x1d4>)
 800cb34:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cb38:	493c      	ldr	r1, [pc, #240]	; (800cc2c <pbuf_alloc+0x1e0>)
 800cb3a:	483b      	ldr	r0, [pc, #236]	; (800cc28 <pbuf_alloc+0x1dc>)
 800cb3c:	f00c f8b4 	bl	8018ca8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	627b      	str	r3, [r7, #36]	; 0x24
 800cb4a:	e002      	b.n	800cb52 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	693a      	ldr	r2, [r7, #16]
 800cb50:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cb56:	8b7a      	ldrh	r2, [r7, #26]
 800cb58:	89fb      	ldrh	r3, [r7, #14]
 800cb5a:	1ad3      	subs	r3, r2, r3
 800cb5c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cb62:	8b7b      	ldrh	r3, [r7, #26]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d19e      	bne.n	800caa6 <pbuf_alloc+0x5a>
      break;
 800cb68:	e055      	b.n	800cc16 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cb6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb6c:	3303      	adds	r3, #3
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f023 0303 	bic.w	r3, r3, #3
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	88bb      	ldrh	r3, [r7, #4]
 800cb78:	3303      	adds	r3, #3
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	f023 0303 	bic.w	r3, r3, #3
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	4413      	add	r3, r2
 800cb84:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cb86:	8b3b      	ldrh	r3, [r7, #24]
 800cb88:	3310      	adds	r3, #16
 800cb8a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb8c:	8b3a      	ldrh	r2, [r7, #24]
 800cb8e:	88bb      	ldrh	r3, [r7, #4]
 800cb90:	3303      	adds	r3, #3
 800cb92:	f023 0303 	bic.w	r3, r3, #3
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d306      	bcc.n	800cba8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb9a:	8afa      	ldrh	r2, [r7, #22]
 800cb9c:	88bb      	ldrh	r3, [r7, #4]
 800cb9e:	3303      	adds	r3, #3
 800cba0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d201      	bcs.n	800cbac <pbuf_alloc+0x160>
        return NULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	e035      	b.n	800cc18 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cbac:	8afb      	ldrh	r3, [r7, #22]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff f966 	bl	800be80 <mem_malloc>
 800cbb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <pbuf_alloc+0x174>
        return NULL;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e02b      	b.n	800cc18 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cbc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cbc2:	3310      	adds	r3, #16
 800cbc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbc6:	4413      	add	r3, r2
 800cbc8:	3303      	adds	r3, #3
 800cbca:	f023 0303 	bic.w	r3, r3, #3
 800cbce:	4618      	mov	r0, r3
 800cbd0:	88b9      	ldrh	r1, [r7, #4]
 800cbd2:	88ba      	ldrh	r2, [r7, #4]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	887b      	ldrh	r3, [r7, #2]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	460b      	mov	r3, r1
 800cbde:	4601      	mov	r1, r0
 800cbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbe2:	f7ff ff09 	bl	800c9f8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	f003 0303 	and.w	r3, r3, #3
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d010      	beq.n	800cc14 <pbuf_alloc+0x1c8>
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <pbuf_alloc+0x1d4>)
 800cbf4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cbf8:	490d      	ldr	r1, [pc, #52]	; (800cc30 <pbuf_alloc+0x1e4>)
 800cbfa:	480b      	ldr	r0, [pc, #44]	; (800cc28 <pbuf_alloc+0x1dc>)
 800cbfc:	f00c f854 	bl	8018ca8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cc00:	e008      	b.n	800cc14 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cc02:	4b07      	ldr	r3, [pc, #28]	; (800cc20 <pbuf_alloc+0x1d4>)
 800cc04:	f240 1227 	movw	r2, #295	; 0x127
 800cc08:	490a      	ldr	r1, [pc, #40]	; (800cc34 <pbuf_alloc+0x1e8>)
 800cc0a:	4807      	ldr	r0, [pc, #28]	; (800cc28 <pbuf_alloc+0x1dc>)
 800cc0c:	f00c f84c 	bl	8018ca8 <iprintf>
      return NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	e001      	b.n	800cc18 <pbuf_alloc+0x1cc>
      break;
 800cc14:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3728      	adds	r7, #40	; 0x28
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	0801aa2c 	.word	0x0801aa2c
 800cc24:	0801aa5c 	.word	0x0801aa5c
 800cc28:	0801aa8c 	.word	0x0801aa8c
 800cc2c:	0801aab4 	.word	0x0801aab4
 800cc30:	0801aae8 	.word	0x0801aae8
 800cc34:	0801ab14 	.word	0x0801ab14

0800cc38 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	807b      	strh	r3, [r7, #2]
 800cc44:	4613      	mov	r3, r2
 800cc46:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc48:	883b      	ldrh	r3, [r7, #0]
 800cc4a:	2b41      	cmp	r3, #65	; 0x41
 800cc4c:	d009      	beq.n	800cc62 <pbuf_alloc_reference+0x2a>
 800cc4e:	883b      	ldrh	r3, [r7, #0]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d006      	beq.n	800cc62 <pbuf_alloc_reference+0x2a>
 800cc54:	4b0f      	ldr	r3, [pc, #60]	; (800cc94 <pbuf_alloc_reference+0x5c>)
 800cc56:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cc5a:	490f      	ldr	r1, [pc, #60]	; (800cc98 <pbuf_alloc_reference+0x60>)
 800cc5c:	480f      	ldr	r0, [pc, #60]	; (800cc9c <pbuf_alloc_reference+0x64>)
 800cc5e:	f00c f823 	bl	8018ca8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cc62:	200b      	movs	r0, #11
 800cc64:	f7ff fab0 	bl	800c1c8 <memp_malloc>
 800cc68:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	e00b      	b.n	800cc8c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cc74:	8879      	ldrh	r1, [r7, #2]
 800cc76:	887a      	ldrh	r2, [r7, #2]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	9301      	str	r3, [sp, #4]
 800cc7c:	883b      	ldrh	r3, [r7, #0]
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	460b      	mov	r3, r1
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff feb7 	bl	800c9f8 <pbuf_init_alloced_pbuf>
  return p;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	0801aa2c 	.word	0x0801aa2c
 800cc98:	0801ab30 	.word	0x0801ab30
 800cc9c:	0801aa8c 	.word	0x0801aa8c

0800cca0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af02      	add	r7, sp, #8
 800cca6:	607b      	str	r3, [r7, #4]
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73fb      	strb	r3, [r7, #15]
 800ccac:	460b      	mov	r3, r1
 800ccae:	81bb      	strh	r3, [r7, #12]
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ccb8:	8a7b      	ldrh	r3, [r7, #18]
 800ccba:	3303      	adds	r3, #3
 800ccbc:	f023 0203 	bic.w	r2, r3, #3
 800ccc0:	89bb      	ldrh	r3, [r7, #12]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d901      	bls.n	800ccce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e018      	b.n	800cd00 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ccce:	6a3b      	ldr	r3, [r7, #32]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d007      	beq.n	800cce4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ccd4:	8a7b      	ldrh	r3, [r7, #18]
 800ccd6:	3303      	adds	r3, #3
 800ccd8:	f023 0303 	bic.w	r3, r3, #3
 800ccdc:	6a3a      	ldr	r2, [r7, #32]
 800ccde:	4413      	add	r3, r2
 800cce0:	617b      	str	r3, [r7, #20]
 800cce2:	e001      	b.n	800cce8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cce4:	2300      	movs	r3, #0
 800cce6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	89b9      	ldrh	r1, [r7, #12]
 800ccec:	89ba      	ldrh	r2, [r7, #12]
 800ccee:	2302      	movs	r3, #2
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	897b      	ldrh	r3, [r7, #10]
 800ccf4:	9300      	str	r3, [sp, #0]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	6979      	ldr	r1, [r7, #20]
 800ccfa:	f7ff fe7d 	bl	800c9f8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ccfe:	687b      	ldr	r3, [r7, #4]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <pbuf_realloc+0x20>
 800cd1a:	4b3a      	ldr	r3, [pc, #232]	; (800ce04 <pbuf_realloc+0xfc>)
 800cd1c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cd20:	4939      	ldr	r1, [pc, #228]	; (800ce08 <pbuf_realloc+0x100>)
 800cd22:	483a      	ldr	r0, [pc, #232]	; (800ce0c <pbuf_realloc+0x104>)
 800cd24:	f00b ffc0 	bl	8018ca8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	891b      	ldrh	r3, [r3, #8]
 800cd2c:	887a      	ldrh	r2, [r7, #2]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d263      	bcs.n	800cdfa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	891a      	ldrh	r2, [r3, #8]
 800cd36:	887b      	ldrh	r3, [r7, #2]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd3c:	887b      	ldrh	r3, [r7, #2]
 800cd3e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd44:	e018      	b.n	800cd78 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	895b      	ldrh	r3, [r3, #10]
 800cd4a:	897a      	ldrh	r2, [r7, #10]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	891a      	ldrh	r2, [r3, #8]
 800cd54:	893b      	ldrh	r3, [r7, #8]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d106      	bne.n	800cd78 <pbuf_realloc+0x70>
 800cd6a:	4b26      	ldr	r3, [pc, #152]	; (800ce04 <pbuf_realloc+0xfc>)
 800cd6c:	f240 12af 	movw	r2, #431	; 0x1af
 800cd70:	4927      	ldr	r1, [pc, #156]	; (800ce10 <pbuf_realloc+0x108>)
 800cd72:	4826      	ldr	r0, [pc, #152]	; (800ce0c <pbuf_realloc+0x104>)
 800cd74:	f00b ff98 	bl	8018ca8 <iprintf>
  while (rem_len > q->len) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	895b      	ldrh	r3, [r3, #10]
 800cd7c:	897a      	ldrh	r2, [r7, #10]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d8e1      	bhi.n	800cd46 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	7b1b      	ldrb	r3, [r3, #12]
 800cd86:	f003 030f 	and.w	r3, r3, #15
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d121      	bne.n	800cdd2 <pbuf_realloc+0xca>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	895b      	ldrh	r3, [r3, #10]
 800cd92:	897a      	ldrh	r2, [r7, #10]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d01c      	beq.n	800cdd2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	7b5b      	ldrb	r3, [r3, #13]
 800cd9c:	f003 0302 	and.w	r3, r3, #2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d116      	bne.n	800cdd2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	685a      	ldr	r2, [r3, #4]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	897b      	ldrh	r3, [r7, #10]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7fe ff58 	bl	800bc6c <mem_trim>
 800cdbc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d106      	bne.n	800cdd2 <pbuf_realloc+0xca>
 800cdc4:	4b0f      	ldr	r3, [pc, #60]	; (800ce04 <pbuf_realloc+0xfc>)
 800cdc6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cdca:	4912      	ldr	r1, [pc, #72]	; (800ce14 <pbuf_realloc+0x10c>)
 800cdcc:	480f      	ldr	r0, [pc, #60]	; (800ce0c <pbuf_realloc+0x104>)
 800cdce:	f00b ff6b 	bl	8018ca8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	897a      	ldrh	r2, [r7, #10]
 800cdd6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	895a      	ldrh	r2, [r3, #10]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 f911 	bl	800d014 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	e000      	b.n	800cdfc <pbuf_realloc+0xf4>
    return;
 800cdfa:	bf00      	nop

}
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	0801aa2c 	.word	0x0801aa2c
 800ce08:	0801ab44 	.word	0x0801ab44
 800ce0c:	0801aa8c 	.word	0x0801aa8c
 800ce10:	0801ab5c 	.word	0x0801ab5c
 800ce14:	0801ab74 	.word	0x0801ab74

0800ce18 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60f8      	str	r0, [r7, #12]
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	4613      	mov	r3, r2
 800ce24:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d106      	bne.n	800ce3a <pbuf_add_header_impl+0x22>
 800ce2c:	4b2b      	ldr	r3, [pc, #172]	; (800cedc <pbuf_add_header_impl+0xc4>)
 800ce2e:	f240 12df 	movw	r2, #479	; 0x1df
 800ce32:	492b      	ldr	r1, [pc, #172]	; (800cee0 <pbuf_add_header_impl+0xc8>)
 800ce34:	482b      	ldr	r0, [pc, #172]	; (800cee4 <pbuf_add_header_impl+0xcc>)
 800ce36:	f00b ff37 	bl	8018ca8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d003      	beq.n	800ce48 <pbuf_add_header_impl+0x30>
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce46:	d301      	bcc.n	800ce4c <pbuf_add_header_impl+0x34>
    return 1;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e043      	b.n	800ced4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <pbuf_add_header_impl+0x3e>
    return 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	e03e      	b.n	800ced4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	891a      	ldrh	r2, [r3, #8]
 800ce5e:	8a7b      	ldrh	r3, [r7, #18]
 800ce60:	4413      	add	r3, r2
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	8a7a      	ldrh	r2, [r7, #18]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d901      	bls.n	800ce6e <pbuf_add_header_impl+0x56>
    return 1;
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e032      	b.n	800ced4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7b1b      	ldrb	r3, [r3, #12]
 800ce72:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ce74:	8a3b      	ldrh	r3, [r7, #16]
 800ce76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00c      	beq.n	800ce98 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	425b      	negs	r3, r3
 800ce86:	4413      	add	r3, r2
 800ce88:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	3310      	adds	r3, #16
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d20d      	bcs.n	800ceb0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e01d      	b.n	800ced4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d006      	beq.n	800ceac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	425b      	negs	r3, r3
 800cea6:	4413      	add	r3, r2
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e001      	b.n	800ceb0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	e011      	b.n	800ced4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	697a      	ldr	r2, [r7, #20]
 800ceb4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	895a      	ldrh	r2, [r3, #10]
 800ceba:	8a7b      	ldrh	r3, [r7, #18]
 800cebc:	4413      	add	r3, r2
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	891a      	ldrh	r2, [r3, #8]
 800cec8:	8a7b      	ldrh	r3, [r7, #18]
 800ceca:	4413      	add	r3, r2
 800cecc:	b29a      	uxth	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	811a      	strh	r2, [r3, #8]


  return 0;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3718      	adds	r7, #24
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	0801aa2c 	.word	0x0801aa2c
 800cee0:	0801ab90 	.word	0x0801ab90
 800cee4:	0801aa8c 	.word	0x0801aa8c

0800cee8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cef2:	2200      	movs	r2, #0
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff ff8e 	bl	800ce18 <pbuf_add_header_impl>
 800cefc:	4603      	mov	r3, r0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3708      	adds	r7, #8
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
	...

0800cf08 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d106      	bne.n	800cf26 <pbuf_remove_header+0x1e>
 800cf18:	4b20      	ldr	r3, [pc, #128]	; (800cf9c <pbuf_remove_header+0x94>)
 800cf1a:	f240 224b 	movw	r2, #587	; 0x24b
 800cf1e:	4920      	ldr	r1, [pc, #128]	; (800cfa0 <pbuf_remove_header+0x98>)
 800cf20:	4820      	ldr	r0, [pc, #128]	; (800cfa4 <pbuf_remove_header+0x9c>)
 800cf22:	f00b fec1 	bl	8018ca8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <pbuf_remove_header+0x2c>
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf32:	d301      	bcc.n	800cf38 <pbuf_remove_header+0x30>
    return 1;
 800cf34:	2301      	movs	r3, #1
 800cf36:	e02c      	b.n	800cf92 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <pbuf_remove_header+0x3a>
    return 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e027      	b.n	800cf92 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	895b      	ldrh	r3, [r3, #10]
 800cf4a:	89fa      	ldrh	r2, [r7, #14]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d908      	bls.n	800cf62 <pbuf_remove_header+0x5a>
 800cf50:	4b12      	ldr	r3, [pc, #72]	; (800cf9c <pbuf_remove_header+0x94>)
 800cf52:	f240 2255 	movw	r2, #597	; 0x255
 800cf56:	4914      	ldr	r1, [pc, #80]	; (800cfa8 <pbuf_remove_header+0xa0>)
 800cf58:	4812      	ldr	r0, [pc, #72]	; (800cfa4 <pbuf_remove_header+0x9c>)
 800cf5a:	f00b fea5 	bl	8018ca8 <iprintf>
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e017      	b.n	800cf92 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	441a      	add	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	895a      	ldrh	r2, [r3, #10]
 800cf78:	89fb      	ldrh	r3, [r7, #14]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	891a      	ldrh	r2, [r3, #8]
 800cf86:	89fb      	ldrh	r3, [r7, #14]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	0801aa2c 	.word	0x0801aa2c
 800cfa0:	0801ab90 	.word	0x0801ab90
 800cfa4:	0801aa8c 	.word	0x0801aa8c
 800cfa8:	0801ab9c 	.word	0x0801ab9c

0800cfac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	807b      	strh	r3, [r7, #2]
 800cfb8:	4613      	mov	r3, r2
 800cfba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cfbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da08      	bge.n	800cfd6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cfc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfc8:	425b      	negs	r3, r3
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ff9b 	bl	800cf08 <pbuf_remove_header>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	e007      	b.n	800cfe6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cfd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfda:	787a      	ldrb	r2, [r7, #1]
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff ff1a 	bl	800ce18 <pbuf_add_header_impl>
 800cfe4:	4603      	mov	r3, r0
  }
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}

0800cfee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b082      	sub	sp, #8
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
 800cff6:	460b      	mov	r3, r1
 800cff8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cffe:	2201      	movs	r2, #1
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff ffd2 	bl	800cfac <pbuf_header_impl>
 800d008:	4603      	mov	r3, r0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10b      	bne.n	800d03a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d106      	bne.n	800d036 <pbuf_free+0x22>
 800d028:	4b3b      	ldr	r3, [pc, #236]	; (800d118 <pbuf_free+0x104>)
 800d02a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d02e:	493b      	ldr	r1, [pc, #236]	; (800d11c <pbuf_free+0x108>)
 800d030:	483b      	ldr	r0, [pc, #236]	; (800d120 <pbuf_free+0x10c>)
 800d032:	f00b fe39 	bl	8018ca8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d036:	2300      	movs	r3, #0
 800d038:	e069      	b.n	800d10e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d03e:	e062      	b.n	800d106 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d040:	f00b fc3a 	bl	80188b8 <sys_arch_protect>
 800d044:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7b9b      	ldrb	r3, [r3, #14]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d106      	bne.n	800d05c <pbuf_free+0x48>
 800d04e:	4b32      	ldr	r3, [pc, #200]	; (800d118 <pbuf_free+0x104>)
 800d050:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d054:	4933      	ldr	r1, [pc, #204]	; (800d124 <pbuf_free+0x110>)
 800d056:	4832      	ldr	r0, [pc, #200]	; (800d120 <pbuf_free+0x10c>)
 800d058:	f00b fe26 	bl	8018ca8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	7b9b      	ldrb	r3, [r3, #14]
 800d060:	3b01      	subs	r3, #1
 800d062:	b2da      	uxtb	r2, r3
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	739a      	strb	r2, [r3, #14]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	7b9b      	ldrb	r3, [r3, #14]
 800d06c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d06e:	69b8      	ldr	r0, [r7, #24]
 800d070:	f00b fc30 	bl	80188d4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d074:	7dfb      	ldrb	r3, [r7, #23]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d143      	bne.n	800d102 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7b1b      	ldrb	r3, [r3, #12]
 800d084:	f003 030f 	and.w	r3, r3, #15
 800d088:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7b5b      	ldrb	r3, [r3, #13]
 800d08e:	f003 0302 	and.w	r3, r3, #2
 800d092:	2b00      	cmp	r3, #0
 800d094:	d011      	beq.n	800d0ba <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d106      	bne.n	800d0b0 <pbuf_free+0x9c>
 800d0a2:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <pbuf_free+0x104>)
 800d0a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d0a8:	491f      	ldr	r1, [pc, #124]	; (800d128 <pbuf_free+0x114>)
 800d0aa:	481d      	ldr	r0, [pc, #116]	; (800d120 <pbuf_free+0x10c>)
 800d0ac:	f00b fdfc 	bl	8018ca8 <iprintf>
        pc->custom_free_function(p);
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	4798      	blx	r3
 800d0b8:	e01d      	b.n	800d0f6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d104      	bne.n	800d0ca <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d0c0:	6879      	ldr	r1, [r7, #4]
 800d0c2:	200c      	movs	r0, #12
 800d0c4:	f7ff f8f6 	bl	800c2b4 <memp_free>
 800d0c8:	e015      	b.n	800d0f6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d104      	bne.n	800d0da <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d0d0:	6879      	ldr	r1, [r7, #4]
 800d0d2:	200b      	movs	r0, #11
 800d0d4:	f7ff f8ee 	bl	800c2b4 <memp_free>
 800d0d8:	e00d      	b.n	800d0f6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d0da:	7bfb      	ldrb	r3, [r7, #15]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d103      	bne.n	800d0e8 <pbuf_free+0xd4>
          mem_free(p);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7fe fd33 	bl	800bb4c <mem_free>
 800d0e6:	e006      	b.n	800d0f6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d0e8:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <pbuf_free+0x104>)
 800d0ea:	f240 320f 	movw	r2, #783	; 0x30f
 800d0ee:	490f      	ldr	r1, [pc, #60]	; (800d12c <pbuf_free+0x118>)
 800d0f0:	480b      	ldr	r0, [pc, #44]	; (800d120 <pbuf_free+0x10c>)
 800d0f2:	f00b fdd9 	bl	8018ca8 <iprintf>
        }
      }
      count++;
 800d0f6:	7ffb      	ldrb	r3, [r7, #31]
 800d0f8:	3301      	adds	r3, #1
 800d0fa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	607b      	str	r3, [r7, #4]
 800d100:	e001      	b.n	800d106 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d102:	2300      	movs	r3, #0
 800d104:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d199      	bne.n	800d040 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d10c:	7ffb      	ldrb	r3, [r7, #31]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	0801aa2c 	.word	0x0801aa2c
 800d11c:	0801ab90 	.word	0x0801ab90
 800d120:	0801aa8c 	.word	0x0801aa8c
 800d124:	0801abbc 	.word	0x0801abbc
 800d128:	0801abd4 	.word	0x0801abd4
 800d12c:	0801abf8 	.word	0x0801abf8

0800d130 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d138:	2300      	movs	r3, #0
 800d13a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d13c:	e005      	b.n	800d14a <pbuf_clen+0x1a>
    ++len;
 800d13e:	89fb      	ldrh	r3, [r7, #14]
 800d140:	3301      	adds	r3, #1
 800d142:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d1f6      	bne.n	800d13e <pbuf_clen+0xe>
  }
  return len;
 800d150:	89fb      	ldrh	r3, [r7, #14]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3714      	adds	r7, #20
 800d156:	46bd      	mov	sp, r7
 800d158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15c:	4770      	bx	lr
	...

0800d160 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d016      	beq.n	800d19c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d16e:	f00b fba3 	bl	80188b8 <sys_arch_protect>
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7b9b      	ldrb	r3, [r3, #14]
 800d178:	3301      	adds	r3, #1
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	739a      	strb	r2, [r3, #14]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f00b fba7 	bl	80188d4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	7b9b      	ldrb	r3, [r3, #14]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d106      	bne.n	800d19c <pbuf_ref+0x3c>
 800d18e:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <pbuf_ref+0x44>)
 800d190:	f240 3242 	movw	r2, #834	; 0x342
 800d194:	4904      	ldr	r1, [pc, #16]	; (800d1a8 <pbuf_ref+0x48>)
 800d196:	4805      	ldr	r0, [pc, #20]	; (800d1ac <pbuf_ref+0x4c>)
 800d198:	f00b fd86 	bl	8018ca8 <iprintf>
  }
}
 800d19c:	bf00      	nop
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	0801aa2c 	.word	0x0801aa2c
 800d1a8:	0801ac0c 	.word	0x0801ac0c
 800d1ac:	0801aa8c 	.word	0x0801aa8c

0800d1b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
 800d1b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <pbuf_cat+0x16>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d107      	bne.n	800d1d6 <pbuf_cat+0x26>
 800d1c6:	4b20      	ldr	r3, [pc, #128]	; (800d248 <pbuf_cat+0x98>)
 800d1c8:	f240 3259 	movw	r2, #857	; 0x359
 800d1cc:	491f      	ldr	r1, [pc, #124]	; (800d24c <pbuf_cat+0x9c>)
 800d1ce:	4820      	ldr	r0, [pc, #128]	; (800d250 <pbuf_cat+0xa0>)
 800d1d0:	f00b fd6a 	bl	8018ca8 <iprintf>
 800d1d4:	e034      	b.n	800d240 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	e00a      	b.n	800d1f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	891a      	ldrh	r2, [r3, #8]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	891b      	ldrh	r3, [r3, #8]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1f0      	bne.n	800d1dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	891a      	ldrh	r2, [r3, #8]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	895b      	ldrh	r3, [r3, #10]
 800d202:	429a      	cmp	r2, r3
 800d204:	d006      	beq.n	800d214 <pbuf_cat+0x64>
 800d206:	4b10      	ldr	r3, [pc, #64]	; (800d248 <pbuf_cat+0x98>)
 800d208:	f240 3262 	movw	r2, #866	; 0x362
 800d20c:	4911      	ldr	r1, [pc, #68]	; (800d254 <pbuf_cat+0xa4>)
 800d20e:	4810      	ldr	r0, [pc, #64]	; (800d250 <pbuf_cat+0xa0>)
 800d210:	f00b fd4a 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d006      	beq.n	800d22a <pbuf_cat+0x7a>
 800d21c:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <pbuf_cat+0x98>)
 800d21e:	f240 3263 	movw	r2, #867	; 0x363
 800d222:	490d      	ldr	r1, [pc, #52]	; (800d258 <pbuf_cat+0xa8>)
 800d224:	480a      	ldr	r0, [pc, #40]	; (800d250 <pbuf_cat+0xa0>)
 800d226:	f00b fd3f 	bl	8018ca8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	891a      	ldrh	r2, [r3, #8]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	891b      	ldrh	r3, [r3, #8]
 800d232:	4413      	add	r3, r2
 800d234:	b29a      	uxth	r2, r3
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	0801aa2c 	.word	0x0801aa2c
 800d24c:	0801ac20 	.word	0x0801ac20
 800d250:	0801aa8c 	.word	0x0801aa8c
 800d254:	0801ac58 	.word	0x0801ac58
 800d258:	0801ac88 	.word	0x0801ac88

0800d25c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f7ff ffa1 	bl	800d1b0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d26e:	6838      	ldr	r0, [r7, #0]
 800d270:	f7ff ff76 	bl	800d160 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
 800d28a:	2300      	movs	r3, #0
 800d28c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d008      	beq.n	800d2a6 <pbuf_copy+0x2a>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d005      	beq.n	800d2a6 <pbuf_copy+0x2a>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	891a      	ldrh	r2, [r3, #8]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	891b      	ldrh	r3, [r3, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d209      	bcs.n	800d2ba <pbuf_copy+0x3e>
 800d2a6:	4b57      	ldr	r3, [pc, #348]	; (800d404 <pbuf_copy+0x188>)
 800d2a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d2ac:	4956      	ldr	r1, [pc, #344]	; (800d408 <pbuf_copy+0x18c>)
 800d2ae:	4857      	ldr	r0, [pc, #348]	; (800d40c <pbuf_copy+0x190>)
 800d2b0:	f00b fcfa 	bl	8018ca8 <iprintf>
 800d2b4:	f06f 030f 	mvn.w	r3, #15
 800d2b8:	e09f      	b.n	800d3fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	895b      	ldrh	r3, [r3, #10]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	1ad2      	subs	r2, r2, r3
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	895b      	ldrh	r3, [r3, #10]
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	1acb      	subs	r3, r1, r3
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d306      	bcc.n	800d2e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	895b      	ldrh	r3, [r3, #10]
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	60fb      	str	r3, [r7, #12]
 800d2de:	e005      	b.n	800d2ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	895b      	ldrh	r3, [r3, #10]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	18d0      	adds	r0, r2, r3
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4619      	mov	r1, r3
 800d300:	f00b fdc4 	bl	8018e8c <memcpy>
    offset_to += len;
 800d304:	697a      	ldr	r2, [r7, #20]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4413      	add	r3, r2
 800d30a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4413      	add	r3, r2
 800d312:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	895b      	ldrh	r3, [r3, #10]
 800d318:	461a      	mov	r2, r3
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d906      	bls.n	800d32e <pbuf_copy+0xb2>
 800d320:	4b38      	ldr	r3, [pc, #224]	; (800d404 <pbuf_copy+0x188>)
 800d322:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d326:	493a      	ldr	r1, [pc, #232]	; (800d410 <pbuf_copy+0x194>)
 800d328:	4838      	ldr	r0, [pc, #224]	; (800d40c <pbuf_copy+0x190>)
 800d32a:	f00b fcbd 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	895b      	ldrh	r3, [r3, #10]
 800d332:	461a      	mov	r2, r3
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	4293      	cmp	r3, r2
 800d338:	d906      	bls.n	800d348 <pbuf_copy+0xcc>
 800d33a:	4b32      	ldr	r3, [pc, #200]	; (800d404 <pbuf_copy+0x188>)
 800d33c:	f240 32da 	movw	r2, #986	; 0x3da
 800d340:	4934      	ldr	r1, [pc, #208]	; (800d414 <pbuf_copy+0x198>)
 800d342:	4832      	ldr	r0, [pc, #200]	; (800d40c <pbuf_copy+0x190>)
 800d344:	f00b fcb0 	bl	8018ca8 <iprintf>
    if (offset_from >= p_from->len) {
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	895b      	ldrh	r3, [r3, #10]
 800d34c:	461a      	mov	r2, r3
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	4293      	cmp	r3, r2
 800d352:	d304      	bcc.n	800d35e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d354:	2300      	movs	r3, #0
 800d356:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	895b      	ldrh	r3, [r3, #10]
 800d362:	461a      	mov	r2, r3
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	4293      	cmp	r3, r2
 800d368:	d114      	bne.n	800d394 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d36a:	2300      	movs	r3, #0
 800d36c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10c      	bne.n	800d394 <pbuf_copy+0x118>
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d009      	beq.n	800d394 <pbuf_copy+0x118>
 800d380:	4b20      	ldr	r3, [pc, #128]	; (800d404 <pbuf_copy+0x188>)
 800d382:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d386:	4924      	ldr	r1, [pc, #144]	; (800d418 <pbuf_copy+0x19c>)
 800d388:	4820      	ldr	r0, [pc, #128]	; (800d40c <pbuf_copy+0x190>)
 800d38a:	f00b fc8d 	bl	8018ca8 <iprintf>
 800d38e:	f06f 030f 	mvn.w	r3, #15
 800d392:	e032      	b.n	800d3fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d013      	beq.n	800d3c2 <pbuf_copy+0x146>
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	895a      	ldrh	r2, [r3, #10]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d10d      	bne.n	800d3c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d009      	beq.n	800d3c2 <pbuf_copy+0x146>
 800d3ae:	4b15      	ldr	r3, [pc, #84]	; (800d404 <pbuf_copy+0x188>)
 800d3b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d3b4:	4919      	ldr	r1, [pc, #100]	; (800d41c <pbuf_copy+0x1a0>)
 800d3b6:	4815      	ldr	r0, [pc, #84]	; (800d40c <pbuf_copy+0x190>)
 800d3b8:	f00b fc76 	bl	8018ca8 <iprintf>
 800d3bc:	f06f 0305 	mvn.w	r3, #5
 800d3c0:	e01b      	b.n	800d3fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d013      	beq.n	800d3f0 <pbuf_copy+0x174>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	895a      	ldrh	r2, [r3, #10]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	891b      	ldrh	r3, [r3, #8]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d10d      	bne.n	800d3f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d009      	beq.n	800d3f0 <pbuf_copy+0x174>
 800d3dc:	4b09      	ldr	r3, [pc, #36]	; (800d404 <pbuf_copy+0x188>)
 800d3de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d3e2:	490e      	ldr	r1, [pc, #56]	; (800d41c <pbuf_copy+0x1a0>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <pbuf_copy+0x190>)
 800d3e6:	f00b fc5f 	bl	8018ca8 <iprintf>
 800d3ea:	f06f 0305 	mvn.w	r3, #5
 800d3ee:	e004      	b.n	800d3fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f47f af61 	bne.w	800d2ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3718      	adds	r7, #24
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0801aa2c 	.word	0x0801aa2c
 800d408:	0801acd4 	.word	0x0801acd4
 800d40c:	0801aa8c 	.word	0x0801aa8c
 800d410:	0801ad04 	.word	0x0801ad04
 800d414:	0801ad1c 	.word	0x0801ad1c
 800d418:	0801ad38 	.word	0x0801ad38
 800d41c:	0801ad48 	.word	0x0801ad48

0800d420 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b088      	sub	sp, #32
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	4611      	mov	r1, r2
 800d42c:	461a      	mov	r2, r3
 800d42e:	460b      	mov	r3, r1
 800d430:	80fb      	strh	r3, [r7, #6]
 800d432:	4613      	mov	r3, r2
 800d434:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d108      	bne.n	800d456 <pbuf_copy_partial+0x36>
 800d444:	4b2b      	ldr	r3, [pc, #172]	; (800d4f4 <pbuf_copy_partial+0xd4>)
 800d446:	f240 420a 	movw	r2, #1034	; 0x40a
 800d44a:	492b      	ldr	r1, [pc, #172]	; (800d4f8 <pbuf_copy_partial+0xd8>)
 800d44c:	482b      	ldr	r0, [pc, #172]	; (800d4fc <pbuf_copy_partial+0xdc>)
 800d44e:	f00b fc2b 	bl	8018ca8 <iprintf>
 800d452:	2300      	movs	r3, #0
 800d454:	e04a      	b.n	800d4ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d108      	bne.n	800d46e <pbuf_copy_partial+0x4e>
 800d45c:	4b25      	ldr	r3, [pc, #148]	; (800d4f4 <pbuf_copy_partial+0xd4>)
 800d45e:	f240 420b 	movw	r2, #1035	; 0x40b
 800d462:	4927      	ldr	r1, [pc, #156]	; (800d500 <pbuf_copy_partial+0xe0>)
 800d464:	4825      	ldr	r0, [pc, #148]	; (800d4fc <pbuf_copy_partial+0xdc>)
 800d466:	f00b fc1f 	bl	8018ca8 <iprintf>
 800d46a:	2300      	movs	r3, #0
 800d46c:	e03e      	b.n	800d4ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	61fb      	str	r3, [r7, #28]
 800d472:	e034      	b.n	800d4de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d474:	88bb      	ldrh	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <pbuf_copy_partial+0x70>
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	895b      	ldrh	r3, [r3, #10]
 800d47e:	88ba      	ldrh	r2, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d305      	bcc.n	800d490 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	895b      	ldrh	r3, [r3, #10]
 800d488:	88ba      	ldrh	r2, [r7, #4]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	80bb      	strh	r3, [r7, #4]
 800d48e:	e023      	b.n	800d4d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	895a      	ldrh	r2, [r3, #10]
 800d494:	88bb      	ldrh	r3, [r7, #4]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d49a:	8b3a      	ldrh	r2, [r7, #24]
 800d49c:	88fb      	ldrh	r3, [r7, #6]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d901      	bls.n	800d4a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d4a2:	88fb      	ldrh	r3, [r7, #6]
 800d4a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d4a6:	8b7b      	ldrh	r3, [r7, #26]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	18d0      	adds	r0, r2, r3
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	88bb      	ldrh	r3, [r7, #4]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	8b3a      	ldrh	r2, [r7, #24]
 800d4b6:	4619      	mov	r1, r3
 800d4b8:	f00b fce8 	bl	8018e8c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d4bc:	8afa      	ldrh	r2, [r7, #22]
 800d4be:	8b3b      	ldrh	r3, [r7, #24]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d4c4:	8b7a      	ldrh	r2, [r7, #26]
 800d4c6:	8b3b      	ldrh	r3, [r7, #24]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d4cc:	88fa      	ldrh	r2, [r7, #6]
 800d4ce:	8b3b      	ldrh	r3, [r7, #24]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	61fb      	str	r3, [r7, #28]
 800d4de:	88fb      	ldrh	r3, [r7, #6]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <pbuf_copy_partial+0xca>
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1c4      	bne.n	800d474 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d4ea:	8afb      	ldrh	r3, [r7, #22]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	0801aa2c 	.word	0x0801aa2c
 800d4f8:	0801ad74 	.word	0x0801ad74
 800d4fc:	0801aa8c 	.word	0x0801aa8c
 800d500:	0801ad94 	.word	0x0801ad94

0800d504 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d504:	b480      	push	{r7}
 800d506:	b087      	sub	sp, #28
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	460b      	mov	r3, r1
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d512:	897b      	ldrh	r3, [r7, #10]
 800d514:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d51a:	e007      	b.n	800d52c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d51c:	693b      	ldr	r3, [r7, #16]
 800d51e:	895b      	ldrh	r3, [r3, #10]
 800d520:	8afa      	ldrh	r2, [r7, #22]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d004      	beq.n	800d53c <pbuf_skip_const+0x38>
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	895b      	ldrh	r3, [r3, #10]
 800d536:	8afa      	ldrh	r2, [r7, #22]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d2ef      	bcs.n	800d51c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	8afa      	ldrh	r2, [r7, #22]
 800d546:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d548:	693b      	ldr	r3, [r7, #16]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	603a      	str	r2, [r7, #0]
 800d562:	71fb      	strb	r3, [r7, #7]
 800d564:	460b      	mov	r3, r1
 800d566:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	8919      	ldrh	r1, [r3, #8]
 800d56c:	88ba      	ldrh	r2, [r7, #4]
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff fa6b 	bl	800ca4c <pbuf_alloc>
 800d576:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <pbuf_clone+0x2a>
    return NULL;
 800d57e:	2300      	movs	r3, #0
 800d580:	e011      	b.n	800d5a6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d582:	6839      	ldr	r1, [r7, #0]
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff fe79 	bl	800d27c <pbuf_copy>
 800d58a:	4603      	mov	r3, r0
 800d58c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d58e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d006      	beq.n	800d5a4 <pbuf_clone+0x4c>
 800d596:	4b06      	ldr	r3, [pc, #24]	; (800d5b0 <pbuf_clone+0x58>)
 800d598:	f240 5224 	movw	r2, #1316	; 0x524
 800d59c:	4905      	ldr	r1, [pc, #20]	; (800d5b4 <pbuf_clone+0x5c>)
 800d59e:	4806      	ldr	r0, [pc, #24]	; (800d5b8 <pbuf_clone+0x60>)
 800d5a0:	f00b fb82 	bl	8018ca8 <iprintf>
  return q;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3710      	adds	r7, #16
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	0801aa2c 	.word	0x0801aa2c
 800d5b4:	0801aea0 	.word	0x0801aea0
 800d5b8:	0801aa8c 	.word	0x0801aa8c

0800d5bc <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	460b      	mov	r3, r1
 800d5c6:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800d5c8:	887b      	ldrh	r3, [r7, #2]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f80c 	bl	800d5ea <pbuf_try_get_at>
 800d5d2:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	db02      	blt.n	800d5e0 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	e000      	b.n	800d5e2 <pbuf_get_at+0x26>
  }
  return 0;
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d5f6:	f107 020a 	add.w	r2, r7, #10
 800d5fa:	887b      	ldrh	r3, [r7, #2]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f7ff ff80 	bl	800d504 <pbuf_skip_const>
 800d604:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00a      	beq.n	800d622 <pbuf_try_get_at+0x38>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	895a      	ldrh	r2, [r3, #10]
 800d610:	897b      	ldrh	r3, [r7, #10]
 800d612:	429a      	cmp	r2, r3
 800d614:	d905      	bls.n	800d622 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	897a      	ldrh	r2, [r7, #10]
 800d61c:	4413      	add	r3, r2
 800d61e:	781b      	ldrb	r3, [r3, #0]
 800d620:	e001      	b.n	800d626 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d622:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
	...

0800d630 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d634:	f00b f97c 	bl	8018930 <rand>
 800d638:	4603      	mov	r3, r0
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d640:	b29b      	uxth	r3, r3
 800d642:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d646:	b29a      	uxth	r2, r3
 800d648:	4b01      	ldr	r3, [pc, #4]	; (800d650 <tcp_init+0x20>)
 800d64a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d64c:	bf00      	nop
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	20000024 	.word	0x20000024

0800d654 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	7d1b      	ldrb	r3, [r3, #20]
 800d660:	2b01      	cmp	r3, #1
 800d662:	d105      	bne.n	800d670 <tcp_free+0x1c>
 800d664:	4b06      	ldr	r3, [pc, #24]	; (800d680 <tcp_free+0x2c>)
 800d666:	22d4      	movs	r2, #212	; 0xd4
 800d668:	4906      	ldr	r1, [pc, #24]	; (800d684 <tcp_free+0x30>)
 800d66a:	4807      	ldr	r0, [pc, #28]	; (800d688 <tcp_free+0x34>)
 800d66c:	f00b fb1c 	bl	8018ca8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	2001      	movs	r0, #1
 800d674:	f7fe fe1e 	bl	800c2b4 <memp_free>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0801af2c 	.word	0x0801af2c
 800d684:	0801af5c 	.word	0x0801af5c
 800d688:	0801af70 	.word	0x0801af70

0800d68c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	7d1b      	ldrb	r3, [r3, #20]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d105      	bne.n	800d6a8 <tcp_free_listen+0x1c>
 800d69c:	4b06      	ldr	r3, [pc, #24]	; (800d6b8 <tcp_free_listen+0x2c>)
 800d69e:	22df      	movs	r2, #223	; 0xdf
 800d6a0:	4906      	ldr	r1, [pc, #24]	; (800d6bc <tcp_free_listen+0x30>)
 800d6a2:	4807      	ldr	r0, [pc, #28]	; (800d6c0 <tcp_free_listen+0x34>)
 800d6a4:	f00b fb00 	bl	8018ca8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d6a8:	6879      	ldr	r1, [r7, #4]
 800d6aa:	2002      	movs	r0, #2
 800d6ac:	f7fe fe02 	bl	800c2b4 <memp_free>
}
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0801af2c 	.word	0x0801af2c
 800d6bc:	0801af98 	.word	0x0801af98
 800d6c0:	0801af70 	.word	0x0801af70

0800d6c4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d6c8:	f001 f898 	bl	800e7fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d6cc:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <tcp_tmr+0x28>)
 800d6ce:	781b      	ldrb	r3, [r3, #0]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <tcp_tmr+0x28>)
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <tcp_tmr+0x28>)
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d6e4:	f000 fd4a 	bl	800e17c <tcp_slowtmr>
  }
}
 800d6e8:	bf00      	nop
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	2000cc41 	.word	0x2000cc41

0800d6f0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d105      	bne.n	800d70c <tcp_remove_listener+0x1c>
 800d700:	4b0d      	ldr	r3, [pc, #52]	; (800d738 <tcp_remove_listener+0x48>)
 800d702:	22ff      	movs	r2, #255	; 0xff
 800d704:	490d      	ldr	r1, [pc, #52]	; (800d73c <tcp_remove_listener+0x4c>)
 800d706:	480e      	ldr	r0, [pc, #56]	; (800d740 <tcp_remove_listener+0x50>)
 800d708:	f00b face 	bl	8018ca8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	60fb      	str	r3, [r7, #12]
 800d710:	e00a      	b.n	800d728 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d102      	bne.n	800d722 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	60fb      	str	r3, [r7, #12]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1f1      	bne.n	800d712 <tcp_remove_listener+0x22>
    }
  }
}
 800d72e:	bf00      	nop
 800d730:	bf00      	nop
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	0801af2c 	.word	0x0801af2c
 800d73c:	0801afb4 	.word	0x0801afb4
 800d740:	0801af70 	.word	0x0801af70

0800d744 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d106      	bne.n	800d760 <tcp_listen_closed+0x1c>
 800d752:	4b14      	ldr	r3, [pc, #80]	; (800d7a4 <tcp_listen_closed+0x60>)
 800d754:	f240 1211 	movw	r2, #273	; 0x111
 800d758:	4913      	ldr	r1, [pc, #76]	; (800d7a8 <tcp_listen_closed+0x64>)
 800d75a:	4814      	ldr	r0, [pc, #80]	; (800d7ac <tcp_listen_closed+0x68>)
 800d75c:	f00b faa4 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	7d1b      	ldrb	r3, [r3, #20]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d006      	beq.n	800d776 <tcp_listen_closed+0x32>
 800d768:	4b0e      	ldr	r3, [pc, #56]	; (800d7a4 <tcp_listen_closed+0x60>)
 800d76a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d76e:	4910      	ldr	r1, [pc, #64]	; (800d7b0 <tcp_listen_closed+0x6c>)
 800d770:	480e      	ldr	r0, [pc, #56]	; (800d7ac <tcp_listen_closed+0x68>)
 800d772:	f00b fa99 	bl	8018ca8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d776:	2301      	movs	r3, #1
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	e00b      	b.n	800d794 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d77c:	4a0d      	ldr	r2, [pc, #52]	; (800d7b4 <tcp_listen_closed+0x70>)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff ffb1 	bl	800d6f0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	3301      	adds	r3, #1
 800d792:	60fb      	str	r3, [r7, #12]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b03      	cmp	r3, #3
 800d798:	d9f0      	bls.n	800d77c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d79a:	bf00      	nop
 800d79c:	bf00      	nop
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	0801af2c 	.word	0x0801af2c
 800d7a8:	0801afdc 	.word	0x0801afdc
 800d7ac:	0801af70 	.word	0x0801af70
 800d7b0:	0801afe8 	.word	0x0801afe8
 800d7b4:	0801d2ec 	.word	0x0801d2ec

0800d7b8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d7b8:	b5b0      	push	{r4, r5, r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af04      	add	r7, sp, #16
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d106      	bne.n	800d7d8 <tcp_close_shutdown+0x20>
 800d7ca:	4b63      	ldr	r3, [pc, #396]	; (800d958 <tcp_close_shutdown+0x1a0>)
 800d7cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d7d0:	4962      	ldr	r1, [pc, #392]	; (800d95c <tcp_close_shutdown+0x1a4>)
 800d7d2:	4863      	ldr	r0, [pc, #396]	; (800d960 <tcp_close_shutdown+0x1a8>)
 800d7d4:	f00b fa68 	bl	8018ca8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d7d8:	78fb      	ldrb	r3, [r7, #3]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d066      	beq.n	800d8ac <tcp_close_shutdown+0xf4>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7d1b      	ldrb	r3, [r3, #20]
 800d7e2:	2b04      	cmp	r3, #4
 800d7e4:	d003      	beq.n	800d7ee <tcp_close_shutdown+0x36>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	7d1b      	ldrb	r3, [r3, #20]
 800d7ea:	2b07      	cmp	r3, #7
 800d7ec:	d15e      	bne.n	800d8ac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d104      	bne.n	800d800 <tcp_close_shutdown+0x48>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d7fe:	d055      	beq.n	800d8ac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	8b5b      	ldrh	r3, [r3, #26]
 800d804:	f003 0310 	and.w	r3, r3, #16
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d106      	bne.n	800d81a <tcp_close_shutdown+0x62>
 800d80c:	4b52      	ldr	r3, [pc, #328]	; (800d958 <tcp_close_shutdown+0x1a0>)
 800d80e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d812:	4954      	ldr	r1, [pc, #336]	; (800d964 <tcp_close_shutdown+0x1ac>)
 800d814:	4852      	ldr	r0, [pc, #328]	; (800d960 <tcp_close_shutdown+0x1a8>)
 800d816:	f00b fa47 	bl	8018ca8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d822:	687d      	ldr	r5, [r7, #4]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	3304      	adds	r3, #4
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	8ad2      	ldrh	r2, [r2, #22]
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	8b09      	ldrh	r1, [r1, #24]
 800d830:	9102      	str	r1, [sp, #8]
 800d832:	9201      	str	r2, [sp, #4]
 800d834:	9300      	str	r3, [sp, #0]
 800d836:	462b      	mov	r3, r5
 800d838:	4622      	mov	r2, r4
 800d83a:	4601      	mov	r1, r0
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f005 fd95 	bl	801336c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f001 fb72 	bl	800ef2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d848:	4b47      	ldr	r3, [pc, #284]	; (800d968 <tcp_close_shutdown+0x1b0>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d105      	bne.n	800d85e <tcp_close_shutdown+0xa6>
 800d852:	4b45      	ldr	r3, [pc, #276]	; (800d968 <tcp_close_shutdown+0x1b0>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	68db      	ldr	r3, [r3, #12]
 800d858:	4a43      	ldr	r2, [pc, #268]	; (800d968 <tcp_close_shutdown+0x1b0>)
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	e013      	b.n	800d886 <tcp_close_shutdown+0xce>
 800d85e:	4b42      	ldr	r3, [pc, #264]	; (800d968 <tcp_close_shutdown+0x1b0>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	60fb      	str	r3, [r7, #12]
 800d864:	e00c      	b.n	800d880 <tcp_close_shutdown+0xc8>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d104      	bne.n	800d87a <tcp_close_shutdown+0xc2>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	68da      	ldr	r2, [r3, #12]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	60da      	str	r2, [r3, #12]
 800d878:	e005      	b.n	800d886 <tcp_close_shutdown+0xce>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	60fb      	str	r3, [r7, #12]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1ef      	bne.n	800d866 <tcp_close_shutdown+0xae>
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	60da      	str	r2, [r3, #12]
 800d88c:	4b37      	ldr	r3, [pc, #220]	; (800d96c <tcp_close_shutdown+0x1b4>)
 800d88e:	2201      	movs	r2, #1
 800d890:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d892:	4b37      	ldr	r3, [pc, #220]	; (800d970 <tcp_close_shutdown+0x1b8>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d102      	bne.n	800d8a2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d89c:	f004 f80a 	bl	80118b4 <tcp_trigger_input_pcb_close>
 800d8a0:	e002      	b.n	800d8a8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff fed6 	bl	800d654 <tcp_free>
      }
      return ERR_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	e050      	b.n	800d94e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	7d1b      	ldrb	r3, [r3, #20]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d03b      	beq.n	800d92c <tcp_close_shutdown+0x174>
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	dc44      	bgt.n	800d942 <tcp_close_shutdown+0x18a>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <tcp_close_shutdown+0x10a>
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d02a      	beq.n	800d916 <tcp_close_shutdown+0x15e>
 800d8c0:	e03f      	b.n	800d942 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	8adb      	ldrh	r3, [r3, #22]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d021      	beq.n	800d90e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8ca:	4b2a      	ldr	r3, [pc, #168]	; (800d974 <tcp_close_shutdown+0x1bc>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d105      	bne.n	800d8e0 <tcp_close_shutdown+0x128>
 800d8d4:	4b27      	ldr	r3, [pc, #156]	; (800d974 <tcp_close_shutdown+0x1bc>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68db      	ldr	r3, [r3, #12]
 800d8da:	4a26      	ldr	r2, [pc, #152]	; (800d974 <tcp_close_shutdown+0x1bc>)
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	e013      	b.n	800d908 <tcp_close_shutdown+0x150>
 800d8e0:	4b24      	ldr	r3, [pc, #144]	; (800d974 <tcp_close_shutdown+0x1bc>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60bb      	str	r3, [r7, #8]
 800d8e6:	e00c      	b.n	800d902 <tcp_close_shutdown+0x14a>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d104      	bne.n	800d8fc <tcp_close_shutdown+0x144>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68da      	ldr	r2, [r3, #12]
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	60da      	str	r2, [r3, #12]
 800d8fa:	e005      	b.n	800d908 <tcp_close_shutdown+0x150>
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	60bb      	str	r3, [r7, #8]
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d1ef      	bne.n	800d8e8 <tcp_close_shutdown+0x130>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7ff fea0 	bl	800d654 <tcp_free>
      break;
 800d914:	e01a      	b.n	800d94c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff ff14 	bl	800d744 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	4816      	ldr	r0, [pc, #88]	; (800d978 <tcp_close_shutdown+0x1c0>)
 800d920:	f001 fb54 	bl	800efcc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7ff feb1 	bl	800d68c <tcp_free_listen>
      break;
 800d92a:	e00f      	b.n	800d94c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	480e      	ldr	r0, [pc, #56]	; (800d968 <tcp_close_shutdown+0x1b0>)
 800d930:	f001 fb4c 	bl	800efcc <tcp_pcb_remove>
 800d934:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <tcp_close_shutdown+0x1b4>)
 800d936:	2201      	movs	r2, #1
 800d938:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7ff fe8a 	bl	800d654 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d940:	e004      	b.n	800d94c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 f81a 	bl	800d97c <tcp_close_shutdown_fin>
 800d948:	4603      	mov	r3, r0
 800d94a:	e000      	b.n	800d94e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d94c:	2300      	movs	r3, #0
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bdb0      	pop	{r4, r5, r7, pc}
 800d956:	bf00      	nop
 800d958:	0801af2c 	.word	0x0801af2c
 800d95c:	0801b000 	.word	0x0801b000
 800d960:	0801af70 	.word	0x0801af70
 800d964:	0801b020 	.word	0x0801b020
 800d968:	2000cc38 	.word	0x2000cc38
 800d96c:	2000cc40 	.word	0x2000cc40
 800d970:	2000cc78 	.word	0x2000cc78
 800d974:	2000cc30 	.word	0x2000cc30
 800d978:	2000cc34 	.word	0x2000cc34

0800d97c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d106      	bne.n	800d998 <tcp_close_shutdown_fin+0x1c>
 800d98a:	4b2e      	ldr	r3, [pc, #184]	; (800da44 <tcp_close_shutdown_fin+0xc8>)
 800d98c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d990:	492d      	ldr	r1, [pc, #180]	; (800da48 <tcp_close_shutdown_fin+0xcc>)
 800d992:	482e      	ldr	r0, [pc, #184]	; (800da4c <tcp_close_shutdown_fin+0xd0>)
 800d994:	f00b f988 	bl	8018ca8 <iprintf>

  switch (pcb->state) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	7d1b      	ldrb	r3, [r3, #20]
 800d99c:	2b07      	cmp	r3, #7
 800d99e:	d020      	beq.n	800d9e2 <tcp_close_shutdown_fin+0x66>
 800d9a0:	2b07      	cmp	r3, #7
 800d9a2:	dc2b      	bgt.n	800d9fc <tcp_close_shutdown_fin+0x80>
 800d9a4:	2b03      	cmp	r3, #3
 800d9a6:	d002      	beq.n	800d9ae <tcp_close_shutdown_fin+0x32>
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d00d      	beq.n	800d9c8 <tcp_close_shutdown_fin+0x4c>
 800d9ac:	e026      	b.n	800d9fc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f004 fdea 	bl	8012588 <tcp_send_fin>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d11f      	bne.n	800da00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2205      	movs	r2, #5
 800d9c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d9c6:	e01b      	b.n	800da00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f004 fddd 	bl	8012588 <tcp_send_fin>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d114      	bne.n	800da04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2205      	movs	r2, #5
 800d9de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d9e0:	e010      	b.n	800da04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f004 fdd0 	bl	8012588 <tcp_send_fin>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2209      	movs	r2, #9
 800d9f8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d9fa:	e005      	b.n	800da08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e01c      	b.n	800da3a <tcp_close_shutdown_fin+0xbe>
      break;
 800da00:	bf00      	nop
 800da02:	e002      	b.n	800da0a <tcp_close_shutdown_fin+0x8e>
      break;
 800da04:	bf00      	nop
 800da06:	e000      	b.n	800da0a <tcp_close_shutdown_fin+0x8e>
      break;
 800da08:	bf00      	nop
  }

  if (err == ERR_OK) {
 800da0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f004 fef6 	bl	8012804 <tcp_output>
 800da18:	e00d      	b.n	800da36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800da1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da22:	d108      	bne.n	800da36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8b5b      	ldrh	r3, [r3, #26]
 800da28:	f043 0308 	orr.w	r3, r3, #8
 800da2c:	b29a      	uxth	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	e001      	b.n	800da3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800da36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	0801af2c 	.word	0x0801af2c
 800da48:	0801afdc 	.word	0x0801afdc
 800da4c:	0801af70 	.word	0x0801af70

0800da50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d109      	bne.n	800da72 <tcp_close+0x22>
 800da5e:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <tcp_close+0x4c>)
 800da60:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800da64:	490e      	ldr	r1, [pc, #56]	; (800daa0 <tcp_close+0x50>)
 800da66:	480f      	ldr	r0, [pc, #60]	; (800daa4 <tcp_close+0x54>)
 800da68:	f00b f91e 	bl	8018ca8 <iprintf>
 800da6c:	f06f 030f 	mvn.w	r3, #15
 800da70:	e00f      	b.n	800da92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	7d1b      	ldrb	r3, [r3, #20]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d006      	beq.n	800da88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	8b5b      	ldrh	r3, [r3, #26]
 800da7e:	f043 0310 	orr.w	r3, r3, #16
 800da82:	b29a      	uxth	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800da88:	2101      	movs	r1, #1
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff fe94 	bl	800d7b8 <tcp_close_shutdown>
 800da90:	4603      	mov	r3, r0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3708      	adds	r7, #8
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	0801af2c 	.word	0x0801af2c
 800daa0:	0801b03c 	.word	0x0801b03c
 800daa4:	0801af70 	.word	0x0801af70

0800daa8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08e      	sub	sp, #56	; 0x38
 800daac:	af04      	add	r7, sp, #16
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d107      	bne.n	800dac8 <tcp_abandon+0x20>
 800dab8:	4b52      	ldr	r3, [pc, #328]	; (800dc04 <tcp_abandon+0x15c>)
 800daba:	f240 223d 	movw	r2, #573	; 0x23d
 800dabe:	4952      	ldr	r1, [pc, #328]	; (800dc08 <tcp_abandon+0x160>)
 800dac0:	4852      	ldr	r0, [pc, #328]	; (800dc0c <tcp_abandon+0x164>)
 800dac2:	f00b f8f1 	bl	8018ca8 <iprintf>
 800dac6:	e099      	b.n	800dbfc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	7d1b      	ldrb	r3, [r3, #20]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d106      	bne.n	800dade <tcp_abandon+0x36>
 800dad0:	4b4c      	ldr	r3, [pc, #304]	; (800dc04 <tcp_abandon+0x15c>)
 800dad2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dad6:	494e      	ldr	r1, [pc, #312]	; (800dc10 <tcp_abandon+0x168>)
 800dad8:	484c      	ldr	r0, [pc, #304]	; (800dc0c <tcp_abandon+0x164>)
 800dada:	f00b f8e5 	bl	8018ca8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	7d1b      	ldrb	r3, [r3, #20]
 800dae2:	2b0a      	cmp	r3, #10
 800dae4:	d107      	bne.n	800daf6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dae6:	6879      	ldr	r1, [r7, #4]
 800dae8:	484a      	ldr	r0, [pc, #296]	; (800dc14 <tcp_abandon+0x16c>)
 800daea:	f001 fa6f 	bl	800efcc <tcp_pcb_remove>
    tcp_free(pcb);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff fdb0 	bl	800d654 <tcp_free>
 800daf4:	e082      	b.n	800dbfc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dafa:	2300      	movs	r3, #0
 800dafc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	7d1b      	ldrb	r3, [r3, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d126      	bne.n	800db6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	8adb      	ldrh	r3, [r3, #22]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d02e      	beq.n	800db86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db28:	4b3b      	ldr	r3, [pc, #236]	; (800dc18 <tcp_abandon+0x170>)
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	687a      	ldr	r2, [r7, #4]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d105      	bne.n	800db3e <tcp_abandon+0x96>
 800db32:	4b39      	ldr	r3, [pc, #228]	; (800dc18 <tcp_abandon+0x170>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	4a37      	ldr	r2, [pc, #220]	; (800dc18 <tcp_abandon+0x170>)
 800db3a:	6013      	str	r3, [r2, #0]
 800db3c:	e013      	b.n	800db66 <tcp_abandon+0xbe>
 800db3e:	4b36      	ldr	r3, [pc, #216]	; (800dc18 <tcp_abandon+0x170>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	61fb      	str	r3, [r7, #28]
 800db44:	e00c      	b.n	800db60 <tcp_abandon+0xb8>
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d104      	bne.n	800db5a <tcp_abandon+0xb2>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68da      	ldr	r2, [r3, #12]
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	60da      	str	r2, [r3, #12]
 800db58:	e005      	b.n	800db66 <tcp_abandon+0xbe>
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	61fb      	str	r3, [r7, #28]
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1ef      	bne.n	800db46 <tcp_abandon+0x9e>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	60da      	str	r2, [r3, #12]
 800db6c:	e00b      	b.n	800db86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	8adb      	ldrh	r3, [r3, #22]
 800db76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	4828      	ldr	r0, [pc, #160]	; (800dc1c <tcp_abandon+0x174>)
 800db7c:	f001 fa26 	bl	800efcc <tcp_pcb_remove>
 800db80:	4b27      	ldr	r3, [pc, #156]	; (800dc20 <tcp_abandon+0x178>)
 800db82:	2201      	movs	r2, #1
 800db84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d004      	beq.n	800db98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db92:	4618      	mov	r0, r3
 800db94:	f000 ff12 	bl	800e9bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d004      	beq.n	800dbaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba4:	4618      	mov	r0, r3
 800dba6:	f000 ff09 	bl	800e9bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d004      	beq.n	800dbbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f000 ff00 	bl	800e9bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00e      	beq.n	800dbe0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dbc2:	6879      	ldr	r1, [r7, #4]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	3304      	adds	r3, #4
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	8b12      	ldrh	r2, [r2, #24]
 800dbcc:	9202      	str	r2, [sp, #8]
 800dbce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dbd0:	9201      	str	r2, [sp, #4]
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	69b9      	ldr	r1, [r7, #24]
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f005 fbc6 	bl	801336c <tcp_rst>
    }
    last_state = pcb->state;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	7d1b      	ldrb	r3, [r3, #20]
 800dbe4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f7ff fd34 	bl	800d654 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <tcp_abandon+0x154>
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	f06f 010c 	mvn.w	r1, #12
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	4798      	blx	r3
  }
}
 800dbfc:	3728      	adds	r7, #40	; 0x28
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0801af2c 	.word	0x0801af2c
 800dc08:	0801b070 	.word	0x0801b070
 800dc0c:	0801af70 	.word	0x0801af70
 800dc10:	0801b08c 	.word	0x0801b08c
 800dc14:	2000cc3c 	.word	0x2000cc3c
 800dc18:	2000cc30 	.word	0x2000cc30
 800dc1c:	2000cc38 	.word	0x2000cc38
 800dc20:	2000cc40 	.word	0x2000cc40

0800dc24 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f7ff ff3a 	bl	800daa8 <tcp_abandon>
}
 800dc34:	bf00      	nop
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b088      	sub	sp, #32
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	4613      	mov	r3, r2
 800dc48:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dc4a:	2304      	movs	r3, #4
 800dc4c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d101      	bne.n	800dc58 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dc54:	4b3e      	ldr	r3, [pc, #248]	; (800dd50 <tcp_bind+0x114>)
 800dc56:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <tcp_bind+0x36>
 800dc5e:	4b3d      	ldr	r3, [pc, #244]	; (800dd54 <tcp_bind+0x118>)
 800dc60:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dc64:	493c      	ldr	r1, [pc, #240]	; (800dd58 <tcp_bind+0x11c>)
 800dc66:	483d      	ldr	r0, [pc, #244]	; (800dd5c <tcp_bind+0x120>)
 800dc68:	f00b f81e 	bl	8018ca8 <iprintf>
 800dc6c:	f06f 030f 	mvn.w	r3, #15
 800dc70:	e06a      	b.n	800dd48 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	7d1b      	ldrb	r3, [r3, #20]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <tcp_bind+0x52>
 800dc7a:	4b36      	ldr	r3, [pc, #216]	; (800dd54 <tcp_bind+0x118>)
 800dc7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dc80:	4937      	ldr	r1, [pc, #220]	; (800dd60 <tcp_bind+0x124>)
 800dc82:	4836      	ldr	r0, [pc, #216]	; (800dd5c <tcp_bind+0x120>)
 800dc84:	f00b f810 	bl	8018ca8 <iprintf>
 800dc88:	f06f 0305 	mvn.w	r3, #5
 800dc8c:	e05c      	b.n	800dd48 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dc8e:	88fb      	ldrh	r3, [r7, #6]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d109      	bne.n	800dca8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dc94:	f000 f914 	bl	800dec0 <tcp_new_port>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dc9c:	88fb      	ldrh	r3, [r7, #6]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d135      	bne.n	800dd0e <tcp_bind+0xd2>
      return ERR_BUF;
 800dca2:	f06f 0301 	mvn.w	r3, #1
 800dca6:	e04f      	b.n	800dd48 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dca8:	2300      	movs	r3, #0
 800dcaa:	61fb      	str	r3, [r7, #28]
 800dcac:	e02b      	b.n	800dd06 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dcae:	4a2d      	ldr	r2, [pc, #180]	; (800dd64 <tcp_bind+0x128>)
 800dcb0:	69fb      	ldr	r3, [r7, #28]
 800dcb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	61bb      	str	r3, [r7, #24]
 800dcba:	e01e      	b.n	800dcfa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	8adb      	ldrh	r3, [r3, #22]
 800dcc0:	88fa      	ldrh	r2, [r7, #6]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d116      	bne.n	800dcf4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800dcc6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d010      	beq.n	800dcee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00c      	beq.n	800dcee <tcp_bind+0xb2>
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d009      	beq.n	800dcee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d005      	beq.n	800dcee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800dce2:	69bb      	ldr	r3, [r7, #24]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d102      	bne.n	800dcf4 <tcp_bind+0xb8>
              return ERR_USE;
 800dcee:	f06f 0307 	mvn.w	r3, #7
 800dcf2:	e029      	b.n	800dd48 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800dcf4:	69bb      	ldr	r3, [r7, #24]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1dd      	bne.n	800dcbc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	3301      	adds	r3, #1
 800dd04:	61fb      	str	r3, [r7, #28]
 800dd06:	69fa      	ldr	r2, [r7, #28]
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	dbcf      	blt.n	800dcae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d00c      	beq.n	800dd2e <tcp_bind+0xf2>
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d008      	beq.n	800dd2e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d002      	beq.n	800dd28 <tcp_bind+0xec>
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	e000      	b.n	800dd2a <tcp_bind+0xee>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	88fa      	ldrh	r2, [r7, #6]
 800dd32:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dd34:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <tcp_bind+0x12c>)
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	60da      	str	r2, [r3, #12]
 800dd3c:	4a0a      	ldr	r2, [pc, #40]	; (800dd68 <tcp_bind+0x12c>)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	f005 fcd5 	bl	80136f0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3720      	adds	r7, #32
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	0801d324 	.word	0x0801d324
 800dd54:	0801af2c 	.word	0x0801af2c
 800dd58:	0801b0c0 	.word	0x0801b0c0
 800dd5c:	0801af70 	.word	0x0801af70
 800dd60:	0801b0d8 	.word	0x0801b0d8
 800dd64:	0801d2ec 	.word	0x0801d2ec
 800dd68:	2000cc30 	.word	0x2000cc30

0800dd6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <tcp_update_rcv_ann_wnd+0x1c>
 800dd7a:	4b25      	ldr	r3, [pc, #148]	; (800de10 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd7c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dd80:	4924      	ldr	r1, [pc, #144]	; (800de14 <tcp_update_rcv_ann_wnd+0xa8>)
 800dd82:	4825      	ldr	r0, [pc, #148]	; (800de18 <tcp_update_rcv_ann_wnd+0xac>)
 800dd84:	f00a ff90 	bl	8018ca8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dd90:	4413      	add	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dd9c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dda0:	bf28      	it	cs
 800dda2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dda6:	b292      	uxth	r2, r2
 800dda8:	4413      	add	r3, r2
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	db08      	blt.n	800ddc4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	68fa      	ldr	r2, [r7, #12]
 800ddc0:	1ad3      	subs	r3, r2, r3
 800ddc2:	e020      	b.n	800de06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddcc:	1ad3      	subs	r3, r2, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	dd03      	ble.n	800ddda <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ddd8:	e014      	b.n	800de04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde2:	1ad3      	subs	r3, r2, r3
 800dde4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddec:	d306      	bcc.n	800ddfc <tcp_update_rcv_ann_wnd+0x90>
 800ddee:	4b08      	ldr	r3, [pc, #32]	; (800de10 <tcp_update_rcv_ann_wnd+0xa4>)
 800ddf0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ddf4:	4909      	ldr	r1, [pc, #36]	; (800de1c <tcp_update_rcv_ann_wnd+0xb0>)
 800ddf6:	4808      	ldr	r0, [pc, #32]	; (800de18 <tcp_update_rcv_ann_wnd+0xac>)
 800ddf8:	f00a ff56 	bl	8018ca8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800de04:	2300      	movs	r3, #0
  }
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	0801af2c 	.word	0x0801af2c
 800de14:	0801b188 	.word	0x0801b188
 800de18:	0801af70 	.word	0x0801af70
 800de1c:	0801b1ac 	.word	0x0801b1ac

0800de20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	460b      	mov	r3, r1
 800de2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d107      	bne.n	800de42 <tcp_recved+0x22>
 800de32:	4b1f      	ldr	r3, [pc, #124]	; (800deb0 <tcp_recved+0x90>)
 800de34:	f240 32cf 	movw	r2, #975	; 0x3cf
 800de38:	491e      	ldr	r1, [pc, #120]	; (800deb4 <tcp_recved+0x94>)
 800de3a:	481f      	ldr	r0, [pc, #124]	; (800deb8 <tcp_recved+0x98>)
 800de3c:	f00a ff34 	bl	8018ca8 <iprintf>
 800de40:	e032      	b.n	800dea8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	7d1b      	ldrb	r3, [r3, #20]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d106      	bne.n	800de58 <tcp_recved+0x38>
 800de4a:	4b19      	ldr	r3, [pc, #100]	; (800deb0 <tcp_recved+0x90>)
 800de4c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800de50:	491a      	ldr	r1, [pc, #104]	; (800debc <tcp_recved+0x9c>)
 800de52:	4819      	ldr	r0, [pc, #100]	; (800deb8 <tcp_recved+0x98>)
 800de54:	f00a ff28 	bl	8018ca8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800de5c:	887b      	ldrh	r3, [r7, #2]
 800de5e:	4413      	add	r3, r2
 800de60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800de62:	89fb      	ldrh	r3, [r7, #14]
 800de64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de68:	d804      	bhi.n	800de74 <tcp_recved+0x54>
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de6e:	89fa      	ldrh	r2, [r7, #14]
 800de70:	429a      	cmp	r2, r3
 800de72:	d204      	bcs.n	800de7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de7a:	851a      	strh	r2, [r3, #40]	; 0x28
 800de7c:	e002      	b.n	800de84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	89fa      	ldrh	r2, [r7, #14]
 800de82:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f7ff ff71 	bl	800dd6c <tcp_update_rcv_ann_wnd>
 800de8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800de92:	d309      	bcc.n	800dea8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	8b5b      	ldrh	r3, [r3, #26]
 800de98:	f043 0302 	orr.w	r3, r3, #2
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f004 fcae 	bl	8012804 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dea8:	3710      	adds	r7, #16
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	0801af2c 	.word	0x0801af2c
 800deb4:	0801b1c8 	.word	0x0801b1c8
 800deb8:	0801af70 	.word	0x0801af70
 800debc:	0801b1e0 	.word	0x0801b1e0

0800dec0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dec6:	2300      	movs	r3, #0
 800dec8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800deca:	4b1e      	ldr	r3, [pc, #120]	; (800df44 <tcp_new_port+0x84>)
 800decc:	881b      	ldrh	r3, [r3, #0]
 800dece:	3301      	adds	r3, #1
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <tcp_new_port+0x84>)
 800ded4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ded6:	4b1b      	ldr	r3, [pc, #108]	; (800df44 <tcp_new_port+0x84>)
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dede:	4293      	cmp	r3, r2
 800dee0:	d103      	bne.n	800deea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800dee2:	4b18      	ldr	r3, [pc, #96]	; (800df44 <tcp_new_port+0x84>)
 800dee4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800dee8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800deea:	2300      	movs	r3, #0
 800deec:	71fb      	strb	r3, [r7, #7]
 800deee:	e01e      	b.n	800df2e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800def0:	79fb      	ldrb	r3, [r7, #7]
 800def2:	4a15      	ldr	r2, [pc, #84]	; (800df48 <tcp_new_port+0x88>)
 800def4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	603b      	str	r3, [r7, #0]
 800defc:	e011      	b.n	800df22 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	8ada      	ldrh	r2, [r3, #22]
 800df02:	4b10      	ldr	r3, [pc, #64]	; (800df44 <tcp_new_port+0x84>)
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	429a      	cmp	r2, r3
 800df08:	d108      	bne.n	800df1c <tcp_new_port+0x5c>
        n++;
 800df0a:	88bb      	ldrh	r3, [r7, #4]
 800df0c:	3301      	adds	r3, #1
 800df0e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800df10:	88bb      	ldrh	r3, [r7, #4]
 800df12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df16:	d3d8      	bcc.n	800deca <tcp_new_port+0xa>
          return 0;
 800df18:	2300      	movs	r3, #0
 800df1a:	e00d      	b.n	800df38 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	603b      	str	r3, [r7, #0]
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d1ea      	bne.n	800defe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800df28:	79fb      	ldrb	r3, [r7, #7]
 800df2a:	3301      	adds	r3, #1
 800df2c:	71fb      	strb	r3, [r7, #7]
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	2b03      	cmp	r3, #3
 800df32:	d9dd      	bls.n	800def0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800df34:	4b03      	ldr	r3, [pc, #12]	; (800df44 <tcp_new_port+0x84>)
 800df36:	881b      	ldrh	r3, [r3, #0]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	20000024 	.word	0x20000024
 800df48:	0801d2ec 	.word	0x0801d2ec

0800df4c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b08a      	sub	sp, #40	; 0x28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	4613      	mov	r3, r2
 800df5a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d109      	bne.n	800df7a <tcp_connect+0x2e>
 800df66:	4b7d      	ldr	r3, [pc, #500]	; (800e15c <tcp_connect+0x210>)
 800df68:	f240 4235 	movw	r2, #1077	; 0x435
 800df6c:	497c      	ldr	r1, [pc, #496]	; (800e160 <tcp_connect+0x214>)
 800df6e:	487d      	ldr	r0, [pc, #500]	; (800e164 <tcp_connect+0x218>)
 800df70:	f00a fe9a 	bl	8018ca8 <iprintf>
 800df74:	f06f 030f 	mvn.w	r3, #15
 800df78:	e0ec      	b.n	800e154 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d109      	bne.n	800df94 <tcp_connect+0x48>
 800df80:	4b76      	ldr	r3, [pc, #472]	; (800e15c <tcp_connect+0x210>)
 800df82:	f240 4236 	movw	r2, #1078	; 0x436
 800df86:	4978      	ldr	r1, [pc, #480]	; (800e168 <tcp_connect+0x21c>)
 800df88:	4876      	ldr	r0, [pc, #472]	; (800e164 <tcp_connect+0x218>)
 800df8a:	f00a fe8d 	bl	8018ca8 <iprintf>
 800df8e:	f06f 030f 	mvn.w	r3, #15
 800df92:	e0df      	b.n	800e154 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	7d1b      	ldrb	r3, [r3, #20]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d009      	beq.n	800dfb0 <tcp_connect+0x64>
 800df9c:	4b6f      	ldr	r3, [pc, #444]	; (800e15c <tcp_connect+0x210>)
 800df9e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800dfa2:	4972      	ldr	r1, [pc, #456]	; (800e16c <tcp_connect+0x220>)
 800dfa4:	486f      	ldr	r0, [pc, #444]	; (800e164 <tcp_connect+0x218>)
 800dfa6:	f00a fe7f 	bl	8018ca8 <iprintf>
 800dfaa:	f06f 0309 	mvn.w	r3, #9
 800dfae:	e0d1      	b.n	800e154 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d002      	beq.n	800dfbc <tcp_connect+0x70>
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	e000      	b.n	800dfbe <tcp_connect+0x72>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	88fa      	ldrh	r2, [r7, #6]
 800dfc6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	7a1b      	ldrb	r3, [r3, #8]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d006      	beq.n	800dfde <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	7a1b      	ldrb	r3, [r3, #8]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fc8f 	bl	800c8f8 <netif_get_by_index>
 800dfda:	6278      	str	r0, [r7, #36]	; 0x24
 800dfdc:	e005      	b.n	800dfea <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f009 f966 	bl	80172b4 <ip4_route>
 800dfe8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d102      	bne.n	800dff6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800dff0:	f06f 0303 	mvn.w	r3, #3
 800dff4:	e0ae      	b.n	800e154 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d003      	beq.n	800e004 <tcp_connect+0xb8>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d111      	bne.n	800e028 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <tcp_connect+0xc4>
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	3304      	adds	r3, #4
 800e00e:	e000      	b.n	800e012 <tcp_connect+0xc6>
 800e010:	2300      	movs	r3, #0
 800e012:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d102      	bne.n	800e020 <tcp_connect+0xd4>
      return ERR_RTE;
 800e01a:	f06f 0303 	mvn.w	r3, #3
 800e01e:	e099      	b.n	800e154 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	8adb      	ldrh	r3, [r3, #22]
 800e02c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	8adb      	ldrh	r3, [r3, #22]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d10c      	bne.n	800e050 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e036:	f7ff ff43 	bl	800dec0 <tcp_new_port>
 800e03a:	4603      	mov	r3, r0
 800e03c:	461a      	mov	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	8adb      	ldrh	r3, [r3, #22]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d102      	bne.n	800e050 <tcp_connect+0x104>
      return ERR_BUF;
 800e04a:	f06f 0301 	mvn.w	r3, #1
 800e04e:	e081      	b.n	800e154 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e050:	68f8      	ldr	r0, [r7, #12]
 800e052:	f001 f84f 	bl	800f0f4 <tcp_next_iss>
 800e056:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2200      	movs	r2, #0
 800e05c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	697a      	ldr	r2, [r7, #20]
 800e062:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	1e5a      	subs	r2, r3, #1
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	1e5a      	subs	r2, r3, #1
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	1e5a      	subs	r2, r3, #1
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e082:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e09a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e0a4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0b2:	f001 f845 	bl	800f140 <tcp_eff_send_mss_netif>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	683a      	ldr	r2, [r7, #0]
 800e0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e0ce:	2102      	movs	r1, #2
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f004 faa9 	bl	8012628 <tcp_enqueue_flags>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e0da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d136      	bne.n	800e150 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e0e8:	8b7b      	ldrh	r3, [r7, #26]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d021      	beq.n	800e132 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e0ee:	4b20      	ldr	r3, [pc, #128]	; (800e170 <tcp_connect+0x224>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d105      	bne.n	800e104 <tcp_connect+0x1b8>
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <tcp_connect+0x224>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	4a1c      	ldr	r2, [pc, #112]	; (800e170 <tcp_connect+0x224>)
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	e013      	b.n	800e12c <tcp_connect+0x1e0>
 800e104:	4b1a      	ldr	r3, [pc, #104]	; (800e170 <tcp_connect+0x224>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	623b      	str	r3, [r7, #32]
 800e10a:	e00c      	b.n	800e126 <tcp_connect+0x1da>
 800e10c:	6a3b      	ldr	r3, [r7, #32]
 800e10e:	68db      	ldr	r3, [r3, #12]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	429a      	cmp	r2, r3
 800e114:	d104      	bne.n	800e120 <tcp_connect+0x1d4>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68da      	ldr	r2, [r3, #12]
 800e11a:	6a3b      	ldr	r3, [r7, #32]
 800e11c:	60da      	str	r2, [r3, #12]
 800e11e:	e005      	b.n	800e12c <tcp_connect+0x1e0>
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	623b      	str	r3, [r7, #32]
 800e126:	6a3b      	ldr	r3, [r7, #32]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1ef      	bne.n	800e10c <tcp_connect+0x1c0>
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e132:	4b10      	ldr	r3, [pc, #64]	; (800e174 <tcp_connect+0x228>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	60da      	str	r2, [r3, #12]
 800e13a:	4a0e      	ldr	r2, [pc, #56]	; (800e174 <tcp_connect+0x228>)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	6013      	str	r3, [r2, #0]
 800e140:	f005 fad6 	bl	80136f0 <tcp_timer_needed>
 800e144:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <tcp_connect+0x22c>)
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e14a:	68f8      	ldr	r0, [r7, #12]
 800e14c:	f004 fb5a 	bl	8012804 <tcp_output>
  }
  return ret;
 800e150:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e154:	4618      	mov	r0, r3
 800e156:	3728      	adds	r7, #40	; 0x28
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	0801af2c 	.word	0x0801af2c
 800e160:	0801b208 	.word	0x0801b208
 800e164:	0801af70 	.word	0x0801af70
 800e168:	0801b224 	.word	0x0801b224
 800e16c:	0801b240 	.word	0x0801b240
 800e170:	2000cc30 	.word	0x2000cc30
 800e174:	2000cc38 	.word	0x2000cc38
 800e178:	2000cc40 	.word	0x2000cc40

0800e17c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e17c:	b5b0      	push	{r4, r5, r7, lr}
 800e17e:	b090      	sub	sp, #64	; 0x40
 800e180:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e188:	4b94      	ldr	r3, [pc, #592]	; (800e3dc <tcp_slowtmr+0x260>)
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	3301      	adds	r3, #1
 800e18e:	4a93      	ldr	r2, [pc, #588]	; (800e3dc <tcp_slowtmr+0x260>)
 800e190:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e192:	4b93      	ldr	r3, [pc, #588]	; (800e3e0 <tcp_slowtmr+0x264>)
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	3301      	adds	r3, #1
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	4b91      	ldr	r3, [pc, #580]	; (800e3e0 <tcp_slowtmr+0x264>)
 800e19c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e1a2:	4b90      	ldr	r3, [pc, #576]	; (800e3e4 <tcp_slowtmr+0x268>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e1a8:	e29d      	b.n	800e6e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	7d1b      	ldrb	r3, [r3, #20]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d106      	bne.n	800e1c0 <tcp_slowtmr+0x44>
 800e1b2:	4b8d      	ldr	r3, [pc, #564]	; (800e3e8 <tcp_slowtmr+0x26c>)
 800e1b4:	f240 42be 	movw	r2, #1214	; 0x4be
 800e1b8:	498c      	ldr	r1, [pc, #560]	; (800e3ec <tcp_slowtmr+0x270>)
 800e1ba:	488d      	ldr	r0, [pc, #564]	; (800e3f0 <tcp_slowtmr+0x274>)
 800e1bc:	f00a fd74 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	7d1b      	ldrb	r3, [r3, #20]
 800e1c4:	2b01      	cmp	r3, #1
 800e1c6:	d106      	bne.n	800e1d6 <tcp_slowtmr+0x5a>
 800e1c8:	4b87      	ldr	r3, [pc, #540]	; (800e3e8 <tcp_slowtmr+0x26c>)
 800e1ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e1ce:	4989      	ldr	r1, [pc, #548]	; (800e3f4 <tcp_slowtmr+0x278>)
 800e1d0:	4887      	ldr	r0, [pc, #540]	; (800e3f0 <tcp_slowtmr+0x274>)
 800e1d2:	f00a fd69 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d8:	7d1b      	ldrb	r3, [r3, #20]
 800e1da:	2b0a      	cmp	r3, #10
 800e1dc:	d106      	bne.n	800e1ec <tcp_slowtmr+0x70>
 800e1de:	4b82      	ldr	r3, [pc, #520]	; (800e3e8 <tcp_slowtmr+0x26c>)
 800e1e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e1e4:	4984      	ldr	r1, [pc, #528]	; (800e3f8 <tcp_slowtmr+0x27c>)
 800e1e6:	4882      	ldr	r0, [pc, #520]	; (800e3f0 <tcp_slowtmr+0x274>)
 800e1e8:	f00a fd5e 	bl	8018ca8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ee:	7f9a      	ldrb	r2, [r3, #30]
 800e1f0:	4b7b      	ldr	r3, [pc, #492]	; (800e3e0 <tcp_slowtmr+0x264>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d105      	bne.n	800e204 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e202:	e270      	b.n	800e6e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e204:	4b76      	ldr	r3, [pc, #472]	; (800e3e0 <tcp_slowtmr+0x264>)
 800e206:	781a      	ldrb	r2, [r3, #0]
 800e208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e20c:	2300      	movs	r3, #0
 800e20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e212:	2300      	movs	r3, #0
 800e214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21a:	7d1b      	ldrb	r3, [r3, #20]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d10a      	bne.n	800e236 <tcp_slowtmr+0xba>
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e226:	2b05      	cmp	r3, #5
 800e228:	d905      	bls.n	800e236 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e22e:	3301      	adds	r3, #1
 800e230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e234:	e11e      	b.n	800e474 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e23c:	2b0b      	cmp	r3, #11
 800e23e:	d905      	bls.n	800e24c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e244:	3301      	adds	r3, #1
 800e246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e24a:	e113      	b.n	800e474 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e252:	2b00      	cmp	r3, #0
 800e254:	d075      	beq.n	800e342 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d006      	beq.n	800e26c <tcp_slowtmr+0xf0>
 800e25e:	4b62      	ldr	r3, [pc, #392]	; (800e3e8 <tcp_slowtmr+0x26c>)
 800e260:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e264:	4965      	ldr	r1, [pc, #404]	; (800e3fc <tcp_slowtmr+0x280>)
 800e266:	4862      	ldr	r0, [pc, #392]	; (800e3f0 <tcp_slowtmr+0x274>)
 800e268:	f00a fd1e 	bl	8018ca8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e270:	2b00      	cmp	r3, #0
 800e272:	d106      	bne.n	800e282 <tcp_slowtmr+0x106>
 800e274:	4b5c      	ldr	r3, [pc, #368]	; (800e3e8 <tcp_slowtmr+0x26c>)
 800e276:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e27a:	4961      	ldr	r1, [pc, #388]	; (800e400 <tcp_slowtmr+0x284>)
 800e27c:	485c      	ldr	r0, [pc, #368]	; (800e3f0 <tcp_slowtmr+0x274>)
 800e27e:	f00a fd13 	bl	8018ca8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e288:	2b0b      	cmp	r3, #11
 800e28a:	d905      	bls.n	800e298 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e290:	3301      	adds	r3, #1
 800e292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e296:	e0ed      	b.n	800e474 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	4a58      	ldr	r2, [pc, #352]	; (800e404 <tcp_slowtmr+0x288>)
 800e2a2:	5cd3      	ldrb	r3, [r2, r3]
 800e2a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e2ac:	7c7a      	ldrb	r2, [r7, #17]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d907      	bls.n	800e2c2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e2c8:	7c7a      	ldrb	r2, [r7, #17]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	f200 80d2 	bhi.w	800e474 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d108      	bne.n	800e2f0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e2de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2e0:	f005 f938 	bl	8013554 <tcp_zero_window_probe>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d014      	beq.n	800e314 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	623b      	str	r3, [r7, #32]
 800e2ee:	e011      	b.n	800e314 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e2fa:	f003 fffd 	bl	80122f8 <tcp_split_unsent_seg>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d107      	bne.n	800e314 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e306:	f004 fa7d 	bl	8012804 <tcp_output>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e310:	2300      	movs	r3, #0
 800e312:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	2b00      	cmp	r3, #0
 800e318:	f000 80ac 	beq.w	800e474 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e32a:	2b06      	cmp	r3, #6
 800e32c:	f200 80a2 	bhi.w	800e474 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e332:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e336:	3301      	adds	r3, #1
 800e338:	b2da      	uxtb	r2, r3
 800e33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e340:	e098      	b.n	800e474 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e348:	2b00      	cmp	r3, #0
 800e34a:	db0f      	blt.n	800e36c <tcp_slowtmr+0x1f0>
 800e34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e352:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e356:	4293      	cmp	r3, r2
 800e358:	d008      	beq.n	800e36c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e360:	b29b      	uxth	r3, r3
 800e362:	3301      	adds	r3, #1
 800e364:	b29b      	uxth	r3, r3
 800e366:	b21a      	sxth	r2, r3
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e374:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e378:	429a      	cmp	r2, r3
 800e37a:	db7b      	blt.n	800e474 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e37c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e37e:	f004 fd35 	bl	8012dec <tcp_rexmit_rto_prepare>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d007      	beq.n	800e398 <tcp_slowtmr+0x21c>
 800e388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d171      	bne.n	800e474 <tcp_slowtmr+0x2f8>
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e394:	2b00      	cmp	r3, #0
 800e396:	d06d      	beq.n	800e474 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39a:	7d1b      	ldrb	r3, [r3, #20]
 800e39c:	2b02      	cmp	r3, #2
 800e39e:	d03a      	beq.n	800e416 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3a6:	2b0c      	cmp	r3, #12
 800e3a8:	bf28      	it	cs
 800e3aa:	230c      	movcs	r3, #12
 800e3ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e3b4:	10db      	asrs	r3, r3, #3
 800e3b6:	b21b      	sxth	r3, r3
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e3c0:	4413      	add	r3, r2
 800e3c2:	7efa      	ldrb	r2, [r7, #27]
 800e3c4:	4910      	ldr	r1, [pc, #64]	; (800e408 <tcp_slowtmr+0x28c>)
 800e3c6:	5c8a      	ldrb	r2, [r1, r2]
 800e3c8:	4093      	lsls	r3, r2
 800e3ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	dc1a      	bgt.n	800e40c <tcp_slowtmr+0x290>
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	b21a      	sxth	r2, r3
 800e3da:	e019      	b.n	800e410 <tcp_slowtmr+0x294>
 800e3dc:	2000cc2c 	.word	0x2000cc2c
 800e3e0:	2000cc42 	.word	0x2000cc42
 800e3e4:	2000cc38 	.word	0x2000cc38
 800e3e8:	0801af2c 	.word	0x0801af2c
 800e3ec:	0801b270 	.word	0x0801b270
 800e3f0:	0801af70 	.word	0x0801af70
 800e3f4:	0801b29c 	.word	0x0801b29c
 800e3f8:	0801b2c8 	.word	0x0801b2c8
 800e3fc:	0801b2f8 	.word	0x0801b2f8
 800e400:	0801b32c 	.word	0x0801b32c
 800e404:	0801d2e4 	.word	0x0801d2e4
 800e408:	0801d2d4 	.word	0x0801d2d4
 800e40c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	2200      	movs	r2, #0
 800e41a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e428:	4293      	cmp	r3, r2
 800e42a:	bf28      	it	cs
 800e42c:	4613      	movcs	r3, r2
 800e42e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e430:	8a7b      	ldrh	r3, [r7, #18]
 800e432:	085b      	lsrs	r3, r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	b29b      	uxth	r3, r3
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d206      	bcs.n	800e45c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e452:	005b      	lsls	r3, r3, #1
 800e454:	b29a      	uxth	r2, r3
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e468:	2200      	movs	r2, #0
 800e46a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e46e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e470:	f004 fd2c 	bl	8012ecc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	7d1b      	ldrb	r3, [r3, #20]
 800e478:	2b06      	cmp	r3, #6
 800e47a:	d111      	bne.n	800e4a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	8b5b      	ldrh	r3, [r3, #26]
 800e480:	f003 0310 	and.w	r3, r3, #16
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00b      	beq.n	800e4a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e488:	4b9c      	ldr	r3, [pc, #624]	; (800e6fc <tcp_slowtmr+0x580>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48e:	6a1b      	ldr	r3, [r3, #32]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	2b28      	cmp	r3, #40	; 0x28
 800e494:	d904      	bls.n	800e4a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e49a:	3301      	adds	r3, #1
 800e49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	7a5b      	ldrb	r3, [r3, #9]
 800e4a4:	f003 0308 	and.w	r3, r3, #8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d04a      	beq.n	800e542 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d003      	beq.n	800e4bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e4b8:	2b07      	cmp	r3, #7
 800e4ba:	d142      	bne.n	800e542 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4bc:	4b8f      	ldr	r3, [pc, #572]	; (800e6fc <tcp_slowtmr+0x580>)
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	6a1b      	ldr	r3, [r3, #32]
 800e4c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e4cc:	4b8c      	ldr	r3, [pc, #560]	; (800e700 <tcp_slowtmr+0x584>)
 800e4ce:	440b      	add	r3, r1
 800e4d0:	498c      	ldr	r1, [pc, #560]	; (800e704 <tcp_slowtmr+0x588>)
 800e4d2:	fba1 1303 	umull	r1, r3, r1, r3
 800e4d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d90a      	bls.n	800e4f2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e4e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e4f0:	e027      	b.n	800e542 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4f2:	4b82      	ldr	r3, [pc, #520]	; (800e6fc <tcp_slowtmr+0x580>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	6a1b      	ldr	r3, [r3, #32]
 800e4fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e508:	4618      	mov	r0, r3
 800e50a:	4b7f      	ldr	r3, [pc, #508]	; (800e708 <tcp_slowtmr+0x58c>)
 800e50c:	fb00 f303 	mul.w	r3, r0, r3
 800e510:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e512:	497c      	ldr	r1, [pc, #496]	; (800e704 <tcp_slowtmr+0x588>)
 800e514:	fba1 1303 	umull	r1, r3, r1, r3
 800e518:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d911      	bls.n	800e542 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e520:	f004 ffd8 	bl	80134d4 <tcp_keepalive>
 800e524:	4603      	mov	r3, r0
 800e526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e52a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d107      	bne.n	800e542 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e538:	3301      	adds	r3, #1
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e546:	2b00      	cmp	r3, #0
 800e548:	d011      	beq.n	800e56e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e54a:	4b6c      	ldr	r3, [pc, #432]	; (800e6fc <tcp_slowtmr+0x580>)
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e550:	6a1b      	ldr	r3, [r3, #32]
 800e552:	1ad2      	subs	r2, r2, r3
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e55a:	4619      	mov	r1, r3
 800e55c:	460b      	mov	r3, r1
 800e55e:	005b      	lsls	r3, r3, #1
 800e560:	440b      	add	r3, r1
 800e562:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e564:	429a      	cmp	r2, r3
 800e566:	d302      	bcc.n	800e56e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e56a:	f000 fe93 	bl	800f294 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	7d1b      	ldrb	r3, [r3, #20]
 800e572:	2b03      	cmp	r3, #3
 800e574:	d10b      	bne.n	800e58e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e576:	4b61      	ldr	r3, [pc, #388]	; (800e6fc <tcp_slowtmr+0x580>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	6a1b      	ldr	r3, [r3, #32]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	2b28      	cmp	r3, #40	; 0x28
 800e582:	d904      	bls.n	800e58e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e588:	3301      	adds	r3, #1
 800e58a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	7d1b      	ldrb	r3, [r3, #20]
 800e592:	2b09      	cmp	r3, #9
 800e594:	d10b      	bne.n	800e5ae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e596:	4b59      	ldr	r3, [pc, #356]	; (800e6fc <tcp_slowtmr+0x580>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	1ad3      	subs	r3, r2, r3
 800e5a0:	2bf0      	cmp	r3, #240	; 0xf0
 800e5a2:	d904      	bls.n	800e5ae <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5a8:	3301      	adds	r3, #1
 800e5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e5ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d060      	beq.n	800e678 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e5be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5c0:	f000 fcb4 	bl	800ef2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d010      	beq.n	800e5ec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e5ca:	4b50      	ldr	r3, [pc, #320]	; (800e70c <tcp_slowtmr+0x590>)
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d106      	bne.n	800e5e2 <tcp_slowtmr+0x466>
 800e5d4:	4b4e      	ldr	r3, [pc, #312]	; (800e710 <tcp_slowtmr+0x594>)
 800e5d6:	f240 526d 	movw	r2, #1389	; 0x56d
 800e5da:	494e      	ldr	r1, [pc, #312]	; (800e714 <tcp_slowtmr+0x598>)
 800e5dc:	484e      	ldr	r0, [pc, #312]	; (800e718 <tcp_slowtmr+0x59c>)
 800e5de:	f00a fb63 	bl	8018ca8 <iprintf>
        prev->next = pcb->next;
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	68da      	ldr	r2, [r3, #12]
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	60da      	str	r2, [r3, #12]
 800e5ea:	e00f      	b.n	800e60c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e5ec:	4b47      	ldr	r3, [pc, #284]	; (800e70c <tcp_slowtmr+0x590>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d006      	beq.n	800e604 <tcp_slowtmr+0x488>
 800e5f6:	4b46      	ldr	r3, [pc, #280]	; (800e710 <tcp_slowtmr+0x594>)
 800e5f8:	f240 5271 	movw	r2, #1393	; 0x571
 800e5fc:	4947      	ldr	r1, [pc, #284]	; (800e71c <tcp_slowtmr+0x5a0>)
 800e5fe:	4846      	ldr	r0, [pc, #280]	; (800e718 <tcp_slowtmr+0x59c>)
 800e600:	f00a fb52 	bl	8018ca8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	4a40      	ldr	r2, [pc, #256]	; (800e70c <tcp_slowtmr+0x590>)
 800e60a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e60c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e610:	2b00      	cmp	r3, #0
 800e612:	d013      	beq.n	800e63c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e616:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e61c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	3304      	adds	r3, #4
 800e622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e624:	8ad2      	ldrh	r2, [r2, #22]
 800e626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e628:	8b09      	ldrh	r1, [r1, #24]
 800e62a:	9102      	str	r1, [sp, #8]
 800e62c:	9201      	str	r2, [sp, #4]
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	462b      	mov	r3, r5
 800e632:	4622      	mov	r2, r4
 800e634:	4601      	mov	r1, r0
 800e636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e638:	f004 fe98 	bl	801336c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	7d1b      	ldrb	r3, [r3, #20]
 800e646:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e652:	6838      	ldr	r0, [r7, #0]
 800e654:	f7fe fffe 	bl	800d654 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e658:	4b31      	ldr	r3, [pc, #196]	; (800e720 <tcp_slowtmr+0x5a4>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d004      	beq.n	800e66e <tcp_slowtmr+0x4f2>
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f06f 010c 	mvn.w	r1, #12
 800e66a:	68b8      	ldr	r0, [r7, #8]
 800e66c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e66e:	4b2c      	ldr	r3, [pc, #176]	; (800e720 <tcp_slowtmr+0x5a4>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d037      	beq.n	800e6e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e676:	e592      	b.n	800e19e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	7f1b      	ldrb	r3, [r3, #28]
 800e686:	3301      	adds	r3, #1
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	7f1a      	ldrb	r2, [r3, #28]
 800e692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e694:	7f5b      	ldrb	r3, [r3, #29]
 800e696:	429a      	cmp	r2, r3
 800e698:	d325      	bcc.n	800e6e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	2200      	movs	r2, #0
 800e69e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e6a0:	4b1f      	ldr	r3, [pc, #124]	; (800e720 <tcp_slowtmr+0x5a4>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d00b      	beq.n	800e6c8 <tcp_slowtmr+0x54c>
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6b8:	6912      	ldr	r2, [r2, #16]
 800e6ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6bc:	4610      	mov	r0, r2
 800e6be:	4798      	blx	r3
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e6c6:	e002      	b.n	800e6ce <tcp_slowtmr+0x552>
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e6ce:	4b14      	ldr	r3, [pc, #80]	; (800e720 <tcp_slowtmr+0x5a4>)
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d000      	beq.n	800e6d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e6d6:	e562      	b.n	800e19e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e6d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d102      	bne.n	800e6e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e2:	f004 f88f 	bl	8012804 <tcp_output>
  while (pcb != NULL) {
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f47f ad5e 	bne.w	800e1aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e6f2:	4b0c      	ldr	r3, [pc, #48]	; (800e724 <tcp_slowtmr+0x5a8>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e6f8:	e069      	b.n	800e7ce <tcp_slowtmr+0x652>
 800e6fa:	bf00      	nop
 800e6fc:	2000cc2c 	.word	0x2000cc2c
 800e700:	000a4cb8 	.word	0x000a4cb8
 800e704:	10624dd3 	.word	0x10624dd3
 800e708:	000124f8 	.word	0x000124f8
 800e70c:	2000cc38 	.word	0x2000cc38
 800e710:	0801af2c 	.word	0x0801af2c
 800e714:	0801b364 	.word	0x0801b364
 800e718:	0801af70 	.word	0x0801af70
 800e71c:	0801b390 	.word	0x0801b390
 800e720:	2000cc40 	.word	0x2000cc40
 800e724:	2000cc3c 	.word	0x2000cc3c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	7d1b      	ldrb	r3, [r3, #20]
 800e72c:	2b0a      	cmp	r3, #10
 800e72e:	d006      	beq.n	800e73e <tcp_slowtmr+0x5c2>
 800e730:	4b2b      	ldr	r3, [pc, #172]	; (800e7e0 <tcp_slowtmr+0x664>)
 800e732:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e736:	492b      	ldr	r1, [pc, #172]	; (800e7e4 <tcp_slowtmr+0x668>)
 800e738:	482b      	ldr	r0, [pc, #172]	; (800e7e8 <tcp_slowtmr+0x66c>)
 800e73a:	f00a fab5 	bl	8018ca8 <iprintf>
    pcb_remove = 0;
 800e73e:	2300      	movs	r3, #0
 800e740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e744:	4b29      	ldr	r3, [pc, #164]	; (800e7ec <tcp_slowtmr+0x670>)
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	6a1b      	ldr	r3, [r3, #32]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	2bf0      	cmp	r3, #240	; 0xf0
 800e750:	d904      	bls.n	800e75c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e756:	3301      	adds	r3, #1
 800e758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e760:	2b00      	cmp	r3, #0
 800e762:	d02f      	beq.n	800e7c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e766:	f000 fbe1 	bl	800ef2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d010      	beq.n	800e792 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e770:	4b1f      	ldr	r3, [pc, #124]	; (800e7f0 <tcp_slowtmr+0x674>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e776:	429a      	cmp	r2, r3
 800e778:	d106      	bne.n	800e788 <tcp_slowtmr+0x60c>
 800e77a:	4b19      	ldr	r3, [pc, #100]	; (800e7e0 <tcp_slowtmr+0x664>)
 800e77c:	f240 52af 	movw	r2, #1455	; 0x5af
 800e780:	491c      	ldr	r1, [pc, #112]	; (800e7f4 <tcp_slowtmr+0x678>)
 800e782:	4819      	ldr	r0, [pc, #100]	; (800e7e8 <tcp_slowtmr+0x66c>)
 800e784:	f00a fa90 	bl	8018ca8 <iprintf>
        prev->next = pcb->next;
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	68da      	ldr	r2, [r3, #12]
 800e78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78e:	60da      	str	r2, [r3, #12]
 800e790:	e00f      	b.n	800e7b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e792:	4b17      	ldr	r3, [pc, #92]	; (800e7f0 <tcp_slowtmr+0x674>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e798:	429a      	cmp	r2, r3
 800e79a:	d006      	beq.n	800e7aa <tcp_slowtmr+0x62e>
 800e79c:	4b10      	ldr	r3, [pc, #64]	; (800e7e0 <tcp_slowtmr+0x664>)
 800e79e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e7a2:	4915      	ldr	r1, [pc, #84]	; (800e7f8 <tcp_slowtmr+0x67c>)
 800e7a4:	4810      	ldr	r0, [pc, #64]	; (800e7e8 <tcp_slowtmr+0x66c>)
 800e7a6:	f00a fa7f 	bl	8018ca8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	4a10      	ldr	r2, [pc, #64]	; (800e7f0 <tcp_slowtmr+0x674>)
 800e7b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e7bc:	69f8      	ldr	r0, [r7, #28]
 800e7be:	f7fe ff49 	bl	800d654 <tcp_free>
 800e7c2:	e004      	b.n	800e7ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1a9      	bne.n	800e728 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e7d4:	bf00      	nop
 800e7d6:	bf00      	nop
 800e7d8:	3730      	adds	r7, #48	; 0x30
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	0801af2c 	.word	0x0801af2c
 800e7e4:	0801b3bc 	.word	0x0801b3bc
 800e7e8:	0801af70 	.word	0x0801af70
 800e7ec:	2000cc2c 	.word	0x2000cc2c
 800e7f0:	2000cc3c 	.word	0x2000cc3c
 800e7f4:	0801b3ec 	.word	0x0801b3ec
 800e7f8:	0801b414 	.word	0x0801b414

0800e7fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b082      	sub	sp, #8
 800e800:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e802:	4b2d      	ldr	r3, [pc, #180]	; (800e8b8 <tcp_fasttmr+0xbc>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	3301      	adds	r3, #1
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	4b2b      	ldr	r3, [pc, #172]	; (800e8b8 <tcp_fasttmr+0xbc>)
 800e80c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e80e:	4b2b      	ldr	r3, [pc, #172]	; (800e8bc <tcp_fasttmr+0xc0>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e814:	e048      	b.n	800e8a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7f9a      	ldrb	r2, [r3, #30]
 800e81a:	4b27      	ldr	r3, [pc, #156]	; (800e8b8 <tcp_fasttmr+0xbc>)
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d03f      	beq.n	800e8a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e822:	4b25      	ldr	r3, [pc, #148]	; (800e8b8 <tcp_fasttmr+0xbc>)
 800e824:	781a      	ldrb	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	8b5b      	ldrh	r3, [r3, #26]
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d010      	beq.n	800e858 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	8b5b      	ldrh	r3, [r3, #26]
 800e83a:	f043 0302 	orr.w	r3, r3, #2
 800e83e:	b29a      	uxth	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f003 ffdd 	bl	8012804 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8b5b      	ldrh	r3, [r3, #26]
 800e84e:	f023 0303 	bic.w	r3, r3, #3
 800e852:	b29a      	uxth	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f003 0308 	and.w	r3, r3, #8
 800e860:	2b00      	cmp	r3, #0
 800e862:	d009      	beq.n	800e878 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	8b5b      	ldrh	r3, [r3, #26]
 800e868:	f023 0308 	bic.w	r3, r3, #8
 800e86c:	b29a      	uxth	r2, r3
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff f882 	bl	800d97c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00a      	beq.n	800e89c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e886:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <tcp_fasttmr+0xc4>)
 800e888:	2200      	movs	r2, #0
 800e88a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 f819 	bl	800e8c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e892:	4b0b      	ldr	r3, [pc, #44]	; (800e8c0 <tcp_fasttmr+0xc4>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d000      	beq.n	800e89c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e89a:	e7b8      	b.n	800e80e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	607b      	str	r3, [r7, #4]
 800e8a0:	e002      	b.n	800e8a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1b3      	bne.n	800e816 <tcp_fasttmr+0x1a>
    }
  }
}
 800e8ae:	bf00      	nop
 800e8b0:	bf00      	nop
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	2000cc42 	.word	0x2000cc42
 800e8bc:	2000cc38 	.word	0x2000cc38
 800e8c0:	2000cc40 	.word	0x2000cc40

0800e8c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e8c4:	b590      	push	{r4, r7, lr}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d109      	bne.n	800e8e6 <tcp_process_refused_data+0x22>
 800e8d2:	4b37      	ldr	r3, [pc, #220]	; (800e9b0 <tcp_process_refused_data+0xec>)
 800e8d4:	f240 6209 	movw	r2, #1545	; 0x609
 800e8d8:	4936      	ldr	r1, [pc, #216]	; (800e9b4 <tcp_process_refused_data+0xf0>)
 800e8da:	4837      	ldr	r0, [pc, #220]	; (800e9b8 <tcp_process_refused_data+0xf4>)
 800e8dc:	f00a f9e4 	bl	8018ca8 <iprintf>
 800e8e0:	f06f 030f 	mvn.w	r3, #15
 800e8e4:	e060      	b.n	800e9a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8ea:	7b5b      	ldrb	r3, [r3, #13]
 800e8ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00b      	beq.n	800e91c <tcp_process_refused_data+0x58>
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6918      	ldr	r0, [r3, #16]
 800e90e:	2300      	movs	r3, #0
 800e910:	68ba      	ldr	r2, [r7, #8]
 800e912:	6879      	ldr	r1, [r7, #4]
 800e914:	47a0      	blx	r4
 800e916:	4603      	mov	r3, r0
 800e918:	73fb      	strb	r3, [r7, #15]
 800e91a:	e007      	b.n	800e92c <tcp_process_refused_data+0x68>
 800e91c:	2300      	movs	r3, #0
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	6879      	ldr	r1, [r7, #4]
 800e922:	2000      	movs	r0, #0
 800e924:	f000 f8a4 	bl	800ea70 <tcp_recv_null>
 800e928:	4603      	mov	r3, r0
 800e92a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d12a      	bne.n	800e98a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e934:	7bbb      	ldrb	r3, [r7, #14]
 800e936:	f003 0320 	and.w	r3, r3, #32
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d033      	beq.n	800e9a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e942:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e946:	d005      	beq.n	800e954 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e94c:	3301      	adds	r3, #1
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00b      	beq.n	800e976 <tcp_process_refused_data+0xb2>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6918      	ldr	r0, [r3, #16]
 800e968:	2300      	movs	r3, #0
 800e96a:	2200      	movs	r2, #0
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	47a0      	blx	r4
 800e970:	4603      	mov	r3, r0
 800e972:	73fb      	strb	r3, [r7, #15]
 800e974:	e001      	b.n	800e97a <tcp_process_refused_data+0xb6>
 800e976:	2300      	movs	r3, #0
 800e978:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e97e:	f113 0f0d 	cmn.w	r3, #13
 800e982:	d110      	bne.n	800e9a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e984:	f06f 030c 	mvn.w	r3, #12
 800e988:	e00e      	b.n	800e9a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e98e:	f113 0f0d 	cmn.w	r3, #13
 800e992:	d102      	bne.n	800e99a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e994:	f06f 030c 	mvn.w	r3, #12
 800e998:	e006      	b.n	800e9a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e9a0:	f06f 0304 	mvn.w	r3, #4
 800e9a4:	e000      	b.n	800e9a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3714      	adds	r7, #20
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd90      	pop	{r4, r7, pc}
 800e9b0:	0801af2c 	.word	0x0801af2c
 800e9b4:	0801b43c 	.word	0x0801b43c
 800e9b8:	0801af70 	.word	0x0801af70

0800e9bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e9c4:	e007      	b.n	800e9d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f000 f80a 	bl	800e9e6 <tcp_seg_free>
    seg = next;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1f4      	bne.n	800e9c6 <tcp_segs_free+0xa>
  }
}
 800e9dc:	bf00      	nop
 800e9de:	bf00      	nop
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00c      	beq.n	800ea0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d004      	beq.n	800ea06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fe fb07 	bl	800d014 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ea06:	6879      	ldr	r1, [r7, #4]
 800ea08:	2003      	movs	r0, #3
 800ea0a:	f7fd fc53 	bl	800c2b4 <memp_free>
  }
}
 800ea0e:	bf00      	nop
 800ea10:	3708      	adds	r7, #8
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
	...

0800ea18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <tcp_seg_copy+0x1c>
 800ea26:	4b0f      	ldr	r3, [pc, #60]	; (800ea64 <tcp_seg_copy+0x4c>)
 800ea28:	f240 6282 	movw	r2, #1666	; 0x682
 800ea2c:	490e      	ldr	r1, [pc, #56]	; (800ea68 <tcp_seg_copy+0x50>)
 800ea2e:	480f      	ldr	r0, [pc, #60]	; (800ea6c <tcp_seg_copy+0x54>)
 800ea30:	f00a f93a 	bl	8018ca8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ea34:	2003      	movs	r0, #3
 800ea36:	f7fd fbc7 	bl	800c1c8 <memp_malloc>
 800ea3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d101      	bne.n	800ea46 <tcp_seg_copy+0x2e>
    return NULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	e00a      	b.n	800ea5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ea46:	2210      	movs	r2, #16
 800ea48:	6879      	ldr	r1, [r7, #4]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f00a fa1e 	bl	8018e8c <memcpy>
  pbuf_ref(cseg->p);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7fe fb83 	bl	800d160 <pbuf_ref>
  return cseg;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3710      	adds	r7, #16
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	0801af2c 	.word	0x0801af2c
 800ea68:	0801b480 	.word	0x0801b480
 800ea6c:	0801af70 	.word	0x0801af70

0800ea70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea7e:	68bb      	ldr	r3, [r7, #8]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d109      	bne.n	800ea98 <tcp_recv_null+0x28>
 800ea84:	4b12      	ldr	r3, [pc, #72]	; (800ead0 <tcp_recv_null+0x60>)
 800ea86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ea8a:	4912      	ldr	r1, [pc, #72]	; (800ead4 <tcp_recv_null+0x64>)
 800ea8c:	4812      	ldr	r0, [pc, #72]	; (800ead8 <tcp_recv_null+0x68>)
 800ea8e:	f00a f90b 	bl	8018ca8 <iprintf>
 800ea92:	f06f 030f 	mvn.w	r3, #15
 800ea96:	e016      	b.n	800eac6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d009      	beq.n	800eab2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	891b      	ldrh	r3, [r3, #8]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	68b8      	ldr	r0, [r7, #8]
 800eaa6:	f7ff f9bb 	bl	800de20 <tcp_recved>
    pbuf_free(p);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7fe fab2 	bl	800d014 <pbuf_free>
 800eab0:	e008      	b.n	800eac4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d104      	bne.n	800eac4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eaba:	68b8      	ldr	r0, [r7, #8]
 800eabc:	f7fe ffc8 	bl	800da50 <tcp_close>
 800eac0:	4603      	mov	r3, r0
 800eac2:	e000      	b.n	800eac6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3710      	adds	r7, #16
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	0801af2c 	.word	0x0801af2c
 800ead4:	0801b49c 	.word	0x0801b49c
 800ead8:	0801af70 	.word	0x0801af70

0800eadc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	4603      	mov	r3, r0
 800eae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	db01      	blt.n	800eaf2 <tcp_kill_prio+0x16>
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	e000      	b.n	800eaf4 <tcp_kill_prio+0x18>
 800eaf2:	237f      	movs	r3, #127	; 0x7f
 800eaf4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800eaf6:	7afb      	ldrb	r3, [r7, #11]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d034      	beq.n	800eb66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800eafc:	7afb      	ldrb	r3, [r7, #11]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800eb02:	2300      	movs	r3, #0
 800eb04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb06:	2300      	movs	r3, #0
 800eb08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb0a:	4b19      	ldr	r3, [pc, #100]	; (800eb70 <tcp_kill_prio+0x94>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	617b      	str	r3, [r7, #20]
 800eb10:	e01f      	b.n	800eb52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	7d5b      	ldrb	r3, [r3, #21]
 800eb16:	7afa      	ldrb	r2, [r7, #11]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d80c      	bhi.n	800eb36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eb20:	7afa      	ldrb	r2, [r7, #11]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d112      	bne.n	800eb4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eb26:	4b13      	ldr	r3, [pc, #76]	; (800eb74 <tcp_kill_prio+0x98>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	6a1b      	ldr	r3, [r3, #32]
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	68fa      	ldr	r2, [r7, #12]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d80a      	bhi.n	800eb4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800eb36:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <tcp_kill_prio+0x98>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	7d5b      	ldrb	r3, [r3, #21]
 800eb4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	617b      	str	r3, [r7, #20]
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1dc      	bne.n	800eb12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d004      	beq.n	800eb68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb5e:	6938      	ldr	r0, [r7, #16]
 800eb60:	f7ff f860 	bl	800dc24 <tcp_abort>
 800eb64:	e000      	b.n	800eb68 <tcp_kill_prio+0x8c>
    return;
 800eb66:	bf00      	nop
  }
}
 800eb68:	3718      	adds	r7, #24
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000cc38 	.word	0x2000cc38
 800eb74:	2000cc2c 	.word	0x2000cc2c

0800eb78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b086      	sub	sp, #24
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb82:	79fb      	ldrb	r3, [r7, #7]
 800eb84:	2b08      	cmp	r3, #8
 800eb86:	d009      	beq.n	800eb9c <tcp_kill_state+0x24>
 800eb88:	79fb      	ldrb	r3, [r7, #7]
 800eb8a:	2b09      	cmp	r3, #9
 800eb8c:	d006      	beq.n	800eb9c <tcp_kill_state+0x24>
 800eb8e:	4b1a      	ldr	r3, [pc, #104]	; (800ebf8 <tcp_kill_state+0x80>)
 800eb90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800eb94:	4919      	ldr	r1, [pc, #100]	; (800ebfc <tcp_kill_state+0x84>)
 800eb96:	481a      	ldr	r0, [pc, #104]	; (800ec00 <tcp_kill_state+0x88>)
 800eb98:	f00a f886 	bl	8018ca8 <iprintf>

  inactivity = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eba0:	2300      	movs	r3, #0
 800eba2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eba4:	4b17      	ldr	r3, [pc, #92]	; (800ec04 <tcp_kill_state+0x8c>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	e017      	b.n	800ebdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	7d1b      	ldrb	r3, [r3, #20]
 800ebb0:	79fa      	ldrb	r2, [r7, #7]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d10f      	bne.n	800ebd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ebb6:	4b14      	ldr	r3, [pc, #80]	; (800ec08 <tcp_kill_state+0x90>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d807      	bhi.n	800ebd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ebc6:	4b10      	ldr	r3, [pc, #64]	; (800ec08 <tcp_kill_state+0x90>)
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	68db      	ldr	r3, [r3, #12]
 800ebda:	617b      	str	r3, [r7, #20]
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1e4      	bne.n	800ebac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d003      	beq.n	800ebf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ebe8:	2100      	movs	r1, #0
 800ebea:	6938      	ldr	r0, [r7, #16]
 800ebec:	f7fe ff5c 	bl	800daa8 <tcp_abandon>
  }
}
 800ebf0:	bf00      	nop
 800ebf2:	3718      	adds	r7, #24
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	0801af2c 	.word	0x0801af2c
 800ebfc:	0801b4b8 	.word	0x0801b4b8
 800ec00:	0801af70 	.word	0x0801af70
 800ec04:	2000cc38 	.word	0x2000cc38
 800ec08:	2000cc2c 	.word	0x2000cc2c

0800ec0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ec16:	2300      	movs	r3, #0
 800ec18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec1a:	4b12      	ldr	r3, [pc, #72]	; (800ec64 <tcp_kill_timewait+0x58>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e012      	b.n	800ec48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec22:	4b11      	ldr	r3, [pc, #68]	; (800ec68 <tcp_kill_timewait+0x5c>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d807      	bhi.n	800ec42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ec32:	4b0d      	ldr	r3, [pc, #52]	; (800ec68 <tcp_kill_timewait+0x5c>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e9      	bne.n	800ec22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d002      	beq.n	800ec5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec54:	68b8      	ldr	r0, [r7, #8]
 800ec56:	f7fe ffe5 	bl	800dc24 <tcp_abort>
  }
}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	2000cc3c 	.word	0x2000cc3c
 800ec68:	2000cc2c 	.word	0x2000cc2c

0800ec6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b082      	sub	sp, #8
 800ec70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ec72:	4b10      	ldr	r3, [pc, #64]	; (800ecb4 <tcp_handle_closepend+0x48>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ec78:	e014      	b.n	800eca4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68db      	ldr	r3, [r3, #12]
 800ec7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	8b5b      	ldrh	r3, [r3, #26]
 800ec84:	f003 0308 	and.w	r3, r3, #8
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d009      	beq.n	800eca0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	8b5b      	ldrh	r3, [r3, #26]
 800ec90:	f023 0308 	bic.w	r3, r3, #8
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f7fe fe6e 	bl	800d97c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e7      	bne.n	800ec7a <tcp_handle_closepend+0xe>
  }
}
 800ecaa:	bf00      	nop
 800ecac:	bf00      	nop
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	2000cc38 	.word	0x2000cc38

0800ecb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecc2:	2001      	movs	r0, #1
 800ecc4:	f7fd fa80 	bl	800c1c8 <memp_malloc>
 800ecc8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d126      	bne.n	800ed1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ecd0:	f7ff ffcc 	bl	800ec6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ecd4:	f7ff ff9a 	bl	800ec0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecd8:	2001      	movs	r0, #1
 800ecda:	f7fd fa75 	bl	800c1c8 <memp_malloc>
 800ecde:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d11b      	bne.n	800ed1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ece6:	2009      	movs	r0, #9
 800ece8:	f7ff ff46 	bl	800eb78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecec:	2001      	movs	r0, #1
 800ecee:	f7fd fa6b 	bl	800c1c8 <memp_malloc>
 800ecf2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d111      	bne.n	800ed1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ecfa:	2008      	movs	r0, #8
 800ecfc:	f7ff ff3c 	bl	800eb78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed00:	2001      	movs	r0, #1
 800ed02:	f7fd fa61 	bl	800c1c8 <memp_malloc>
 800ed06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d107      	bne.n	800ed1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff fee3 	bl	800eadc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ed16:	2001      	movs	r0, #1
 800ed18:	f7fd fa56 	bl	800c1c8 <memp_malloc>
 800ed1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d03f      	beq.n	800eda4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ed24:	229c      	movs	r2, #156	; 0x9c
 800ed26:	2100      	movs	r1, #0
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f00a f822 	bl	8018d72 <memset>
    pcb->prio = prio;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	79fa      	ldrb	r2, [r7, #7]
 800ed32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	22ff      	movs	r2, #255	; 0xff
 800ed52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ed5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2206      	movs	r2, #6
 800ed60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2206      	movs	r2, #6
 800ed68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed7a:	4b0d      	ldr	r3, [pc, #52]	; (800edb0 <tcp_alloc+0xf8>)
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed82:	4b0c      	ldr	r3, [pc, #48]	; (800edb4 <tcp_alloc+0xfc>)
 800ed84:	781a      	ldrb	r2, [r3, #0]
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4a08      	ldr	r2, [pc, #32]	; (800edb8 <tcp_alloc+0x100>)
 800ed98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4a07      	ldr	r2, [pc, #28]	; (800edbc <tcp_alloc+0x104>)
 800eda0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eda4:	68fb      	ldr	r3, [r7, #12]
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3710      	adds	r7, #16
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}
 800edae:	bf00      	nop
 800edb0:	2000cc2c 	.word	0x2000cc2c
 800edb4:	2000cc42 	.word	0x2000cc42
 800edb8:	0800ea71 	.word	0x0800ea71
 800edbc:	006ddd00 	.word	0x006ddd00

0800edc0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	4603      	mov	r3, r0
 800edc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800edca:	2040      	movs	r0, #64	; 0x40
 800edcc:	f7ff ff74 	bl	800ecb8 <tcp_alloc>
 800edd0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800edd2:	68fb      	ldr	r3, [r7, #12]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800eddc:	b480      	push	{r7}
 800edde:	b083      	sub	sp, #12
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	683a      	ldr	r2, [r7, #0]
 800edf0:	611a      	str	r2, [r3, #16]
  }
}
 800edf2:	bf00      	nop
 800edf4:	370c      	adds	r7, #12
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
	...

0800ee00 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00e      	beq.n	800ee2e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	7d1b      	ldrb	r3, [r3, #20]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d106      	bne.n	800ee26 <tcp_recv+0x26>
 800ee18:	4b07      	ldr	r3, [pc, #28]	; (800ee38 <tcp_recv+0x38>)
 800ee1a:	f240 72df 	movw	r2, #2015	; 0x7df
 800ee1e:	4907      	ldr	r1, [pc, #28]	; (800ee3c <tcp_recv+0x3c>)
 800ee20:	4807      	ldr	r0, [pc, #28]	; (800ee40 <tcp_recv+0x40>)
 800ee22:	f009 ff41 	bl	8018ca8 <iprintf>
    pcb->recv = recv;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	0801af2c 	.word	0x0801af2c
 800ee3c:	0801b4c8 	.word	0x0801b4c8
 800ee40:	0801af70 	.word	0x0801af70

0800ee44 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	7d1b      	ldrb	r3, [r3, #20]
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d106      	bne.n	800ee6a <tcp_sent+0x26>
 800ee5c:	4b07      	ldr	r3, [pc, #28]	; (800ee7c <tcp_sent+0x38>)
 800ee5e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800ee62:	4907      	ldr	r1, [pc, #28]	; (800ee80 <tcp_sent+0x3c>)
 800ee64:	4807      	ldr	r0, [pc, #28]	; (800ee84 <tcp_sent+0x40>)
 800ee66:	f009 ff1f 	bl	8018ca8 <iprintf>
    pcb->sent = sent;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	0801af2c 	.word	0x0801af2c
 800ee80:	0801b4f0 	.word	0x0801b4f0
 800ee84:	0801af70 	.word	0x0801af70

0800ee88 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00e      	beq.n	800eeb6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d106      	bne.n	800eeae <tcp_err+0x26>
 800eea0:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <tcp_err+0x38>)
 800eea2:	f640 020d 	movw	r2, #2061	; 0x80d
 800eea6:	4907      	ldr	r1, [pc, #28]	; (800eec4 <tcp_err+0x3c>)
 800eea8:	4807      	ldr	r0, [pc, #28]	; (800eec8 <tcp_err+0x40>)
 800eeaa:	f009 fefd 	bl	8018ca8 <iprintf>
    pcb->errf = err;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800eeb6:	bf00      	nop
 800eeb8:	3708      	adds	r7, #8
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
 800eebe:	bf00      	nop
 800eec0:	0801af2c 	.word	0x0801af2c
 800eec4:	0801b518 	.word	0x0801b518
 800eec8:	0801af70 	.word	0x0801af70

0800eecc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	4613      	mov	r3, r2
 800eed8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d107      	bne.n	800eef0 <tcp_poll+0x24>
 800eee0:	4b0e      	ldr	r3, [pc, #56]	; (800ef1c <tcp_poll+0x50>)
 800eee2:	f640 023d 	movw	r2, #2109	; 0x83d
 800eee6:	490e      	ldr	r1, [pc, #56]	; (800ef20 <tcp_poll+0x54>)
 800eee8:	480e      	ldr	r0, [pc, #56]	; (800ef24 <tcp_poll+0x58>)
 800eeea:	f009 fedd 	bl	8018ca8 <iprintf>
 800eeee:	e011      	b.n	800ef14 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	7d1b      	ldrb	r3, [r3, #20]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d106      	bne.n	800ef06 <tcp_poll+0x3a>
 800eef8:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <tcp_poll+0x50>)
 800eefa:	f640 023e 	movw	r2, #2110	; 0x83e
 800eefe:	490a      	ldr	r1, [pc, #40]	; (800ef28 <tcp_poll+0x5c>)
 800ef00:	4808      	ldr	r0, [pc, #32]	; (800ef24 <tcp_poll+0x58>)
 800ef02:	f009 fed1 	bl	8018ca8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	68ba      	ldr	r2, [r7, #8]
 800ef0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	79fa      	ldrb	r2, [r7, #7]
 800ef12:	775a      	strb	r2, [r3, #29]
}
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	0801af2c 	.word	0x0801af2c
 800ef20:	0801b540 	.word	0x0801b540
 800ef24:	0801af70 	.word	0x0801af70
 800ef28:	0801b558 	.word	0x0801b558

0800ef2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d107      	bne.n	800ef4a <tcp_pcb_purge+0x1e>
 800ef3a:	4b21      	ldr	r3, [pc, #132]	; (800efc0 <tcp_pcb_purge+0x94>)
 800ef3c:	f640 0251 	movw	r2, #2129	; 0x851
 800ef40:	4920      	ldr	r1, [pc, #128]	; (800efc4 <tcp_pcb_purge+0x98>)
 800ef42:	4821      	ldr	r0, [pc, #132]	; (800efc8 <tcp_pcb_purge+0x9c>)
 800ef44:	f009 feb0 	bl	8018ca8 <iprintf>
 800ef48:	e037      	b.n	800efba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7d1b      	ldrb	r3, [r3, #20]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d033      	beq.n	800efba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ef56:	2b0a      	cmp	r3, #10
 800ef58:	d02f      	beq.n	800efba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d02b      	beq.n	800efba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d007      	beq.n	800ef7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7fe f850 	bl	800d014 <pbuf_free>
      pcb->refused_data = NULL;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d002      	beq.n	800ef88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f986 	bl	800f294 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef94:	4618      	mov	r0, r3
 800ef96:	f7ff fd11 	bl	800e9bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7ff fd0c 	bl	800e9bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	66da      	str	r2, [r3, #108]	; 0x6c
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	0801af2c 	.word	0x0801af2c
 800efc4:	0801b578 	.word	0x0801b578
 800efc8:	0801af70 	.word	0x0801af70

0800efcc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d106      	bne.n	800efea <tcp_pcb_remove+0x1e>
 800efdc:	4b3e      	ldr	r3, [pc, #248]	; (800f0d8 <tcp_pcb_remove+0x10c>)
 800efde:	f640 0283 	movw	r2, #2179	; 0x883
 800efe2:	493e      	ldr	r1, [pc, #248]	; (800f0dc <tcp_pcb_remove+0x110>)
 800efe4:	483e      	ldr	r0, [pc, #248]	; (800f0e0 <tcp_pcb_remove+0x114>)
 800efe6:	f009 fe5f 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <tcp_pcb_remove+0x32>
 800eff0:	4b39      	ldr	r3, [pc, #228]	; (800f0d8 <tcp_pcb_remove+0x10c>)
 800eff2:	f640 0284 	movw	r2, #2180	; 0x884
 800eff6:	493b      	ldr	r1, [pc, #236]	; (800f0e4 <tcp_pcb_remove+0x118>)
 800eff8:	4839      	ldr	r0, [pc, #228]	; (800f0e0 <tcp_pcb_remove+0x114>)
 800effa:	f009 fe55 	bl	8018ca8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	429a      	cmp	r2, r3
 800f006:	d105      	bne.n	800f014 <tcp_pcb_remove+0x48>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	601a      	str	r2, [r3, #0]
 800f012:	e013      	b.n	800f03c <tcp_pcb_remove+0x70>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	60fb      	str	r3, [r7, #12]
 800f01a:	e00c      	b.n	800f036 <tcp_pcb_remove+0x6a>
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d104      	bne.n	800f030 <tcp_pcb_remove+0x64>
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	e005      	b.n	800f03c <tcp_pcb_remove+0x70>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	60fb      	str	r3, [r7, #12]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d1ef      	bne.n	800f01c <tcp_pcb_remove+0x50>
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2200      	movs	r2, #0
 800f040:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f042:	6838      	ldr	r0, [r7, #0]
 800f044:	f7ff ff72 	bl	800ef2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b0a      	cmp	r3, #10
 800f04e:	d013      	beq.n	800f078 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f054:	2b01      	cmp	r3, #1
 800f056:	d00f      	beq.n	800f078 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	8b5b      	ldrh	r3, [r3, #26]
 800f05c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f060:	2b00      	cmp	r3, #0
 800f062:	d009      	beq.n	800f078 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	8b5b      	ldrh	r3, [r3, #26]
 800f068:	f043 0302 	orr.w	r3, r3, #2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f072:	6838      	ldr	r0, [r7, #0]
 800f074:	f003 fbc6 	bl	8012804 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	7d1b      	ldrb	r3, [r3, #20]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d020      	beq.n	800f0c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f084:	2b00      	cmp	r3, #0
 800f086:	d006      	beq.n	800f096 <tcp_pcb_remove+0xca>
 800f088:	4b13      	ldr	r3, [pc, #76]	; (800f0d8 <tcp_pcb_remove+0x10c>)
 800f08a:	f640 0293 	movw	r2, #2195	; 0x893
 800f08e:	4916      	ldr	r1, [pc, #88]	; (800f0e8 <tcp_pcb_remove+0x11c>)
 800f090:	4813      	ldr	r0, [pc, #76]	; (800f0e0 <tcp_pcb_remove+0x114>)
 800f092:	f009 fe09 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d006      	beq.n	800f0ac <tcp_pcb_remove+0xe0>
 800f09e:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <tcp_pcb_remove+0x10c>)
 800f0a0:	f640 0294 	movw	r2, #2196	; 0x894
 800f0a4:	4911      	ldr	r1, [pc, #68]	; (800f0ec <tcp_pcb_remove+0x120>)
 800f0a6:	480e      	ldr	r0, [pc, #56]	; (800f0e0 <tcp_pcb_remove+0x114>)
 800f0a8:	f009 fdfe 	bl	8018ca8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d006      	beq.n	800f0c2 <tcp_pcb_remove+0xf6>
 800f0b4:	4b08      	ldr	r3, [pc, #32]	; (800f0d8 <tcp_pcb_remove+0x10c>)
 800f0b6:	f640 0296 	movw	r2, #2198	; 0x896
 800f0ba:	490d      	ldr	r1, [pc, #52]	; (800f0f0 <tcp_pcb_remove+0x124>)
 800f0bc:	4808      	ldr	r0, [pc, #32]	; (800f0e0 <tcp_pcb_remove+0x114>)
 800f0be:	f009 fdf3 	bl	8018ca8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f0ce:	bf00      	nop
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	0801af2c 	.word	0x0801af2c
 800f0dc:	0801b594 	.word	0x0801b594
 800f0e0:	0801af70 	.word	0x0801af70
 800f0e4:	0801b5b0 	.word	0x0801b5b0
 800f0e8:	0801b5d0 	.word	0x0801b5d0
 800f0ec:	0801b5e8 	.word	0x0801b5e8
 800f0f0:	0801b604 	.word	0x0801b604

0800f0f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d106      	bne.n	800f110 <tcp_next_iss+0x1c>
 800f102:	4b0a      	ldr	r3, [pc, #40]	; (800f12c <tcp_next_iss+0x38>)
 800f104:	f640 02af 	movw	r2, #2223	; 0x8af
 800f108:	4909      	ldr	r1, [pc, #36]	; (800f130 <tcp_next_iss+0x3c>)
 800f10a:	480a      	ldr	r0, [pc, #40]	; (800f134 <tcp_next_iss+0x40>)
 800f10c:	f009 fdcc 	bl	8018ca8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <tcp_next_iss+0x44>)
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	4b09      	ldr	r3, [pc, #36]	; (800f13c <tcp_next_iss+0x48>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4413      	add	r3, r2
 800f11a:	4a07      	ldr	r2, [pc, #28]	; (800f138 <tcp_next_iss+0x44>)
 800f11c:	6013      	str	r3, [r2, #0]
  return iss;
 800f11e:	4b06      	ldr	r3, [pc, #24]	; (800f138 <tcp_next_iss+0x44>)
 800f120:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f122:	4618      	mov	r0, r3
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	0801af2c 	.word	0x0801af2c
 800f130:	0801b61c 	.word	0x0801b61c
 800f134:	0801af70 	.word	0x0801af70
 800f138:	20000028 	.word	0x20000028
 800f13c:	2000cc2c 	.word	0x2000cc2c

0800f140 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	4603      	mov	r3, r0
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d106      	bne.n	800f162 <tcp_eff_send_mss_netif+0x22>
 800f154:	4b14      	ldr	r3, [pc, #80]	; (800f1a8 <tcp_eff_send_mss_netif+0x68>)
 800f156:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f15a:	4914      	ldr	r1, [pc, #80]	; (800f1ac <tcp_eff_send_mss_netif+0x6c>)
 800f15c:	4814      	ldr	r0, [pc, #80]	; (800f1b0 <tcp_eff_send_mss_netif+0x70>)
 800f15e:	f009 fda3 	bl	8018ca8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d101      	bne.n	800f16c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f168:	89fb      	ldrh	r3, [r7, #14]
 800f16a:	e019      	b.n	800f1a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f170:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f172:	8afb      	ldrh	r3, [r7, #22]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d012      	beq.n	800f19e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f178:	2328      	movs	r3, #40	; 0x28
 800f17a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f17c:	8afa      	ldrh	r2, [r7, #22]
 800f17e:	8abb      	ldrh	r3, [r7, #20]
 800f180:	429a      	cmp	r2, r3
 800f182:	d904      	bls.n	800f18e <tcp_eff_send_mss_netif+0x4e>
 800f184:	8afa      	ldrh	r2, [r7, #22]
 800f186:	8abb      	ldrh	r3, [r7, #20]
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	e000      	b.n	800f190 <tcp_eff_send_mss_netif+0x50>
 800f18e:	2300      	movs	r3, #0
 800f190:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f192:	8a7a      	ldrh	r2, [r7, #18]
 800f194:	89fb      	ldrh	r3, [r7, #14]
 800f196:	4293      	cmp	r3, r2
 800f198:	bf28      	it	cs
 800f19a:	4613      	movcs	r3, r2
 800f19c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f19e:	89fb      	ldrh	r3, [r7, #14]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3718      	adds	r7, #24
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	0801af2c 	.word	0x0801af2c
 800f1ac:	0801b638 	.word	0x0801b638
 800f1b0:	0801af70 	.word	0x0801af70

0800f1b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d119      	bne.n	800f1fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f1c8:	4b10      	ldr	r3, [pc, #64]	; (800f20c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f1ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f1ce:	4910      	ldr	r1, [pc, #64]	; (800f210 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f1d0:	4810      	ldr	r0, [pc, #64]	; (800f214 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f1d2:	f009 fd69 	bl	8018ca8 <iprintf>

  while (pcb != NULL) {
 800f1d6:	e011      	b.n	800f1fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d108      	bne.n	800f1f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f7fe fd1a 	bl	800dc24 <tcp_abort>
      pcb = next;
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	e002      	b.n	800f1fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1ea      	bne.n	800f1d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f202:	bf00      	nop
 800f204:	bf00      	nop
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	0801af2c 	.word	0x0801af2c
 800f210:	0801b660 	.word	0x0801b660
 800f214:	0801af70 	.word	0x0801af70

0800f218 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d02a      	beq.n	800f27e <tcp_netif_ip_addr_changed+0x66>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d026      	beq.n	800f27e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f230:	4b15      	ldr	r3, [pc, #84]	; (800f288 <tcp_netif_ip_addr_changed+0x70>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4619      	mov	r1, r3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ffbc 	bl	800f1b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f23c:	4b13      	ldr	r3, [pc, #76]	; (800f28c <tcp_netif_ip_addr_changed+0x74>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff ffb6 	bl	800f1b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d017      	beq.n	800f27e <tcp_netif_ip_addr_changed+0x66>
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d013      	beq.n	800f27e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f256:	4b0e      	ldr	r3, [pc, #56]	; (800f290 <tcp_netif_ip_addr_changed+0x78>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	60fb      	str	r3, [r7, #12]
 800f25c:	e00c      	b.n	800f278 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	429a      	cmp	r2, r3
 800f268:	d103      	bne.n	800f272 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1ef      	bne.n	800f25e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f27e:	bf00      	nop
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	2000cc38 	.word	0x2000cc38
 800f28c:	2000cc30 	.word	0x2000cc30
 800f290:	2000cc34 	.word	0x2000cc34

0800f294 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d007      	beq.n	800f2b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7ff fb87 	bl	800e9bc <tcp_segs_free>
    pcb->ooseq = NULL;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f2b4:	bf00      	nop
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b08d      	sub	sp, #52	; 0x34
 800f2c0:	af04      	add	r7, sp, #16
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d105      	bne.n	800f2d8 <tcp_input+0x1c>
 800f2cc:	4b9b      	ldr	r3, [pc, #620]	; (800f53c <tcp_input+0x280>)
 800f2ce:	2283      	movs	r2, #131	; 0x83
 800f2d0:	499b      	ldr	r1, [pc, #620]	; (800f540 <tcp_input+0x284>)
 800f2d2:	489c      	ldr	r0, [pc, #624]	; (800f544 <tcp_input+0x288>)
 800f2d4:	f009 fce8 	bl	8018ca8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	4a9a      	ldr	r2, [pc, #616]	; (800f548 <tcp_input+0x28c>)
 800f2de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	895b      	ldrh	r3, [r3, #10]
 800f2e4:	2b13      	cmp	r3, #19
 800f2e6:	f240 83d1 	bls.w	800fa8c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f2ea:	4b98      	ldr	r3, [pc, #608]	; (800f54c <tcp_input+0x290>)
 800f2ec:	695b      	ldr	r3, [r3, #20]
 800f2ee:	4a97      	ldr	r2, [pc, #604]	; (800f54c <tcp_input+0x290>)
 800f2f0:	6812      	ldr	r2, [r2, #0]
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f008 fa91 	bl	801781c <ip4_addr_isbroadcast_u32>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f040 83c7 	bne.w	800fa90 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f302:	4b92      	ldr	r3, [pc, #584]	; (800f54c <tcp_input+0x290>)
 800f304:	695b      	ldr	r3, [r3, #20]
 800f306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f30a:	2be0      	cmp	r3, #224	; 0xe0
 800f30c:	f000 83c0 	beq.w	800fa90 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f310:	4b8d      	ldr	r3, [pc, #564]	; (800f548 <tcp_input+0x28c>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	899b      	ldrh	r3, [r3, #12]
 800f316:	b29b      	uxth	r3, r3
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fc fa7d 	bl	800b818 <lwip_htons>
 800f31e:	4603      	mov	r3, r0
 800f320:	0b1b      	lsrs	r3, r3, #12
 800f322:	b29b      	uxth	r3, r3
 800f324:	b2db      	uxtb	r3, r3
 800f326:	009b      	lsls	r3, r3, #2
 800f328:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f32a:	7cbb      	ldrb	r3, [r7, #18]
 800f32c:	2b13      	cmp	r3, #19
 800f32e:	f240 83b1 	bls.w	800fa94 <tcp_input+0x7d8>
 800f332:	7cbb      	ldrb	r3, [r7, #18]
 800f334:	b29a      	uxth	r2, r3
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	891b      	ldrh	r3, [r3, #8]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	f200 83aa 	bhi.w	800fa94 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f340:	7cbb      	ldrb	r3, [r7, #18]
 800f342:	b29b      	uxth	r3, r3
 800f344:	3b14      	subs	r3, #20
 800f346:	b29a      	uxth	r2, r3
 800f348:	4b81      	ldr	r3, [pc, #516]	; (800f550 <tcp_input+0x294>)
 800f34a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f34c:	4b81      	ldr	r3, [pc, #516]	; (800f554 <tcp_input+0x298>)
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	895a      	ldrh	r2, [r3, #10]
 800f356:	7cbb      	ldrb	r3, [r7, #18]
 800f358:	b29b      	uxth	r3, r3
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d309      	bcc.n	800f372 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f35e:	4b7c      	ldr	r3, [pc, #496]	; (800f550 <tcp_input+0x294>)
 800f360:	881a      	ldrh	r2, [r3, #0]
 800f362:	4b7d      	ldr	r3, [pc, #500]	; (800f558 <tcp_input+0x29c>)
 800f364:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f366:	7cbb      	ldrb	r3, [r7, #18]
 800f368:	4619      	mov	r1, r3
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7fd fdcc 	bl	800cf08 <pbuf_remove_header>
 800f370:	e04e      	b.n	800f410 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <tcp_input+0xca>
 800f37a:	4b70      	ldr	r3, [pc, #448]	; (800f53c <tcp_input+0x280>)
 800f37c:	22c2      	movs	r2, #194	; 0xc2
 800f37e:	4977      	ldr	r1, [pc, #476]	; (800f55c <tcp_input+0x2a0>)
 800f380:	4870      	ldr	r0, [pc, #448]	; (800f544 <tcp_input+0x288>)
 800f382:	f009 fc91 	bl	8018ca8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f386:	2114      	movs	r1, #20
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7fd fdbd 	bl	800cf08 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	895a      	ldrh	r2, [r3, #10]
 800f392:	4b71      	ldr	r3, [pc, #452]	; (800f558 <tcp_input+0x29c>)
 800f394:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f396:	4b6e      	ldr	r3, [pc, #440]	; (800f550 <tcp_input+0x294>)
 800f398:	881a      	ldrh	r2, [r3, #0]
 800f39a:	4b6f      	ldr	r3, [pc, #444]	; (800f558 <tcp_input+0x29c>)
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f3a2:	4b6d      	ldr	r3, [pc, #436]	; (800f558 <tcp_input+0x29c>)
 800f3a4:	881b      	ldrh	r3, [r3, #0]
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7fd fdad 	bl	800cf08 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	895b      	ldrh	r3, [r3, #10]
 800f3b4:	8a3a      	ldrh	r2, [r7, #16]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	f200 836e 	bhi.w	800fa98 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	4a64      	ldr	r2, [pc, #400]	; (800f554 <tcp_input+0x298>)
 800f3c4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	8a3a      	ldrh	r2, [r7, #16]
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fd fd9a 	bl	800cf08 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	891a      	ldrh	r2, [r3, #8]
 800f3d8:	8a3b      	ldrh	r3, [r7, #16]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	b29a      	uxth	r2, r3
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	895b      	ldrh	r3, [r3, #10]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d005      	beq.n	800f3f6 <tcp_input+0x13a>
 800f3ea:	4b54      	ldr	r3, [pc, #336]	; (800f53c <tcp_input+0x280>)
 800f3ec:	22df      	movs	r2, #223	; 0xdf
 800f3ee:	495c      	ldr	r1, [pc, #368]	; (800f560 <tcp_input+0x2a4>)
 800f3f0:	4854      	ldr	r0, [pc, #336]	; (800f544 <tcp_input+0x288>)
 800f3f2:	f009 fc59 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	891a      	ldrh	r2, [r3, #8]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	891b      	ldrh	r3, [r3, #8]
 800f400:	429a      	cmp	r2, r3
 800f402:	d005      	beq.n	800f410 <tcp_input+0x154>
 800f404:	4b4d      	ldr	r3, [pc, #308]	; (800f53c <tcp_input+0x280>)
 800f406:	22e0      	movs	r2, #224	; 0xe0
 800f408:	4956      	ldr	r1, [pc, #344]	; (800f564 <tcp_input+0x2a8>)
 800f40a:	484e      	ldr	r0, [pc, #312]	; (800f544 <tcp_input+0x288>)
 800f40c:	f009 fc4c 	bl	8018ca8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f410:	4b4d      	ldr	r3, [pc, #308]	; (800f548 <tcp_input+0x28c>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	b29b      	uxth	r3, r3
 800f418:	4a4b      	ldr	r2, [pc, #300]	; (800f548 <tcp_input+0x28c>)
 800f41a:	6814      	ldr	r4, [r2, #0]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7fc f9fb 	bl	800b818 <lwip_htons>
 800f422:	4603      	mov	r3, r0
 800f424:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f426:	4b48      	ldr	r3, [pc, #288]	; (800f548 <tcp_input+0x28c>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	885b      	ldrh	r3, [r3, #2]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	4a46      	ldr	r2, [pc, #280]	; (800f548 <tcp_input+0x28c>)
 800f430:	6814      	ldr	r4, [r2, #0]
 800f432:	4618      	mov	r0, r3
 800f434:	f7fc f9f0 	bl	800b818 <lwip_htons>
 800f438:	4603      	mov	r3, r0
 800f43a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f43c:	4b42      	ldr	r3, [pc, #264]	; (800f548 <tcp_input+0x28c>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	4a41      	ldr	r2, [pc, #260]	; (800f548 <tcp_input+0x28c>)
 800f444:	6814      	ldr	r4, [r2, #0]
 800f446:	4618      	mov	r0, r3
 800f448:	f7fc f9fb 	bl	800b842 <lwip_htonl>
 800f44c:	4603      	mov	r3, r0
 800f44e:	6063      	str	r3, [r4, #4]
 800f450:	6863      	ldr	r3, [r4, #4]
 800f452:	4a45      	ldr	r2, [pc, #276]	; (800f568 <tcp_input+0x2ac>)
 800f454:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f456:	4b3c      	ldr	r3, [pc, #240]	; (800f548 <tcp_input+0x28c>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	4a3a      	ldr	r2, [pc, #232]	; (800f548 <tcp_input+0x28c>)
 800f45e:	6814      	ldr	r4, [r2, #0]
 800f460:	4618      	mov	r0, r3
 800f462:	f7fc f9ee 	bl	800b842 <lwip_htonl>
 800f466:	4603      	mov	r3, r0
 800f468:	60a3      	str	r3, [r4, #8]
 800f46a:	68a3      	ldr	r3, [r4, #8]
 800f46c:	4a3f      	ldr	r2, [pc, #252]	; (800f56c <tcp_input+0x2b0>)
 800f46e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f470:	4b35      	ldr	r3, [pc, #212]	; (800f548 <tcp_input+0x28c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	89db      	ldrh	r3, [r3, #14]
 800f476:	b29b      	uxth	r3, r3
 800f478:	4a33      	ldr	r2, [pc, #204]	; (800f548 <tcp_input+0x28c>)
 800f47a:	6814      	ldr	r4, [r2, #0]
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7fc f9cb 	bl	800b818 <lwip_htons>
 800f482:	4603      	mov	r3, r0
 800f484:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f486:	4b30      	ldr	r3, [pc, #192]	; (800f548 <tcp_input+0x28c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	899b      	ldrh	r3, [r3, #12]
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	4618      	mov	r0, r3
 800f490:	f7fc f9c2 	bl	800b818 <lwip_htons>
 800f494:	4603      	mov	r3, r0
 800f496:	b2db      	uxtb	r3, r3
 800f498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f49c:	b2da      	uxtb	r2, r3
 800f49e:	4b34      	ldr	r3, [pc, #208]	; (800f570 <tcp_input+0x2b4>)
 800f4a0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	891a      	ldrh	r2, [r3, #8]
 800f4a6:	4b33      	ldr	r3, [pc, #204]	; (800f574 <tcp_input+0x2b8>)
 800f4a8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f4aa:	4b31      	ldr	r3, [pc, #196]	; (800f570 <tcp_input+0x2b4>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	f003 0303 	and.w	r3, r3, #3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00c      	beq.n	800f4d0 <tcp_input+0x214>
    tcplen++;
 800f4b6:	4b2f      	ldr	r3, [pc, #188]	; (800f574 <tcp_input+0x2b8>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	3301      	adds	r3, #1
 800f4bc:	b29a      	uxth	r2, r3
 800f4be:	4b2d      	ldr	r3, [pc, #180]	; (800f574 <tcp_input+0x2b8>)
 800f4c0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	891a      	ldrh	r2, [r3, #8]
 800f4c6:	4b2b      	ldr	r3, [pc, #172]	; (800f574 <tcp_input+0x2b8>)
 800f4c8:	881b      	ldrh	r3, [r3, #0]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	f200 82e6 	bhi.w	800fa9c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4d4:	4b28      	ldr	r3, [pc, #160]	; (800f578 <tcp_input+0x2bc>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	61fb      	str	r3, [r7, #28]
 800f4da:	e09d      	b.n	800f618 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	7d1b      	ldrb	r3, [r3, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d105      	bne.n	800f4f0 <tcp_input+0x234>
 800f4e4:	4b15      	ldr	r3, [pc, #84]	; (800f53c <tcp_input+0x280>)
 800f4e6:	22fb      	movs	r2, #251	; 0xfb
 800f4e8:	4924      	ldr	r1, [pc, #144]	; (800f57c <tcp_input+0x2c0>)
 800f4ea:	4816      	ldr	r0, [pc, #88]	; (800f544 <tcp_input+0x288>)
 800f4ec:	f009 fbdc 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	7d1b      	ldrb	r3, [r3, #20]
 800f4f4:	2b0a      	cmp	r3, #10
 800f4f6:	d105      	bne.n	800f504 <tcp_input+0x248>
 800f4f8:	4b10      	ldr	r3, [pc, #64]	; (800f53c <tcp_input+0x280>)
 800f4fa:	22fc      	movs	r2, #252	; 0xfc
 800f4fc:	4920      	ldr	r1, [pc, #128]	; (800f580 <tcp_input+0x2c4>)
 800f4fe:	4811      	ldr	r0, [pc, #68]	; (800f544 <tcp_input+0x288>)
 800f500:	f009 fbd2 	bl	8018ca8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f504:	69fb      	ldr	r3, [r7, #28]
 800f506:	7d1b      	ldrb	r3, [r3, #20]
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d105      	bne.n	800f518 <tcp_input+0x25c>
 800f50c:	4b0b      	ldr	r3, [pc, #44]	; (800f53c <tcp_input+0x280>)
 800f50e:	22fd      	movs	r2, #253	; 0xfd
 800f510:	491c      	ldr	r1, [pc, #112]	; (800f584 <tcp_input+0x2c8>)
 800f512:	480c      	ldr	r0, [pc, #48]	; (800f544 <tcp_input+0x288>)
 800f514:	f009 fbc8 	bl	8018ca8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	7a1b      	ldrb	r3, [r3, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d033      	beq.n	800f588 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	7a1a      	ldrb	r2, [r3, #8]
 800f524:	4b09      	ldr	r3, [pc, #36]	; (800f54c <tcp_input+0x290>)
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f52c:	3301      	adds	r3, #1
 800f52e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f530:	429a      	cmp	r2, r3
 800f532:	d029      	beq.n	800f588 <tcp_input+0x2cc>
      prev = pcb;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	61bb      	str	r3, [r7, #24]
      continue;
 800f538:	e06b      	b.n	800f612 <tcp_input+0x356>
 800f53a:	bf00      	nop
 800f53c:	0801b694 	.word	0x0801b694
 800f540:	0801b6c8 	.word	0x0801b6c8
 800f544:	0801b6e0 	.word	0x0801b6e0
 800f548:	2000cc54 	.word	0x2000cc54
 800f54c:	200094b8 	.word	0x200094b8
 800f550:	2000cc58 	.word	0x2000cc58
 800f554:	2000cc5c 	.word	0x2000cc5c
 800f558:	2000cc5a 	.word	0x2000cc5a
 800f55c:	0801b708 	.word	0x0801b708
 800f560:	0801b718 	.word	0x0801b718
 800f564:	0801b724 	.word	0x0801b724
 800f568:	2000cc64 	.word	0x2000cc64
 800f56c:	2000cc68 	.word	0x2000cc68
 800f570:	2000cc70 	.word	0x2000cc70
 800f574:	2000cc6e 	.word	0x2000cc6e
 800f578:	2000cc38 	.word	0x2000cc38
 800f57c:	0801b744 	.word	0x0801b744
 800f580:	0801b76c 	.word	0x0801b76c
 800f584:	0801b798 	.word	0x0801b798
    }

    if (pcb->remote_port == tcphdr->src &&
 800f588:	69fb      	ldr	r3, [r7, #28]
 800f58a:	8b1a      	ldrh	r2, [r3, #24]
 800f58c:	4b72      	ldr	r3, [pc, #456]	; (800f758 <tcp_input+0x49c>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	b29b      	uxth	r3, r3
 800f594:	429a      	cmp	r2, r3
 800f596:	d13a      	bne.n	800f60e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	8ada      	ldrh	r2, [r3, #22]
 800f59c:	4b6e      	ldr	r3, [pc, #440]	; (800f758 <tcp_input+0x49c>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	885b      	ldrh	r3, [r3, #2]
 800f5a2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d132      	bne.n	800f60e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	685a      	ldr	r2, [r3, #4]
 800f5ac:	4b6b      	ldr	r3, [pc, #428]	; (800f75c <tcp_input+0x4a0>)
 800f5ae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d12c      	bne.n	800f60e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	4b68      	ldr	r3, [pc, #416]	; (800f75c <tcp_input+0x4a0>)
 800f5ba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d126      	bne.n	800f60e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	69fa      	ldr	r2, [r7, #28]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d106      	bne.n	800f5d8 <tcp_input+0x31c>
 800f5ca:	4b65      	ldr	r3, [pc, #404]	; (800f760 <tcp_input+0x4a4>)
 800f5cc:	f240 120d 	movw	r2, #269	; 0x10d
 800f5d0:	4964      	ldr	r1, [pc, #400]	; (800f764 <tcp_input+0x4a8>)
 800f5d2:	4865      	ldr	r0, [pc, #404]	; (800f768 <tcp_input+0x4ac>)
 800f5d4:	f009 fb68 	bl	8018ca8 <iprintf>
      if (prev != NULL) {
 800f5d8:	69bb      	ldr	r3, [r7, #24]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00a      	beq.n	800f5f4 <tcp_input+0x338>
        prev->next = pcb->next;
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	68da      	ldr	r2, [r3, #12]
 800f5e2:	69bb      	ldr	r3, [r7, #24]
 800f5e4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f5e6:	4b61      	ldr	r3, [pc, #388]	; (800f76c <tcp_input+0x4b0>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f5ee:	4a5f      	ldr	r2, [pc, #380]	; (800f76c <tcp_input+0x4b0>)
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	68db      	ldr	r3, [r3, #12]
 800f5f8:	69fa      	ldr	r2, [r7, #28]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d111      	bne.n	800f622 <tcp_input+0x366>
 800f5fe:	4b58      	ldr	r3, [pc, #352]	; (800f760 <tcp_input+0x4a4>)
 800f600:	f240 1215 	movw	r2, #277	; 0x115
 800f604:	495a      	ldr	r1, [pc, #360]	; (800f770 <tcp_input+0x4b4>)
 800f606:	4858      	ldr	r0, [pc, #352]	; (800f768 <tcp_input+0x4ac>)
 800f608:	f009 fb4e 	bl	8018ca8 <iprintf>
      break;
 800f60c:	e009      	b.n	800f622 <tcp_input+0x366>
    }
    prev = pcb;
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f612:	69fb      	ldr	r3, [r7, #28]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	61fb      	str	r3, [r7, #28]
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	f47f af5e 	bne.w	800f4dc <tcp_input+0x220>
 800f620:	e000      	b.n	800f624 <tcp_input+0x368>
      break;
 800f622:	bf00      	nop
  }

  if (pcb == NULL) {
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	2b00      	cmp	r3, #0
 800f628:	f040 80aa 	bne.w	800f780 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f62c:	4b51      	ldr	r3, [pc, #324]	; (800f774 <tcp_input+0x4b8>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	e03f      	b.n	800f6b4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	7d1b      	ldrb	r3, [r3, #20]
 800f638:	2b0a      	cmp	r3, #10
 800f63a:	d006      	beq.n	800f64a <tcp_input+0x38e>
 800f63c:	4b48      	ldr	r3, [pc, #288]	; (800f760 <tcp_input+0x4a4>)
 800f63e:	f240 121f 	movw	r2, #287	; 0x11f
 800f642:	494d      	ldr	r1, [pc, #308]	; (800f778 <tcp_input+0x4bc>)
 800f644:	4848      	ldr	r0, [pc, #288]	; (800f768 <tcp_input+0x4ac>)
 800f646:	f009 fb2f 	bl	8018ca8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	7a1b      	ldrb	r3, [r3, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d009      	beq.n	800f666 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	7a1a      	ldrb	r2, [r3, #8]
 800f656:	4b41      	ldr	r3, [pc, #260]	; (800f75c <tcp_input+0x4a0>)
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f65e:	3301      	adds	r3, #1
 800f660:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f662:	429a      	cmp	r2, r3
 800f664:	d122      	bne.n	800f6ac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	8b1a      	ldrh	r2, [r3, #24]
 800f66a:	4b3b      	ldr	r3, [pc, #236]	; (800f758 <tcp_input+0x49c>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	881b      	ldrh	r3, [r3, #0]
 800f670:	b29b      	uxth	r3, r3
 800f672:	429a      	cmp	r2, r3
 800f674:	d11b      	bne.n	800f6ae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	8ada      	ldrh	r2, [r3, #22]
 800f67a:	4b37      	ldr	r3, [pc, #220]	; (800f758 <tcp_input+0x49c>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f682:	429a      	cmp	r2, r3
 800f684:	d113      	bne.n	800f6ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	685a      	ldr	r2, [r3, #4]
 800f68a:	4b34      	ldr	r3, [pc, #208]	; (800f75c <tcp_input+0x4a0>)
 800f68c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f68e:	429a      	cmp	r2, r3
 800f690:	d10d      	bne.n	800f6ae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	4b31      	ldr	r3, [pc, #196]	; (800f75c <tcp_input+0x4a0>)
 800f698:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d107      	bne.n	800f6ae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f69e:	69f8      	ldr	r0, [r7, #28]
 800f6a0:	f000 fb56 	bl	800fd50 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f7fd fcb5 	bl	800d014 <pbuf_free>
        return;
 800f6aa:	e1fd      	b.n	800faa8 <tcp_input+0x7ec>
        continue;
 800f6ac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	61fb      	str	r3, [r7, #28]
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1bc      	bne.n	800f634 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6be:	4b2f      	ldr	r3, [pc, #188]	; (800f77c <tcp_input+0x4c0>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	617b      	str	r3, [r7, #20]
 800f6c4:	e02a      	b.n	800f71c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	7a1b      	ldrb	r3, [r3, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00c      	beq.n	800f6e8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	7a1a      	ldrb	r2, [r3, #8]
 800f6d2:	4b22      	ldr	r3, [pc, #136]	; (800f75c <tcp_input+0x4a0>)
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6da:	3301      	adds	r3, #1
 800f6dc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d002      	beq.n	800f6e8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	61bb      	str	r3, [r7, #24]
        continue;
 800f6e6:	e016      	b.n	800f716 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	8ada      	ldrh	r2, [r3, #22]
 800f6ec:	4b1a      	ldr	r3, [pc, #104]	; (800f758 <tcp_input+0x49c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	885b      	ldrh	r3, [r3, #2]
 800f6f2:	b29b      	uxth	r3, r3
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d10c      	bne.n	800f712 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	4b17      	ldr	r3, [pc, #92]	; (800f75c <tcp_input+0x4a0>)
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	429a      	cmp	r2, r3
 800f702:	d00f      	beq.n	800f724 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00d      	beq.n	800f726 <tcp_input+0x46a>
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d009      	beq.n	800f726 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	617b      	str	r3, [r7, #20]
 800f71c:	697b      	ldr	r3, [r7, #20]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1d1      	bne.n	800f6c6 <tcp_input+0x40a>
 800f722:	e000      	b.n	800f726 <tcp_input+0x46a>
            break;
 800f724:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d029      	beq.n	800f780 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d00a      	beq.n	800f748 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	68da      	ldr	r2, [r3, #12]
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f73a:	4b10      	ldr	r3, [pc, #64]	; (800f77c <tcp_input+0x4c0>)
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f742:	4a0e      	ldr	r2, [pc, #56]	; (800f77c <tcp_input+0x4c0>)
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f748:	6978      	ldr	r0, [r7, #20]
 800f74a:	f000 fa03 	bl	800fb54 <tcp_listen_input>
      }
      pbuf_free(p);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7fd fc60 	bl	800d014 <pbuf_free>
      return;
 800f754:	e1a8      	b.n	800faa8 <tcp_input+0x7ec>
 800f756:	bf00      	nop
 800f758:	2000cc54 	.word	0x2000cc54
 800f75c:	200094b8 	.word	0x200094b8
 800f760:	0801b694 	.word	0x0801b694
 800f764:	0801b7c0 	.word	0x0801b7c0
 800f768:	0801b6e0 	.word	0x0801b6e0
 800f76c:	2000cc38 	.word	0x2000cc38
 800f770:	0801b7ec 	.word	0x0801b7ec
 800f774:	2000cc3c 	.word	0x2000cc3c
 800f778:	0801b818 	.word	0x0801b818
 800f77c:	2000cc34 	.word	0x2000cc34
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 8158 	beq.w	800fa38 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f788:	4b95      	ldr	r3, [pc, #596]	; (800f9e0 <tcp_input+0x724>)
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	891a      	ldrh	r2, [r3, #8]
 800f792:	4b93      	ldr	r3, [pc, #588]	; (800f9e0 <tcp_input+0x724>)
 800f794:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f796:	4a92      	ldr	r2, [pc, #584]	; (800f9e0 <tcp_input+0x724>)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f79c:	4b91      	ldr	r3, [pc, #580]	; (800f9e4 <tcp_input+0x728>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a8f      	ldr	r2, [pc, #572]	; (800f9e0 <tcp_input+0x724>)
 800f7a2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f7a4:	4b90      	ldr	r3, [pc, #576]	; (800f9e8 <tcp_input+0x72c>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f7aa:	4b90      	ldr	r3, [pc, #576]	; (800f9ec <tcp_input+0x730>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f7b0:	4b8f      	ldr	r3, [pc, #572]	; (800f9f0 <tcp_input+0x734>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f7b6:	4b8f      	ldr	r3, [pc, #572]	; (800f9f4 <tcp_input+0x738>)
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	f003 0308 	and.w	r3, r3, #8
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d006      	beq.n	800f7d0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	7b5b      	ldrb	r3, [r3, #13]
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d017      	beq.n	800f808 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7d8:	69f8      	ldr	r0, [r7, #28]
 800f7da:	f7ff f873 	bl	800e8c4 <tcp_process_refused_data>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	f113 0f0d 	cmn.w	r3, #13
 800f7e4:	d007      	beq.n	800f7f6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7e6:	69fb      	ldr	r3, [r7, #28]
 800f7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00c      	beq.n	800f808 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f7ee:	4b82      	ldr	r3, [pc, #520]	; (800f9f8 <tcp_input+0x73c>)
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f040 80e3 	bne.w	800f9c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f800:	69f8      	ldr	r0, [r7, #28]
 800f802:	f003 fe05 	bl	8013410 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f806:	e0de      	b.n	800f9c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f808:	4a7c      	ldr	r2, [pc, #496]	; (800f9fc <tcp_input+0x740>)
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f80e:	69f8      	ldr	r0, [r7, #28]
 800f810:	f000 fb18 	bl	800fe44 <tcp_process>
 800f814:	4603      	mov	r3, r0
 800f816:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f818:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f81c:	f113 0f0d 	cmn.w	r3, #13
 800f820:	f000 80d3 	beq.w	800f9ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f824:	4b71      	ldr	r3, [pc, #452]	; (800f9ec <tcp_input+0x730>)
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	f003 0308 	and.w	r3, r3, #8
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d015      	beq.n	800f85c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f836:	2b00      	cmp	r3, #0
 800f838:	d008      	beq.n	800f84c <tcp_input+0x590>
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f840:	69fa      	ldr	r2, [r7, #28]
 800f842:	6912      	ldr	r2, [r2, #16]
 800f844:	f06f 010d 	mvn.w	r1, #13
 800f848:	4610      	mov	r0, r2
 800f84a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f84c:	69f9      	ldr	r1, [r7, #28]
 800f84e:	486c      	ldr	r0, [pc, #432]	; (800fa00 <tcp_input+0x744>)
 800f850:	f7ff fbbc 	bl	800efcc <tcp_pcb_remove>
        tcp_free(pcb);
 800f854:	69f8      	ldr	r0, [r7, #28]
 800f856:	f7fd fefd 	bl	800d654 <tcp_free>
 800f85a:	e0da      	b.n	800fa12 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f860:	4b63      	ldr	r3, [pc, #396]	; (800f9f0 <tcp_input+0x734>)
 800f862:	881b      	ldrh	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d01d      	beq.n	800f8a4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f868:	4b61      	ldr	r3, [pc, #388]	; (800f9f0 <tcp_input+0x734>)
 800f86a:	881b      	ldrh	r3, [r3, #0]
 800f86c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f874:	2b00      	cmp	r3, #0
 800f876:	d00a      	beq.n	800f88e <tcp_input+0x5d2>
 800f878:	69fb      	ldr	r3, [r7, #28]
 800f87a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f87e:	69fa      	ldr	r2, [r7, #28]
 800f880:	6910      	ldr	r0, [r2, #16]
 800f882:	89fa      	ldrh	r2, [r7, #14]
 800f884:	69f9      	ldr	r1, [r7, #28]
 800f886:	4798      	blx	r3
 800f888:	4603      	mov	r3, r0
 800f88a:	74fb      	strb	r3, [r7, #19]
 800f88c:	e001      	b.n	800f892 <tcp_input+0x5d6>
 800f88e:	2300      	movs	r3, #0
 800f890:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f892:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f896:	f113 0f0d 	cmn.w	r3, #13
 800f89a:	f000 8098 	beq.w	800f9ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f89e:	4b54      	ldr	r3, [pc, #336]	; (800f9f0 <tcp_input+0x734>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f8a4:	69f8      	ldr	r0, [r7, #28]
 800f8a6:	f000 f915 	bl	800fad4 <tcp_input_delayed_close>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	f040 8090 	bne.w	800f9d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f8b2:	4b4d      	ldr	r3, [pc, #308]	; (800f9e8 <tcp_input+0x72c>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d041      	beq.n	800f93e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d006      	beq.n	800f8d0 <tcp_input+0x614>
 800f8c2:	4b50      	ldr	r3, [pc, #320]	; (800fa04 <tcp_input+0x748>)
 800f8c4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f8c8:	494f      	ldr	r1, [pc, #316]	; (800fa08 <tcp_input+0x74c>)
 800f8ca:	4850      	ldr	r0, [pc, #320]	; (800fa0c <tcp_input+0x750>)
 800f8cc:	f009 f9ec 	bl	8018ca8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	8b5b      	ldrh	r3, [r3, #26]
 800f8d4:	f003 0310 	and.w	r3, r3, #16
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d008      	beq.n	800f8ee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f8dc:	4b42      	ldr	r3, [pc, #264]	; (800f9e8 <tcp_input+0x72c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fd fb97 	bl	800d014 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f8e6:	69f8      	ldr	r0, [r7, #28]
 800f8e8:	f7fe f99c 	bl	800dc24 <tcp_abort>
            goto aborted;
 800f8ec:	e091      	b.n	800fa12 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00c      	beq.n	800f912 <tcp_input+0x656>
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	6918      	ldr	r0, [r3, #16]
 800f902:	4b39      	ldr	r3, [pc, #228]	; (800f9e8 <tcp_input+0x72c>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	2300      	movs	r3, #0
 800f908:	69f9      	ldr	r1, [r7, #28]
 800f90a:	47a0      	blx	r4
 800f90c:	4603      	mov	r3, r0
 800f90e:	74fb      	strb	r3, [r7, #19]
 800f910:	e008      	b.n	800f924 <tcp_input+0x668>
 800f912:	4b35      	ldr	r3, [pc, #212]	; (800f9e8 <tcp_input+0x72c>)
 800f914:	681a      	ldr	r2, [r3, #0]
 800f916:	2300      	movs	r3, #0
 800f918:	69f9      	ldr	r1, [r7, #28]
 800f91a:	2000      	movs	r0, #0
 800f91c:	f7ff f8a8 	bl	800ea70 <tcp_recv_null>
 800f920:	4603      	mov	r3, r0
 800f922:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f928:	f113 0f0d 	cmn.w	r3, #13
 800f92c:	d053      	beq.n	800f9d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f92e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d003      	beq.n	800f93e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f936:	4b2c      	ldr	r3, [pc, #176]	; (800f9e8 <tcp_input+0x72c>)
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f93e:	4b2b      	ldr	r3, [pc, #172]	; (800f9ec <tcp_input+0x730>)
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	f003 0320 	and.w	r3, r3, #32
 800f946:	2b00      	cmp	r3, #0
 800f948:	d030      	beq.n	800f9ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d009      	beq.n	800f966 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f956:	7b5a      	ldrb	r2, [r3, #13]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f95c:	f042 0220 	orr.w	r2, r2, #32
 800f960:	b2d2      	uxtb	r2, r2
 800f962:	735a      	strb	r2, [r3, #13]
 800f964:	e022      	b.n	800f9ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f96a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f96e:	d005      	beq.n	800f97c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f974:	3301      	adds	r3, #1
 800f976:	b29a      	uxth	r2, r3
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f982:	2b00      	cmp	r3, #0
 800f984:	d00b      	beq.n	800f99e <tcp_input+0x6e2>
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	6918      	ldr	r0, [r3, #16]
 800f990:	2300      	movs	r3, #0
 800f992:	2200      	movs	r2, #0
 800f994:	69f9      	ldr	r1, [r7, #28]
 800f996:	47a0      	blx	r4
 800f998:	4603      	mov	r3, r0
 800f99a:	74fb      	strb	r3, [r7, #19]
 800f99c:	e001      	b.n	800f9a2 <tcp_input+0x6e6>
 800f99e:	2300      	movs	r3, #0
 800f9a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9a6:	f113 0f0d 	cmn.w	r3, #13
 800f9aa:	d016      	beq.n	800f9da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f9ac:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <tcp_input+0x740>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f9b2:	69f8      	ldr	r0, [r7, #28]
 800f9b4:	f000 f88e 	bl	800fad4 <tcp_input_delayed_close>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d128      	bne.n	800fa10 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f9be:	69f8      	ldr	r0, [r7, #28]
 800f9c0:	f002 ff20 	bl	8012804 <tcp_output>
 800f9c4:	e025      	b.n	800fa12 <tcp_input+0x756>
        goto aborted;
 800f9c6:	bf00      	nop
 800f9c8:	e023      	b.n	800fa12 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f9ca:	bf00      	nop
 800f9cc:	e021      	b.n	800fa12 <tcp_input+0x756>
              goto aborted;
 800f9ce:	bf00      	nop
 800f9d0:	e01f      	b.n	800fa12 <tcp_input+0x756>
          goto aborted;
 800f9d2:	bf00      	nop
 800f9d4:	e01d      	b.n	800fa12 <tcp_input+0x756>
            goto aborted;
 800f9d6:	bf00      	nop
 800f9d8:	e01b      	b.n	800fa12 <tcp_input+0x756>
              goto aborted;
 800f9da:	bf00      	nop
 800f9dc:	e019      	b.n	800fa12 <tcp_input+0x756>
 800f9de:	bf00      	nop
 800f9e0:	2000cc44 	.word	0x2000cc44
 800f9e4:	2000cc54 	.word	0x2000cc54
 800f9e8:	2000cc74 	.word	0x2000cc74
 800f9ec:	2000cc71 	.word	0x2000cc71
 800f9f0:	2000cc6c 	.word	0x2000cc6c
 800f9f4:	2000cc70 	.word	0x2000cc70
 800f9f8:	2000cc6e 	.word	0x2000cc6e
 800f9fc:	2000cc78 	.word	0x2000cc78
 800fa00:	2000cc38 	.word	0x2000cc38
 800fa04:	0801b694 	.word	0x0801b694
 800fa08:	0801b848 	.word	0x0801b848
 800fa0c:	0801b6e0 	.word	0x0801b6e0
          goto aborted;
 800fa10:	bf00      	nop
    tcp_input_pcb = NULL;
 800fa12:	4b27      	ldr	r3, [pc, #156]	; (800fab0 <tcp_input+0x7f4>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fa18:	4b26      	ldr	r3, [pc, #152]	; (800fab4 <tcp_input+0x7f8>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fa1e:	4b26      	ldr	r3, [pc, #152]	; (800fab8 <tcp_input+0x7fc>)
 800fa20:	685b      	ldr	r3, [r3, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d03f      	beq.n	800faa6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fa26:	4b24      	ldr	r3, [pc, #144]	; (800fab8 <tcp_input+0x7fc>)
 800fa28:	685b      	ldr	r3, [r3, #4]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fd faf2 	bl	800d014 <pbuf_free>
      inseg.p = NULL;
 800fa30:	4b21      	ldr	r3, [pc, #132]	; (800fab8 <tcp_input+0x7fc>)
 800fa32:	2200      	movs	r2, #0
 800fa34:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fa36:	e036      	b.n	800faa6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fa38:	4b20      	ldr	r3, [pc, #128]	; (800fabc <tcp_input+0x800>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	899b      	ldrh	r3, [r3, #12]
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fb fee9 	bl	800b818 <lwip_htons>
 800fa46:	4603      	mov	r3, r0
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	f003 0304 	and.w	r3, r3, #4
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d118      	bne.n	800fa84 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa52:	4b1b      	ldr	r3, [pc, #108]	; (800fac0 <tcp_input+0x804>)
 800fa54:	6819      	ldr	r1, [r3, #0]
 800fa56:	4b1b      	ldr	r3, [pc, #108]	; (800fac4 <tcp_input+0x808>)
 800fa58:	881b      	ldrh	r3, [r3, #0]
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4b1a      	ldr	r3, [pc, #104]	; (800fac8 <tcp_input+0x80c>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa62:	4b16      	ldr	r3, [pc, #88]	; (800fabc <tcp_input+0x800>)
 800fa64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa66:	885b      	ldrh	r3, [r3, #2]
 800fa68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa6a:	4a14      	ldr	r2, [pc, #80]	; (800fabc <tcp_input+0x800>)
 800fa6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa6e:	8812      	ldrh	r2, [r2, #0]
 800fa70:	b292      	uxth	r2, r2
 800fa72:	9202      	str	r2, [sp, #8]
 800fa74:	9301      	str	r3, [sp, #4]
 800fa76:	4b15      	ldr	r3, [pc, #84]	; (800facc <tcp_input+0x810>)
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	4b15      	ldr	r3, [pc, #84]	; (800fad0 <tcp_input+0x814>)
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f003 fc74 	bl	801336c <tcp_rst>
    pbuf_free(p);
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7fd fac5 	bl	800d014 <pbuf_free>
  return;
 800fa8a:	e00c      	b.n	800faa6 <tcp_input+0x7ea>
    goto dropped;
 800fa8c:	bf00      	nop
 800fa8e:	e006      	b.n	800fa9e <tcp_input+0x7e2>
    goto dropped;
 800fa90:	bf00      	nop
 800fa92:	e004      	b.n	800fa9e <tcp_input+0x7e2>
    goto dropped;
 800fa94:	bf00      	nop
 800fa96:	e002      	b.n	800fa9e <tcp_input+0x7e2>
      goto dropped;
 800fa98:	bf00      	nop
 800fa9a:	e000      	b.n	800fa9e <tcp_input+0x7e2>
      goto dropped;
 800fa9c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7fd fab8 	bl	800d014 <pbuf_free>
 800faa4:	e000      	b.n	800faa8 <tcp_input+0x7ec>
  return;
 800faa6:	bf00      	nop
}
 800faa8:	3724      	adds	r7, #36	; 0x24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd90      	pop	{r4, r7, pc}
 800faae:	bf00      	nop
 800fab0:	2000cc78 	.word	0x2000cc78
 800fab4:	2000cc74 	.word	0x2000cc74
 800fab8:	2000cc44 	.word	0x2000cc44
 800fabc:	2000cc54 	.word	0x2000cc54
 800fac0:	2000cc68 	.word	0x2000cc68
 800fac4:	2000cc6e 	.word	0x2000cc6e
 800fac8:	2000cc64 	.word	0x2000cc64
 800facc:	200094c8 	.word	0x200094c8
 800fad0:	200094cc 	.word	0x200094cc

0800fad4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <tcp_input_delayed_close+0x1c>
 800fae2:	4b17      	ldr	r3, [pc, #92]	; (800fb40 <tcp_input_delayed_close+0x6c>)
 800fae4:	f240 225a 	movw	r2, #602	; 0x25a
 800fae8:	4916      	ldr	r1, [pc, #88]	; (800fb44 <tcp_input_delayed_close+0x70>)
 800faea:	4817      	ldr	r0, [pc, #92]	; (800fb48 <tcp_input_delayed_close+0x74>)
 800faec:	f009 f8dc 	bl	8018ca8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800faf0:	4b16      	ldr	r3, [pc, #88]	; (800fb4c <tcp_input_delayed_close+0x78>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	f003 0310 	and.w	r3, r3, #16
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d01c      	beq.n	800fb36 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8b5b      	ldrh	r3, [r3, #26]
 800fb00:	f003 0310 	and.w	r3, r3, #16
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d10d      	bne.n	800fb24 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d008      	beq.n	800fb24 <tcp_input_delayed_close+0x50>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	6912      	ldr	r2, [r2, #16]
 800fb1c:	f06f 010e 	mvn.w	r1, #14
 800fb20:	4610      	mov	r0, r2
 800fb22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb24:	6879      	ldr	r1, [r7, #4]
 800fb26:	480a      	ldr	r0, [pc, #40]	; (800fb50 <tcp_input_delayed_close+0x7c>)
 800fb28:	f7ff fa50 	bl	800efcc <tcp_pcb_remove>
    tcp_free(pcb);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f7fd fd91 	bl	800d654 <tcp_free>
    return 1;
 800fb32:	2301      	movs	r3, #1
 800fb34:	e000      	b.n	800fb38 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fb36:	2300      	movs	r3, #0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	0801b694 	.word	0x0801b694
 800fb44:	0801b864 	.word	0x0801b864
 800fb48:	0801b6e0 	.word	0x0801b6e0
 800fb4c:	2000cc71 	.word	0x2000cc71
 800fb50:	2000cc38 	.word	0x2000cc38

0800fb54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b08b      	sub	sp, #44	; 0x2c
 800fb58:	af04      	add	r7, sp, #16
 800fb5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fb5c:	4b6f      	ldr	r3, [pc, #444]	; (800fd1c <tcp_listen_input+0x1c8>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 0304 	and.w	r3, r3, #4
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f040 80d2 	bne.w	800fd0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d106      	bne.n	800fb7e <tcp_listen_input+0x2a>
 800fb70:	4b6b      	ldr	r3, [pc, #428]	; (800fd20 <tcp_listen_input+0x1cc>)
 800fb72:	f240 2281 	movw	r2, #641	; 0x281
 800fb76:	496b      	ldr	r1, [pc, #428]	; (800fd24 <tcp_listen_input+0x1d0>)
 800fb78:	486b      	ldr	r0, [pc, #428]	; (800fd28 <tcp_listen_input+0x1d4>)
 800fb7a:	f009 f895 	bl	8018ca8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fb7e:	4b67      	ldr	r3, [pc, #412]	; (800fd1c <tcp_listen_input+0x1c8>)
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	f003 0310 	and.w	r3, r3, #16
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d019      	beq.n	800fbbe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb8a:	4b68      	ldr	r3, [pc, #416]	; (800fd2c <tcp_listen_input+0x1d8>)
 800fb8c:	6819      	ldr	r1, [r3, #0]
 800fb8e:	4b68      	ldr	r3, [pc, #416]	; (800fd30 <tcp_listen_input+0x1dc>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	4b67      	ldr	r3, [pc, #412]	; (800fd34 <tcp_listen_input+0x1e0>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb9a:	4b67      	ldr	r3, [pc, #412]	; (800fd38 <tcp_listen_input+0x1e4>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb9e:	885b      	ldrh	r3, [r3, #2]
 800fba0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fba2:	4a65      	ldr	r2, [pc, #404]	; (800fd38 <tcp_listen_input+0x1e4>)
 800fba4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fba6:	8812      	ldrh	r2, [r2, #0]
 800fba8:	b292      	uxth	r2, r2
 800fbaa:	9202      	str	r2, [sp, #8]
 800fbac:	9301      	str	r3, [sp, #4]
 800fbae:	4b63      	ldr	r3, [pc, #396]	; (800fd3c <tcp_listen_input+0x1e8>)
 800fbb0:	9300      	str	r3, [sp, #0]
 800fbb2:	4b63      	ldr	r3, [pc, #396]	; (800fd40 <tcp_listen_input+0x1ec>)
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f003 fbd8 	bl	801336c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fbbc:	e0a9      	b.n	800fd12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fbbe:	4b57      	ldr	r3, [pc, #348]	; (800fd1c <tcp_listen_input+0x1c8>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 0302 	and.w	r3, r3, #2
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	f000 80a3 	beq.w	800fd12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7d5b      	ldrb	r3, [r3, #21]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff f871 	bl	800ecb8 <tcp_alloc>
 800fbd6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d111      	bne.n	800fc02 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	699b      	ldr	r3, [r3, #24]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00a      	beq.n	800fbfc <tcp_listen_input+0xa8>
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	6910      	ldr	r0, [r2, #16]
 800fbee:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf2:	2100      	movs	r1, #0
 800fbf4:	4798      	blx	r3
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	73bb      	strb	r3, [r7, #14]
      return;
 800fbfa:	e08b      	b.n	800fd14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fbfc:	23f0      	movs	r3, #240	; 0xf0
 800fbfe:	73bb      	strb	r3, [r7, #14]
      return;
 800fc00:	e088      	b.n	800fd14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fc02:	4b50      	ldr	r3, [pc, #320]	; (800fd44 <tcp_listen_input+0x1f0>)
 800fc04:	695a      	ldr	r2, [r3, #20]
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fc0a:	4b4e      	ldr	r3, [pc, #312]	; (800fd44 <tcp_listen_input+0x1f0>)
 800fc0c:	691a      	ldr	r2, [r3, #16]
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	8ada      	ldrh	r2, [r3, #22]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fc1a:	4b47      	ldr	r3, [pc, #284]	; (800fd38 <tcp_listen_input+0x1e4>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	2203      	movs	r2, #3
 800fc2a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fc2c:	4b41      	ldr	r3, [pc, #260]	; (800fd34 <tcp_listen_input+0x1e0>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	1c5a      	adds	r2, r3, #1
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fc3e:	6978      	ldr	r0, [r7, #20]
 800fc40:	f7ff fa58 	bl	800f0f4 <tcp_next_iss>
 800fc44:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	693a      	ldr	r2, [r7, #16]
 800fc4a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	693a      	ldr	r2, [r7, #16]
 800fc50:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	693a      	ldr	r2, [r7, #16]
 800fc56:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	693a      	ldr	r2, [r7, #16]
 800fc5c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fc5e:	4b35      	ldr	r3, [pc, #212]	; (800fd34 <tcp_listen_input+0x1e0>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	1e5a      	subs	r2, r3, #1
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	691a      	ldr	r2, [r3, #16]
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fc70:	697b      	ldr	r3, [r7, #20]
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	7a5b      	ldrb	r3, [r3, #9]
 800fc7a:	f003 030c 	and.w	r3, r3, #12
 800fc7e:	b2da      	uxtb	r2, r3
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	7a1a      	ldrb	r2, [r3, #8]
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fc8c:	4b2e      	ldr	r3, [pc, #184]	; (800fd48 <tcp_listen_input+0x1f4>)
 800fc8e:	681a      	ldr	r2, [r3, #0]
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	60da      	str	r2, [r3, #12]
 800fc94:	4a2c      	ldr	r2, [pc, #176]	; (800fd48 <tcp_listen_input+0x1f4>)
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	f003 fd29 	bl	80136f0 <tcp_timer_needed>
 800fc9e:	4b2b      	ldr	r3, [pc, #172]	; (800fd4c <tcp_listen_input+0x1f8>)
 800fca0:	2201      	movs	r2, #1
 800fca2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fca4:	6978      	ldr	r0, [r7, #20]
 800fca6:	f001 fd8f 	bl	80117c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fcaa:	4b23      	ldr	r3, [pc, #140]	; (800fd38 <tcp_listen_input+0x1e4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	89db      	ldrh	r3, [r3, #14]
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	3304      	adds	r3, #4
 800fccc:	4618      	mov	r0, r3
 800fcce:	f007 faf1 	bl	80172b4 <ip4_route>
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f7ff fa30 	bl	800f140 <tcp_eff_send_mss_netif>
 800fce0:	4603      	mov	r3, r0
 800fce2:	461a      	mov	r2, r3
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fce8:	2112      	movs	r1, #18
 800fcea:	6978      	ldr	r0, [r7, #20]
 800fcec:	f002 fc9c 	bl	8012628 <tcp_enqueue_flags>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fcf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d004      	beq.n	800fd06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	6978      	ldr	r0, [r7, #20]
 800fd00:	f7fd fed2 	bl	800daa8 <tcp_abandon>
      return;
 800fd04:	e006      	b.n	800fd14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fd06:	6978      	ldr	r0, [r7, #20]
 800fd08:	f002 fd7c 	bl	8012804 <tcp_output>
  return;
 800fd0c:	e001      	b.n	800fd12 <tcp_listen_input+0x1be>
    return;
 800fd0e:	bf00      	nop
 800fd10:	e000      	b.n	800fd14 <tcp_listen_input+0x1c0>
  return;
 800fd12:	bf00      	nop
}
 800fd14:	371c      	adds	r7, #28
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd90      	pop	{r4, r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	2000cc70 	.word	0x2000cc70
 800fd20:	0801b694 	.word	0x0801b694
 800fd24:	0801b88c 	.word	0x0801b88c
 800fd28:	0801b6e0 	.word	0x0801b6e0
 800fd2c:	2000cc68 	.word	0x2000cc68
 800fd30:	2000cc6e 	.word	0x2000cc6e
 800fd34:	2000cc64 	.word	0x2000cc64
 800fd38:	2000cc54 	.word	0x2000cc54
 800fd3c:	200094c8 	.word	0x200094c8
 800fd40:	200094cc 	.word	0x200094cc
 800fd44:	200094b8 	.word	0x200094b8
 800fd48:	2000cc38 	.word	0x2000cc38
 800fd4c:	2000cc40 	.word	0x2000cc40

0800fd50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af04      	add	r7, sp, #16
 800fd56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fd58:	4b2f      	ldr	r3, [pc, #188]	; (800fe18 <tcp_timewait_input+0xc8>)
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	f003 0304 	and.w	r3, r3, #4
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d153      	bne.n	800fe0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d106      	bne.n	800fd78 <tcp_timewait_input+0x28>
 800fd6a:	4b2c      	ldr	r3, [pc, #176]	; (800fe1c <tcp_timewait_input+0xcc>)
 800fd6c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fd70:	492b      	ldr	r1, [pc, #172]	; (800fe20 <tcp_timewait_input+0xd0>)
 800fd72:	482c      	ldr	r0, [pc, #176]	; (800fe24 <tcp_timewait_input+0xd4>)
 800fd74:	f008 ff98 	bl	8018ca8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fd78:	4b27      	ldr	r3, [pc, #156]	; (800fe18 <tcp_timewait_input+0xc8>)
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f003 0302 	and.w	r3, r3, #2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d02a      	beq.n	800fdda <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fd84:	4b28      	ldr	r3, [pc, #160]	; (800fe28 <tcp_timewait_input+0xd8>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8c:	1ad3      	subs	r3, r2, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	db2d      	blt.n	800fdee <tcp_timewait_input+0x9e>
 800fd92:	4b25      	ldr	r3, [pc, #148]	; (800fe28 <tcp_timewait_input+0xd8>)
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9a:	6879      	ldr	r1, [r7, #4]
 800fd9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd9e:	440b      	add	r3, r1
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dc23      	bgt.n	800fdee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda6:	4b21      	ldr	r3, [pc, #132]	; (800fe2c <tcp_timewait_input+0xdc>)
 800fda8:	6819      	ldr	r1, [r3, #0]
 800fdaa:	4b21      	ldr	r3, [pc, #132]	; (800fe30 <tcp_timewait_input+0xe0>)
 800fdac:	881b      	ldrh	r3, [r3, #0]
 800fdae:	461a      	mov	r2, r3
 800fdb0:	4b1d      	ldr	r3, [pc, #116]	; (800fe28 <tcp_timewait_input+0xd8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb6:	4b1f      	ldr	r3, [pc, #124]	; (800fe34 <tcp_timewait_input+0xe4>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdba:	885b      	ldrh	r3, [r3, #2]
 800fdbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdbe:	4a1d      	ldr	r2, [pc, #116]	; (800fe34 <tcp_timewait_input+0xe4>)
 800fdc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdc2:	8812      	ldrh	r2, [r2, #0]
 800fdc4:	b292      	uxth	r2, r2
 800fdc6:	9202      	str	r2, [sp, #8]
 800fdc8:	9301      	str	r3, [sp, #4]
 800fdca:	4b1b      	ldr	r3, [pc, #108]	; (800fe38 <tcp_timewait_input+0xe8>)
 800fdcc:	9300      	str	r3, [sp, #0]
 800fdce:	4b1b      	ldr	r3, [pc, #108]	; (800fe3c <tcp_timewait_input+0xec>)
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f003 faca 	bl	801336c <tcp_rst>
      return;
 800fdd8:	e01b      	b.n	800fe12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800fdda:	4b0f      	ldr	r3, [pc, #60]	; (800fe18 <tcp_timewait_input+0xc8>)
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	f003 0301 	and.w	r3, r3, #1
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fde6:	4b16      	ldr	r3, [pc, #88]	; (800fe40 <tcp_timewait_input+0xf0>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fdee:	4b10      	ldr	r3, [pc, #64]	; (800fe30 <tcp_timewait_input+0xe0>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d00c      	beq.n	800fe10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	8b5b      	ldrh	r3, [r3, #26]
 800fdfa:	f043 0302 	orr.w	r3, r3, #2
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f002 fcfd 	bl	8012804 <tcp_output>
  }
  return;
 800fe0a:	e001      	b.n	800fe10 <tcp_timewait_input+0xc0>
    return;
 800fe0c:	bf00      	nop
 800fe0e:	e000      	b.n	800fe12 <tcp_timewait_input+0xc2>
  return;
 800fe10:	bf00      	nop
}
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	2000cc70 	.word	0x2000cc70
 800fe1c:	0801b694 	.word	0x0801b694
 800fe20:	0801b8ac 	.word	0x0801b8ac
 800fe24:	0801b6e0 	.word	0x0801b6e0
 800fe28:	2000cc64 	.word	0x2000cc64
 800fe2c:	2000cc68 	.word	0x2000cc68
 800fe30:	2000cc6e 	.word	0x2000cc6e
 800fe34:	2000cc54 	.word	0x2000cc54
 800fe38:	200094c8 	.word	0x200094c8
 800fe3c:	200094cc 	.word	0x200094cc
 800fe40:	2000cc2c 	.word	0x2000cc2c

0800fe44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fe44:	b590      	push	{r4, r7, lr}
 800fe46:	b08d      	sub	sp, #52	; 0x34
 800fe48:	af04      	add	r7, sp, #16
 800fe4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fe50:	2300      	movs	r3, #0
 800fe52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d106      	bne.n	800fe68 <tcp_process+0x24>
 800fe5a:	4b9d      	ldr	r3, [pc, #628]	; (80100d0 <tcp_process+0x28c>)
 800fe5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800fe60:	499c      	ldr	r1, [pc, #624]	; (80100d4 <tcp_process+0x290>)
 800fe62:	489d      	ldr	r0, [pc, #628]	; (80100d8 <tcp_process+0x294>)
 800fe64:	f008 ff20 	bl	8018ca8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fe68:	4b9c      	ldr	r3, [pc, #624]	; (80100dc <tcp_process+0x298>)
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 0304 	and.w	r3, r3, #4
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d04e      	beq.n	800ff12 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	7d1b      	ldrb	r3, [r3, #20]
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d108      	bne.n	800fe8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe80:	4b97      	ldr	r3, [pc, #604]	; (80100e0 <tcp_process+0x29c>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d123      	bne.n	800fed0 <tcp_process+0x8c>
        acceptable = 1;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	76fb      	strb	r3, [r7, #27]
 800fe8c:	e020      	b.n	800fed0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe92:	4b94      	ldr	r3, [pc, #592]	; (80100e4 <tcp_process+0x2a0>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d102      	bne.n	800fea0 <tcp_process+0x5c>
        acceptable = 1;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	76fb      	strb	r3, [r7, #27]
 800fe9e:	e017      	b.n	800fed0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fea0:	4b90      	ldr	r3, [pc, #576]	; (80100e4 <tcp_process+0x2a0>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	2b00      	cmp	r3, #0
 800feac:	db10      	blt.n	800fed0 <tcp_process+0x8c>
 800feae:	4b8d      	ldr	r3, [pc, #564]	; (80100e4 <tcp_process+0x2a0>)
 800feb0:	681a      	ldr	r2, [r3, #0]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feba:	440b      	add	r3, r1
 800febc:	1ad3      	subs	r3, r2, r3
 800febe:	2b00      	cmp	r3, #0
 800fec0:	dc06      	bgt.n	800fed0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	8b5b      	ldrh	r3, [r3, #26]
 800fec6:	f043 0302 	orr.w	r3, r3, #2
 800feca:	b29a      	uxth	r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fed0:	7efb      	ldrb	r3, [r7, #27]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d01b      	beq.n	800ff0e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	7d1b      	ldrb	r3, [r3, #20]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d106      	bne.n	800feec <tcp_process+0xa8>
 800fede:	4b7c      	ldr	r3, [pc, #496]	; (80100d0 <tcp_process+0x28c>)
 800fee0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fee4:	4980      	ldr	r1, [pc, #512]	; (80100e8 <tcp_process+0x2a4>)
 800fee6:	487c      	ldr	r0, [pc, #496]	; (80100d8 <tcp_process+0x294>)
 800fee8:	f008 fede 	bl	8018ca8 <iprintf>
      recv_flags |= TF_RESET;
 800feec:	4b7f      	ldr	r3, [pc, #508]	; (80100ec <tcp_process+0x2a8>)
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	f043 0308 	orr.w	r3, r3, #8
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	4b7d      	ldr	r3, [pc, #500]	; (80100ec <tcp_process+0x2a8>)
 800fef8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	8b5b      	ldrh	r3, [r3, #26]
 800fefe:	f023 0301 	bic.w	r3, r3, #1
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ff08:	f06f 030d 	mvn.w	r3, #13
 800ff0c:	e37a      	b.n	8010604 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e378      	b.n	8010604 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ff12:	4b72      	ldr	r3, [pc, #456]	; (80100dc <tcp_process+0x298>)
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	f003 0302 	and.w	r3, r3, #2
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d010      	beq.n	800ff40 <tcp_process+0xfc>
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7d1b      	ldrb	r3, [r3, #20]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d00c      	beq.n	800ff40 <tcp_process+0xfc>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7d1b      	ldrb	r3, [r3, #20]
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d008      	beq.n	800ff40 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	8b5b      	ldrh	r3, [r3, #26]
 800ff32:	f043 0302 	orr.w	r3, r3, #2
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	e361      	b.n	8010604 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	8b5b      	ldrh	r3, [r3, #26]
 800ff44:	f003 0310 	and.w	r3, r3, #16
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d103      	bne.n	800ff54 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ff4c:	4b68      	ldr	r3, [pc, #416]	; (80100f0 <tcp_process+0x2ac>)
 800ff4e:	681a      	ldr	r2, [r3, #0]
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f001 fc2f 	bl	80117c8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	7d1b      	ldrb	r3, [r3, #20]
 800ff6e:	3b02      	subs	r3, #2
 800ff70:	2b07      	cmp	r3, #7
 800ff72:	f200 8337 	bhi.w	80105e4 <tcp_process+0x7a0>
 800ff76:	a201      	add	r2, pc, #4	; (adr r2, 800ff7c <tcp_process+0x138>)
 800ff78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff7c:	0800ff9d 	.word	0x0800ff9d
 800ff80:	080101cd 	.word	0x080101cd
 800ff84:	08010345 	.word	0x08010345
 800ff88:	0801036f 	.word	0x0801036f
 800ff8c:	08010493 	.word	0x08010493
 800ff90:	08010345 	.word	0x08010345
 800ff94:	0801051f 	.word	0x0801051f
 800ff98:	080105af 	.word	0x080105af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ff9c:	4b4f      	ldr	r3, [pc, #316]	; (80100dc <tcp_process+0x298>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 0310 	and.w	r3, r3, #16
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f000 80e4 	beq.w	8010172 <tcp_process+0x32e>
 800ffaa:	4b4c      	ldr	r3, [pc, #304]	; (80100dc <tcp_process+0x298>)
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	f003 0302 	and.w	r3, r3, #2
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f000 80dd 	beq.w	8010172 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffbc:	1c5a      	adds	r2, r3, #1
 800ffbe:	4b48      	ldr	r3, [pc, #288]	; (80100e0 <tcp_process+0x29c>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	429a      	cmp	r2, r3
 800ffc4:	f040 80d5 	bne.w	8010172 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ffc8:	4b46      	ldr	r3, [pc, #280]	; (80100e4 <tcp_process+0x2a0>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	1c5a      	adds	r2, r3, #1
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ffda:	4b41      	ldr	r3, [pc, #260]	; (80100e0 <tcp_process+0x29c>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ffe2:	4b44      	ldr	r3, [pc, #272]	; (80100f4 <tcp_process+0x2b0>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	89db      	ldrh	r3, [r3, #14]
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fffc:	4b39      	ldr	r3, [pc, #228]	; (80100e4 <tcp_process+0x2a0>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	1e5a      	subs	r2, r3, #1
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2204      	movs	r2, #4
 801000a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3304      	adds	r3, #4
 8010014:	4618      	mov	r0, r3
 8010016:	f007 f94d 	bl	80172b4 <ip4_route>
 801001a:	4601      	mov	r1, r0
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	3304      	adds	r3, #4
 8010020:	461a      	mov	r2, r3
 8010022:	4620      	mov	r0, r4
 8010024:	f7ff f88c 	bl	800f140 <tcp_eff_send_mss_netif>
 8010028:	4603      	mov	r3, r0
 801002a:	461a      	mov	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010034:	009a      	lsls	r2, r3, #2
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010040:	428b      	cmp	r3, r1
 8010042:	bf38      	it	cc
 8010044:	460b      	movcc	r3, r1
 8010046:	429a      	cmp	r2, r3
 8010048:	d204      	bcs.n	8010054 <tcp_process+0x210>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	b29b      	uxth	r3, r3
 8010052:	e00d      	b.n	8010070 <tcp_process+0x22c>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	f241 121c 	movw	r2, #4380	; 0x111c
 801005e:	4293      	cmp	r3, r2
 8010060:	d904      	bls.n	801006c <tcp_process+0x228>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010066:	005b      	lsls	r3, r3, #1
 8010068:	b29b      	uxth	r3, r3
 801006a:	e001      	b.n	8010070 <tcp_process+0x22c>
 801006c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801007c:	2b00      	cmp	r3, #0
 801007e:	d106      	bne.n	801008e <tcp_process+0x24a>
 8010080:	4b13      	ldr	r3, [pc, #76]	; (80100d0 <tcp_process+0x28c>)
 8010082:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010086:	491c      	ldr	r1, [pc, #112]	; (80100f8 <tcp_process+0x2b4>)
 8010088:	4813      	ldr	r0, [pc, #76]	; (80100d8 <tcp_process+0x294>)
 801008a:	f008 fe0d 	bl	8018ca8 <iprintf>
        --pcb->snd_queuelen;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010094:	3b01      	subs	r3, #1
 8010096:	b29a      	uxth	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d12a      	bne.n	8010100 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <tcp_process+0x280>
 80100b6:	4b06      	ldr	r3, [pc, #24]	; (80100d0 <tcp_process+0x28c>)
 80100b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80100bc:	490f      	ldr	r1, [pc, #60]	; (80100fc <tcp_process+0x2b8>)
 80100be:	4806      	ldr	r0, [pc, #24]	; (80100d8 <tcp_process+0x294>)
 80100c0:	f008 fdf2 	bl	8018ca8 <iprintf>
          pcb->unsent = rseg->next;
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80100cc:	e01c      	b.n	8010108 <tcp_process+0x2c4>
 80100ce:	bf00      	nop
 80100d0:	0801b694 	.word	0x0801b694
 80100d4:	0801b8cc 	.word	0x0801b8cc
 80100d8:	0801b6e0 	.word	0x0801b6e0
 80100dc:	2000cc70 	.word	0x2000cc70
 80100e0:	2000cc68 	.word	0x2000cc68
 80100e4:	2000cc64 	.word	0x2000cc64
 80100e8:	0801b8e8 	.word	0x0801b8e8
 80100ec:	2000cc71 	.word	0x2000cc71
 80100f0:	2000cc2c 	.word	0x2000cc2c
 80100f4:	2000cc54 	.word	0x2000cc54
 80100f8:	0801b908 	.word	0x0801b908
 80100fc:	0801b920 	.word	0x0801b920
        } else {
          pcb->unacked = rseg->next;
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010108:	69f8      	ldr	r0, [r7, #28]
 801010a:	f7fe fc6c 	bl	800e9e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010112:	2b00      	cmp	r3, #0
 8010114:	d104      	bne.n	8010120 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801011c:	861a      	strh	r2, [r3, #48]	; 0x30
 801011e:	e006      	b.n	801012e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2200      	movs	r2, #0
 801012a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00a      	beq.n	801014e <tcp_process+0x30a>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	6910      	ldr	r0, [r2, #16]
 8010142:	2200      	movs	r2, #0
 8010144:	6879      	ldr	r1, [r7, #4]
 8010146:	4798      	blx	r3
 8010148:	4603      	mov	r3, r0
 801014a:	76bb      	strb	r3, [r7, #26]
 801014c:	e001      	b.n	8010152 <tcp_process+0x30e>
 801014e:	2300      	movs	r3, #0
 8010150:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010152:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010156:	f113 0f0d 	cmn.w	r3, #13
 801015a:	d102      	bne.n	8010162 <tcp_process+0x31e>
          return ERR_ABRT;
 801015c:	f06f 030c 	mvn.w	r3, #12
 8010160:	e250      	b.n	8010604 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8b5b      	ldrh	r3, [r3, #26]
 8010166:	f043 0302 	orr.w	r3, r3, #2
 801016a:	b29a      	uxth	r2, r3
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010170:	e23a      	b.n	80105e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010172:	4b98      	ldr	r3, [pc, #608]	; (80103d4 <tcp_process+0x590>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	f003 0310 	and.w	r3, r3, #16
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 8234 	beq.w	80105e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010180:	4b95      	ldr	r3, [pc, #596]	; (80103d8 <tcp_process+0x594>)
 8010182:	6819      	ldr	r1, [r3, #0]
 8010184:	4b95      	ldr	r3, [pc, #596]	; (80103dc <tcp_process+0x598>)
 8010186:	881b      	ldrh	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	4b95      	ldr	r3, [pc, #596]	; (80103e0 <tcp_process+0x59c>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010190:	4b94      	ldr	r3, [pc, #592]	; (80103e4 <tcp_process+0x5a0>)
 8010192:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010194:	885b      	ldrh	r3, [r3, #2]
 8010196:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010198:	4a92      	ldr	r2, [pc, #584]	; (80103e4 <tcp_process+0x5a0>)
 801019a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801019c:	8812      	ldrh	r2, [r2, #0]
 801019e:	b292      	uxth	r2, r2
 80101a0:	9202      	str	r2, [sp, #8]
 80101a2:	9301      	str	r3, [sp, #4]
 80101a4:	4b90      	ldr	r3, [pc, #576]	; (80103e8 <tcp_process+0x5a4>)
 80101a6:	9300      	str	r3, [sp, #0]
 80101a8:	4b90      	ldr	r3, [pc, #576]	; (80103ec <tcp_process+0x5a8>)
 80101aa:	4602      	mov	r2, r0
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f003 f8dd 	bl	801336c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101b8:	2b05      	cmp	r3, #5
 80101ba:	f200 8215 	bhi.w	80105e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2200      	movs	r2, #0
 80101c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f002 fea9 	bl	8012f1c <tcp_rexmit_rto>
      break;
 80101ca:	e20d      	b.n	80105e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80101cc:	4b81      	ldr	r3, [pc, #516]	; (80103d4 <tcp_process+0x590>)
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	f003 0310 	and.w	r3, r3, #16
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	f000 80a1 	beq.w	801031c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101da:	4b7f      	ldr	r3, [pc, #508]	; (80103d8 <tcp_process+0x594>)
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	3b01      	subs	r3, #1
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	db7e      	blt.n	80102e8 <tcp_process+0x4a4>
 80101ea:	4b7b      	ldr	r3, [pc, #492]	; (80103d8 <tcp_process+0x594>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	dc77      	bgt.n	80102e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2204      	movs	r2, #4
 80101fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010202:	2b00      	cmp	r3, #0
 8010204:	d102      	bne.n	801020c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010206:	23fa      	movs	r3, #250	; 0xfa
 8010208:	76bb      	strb	r3, [r7, #26]
 801020a:	e01d      	b.n	8010248 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010210:	699b      	ldr	r3, [r3, #24]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d106      	bne.n	8010224 <tcp_process+0x3e0>
 8010216:	4b76      	ldr	r3, [pc, #472]	; (80103f0 <tcp_process+0x5ac>)
 8010218:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801021c:	4975      	ldr	r1, [pc, #468]	; (80103f4 <tcp_process+0x5b0>)
 801021e:	4876      	ldr	r0, [pc, #472]	; (80103f8 <tcp_process+0x5b4>)
 8010220:	f008 fd42 	bl	8018ca8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00a      	beq.n	8010244 <tcp_process+0x400>
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010232:	699b      	ldr	r3, [r3, #24]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	6910      	ldr	r0, [r2, #16]
 8010238:	2200      	movs	r2, #0
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	4798      	blx	r3
 801023e:	4603      	mov	r3, r0
 8010240:	76bb      	strb	r3, [r7, #26]
 8010242:	e001      	b.n	8010248 <tcp_process+0x404>
 8010244:	23f0      	movs	r3, #240	; 0xf0
 8010246:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010248:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00a      	beq.n	8010266 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010250:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010254:	f113 0f0d 	cmn.w	r3, #13
 8010258:	d002      	beq.n	8010260 <tcp_process+0x41c>
              tcp_abort(pcb);
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f7fd fce2 	bl	800dc24 <tcp_abort>
            }
            return ERR_ABRT;
 8010260:	f06f 030c 	mvn.w	r3, #12
 8010264:	e1ce      	b.n	8010604 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fae0 	bl	801082c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801026c:	4b63      	ldr	r3, [pc, #396]	; (80103fc <tcp_process+0x5b8>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d005      	beq.n	8010280 <tcp_process+0x43c>
            recv_acked--;
 8010274:	4b61      	ldr	r3, [pc, #388]	; (80103fc <tcp_process+0x5b8>)
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	3b01      	subs	r3, #1
 801027a:	b29a      	uxth	r2, r3
 801027c:	4b5f      	ldr	r3, [pc, #380]	; (80103fc <tcp_process+0x5b8>)
 801027e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010284:	009a      	lsls	r2, r3, #2
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010290:	428b      	cmp	r3, r1
 8010292:	bf38      	it	cc
 8010294:	460b      	movcc	r3, r1
 8010296:	429a      	cmp	r2, r3
 8010298:	d204      	bcs.n	80102a4 <tcp_process+0x460>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	e00d      	b.n	80102c0 <tcp_process+0x47c>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102a8:	005b      	lsls	r3, r3, #1
 80102aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d904      	bls.n	80102bc <tcp_process+0x478>
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	e001      	b.n	80102c0 <tcp_process+0x47c>
 80102bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80102c6:	4b4e      	ldr	r3, [pc, #312]	; (8010400 <tcp_process+0x5bc>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	f003 0320 	and.w	r3, r3, #32
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d037      	beq.n	8010342 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	8b5b      	ldrh	r3, [r3, #26]
 80102d6:	f043 0302 	orr.w	r3, r3, #2
 80102da:	b29a      	uxth	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2207      	movs	r2, #7
 80102e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80102e6:	e02c      	b.n	8010342 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102e8:	4b3b      	ldr	r3, [pc, #236]	; (80103d8 <tcp_process+0x594>)
 80102ea:	6819      	ldr	r1, [r3, #0]
 80102ec:	4b3b      	ldr	r3, [pc, #236]	; (80103dc <tcp_process+0x598>)
 80102ee:	881b      	ldrh	r3, [r3, #0]
 80102f0:	461a      	mov	r2, r3
 80102f2:	4b3b      	ldr	r3, [pc, #236]	; (80103e0 <tcp_process+0x59c>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f8:	4b3a      	ldr	r3, [pc, #232]	; (80103e4 <tcp_process+0x5a0>)
 80102fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102fc:	885b      	ldrh	r3, [r3, #2]
 80102fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010300:	4a38      	ldr	r2, [pc, #224]	; (80103e4 <tcp_process+0x5a0>)
 8010302:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010304:	8812      	ldrh	r2, [r2, #0]
 8010306:	b292      	uxth	r2, r2
 8010308:	9202      	str	r2, [sp, #8]
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	4b36      	ldr	r3, [pc, #216]	; (80103e8 <tcp_process+0x5a4>)
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	4b36      	ldr	r3, [pc, #216]	; (80103ec <tcp_process+0x5a8>)
 8010312:	4602      	mov	r2, r0
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f003 f829 	bl	801336c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801031a:	e167      	b.n	80105ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801031c:	4b2d      	ldr	r3, [pc, #180]	; (80103d4 <tcp_process+0x590>)
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	f003 0302 	and.w	r3, r3, #2
 8010324:	2b00      	cmp	r3, #0
 8010326:	f000 8161 	beq.w	80105ec <tcp_process+0x7a8>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032e:	1e5a      	subs	r2, r3, #1
 8010330:	4b2b      	ldr	r3, [pc, #172]	; (80103e0 <tcp_process+0x59c>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	429a      	cmp	r2, r3
 8010336:	f040 8159 	bne.w	80105ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f002 fe10 	bl	8012f60 <tcp_rexmit>
      break;
 8010340:	e154      	b.n	80105ec <tcp_process+0x7a8>
 8010342:	e153      	b.n	80105ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 fa71 	bl	801082c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801034a:	4b2d      	ldr	r3, [pc, #180]	; (8010400 <tcp_process+0x5bc>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	f003 0320 	and.w	r3, r3, #32
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 814c 	beq.w	80105f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	8b5b      	ldrh	r3, [r3, #26]
 801035c:	f043 0302 	orr.w	r3, r3, #2
 8010360:	b29a      	uxth	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2207      	movs	r2, #7
 801036a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801036c:	e140      	b.n	80105f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fa5c 	bl	801082c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010374:	4b22      	ldr	r3, [pc, #136]	; (8010400 <tcp_process+0x5bc>)
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	f003 0320 	and.w	r3, r3, #32
 801037c:	2b00      	cmp	r3, #0
 801037e:	d071      	beq.n	8010464 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010380:	4b14      	ldr	r3, [pc, #80]	; (80103d4 <tcp_process+0x590>)
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	f003 0310 	and.w	r3, r3, #16
 8010388:	2b00      	cmp	r3, #0
 801038a:	d060      	beq.n	801044e <tcp_process+0x60a>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010390:	4b11      	ldr	r3, [pc, #68]	; (80103d8 <tcp_process+0x594>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	429a      	cmp	r2, r3
 8010396:	d15a      	bne.n	801044e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801039c:	2b00      	cmp	r3, #0
 801039e:	d156      	bne.n	801044e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	8b5b      	ldrh	r3, [r3, #26]
 80103a4:	f043 0302 	orr.w	r3, r3, #2
 80103a8:	b29a      	uxth	r2, r3
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7fe fdbc 	bl	800ef2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80103b4:	4b13      	ldr	r3, [pc, #76]	; (8010404 <tcp_process+0x5c0>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d105      	bne.n	80103ca <tcp_process+0x586>
 80103be:	4b11      	ldr	r3, [pc, #68]	; (8010404 <tcp_process+0x5c0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	4a0f      	ldr	r2, [pc, #60]	; (8010404 <tcp_process+0x5c0>)
 80103c6:	6013      	str	r3, [r2, #0]
 80103c8:	e02e      	b.n	8010428 <tcp_process+0x5e4>
 80103ca:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <tcp_process+0x5c0>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	617b      	str	r3, [r7, #20]
 80103d0:	e027      	b.n	8010422 <tcp_process+0x5de>
 80103d2:	bf00      	nop
 80103d4:	2000cc70 	.word	0x2000cc70
 80103d8:	2000cc68 	.word	0x2000cc68
 80103dc:	2000cc6e 	.word	0x2000cc6e
 80103e0:	2000cc64 	.word	0x2000cc64
 80103e4:	2000cc54 	.word	0x2000cc54
 80103e8:	200094c8 	.word	0x200094c8
 80103ec:	200094cc 	.word	0x200094cc
 80103f0:	0801b694 	.word	0x0801b694
 80103f4:	0801b934 	.word	0x0801b934
 80103f8:	0801b6e0 	.word	0x0801b6e0
 80103fc:	2000cc6c 	.word	0x2000cc6c
 8010400:	2000cc71 	.word	0x2000cc71
 8010404:	2000cc38 	.word	0x2000cc38
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	429a      	cmp	r2, r3
 8010410:	d104      	bne.n	801041c <tcp_process+0x5d8>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	68da      	ldr	r2, [r3, #12]
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	60da      	str	r2, [r3, #12]
 801041a:	e005      	b.n	8010428 <tcp_process+0x5e4>
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	617b      	str	r3, [r7, #20]
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1ef      	bne.n	8010408 <tcp_process+0x5c4>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	60da      	str	r2, [r3, #12]
 801042e:	4b77      	ldr	r3, [pc, #476]	; (801060c <tcp_process+0x7c8>)
 8010430:	2201      	movs	r2, #1
 8010432:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	220a      	movs	r2, #10
 8010438:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801043a:	4b75      	ldr	r3, [pc, #468]	; (8010610 <tcp_process+0x7cc>)
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	60da      	str	r2, [r3, #12]
 8010442:	4a73      	ldr	r2, [pc, #460]	; (8010610 <tcp_process+0x7cc>)
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	f003 f952 	bl	80136f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801044c:	e0d2      	b.n	80105f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8b5b      	ldrh	r3, [r3, #26]
 8010452:	f043 0302 	orr.w	r3, r3, #2
 8010456:	b29a      	uxth	r2, r3
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2208      	movs	r2, #8
 8010460:	751a      	strb	r2, [r3, #20]
      break;
 8010462:	e0c7      	b.n	80105f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010464:	4b6b      	ldr	r3, [pc, #428]	; (8010614 <tcp_process+0x7d0>)
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	f003 0310 	and.w	r3, r3, #16
 801046c:	2b00      	cmp	r3, #0
 801046e:	f000 80c1 	beq.w	80105f4 <tcp_process+0x7b0>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010476:	4b68      	ldr	r3, [pc, #416]	; (8010618 <tcp_process+0x7d4>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	429a      	cmp	r2, r3
 801047c:	f040 80ba 	bne.w	80105f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010484:	2b00      	cmp	r3, #0
 8010486:	f040 80b5 	bne.w	80105f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2206      	movs	r2, #6
 801048e:	751a      	strb	r2, [r3, #20]
      break;
 8010490:	e0b0      	b.n	80105f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f9ca 	bl	801082c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010498:	4b60      	ldr	r3, [pc, #384]	; (801061c <tcp_process+0x7d8>)
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	f003 0320 	and.w	r3, r3, #32
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f000 80a9 	beq.w	80105f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8b5b      	ldrh	r3, [r3, #26]
 80104aa:	f043 0302 	orr.w	r3, r3, #2
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7fe fd39 	bl	800ef2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80104ba:	4b59      	ldr	r3, [pc, #356]	; (8010620 <tcp_process+0x7dc>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d105      	bne.n	80104d0 <tcp_process+0x68c>
 80104c4:	4b56      	ldr	r3, [pc, #344]	; (8010620 <tcp_process+0x7dc>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	4a55      	ldr	r2, [pc, #340]	; (8010620 <tcp_process+0x7dc>)
 80104cc:	6013      	str	r3, [r2, #0]
 80104ce:	e013      	b.n	80104f8 <tcp_process+0x6b4>
 80104d0:	4b53      	ldr	r3, [pc, #332]	; (8010620 <tcp_process+0x7dc>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	613b      	str	r3, [r7, #16]
 80104d6:	e00c      	b.n	80104f2 <tcp_process+0x6ae>
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d104      	bne.n	80104ec <tcp_process+0x6a8>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	68da      	ldr	r2, [r3, #12]
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	60da      	str	r2, [r3, #12]
 80104ea:	e005      	b.n	80104f8 <tcp_process+0x6b4>
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	613b      	str	r3, [r7, #16]
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1ef      	bne.n	80104d8 <tcp_process+0x694>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	4b43      	ldr	r3, [pc, #268]	; (801060c <tcp_process+0x7c8>)
 8010500:	2201      	movs	r2, #1
 8010502:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	220a      	movs	r2, #10
 8010508:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801050a:	4b41      	ldr	r3, [pc, #260]	; (8010610 <tcp_process+0x7cc>)
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	60da      	str	r2, [r3, #12]
 8010512:	4a3f      	ldr	r2, [pc, #252]	; (8010610 <tcp_process+0x7cc>)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6013      	str	r3, [r2, #0]
 8010518:	f003 f8ea 	bl	80136f0 <tcp_timer_needed>
      }
      break;
 801051c:	e06c      	b.n	80105f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f984 	bl	801082c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010524:	4b3b      	ldr	r3, [pc, #236]	; (8010614 <tcp_process+0x7d0>)
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	f003 0310 	and.w	r3, r3, #16
 801052c:	2b00      	cmp	r3, #0
 801052e:	d065      	beq.n	80105fc <tcp_process+0x7b8>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010534:	4b38      	ldr	r3, [pc, #224]	; (8010618 <tcp_process+0x7d4>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	429a      	cmp	r2, r3
 801053a:	d15f      	bne.n	80105fc <tcp_process+0x7b8>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d15b      	bne.n	80105fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7fe fcf1 	bl	800ef2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801054a:	4b35      	ldr	r3, [pc, #212]	; (8010620 <tcp_process+0x7dc>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	429a      	cmp	r2, r3
 8010552:	d105      	bne.n	8010560 <tcp_process+0x71c>
 8010554:	4b32      	ldr	r3, [pc, #200]	; (8010620 <tcp_process+0x7dc>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	68db      	ldr	r3, [r3, #12]
 801055a:	4a31      	ldr	r2, [pc, #196]	; (8010620 <tcp_process+0x7dc>)
 801055c:	6013      	str	r3, [r2, #0]
 801055e:	e013      	b.n	8010588 <tcp_process+0x744>
 8010560:	4b2f      	ldr	r3, [pc, #188]	; (8010620 <tcp_process+0x7dc>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	60fb      	str	r3, [r7, #12]
 8010566:	e00c      	b.n	8010582 <tcp_process+0x73e>
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	68db      	ldr	r3, [r3, #12]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	429a      	cmp	r2, r3
 8010570:	d104      	bne.n	801057c <tcp_process+0x738>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	68da      	ldr	r2, [r3, #12]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	60da      	str	r2, [r3, #12]
 801057a:	e005      	b.n	8010588 <tcp_process+0x744>
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	68db      	ldr	r3, [r3, #12]
 8010580:	60fb      	str	r3, [r7, #12]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1ef      	bne.n	8010568 <tcp_process+0x724>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	60da      	str	r2, [r3, #12]
 801058e:	4b1f      	ldr	r3, [pc, #124]	; (801060c <tcp_process+0x7c8>)
 8010590:	2201      	movs	r2, #1
 8010592:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	220a      	movs	r2, #10
 8010598:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801059a:	4b1d      	ldr	r3, [pc, #116]	; (8010610 <tcp_process+0x7cc>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60da      	str	r2, [r3, #12]
 80105a2:	4a1b      	ldr	r2, [pc, #108]	; (8010610 <tcp_process+0x7cc>)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6013      	str	r3, [r2, #0]
 80105a8:	f003 f8a2 	bl	80136f0 <tcp_timer_needed>
      }
      break;
 80105ac:	e026      	b.n	80105fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f000 f93c 	bl	801082c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80105b4:	4b17      	ldr	r3, [pc, #92]	; (8010614 <tcp_process+0x7d0>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f003 0310 	and.w	r3, r3, #16
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d01f      	beq.n	8010600 <tcp_process+0x7bc>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105c4:	4b14      	ldr	r3, [pc, #80]	; (8010618 <tcp_process+0x7d4>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d119      	bne.n	8010600 <tcp_process+0x7bc>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d115      	bne.n	8010600 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80105d4:	4b11      	ldr	r3, [pc, #68]	; (801061c <tcp_process+0x7d8>)
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	f043 0310 	orr.w	r3, r3, #16
 80105dc:	b2da      	uxtb	r2, r3
 80105de:	4b0f      	ldr	r3, [pc, #60]	; (801061c <tcp_process+0x7d8>)
 80105e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80105e2:	e00d      	b.n	8010600 <tcp_process+0x7bc>
    default:
      break;
 80105e4:	bf00      	nop
 80105e6:	e00c      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105e8:	bf00      	nop
 80105ea:	e00a      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105ec:	bf00      	nop
 80105ee:	e008      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105f0:	bf00      	nop
 80105f2:	e006      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105f4:	bf00      	nop
 80105f6:	e004      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105f8:	bf00      	nop
 80105fa:	e002      	b.n	8010602 <tcp_process+0x7be>
      break;
 80105fc:	bf00      	nop
 80105fe:	e000      	b.n	8010602 <tcp_process+0x7be>
      break;
 8010600:	bf00      	nop
  }
  return ERR_OK;
 8010602:	2300      	movs	r3, #0
}
 8010604:	4618      	mov	r0, r3
 8010606:	3724      	adds	r7, #36	; 0x24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd90      	pop	{r4, r7, pc}
 801060c:	2000cc40 	.word	0x2000cc40
 8010610:	2000cc3c 	.word	0x2000cc3c
 8010614:	2000cc70 	.word	0x2000cc70
 8010618:	2000cc68 	.word	0x2000cc68
 801061c:	2000cc71 	.word	0x2000cc71
 8010620:	2000cc38 	.word	0x2000cc38

08010624 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010624:	b590      	push	{r4, r7, lr}
 8010626:	b085      	sub	sp, #20
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d106      	bne.n	8010642 <tcp_oos_insert_segment+0x1e>
 8010634:	4b3b      	ldr	r3, [pc, #236]	; (8010724 <tcp_oos_insert_segment+0x100>)
 8010636:	f240 421f 	movw	r2, #1055	; 0x41f
 801063a:	493b      	ldr	r1, [pc, #236]	; (8010728 <tcp_oos_insert_segment+0x104>)
 801063c:	483b      	ldr	r0, [pc, #236]	; (801072c <tcp_oos_insert_segment+0x108>)
 801063e:	f008 fb33 	bl	8018ca8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	b29b      	uxth	r3, r3
 801064a:	4618      	mov	r0, r3
 801064c:	f7fb f8e4 	bl	800b818 <lwip_htons>
 8010650:	4603      	mov	r3, r0
 8010652:	b2db      	uxtb	r3, r3
 8010654:	f003 0301 	and.w	r3, r3, #1
 8010658:	2b00      	cmp	r3, #0
 801065a:	d028      	beq.n	80106ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801065c:	6838      	ldr	r0, [r7, #0]
 801065e:	f7fe f9ad 	bl	800e9bc <tcp_segs_free>
    next = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	603b      	str	r3, [r7, #0]
 8010666:	e056      	b.n	8010716 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010668:	683b      	ldr	r3, [r7, #0]
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	899b      	ldrh	r3, [r3, #12]
 801066e:	b29b      	uxth	r3, r3
 8010670:	4618      	mov	r0, r3
 8010672:	f7fb f8d1 	bl	800b818 <lwip_htons>
 8010676:	4603      	mov	r3, r0
 8010678:	b2db      	uxtb	r3, r3
 801067a:	f003 0301 	and.w	r3, r3, #1
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00d      	beq.n	801069e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	899b      	ldrh	r3, [r3, #12]
 8010688:	b29c      	uxth	r4, r3
 801068a:	2001      	movs	r0, #1
 801068c:	f7fb f8c4 	bl	800b818 <lwip_htons>
 8010690:	4603      	mov	r3, r0
 8010692:	461a      	mov	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	68db      	ldr	r3, [r3, #12]
 8010698:	4322      	orrs	r2, r4
 801069a:	b292      	uxth	r2, r2
 801069c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801069e:	683b      	ldr	r3, [r7, #0]
 80106a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7fe f99c 	bl	800e9e6 <tcp_seg_free>
    while (next &&
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d00e      	beq.n	80106d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	891b      	ldrh	r3, [r3, #8]
 80106b8:	461a      	mov	r2, r3
 80106ba:	4b1d      	ldr	r3, [pc, #116]	; (8010730 <tcp_oos_insert_segment+0x10c>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	441a      	add	r2, r3
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	6839      	ldr	r1, [r7, #0]
 80106c8:	8909      	ldrh	r1, [r1, #8]
 80106ca:	440b      	add	r3, r1
 80106cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	daca      	bge.n	8010668 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d01e      	beq.n	8010716 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	891b      	ldrh	r3, [r3, #8]
 80106dc:	461a      	mov	r2, r3
 80106de:	4b14      	ldr	r3, [pc, #80]	; (8010730 <tcp_oos_insert_segment+0x10c>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	441a      	add	r2, r3
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	68db      	ldr	r3, [r3, #12]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	dd12      	ble.n	8010716 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	68db      	ldr	r3, [r3, #12]
 80106f4:	685b      	ldr	r3, [r3, #4]
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	4b0d      	ldr	r3, [pc, #52]	; (8010730 <tcp_oos_insert_segment+0x10c>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	1ad3      	subs	r3, r2, r3
 8010700:	b29a      	uxth	r2, r3
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685a      	ldr	r2, [r3, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	891b      	ldrh	r3, [r3, #8]
 801070e:	4619      	mov	r1, r3
 8010710:	4610      	mov	r0, r2
 8010712:	f7fc faf9 	bl	800cd08 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	683a      	ldr	r2, [r7, #0]
 801071a:	601a      	str	r2, [r3, #0]
}
 801071c:	bf00      	nop
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	bd90      	pop	{r4, r7, pc}
 8010724:	0801b694 	.word	0x0801b694
 8010728:	0801b954 	.word	0x0801b954
 801072c:	0801b6e0 	.word	0x0801b6e0
 8010730:	2000cc64 	.word	0x2000cc64

08010734 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010734:	b5b0      	push	{r4, r5, r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010742:	e03e      	b.n	80107c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	4618      	mov	r0, r3
 8010754:	f7fc fcec 	bl	800d130 <pbuf_clen>
 8010758:	4603      	mov	r3, r0
 801075a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010762:	8a7a      	ldrh	r2, [r7, #18]
 8010764:	429a      	cmp	r2, r3
 8010766:	d906      	bls.n	8010776 <tcp_free_acked_segments+0x42>
 8010768:	4b2a      	ldr	r3, [pc, #168]	; (8010814 <tcp_free_acked_segments+0xe0>)
 801076a:	f240 4257 	movw	r2, #1111	; 0x457
 801076e:	492a      	ldr	r1, [pc, #168]	; (8010818 <tcp_free_acked_segments+0xe4>)
 8010770:	482a      	ldr	r0, [pc, #168]	; (801081c <tcp_free_acked_segments+0xe8>)
 8010772:	f008 fa99 	bl	8018ca8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801077c:	8a7b      	ldrh	r3, [r7, #18]
 801077e:	1ad3      	subs	r3, r2, r3
 8010780:	b29a      	uxth	r2, r3
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	891a      	ldrh	r2, [r3, #8]
 801078c:	4b24      	ldr	r3, [pc, #144]	; (8010820 <tcp_free_acked_segments+0xec>)
 801078e:	881b      	ldrh	r3, [r3, #0]
 8010790:	4413      	add	r3, r2
 8010792:	b29a      	uxth	r2, r3
 8010794:	4b22      	ldr	r3, [pc, #136]	; (8010820 <tcp_free_acked_segments+0xec>)
 8010796:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010798:	6978      	ldr	r0, [r7, #20]
 801079a:	f7fe f924 	bl	800e9e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00c      	beq.n	80107c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d109      	bne.n	80107c2 <tcp_free_acked_segments+0x8e>
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d106      	bne.n	80107c2 <tcp_free_acked_segments+0x8e>
 80107b4:	4b17      	ldr	r3, [pc, #92]	; (8010814 <tcp_free_acked_segments+0xe0>)
 80107b6:	f240 4261 	movw	r2, #1121	; 0x461
 80107ba:	491a      	ldr	r1, [pc, #104]	; (8010824 <tcp_free_acked_segments+0xf0>)
 80107bc:	4817      	ldr	r0, [pc, #92]	; (801081c <tcp_free_acked_segments+0xe8>)
 80107be:	f008 fa73 	bl	8018ca8 <iprintf>
  while (seg_list != NULL &&
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d020      	beq.n	801080a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	68db      	ldr	r3, [r3, #12]
 80107cc:	685b      	ldr	r3, [r3, #4]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7fb f837 	bl	800b842 <lwip_htonl>
 80107d4:	4604      	mov	r4, r0
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	891b      	ldrh	r3, [r3, #8]
 80107da:	461d      	mov	r5, r3
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	899b      	ldrh	r3, [r3, #12]
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	4618      	mov	r0, r3
 80107e6:	f7fb f817 	bl	800b818 <lwip_htons>
 80107ea:	4603      	mov	r3, r0
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	f003 0303 	and.w	r3, r3, #3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d001      	beq.n	80107fa <tcp_free_acked_segments+0xc6>
 80107f6:	2301      	movs	r3, #1
 80107f8:	e000      	b.n	80107fc <tcp_free_acked_segments+0xc8>
 80107fa:	2300      	movs	r3, #0
 80107fc:	442b      	add	r3, r5
 80107fe:	18e2      	adds	r2, r4, r3
 8010800:	4b09      	ldr	r3, [pc, #36]	; (8010828 <tcp_free_acked_segments+0xf4>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010806:	2b00      	cmp	r3, #0
 8010808:	dd9c      	ble.n	8010744 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801080a:	68bb      	ldr	r3, [r7, #8]
}
 801080c:	4618      	mov	r0, r3
 801080e:	3718      	adds	r7, #24
 8010810:	46bd      	mov	sp, r7
 8010812:	bdb0      	pop	{r4, r5, r7, pc}
 8010814:	0801b694 	.word	0x0801b694
 8010818:	0801b97c 	.word	0x0801b97c
 801081c:	0801b6e0 	.word	0x0801b6e0
 8010820:	2000cc6c 	.word	0x2000cc6c
 8010824:	0801b9a4 	.word	0x0801b9a4
 8010828:	2000cc68 	.word	0x2000cc68

0801082c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801082c:	b5b0      	push	{r4, r5, r7, lr}
 801082e:	b094      	sub	sp, #80	; 0x50
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d106      	bne.n	801084c <tcp_receive+0x20>
 801083e:	4b91      	ldr	r3, [pc, #580]	; (8010a84 <tcp_receive+0x258>)
 8010840:	f240 427b 	movw	r2, #1147	; 0x47b
 8010844:	4990      	ldr	r1, [pc, #576]	; (8010a88 <tcp_receive+0x25c>)
 8010846:	4891      	ldr	r0, [pc, #580]	; (8010a8c <tcp_receive+0x260>)
 8010848:	f008 fa2e 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	2b03      	cmp	r3, #3
 8010852:	d806      	bhi.n	8010862 <tcp_receive+0x36>
 8010854:	4b8b      	ldr	r3, [pc, #556]	; (8010a84 <tcp_receive+0x258>)
 8010856:	f240 427c 	movw	r2, #1148	; 0x47c
 801085a:	498d      	ldr	r1, [pc, #564]	; (8010a90 <tcp_receive+0x264>)
 801085c:	488b      	ldr	r0, [pc, #556]	; (8010a8c <tcp_receive+0x260>)
 801085e:	f008 fa23 	bl	8018ca8 <iprintf>

  if (flags & TCP_ACK) {
 8010862:	4b8c      	ldr	r3, [pc, #560]	; (8010a94 <tcp_receive+0x268>)
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	f003 0310 	and.w	r3, r3, #16
 801086a:	2b00      	cmp	r3, #0
 801086c:	f000 8264 	beq.w	8010d38 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010876:	461a      	mov	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801087c:	4413      	add	r3, r2
 801087e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010884:	4b84      	ldr	r3, [pc, #528]	; (8010a98 <tcp_receive+0x26c>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	2b00      	cmp	r3, #0
 801088c:	db1b      	blt.n	80108c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010892:	4b81      	ldr	r3, [pc, #516]	; (8010a98 <tcp_receive+0x26c>)
 8010894:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010896:	429a      	cmp	r2, r3
 8010898:	d106      	bne.n	80108a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801089e:	4b7f      	ldr	r3, [pc, #508]	; (8010a9c <tcp_receive+0x270>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	db0e      	blt.n	80108c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80108ac:	4b7b      	ldr	r3, [pc, #492]	; (8010a9c <tcp_receive+0x270>)
 80108ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d125      	bne.n	8010900 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80108b4:	4b7a      	ldr	r3, [pc, #488]	; (8010aa0 <tcp_receive+0x274>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	89db      	ldrh	r3, [r3, #14]
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d91c      	bls.n	8010900 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80108c6:	4b76      	ldr	r3, [pc, #472]	; (8010aa0 <tcp_receive+0x274>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	89db      	ldrh	r3, [r3, #14]
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d205      	bcs.n	80108f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80108f0:	4b69      	ldr	r3, [pc, #420]	; (8010a98 <tcp_receive+0x26c>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80108f8:	4b68      	ldr	r3, [pc, #416]	; (8010a9c <tcp_receive+0x270>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010900:	4b66      	ldr	r3, [pc, #408]	; (8010a9c <tcp_receive+0x270>)
 8010902:	681a      	ldr	r2, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010908:	1ad3      	subs	r3, r2, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	dc58      	bgt.n	80109c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801090e:	4b65      	ldr	r3, [pc, #404]	; (8010aa4 <tcp_receive+0x278>)
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d14b      	bne.n	80109ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010920:	4413      	add	r3, r2
 8010922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010924:	429a      	cmp	r2, r3
 8010926:	d142      	bne.n	80109ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801092e:	2b00      	cmp	r3, #0
 8010930:	db3d      	blt.n	80109ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010936:	4b59      	ldr	r3, [pc, #356]	; (8010a9c <tcp_receive+0x270>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	d137      	bne.n	80109ae <tcp_receive+0x182>
              found_dupack = 1;
 801093e:	2301      	movs	r3, #1
 8010940:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010948:	2bff      	cmp	r3, #255	; 0xff
 801094a:	d007      	beq.n	801095c <tcp_receive+0x130>
                ++pcb->dupacks;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010952:	3301      	adds	r3, #1
 8010954:	b2da      	uxtb	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010962:	2b03      	cmp	r3, #3
 8010964:	d91b      	bls.n	801099e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010970:	4413      	add	r3, r2
 8010972:	b29a      	uxth	r2, r3
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801097a:	429a      	cmp	r2, r3
 801097c:	d30a      	bcc.n	8010994 <tcp_receive+0x168>
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010988:	4413      	add	r3, r2
 801098a:	b29a      	uxth	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010992:	e004      	b.n	801099e <tcp_receive+0x172>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801099a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80109a4:	2b02      	cmp	r3, #2
 80109a6:	d902      	bls.n	80109ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f002 fb45 	bl	8013038 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80109ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f040 8161 	bne.w	8010c78 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2200      	movs	r2, #0
 80109ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80109be:	e15b      	b.n	8010c78 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80109c0:	4b36      	ldr	r3, [pc, #216]	; (8010a9c <tcp_receive+0x270>)
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	3b01      	subs	r3, #1
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f2c0 814e 	blt.w	8010c6e <tcp_receive+0x442>
 80109d2:	4b32      	ldr	r3, [pc, #200]	; (8010a9c <tcp_receive+0x270>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f300 8146 	bgt.w	8010c6e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8b5b      	ldrh	r3, [r3, #26]
 80109e6:	f003 0304 	and.w	r3, r3, #4
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d010      	beq.n	8010a10 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	8b5b      	ldrh	r3, [r3, #26]
 80109f2:	f023 0304 	bic.w	r3, r3, #4
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010a1e:	10db      	asrs	r3, r3, #3
 8010a20:	b21b      	sxth	r3, r3
 8010a22:	b29a      	uxth	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	4413      	add	r3, r2
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	b21a      	sxth	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010a38:	4b18      	ldr	r3, [pc, #96]	; (8010a9c <tcp_receive+0x270>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010a50:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <tcp_receive+0x270>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	7d1b      	ldrb	r3, [r3, #20]
 8010a5c:	2b03      	cmp	r3, #3
 8010a5e:	f240 8097 	bls.w	8010b90 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d245      	bcs.n	8010afe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	8b5b      	ldrh	r3, [r3, #26]
 8010a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d014      	beq.n	8010aa8 <tcp_receive+0x27c>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	e013      	b.n	8010aaa <tcp_receive+0x27e>
 8010a82:	bf00      	nop
 8010a84:	0801b694 	.word	0x0801b694
 8010a88:	0801b9c4 	.word	0x0801b9c4
 8010a8c:	0801b6e0 	.word	0x0801b6e0
 8010a90:	0801b9e0 	.word	0x0801b9e0
 8010a94:	2000cc70 	.word	0x2000cc70
 8010a98:	2000cc64 	.word	0x2000cc64
 8010a9c:	2000cc68 	.word	0x2000cc68
 8010aa0:	2000cc54 	.word	0x2000cc54
 8010aa4:	2000cc6e 	.word	0x2000cc6e
 8010aa8:	2302      	movs	r3, #2
 8010aaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010aae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ab8:	fb12 f303 	smulbb	r3, r2, r3
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	bf28      	it	cs
 8010ac4:	4613      	movcs	r3, r2
 8010ac6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ad0:	4413      	add	r3, r2
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d309      	bcc.n	8010af2 <tcp_receive+0x2c6>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010ae6:	4413      	add	r3, r2
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010af0:	e04e      	b.n	8010b90 <tcp_receive+0x364>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010af8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010afc:	e048      	b.n	8010b90 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b06:	4413      	add	r3, r2
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d309      	bcc.n	8010b28 <tcp_receive+0x2fc>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b1c:	4413      	add	r3, r2
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010b26:	e004      	b.n	8010b32 <tcp_receive+0x306>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d326      	bcc.n	8010b90 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b62:	4413      	add	r3, r2
 8010b64:	b29a      	uxth	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d30a      	bcc.n	8010b86 <tcp_receive+0x35a>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b7a:	4413      	add	r3, r2
 8010b7c:	b29a      	uxth	r2, r3
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010b84:	e004      	b.n	8010b90 <tcp_receive+0x364>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b8c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b98:	4a98      	ldr	r2, [pc, #608]	; (8010dfc <tcp_receive+0x5d0>)
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff fdca 	bl	8010734 <tcp_free_acked_segments>
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bae:	4a94      	ldr	r2, [pc, #592]	; (8010e00 <tcp_receive+0x5d4>)
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f7ff fdbf 	bl	8010734 <tcp_free_acked_segments>
 8010bb6:	4602      	mov	r2, r0
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d104      	bne.n	8010bce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bca:	861a      	strh	r2, [r3, #48]	; 0x30
 8010bcc:	e002      	b.n	8010bd4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d103      	bne.n	8010bea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010bf0:	4b84      	ldr	r3, [pc, #528]	; (8010e04 <tcp_receive+0x5d8>)
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	4413      	add	r3, r2
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	8b5b      	ldrh	r3, [r3, #26]
 8010c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d035      	beq.n	8010c76 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d118      	bne.n	8010c44 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00c      	beq.n	8010c34 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fa fe0b 	bl	800b842 <lwip_htonl>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dc20      	bgt.n	8010c76 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	8b5b      	ldrh	r3, [r3, #26]
 8010c38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c42:	e018      	b.n	8010c76 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fa fdf6 	bl	800b842 <lwip_htonl>
 8010c56:	4603      	mov	r3, r0
 8010c58:	1ae3      	subs	r3, r4, r3
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	dc0b      	bgt.n	8010c76 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	8b5b      	ldrh	r3, [r3, #26]
 8010c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c6c:	e003      	b.n	8010c76 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f002 fbce 	bl	8013410 <tcp_send_empty_ack>
 8010c74:	e000      	b.n	8010c78 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c76:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d05b      	beq.n	8010d38 <tcp_receive+0x50c>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c84:	4b60      	ldr	r3, [pc, #384]	; (8010e08 <tcp_receive+0x5dc>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	da54      	bge.n	8010d38 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010c8e:	4b5f      	ldr	r3, [pc, #380]	; (8010e0c <tcp_receive+0x5e0>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010ca2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cac:	10db      	asrs	r3, r3, #3
 8010cae:	b21b      	sxth	r3, r3
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	b29b      	uxth	r3, r3
 8010cb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cc6:	4413      	add	r3, r2
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	b21a      	sxth	r2, r3
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010cd0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	da05      	bge.n	8010ce4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010cdc:	425b      	negs	r3, r3
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010ce4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010cee:	109b      	asrs	r3, r3, #2
 8010cf0:	b21b      	sxth	r3, r3
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010d08:	4413      	add	r3, r2
 8010d0a:	b29b      	uxth	r3, r3
 8010d0c:	b21a      	sxth	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010d18:	10db      	asrs	r3, r3, #3
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	b29a      	uxth	r2, r3
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	4413      	add	r3, r2
 8010d28:	b29b      	uxth	r3, r3
 8010d2a:	b21a      	sxth	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010d38:	4b35      	ldr	r3, [pc, #212]	; (8010e10 <tcp_receive+0x5e4>)
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	f000 84e2 	beq.w	8011706 <tcp_receive+0xeda>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	7d1b      	ldrb	r3, [r3, #20]
 8010d46:	2b06      	cmp	r3, #6
 8010d48:	f200 84dd 	bhi.w	8011706 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d50:	4b30      	ldr	r3, [pc, #192]	; (8010e14 <tcp_receive+0x5e8>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1ad3      	subs	r3, r2, r3
 8010d56:	3b01      	subs	r3, #1
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f2c0 808f 	blt.w	8010e7c <tcp_receive+0x650>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d62:	4b2b      	ldr	r3, [pc, #172]	; (8010e10 <tcp_receive+0x5e4>)
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	4619      	mov	r1, r3
 8010d68:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <tcp_receive+0x5e8>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	440b      	add	r3, r1
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	3301      	adds	r3, #1
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f300 8082 	bgt.w	8010e7c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010d78:	4b27      	ldr	r3, [pc, #156]	; (8010e18 <tcp_receive+0x5ec>)
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <tcp_receive+0x5e8>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010d8a:	4b23      	ldr	r3, [pc, #140]	; (8010e18 <tcp_receive+0x5ec>)
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <tcp_receive+0x574>
 8010d92:	4b22      	ldr	r3, [pc, #136]	; (8010e1c <tcp_receive+0x5f0>)
 8010d94:	f240 5294 	movw	r2, #1428	; 0x594
 8010d98:	4921      	ldr	r1, [pc, #132]	; (8010e20 <tcp_receive+0x5f4>)
 8010d9a:	4822      	ldr	r0, [pc, #136]	; (8010e24 <tcp_receive+0x5f8>)
 8010d9c:	f007 ff84 	bl	8018ca8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010da6:	4293      	cmp	r3, r2
 8010da8:	d906      	bls.n	8010db8 <tcp_receive+0x58c>
 8010daa:	4b1c      	ldr	r3, [pc, #112]	; (8010e1c <tcp_receive+0x5f0>)
 8010dac:	f240 5295 	movw	r2, #1429	; 0x595
 8010db0:	491d      	ldr	r1, [pc, #116]	; (8010e28 <tcp_receive+0x5fc>)
 8010db2:	481c      	ldr	r0, [pc, #112]	; (8010e24 <tcp_receive+0x5f8>)
 8010db4:	f007 ff78 	bl	8018ca8 <iprintf>
      off = (u16_t)off32;
 8010db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010dbe:	4b16      	ldr	r3, [pc, #88]	; (8010e18 <tcp_receive+0x5ec>)
 8010dc0:	685b      	ldr	r3, [r3, #4]
 8010dc2:	891b      	ldrh	r3, [r3, #8]
 8010dc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d906      	bls.n	8010dda <tcp_receive+0x5ae>
 8010dcc:	4b13      	ldr	r3, [pc, #76]	; (8010e1c <tcp_receive+0x5f0>)
 8010dce:	f240 5297 	movw	r2, #1431	; 0x597
 8010dd2:	4916      	ldr	r1, [pc, #88]	; (8010e2c <tcp_receive+0x600>)
 8010dd4:	4813      	ldr	r0, [pc, #76]	; (8010e24 <tcp_receive+0x5f8>)
 8010dd6:	f007 ff67 	bl	8018ca8 <iprintf>
      inseg.len -= off;
 8010dda:	4b0f      	ldr	r3, [pc, #60]	; (8010e18 <tcp_receive+0x5ec>)
 8010ddc:	891a      	ldrh	r2, [r3, #8]
 8010dde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010de2:	1ad3      	subs	r3, r2, r3
 8010de4:	b29a      	uxth	r2, r3
 8010de6:	4b0c      	ldr	r3, [pc, #48]	; (8010e18 <tcp_receive+0x5ec>)
 8010de8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010dea:	4b0b      	ldr	r3, [pc, #44]	; (8010e18 <tcp_receive+0x5ec>)
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	891a      	ldrh	r2, [r3, #8]
 8010df0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010df8:	e02a      	b.n	8010e50 <tcp_receive+0x624>
 8010dfa:	bf00      	nop
 8010dfc:	0801b9fc 	.word	0x0801b9fc
 8010e00:	0801ba04 	.word	0x0801ba04
 8010e04:	2000cc6c 	.word	0x2000cc6c
 8010e08:	2000cc68 	.word	0x2000cc68
 8010e0c:	2000cc2c 	.word	0x2000cc2c
 8010e10:	2000cc6e 	.word	0x2000cc6e
 8010e14:	2000cc64 	.word	0x2000cc64
 8010e18:	2000cc44 	.word	0x2000cc44
 8010e1c:	0801b694 	.word	0x0801b694
 8010e20:	0801ba0c 	.word	0x0801ba0c
 8010e24:	0801b6e0 	.word	0x0801b6e0
 8010e28:	0801ba1c 	.word	0x0801ba1c
 8010e2c:	0801ba2c 	.word	0x0801ba2c
        off -= p->len;
 8010e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e32:	895b      	ldrh	r3, [r3, #10]
 8010e34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e38:	1ad3      	subs	r3, r2, r3
 8010e3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e40:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e42:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e46:	2200      	movs	r2, #0
 8010e48:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e52:	895b      	ldrh	r3, [r3, #10]
 8010e54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d8e9      	bhi.n	8010e30 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010e5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e60:	4619      	mov	r1, r3
 8010e62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010e64:	f7fc f850 	bl	800cf08 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6c:	4a91      	ldr	r2, [pc, #580]	; (80110b4 <tcp_receive+0x888>)
 8010e6e:	6013      	str	r3, [r2, #0]
 8010e70:	4b91      	ldr	r3, [pc, #580]	; (80110b8 <tcp_receive+0x88c>)
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	4a8f      	ldr	r2, [pc, #572]	; (80110b4 <tcp_receive+0x888>)
 8010e76:	6812      	ldr	r2, [r2, #0]
 8010e78:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e7a:	e00d      	b.n	8010e98 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010e7c:	4b8d      	ldr	r3, [pc, #564]	; (80110b4 <tcp_receive+0x888>)
 8010e7e:	681a      	ldr	r2, [r3, #0]
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	da06      	bge.n	8010e98 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	8b5b      	ldrh	r3, [r3, #26]
 8010e8e:	f043 0302 	orr.w	r3, r3, #2
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010e98:	4b86      	ldr	r3, [pc, #536]	; (80110b4 <tcp_receive+0x888>)
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f2c0 842a 	blt.w	80116fc <tcp_receive+0xed0>
 8010ea8:	4b82      	ldr	r3, [pc, #520]	; (80110b4 <tcp_receive+0x888>)
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb0:	6879      	ldr	r1, [r7, #4]
 8010eb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010eb4:	440b      	add	r3, r1
 8010eb6:	1ad3      	subs	r3, r2, r3
 8010eb8:	3301      	adds	r3, #1
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f300 841e 	bgt.w	80116fc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ec4:	4b7b      	ldr	r3, [pc, #492]	; (80110b4 <tcp_receive+0x888>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	f040 829a 	bne.w	8011402 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010ece:	4b7a      	ldr	r3, [pc, #488]	; (80110b8 <tcp_receive+0x88c>)
 8010ed0:	891c      	ldrh	r4, [r3, #8]
 8010ed2:	4b79      	ldr	r3, [pc, #484]	; (80110b8 <tcp_receive+0x88c>)
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	899b      	ldrh	r3, [r3, #12]
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	4618      	mov	r0, r3
 8010edc:	f7fa fc9c 	bl	800b818 <lwip_htons>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	f003 0303 	and.w	r3, r3, #3
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d001      	beq.n	8010ef0 <tcp_receive+0x6c4>
 8010eec:	2301      	movs	r3, #1
 8010eee:	e000      	b.n	8010ef2 <tcp_receive+0x6c6>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	4423      	add	r3, r4
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	4b71      	ldr	r3, [pc, #452]	; (80110bc <tcp_receive+0x890>)
 8010ef8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010efe:	4b6f      	ldr	r3, [pc, #444]	; (80110bc <tcp_receive+0x890>)
 8010f00:	881b      	ldrh	r3, [r3, #0]
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d275      	bcs.n	8010ff2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010f06:	4b6c      	ldr	r3, [pc, #432]	; (80110b8 <tcp_receive+0x88c>)
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	899b      	ldrh	r3, [r3, #12]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fa fc82 	bl	800b818 <lwip_htons>
 8010f14:	4603      	mov	r3, r0
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	f003 0301 	and.w	r3, r3, #1
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d01f      	beq.n	8010f60 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010f20:	4b65      	ldr	r3, [pc, #404]	; (80110b8 <tcp_receive+0x88c>)
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	899b      	ldrh	r3, [r3, #12]
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	b21b      	sxth	r3, r3
 8010f2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f2e:	b21c      	sxth	r4, r3
 8010f30:	4b61      	ldr	r3, [pc, #388]	; (80110b8 <tcp_receive+0x88c>)
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	899b      	ldrh	r3, [r3, #12]
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f7fa fc6d 	bl	800b818 <lwip_htons>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f48:	b29b      	uxth	r3, r3
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fa fc64 	bl	800b818 <lwip_htons>
 8010f50:	4603      	mov	r3, r0
 8010f52:	b21b      	sxth	r3, r3
 8010f54:	4323      	orrs	r3, r4
 8010f56:	b21a      	sxth	r2, r3
 8010f58:	4b57      	ldr	r3, [pc, #348]	; (80110b8 <tcp_receive+0x88c>)
 8010f5a:	68db      	ldr	r3, [r3, #12]
 8010f5c:	b292      	uxth	r2, r2
 8010f5e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f64:	4b54      	ldr	r3, [pc, #336]	; (80110b8 <tcp_receive+0x88c>)
 8010f66:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010f68:	4b53      	ldr	r3, [pc, #332]	; (80110b8 <tcp_receive+0x88c>)
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	899b      	ldrh	r3, [r3, #12]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fa fc51 	bl	800b818 <lwip_htons>
 8010f76:	4603      	mov	r3, r0
 8010f78:	b2db      	uxtb	r3, r3
 8010f7a:	f003 0302 	and.w	r3, r3, #2
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d005      	beq.n	8010f8e <tcp_receive+0x762>
            inseg.len -= 1;
 8010f82:	4b4d      	ldr	r3, [pc, #308]	; (80110b8 <tcp_receive+0x88c>)
 8010f84:	891b      	ldrh	r3, [r3, #8]
 8010f86:	3b01      	subs	r3, #1
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	4b4b      	ldr	r3, [pc, #300]	; (80110b8 <tcp_receive+0x88c>)
 8010f8c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010f8e:	4b4a      	ldr	r3, [pc, #296]	; (80110b8 <tcp_receive+0x88c>)
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	4a49      	ldr	r2, [pc, #292]	; (80110b8 <tcp_receive+0x88c>)
 8010f94:	8912      	ldrh	r2, [r2, #8]
 8010f96:	4611      	mov	r1, r2
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7fb feb5 	bl	800cd08 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010f9e:	4b46      	ldr	r3, [pc, #280]	; (80110b8 <tcp_receive+0x88c>)
 8010fa0:	891c      	ldrh	r4, [r3, #8]
 8010fa2:	4b45      	ldr	r3, [pc, #276]	; (80110b8 <tcp_receive+0x88c>)
 8010fa4:	68db      	ldr	r3, [r3, #12]
 8010fa6:	899b      	ldrh	r3, [r3, #12]
 8010fa8:	b29b      	uxth	r3, r3
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fa fc34 	bl	800b818 <lwip_htons>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	f003 0303 	and.w	r3, r3, #3
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <tcp_receive+0x794>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e000      	b.n	8010fc2 <tcp_receive+0x796>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4423      	add	r3, r4
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	4b3d      	ldr	r3, [pc, #244]	; (80110bc <tcp_receive+0x890>)
 8010fc8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010fca:	4b3c      	ldr	r3, [pc, #240]	; (80110bc <tcp_receive+0x890>)
 8010fcc:	881b      	ldrh	r3, [r3, #0]
 8010fce:	461a      	mov	r2, r3
 8010fd0:	4b38      	ldr	r3, [pc, #224]	; (80110b4 <tcp_receive+0x888>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	441a      	add	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fda:	6879      	ldr	r1, [r7, #4]
 8010fdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fde:	440b      	add	r3, r1
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d006      	beq.n	8010ff2 <tcp_receive+0x7c6>
 8010fe4:	4b36      	ldr	r3, [pc, #216]	; (80110c0 <tcp_receive+0x894>)
 8010fe6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010fea:	4936      	ldr	r1, [pc, #216]	; (80110c4 <tcp_receive+0x898>)
 8010fec:	4836      	ldr	r0, [pc, #216]	; (80110c8 <tcp_receive+0x89c>)
 8010fee:	f007 fe5b 	bl	8018ca8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f000 80e7 	beq.w	80111ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ffc:	4b2e      	ldr	r3, [pc, #184]	; (80110b8 <tcp_receive+0x88c>)
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	b29b      	uxth	r3, r3
 8011004:	4618      	mov	r0, r3
 8011006:	f7fa fc07 	bl	800b818 <lwip_htons>
 801100a:	4603      	mov	r3, r0
 801100c:	b2db      	uxtb	r3, r3
 801100e:	f003 0301 	and.w	r3, r3, #1
 8011012:	2b00      	cmp	r3, #0
 8011014:	d010      	beq.n	8011038 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011016:	e00a      	b.n	801102e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801101c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011028:	68f8      	ldr	r0, [r7, #12]
 801102a:	f7fd fcdc 	bl	800e9e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011032:	2b00      	cmp	r3, #0
 8011034:	d1f0      	bne.n	8011018 <tcp_receive+0x7ec>
 8011036:	e0c8      	b.n	80111ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801103c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801103e:	e052      	b.n	80110e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	899b      	ldrh	r3, [r3, #12]
 8011046:	b29b      	uxth	r3, r3
 8011048:	4618      	mov	r0, r3
 801104a:	f7fa fbe5 	bl	800b818 <lwip_htons>
 801104e:	4603      	mov	r3, r0
 8011050:	b2db      	uxtb	r3, r3
 8011052:	f003 0301 	and.w	r3, r3, #1
 8011056:	2b00      	cmp	r3, #0
 8011058:	d03d      	beq.n	80110d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801105a:	4b17      	ldr	r3, [pc, #92]	; (80110b8 <tcp_receive+0x88c>)
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	899b      	ldrh	r3, [r3, #12]
 8011060:	b29b      	uxth	r3, r3
 8011062:	4618      	mov	r0, r3
 8011064:	f7fa fbd8 	bl	800b818 <lwip_htons>
 8011068:	4603      	mov	r3, r0
 801106a:	b2db      	uxtb	r3, r3
 801106c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011070:	2b00      	cmp	r3, #0
 8011072:	d130      	bne.n	80110d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011074:	4b10      	ldr	r3, [pc, #64]	; (80110b8 <tcp_receive+0x88c>)
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	899b      	ldrh	r3, [r3, #12]
 801107a:	b29c      	uxth	r4, r3
 801107c:	2001      	movs	r0, #1
 801107e:	f7fa fbcb 	bl	800b818 <lwip_htons>
 8011082:	4603      	mov	r3, r0
 8011084:	461a      	mov	r2, r3
 8011086:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <tcp_receive+0x88c>)
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	4322      	orrs	r2, r4
 801108c:	b292      	uxth	r2, r2
 801108e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011090:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <tcp_receive+0x88c>)
 8011092:	891c      	ldrh	r4, [r3, #8]
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <tcp_receive+0x88c>)
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	899b      	ldrh	r3, [r3, #12]
 801109a:	b29b      	uxth	r3, r3
 801109c:	4618      	mov	r0, r3
 801109e:	f7fa fbbb 	bl	800b818 <lwip_htons>
 80110a2:	4603      	mov	r3, r0
 80110a4:	b2db      	uxtb	r3, r3
 80110a6:	f003 0303 	and.w	r3, r3, #3
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d00e      	beq.n	80110cc <tcp_receive+0x8a0>
 80110ae:	2301      	movs	r3, #1
 80110b0:	e00d      	b.n	80110ce <tcp_receive+0x8a2>
 80110b2:	bf00      	nop
 80110b4:	2000cc64 	.word	0x2000cc64
 80110b8:	2000cc44 	.word	0x2000cc44
 80110bc:	2000cc6e 	.word	0x2000cc6e
 80110c0:	0801b694 	.word	0x0801b694
 80110c4:	0801ba3c 	.word	0x0801ba3c
 80110c8:	0801b6e0 	.word	0x0801b6e0
 80110cc:	2300      	movs	r3, #0
 80110ce:	4423      	add	r3, r4
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	4b98      	ldr	r3, [pc, #608]	; (8011334 <tcp_receive+0xb08>)
 80110d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80110d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80110da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80110e0:	6938      	ldr	r0, [r7, #16]
 80110e2:	f7fd fc80 	bl	800e9e6 <tcp_seg_free>
            while (next &&
 80110e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00e      	beq.n	801110a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80110ec:	4b91      	ldr	r3, [pc, #580]	; (8011334 <tcp_receive+0xb08>)
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	461a      	mov	r2, r3
 80110f2:	4b91      	ldr	r3, [pc, #580]	; (8011338 <tcp_receive+0xb0c>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	441a      	add	r2, r3
 80110f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011100:	8909      	ldrh	r1, [r1, #8]
 8011102:	440b      	add	r3, r1
 8011104:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011106:	2b00      	cmp	r3, #0
 8011108:	da9a      	bge.n	8011040 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801110a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110c:	2b00      	cmp	r3, #0
 801110e:	d059      	beq.n	80111c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011110:	4b88      	ldr	r3, [pc, #544]	; (8011334 <tcp_receive+0xb08>)
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	461a      	mov	r2, r3
 8011116:	4b88      	ldr	r3, [pc, #544]	; (8011338 <tcp_receive+0xb0c>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	441a      	add	r2, r3
 801111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011124:	2b00      	cmp	r3, #0
 8011126:	dd4d      	ble.n	80111c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801112a:	68db      	ldr	r3, [r3, #12]
 801112c:	685b      	ldr	r3, [r3, #4]
 801112e:	b29a      	uxth	r2, r3
 8011130:	4b81      	ldr	r3, [pc, #516]	; (8011338 <tcp_receive+0xb0c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	b29b      	uxth	r3, r3
 8011136:	1ad3      	subs	r3, r2, r3
 8011138:	b29a      	uxth	r2, r3
 801113a:	4b80      	ldr	r3, [pc, #512]	; (801133c <tcp_receive+0xb10>)
 801113c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801113e:	4b7f      	ldr	r3, [pc, #508]	; (801133c <tcp_receive+0xb10>)
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	899b      	ldrh	r3, [r3, #12]
 8011144:	b29b      	uxth	r3, r3
 8011146:	4618      	mov	r0, r3
 8011148:	f7fa fb66 	bl	800b818 <lwip_htons>
 801114c:	4603      	mov	r3, r0
 801114e:	b2db      	uxtb	r3, r3
 8011150:	f003 0302 	and.w	r3, r3, #2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d005      	beq.n	8011164 <tcp_receive+0x938>
                inseg.len -= 1;
 8011158:	4b78      	ldr	r3, [pc, #480]	; (801133c <tcp_receive+0xb10>)
 801115a:	891b      	ldrh	r3, [r3, #8]
 801115c:	3b01      	subs	r3, #1
 801115e:	b29a      	uxth	r2, r3
 8011160:	4b76      	ldr	r3, [pc, #472]	; (801133c <tcp_receive+0xb10>)
 8011162:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011164:	4b75      	ldr	r3, [pc, #468]	; (801133c <tcp_receive+0xb10>)
 8011166:	685b      	ldr	r3, [r3, #4]
 8011168:	4a74      	ldr	r2, [pc, #464]	; (801133c <tcp_receive+0xb10>)
 801116a:	8912      	ldrh	r2, [r2, #8]
 801116c:	4611      	mov	r1, r2
 801116e:	4618      	mov	r0, r3
 8011170:	f7fb fdca 	bl	800cd08 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011174:	4b71      	ldr	r3, [pc, #452]	; (801133c <tcp_receive+0xb10>)
 8011176:	891c      	ldrh	r4, [r3, #8]
 8011178:	4b70      	ldr	r3, [pc, #448]	; (801133c <tcp_receive+0xb10>)
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	899b      	ldrh	r3, [r3, #12]
 801117e:	b29b      	uxth	r3, r3
 8011180:	4618      	mov	r0, r3
 8011182:	f7fa fb49 	bl	800b818 <lwip_htons>
 8011186:	4603      	mov	r3, r0
 8011188:	b2db      	uxtb	r3, r3
 801118a:	f003 0303 	and.w	r3, r3, #3
 801118e:	2b00      	cmp	r3, #0
 8011190:	d001      	beq.n	8011196 <tcp_receive+0x96a>
 8011192:	2301      	movs	r3, #1
 8011194:	e000      	b.n	8011198 <tcp_receive+0x96c>
 8011196:	2300      	movs	r3, #0
 8011198:	4423      	add	r3, r4
 801119a:	b29a      	uxth	r2, r3
 801119c:	4b65      	ldr	r3, [pc, #404]	; (8011334 <tcp_receive+0xb08>)
 801119e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80111a0:	4b64      	ldr	r3, [pc, #400]	; (8011334 <tcp_receive+0xb08>)
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	461a      	mov	r2, r3
 80111a6:	4b64      	ldr	r3, [pc, #400]	; (8011338 <tcp_receive+0xb0c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	441a      	add	r2, r3
 80111ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d006      	beq.n	80111c4 <tcp_receive+0x998>
 80111b6:	4b62      	ldr	r3, [pc, #392]	; (8011340 <tcp_receive+0xb14>)
 80111b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80111bc:	4961      	ldr	r1, [pc, #388]	; (8011344 <tcp_receive+0xb18>)
 80111be:	4862      	ldr	r0, [pc, #392]	; (8011348 <tcp_receive+0xb1c>)
 80111c0:	f007 fd72 	bl	8018ca8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80111ca:	4b5a      	ldr	r3, [pc, #360]	; (8011334 <tcp_receive+0xb08>)
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	461a      	mov	r2, r3
 80111d0:	4b59      	ldr	r3, [pc, #356]	; (8011338 <tcp_receive+0xb0c>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	441a      	add	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111de:	4b55      	ldr	r3, [pc, #340]	; (8011334 <tcp_receive+0xb08>)
 80111e0:	881b      	ldrh	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d206      	bcs.n	80111f4 <tcp_receive+0x9c8>
 80111e6:	4b56      	ldr	r3, [pc, #344]	; (8011340 <tcp_receive+0xb14>)
 80111e8:	f240 6207 	movw	r2, #1543	; 0x607
 80111ec:	4957      	ldr	r1, [pc, #348]	; (801134c <tcp_receive+0xb20>)
 80111ee:	4856      	ldr	r0, [pc, #344]	; (8011348 <tcp_receive+0xb1c>)
 80111f0:	f007 fd5a 	bl	8018ca8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111f8:	4b4e      	ldr	r3, [pc, #312]	; (8011334 <tcp_receive+0xb08>)
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	b29a      	uxth	r2, r3
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7fc fdb1 	bl	800dd6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801120a:	4b4c      	ldr	r3, [pc, #304]	; (801133c <tcp_receive+0xb10>)
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	891b      	ldrh	r3, [r3, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d006      	beq.n	8011222 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011214:	4b49      	ldr	r3, [pc, #292]	; (801133c <tcp_receive+0xb10>)
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	4a4d      	ldr	r2, [pc, #308]	; (8011350 <tcp_receive+0xb24>)
 801121a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801121c:	4b47      	ldr	r3, [pc, #284]	; (801133c <tcp_receive+0xb10>)
 801121e:	2200      	movs	r2, #0
 8011220:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011222:	4b46      	ldr	r3, [pc, #280]	; (801133c <tcp_receive+0xb10>)
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	899b      	ldrh	r3, [r3, #12]
 8011228:	b29b      	uxth	r3, r3
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa faf4 	bl	800b818 <lwip_htons>
 8011230:	4603      	mov	r3, r0
 8011232:	b2db      	uxtb	r3, r3
 8011234:	f003 0301 	and.w	r3, r3, #1
 8011238:	2b00      	cmp	r3, #0
 801123a:	f000 80b8 	beq.w	80113ae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801123e:	4b45      	ldr	r3, [pc, #276]	; (8011354 <tcp_receive+0xb28>)
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	f043 0320 	orr.w	r3, r3, #32
 8011246:	b2da      	uxtb	r2, r3
 8011248:	4b42      	ldr	r3, [pc, #264]	; (8011354 <tcp_receive+0xb28>)
 801124a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801124c:	e0af      	b.n	80113ae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011252:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	4a36      	ldr	r2, [pc, #216]	; (8011338 <tcp_receive+0xb0c>)
 801125e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	891b      	ldrh	r3, [r3, #8]
 8011264:	461c      	mov	r4, r3
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	899b      	ldrh	r3, [r3, #12]
 801126c:	b29b      	uxth	r3, r3
 801126e:	4618      	mov	r0, r3
 8011270:	f7fa fad2 	bl	800b818 <lwip_htons>
 8011274:	4603      	mov	r3, r0
 8011276:	b2db      	uxtb	r3, r3
 8011278:	f003 0303 	and.w	r3, r3, #3
 801127c:	2b00      	cmp	r3, #0
 801127e:	d001      	beq.n	8011284 <tcp_receive+0xa58>
 8011280:	2301      	movs	r3, #1
 8011282:	e000      	b.n	8011286 <tcp_receive+0xa5a>
 8011284:	2300      	movs	r3, #0
 8011286:	191a      	adds	r2, r3, r4
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801128c:	441a      	add	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011296:	461c      	mov	r4, r3
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	891b      	ldrh	r3, [r3, #8]
 801129c:	461d      	mov	r5, r3
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	899b      	ldrh	r3, [r3, #12]
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fa fab6 	bl	800b818 <lwip_htons>
 80112ac:	4603      	mov	r3, r0
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f003 0303 	and.w	r3, r3, #3
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d001      	beq.n	80112bc <tcp_receive+0xa90>
 80112b8:	2301      	movs	r3, #1
 80112ba:	e000      	b.n	80112be <tcp_receive+0xa92>
 80112bc:	2300      	movs	r3, #0
 80112be:	442b      	add	r3, r5
 80112c0:	429c      	cmp	r4, r3
 80112c2:	d206      	bcs.n	80112d2 <tcp_receive+0xaa6>
 80112c4:	4b1e      	ldr	r3, [pc, #120]	; (8011340 <tcp_receive+0xb14>)
 80112c6:	f240 622b 	movw	r2, #1579	; 0x62b
 80112ca:	4923      	ldr	r1, [pc, #140]	; (8011358 <tcp_receive+0xb2c>)
 80112cc:	481e      	ldr	r0, [pc, #120]	; (8011348 <tcp_receive+0xb1c>)
 80112ce:	f007 fceb 	bl	8018ca8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	891b      	ldrh	r3, [r3, #8]
 80112d6:	461c      	mov	r4, r3
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	68db      	ldr	r3, [r3, #12]
 80112dc:	899b      	ldrh	r3, [r3, #12]
 80112de:	b29b      	uxth	r3, r3
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fa fa99 	bl	800b818 <lwip_htons>
 80112e6:	4603      	mov	r3, r0
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	f003 0303 	and.w	r3, r3, #3
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <tcp_receive+0xaca>
 80112f2:	2301      	movs	r3, #1
 80112f4:	e000      	b.n	80112f8 <tcp_receive+0xacc>
 80112f6:	2300      	movs	r3, #0
 80112f8:	1919      	adds	r1, r3, r4
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112fe:	b28b      	uxth	r3, r1
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	b29a      	uxth	r2, r3
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7fc fd2f 	bl	800dd6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	891b      	ldrh	r3, [r3, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d028      	beq.n	801136a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011318:	4b0d      	ldr	r3, [pc, #52]	; (8011350 <tcp_receive+0xb24>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d01d      	beq.n	801135c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011320:	4b0b      	ldr	r3, [pc, #44]	; (8011350 <tcp_receive+0xb24>)
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	685b      	ldr	r3, [r3, #4]
 8011328:	4619      	mov	r1, r3
 801132a:	4610      	mov	r0, r2
 801132c:	f7fb ff40 	bl	800d1b0 <pbuf_cat>
 8011330:	e018      	b.n	8011364 <tcp_receive+0xb38>
 8011332:	bf00      	nop
 8011334:	2000cc6e 	.word	0x2000cc6e
 8011338:	2000cc64 	.word	0x2000cc64
 801133c:	2000cc44 	.word	0x2000cc44
 8011340:	0801b694 	.word	0x0801b694
 8011344:	0801ba74 	.word	0x0801ba74
 8011348:	0801b6e0 	.word	0x0801b6e0
 801134c:	0801bab0 	.word	0x0801bab0
 8011350:	2000cc74 	.word	0x2000cc74
 8011354:	2000cc71 	.word	0x2000cc71
 8011358:	0801bad0 	.word	0x0801bad0
            } else {
              recv_data = cseg->p;
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	4a70      	ldr	r2, [pc, #448]	; (8011524 <tcp_receive+0xcf8>)
 8011362:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	2200      	movs	r2, #0
 8011368:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	899b      	ldrh	r3, [r3, #12]
 8011370:	b29b      	uxth	r3, r3
 8011372:	4618      	mov	r0, r3
 8011374:	f7fa fa50 	bl	800b818 <lwip_htons>
 8011378:	4603      	mov	r3, r0
 801137a:	b2db      	uxtb	r3, r3
 801137c:	f003 0301 	and.w	r3, r3, #1
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00d      	beq.n	80113a0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011384:	4b68      	ldr	r3, [pc, #416]	; (8011528 <tcp_receive+0xcfc>)
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	f043 0320 	orr.w	r3, r3, #32
 801138c:	b2da      	uxtb	r2, r3
 801138e:	4b66      	ldr	r3, [pc, #408]	; (8011528 <tcp_receive+0xcfc>)
 8011390:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7d1b      	ldrb	r3, [r3, #20]
 8011396:	2b04      	cmp	r3, #4
 8011398:	d102      	bne.n	80113a0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2207      	movs	r2, #7
 801139e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80113a8:	68b8      	ldr	r0, [r7, #8]
 80113aa:	f7fd fb1c 	bl	800e9e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d008      	beq.n	80113c8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	685a      	ldr	r2, [r3, #4]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80113c2:	429a      	cmp	r2, r3
 80113c4:	f43f af43 	beq.w	801124e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	8b5b      	ldrh	r3, [r3, #26]
 80113cc:	f003 0301 	and.w	r3, r3, #1
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d00e      	beq.n	80113f2 <tcp_receive+0xbc6>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	8b5b      	ldrh	r3, [r3, #26]
 80113d8:	f023 0301 	bic.w	r3, r3, #1
 80113dc:	b29a      	uxth	r2, r3
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	835a      	strh	r2, [r3, #26]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	8b5b      	ldrh	r3, [r3, #26]
 80113e6:	f043 0302 	orr.w	r3, r3, #2
 80113ea:	b29a      	uxth	r2, r3
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80113f0:	e188      	b.n	8011704 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	8b5b      	ldrh	r3, [r3, #26]
 80113f6:	f043 0301 	orr.w	r3, r3, #1
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011400:	e180      	b.n	8011704 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011406:	2b00      	cmp	r3, #0
 8011408:	d106      	bne.n	8011418 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801140a:	4848      	ldr	r0, [pc, #288]	; (801152c <tcp_receive+0xd00>)
 801140c:	f7fd fb04 	bl	800ea18 <tcp_seg_copy>
 8011410:	4602      	mov	r2, r0
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	675a      	str	r2, [r3, #116]	; 0x74
 8011416:	e16d      	b.n	80116f4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011418:	2300      	movs	r3, #0
 801141a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011420:	63bb      	str	r3, [r7, #56]	; 0x38
 8011422:	e157      	b.n	80116d4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	685a      	ldr	r2, [r3, #4]
 801142a:	4b41      	ldr	r3, [pc, #260]	; (8011530 <tcp_receive+0xd04>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	429a      	cmp	r2, r3
 8011430:	d11d      	bne.n	801146e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011432:	4b3e      	ldr	r3, [pc, #248]	; (801152c <tcp_receive+0xd00>)
 8011434:	891a      	ldrh	r2, [r3, #8]
 8011436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011438:	891b      	ldrh	r3, [r3, #8]
 801143a:	429a      	cmp	r2, r3
 801143c:	f240 814f 	bls.w	80116de <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011440:	483a      	ldr	r0, [pc, #232]	; (801152c <tcp_receive+0xd00>)
 8011442:	f7fd fae9 	bl	800ea18 <tcp_seg_copy>
 8011446:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011448:	697b      	ldr	r3, [r7, #20]
 801144a:	2b00      	cmp	r3, #0
 801144c:	f000 8149 	beq.w	80116e2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011452:	2b00      	cmp	r3, #0
 8011454:	d003      	beq.n	801145e <tcp_receive+0xc32>
                    prev->next = cseg;
 8011456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	601a      	str	r2, [r3, #0]
 801145c:	e002      	b.n	8011464 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	697a      	ldr	r2, [r7, #20]
 8011462:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011466:	6978      	ldr	r0, [r7, #20]
 8011468:	f7ff f8dc 	bl	8010624 <tcp_oos_insert_segment>
                }
                break;
 801146c:	e139      	b.n	80116e2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011470:	2b00      	cmp	r3, #0
 8011472:	d117      	bne.n	80114a4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011474:	4b2e      	ldr	r3, [pc, #184]	; (8011530 <tcp_receive+0xd04>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	1ad3      	subs	r3, r2, r3
 8011480:	2b00      	cmp	r3, #0
 8011482:	da57      	bge.n	8011534 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011484:	4829      	ldr	r0, [pc, #164]	; (801152c <tcp_receive+0xd00>)
 8011486:	f7fd fac7 	bl	800ea18 <tcp_seg_copy>
 801148a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	2b00      	cmp	r3, #0
 8011490:	f000 8129 	beq.w	80116e6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	69ba      	ldr	r2, [r7, #24]
 8011498:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801149a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801149c:	69b8      	ldr	r0, [r7, #24]
 801149e:	f7ff f8c1 	bl	8010624 <tcp_oos_insert_segment>
                  }
                  break;
 80114a2:	e120      	b.n	80116e6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80114a4:	4b22      	ldr	r3, [pc, #136]	; (8011530 <tcp_receive+0xd04>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	1ad3      	subs	r3, r2, r3
 80114b0:	3b01      	subs	r3, #1
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	db3e      	blt.n	8011534 <tcp_receive+0xd08>
 80114b6:	4b1e      	ldr	r3, [pc, #120]	; (8011530 <tcp_receive+0xd04>)
 80114b8:	681a      	ldr	r2, [r3, #0]
 80114ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	3301      	adds	r3, #1
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	dc35      	bgt.n	8011534 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80114c8:	4818      	ldr	r0, [pc, #96]	; (801152c <tcp_receive+0xd00>)
 80114ca:	f7fd faa5 	bl	800ea18 <tcp_seg_copy>
 80114ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	f000 8109 	beq.w	80116ea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80114d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114e0:	8912      	ldrh	r2, [r2, #8]
 80114e2:	441a      	add	r2, r3
 80114e4:	4b12      	ldr	r3, [pc, #72]	; (8011530 <tcp_receive+0xd04>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	1ad3      	subs	r3, r2, r3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dd12      	ble.n	8011514 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80114ee:	4b10      	ldr	r3, [pc, #64]	; (8011530 <tcp_receive+0xd04>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	1ad3      	subs	r3, r2, r3
 80114fe:	b29a      	uxth	r2, r3
 8011500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011502:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011506:	685a      	ldr	r2, [r3, #4]
 8011508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150a:	891b      	ldrh	r3, [r3, #8]
 801150c:	4619      	mov	r1, r3
 801150e:	4610      	mov	r0, r2
 8011510:	f7fb fbfa 	bl	800cd08 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011516:	69fa      	ldr	r2, [r7, #28]
 8011518:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801151a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801151c:	69f8      	ldr	r0, [r7, #28]
 801151e:	f7ff f881 	bl	8010624 <tcp_oos_insert_segment>
                  }
                  break;
 8011522:	e0e2      	b.n	80116ea <tcp_receive+0xebe>
 8011524:	2000cc74 	.word	0x2000cc74
 8011528:	2000cc71 	.word	0x2000cc71
 801152c:	2000cc44 	.word	0x2000cc44
 8011530:	2000cc64 	.word	0x2000cc64
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011536:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	f040 80c6 	bne.w	80116ce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011542:	4b80      	ldr	r3, [pc, #512]	; (8011744 <tcp_receive+0xf18>)
 8011544:	681a      	ldr	r2, [r3, #0]
 8011546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	685b      	ldr	r3, [r3, #4]
 801154c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801154e:	2b00      	cmp	r3, #0
 8011550:	f340 80bd 	ble.w	80116ce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	b29b      	uxth	r3, r3
 801155c:	4618      	mov	r0, r3
 801155e:	f7fa f95b 	bl	800b818 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	f003 0301 	and.w	r3, r3, #1
 801156a:	2b00      	cmp	r3, #0
 801156c:	f040 80bf 	bne.w	80116ee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011570:	4875      	ldr	r0, [pc, #468]	; (8011748 <tcp_receive+0xf1c>)
 8011572:	f7fd fa51 	bl	800ea18 <tcp_seg_copy>
 8011576:	4602      	mov	r2, r0
 8011578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801157c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	f000 80b6 	beq.w	80116f2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801158e:	8912      	ldrh	r2, [r2, #8]
 8011590:	441a      	add	r2, r3
 8011592:	4b6c      	ldr	r3, [pc, #432]	; (8011744 <tcp_receive+0xf18>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	2b00      	cmp	r3, #0
 801159a:	dd12      	ble.n	80115c2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801159c:	4b69      	ldr	r3, [pc, #420]	; (8011744 <tcp_receive+0xf18>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	1ad3      	subs	r3, r2, r3
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80115b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b4:	685a      	ldr	r2, [r3, #4]
 80115b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115b8:	891b      	ldrh	r3, [r3, #8]
 80115ba:	4619      	mov	r1, r3
 80115bc:	4610      	mov	r0, r2
 80115be:	f7fb fba3 	bl	800cd08 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80115c2:	4b62      	ldr	r3, [pc, #392]	; (801174c <tcp_receive+0xf20>)
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	461a      	mov	r2, r3
 80115c8:	4b5e      	ldr	r3, [pc, #376]	; (8011744 <tcp_receive+0xf18>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	441a      	add	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d2:	6879      	ldr	r1, [r7, #4]
 80115d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115d6:	440b      	add	r3, r1
 80115d8:	1ad3      	subs	r3, r2, r3
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f340 8089 	ble.w	80116f2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80115e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	899b      	ldrh	r3, [r3, #12]
 80115e8:	b29b      	uxth	r3, r3
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fa f914 	bl	800b818 <lwip_htons>
 80115f0:	4603      	mov	r3, r0
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	f003 0301 	and.w	r3, r3, #1
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d022      	beq.n	8011642 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80115fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	68db      	ldr	r3, [r3, #12]
 8011602:	899b      	ldrh	r3, [r3, #12]
 8011604:	b29b      	uxth	r3, r3
 8011606:	b21b      	sxth	r3, r3
 8011608:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801160c:	b21c      	sxth	r4, r3
 801160e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	899b      	ldrh	r3, [r3, #12]
 8011616:	b29b      	uxth	r3, r3
 8011618:	4618      	mov	r0, r3
 801161a:	f7fa f8fd 	bl	800b818 <lwip_htons>
 801161e:	4603      	mov	r3, r0
 8011620:	b2db      	uxtb	r3, r3
 8011622:	b29b      	uxth	r3, r3
 8011624:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011628:	b29b      	uxth	r3, r3
 801162a:	4618      	mov	r0, r3
 801162c:	f7fa f8f4 	bl	800b818 <lwip_htons>
 8011630:	4603      	mov	r3, r0
 8011632:	b21b      	sxth	r3, r3
 8011634:	4323      	orrs	r3, r4
 8011636:	b21a      	sxth	r2, r3
 8011638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	b292      	uxth	r2, r2
 8011640:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801164c:	4413      	add	r3, r2
 801164e:	b299      	uxth	r1, r3
 8011650:	4b3c      	ldr	r3, [pc, #240]	; (8011744 <tcp_receive+0xf18>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	b29a      	uxth	r2, r3
 8011656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	1a8a      	subs	r2, r1, r2
 801165c:	b292      	uxth	r2, r2
 801165e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	891b      	ldrh	r3, [r3, #8]
 801166c:	4619      	mov	r1, r3
 801166e:	4610      	mov	r0, r2
 8011670:	f7fb fb4a 	bl	800cd08 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	891c      	ldrh	r4, [r3, #8]
 801167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	899b      	ldrh	r3, [r3, #12]
 8011682:	b29b      	uxth	r3, r3
 8011684:	4618      	mov	r0, r3
 8011686:	f7fa f8c7 	bl	800b818 <lwip_htons>
 801168a:	4603      	mov	r3, r0
 801168c:	b2db      	uxtb	r3, r3
 801168e:	f003 0303 	and.w	r3, r3, #3
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <tcp_receive+0xe6e>
 8011696:	2301      	movs	r3, #1
 8011698:	e000      	b.n	801169c <tcp_receive+0xe70>
 801169a:	2300      	movs	r3, #0
 801169c:	4423      	add	r3, r4
 801169e:	b29a      	uxth	r2, r3
 80116a0:	4b2a      	ldr	r3, [pc, #168]	; (801174c <tcp_receive+0xf20>)
 80116a2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80116a4:	4b29      	ldr	r3, [pc, #164]	; (801174c <tcp_receive+0xf20>)
 80116a6:	881b      	ldrh	r3, [r3, #0]
 80116a8:	461a      	mov	r2, r3
 80116aa:	4b26      	ldr	r3, [pc, #152]	; (8011744 <tcp_receive+0xf18>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	441a      	add	r2, r3
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116b4:	6879      	ldr	r1, [r7, #4]
 80116b6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116b8:	440b      	add	r3, r1
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d019      	beq.n	80116f2 <tcp_receive+0xec6>
 80116be:	4b24      	ldr	r3, [pc, #144]	; (8011750 <tcp_receive+0xf24>)
 80116c0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80116c4:	4923      	ldr	r1, [pc, #140]	; (8011754 <tcp_receive+0xf28>)
 80116c6:	4824      	ldr	r0, [pc, #144]	; (8011758 <tcp_receive+0xf2c>)
 80116c8:	f007 faee 	bl	8018ca8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80116cc:	e011      	b.n	80116f2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80116ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	f47f aea4 	bne.w	8011424 <tcp_receive+0xbf8>
 80116dc:	e00a      	b.n	80116f4 <tcp_receive+0xec8>
                break;
 80116de:	bf00      	nop
 80116e0:	e008      	b.n	80116f4 <tcp_receive+0xec8>
                break;
 80116e2:	bf00      	nop
 80116e4:	e006      	b.n	80116f4 <tcp_receive+0xec8>
                  break;
 80116e6:	bf00      	nop
 80116e8:	e004      	b.n	80116f4 <tcp_receive+0xec8>
                  break;
 80116ea:	bf00      	nop
 80116ec:	e002      	b.n	80116f4 <tcp_receive+0xec8>
                  break;
 80116ee:	bf00      	nop
 80116f0:	e000      	b.n	80116f4 <tcp_receive+0xec8>
                break;
 80116f2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f001 fe8b 	bl	8013410 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80116fa:	e003      	b.n	8011704 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80116fc:	6878      	ldr	r0, [r7, #4]
 80116fe:	f001 fe87 	bl	8013410 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011702:	e01a      	b.n	801173a <tcp_receive+0xf0e>
 8011704:	e019      	b.n	801173a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011706:	4b0f      	ldr	r3, [pc, #60]	; (8011744 <tcp_receive+0xf18>)
 8011708:	681a      	ldr	r2, [r3, #0]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	2b00      	cmp	r3, #0
 8011712:	db0a      	blt.n	801172a <tcp_receive+0xefe>
 8011714:	4b0b      	ldr	r3, [pc, #44]	; (8011744 <tcp_receive+0xf18>)
 8011716:	681a      	ldr	r2, [r3, #0]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801171c:	6879      	ldr	r1, [r7, #4]
 801171e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011720:	440b      	add	r3, r1
 8011722:	1ad3      	subs	r3, r2, r3
 8011724:	3301      	adds	r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	dd07      	ble.n	801173a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	8b5b      	ldrh	r3, [r3, #26]
 801172e:	f043 0302 	orr.w	r3, r3, #2
 8011732:	b29a      	uxth	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011738:	e7ff      	b.n	801173a <tcp_receive+0xf0e>
 801173a:	bf00      	nop
 801173c:	3750      	adds	r7, #80	; 0x50
 801173e:	46bd      	mov	sp, r7
 8011740:	bdb0      	pop	{r4, r5, r7, pc}
 8011742:	bf00      	nop
 8011744:	2000cc64 	.word	0x2000cc64
 8011748:	2000cc44 	.word	0x2000cc44
 801174c:	2000cc6e 	.word	0x2000cc6e
 8011750:	0801b694 	.word	0x0801b694
 8011754:	0801ba3c 	.word	0x0801ba3c
 8011758:	0801b6e0 	.word	0x0801b6e0

0801175c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011762:	4b15      	ldr	r3, [pc, #84]	; (80117b8 <tcp_get_next_optbyte+0x5c>)
 8011764:	881b      	ldrh	r3, [r3, #0]
 8011766:	1c5a      	adds	r2, r3, #1
 8011768:	b291      	uxth	r1, r2
 801176a:	4a13      	ldr	r2, [pc, #76]	; (80117b8 <tcp_get_next_optbyte+0x5c>)
 801176c:	8011      	strh	r1, [r2, #0]
 801176e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011770:	4b12      	ldr	r3, [pc, #72]	; (80117bc <tcp_get_next_optbyte+0x60>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d004      	beq.n	8011782 <tcp_get_next_optbyte+0x26>
 8011778:	4b11      	ldr	r3, [pc, #68]	; (80117c0 <tcp_get_next_optbyte+0x64>)
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	88fa      	ldrh	r2, [r7, #6]
 801177e:	429a      	cmp	r2, r3
 8011780:	d208      	bcs.n	8011794 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011782:	4b10      	ldr	r3, [pc, #64]	; (80117c4 <tcp_get_next_optbyte+0x68>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	3314      	adds	r3, #20
 8011788:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801178a:	88fb      	ldrh	r3, [r7, #6]
 801178c:	683a      	ldr	r2, [r7, #0]
 801178e:	4413      	add	r3, r2
 8011790:	781b      	ldrb	r3, [r3, #0]
 8011792:	e00b      	b.n	80117ac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011794:	88fb      	ldrh	r3, [r7, #6]
 8011796:	b2da      	uxtb	r2, r3
 8011798:	4b09      	ldr	r3, [pc, #36]	; (80117c0 <tcp_get_next_optbyte+0x64>)
 801179a:	881b      	ldrh	r3, [r3, #0]
 801179c:	b2db      	uxtb	r3, r3
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80117a2:	4b06      	ldr	r3, [pc, #24]	; (80117bc <tcp_get_next_optbyte+0x60>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	797b      	ldrb	r3, [r7, #5]
 80117a8:	4413      	add	r3, r2
 80117aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	370c      	adds	r7, #12
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr
 80117b8:	2000cc60 	.word	0x2000cc60
 80117bc:	2000cc5c 	.word	0x2000cc5c
 80117c0:	2000cc5a 	.word	0x2000cc5a
 80117c4:	2000cc54 	.word	0x2000cc54

080117c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d106      	bne.n	80117e4 <tcp_parseopt+0x1c>
 80117d6:	4b32      	ldr	r3, [pc, #200]	; (80118a0 <tcp_parseopt+0xd8>)
 80117d8:	f240 727d 	movw	r2, #1917	; 0x77d
 80117dc:	4931      	ldr	r1, [pc, #196]	; (80118a4 <tcp_parseopt+0xdc>)
 80117de:	4832      	ldr	r0, [pc, #200]	; (80118a8 <tcp_parseopt+0xe0>)
 80117e0:	f007 fa62 	bl	8018ca8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80117e4:	4b31      	ldr	r3, [pc, #196]	; (80118ac <tcp_parseopt+0xe4>)
 80117e6:	881b      	ldrh	r3, [r3, #0]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d055      	beq.n	8011898 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80117ec:	4b30      	ldr	r3, [pc, #192]	; (80118b0 <tcp_parseopt+0xe8>)
 80117ee:	2200      	movs	r2, #0
 80117f0:	801a      	strh	r2, [r3, #0]
 80117f2:	e045      	b.n	8011880 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80117f4:	f7ff ffb2 	bl	801175c <tcp_get_next_optbyte>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80117fc:	7bfb      	ldrb	r3, [r7, #15]
 80117fe:	2b02      	cmp	r3, #2
 8011800:	d006      	beq.n	8011810 <tcp_parseopt+0x48>
 8011802:	2b02      	cmp	r3, #2
 8011804:	dc2b      	bgt.n	801185e <tcp_parseopt+0x96>
 8011806:	2b00      	cmp	r3, #0
 8011808:	d041      	beq.n	801188e <tcp_parseopt+0xc6>
 801180a:	2b01      	cmp	r3, #1
 801180c:	d127      	bne.n	801185e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801180e:	e037      	b.n	8011880 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011810:	f7ff ffa4 	bl	801175c <tcp_get_next_optbyte>
 8011814:	4603      	mov	r3, r0
 8011816:	2b04      	cmp	r3, #4
 8011818:	d13b      	bne.n	8011892 <tcp_parseopt+0xca>
 801181a:	4b25      	ldr	r3, [pc, #148]	; (80118b0 <tcp_parseopt+0xe8>)
 801181c:	881b      	ldrh	r3, [r3, #0]
 801181e:	3301      	adds	r3, #1
 8011820:	4a22      	ldr	r2, [pc, #136]	; (80118ac <tcp_parseopt+0xe4>)
 8011822:	8812      	ldrh	r2, [r2, #0]
 8011824:	4293      	cmp	r3, r2
 8011826:	da34      	bge.n	8011892 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011828:	f7ff ff98 	bl	801175c <tcp_get_next_optbyte>
 801182c:	4603      	mov	r3, r0
 801182e:	b29b      	uxth	r3, r3
 8011830:	021b      	lsls	r3, r3, #8
 8011832:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011834:	f7ff ff92 	bl	801175c <tcp_get_next_optbyte>
 8011838:	4603      	mov	r3, r0
 801183a:	b29a      	uxth	r2, r3
 801183c:	89bb      	ldrh	r3, [r7, #12]
 801183e:	4313      	orrs	r3, r2
 8011840:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011842:	89bb      	ldrh	r3, [r7, #12]
 8011844:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011848:	d804      	bhi.n	8011854 <tcp_parseopt+0x8c>
 801184a:	89bb      	ldrh	r3, [r7, #12]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <tcp_parseopt+0x8c>
 8011850:	89ba      	ldrh	r2, [r7, #12]
 8011852:	e001      	b.n	8011858 <tcp_parseopt+0x90>
 8011854:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801185c:	e010      	b.n	8011880 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801185e:	f7ff ff7d 	bl	801175c <tcp_get_next_optbyte>
 8011862:	4603      	mov	r3, r0
 8011864:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011866:	7afb      	ldrb	r3, [r7, #11]
 8011868:	2b01      	cmp	r3, #1
 801186a:	d914      	bls.n	8011896 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801186c:	7afb      	ldrb	r3, [r7, #11]
 801186e:	b29a      	uxth	r2, r3
 8011870:	4b0f      	ldr	r3, [pc, #60]	; (80118b0 <tcp_parseopt+0xe8>)
 8011872:	881b      	ldrh	r3, [r3, #0]
 8011874:	4413      	add	r3, r2
 8011876:	b29b      	uxth	r3, r3
 8011878:	3b02      	subs	r3, #2
 801187a:	b29a      	uxth	r2, r3
 801187c:	4b0c      	ldr	r3, [pc, #48]	; (80118b0 <tcp_parseopt+0xe8>)
 801187e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011880:	4b0b      	ldr	r3, [pc, #44]	; (80118b0 <tcp_parseopt+0xe8>)
 8011882:	881a      	ldrh	r2, [r3, #0]
 8011884:	4b09      	ldr	r3, [pc, #36]	; (80118ac <tcp_parseopt+0xe4>)
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	429a      	cmp	r2, r3
 801188a:	d3b3      	bcc.n	80117f4 <tcp_parseopt+0x2c>
 801188c:	e004      	b.n	8011898 <tcp_parseopt+0xd0>
          return;
 801188e:	bf00      	nop
 8011890:	e002      	b.n	8011898 <tcp_parseopt+0xd0>
            return;
 8011892:	bf00      	nop
 8011894:	e000      	b.n	8011898 <tcp_parseopt+0xd0>
            return;
 8011896:	bf00      	nop
      }
    }
  }
}
 8011898:	3710      	adds	r7, #16
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	0801b694 	.word	0x0801b694
 80118a4:	0801baf8 	.word	0x0801baf8
 80118a8:	0801b6e0 	.word	0x0801b6e0
 80118ac:	2000cc58 	.word	0x2000cc58
 80118b0:	2000cc60 	.word	0x2000cc60

080118b4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80118b8:	4b05      	ldr	r3, [pc, #20]	; (80118d0 <tcp_trigger_input_pcb_close+0x1c>)
 80118ba:	781b      	ldrb	r3, [r3, #0]
 80118bc:	f043 0310 	orr.w	r3, r3, #16
 80118c0:	b2da      	uxtb	r2, r3
 80118c2:	4b03      	ldr	r3, [pc, #12]	; (80118d0 <tcp_trigger_input_pcb_close+0x1c>)
 80118c4:	701a      	strb	r2, [r3, #0]
}
 80118c6:	bf00      	nop
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr
 80118d0:	2000cc71 	.word	0x2000cc71

080118d4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	60f8      	str	r0, [r7, #12]
 80118dc:	60b9      	str	r1, [r7, #8]
 80118de:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d00a      	beq.n	80118fc <tcp_route+0x28>
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	7a1b      	ldrb	r3, [r3, #8]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d006      	beq.n	80118fc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	7a1b      	ldrb	r3, [r3, #8]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fb f800 	bl	800c8f8 <netif_get_by_index>
 80118f8:	4603      	mov	r3, r0
 80118fa:	e003      	b.n	8011904 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f005 fcd9 	bl	80172b4 <ip4_route>
 8011902:	4603      	mov	r3, r0
  }
}
 8011904:	4618      	mov	r0, r3
 8011906:	3710      	adds	r7, #16
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801190c:	b590      	push	{r4, r7, lr}
 801190e:	b087      	sub	sp, #28
 8011910:	af00      	add	r7, sp, #0
 8011912:	60f8      	str	r0, [r7, #12]
 8011914:	60b9      	str	r1, [r7, #8]
 8011916:	603b      	str	r3, [r7, #0]
 8011918:	4613      	mov	r3, r2
 801191a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d105      	bne.n	801192e <tcp_create_segment+0x22>
 8011922:	4b44      	ldr	r3, [pc, #272]	; (8011a34 <tcp_create_segment+0x128>)
 8011924:	22a3      	movs	r2, #163	; 0xa3
 8011926:	4944      	ldr	r1, [pc, #272]	; (8011a38 <tcp_create_segment+0x12c>)
 8011928:	4844      	ldr	r0, [pc, #272]	; (8011a3c <tcp_create_segment+0x130>)
 801192a:	f007 f9bd 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d105      	bne.n	8011940 <tcp_create_segment+0x34>
 8011934:	4b3f      	ldr	r3, [pc, #252]	; (8011a34 <tcp_create_segment+0x128>)
 8011936:	22a4      	movs	r2, #164	; 0xa4
 8011938:	4941      	ldr	r1, [pc, #260]	; (8011a40 <tcp_create_segment+0x134>)
 801193a:	4840      	ldr	r0, [pc, #256]	; (8011a3c <tcp_create_segment+0x130>)
 801193c:	f007 f9b4 	bl	8018ca8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011944:	009b      	lsls	r3, r3, #2
 8011946:	b2db      	uxtb	r3, r3
 8011948:	f003 0304 	and.w	r3, r3, #4
 801194c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801194e:	2003      	movs	r0, #3
 8011950:	f7fa fc3a 	bl	800c1c8 <memp_malloc>
 8011954:	6138      	str	r0, [r7, #16]
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d104      	bne.n	8011966 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801195c:	68b8      	ldr	r0, [r7, #8]
 801195e:	f7fb fb59 	bl	800d014 <pbuf_free>
    return NULL;
 8011962:	2300      	movs	r3, #0
 8011964:	e061      	b.n	8011a2a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801196c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	2200      	movs	r2, #0
 8011972:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	68ba      	ldr	r2, [r7, #8]
 8011978:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	891a      	ldrh	r2, [r3, #8]
 801197e:	7dfb      	ldrb	r3, [r7, #23]
 8011980:	b29b      	uxth	r3, r3
 8011982:	429a      	cmp	r2, r3
 8011984:	d205      	bcs.n	8011992 <tcp_create_segment+0x86>
 8011986:	4b2b      	ldr	r3, [pc, #172]	; (8011a34 <tcp_create_segment+0x128>)
 8011988:	22b0      	movs	r2, #176	; 0xb0
 801198a:	492e      	ldr	r1, [pc, #184]	; (8011a44 <tcp_create_segment+0x138>)
 801198c:	482b      	ldr	r0, [pc, #172]	; (8011a3c <tcp_create_segment+0x130>)
 801198e:	f007 f98b 	bl	8018ca8 <iprintf>
  seg->len = p->tot_len - optlen;
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	891a      	ldrh	r2, [r3, #8]
 8011996:	7dfb      	ldrb	r3, [r7, #23]
 8011998:	b29b      	uxth	r3, r3
 801199a:	1ad3      	subs	r3, r2, r3
 801199c:	b29a      	uxth	r2, r3
 801199e:	693b      	ldr	r3, [r7, #16]
 80119a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80119a2:	2114      	movs	r1, #20
 80119a4:	68b8      	ldr	r0, [r7, #8]
 80119a6:	f7fb fa9f 	bl	800cee8 <pbuf_add_header>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d004      	beq.n	80119ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80119b0:	6938      	ldr	r0, [r7, #16]
 80119b2:	f7fd f818 	bl	800e9e6 <tcp_seg_free>
    return NULL;
 80119b6:	2300      	movs	r3, #0
 80119b8:	e037      	b.n	8011a2a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80119ba:	693b      	ldr	r3, [r7, #16]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	685a      	ldr	r2, [r3, #4]
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	8ada      	ldrh	r2, [r3, #22]
 80119c8:	693b      	ldr	r3, [r7, #16]
 80119ca:	68dc      	ldr	r4, [r3, #12]
 80119cc:	4610      	mov	r0, r2
 80119ce:	f7f9 ff23 	bl	800b818 <lwip_htons>
 80119d2:	4603      	mov	r3, r0
 80119d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	8b1a      	ldrh	r2, [r3, #24]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	68dc      	ldr	r4, [r3, #12]
 80119de:	4610      	mov	r0, r2
 80119e0:	f7f9 ff1a 	bl	800b818 <lwip_htons>
 80119e4:	4603      	mov	r3, r0
 80119e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	68dc      	ldr	r4, [r3, #12]
 80119ec:	6838      	ldr	r0, [r7, #0]
 80119ee:	f7f9 ff28 	bl	800b842 <lwip_htonl>
 80119f2:	4603      	mov	r3, r0
 80119f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	089b      	lsrs	r3, r3, #2
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	3305      	adds	r3, #5
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	031b      	lsls	r3, r3, #12
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	79fb      	ldrb	r3, [r7, #7]
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	4313      	orrs	r3, r2
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	693b      	ldr	r3, [r7, #16]
 8011a10:	68dc      	ldr	r4, [r3, #12]
 8011a12:	4610      	mov	r0, r2
 8011a14:	f7f9 ff00 	bl	800b818 <lwip_htons>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011a1c:	693b      	ldr	r3, [r7, #16]
 8011a1e:	68db      	ldr	r3, [r3, #12]
 8011a20:	2200      	movs	r2, #0
 8011a22:	749a      	strb	r2, [r3, #18]
 8011a24:	2200      	movs	r2, #0
 8011a26:	74da      	strb	r2, [r3, #19]
  return seg;
 8011a28:	693b      	ldr	r3, [r7, #16]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	371c      	adds	r7, #28
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd90      	pop	{r4, r7, pc}
 8011a32:	bf00      	nop
 8011a34:	0801bb14 	.word	0x0801bb14
 8011a38:	0801bb48 	.word	0x0801bb48
 8011a3c:	0801bb68 	.word	0x0801bb68
 8011a40:	0801bb90 	.word	0x0801bb90
 8011a44:	0801bbb4 	.word	0x0801bbb4

08011a48 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	607b      	str	r3, [r7, #4]
 8011a50:	4603      	mov	r3, r0
 8011a52:	73fb      	strb	r3, [r7, #15]
 8011a54:	460b      	mov	r3, r1
 8011a56:	81bb      	strh	r3, [r7, #12]
 8011a58:	4613      	mov	r3, r2
 8011a5a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011a5c:	89bb      	ldrh	r3, [r7, #12]
 8011a5e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d105      	bne.n	8011a72 <tcp_pbuf_prealloc+0x2a>
 8011a66:	4b30      	ldr	r3, [pc, #192]	; (8011b28 <tcp_pbuf_prealloc+0xe0>)
 8011a68:	22e8      	movs	r2, #232	; 0xe8
 8011a6a:	4930      	ldr	r1, [pc, #192]	; (8011b2c <tcp_pbuf_prealloc+0xe4>)
 8011a6c:	4830      	ldr	r0, [pc, #192]	; (8011b30 <tcp_pbuf_prealloc+0xe8>)
 8011a6e:	f007 f91b 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011a72:	6a3b      	ldr	r3, [r7, #32]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d105      	bne.n	8011a84 <tcp_pbuf_prealloc+0x3c>
 8011a78:	4b2b      	ldr	r3, [pc, #172]	; (8011b28 <tcp_pbuf_prealloc+0xe0>)
 8011a7a:	22e9      	movs	r2, #233	; 0xe9
 8011a7c:	492d      	ldr	r1, [pc, #180]	; (8011b34 <tcp_pbuf_prealloc+0xec>)
 8011a7e:	482c      	ldr	r0, [pc, #176]	; (8011b30 <tcp_pbuf_prealloc+0xe8>)
 8011a80:	f007 f912 	bl	8018ca8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011a84:	89ba      	ldrh	r2, [r7, #12]
 8011a86:	897b      	ldrh	r3, [r7, #10]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d221      	bcs.n	8011ad0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011a8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011a90:	f003 0302 	and.w	r3, r3, #2
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d111      	bne.n	8011abc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011a98:	6a3b      	ldr	r3, [r7, #32]
 8011a9a:	8b5b      	ldrh	r3, [r3, #26]
 8011a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d115      	bne.n	8011ad0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011aa4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d007      	beq.n	8011abc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011aac:	6a3b      	ldr	r3, [r7, #32]
 8011aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d103      	bne.n	8011abc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011ab4:	6a3b      	ldr	r3, [r7, #32]
 8011ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d009      	beq.n	8011ad0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011abc:	89bb      	ldrh	r3, [r7, #12]
 8011abe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011ac2:	f023 0203 	bic.w	r2, r3, #3
 8011ac6:	897b      	ldrh	r3, [r7, #10]
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	bf28      	it	cs
 8011acc:	4613      	movcs	r3, r2
 8011ace:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011ad0:	8af9      	ldrh	r1, [r7, #22]
 8011ad2:	7bfb      	ldrb	r3, [r7, #15]
 8011ad4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ad8:	4618      	mov	r0, r3
 8011ada:	f7fa ffb7 	bl	800ca4c <pbuf_alloc>
 8011ade:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d101      	bne.n	8011aea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	e019      	b.n	8011b1e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d006      	beq.n	8011b00 <tcp_pbuf_prealloc+0xb8>
 8011af2:	4b0d      	ldr	r3, [pc, #52]	; (8011b28 <tcp_pbuf_prealloc+0xe0>)
 8011af4:	f240 120b 	movw	r2, #267	; 0x10b
 8011af8:	490f      	ldr	r1, [pc, #60]	; (8011b38 <tcp_pbuf_prealloc+0xf0>)
 8011afa:	480d      	ldr	r0, [pc, #52]	; (8011b30 <tcp_pbuf_prealloc+0xe8>)
 8011afc:	f007 f8d4 	bl	8018ca8 <iprintf>
  *oversize = p->len - length;
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	895a      	ldrh	r2, [r3, #10]
 8011b04:	89bb      	ldrh	r3, [r7, #12]
 8011b06:	1ad3      	subs	r3, r2, r3
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	89ba      	ldrh	r2, [r7, #12]
 8011b12:	811a      	strh	r2, [r3, #8]
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	891a      	ldrh	r2, [r3, #8]
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	815a      	strh	r2, [r3, #10]
  return p;
 8011b1c:	693b      	ldr	r3, [r7, #16]
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3718      	adds	r7, #24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	0801bb14 	.word	0x0801bb14
 8011b2c:	0801bbcc 	.word	0x0801bbcc
 8011b30:	0801bb68 	.word	0x0801bb68
 8011b34:	0801bbf0 	.word	0x0801bbf0
 8011b38:	0801bc10 	.word	0x0801bc10

08011b3c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d106      	bne.n	8011b5c <tcp_write_checks+0x20>
 8011b4e:	4b33      	ldr	r3, [pc, #204]	; (8011c1c <tcp_write_checks+0xe0>)
 8011b50:	f240 1233 	movw	r2, #307	; 0x133
 8011b54:	4932      	ldr	r1, [pc, #200]	; (8011c20 <tcp_write_checks+0xe4>)
 8011b56:	4833      	ldr	r0, [pc, #204]	; (8011c24 <tcp_write_checks+0xe8>)
 8011b58:	f007 f8a6 	bl	8018ca8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	7d1b      	ldrb	r3, [r3, #20]
 8011b60:	2b04      	cmp	r3, #4
 8011b62:	d00e      	beq.n	8011b82 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011b68:	2b07      	cmp	r3, #7
 8011b6a:	d00a      	beq.n	8011b82 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d006      	beq.n	8011b82 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011b78:	2b03      	cmp	r3, #3
 8011b7a:	d002      	beq.n	8011b82 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011b7c:	f06f 030a 	mvn.w	r3, #10
 8011b80:	e048      	b.n	8011c14 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011b82:	887b      	ldrh	r3, [r7, #2]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d101      	bne.n	8011b8c <tcp_write_checks+0x50>
    return ERR_OK;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	e043      	b.n	8011c14 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011b92:	887a      	ldrh	r2, [r7, #2]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d909      	bls.n	8011bac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	8b5b      	ldrh	r3, [r3, #26]
 8011b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8011baa:	e033      	b.n	8011c14 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bb2:	2b08      	cmp	r3, #8
 8011bb4:	d909      	bls.n	8011bca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	8b5b      	ldrh	r3, [r3, #26]
 8011bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bbe:	b29a      	uxth	r2, r3
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc8:	e024      	b.n	8011c14 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d00f      	beq.n	8011bf4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d11a      	bne.n	8011c12 <tcp_write_checks+0xd6>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d116      	bne.n	8011c12 <tcp_write_checks+0xd6>
 8011be4:	4b0d      	ldr	r3, [pc, #52]	; (8011c1c <tcp_write_checks+0xe0>)
 8011be6:	f240 1255 	movw	r2, #341	; 0x155
 8011bea:	490f      	ldr	r1, [pc, #60]	; (8011c28 <tcp_write_checks+0xec>)
 8011bec:	480d      	ldr	r0, [pc, #52]	; (8011c24 <tcp_write_checks+0xe8>)
 8011bee:	f007 f85b 	bl	8018ca8 <iprintf>
 8011bf2:	e00e      	b.n	8011c12 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d103      	bne.n	8011c04 <tcp_write_checks+0xc8>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d006      	beq.n	8011c12 <tcp_write_checks+0xd6>
 8011c04:	4b05      	ldr	r3, [pc, #20]	; (8011c1c <tcp_write_checks+0xe0>)
 8011c06:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011c0a:	4908      	ldr	r1, [pc, #32]	; (8011c2c <tcp_write_checks+0xf0>)
 8011c0c:	4805      	ldr	r0, [pc, #20]	; (8011c24 <tcp_write_checks+0xe8>)
 8011c0e:	f007 f84b 	bl	8018ca8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	0801bb14 	.word	0x0801bb14
 8011c20:	0801bc24 	.word	0x0801bc24
 8011c24:	0801bb68 	.word	0x0801bb68
 8011c28:	0801bc44 	.word	0x0801bc44
 8011c2c:	0801bc80 	.word	0x0801bc80

08011c30 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011c30:	b590      	push	{r4, r7, lr}
 8011c32:	b09b      	sub	sp, #108	; 0x6c
 8011c34:	af04      	add	r7, sp, #16
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	460b      	mov	r3, r1
 8011c40:	80fb      	strh	r3, [r7, #6]
 8011c42:	4613      	mov	r3, r2
 8011c44:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011c46:	2300      	movs	r3, #0
 8011c48:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8011c4e:	2300      	movs	r3, #0
 8011c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c52:	2300      	movs	r3, #0
 8011c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c56:	2300      	movs	r3, #0
 8011c58:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011c60:	2300      	movs	r3, #0
 8011c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d109      	bne.n	8011c8c <tcp_write+0x5c>
 8011c78:	4ba4      	ldr	r3, [pc, #656]	; (8011f0c <tcp_write+0x2dc>)
 8011c7a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011c7e:	49a4      	ldr	r1, [pc, #656]	; (8011f10 <tcp_write+0x2e0>)
 8011c80:	48a4      	ldr	r0, [pc, #656]	; (8011f14 <tcp_write+0x2e4>)
 8011c82:	f007 f811 	bl	8018ca8 <iprintf>
 8011c86:	f06f 030f 	mvn.w	r3, #15
 8011c8a:	e32a      	b.n	80122e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011c92:	085b      	lsrs	r3, r3, #1
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	bf28      	it	cs
 8011c9e:	4613      	movcs	r3, r2
 8011ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d102      	bne.n	8011cae <tcp_write+0x7e>
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cac:	e000      	b.n	8011cb0 <tcp_write+0x80>
 8011cae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011cb0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d109      	bne.n	8011ccc <tcp_write+0x9c>
 8011cb8:	4b94      	ldr	r3, [pc, #592]	; (8011f0c <tcp_write+0x2dc>)
 8011cba:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011cbe:	4996      	ldr	r1, [pc, #600]	; (8011f18 <tcp_write+0x2e8>)
 8011cc0:	4894      	ldr	r0, [pc, #592]	; (8011f14 <tcp_write+0x2e4>)
 8011cc2:	f006 fff1 	bl	8018ca8 <iprintf>
 8011cc6:	f06f 030f 	mvn.w	r3, #15
 8011cca:	e30a      	b.n	80122e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011ccc:	88fb      	ldrh	r3, [r7, #6]
 8011cce:	4619      	mov	r1, r3
 8011cd0:	68f8      	ldr	r0, [r7, #12]
 8011cd2:	f7ff ff33 	bl	8011b3c <tcp_write_checks>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011cdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d002      	beq.n	8011cea <tcp_write+0xba>
    return err;
 8011ce4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011ce8:	e2fb      	b.n	80122e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cf0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	f000 80f6 	beq.w	8011ef0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d08:	653b      	str	r3, [r7, #80]	; 0x50
 8011d0a:	e002      	b.n	8011d12 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d1f8      	bne.n	8011d0c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d1c:	7a9b      	ldrb	r3, [r3, #10]
 8011d1e:	009b      	lsls	r3, r3, #2
 8011d20:	b29b      	uxth	r3, r3
 8011d22:	f003 0304 	and.w	r3, r3, #4
 8011d26:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011d28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d2c:	891b      	ldrh	r3, [r3, #8]
 8011d2e:	4619      	mov	r1, r3
 8011d30:	8c3b      	ldrh	r3, [r7, #32]
 8011d32:	440b      	add	r3, r1
 8011d34:	429a      	cmp	r2, r3
 8011d36:	da06      	bge.n	8011d46 <tcp_write+0x116>
 8011d38:	4b74      	ldr	r3, [pc, #464]	; (8011f0c <tcp_write+0x2dc>)
 8011d3a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011d3e:	4977      	ldr	r1, [pc, #476]	; (8011f1c <tcp_write+0x2ec>)
 8011d40:	4874      	ldr	r0, [pc, #464]	; (8011f14 <tcp_write+0x2e4>)
 8011d42:	f006 ffb1 	bl	8018ca8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d48:	891a      	ldrh	r2, [r3, #8]
 8011d4a:	8c3b      	ldrh	r3, [r7, #32]
 8011d4c:	4413      	add	r3, r2
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d52:	1ad3      	subs	r3, r2, r3
 8011d54:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011d5c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011d5e:	8a7b      	ldrh	r3, [r7, #18]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d026      	beq.n	8011db2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011d64:	8a7b      	ldrh	r3, [r7, #18]
 8011d66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d206      	bcs.n	8011d7a <tcp_write+0x14a>
 8011d6c:	4b67      	ldr	r3, [pc, #412]	; (8011f0c <tcp_write+0x2dc>)
 8011d6e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011d72:	496b      	ldr	r1, [pc, #428]	; (8011f20 <tcp_write+0x2f0>)
 8011d74:	4867      	ldr	r0, [pc, #412]	; (8011f14 <tcp_write+0x2e4>)
 8011d76:	f006 ff97 	bl	8018ca8 <iprintf>
      seg = last_unsent;
 8011d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011d7e:	8a7b      	ldrh	r3, [r7, #18]
 8011d80:	88fa      	ldrh	r2, [r7, #6]
 8011d82:	4293      	cmp	r3, r2
 8011d84:	bf28      	it	cs
 8011d86:	4613      	movcs	r3, r2
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011d8c:	4293      	cmp	r3, r2
 8011d8e:	bf28      	it	cs
 8011d90:	4613      	movcs	r3, r2
 8011d92:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011d94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011da0:	8a7a      	ldrh	r2, [r7, #18]
 8011da2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011daa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011dac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011db2:	8a7b      	ldrh	r3, [r7, #18]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00b      	beq.n	8011dd0 <tcp_write+0x1a0>
 8011db8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dbc:	88fb      	ldrh	r3, [r7, #6]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d006      	beq.n	8011dd0 <tcp_write+0x1a0>
 8011dc2:	4b52      	ldr	r3, [pc, #328]	; (8011f0c <tcp_write+0x2dc>)
 8011dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dc8:	4956      	ldr	r1, [pc, #344]	; (8011f24 <tcp_write+0x2f4>)
 8011dca:	4852      	ldr	r0, [pc, #328]	; (8011f14 <tcp_write+0x2e4>)
 8011dcc:	f006 ff6c 	bl	8018ca8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011dd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011dd4:	88fb      	ldrh	r3, [r7, #6]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	f080 8167 	bcs.w	80120aa <tcp_write+0x47a>
 8011ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f000 8163 	beq.w	80120aa <tcp_write+0x47a>
 8011de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011de6:	891b      	ldrh	r3, [r3, #8]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	f000 815e 	beq.w	80120aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011dee:	88fa      	ldrh	r2, [r7, #6]
 8011df0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011df4:	1ad2      	subs	r2, r2, r3
 8011df6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	bfa8      	it	ge
 8011dfc:	4613      	movge	r3, r2
 8011dfe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e02:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011e04:	797b      	ldrb	r3, [r7, #5]
 8011e06:	f003 0301 	and.w	r3, r3, #1
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d027      	beq.n	8011e5e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011e0e:	f107 0012 	add.w	r0, r7, #18
 8011e12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011e14:	8bf9      	ldrh	r1, [r7, #30]
 8011e16:	2301      	movs	r3, #1
 8011e18:	9302      	str	r3, [sp, #8]
 8011e1a:	797b      	ldrb	r3, [r7, #5]
 8011e1c:	9301      	str	r3, [sp, #4]
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	9300      	str	r3, [sp, #0]
 8011e22:	4603      	mov	r3, r0
 8011e24:	2000      	movs	r0, #0
 8011e26:	f7ff fe0f 	bl	8011a48 <tcp_pbuf_prealloc>
 8011e2a:	6578      	str	r0, [r7, #84]	; 0x54
 8011e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 8225 	beq.w	801227e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e36:	6858      	ldr	r0, [r3, #4]
 8011e38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	4413      	add	r3, r2
 8011e40:	8bfa      	ldrh	r2, [r7, #30]
 8011e42:	4619      	mov	r1, r3
 8011e44:	f007 f822 	bl	8018e8c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011e48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011e4a:	f7fb f971 	bl	800d130 <pbuf_clen>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	461a      	mov	r2, r3
 8011e52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011e56:	4413      	add	r3, r2
 8011e58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011e5c:	e041      	b.n	8011ee2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	637b      	str	r3, [r7, #52]	; 0x34
 8011e64:	e002      	b.n	8011e6c <tcp_write+0x23c>
 8011e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d1f8      	bne.n	8011e66 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e76:	7b1b      	ldrb	r3, [r3, #12]
 8011e78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d115      	bne.n	8011eac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e86:	8952      	ldrh	r2, [r2, #10]
 8011e88:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011e8a:	68ba      	ldr	r2, [r7, #8]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d10d      	bne.n	8011eac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d006      	beq.n	8011ea6 <tcp_write+0x276>
 8011e98:	4b1c      	ldr	r3, [pc, #112]	; (8011f0c <tcp_write+0x2dc>)
 8011e9a:	f240 2231 	movw	r2, #561	; 0x231
 8011e9e:	4922      	ldr	r1, [pc, #136]	; (8011f28 <tcp_write+0x2f8>)
 8011ea0:	481c      	ldr	r0, [pc, #112]	; (8011f14 <tcp_write+0x2e4>)
 8011ea2:	f006 ff01 	bl	8018ca8 <iprintf>
          extendlen = seglen;
 8011ea6:	8bfb      	ldrh	r3, [r7, #30]
 8011ea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011eaa:	e01a      	b.n	8011ee2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011eac:	8bfb      	ldrh	r3, [r7, #30]
 8011eae:	2201      	movs	r2, #1
 8011eb0:	4619      	mov	r1, r3
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	f7fa fdca 	bl	800ca4c <pbuf_alloc>
 8011eb8:	6578      	str	r0, [r7, #84]	; 0x54
 8011eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f000 81e0 	beq.w	8012282 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8011ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	441a      	add	r2, r3
 8011eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ecc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011ece:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011ed0:	f7fb f92e 	bl	800d130 <pbuf_clen>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011edc:	4413      	add	r3, r2
 8011ede:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011ee2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ee6:	8bfb      	ldrh	r3, [r7, #30]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011eee:	e0dc      	b.n	80120aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f000 80d7 	beq.w	80120aa <tcp_write+0x47a>
 8011efc:	4b03      	ldr	r3, [pc, #12]	; (8011f0c <tcp_write+0x2dc>)
 8011efe:	f240 224a 	movw	r2, #586	; 0x24a
 8011f02:	490a      	ldr	r1, [pc, #40]	; (8011f2c <tcp_write+0x2fc>)
 8011f04:	4803      	ldr	r0, [pc, #12]	; (8011f14 <tcp_write+0x2e4>)
 8011f06:	f006 fecf 	bl	8018ca8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011f0a:	e0ce      	b.n	80120aa <tcp_write+0x47a>
 8011f0c:	0801bb14 	.word	0x0801bb14
 8011f10:	0801bcb4 	.word	0x0801bcb4
 8011f14:	0801bb68 	.word	0x0801bb68
 8011f18:	0801bccc 	.word	0x0801bccc
 8011f1c:	0801bd00 	.word	0x0801bd00
 8011f20:	0801bd18 	.word	0x0801bd18
 8011f24:	0801bd38 	.word	0x0801bd38
 8011f28:	0801bd58 	.word	0x0801bd58
 8011f2c:	0801bd84 	.word	0x0801bd84
    struct pbuf *p;
    u16_t left = len - pos;
 8011f30:	88fa      	ldrh	r2, [r7, #6]
 8011f32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011f36:	1ad3      	subs	r3, r2, r3
 8011f38:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011f3a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f42:	1ad3      	subs	r3, r2, r3
 8011f44:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011f46:	8b7a      	ldrh	r2, [r7, #26]
 8011f48:	8bbb      	ldrh	r3, [r7, #28]
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	bf28      	it	cs
 8011f4e:	4613      	movcs	r3, r2
 8011f50:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f52:	797b      	ldrb	r3, [r7, #5]
 8011f54:	f003 0301 	and.w	r3, r3, #1
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d036      	beq.n	8011fca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011f60:	b29a      	uxth	r2, r3
 8011f62:	8b3b      	ldrh	r3, [r7, #24]
 8011f64:	4413      	add	r3, r2
 8011f66:	b299      	uxth	r1, r3
 8011f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	bf0c      	ite	eq
 8011f6e:	2301      	moveq	r3, #1
 8011f70:	2300      	movne	r3, #0
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	f107 0012 	add.w	r0, r7, #18
 8011f78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f7a:	9302      	str	r3, [sp, #8]
 8011f7c:	797b      	ldrb	r3, [r7, #5]
 8011f7e:	9301      	str	r3, [sp, #4]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	4603      	mov	r3, r0
 8011f86:	2036      	movs	r0, #54	; 0x36
 8011f88:	f7ff fd5e 	bl	8011a48 <tcp_pbuf_prealloc>
 8011f8c:	6338      	str	r0, [r7, #48]	; 0x30
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	f000 8178 	beq.w	8012286 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	895b      	ldrh	r3, [r3, #10]
 8011f9a:	8b3a      	ldrh	r2, [r7, #24]
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d906      	bls.n	8011fae <tcp_write+0x37e>
 8011fa0:	4b8c      	ldr	r3, [pc, #560]	; (80121d4 <tcp_write+0x5a4>)
 8011fa2:	f240 2266 	movw	r2, #614	; 0x266
 8011fa6:	498c      	ldr	r1, [pc, #560]	; (80121d8 <tcp_write+0x5a8>)
 8011fa8:	488c      	ldr	r0, [pc, #560]	; (80121dc <tcp_write+0x5ac>)
 8011faa:	f006 fe7d 	bl	8018ca8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb0:	685a      	ldr	r2, [r3, #4]
 8011fb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011fb6:	18d0      	adds	r0, r2, r3
 8011fb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	4413      	add	r3, r2
 8011fc0:	8b3a      	ldrh	r2, [r7, #24]
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	f006 ff62 	bl	8018e8c <memcpy>
 8011fc8:	e02f      	b.n	801202a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011fca:	8a7b      	ldrh	r3, [r7, #18]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d006      	beq.n	8011fde <tcp_write+0x3ae>
 8011fd0:	4b80      	ldr	r3, [pc, #512]	; (80121d4 <tcp_write+0x5a4>)
 8011fd2:	f240 2271 	movw	r2, #625	; 0x271
 8011fd6:	4982      	ldr	r1, [pc, #520]	; (80121e0 <tcp_write+0x5b0>)
 8011fd8:	4880      	ldr	r0, [pc, #512]	; (80121dc <tcp_write+0x5ac>)
 8011fda:	f006 fe65 	bl	8018ca8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011fde:	8b3b      	ldrh	r3, [r7, #24]
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	2036      	movs	r0, #54	; 0x36
 8011fe6:	f7fa fd31 	bl	800ca4c <pbuf_alloc>
 8011fea:	6178      	str	r0, [r7, #20]
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f000 814b 	beq.w	801228a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011ff4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ff8:	68ba      	ldr	r2, [r7, #8]
 8011ffa:	441a      	add	r2, r3
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012000:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012004:	b29b      	uxth	r3, r3
 8012006:	f44f 7220 	mov.w	r2, #640	; 0x280
 801200a:	4619      	mov	r1, r3
 801200c:	2036      	movs	r0, #54	; 0x36
 801200e:	f7fa fd1d 	bl	800ca4c <pbuf_alloc>
 8012012:	6338      	str	r0, [r7, #48]	; 0x30
 8012014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012016:	2b00      	cmp	r3, #0
 8012018:	d103      	bne.n	8012022 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801201a:	6978      	ldr	r0, [r7, #20]
 801201c:	f7fa fffa 	bl	800d014 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012020:	e136      	b.n	8012290 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012022:	6979      	ldr	r1, [r7, #20]
 8012024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012026:	f7fb f8c3 	bl	800d1b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801202a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801202c:	f7fb f880 	bl	800d130 <pbuf_clen>
 8012030:	4603      	mov	r3, r0
 8012032:	461a      	mov	r2, r3
 8012034:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012038:	4413      	add	r3, r2
 801203a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801203e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012042:	2b09      	cmp	r3, #9
 8012044:	d903      	bls.n	801204e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012048:	f7fa ffe4 	bl	800d014 <pbuf_free>
      goto memerr;
 801204c:	e120      	b.n	8012290 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012056:	441a      	add	r2, r3
 8012058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	4613      	mov	r3, r2
 8012060:	2200      	movs	r2, #0
 8012062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7ff fc51 	bl	801190c <tcp_create_segment>
 801206a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801206e:	2b00      	cmp	r3, #0
 8012070:	f000 810d 	beq.w	801228e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012076:	2b00      	cmp	r3, #0
 8012078:	d102      	bne.n	8012080 <tcp_write+0x450>
      queue = seg;
 801207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801207c:	647b      	str	r3, [r7, #68]	; 0x44
 801207e:	e00c      	b.n	801209a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012082:	2b00      	cmp	r3, #0
 8012084:	d106      	bne.n	8012094 <tcp_write+0x464>
 8012086:	4b53      	ldr	r3, [pc, #332]	; (80121d4 <tcp_write+0x5a4>)
 8012088:	f240 22ab 	movw	r2, #683	; 0x2ab
 801208c:	4955      	ldr	r1, [pc, #340]	; (80121e4 <tcp_write+0x5b4>)
 801208e:	4853      	ldr	r0, [pc, #332]	; (80121dc <tcp_write+0x5ac>)
 8012090:	f006 fe0a 	bl	8018ca8 <iprintf>
      prev_seg->next = seg;
 8012094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012096:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012098:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801209a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801209c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801209e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120a2:	8b3b      	ldrh	r3, [r7, #24]
 80120a4:	4413      	add	r3, r2
 80120a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80120aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80120ae:	88fb      	ldrh	r3, [r7, #6]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	f4ff af3d 	bcc.w	8011f30 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80120b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d02c      	beq.n	8012116 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80120bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120c2:	e01e      	b.n	8012102 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	891a      	ldrh	r2, [r3, #8]
 80120c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120ca:	4413      	add	r3, r2
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80120d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d110      	bne.n	80120fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80120da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120dc:	685b      	ldr	r3, [r3, #4]
 80120de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e0:	8952      	ldrh	r2, [r2, #10]
 80120e2:	4413      	add	r3, r2
 80120e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80120e6:	68b9      	ldr	r1, [r7, #8]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f006 fecf 	bl	8018e8c <memcpy>
        p->len += oversize_used;
 80120ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f0:	895a      	ldrh	r2, [r3, #10]
 80120f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80120f4:	4413      	add	r3, r2
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1dd      	bne.n	80120c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801210a:	891a      	ldrh	r2, [r3, #8]
 801210c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801210e:	4413      	add	r3, r2
 8012110:	b29a      	uxth	r2, r3
 8012112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012114:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012116:	8a7a      	ldrh	r2, [r7, #18]
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012120:	2b00      	cmp	r3, #0
 8012122:	d018      	beq.n	8012156 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <tcp_write+0x508>
 801212a:	4b2a      	ldr	r3, [pc, #168]	; (80121d4 <tcp_write+0x5a4>)
 801212c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012130:	492d      	ldr	r1, [pc, #180]	; (80121e8 <tcp_write+0x5b8>)
 8012132:	482a      	ldr	r0, [pc, #168]	; (80121dc <tcp_write+0x5ac>)
 8012134:	f006 fdb8 	bl	8018ca8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801213e:	4618      	mov	r0, r3
 8012140:	f7fb f836 	bl	800d1b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012146:	891a      	ldrh	r2, [r3, #8]
 8012148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801214a:	891b      	ldrh	r3, [r3, #8]
 801214c:	4413      	add	r3, r2
 801214e:	b29a      	uxth	r2, r3
 8012150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012152:	811a      	strh	r2, [r3, #8]
 8012154:	e037      	b.n	80121c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012156:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012158:	2b00      	cmp	r3, #0
 801215a:	d034      	beq.n	80121c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801215c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801215e:	2b00      	cmp	r3, #0
 8012160:	d003      	beq.n	801216a <tcp_write+0x53a>
 8012162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d106      	bne.n	8012178 <tcp_write+0x548>
 801216a:	4b1a      	ldr	r3, [pc, #104]	; (80121d4 <tcp_write+0x5a4>)
 801216c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012170:	491e      	ldr	r1, [pc, #120]	; (80121ec <tcp_write+0x5bc>)
 8012172:	481a      	ldr	r0, [pc, #104]	; (80121dc <tcp_write+0x5ac>)
 8012174:	f006 fd98 	bl	8018ca8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	62bb      	str	r3, [r7, #40]	; 0x28
 801217e:	e009      	b.n	8012194 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012182:	891a      	ldrh	r2, [r3, #8]
 8012184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012186:	4413      	add	r3, r2
 8012188:	b29a      	uxth	r2, r3
 801218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801218c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	62bb      	str	r3, [r7, #40]	; 0x28
 8012194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d1f1      	bne.n	8012180 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801219c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801219e:	891a      	ldrh	r2, [r3, #8]
 80121a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121a2:	4413      	add	r3, r2
 80121a4:	b29a      	uxth	r2, r3
 80121a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80121aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ac:	895a      	ldrh	r2, [r3, #10]
 80121ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121b0:	4413      	add	r3, r2
 80121b2:	b29a      	uxth	r2, r3
 80121b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80121b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121ba:	891a      	ldrh	r2, [r3, #8]
 80121bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80121be:	4413      	add	r3, r2
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80121c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d111      	bne.n	80121f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80121d2:	e010      	b.n	80121f6 <tcp_write+0x5c6>
 80121d4:	0801bb14 	.word	0x0801bb14
 80121d8:	0801bdb4 	.word	0x0801bdb4
 80121dc:	0801bb68 	.word	0x0801bb68
 80121e0:	0801bdf4 	.word	0x0801bdf4
 80121e4:	0801be04 	.word	0x0801be04
 80121e8:	0801be18 	.word	0x0801be18
 80121ec:	0801be50 	.word	0x0801be50
  } else {
    last_unsent->next = queue;
 80121f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80121fa:	88fb      	ldrh	r3, [r7, #6]
 80121fc:	441a      	add	r2, r3
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012208:	88fb      	ldrh	r3, [r7, #6]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	b29a      	uxth	r2, r3
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801221a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00e      	beq.n	8012246 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801222c:	2b00      	cmp	r3, #0
 801222e:	d10a      	bne.n	8012246 <tcp_write+0x616>
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012234:	2b00      	cmp	r3, #0
 8012236:	d106      	bne.n	8012246 <tcp_write+0x616>
 8012238:	4b2c      	ldr	r3, [pc, #176]	; (80122ec <tcp_write+0x6bc>)
 801223a:	f240 3212 	movw	r2, #786	; 0x312
 801223e:	492c      	ldr	r1, [pc, #176]	; (80122f0 <tcp_write+0x6c0>)
 8012240:	482c      	ldr	r0, [pc, #176]	; (80122f4 <tcp_write+0x6c4>)
 8012242:	f006 fd31 	bl	8018ca8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012248:	2b00      	cmp	r3, #0
 801224a:	d016      	beq.n	801227a <tcp_write+0x64a>
 801224c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801224e:	68db      	ldr	r3, [r3, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d012      	beq.n	801227a <tcp_write+0x64a>
 8012254:	797b      	ldrb	r3, [r7, #5]
 8012256:	f003 0302 	and.w	r3, r3, #2
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10d      	bne.n	801227a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801225e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	899b      	ldrh	r3, [r3, #12]
 8012264:	b29c      	uxth	r4, r3
 8012266:	2008      	movs	r0, #8
 8012268:	f7f9 fad6 	bl	800b818 <lwip_htons>
 801226c:	4603      	mov	r3, r0
 801226e:	461a      	mov	r2, r3
 8012270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	4322      	orrs	r2, r4
 8012276:	b292      	uxth	r2, r2
 8012278:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	e031      	b.n	80122e2 <tcp_write+0x6b2>
          goto memerr;
 801227e:	bf00      	nop
 8012280:	e006      	b.n	8012290 <tcp_write+0x660>
            goto memerr;
 8012282:	bf00      	nop
 8012284:	e004      	b.n	8012290 <tcp_write+0x660>
        goto memerr;
 8012286:	bf00      	nop
 8012288:	e002      	b.n	8012290 <tcp_write+0x660>
        goto memerr;
 801228a:	bf00      	nop
 801228c:	e000      	b.n	8012290 <tcp_write+0x660>
      goto memerr;
 801228e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	8b5b      	ldrh	r3, [r3, #26]
 8012294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012298:	b29a      	uxth	r2, r3
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801229e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d002      	beq.n	80122aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80122a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80122a6:	f7fa feb5 	bl	800d014 <pbuf_free>
  }
  if (queue != NULL) {
 80122aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d002      	beq.n	80122b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80122b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80122b2:	f7fc fb83 	bl	800e9bc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00e      	beq.n	80122de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d10a      	bne.n	80122de <tcp_write+0x6ae>
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d106      	bne.n	80122de <tcp_write+0x6ae>
 80122d0:	4b06      	ldr	r3, [pc, #24]	; (80122ec <tcp_write+0x6bc>)
 80122d2:	f240 3227 	movw	r2, #807	; 0x327
 80122d6:	4906      	ldr	r1, [pc, #24]	; (80122f0 <tcp_write+0x6c0>)
 80122d8:	4806      	ldr	r0, [pc, #24]	; (80122f4 <tcp_write+0x6c4>)
 80122da:	f006 fce5 	bl	8018ca8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80122de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	375c      	adds	r7, #92	; 0x5c
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd90      	pop	{r4, r7, pc}
 80122ea:	bf00      	nop
 80122ec:	0801bb14 	.word	0x0801bb14
 80122f0:	0801be88 	.word	0x0801be88
 80122f4:	0801bb68 	.word	0x0801bb68

080122f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80122f8:	b590      	push	{r4, r7, lr}
 80122fa:	b08b      	sub	sp, #44	; 0x2c
 80122fc:	af02      	add	r7, sp, #8
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	460b      	mov	r3, r1
 8012302:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012304:	2300      	movs	r3, #0
 8012306:	61fb      	str	r3, [r7, #28]
 8012308:	2300      	movs	r3, #0
 801230a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801230c:	2300      	movs	r3, #0
 801230e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d106      	bne.n	8012324 <tcp_split_unsent_seg+0x2c>
 8012316:	4b95      	ldr	r3, [pc, #596]	; (801256c <tcp_split_unsent_seg+0x274>)
 8012318:	f240 324b 	movw	r2, #843	; 0x34b
 801231c:	4994      	ldr	r1, [pc, #592]	; (8012570 <tcp_split_unsent_seg+0x278>)
 801231e:	4895      	ldr	r0, [pc, #596]	; (8012574 <tcp_split_unsent_seg+0x27c>)
 8012320:	f006 fcc2 	bl	8018ca8 <iprintf>

  useg = pcb->unsent;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012328:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d102      	bne.n	8012336 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012330:	f04f 33ff 	mov.w	r3, #4294967295
 8012334:	e116      	b.n	8012564 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012336:	887b      	ldrh	r3, [r7, #2]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d109      	bne.n	8012350 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801233c:	4b8b      	ldr	r3, [pc, #556]	; (801256c <tcp_split_unsent_seg+0x274>)
 801233e:	f240 3253 	movw	r2, #851	; 0x353
 8012342:	498d      	ldr	r1, [pc, #564]	; (8012578 <tcp_split_unsent_seg+0x280>)
 8012344:	488b      	ldr	r0, [pc, #556]	; (8012574 <tcp_split_unsent_seg+0x27c>)
 8012346:	f006 fcaf 	bl	8018ca8 <iprintf>
    return ERR_VAL;
 801234a:	f06f 0305 	mvn.w	r3, #5
 801234e:	e109      	b.n	8012564 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	891b      	ldrh	r3, [r3, #8]
 8012354:	887a      	ldrh	r2, [r7, #2]
 8012356:	429a      	cmp	r2, r3
 8012358:	d301      	bcc.n	801235e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801235a:	2300      	movs	r3, #0
 801235c:	e102      	b.n	8012564 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012362:	887a      	ldrh	r2, [r7, #2]
 8012364:	429a      	cmp	r2, r3
 8012366:	d906      	bls.n	8012376 <tcp_split_unsent_seg+0x7e>
 8012368:	4b80      	ldr	r3, [pc, #512]	; (801256c <tcp_split_unsent_seg+0x274>)
 801236a:	f240 325b 	movw	r2, #859	; 0x35b
 801236e:	4983      	ldr	r1, [pc, #524]	; (801257c <tcp_split_unsent_seg+0x284>)
 8012370:	4880      	ldr	r0, [pc, #512]	; (8012574 <tcp_split_unsent_seg+0x27c>)
 8012372:	f006 fc99 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	891b      	ldrh	r3, [r3, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <tcp_split_unsent_seg+0x94>
 801237e:	4b7b      	ldr	r3, [pc, #492]	; (801256c <tcp_split_unsent_seg+0x274>)
 8012380:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012384:	497e      	ldr	r1, [pc, #504]	; (8012580 <tcp_split_unsent_seg+0x288>)
 8012386:	487b      	ldr	r0, [pc, #492]	; (8012574 <tcp_split_unsent_seg+0x27c>)
 8012388:	f006 fc8e 	bl	8018ca8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	7a9b      	ldrb	r3, [r3, #10]
 8012390:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	b2db      	uxtb	r3, r3
 8012398:	f003 0304 	and.w	r3, r3, #4
 801239c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801239e:	697b      	ldr	r3, [r7, #20]
 80123a0:	891a      	ldrh	r2, [r3, #8]
 80123a2:	887b      	ldrh	r3, [r7, #2]
 80123a4:	1ad3      	subs	r3, r2, r3
 80123a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80123a8:	7bbb      	ldrb	r3, [r7, #14]
 80123aa:	b29a      	uxth	r2, r3
 80123ac:	89bb      	ldrh	r3, [r7, #12]
 80123ae:	4413      	add	r3, r2
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123b6:	4619      	mov	r1, r3
 80123b8:	2036      	movs	r0, #54	; 0x36
 80123ba:	f7fa fb47 	bl	800ca4c <pbuf_alloc>
 80123be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f000 80b7 	beq.w	8012536 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	891a      	ldrh	r2, [r3, #8]
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	891b      	ldrh	r3, [r3, #8]
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	887b      	ldrh	r3, [r7, #2]
 80123d8:	4413      	add	r3, r2
 80123da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	6858      	ldr	r0, [r3, #4]
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	685a      	ldr	r2, [r3, #4]
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
 80123e6:	18d1      	adds	r1, r2, r3
 80123e8:	897b      	ldrh	r3, [r7, #10]
 80123ea:	89ba      	ldrh	r2, [r7, #12]
 80123ec:	f7fb f818 	bl	800d420 <pbuf_copy_partial>
 80123f0:	4603      	mov	r3, r0
 80123f2:	461a      	mov	r2, r3
 80123f4:	89bb      	ldrh	r3, [r7, #12]
 80123f6:	4293      	cmp	r3, r2
 80123f8:	f040 809f 	bne.w	801253a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	68db      	ldr	r3, [r3, #12]
 8012400:	899b      	ldrh	r3, [r3, #12]
 8012402:	b29b      	uxth	r3, r3
 8012404:	4618      	mov	r0, r3
 8012406:	f7f9 fa07 	bl	800b818 <lwip_htons>
 801240a:	4603      	mov	r3, r0
 801240c:	b2db      	uxtb	r3, r3
 801240e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012412:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012414:	2300      	movs	r3, #0
 8012416:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012418:	7efb      	ldrb	r3, [r7, #27]
 801241a:	f003 0308 	and.w	r3, r3, #8
 801241e:	2b00      	cmp	r3, #0
 8012420:	d007      	beq.n	8012432 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012422:	7efb      	ldrb	r3, [r7, #27]
 8012424:	f023 0308 	bic.w	r3, r3, #8
 8012428:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801242a:	7ebb      	ldrb	r3, [r7, #26]
 801242c:	f043 0308 	orr.w	r3, r3, #8
 8012430:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012432:	7efb      	ldrb	r3, [r7, #27]
 8012434:	f003 0301 	and.w	r3, r3, #1
 8012438:	2b00      	cmp	r3, #0
 801243a:	d007      	beq.n	801244c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801243c:	7efb      	ldrb	r3, [r7, #27]
 801243e:	f023 0301 	bic.w	r3, r3, #1
 8012442:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012444:	7ebb      	ldrb	r3, [r7, #26]
 8012446:	f043 0301 	orr.w	r3, r3, #1
 801244a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f7f9 f9f5 	bl	800b842 <lwip_htonl>
 8012458:	4602      	mov	r2, r0
 801245a:	887b      	ldrh	r3, [r7, #2]
 801245c:	18d1      	adds	r1, r2, r3
 801245e:	7eba      	ldrb	r2, [r7, #26]
 8012460:	7bfb      	ldrb	r3, [r7, #15]
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	460b      	mov	r3, r1
 8012466:	6939      	ldr	r1, [r7, #16]
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff fa4f 	bl	801190c <tcp_create_segment>
 801246e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d063      	beq.n	801253e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	4618      	mov	r0, r3
 801247c:	f7fa fe58 	bl	800d130 <pbuf_clen>
 8012480:	4603      	mov	r3, r0
 8012482:	461a      	mov	r2, r3
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801248a:	1a9b      	subs	r3, r3, r2
 801248c:	b29a      	uxth	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	6858      	ldr	r0, [r3, #4]
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	891a      	ldrh	r2, [r3, #8]
 801249e:	89bb      	ldrh	r3, [r7, #12]
 80124a0:	1ad3      	subs	r3, r2, r3
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	4619      	mov	r1, r3
 80124a6:	f7fa fc2f 	bl	800cd08 <pbuf_realloc>
  useg->len -= remainder;
 80124aa:	697b      	ldr	r3, [r7, #20]
 80124ac:	891a      	ldrh	r2, [r3, #8]
 80124ae:	89bb      	ldrh	r3, [r7, #12]
 80124b0:	1ad3      	subs	r3, r2, r3
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	68db      	ldr	r3, [r3, #12]
 80124bc:	899b      	ldrh	r3, [r3, #12]
 80124be:	b29c      	uxth	r4, r3
 80124c0:	7efb      	ldrb	r3, [r7, #27]
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f9 f9a7 	bl	800b818 <lwip_htons>
 80124ca:	4603      	mov	r3, r0
 80124cc:	461a      	mov	r2, r3
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	4322      	orrs	r2, r4
 80124d4:	b292      	uxth	r2, r2
 80124d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fa fe27 	bl	800d130 <pbuf_clen>
 80124e2:	4603      	mov	r3, r0
 80124e4:	461a      	mov	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124ec:	4413      	add	r3, r2
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80124f6:	69fb      	ldr	r3, [r7, #28]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7fa fe18 	bl	800d130 <pbuf_clen>
 8012500:	4603      	mov	r3, r0
 8012502:	461a      	mov	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801250a:	4413      	add	r3, r2
 801250c:	b29a      	uxth	r2, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	69fa      	ldr	r2, [r7, #28]
 8012520:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d103      	bne.n	8012532 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	2200      	movs	r2, #0
 801252e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012532:	2300      	movs	r3, #0
 8012534:	e016      	b.n	8012564 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012536:	bf00      	nop
 8012538:	e002      	b.n	8012540 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801253a:	bf00      	nop
 801253c:	e000      	b.n	8012540 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801253e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d006      	beq.n	8012554 <tcp_split_unsent_seg+0x25c>
 8012546:	4b09      	ldr	r3, [pc, #36]	; (801256c <tcp_split_unsent_seg+0x274>)
 8012548:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801254c:	490d      	ldr	r1, [pc, #52]	; (8012584 <tcp_split_unsent_seg+0x28c>)
 801254e:	4809      	ldr	r0, [pc, #36]	; (8012574 <tcp_split_unsent_seg+0x27c>)
 8012550:	f006 fbaa 	bl	8018ca8 <iprintf>
  if (p != NULL) {
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d002      	beq.n	8012560 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801255a:	6938      	ldr	r0, [r7, #16]
 801255c:	f7fa fd5a 	bl	800d014 <pbuf_free>
  }

  return ERR_MEM;
 8012560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012564:	4618      	mov	r0, r3
 8012566:	3724      	adds	r7, #36	; 0x24
 8012568:	46bd      	mov	sp, r7
 801256a:	bd90      	pop	{r4, r7, pc}
 801256c:	0801bb14 	.word	0x0801bb14
 8012570:	0801bea8 	.word	0x0801bea8
 8012574:	0801bb68 	.word	0x0801bb68
 8012578:	0801becc 	.word	0x0801becc
 801257c:	0801bef0 	.word	0x0801bef0
 8012580:	0801bf00 	.word	0x0801bf00
 8012584:	0801bf10 	.word	0x0801bf10

08012588 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012588:	b590      	push	{r4, r7, lr}
 801258a:	b085      	sub	sp, #20
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d106      	bne.n	80125a4 <tcp_send_fin+0x1c>
 8012596:	4b21      	ldr	r3, [pc, #132]	; (801261c <tcp_send_fin+0x94>)
 8012598:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801259c:	4920      	ldr	r1, [pc, #128]	; (8012620 <tcp_send_fin+0x98>)
 801259e:	4821      	ldr	r0, [pc, #132]	; (8012624 <tcp_send_fin+0x9c>)
 80125a0:	f006 fb82 	bl	8018ca8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d02e      	beq.n	801260a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	e002      	b.n	80125ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1f8      	bne.n	80125b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	68db      	ldr	r3, [r3, #12]
 80125c6:	899b      	ldrh	r3, [r3, #12]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7f9 f924 	bl	800b818 <lwip_htons>
 80125d0:	4603      	mov	r3, r0
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	f003 0307 	and.w	r3, r3, #7
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d116      	bne.n	801260a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	899b      	ldrh	r3, [r3, #12]
 80125e2:	b29c      	uxth	r4, r3
 80125e4:	2001      	movs	r0, #1
 80125e6:	f7f9 f917 	bl	800b818 <lwip_htons>
 80125ea:	4603      	mov	r3, r0
 80125ec:	461a      	mov	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	68db      	ldr	r3, [r3, #12]
 80125f2:	4322      	orrs	r2, r4
 80125f4:	b292      	uxth	r2, r2
 80125f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	8b5b      	ldrh	r3, [r3, #26]
 80125fc:	f043 0320 	orr.w	r3, r3, #32
 8012600:	b29a      	uxth	r2, r3
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012606:	2300      	movs	r3, #0
 8012608:	e004      	b.n	8012614 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801260a:	2101      	movs	r1, #1
 801260c:	6878      	ldr	r0, [r7, #4]
 801260e:	f000 f80b 	bl	8012628 <tcp_enqueue_flags>
 8012612:	4603      	mov	r3, r0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3714      	adds	r7, #20
 8012618:	46bd      	mov	sp, r7
 801261a:	bd90      	pop	{r4, r7, pc}
 801261c:	0801bb14 	.word	0x0801bb14
 8012620:	0801bf1c 	.word	0x0801bf1c
 8012624:	0801bb68 	.word	0x0801bb68

08012628 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b08a      	sub	sp, #40	; 0x28
 801262c:	af02      	add	r7, sp, #8
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	460b      	mov	r3, r1
 8012632:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012634:	2300      	movs	r3, #0
 8012636:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012638:	2300      	movs	r3, #0
 801263a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	f003 0303 	and.w	r3, r3, #3
 8012642:	2b00      	cmp	r3, #0
 8012644:	d106      	bne.n	8012654 <tcp_enqueue_flags+0x2c>
 8012646:	4b67      	ldr	r3, [pc, #412]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 8012648:	f240 4211 	movw	r2, #1041	; 0x411
 801264c:	4966      	ldr	r1, [pc, #408]	; (80127e8 <tcp_enqueue_flags+0x1c0>)
 801264e:	4867      	ldr	r0, [pc, #412]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 8012650:	f006 fb2a 	bl	8018ca8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <tcp_enqueue_flags+0x40>
 801265a:	4b62      	ldr	r3, [pc, #392]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 801265c:	f240 4213 	movw	r2, #1043	; 0x413
 8012660:	4963      	ldr	r1, [pc, #396]	; (80127f0 <tcp_enqueue_flags+0x1c8>)
 8012662:	4862      	ldr	r0, [pc, #392]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 8012664:	f006 fb20 	bl	8018ca8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012668:	78fb      	ldrb	r3, [r7, #3]
 801266a:	f003 0302 	and.w	r3, r3, #2
 801266e:	2b00      	cmp	r3, #0
 8012670:	d001      	beq.n	8012676 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012672:	2301      	movs	r3, #1
 8012674:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012676:	7ffb      	ldrb	r3, [r7, #31]
 8012678:	009b      	lsls	r3, r3, #2
 801267a:	b2db      	uxtb	r3, r3
 801267c:	f003 0304 	and.w	r3, r3, #4
 8012680:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	b29b      	uxth	r3, r3
 8012686:	f44f 7220 	mov.w	r2, #640	; 0x280
 801268a:	4619      	mov	r1, r3
 801268c:	2036      	movs	r0, #54	; 0x36
 801268e:	f7fa f9dd 	bl	800ca4c <pbuf_alloc>
 8012692:	6138      	str	r0, [r7, #16]
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d109      	bne.n	80126ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	8b5b      	ldrh	r3, [r3, #26]
 801269e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126a8:	f04f 33ff 	mov.w	r3, #4294967295
 80126ac:	e095      	b.n	80127da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	895a      	ldrh	r2, [r3, #10]
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d206      	bcs.n	80126c8 <tcp_enqueue_flags+0xa0>
 80126ba:	4b4a      	ldr	r3, [pc, #296]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 80126bc:	f240 4239 	movw	r2, #1081	; 0x439
 80126c0:	494c      	ldr	r1, [pc, #304]	; (80127f4 <tcp_enqueue_flags+0x1cc>)
 80126c2:	484a      	ldr	r0, [pc, #296]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 80126c4:	f006 faf0 	bl	8018ca8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80126cc:	78fa      	ldrb	r2, [r7, #3]
 80126ce:	7ffb      	ldrb	r3, [r7, #31]
 80126d0:	9300      	str	r3, [sp, #0]
 80126d2:	460b      	mov	r3, r1
 80126d4:	6939      	ldr	r1, [r7, #16]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7ff f918 	bl	801190c <tcp_create_segment>
 80126dc:	60f8      	str	r0, [r7, #12]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d109      	bne.n	80126f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	8b5b      	ldrh	r3, [r3, #26]
 80126e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80126f2:	f04f 33ff 	mov.w	r3, #4294967295
 80126f6:	e070      	b.n	80127da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	f003 0303 	and.w	r3, r3, #3
 8012700:	2b00      	cmp	r3, #0
 8012702:	d006      	beq.n	8012712 <tcp_enqueue_flags+0xea>
 8012704:	4b37      	ldr	r3, [pc, #220]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 8012706:	f240 4242 	movw	r2, #1090	; 0x442
 801270a:	493b      	ldr	r1, [pc, #236]	; (80127f8 <tcp_enqueue_flags+0x1d0>)
 801270c:	4837      	ldr	r0, [pc, #220]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 801270e:	f006 facb 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	891b      	ldrh	r3, [r3, #8]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d006      	beq.n	8012728 <tcp_enqueue_flags+0x100>
 801271a:	4b32      	ldr	r3, [pc, #200]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 801271c:	f240 4243 	movw	r2, #1091	; 0x443
 8012720:	4936      	ldr	r1, [pc, #216]	; (80127fc <tcp_enqueue_flags+0x1d4>)
 8012722:	4832      	ldr	r0, [pc, #200]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 8012724:	f006 fac0 	bl	8018ca8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801272c:	2b00      	cmp	r3, #0
 801272e:	d103      	bne.n	8012738 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	68fa      	ldr	r2, [r7, #12]
 8012734:	66da      	str	r2, [r3, #108]	; 0x6c
 8012736:	e00d      	b.n	8012754 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801273c:	61bb      	str	r3, [r7, #24]
 801273e:	e002      	b.n	8012746 <tcp_enqueue_flags+0x11e>
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	61bb      	str	r3, [r7, #24]
 8012746:	69bb      	ldr	r3, [r7, #24]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d1f8      	bne.n	8012740 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	68fa      	ldr	r2, [r7, #12]
 8012752:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801275c:	78fb      	ldrb	r3, [r7, #3]
 801275e:	f003 0302 	and.w	r3, r3, #2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d104      	bne.n	8012770 <tcp_enqueue_flags+0x148>
 8012766:	78fb      	ldrb	r3, [r7, #3]
 8012768:	f003 0301 	and.w	r3, r3, #1
 801276c:	2b00      	cmp	r3, #0
 801276e:	d004      	beq.n	801277a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012774:	1c5a      	adds	r2, r3, #1
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801277a:	78fb      	ldrb	r3, [r7, #3]
 801277c:	f003 0301 	and.w	r3, r3, #1
 8012780:	2b00      	cmp	r3, #0
 8012782:	d006      	beq.n	8012792 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	8b5b      	ldrh	r3, [r3, #26]
 8012788:	f043 0320 	orr.w	r3, r3, #32
 801278c:	b29a      	uxth	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	4618      	mov	r0, r3
 8012798:	f7fa fcca 	bl	800d130 <pbuf_clen>
 801279c:	4603      	mov	r3, r0
 801279e:	461a      	mov	r2, r3
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127a6:	4413      	add	r3, r2
 80127a8:	b29a      	uxth	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00e      	beq.n	80127d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d10a      	bne.n	80127d8 <tcp_enqueue_flags+0x1b0>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d106      	bne.n	80127d8 <tcp_enqueue_flags+0x1b0>
 80127ca:	4b06      	ldr	r3, [pc, #24]	; (80127e4 <tcp_enqueue_flags+0x1bc>)
 80127cc:	f240 4265 	movw	r2, #1125	; 0x465
 80127d0:	490b      	ldr	r1, [pc, #44]	; (8012800 <tcp_enqueue_flags+0x1d8>)
 80127d2:	4806      	ldr	r0, [pc, #24]	; (80127ec <tcp_enqueue_flags+0x1c4>)
 80127d4:	f006 fa68 	bl	8018ca8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80127d8:	2300      	movs	r3, #0
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3720      	adds	r7, #32
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}
 80127e2:	bf00      	nop
 80127e4:	0801bb14 	.word	0x0801bb14
 80127e8:	0801bf38 	.word	0x0801bf38
 80127ec:	0801bb68 	.word	0x0801bb68
 80127f0:	0801bf90 	.word	0x0801bf90
 80127f4:	0801bfb0 	.word	0x0801bfb0
 80127f8:	0801bfec 	.word	0x0801bfec
 80127fc:	0801c004 	.word	0x0801c004
 8012800:	0801c030 	.word	0x0801c030

08012804 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012804:	b5b0      	push	{r4, r5, r7, lr}
 8012806:	b08a      	sub	sp, #40	; 0x28
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d106      	bne.n	8012820 <tcp_output+0x1c>
 8012812:	4b8a      	ldr	r3, [pc, #552]	; (8012a3c <tcp_output+0x238>)
 8012814:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012818:	4989      	ldr	r1, [pc, #548]	; (8012a40 <tcp_output+0x23c>)
 801281a:	488a      	ldr	r0, [pc, #552]	; (8012a44 <tcp_output+0x240>)
 801281c:	f006 fa44 	bl	8018ca8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	7d1b      	ldrb	r3, [r3, #20]
 8012824:	2b01      	cmp	r3, #1
 8012826:	d106      	bne.n	8012836 <tcp_output+0x32>
 8012828:	4b84      	ldr	r3, [pc, #528]	; (8012a3c <tcp_output+0x238>)
 801282a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801282e:	4986      	ldr	r1, [pc, #536]	; (8012a48 <tcp_output+0x244>)
 8012830:	4884      	ldr	r0, [pc, #528]	; (8012a44 <tcp_output+0x240>)
 8012832:	f006 fa39 	bl	8018ca8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012836:	4b85      	ldr	r3, [pc, #532]	; (8012a4c <tcp_output+0x248>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	429a      	cmp	r2, r3
 801283e:	d101      	bne.n	8012844 <tcp_output+0x40>
    return ERR_OK;
 8012840:	2300      	movs	r3, #0
 8012842:	e1ce      	b.n	8012be2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012850:	4293      	cmp	r3, r2
 8012852:	bf28      	it	cs
 8012854:	4613      	movcs	r3, r2
 8012856:	b29b      	uxth	r3, r3
 8012858:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801285e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	2b00      	cmp	r3, #0
 8012864:	d10b      	bne.n	801287e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	8b5b      	ldrh	r3, [r3, #26]
 801286a:	f003 0302 	and.w	r3, r3, #2
 801286e:	2b00      	cmp	r3, #0
 8012870:	f000 81aa 	beq.w	8012bc8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f000 fdcb 	bl	8013410 <tcp_send_empty_ack>
 801287a:	4603      	mov	r3, r0
 801287c:	e1b1      	b.n	8012be2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801287e:	6879      	ldr	r1, [r7, #4]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	3304      	adds	r3, #4
 8012884:	461a      	mov	r2, r3
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff f824 	bl	80118d4 <tcp_route>
 801288c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d102      	bne.n	801289a <tcp_output+0x96>
    return ERR_RTE;
 8012894:	f06f 0303 	mvn.w	r3, #3
 8012898:	e1a3      	b.n	8012be2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d003      	beq.n	80128a8 <tcp_output+0xa4>
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d111      	bne.n	80128cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d002      	beq.n	80128b4 <tcp_output+0xb0>
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	3304      	adds	r3, #4
 80128b2:	e000      	b.n	80128b6 <tcp_output+0xb2>
 80128b4:	2300      	movs	r3, #0
 80128b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d102      	bne.n	80128c4 <tcp_output+0xc0>
      return ERR_RTE;
 80128be:	f06f 0303 	mvn.w	r3, #3
 80128c2:	e18e      	b.n	8012be2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80128cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7f8 ffb5 	bl	800b842 <lwip_htonl>
 80128d8:	4602      	mov	r2, r0
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128e2:	8912      	ldrh	r2, [r2, #8]
 80128e4:	4413      	add	r3, r2
 80128e6:	69ba      	ldr	r2, [r7, #24]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d227      	bcs.n	801293c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80128f2:	461a      	mov	r2, r3
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	4293      	cmp	r3, r2
 80128f8:	d114      	bne.n	8012924 <tcp_output+0x120>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d110      	bne.n	8012924 <tcp_output+0x120>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012908:	2b00      	cmp	r3, #0
 801290a:	d10b      	bne.n	8012924 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2200      	movs	r2, #0
 8012910:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2201      	movs	r2, #1
 8012918:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	8b5b      	ldrh	r3, [r3, #26]
 8012928:	f003 0302 	and.w	r3, r3, #2
 801292c:	2b00      	cmp	r3, #0
 801292e:	f000 814d 	beq.w	8012bcc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 fd6c 	bl	8013410 <tcp_send_empty_ack>
 8012938:	4603      	mov	r3, r0
 801293a:	e152      	b.n	8012be2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012948:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	2b00      	cmp	r3, #0
 801294e:	f000 811c 	beq.w	8012b8a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012952:	e002      	b.n	801295a <tcp_output+0x156>
 8012954:	6a3b      	ldr	r3, [r7, #32]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	623b      	str	r3, [r7, #32]
 801295a:	6a3b      	ldr	r3, [r7, #32]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d1f8      	bne.n	8012954 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012962:	e112      	b.n	8012b8a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012966:	68db      	ldr	r3, [r3, #12]
 8012968:	899b      	ldrh	r3, [r3, #12]
 801296a:	b29b      	uxth	r3, r3
 801296c:	4618      	mov	r0, r3
 801296e:	f7f8 ff53 	bl	800b818 <lwip_htons>
 8012972:	4603      	mov	r3, r0
 8012974:	b2db      	uxtb	r3, r3
 8012976:	f003 0304 	and.w	r3, r3, #4
 801297a:	2b00      	cmp	r3, #0
 801297c:	d006      	beq.n	801298c <tcp_output+0x188>
 801297e:	4b2f      	ldr	r3, [pc, #188]	; (8012a3c <tcp_output+0x238>)
 8012980:	f240 5236 	movw	r2, #1334	; 0x536
 8012984:	4932      	ldr	r1, [pc, #200]	; (8012a50 <tcp_output+0x24c>)
 8012986:	482f      	ldr	r0, [pc, #188]	; (8012a44 <tcp_output+0x240>)
 8012988:	f006 f98e 	bl	8018ca8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012990:	2b00      	cmp	r3, #0
 8012992:	d01f      	beq.n	80129d4 <tcp_output+0x1d0>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	8b5b      	ldrh	r3, [r3, #26]
 8012998:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801299c:	2b00      	cmp	r3, #0
 801299e:	d119      	bne.n	80129d4 <tcp_output+0x1d0>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d00b      	beq.n	80129c0 <tcp_output+0x1bc>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d110      	bne.n	80129d4 <tcp_output+0x1d0>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129b6:	891a      	ldrh	r2, [r3, #8]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129bc:	429a      	cmp	r2, r3
 80129be:	d209      	bcs.n	80129d4 <tcp_output+0x1d0>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d004      	beq.n	80129d4 <tcp_output+0x1d0>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129d0:	2b08      	cmp	r3, #8
 80129d2:	d901      	bls.n	80129d8 <tcp_output+0x1d4>
 80129d4:	2301      	movs	r3, #1
 80129d6:	e000      	b.n	80129da <tcp_output+0x1d6>
 80129d8:	2300      	movs	r3, #0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d106      	bne.n	80129ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	8b5b      	ldrh	r3, [r3, #26]
 80129e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f000 80e4 	beq.w	8012bb4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	7d1b      	ldrb	r3, [r3, #20]
 80129f0:	2b02      	cmp	r3, #2
 80129f2:	d00d      	beq.n	8012a10 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	68db      	ldr	r3, [r3, #12]
 80129f8:	899b      	ldrh	r3, [r3, #12]
 80129fa:	b29c      	uxth	r4, r3
 80129fc:	2010      	movs	r0, #16
 80129fe:	f7f8 ff0b 	bl	800b818 <lwip_htons>
 8012a02:	4603      	mov	r3, r0
 8012a04:	461a      	mov	r2, r3
 8012a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a08:	68db      	ldr	r3, [r3, #12]
 8012a0a:	4322      	orrs	r2, r4
 8012a0c:	b292      	uxth	r2, r2
 8012a0e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012a10:	697a      	ldr	r2, [r7, #20]
 8012a12:	6879      	ldr	r1, [r7, #4]
 8012a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a16:	f000 f909 	bl	8012c2c <tcp_output_segment>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d016      	beq.n	8012a54 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	8b5b      	ldrh	r3, [r3, #26]
 8012a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	835a      	strh	r2, [r3, #26]
      return err;
 8012a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012a38:	e0d3      	b.n	8012be2 <tcp_output+0x3de>
 8012a3a:	bf00      	nop
 8012a3c:	0801bb14 	.word	0x0801bb14
 8012a40:	0801c058 	.word	0x0801c058
 8012a44:	0801bb68 	.word	0x0801bb68
 8012a48:	0801c070 	.word	0x0801c070
 8012a4c:	2000cc78 	.word	0x2000cc78
 8012a50:	0801c098 	.word	0x0801c098
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	7d1b      	ldrb	r3, [r3, #20]
 8012a60:	2b02      	cmp	r3, #2
 8012a62:	d006      	beq.n	8012a72 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	8b5b      	ldrh	r3, [r3, #26]
 8012a68:	f023 0303 	bic.w	r3, r3, #3
 8012a6c:	b29a      	uxth	r2, r3
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a74:	68db      	ldr	r3, [r3, #12]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7f8 fee2 	bl	800b842 <lwip_htonl>
 8012a7e:	4604      	mov	r4, r0
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	891b      	ldrh	r3, [r3, #8]
 8012a84:	461d      	mov	r5, r3
 8012a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a88:	68db      	ldr	r3, [r3, #12]
 8012a8a:	899b      	ldrh	r3, [r3, #12]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7f8 fec2 	bl	800b818 <lwip_htons>
 8012a94:	4603      	mov	r3, r0
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	f003 0303 	and.w	r3, r3, #3
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d001      	beq.n	8012aa4 <tcp_output+0x2a0>
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	e000      	b.n	8012aa6 <tcp_output+0x2a2>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	442b      	add	r3, r5
 8012aa8:	4423      	add	r3, r4
 8012aaa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	da02      	bge.n	8012abe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	68ba      	ldr	r2, [r7, #8]
 8012abc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac0:	891b      	ldrh	r3, [r3, #8]
 8012ac2:	461c      	mov	r4, r3
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	68db      	ldr	r3, [r3, #12]
 8012ac8:	899b      	ldrh	r3, [r3, #12]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f8 fea3 	bl	800b818 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	f003 0303 	and.w	r3, r3, #3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d001      	beq.n	8012ae2 <tcp_output+0x2de>
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e000      	b.n	8012ae4 <tcp_output+0x2e0>
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	4423      	add	r3, r4
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d049      	beq.n	8012b7e <tcp_output+0x37a>
      seg->next = NULL;
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	2200      	movs	r2, #0
 8012aee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d105      	bne.n	8012b04 <tcp_output+0x300>
        pcb->unacked = seg;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012afc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b00:	623b      	str	r3, [r7, #32]
 8012b02:	e03f      	b.n	8012b84 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7f8 fe99 	bl	800b842 <lwip_htonl>
 8012b10:	4604      	mov	r4, r0
 8012b12:	6a3b      	ldr	r3, [r7, #32]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f8 fe92 	bl	800b842 <lwip_htonl>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	1ae3      	subs	r3, r4, r3
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	da24      	bge.n	8012b70 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	3370      	adds	r3, #112	; 0x70
 8012b2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b2c:	e002      	b.n	8012b34 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012b2e:	69fb      	ldr	r3, [r7, #28]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d011      	beq.n	8012b60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f8 fe7c 	bl	800b842 <lwip_htonl>
 8012b4a:	4604      	mov	r4, r0
 8012b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4e:	68db      	ldr	r3, [r3, #12]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7f8 fe75 	bl	800b842 <lwip_htonl>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dbe6      	blt.n	8012b2e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b6c:	601a      	str	r2, [r3, #0]
 8012b6e:	e009      	b.n	8012b84 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012b70:	6a3b      	ldr	r3, [r7, #32]
 8012b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012b76:	6a3b      	ldr	r3, [r7, #32]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	623b      	str	r3, [r7, #32]
 8012b7c:	e002      	b.n	8012b84 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b80:	f7fb ff31 	bl	800e9e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b88:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d012      	beq.n	8012bb6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7f8 fe53 	bl	800b842 <lwip_htonl>
 8012b9c:	4602      	mov	r2, r0
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ba2:	1ad3      	subs	r3, r2, r3
 8012ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ba6:	8912      	ldrh	r2, [r2, #8]
 8012ba8:	4413      	add	r3, r2
  while (seg != NULL &&
 8012baa:	69ba      	ldr	r2, [r7, #24]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	f4bf aed9 	bcs.w	8012964 <tcp_output+0x160>
 8012bb2:	e000      	b.n	8012bb6 <tcp_output+0x3b2>
      break;
 8012bb4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d108      	bne.n	8012bd0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012bc6:	e004      	b.n	8012bd2 <tcp_output+0x3ce>
    goto output_done;
 8012bc8:	bf00      	nop
 8012bca:	e002      	b.n	8012bd2 <tcp_output+0x3ce>
    goto output_done;
 8012bcc:	bf00      	nop
 8012bce:	e000      	b.n	8012bd2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012bd0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	8b5b      	ldrh	r3, [r3, #26]
 8012bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bda:	b29a      	uxth	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3728      	adds	r7, #40	; 0x28
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bea:	bf00      	nop

08012bec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d106      	bne.n	8012c08 <tcp_output_segment_busy+0x1c>
 8012bfa:	4b09      	ldr	r3, [pc, #36]	; (8012c20 <tcp_output_segment_busy+0x34>)
 8012bfc:	f240 529a 	movw	r2, #1434	; 0x59a
 8012c00:	4908      	ldr	r1, [pc, #32]	; (8012c24 <tcp_output_segment_busy+0x38>)
 8012c02:	4809      	ldr	r0, [pc, #36]	; (8012c28 <tcp_output_segment_busy+0x3c>)
 8012c04:	f006 f850 	bl	8018ca8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	7b9b      	ldrb	r3, [r3, #14]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d001      	beq.n	8012c16 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012c12:	2301      	movs	r3, #1
 8012c14:	e000      	b.n	8012c18 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012c16:	2300      	movs	r3, #0
}
 8012c18:	4618      	mov	r0, r3
 8012c1a:	3708      	adds	r7, #8
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	0801bb14 	.word	0x0801bb14
 8012c24:	0801c0b0 	.word	0x0801c0b0
 8012c28:	0801bb68 	.word	0x0801bb68

08012c2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012c2c:	b5b0      	push	{r4, r5, r7, lr}
 8012c2e:	b08c      	sub	sp, #48	; 0x30
 8012c30:	af04      	add	r7, sp, #16
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <tcp_output_segment+0x20>
 8012c3e:	4b64      	ldr	r3, [pc, #400]	; (8012dd0 <tcp_output_segment+0x1a4>)
 8012c40:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012c44:	4963      	ldr	r1, [pc, #396]	; (8012dd4 <tcp_output_segment+0x1a8>)
 8012c46:	4864      	ldr	r0, [pc, #400]	; (8012dd8 <tcp_output_segment+0x1ac>)
 8012c48:	f006 f82e 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d106      	bne.n	8012c60 <tcp_output_segment+0x34>
 8012c52:	4b5f      	ldr	r3, [pc, #380]	; (8012dd0 <tcp_output_segment+0x1a4>)
 8012c54:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012c58:	4960      	ldr	r1, [pc, #384]	; (8012ddc <tcp_output_segment+0x1b0>)
 8012c5a:	485f      	ldr	r0, [pc, #380]	; (8012dd8 <tcp_output_segment+0x1ac>)
 8012c5c:	f006 f824 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_output_segment+0x48>
 8012c66:	4b5a      	ldr	r3, [pc, #360]	; (8012dd0 <tcp_output_segment+0x1a4>)
 8012c68:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012c6c:	495c      	ldr	r1, [pc, #368]	; (8012de0 <tcp_output_segment+0x1b4>)
 8012c6e:	485a      	ldr	r0, [pc, #360]	; (8012dd8 <tcp_output_segment+0x1ac>)
 8012c70:	f006 f81a 	bl	8018ca8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f7ff ffb9 	bl	8012bec <tcp_output_segment_busy>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012c80:	2300      	movs	r3, #0
 8012c82:	e0a1      	b.n	8012dc8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	68dc      	ldr	r4, [r3, #12]
 8012c8c:	4610      	mov	r0, r2
 8012c8e:	f7f8 fdd8 	bl	800b842 <lwip_htonl>
 8012c92:	4603      	mov	r3, r0
 8012c94:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68dc      	ldr	r4, [r3, #12]
 8012c9e:	4610      	mov	r0, r2
 8012ca0:	f7f8 fdba 	bl	800b818 <lwip_htons>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cac:	68ba      	ldr	r2, [r7, #8]
 8012cae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012cb0:	441a      	add	r2, r3
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	3314      	adds	r3, #20
 8012cbc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	7a9b      	ldrb	r3, [r3, #10]
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d015      	beq.n	8012cf6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	3304      	adds	r3, #4
 8012cce:	461a      	mov	r2, r3
 8012cd0:	6879      	ldr	r1, [r7, #4]
 8012cd2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012cd6:	f7fc fa33 	bl	800f140 <tcp_eff_send_mss_netif>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012cde:	8b7b      	ldrh	r3, [r7, #26]
 8012ce0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7f8 fdac 	bl	800b842 <lwip_htonl>
 8012cea:	4602      	mov	r2, r0
 8012cec:	69fb      	ldr	r3, [r7, #28]
 8012cee:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	3304      	adds	r3, #4
 8012cf4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	da02      	bge.n	8012d06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	2200      	movs	r2, #0
 8012d04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d10c      	bne.n	8012d28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012d0e:	4b35      	ldr	r3, [pc, #212]	; (8012de4 <tcp_output_segment+0x1b8>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	68bb      	ldr	r3, [r7, #8]
 8012d14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	68db      	ldr	r3, [r3, #12]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f8 fd90 	bl	800b842 <lwip_htonl>
 8012d22:	4602      	mov	r2, r0
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	68da      	ldr	r2, [r3, #12]
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	1ad3      	subs	r3, r2, r3
 8012d34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	8959      	ldrh	r1, [r3, #10]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	8b3a      	ldrh	r2, [r7, #24]
 8012d42:	1a8a      	subs	r2, r1, r2
 8012d44:	b292      	uxth	r2, r2
 8012d46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	8919      	ldrh	r1, [r3, #8]
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	8b3a      	ldrh	r2, [r7, #24]
 8012d54:	1a8a      	subs	r2, r1, r2
 8012d56:	b292      	uxth	r2, r2
 8012d58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	68d2      	ldr	r2, [r2, #12]
 8012d62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	741a      	strb	r2, [r3, #16]
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	68da      	ldr	r2, [r3, #12]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	7a9b      	ldrb	r3, [r3, #10]
 8012d78:	f003 0301 	and.w	r3, r3, #1
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d001      	beq.n	8012d84 <tcp_output_segment+0x158>
 8012d80:	2318      	movs	r3, #24
 8012d82:	e000      	b.n	8012d86 <tcp_output_segment+0x15a>
 8012d84:	2314      	movs	r3, #20
 8012d86:	4413      	add	r3, r2
 8012d88:	69fa      	ldr	r2, [r7, #28]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d006      	beq.n	8012d9c <tcp_output_segment+0x170>
 8012d8e:	4b10      	ldr	r3, [pc, #64]	; (8012dd0 <tcp_output_segment+0x1a4>)
 8012d90:	f240 621c 	movw	r2, #1564	; 0x61c
 8012d94:	4914      	ldr	r1, [pc, #80]	; (8012de8 <tcp_output_segment+0x1bc>)
 8012d96:	4810      	ldr	r0, [pc, #64]	; (8012dd8 <tcp_output_segment+0x1ac>)
 8012d98:	f005 ff86 	bl	8018ca8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6858      	ldr	r0, [r3, #4]
 8012da0:	68b9      	ldr	r1, [r7, #8]
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	1d1c      	adds	r4, r3, #4
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	7add      	ldrb	r5, [r3, #11]
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	7a9b      	ldrb	r3, [r3, #10]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	9202      	str	r2, [sp, #8]
 8012db2:	2206      	movs	r2, #6
 8012db4:	9201      	str	r2, [sp, #4]
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	462b      	mov	r3, r5
 8012dba:	4622      	mov	r2, r4
 8012dbc:	f004 fc56 	bl	801766c <ip4_output_if>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3720      	adds	r7, #32
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bdb0      	pop	{r4, r5, r7, pc}
 8012dd0:	0801bb14 	.word	0x0801bb14
 8012dd4:	0801c0d8 	.word	0x0801c0d8
 8012dd8:	0801bb68 	.word	0x0801bb68
 8012ddc:	0801c0f8 	.word	0x0801c0f8
 8012de0:	0801c118 	.word	0x0801c118
 8012de4:	2000cc2c 	.word	0x2000cc2c
 8012de8:	0801c13c 	.word	0x0801c13c

08012dec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012dec:	b5b0      	push	{r4, r5, r7, lr}
 8012dee:	b084      	sub	sp, #16
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <tcp_rexmit_rto_prepare+0x1c>
 8012dfa:	4b31      	ldr	r3, [pc, #196]	; (8012ec0 <tcp_rexmit_rto_prepare+0xd4>)
 8012dfc:	f240 6263 	movw	r2, #1635	; 0x663
 8012e00:	4930      	ldr	r1, [pc, #192]	; (8012ec4 <tcp_rexmit_rto_prepare+0xd8>)
 8012e02:	4831      	ldr	r0, [pc, #196]	; (8012ec8 <tcp_rexmit_rto_prepare+0xdc>)
 8012e04:	f005 ff50 	bl	8018ca8 <iprintf>

  if (pcb->unacked == NULL) {
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d102      	bne.n	8012e16 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012e10:	f06f 0305 	mvn.w	r3, #5
 8012e14:	e050      	b.n	8012eb8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	e00b      	b.n	8012e36 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012e1e:	68f8      	ldr	r0, [r7, #12]
 8012e20:	f7ff fee4 	bl	8012bec <tcp_output_segment_busy>
 8012e24:	4603      	mov	r3, r0
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d002      	beq.n	8012e30 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012e2a:	f06f 0305 	mvn.w	r3, #5
 8012e2e:	e043      	b.n	8012eb8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	60fb      	str	r3, [r7, #12]
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d1ef      	bne.n	8012e1e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012e3e:	68f8      	ldr	r0, [r7, #12]
 8012e40:	f7ff fed4 	bl	8012bec <tcp_output_segment_busy>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d002      	beq.n	8012e50 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012e4a:	f06f 0305 	mvn.w	r3, #5
 8012e4e:	e033      	b.n	8012eb8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2200      	movs	r2, #0
 8012e64:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	8b5b      	ldrh	r3, [r3, #26]
 8012e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	68db      	ldr	r3, [r3, #12]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7f8 fce1 	bl	800b842 <lwip_htonl>
 8012e80:	4604      	mov	r4, r0
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	891b      	ldrh	r3, [r3, #8]
 8012e86:	461d      	mov	r5, r3
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	899b      	ldrh	r3, [r3, #12]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7f8 fcc1 	bl	800b818 <lwip_htons>
 8012e96:	4603      	mov	r3, r0
 8012e98:	b2db      	uxtb	r3, r3
 8012e9a:	f003 0303 	and.w	r3, r3, #3
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d001      	beq.n	8012ea6 <tcp_rexmit_rto_prepare+0xba>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e000      	b.n	8012ea8 <tcp_rexmit_rto_prepare+0xbc>
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	442b      	add	r3, r5
 8012eaa:	18e2      	adds	r2, r4, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012eb6:	2300      	movs	r3, #0
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8012ec0:	0801bb14 	.word	0x0801bb14
 8012ec4:	0801c150 	.word	0x0801c150
 8012ec8:	0801bb68 	.word	0x0801bb68

08012ecc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d106      	bne.n	8012ee8 <tcp_rexmit_rto_commit+0x1c>
 8012eda:	4b0d      	ldr	r3, [pc, #52]	; (8012f10 <tcp_rexmit_rto_commit+0x44>)
 8012edc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ee0:	490c      	ldr	r1, [pc, #48]	; (8012f14 <tcp_rexmit_rto_commit+0x48>)
 8012ee2:	480d      	ldr	r0, [pc, #52]	; (8012f18 <tcp_rexmit_rto_commit+0x4c>)
 8012ee4:	f005 fee0 	bl	8018ca8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012eee:	2bff      	cmp	r3, #255	; 0xff
 8012ef0:	d007      	beq.n	8012f02 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ef8:	3301      	adds	r3, #1
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7ff fc7e 	bl	8012804 <tcp_output>
}
 8012f08:	bf00      	nop
 8012f0a:	3708      	adds	r7, #8
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}
 8012f10:	0801bb14 	.word	0x0801bb14
 8012f14:	0801c174 	.word	0x0801c174
 8012f18:	0801bb68 	.word	0x0801bb68

08012f1c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b082      	sub	sp, #8
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d106      	bne.n	8012f38 <tcp_rexmit_rto+0x1c>
 8012f2a:	4b0a      	ldr	r3, [pc, #40]	; (8012f54 <tcp_rexmit_rto+0x38>)
 8012f2c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012f30:	4909      	ldr	r1, [pc, #36]	; (8012f58 <tcp_rexmit_rto+0x3c>)
 8012f32:	480a      	ldr	r0, [pc, #40]	; (8012f5c <tcp_rexmit_rto+0x40>)
 8012f34:	f005 feb8 	bl	8018ca8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f7ff ff57 	bl	8012dec <tcp_rexmit_rto_prepare>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d102      	bne.n	8012f4a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7ff ffc1 	bl	8012ecc <tcp_rexmit_rto_commit>
  }
}
 8012f4a:	bf00      	nop
 8012f4c:	3708      	adds	r7, #8
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	0801bb14 	.word	0x0801bb14
 8012f58:	0801c198 	.word	0x0801c198
 8012f5c:	0801bb68 	.word	0x0801bb68

08012f60 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012f60:	b590      	push	{r4, r7, lr}
 8012f62:	b085      	sub	sp, #20
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d106      	bne.n	8012f7c <tcp_rexmit+0x1c>
 8012f6e:	4b2f      	ldr	r3, [pc, #188]	; (801302c <tcp_rexmit+0xcc>)
 8012f70:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012f74:	492e      	ldr	r1, [pc, #184]	; (8013030 <tcp_rexmit+0xd0>)
 8012f76:	482f      	ldr	r0, [pc, #188]	; (8013034 <tcp_rexmit+0xd4>)
 8012f78:	f005 fe96 	bl	8018ca8 <iprintf>

  if (pcb->unacked == NULL) {
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d102      	bne.n	8012f8a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012f84:	f06f 0305 	mvn.w	r3, #5
 8012f88:	e04c      	b.n	8013024 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012f90:	68b8      	ldr	r0, [r7, #8]
 8012f92:	f7ff fe2b 	bl	8012bec <tcp_output_segment_busy>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012f9c:	f06f 0305 	mvn.w	r3, #5
 8012fa0:	e040      	b.n	8013024 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	336c      	adds	r3, #108	; 0x6c
 8012fae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012fb0:	e002      	b.n	8012fb8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d011      	beq.n	8012fe4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7f8 fc3a 	bl	800b842 <lwip_htonl>
 8012fce:	4604      	mov	r4, r0
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f8 fc33 	bl	800b842 <lwip_htonl>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	dbe6      	blt.n	8012fb2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	681a      	ldr	r2, [r3, #0]
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	68ba      	ldr	r2, [r7, #8]
 8012ff0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d103      	bne.n	8013002 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013008:	2bff      	cmp	r3, #255	; 0xff
 801300a:	d007      	beq.n	801301c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013012:	3301      	adds	r3, #1
 8013014:	b2da      	uxtb	r2, r3
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013022:	2300      	movs	r3, #0
}
 8013024:	4618      	mov	r0, r3
 8013026:	3714      	adds	r7, #20
 8013028:	46bd      	mov	sp, r7
 801302a:	bd90      	pop	{r4, r7, pc}
 801302c:	0801bb14 	.word	0x0801bb14
 8013030:	0801c1b4 	.word	0x0801c1b4
 8013034:	0801bb68 	.word	0x0801bb68

08013038 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <tcp_rexmit_fast+0x1c>
 8013046:	4b2a      	ldr	r3, [pc, #168]	; (80130f0 <tcp_rexmit_fast+0xb8>)
 8013048:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801304c:	4929      	ldr	r1, [pc, #164]	; (80130f4 <tcp_rexmit_fast+0xbc>)
 801304e:	482a      	ldr	r0, [pc, #168]	; (80130f8 <tcp_rexmit_fast+0xc0>)
 8013050:	f005 fe2a 	bl	8018ca8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013058:	2b00      	cmp	r3, #0
 801305a:	d045      	beq.n	80130e8 <tcp_rexmit_fast+0xb0>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	8b5b      	ldrh	r3, [r3, #26]
 8013060:	f003 0304 	and.w	r3, r3, #4
 8013064:	2b00      	cmp	r3, #0
 8013066:	d13f      	bne.n	80130e8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f7ff ff79 	bl	8012f60 <tcp_rexmit>
 801306e:	4603      	mov	r3, r0
 8013070:	2b00      	cmp	r3, #0
 8013072:	d139      	bne.n	80130e8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013080:	4293      	cmp	r3, r2
 8013082:	bf28      	it	cs
 8013084:	4613      	movcs	r3, r2
 8013086:	b29b      	uxth	r3, r3
 8013088:	2b00      	cmp	r3, #0
 801308a:	da00      	bge.n	801308e <tcp_rexmit_fast+0x56>
 801308c:	3301      	adds	r3, #1
 801308e:	105b      	asrs	r3, r3, #1
 8013090:	b29a      	uxth	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801309e:	461a      	mov	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130a4:	005b      	lsls	r3, r3, #1
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d206      	bcs.n	80130b8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130ae:	005b      	lsls	r3, r3, #1
 80130b0:	b29a      	uxth	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130c2:	4619      	mov	r1, r3
 80130c4:	0049      	lsls	r1, r1, #1
 80130c6:	440b      	add	r3, r1
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	4413      	add	r3, r2
 80130cc:	b29a      	uxth	r2, r3
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	8b5b      	ldrh	r3, [r3, #26]
 80130d8:	f043 0304 	orr.w	r3, r3, #4
 80130dc:	b29a      	uxth	r2, r3
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80130e8:	bf00      	nop
 80130ea:	3708      	adds	r7, #8
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}
 80130f0:	0801bb14 	.word	0x0801bb14
 80130f4:	0801c1cc 	.word	0x0801c1cc
 80130f8:	0801bb68 	.word	0x0801bb68

080130fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b086      	sub	sp, #24
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	607b      	str	r3, [r7, #4]
 8013106:	460b      	mov	r3, r1
 8013108:	817b      	strh	r3, [r7, #10]
 801310a:	4613      	mov	r3, r2
 801310c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801310e:	897a      	ldrh	r2, [r7, #10]
 8013110:	893b      	ldrh	r3, [r7, #8]
 8013112:	4413      	add	r3, r2
 8013114:	b29b      	uxth	r3, r3
 8013116:	3314      	adds	r3, #20
 8013118:	b29b      	uxth	r3, r3
 801311a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801311e:	4619      	mov	r1, r3
 8013120:	2022      	movs	r0, #34	; 0x22
 8013122:	f7f9 fc93 	bl	800ca4c <pbuf_alloc>
 8013126:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d04d      	beq.n	80131ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801312e:	897b      	ldrh	r3, [r7, #10]
 8013130:	3313      	adds	r3, #19
 8013132:	697a      	ldr	r2, [r7, #20]
 8013134:	8952      	ldrh	r2, [r2, #10]
 8013136:	4293      	cmp	r3, r2
 8013138:	db06      	blt.n	8013148 <tcp_output_alloc_header_common+0x4c>
 801313a:	4b26      	ldr	r3, [pc, #152]	; (80131d4 <tcp_output_alloc_header_common+0xd8>)
 801313c:	f240 7223 	movw	r2, #1827	; 0x723
 8013140:	4925      	ldr	r1, [pc, #148]	; (80131d8 <tcp_output_alloc_header_common+0xdc>)
 8013142:	4826      	ldr	r0, [pc, #152]	; (80131dc <tcp_output_alloc_header_common+0xe0>)
 8013144:	f005 fdb0 	bl	8018ca8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013148:	697b      	ldr	r3, [r7, #20]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801314e:	8c3b      	ldrh	r3, [r7, #32]
 8013150:	4618      	mov	r0, r3
 8013152:	f7f8 fb61 	bl	800b818 <lwip_htons>
 8013156:	4603      	mov	r3, r0
 8013158:	461a      	mov	r2, r3
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801315e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013160:	4618      	mov	r0, r3
 8013162:	f7f8 fb59 	bl	800b818 <lwip_htons>
 8013166:	4603      	mov	r3, r0
 8013168:	461a      	mov	r2, r3
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7f8 fb64 	bl	800b842 <lwip_htonl>
 801317a:	4602      	mov	r2, r0
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013180:	897b      	ldrh	r3, [r7, #10]
 8013182:	089b      	lsrs	r3, r3, #2
 8013184:	b29b      	uxth	r3, r3
 8013186:	3305      	adds	r3, #5
 8013188:	b29b      	uxth	r3, r3
 801318a:	031b      	lsls	r3, r3, #12
 801318c:	b29a      	uxth	r2, r3
 801318e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013192:	b29b      	uxth	r3, r3
 8013194:	4313      	orrs	r3, r2
 8013196:	b29b      	uxth	r3, r3
 8013198:	4618      	mov	r0, r3
 801319a:	f7f8 fb3d 	bl	800b818 <lwip_htons>
 801319e:	4603      	mov	r3, r0
 80131a0:	461a      	mov	r2, r3
 80131a2:	693b      	ldr	r3, [r7, #16]
 80131a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80131a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7f8 fb35 	bl	800b818 <lwip_htons>
 80131ae:	4603      	mov	r3, r0
 80131b0:	461a      	mov	r2, r3
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	2200      	movs	r2, #0
 80131ba:	741a      	strb	r2, [r3, #16]
 80131bc:	2200      	movs	r2, #0
 80131be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	2200      	movs	r2, #0
 80131c4:	749a      	strb	r2, [r3, #18]
 80131c6:	2200      	movs	r2, #0
 80131c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80131ca:	697b      	ldr	r3, [r7, #20]
}
 80131cc:	4618      	mov	r0, r3
 80131ce:	3718      	adds	r7, #24
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	0801bb14 	.word	0x0801bb14
 80131d8:	0801c1ec 	.word	0x0801c1ec
 80131dc:	0801bb68 	.word	0x0801bb68

080131e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80131e0:	b5b0      	push	{r4, r5, r7, lr}
 80131e2:	b08a      	sub	sp, #40	; 0x28
 80131e4:	af04      	add	r7, sp, #16
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	607b      	str	r3, [r7, #4]
 80131ea:	460b      	mov	r3, r1
 80131ec:	817b      	strh	r3, [r7, #10]
 80131ee:	4613      	mov	r3, r2
 80131f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d106      	bne.n	8013206 <tcp_output_alloc_header+0x26>
 80131f8:	4b15      	ldr	r3, [pc, #84]	; (8013250 <tcp_output_alloc_header+0x70>)
 80131fa:	f240 7242 	movw	r2, #1858	; 0x742
 80131fe:	4915      	ldr	r1, [pc, #84]	; (8013254 <tcp_output_alloc_header+0x74>)
 8013200:	4815      	ldr	r0, [pc, #84]	; (8013258 <tcp_output_alloc_header+0x78>)
 8013202:	f005 fd51 	bl	8018ca8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	8adb      	ldrh	r3, [r3, #22]
 801320e:	68fa      	ldr	r2, [r7, #12]
 8013210:	8b12      	ldrh	r2, [r2, #24]
 8013212:	68f9      	ldr	r1, [r7, #12]
 8013214:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013216:	893d      	ldrh	r5, [r7, #8]
 8013218:	897c      	ldrh	r4, [r7, #10]
 801321a:	9103      	str	r1, [sp, #12]
 801321c:	2110      	movs	r1, #16
 801321e:	9102      	str	r1, [sp, #8]
 8013220:	9201      	str	r2, [sp, #4]
 8013222:	9300      	str	r3, [sp, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	462a      	mov	r2, r5
 8013228:	4621      	mov	r1, r4
 801322a:	f7ff ff67 	bl	80130fc <tcp_output_alloc_header_common>
 801322e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d006      	beq.n	8013244 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323a:	68fa      	ldr	r2, [r7, #12]
 801323c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801323e:	441a      	add	r2, r3
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013244:	697b      	ldr	r3, [r7, #20]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3718      	adds	r7, #24
 801324a:	46bd      	mov	sp, r7
 801324c:	bdb0      	pop	{r4, r5, r7, pc}
 801324e:	bf00      	nop
 8013250:	0801bb14 	.word	0x0801bb14
 8013254:	0801c21c 	.word	0x0801c21c
 8013258:	0801bb68 	.word	0x0801bb68

0801325c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b088      	sub	sp, #32
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	4611      	mov	r1, r2
 8013268:	461a      	mov	r2, r3
 801326a:	460b      	mov	r3, r1
 801326c:	71fb      	strb	r3, [r7, #7]
 801326e:	4613      	mov	r3, r2
 8013270:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013272:	2300      	movs	r3, #0
 8013274:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013276:	68bb      	ldr	r3, [r7, #8]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d106      	bne.n	801328a <tcp_output_fill_options+0x2e>
 801327c:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <tcp_output_fill_options+0x6c>)
 801327e:	f240 7256 	movw	r2, #1878	; 0x756
 8013282:	4912      	ldr	r1, [pc, #72]	; (80132cc <tcp_output_fill_options+0x70>)
 8013284:	4812      	ldr	r0, [pc, #72]	; (80132d0 <tcp_output_fill_options+0x74>)
 8013286:	f005 fd0f 	bl	8018ca8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	685b      	ldr	r3, [r3, #4]
 801328e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013290:	69bb      	ldr	r3, [r7, #24]
 8013292:	3314      	adds	r3, #20
 8013294:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013296:	8bfb      	ldrh	r3, [r7, #30]
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	461a      	mov	r2, r3
 801329c:	79fb      	ldrb	r3, [r7, #7]
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	f003 0304 	and.w	r3, r3, #4
 80132a4:	4413      	add	r3, r2
 80132a6:	3314      	adds	r3, #20
 80132a8:	69ba      	ldr	r2, [r7, #24]
 80132aa:	4413      	add	r3, r2
 80132ac:	697a      	ldr	r2, [r7, #20]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d006      	beq.n	80132c0 <tcp_output_fill_options+0x64>
 80132b2:	4b05      	ldr	r3, [pc, #20]	; (80132c8 <tcp_output_fill_options+0x6c>)
 80132b4:	f240 7275 	movw	r2, #1909	; 0x775
 80132b8:	4906      	ldr	r1, [pc, #24]	; (80132d4 <tcp_output_fill_options+0x78>)
 80132ba:	4805      	ldr	r0, [pc, #20]	; (80132d0 <tcp_output_fill_options+0x74>)
 80132bc:	f005 fcf4 	bl	8018ca8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80132c0:	bf00      	nop
 80132c2:	3720      	adds	r7, #32
 80132c4:	46bd      	mov	sp, r7
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	0801bb14 	.word	0x0801bb14
 80132cc:	0801c244 	.word	0x0801c244
 80132d0:	0801bb68 	.word	0x0801bb68
 80132d4:	0801c13c 	.word	0x0801c13c

080132d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08a      	sub	sp, #40	; 0x28
 80132dc:	af04      	add	r7, sp, #16
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	607a      	str	r2, [r7, #4]
 80132e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d106      	bne.n	80132fa <tcp_output_control_segment+0x22>
 80132ec:	4b1c      	ldr	r3, [pc, #112]	; (8013360 <tcp_output_control_segment+0x88>)
 80132ee:	f240 7287 	movw	r2, #1927	; 0x787
 80132f2:	491c      	ldr	r1, [pc, #112]	; (8013364 <tcp_output_control_segment+0x8c>)
 80132f4:	481c      	ldr	r0, [pc, #112]	; (8013368 <tcp_output_control_segment+0x90>)
 80132f6:	f005 fcd7 	bl	8018ca8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80132fa:	683a      	ldr	r2, [r7, #0]
 80132fc:	6879      	ldr	r1, [r7, #4]
 80132fe:	68f8      	ldr	r0, [r7, #12]
 8013300:	f7fe fae8 	bl	80118d4 <tcp_route>
 8013304:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d102      	bne.n	8013312 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801330c:	23fc      	movs	r3, #252	; 0xfc
 801330e:	75fb      	strb	r3, [r7, #23]
 8013310:	e01c      	b.n	801334c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d006      	beq.n	8013326 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	7adb      	ldrb	r3, [r3, #11]
 801331c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	7a9b      	ldrb	r3, [r3, #10]
 8013322:	757b      	strb	r3, [r7, #21]
 8013324:	e003      	b.n	801332e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013326:	23ff      	movs	r3, #255	; 0xff
 8013328:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801332a:	2300      	movs	r3, #0
 801332c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801332e:	7dba      	ldrb	r2, [r7, #22]
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	9302      	str	r3, [sp, #8]
 8013334:	2306      	movs	r3, #6
 8013336:	9301      	str	r3, [sp, #4]
 8013338:	7d7b      	ldrb	r3, [r7, #21]
 801333a:	9300      	str	r3, [sp, #0]
 801333c:	4613      	mov	r3, r2
 801333e:	683a      	ldr	r2, [r7, #0]
 8013340:	6879      	ldr	r1, [r7, #4]
 8013342:	68b8      	ldr	r0, [r7, #8]
 8013344:	f004 f992 	bl	801766c <ip4_output_if>
 8013348:	4603      	mov	r3, r0
 801334a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801334c:	68b8      	ldr	r0, [r7, #8]
 801334e:	f7f9 fe61 	bl	800d014 <pbuf_free>
  return err;
 8013352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3718      	adds	r7, #24
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
 801335e:	bf00      	nop
 8013360:	0801bb14 	.word	0x0801bb14
 8013364:	0801c26c 	.word	0x0801c26c
 8013368:	0801bb68 	.word	0x0801bb68

0801336c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801336c:	b590      	push	{r4, r7, lr}
 801336e:	b08b      	sub	sp, #44	; 0x2c
 8013370:	af04      	add	r7, sp, #16
 8013372:	60f8      	str	r0, [r7, #12]
 8013374:	60b9      	str	r1, [r7, #8]
 8013376:	607a      	str	r2, [r7, #4]
 8013378:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d106      	bne.n	801338e <tcp_rst+0x22>
 8013380:	4b1f      	ldr	r3, [pc, #124]	; (8013400 <tcp_rst+0x94>)
 8013382:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013386:	491f      	ldr	r1, [pc, #124]	; (8013404 <tcp_rst+0x98>)
 8013388:	481f      	ldr	r0, [pc, #124]	; (8013408 <tcp_rst+0x9c>)
 801338a:	f005 fc8d 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013390:	2b00      	cmp	r3, #0
 8013392:	d106      	bne.n	80133a2 <tcp_rst+0x36>
 8013394:	4b1a      	ldr	r3, [pc, #104]	; (8013400 <tcp_rst+0x94>)
 8013396:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801339a:	491c      	ldr	r1, [pc, #112]	; (801340c <tcp_rst+0xa0>)
 801339c:	481a      	ldr	r0, [pc, #104]	; (8013408 <tcp_rst+0x9c>)
 801339e:	f005 fc83 	bl	8018ca8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133a2:	2300      	movs	r3, #0
 80133a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80133a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80133aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80133ac:	7dfb      	ldrb	r3, [r7, #23]
 80133ae:	b29c      	uxth	r4, r3
 80133b0:	68b8      	ldr	r0, [r7, #8]
 80133b2:	f7f8 fa46 	bl	800b842 <lwip_htonl>
 80133b6:	4602      	mov	r2, r0
 80133b8:	8abb      	ldrh	r3, [r7, #20]
 80133ba:	9303      	str	r3, [sp, #12]
 80133bc:	2314      	movs	r3, #20
 80133be:	9302      	str	r3, [sp, #8]
 80133c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80133c2:	9301      	str	r3, [sp, #4]
 80133c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133c6:	9300      	str	r3, [sp, #0]
 80133c8:	4613      	mov	r3, r2
 80133ca:	2200      	movs	r2, #0
 80133cc:	4621      	mov	r1, r4
 80133ce:	6878      	ldr	r0, [r7, #4]
 80133d0:	f7ff fe94 	bl	80130fc <tcp_output_alloc_header_common>
 80133d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00c      	beq.n	80133f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80133dc:	7dfb      	ldrb	r3, [r7, #23]
 80133de:	2200      	movs	r2, #0
 80133e0:	6939      	ldr	r1, [r7, #16]
 80133e2:	68f8      	ldr	r0, [r7, #12]
 80133e4:	f7ff ff3a 	bl	801325c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80133e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ea:	683a      	ldr	r2, [r7, #0]
 80133ec:	6939      	ldr	r1, [r7, #16]
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f7ff ff72 	bl	80132d8 <tcp_output_control_segment>
 80133f4:	e000      	b.n	80133f8 <tcp_rst+0x8c>
    return;
 80133f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}
 80133fe:	bf00      	nop
 8013400:	0801bb14 	.word	0x0801bb14
 8013404:	0801c298 	.word	0x0801c298
 8013408:	0801bb68 	.word	0x0801bb68
 801340c:	0801c2b4 	.word	0x0801c2b4

08013410 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013410:	b590      	push	{r4, r7, lr}
 8013412:	b087      	sub	sp, #28
 8013414:	af00      	add	r7, sp, #0
 8013416:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013418:	2300      	movs	r3, #0
 801341a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801341c:	2300      	movs	r3, #0
 801341e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d106      	bne.n	8013434 <tcp_send_empty_ack+0x24>
 8013426:	4b28      	ldr	r3, [pc, #160]	; (80134c8 <tcp_send_empty_ack+0xb8>)
 8013428:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801342c:	4927      	ldr	r1, [pc, #156]	; (80134cc <tcp_send_empty_ack+0xbc>)
 801342e:	4828      	ldr	r0, [pc, #160]	; (80134d0 <tcp_send_empty_ack+0xc0>)
 8013430:	f005 fc3a 	bl	8018ca8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013434:	7dfb      	ldrb	r3, [r7, #23]
 8013436:	009b      	lsls	r3, r3, #2
 8013438:	b2db      	uxtb	r3, r3
 801343a:	f003 0304 	and.w	r3, r3, #4
 801343e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013440:	7d7b      	ldrb	r3, [r7, #21]
 8013442:	b29c      	uxth	r4, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 f9fa 	bl	800b842 <lwip_htonl>
 801344e:	4603      	mov	r3, r0
 8013450:	2200      	movs	r2, #0
 8013452:	4621      	mov	r1, r4
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7ff fec3 	bl	80131e0 <tcp_output_alloc_header>
 801345a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d109      	bne.n	8013476 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	8b5b      	ldrh	r3, [r3, #26]
 8013466:	f043 0303 	orr.w	r3, r3, #3
 801346a:	b29a      	uxth	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013470:	f06f 0301 	mvn.w	r3, #1
 8013474:	e023      	b.n	80134be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013476:	7dbb      	ldrb	r3, [r7, #22]
 8013478:	7dfa      	ldrb	r2, [r7, #23]
 801347a:	6939      	ldr	r1, [r7, #16]
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ff feed 	bl	801325c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	3304      	adds	r3, #4
 8013488:	6939      	ldr	r1, [r7, #16]
 801348a:	6878      	ldr	r0, [r7, #4]
 801348c:	f7ff ff24 	bl	80132d8 <tcp_output_control_segment>
 8013490:	4603      	mov	r3, r0
 8013492:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013494:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d007      	beq.n	80134ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	8b5b      	ldrh	r3, [r3, #26]
 80134a0:	f043 0303 	orr.w	r3, r3, #3
 80134a4:	b29a      	uxth	r2, r3
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	835a      	strh	r2, [r3, #26]
 80134aa:	e006      	b.n	80134ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	8b5b      	ldrh	r3, [r3, #26]
 80134b0:	f023 0303 	bic.w	r3, r3, #3
 80134b4:	b29a      	uxth	r2, r3
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80134ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134be:	4618      	mov	r0, r3
 80134c0:	371c      	adds	r7, #28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd90      	pop	{r4, r7, pc}
 80134c6:	bf00      	nop
 80134c8:	0801bb14 	.word	0x0801bb14
 80134cc:	0801c2d0 	.word	0x0801c2d0
 80134d0:	0801bb68 	.word	0x0801bb68

080134d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80134d4:	b590      	push	{r4, r7, lr}
 80134d6:	b087      	sub	sp, #28
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134dc:	2300      	movs	r3, #0
 80134de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d106      	bne.n	80134f4 <tcp_keepalive+0x20>
 80134e6:	4b18      	ldr	r3, [pc, #96]	; (8013548 <tcp_keepalive+0x74>)
 80134e8:	f640 0224 	movw	r2, #2084	; 0x824
 80134ec:	4917      	ldr	r1, [pc, #92]	; (801354c <tcp_keepalive+0x78>)
 80134ee:	4818      	ldr	r0, [pc, #96]	; (8013550 <tcp_keepalive+0x7c>)
 80134f0:	f005 fbda 	bl	8018ca8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80134f4:	7dfb      	ldrb	r3, [r7, #23]
 80134f6:	b29c      	uxth	r4, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134fc:	3b01      	subs	r3, #1
 80134fe:	4618      	mov	r0, r3
 8013500:	f7f8 f99f 	bl	800b842 <lwip_htonl>
 8013504:	4603      	mov	r3, r0
 8013506:	2200      	movs	r2, #0
 8013508:	4621      	mov	r1, r4
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7ff fe68 	bl	80131e0 <tcp_output_alloc_header>
 8013510:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013518:	f04f 33ff 	mov.w	r3, #4294967295
 801351c:	e010      	b.n	8013540 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801351e:	7dfb      	ldrb	r3, [r7, #23]
 8013520:	2200      	movs	r2, #0
 8013522:	6939      	ldr	r1, [r7, #16]
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff fe99 	bl	801325c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801352a:	687a      	ldr	r2, [r7, #4]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	3304      	adds	r3, #4
 8013530:	6939      	ldr	r1, [r7, #16]
 8013532:	6878      	ldr	r0, [r7, #4]
 8013534:	f7ff fed0 	bl	80132d8 <tcp_output_control_segment>
 8013538:	4603      	mov	r3, r0
 801353a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801353c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013540:	4618      	mov	r0, r3
 8013542:	371c      	adds	r7, #28
 8013544:	46bd      	mov	sp, r7
 8013546:	bd90      	pop	{r4, r7, pc}
 8013548:	0801bb14 	.word	0x0801bb14
 801354c:	0801c2f0 	.word	0x0801c2f0
 8013550:	0801bb68 	.word	0x0801bb68

08013554 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013554:	b590      	push	{r4, r7, lr}
 8013556:	b08b      	sub	sp, #44	; 0x2c
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801355c:	2300      	movs	r3, #0
 801355e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d106      	bne.n	8013576 <tcp_zero_window_probe+0x22>
 8013568:	4b4c      	ldr	r3, [pc, #304]	; (801369c <tcp_zero_window_probe+0x148>)
 801356a:	f640 024f 	movw	r2, #2127	; 0x84f
 801356e:	494c      	ldr	r1, [pc, #304]	; (80136a0 <tcp_zero_window_probe+0x14c>)
 8013570:	484c      	ldr	r0, [pc, #304]	; (80136a4 <tcp_zero_window_probe+0x150>)
 8013572:	f005 fb99 	bl	8018ca8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801357a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801357c:	6a3b      	ldr	r3, [r7, #32]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d101      	bne.n	8013586 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013582:	2300      	movs	r3, #0
 8013584:	e086      	b.n	8013694 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801358c:	2bff      	cmp	r3, #255	; 0xff
 801358e:	d007      	beq.n	80135a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013596:	3301      	adds	r3, #1
 8013598:	b2da      	uxtb	r2, r3
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80135a0:	6a3b      	ldr	r3, [r7, #32]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	899b      	ldrh	r3, [r3, #12]
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7f8 f935 	bl	800b818 <lwip_htons>
 80135ae:	4603      	mov	r3, r0
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	f003 0301 	and.w	r3, r3, #1
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d005      	beq.n	80135c6 <tcp_zero_window_probe+0x72>
 80135ba:	6a3b      	ldr	r3, [r7, #32]
 80135bc:	891b      	ldrh	r3, [r3, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d101      	bne.n	80135c6 <tcp_zero_window_probe+0x72>
 80135c2:	2301      	movs	r3, #1
 80135c4:	e000      	b.n	80135c8 <tcp_zero_window_probe+0x74>
 80135c6:	2300      	movs	r3, #0
 80135c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80135ca:	7ffb      	ldrb	r3, [r7, #31]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	bf0c      	ite	eq
 80135d0:	2301      	moveq	r3, #1
 80135d2:	2300      	movne	r3, #0
 80135d4:	b2db      	uxtb	r3, r3
 80135d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80135d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135dc:	b299      	uxth	r1, r3
 80135de:	6a3b      	ldr	r3, [r7, #32]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	8bba      	ldrh	r2, [r7, #28]
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7ff fdfa 	bl	80131e0 <tcp_output_alloc_header>
 80135ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80135f4:	f04f 33ff 	mov.w	r3, #4294967295
 80135f8:	e04c      	b.n	8013694 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80135fa:	69bb      	ldr	r3, [r7, #24]
 80135fc:	685b      	ldr	r3, [r3, #4]
 80135fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013600:	7ffb      	ldrb	r3, [r7, #31]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d011      	beq.n	801362a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	899b      	ldrh	r3, [r3, #12]
 801360a:	b29b      	uxth	r3, r3
 801360c:	b21b      	sxth	r3, r3
 801360e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013612:	b21c      	sxth	r4, r3
 8013614:	2011      	movs	r0, #17
 8013616:	f7f8 f8ff 	bl	800b818 <lwip_htons>
 801361a:	4603      	mov	r3, r0
 801361c:	b21b      	sxth	r3, r3
 801361e:	4323      	orrs	r3, r4
 8013620:	b21b      	sxth	r3, r3
 8013622:	b29a      	uxth	r2, r3
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	819a      	strh	r2, [r3, #12]
 8013628:	e010      	b.n	801364c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801362a:	69bb      	ldr	r3, [r7, #24]
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	3314      	adds	r3, #20
 8013630:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013632:	6a3b      	ldr	r3, [r7, #32]
 8013634:	6858      	ldr	r0, [r3, #4]
 8013636:	6a3b      	ldr	r3, [r7, #32]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	891a      	ldrh	r2, [r3, #8]
 801363c:	6a3b      	ldr	r3, [r7, #32]
 801363e:	891b      	ldrh	r3, [r3, #8]
 8013640:	1ad3      	subs	r3, r2, r3
 8013642:	b29b      	uxth	r3, r3
 8013644:	2201      	movs	r2, #1
 8013646:	6939      	ldr	r1, [r7, #16]
 8013648:	f7f9 feea 	bl	800d420 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801364c:	6a3b      	ldr	r3, [r7, #32]
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	4618      	mov	r0, r3
 8013654:	f7f8 f8f5 	bl	800b842 <lwip_htonl>
 8013658:	4603      	mov	r3, r0
 801365a:	3301      	adds	r3, #1
 801365c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	2b00      	cmp	r3, #0
 8013668:	da02      	bge.n	8013670 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	68fa      	ldr	r2, [r7, #12]
 801366e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013674:	2200      	movs	r2, #0
 8013676:	69b9      	ldr	r1, [r7, #24]
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7ff fdef 	bl	801325c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	3304      	adds	r3, #4
 8013684:	69b9      	ldr	r1, [r7, #24]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff fe26 	bl	80132d8 <tcp_output_control_segment>
 801368c:	4603      	mov	r3, r0
 801368e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013690:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013694:	4618      	mov	r0, r3
 8013696:	372c      	adds	r7, #44	; 0x2c
 8013698:	46bd      	mov	sp, r7
 801369a:	bd90      	pop	{r4, r7, pc}
 801369c:	0801bb14 	.word	0x0801bb14
 80136a0:	0801c30c 	.word	0x0801c30c
 80136a4:	0801bb68 	.word	0x0801bb68

080136a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80136b0:	f7fa f808 	bl	800d6c4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80136b4:	4b0a      	ldr	r3, [pc, #40]	; (80136e0 <tcpip_tcp_timer+0x38>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d103      	bne.n	80136c4 <tcpip_tcp_timer+0x1c>
 80136bc:	4b09      	ldr	r3, [pc, #36]	; (80136e4 <tcpip_tcp_timer+0x3c>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d005      	beq.n	80136d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80136c4:	2200      	movs	r2, #0
 80136c6:	4908      	ldr	r1, [pc, #32]	; (80136e8 <tcpip_tcp_timer+0x40>)
 80136c8:	20fa      	movs	r0, #250	; 0xfa
 80136ca:	f000 f8f3 	bl	80138b4 <sys_timeout>
 80136ce:	e003      	b.n	80136d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80136d0:	4b06      	ldr	r3, [pc, #24]	; (80136ec <tcpip_tcp_timer+0x44>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	601a      	str	r2, [r3, #0]
  }
}
 80136d6:	bf00      	nop
 80136d8:	bf00      	nop
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	2000cc38 	.word	0x2000cc38
 80136e4:	2000cc3c 	.word	0x2000cc3c
 80136e8:	080136a9 	.word	0x080136a9
 80136ec:	2000cc84 	.word	0x2000cc84

080136f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80136f4:	4b0a      	ldr	r3, [pc, #40]	; (8013720 <tcp_timer_needed+0x30>)
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d10f      	bne.n	801371c <tcp_timer_needed+0x2c>
 80136fc:	4b09      	ldr	r3, [pc, #36]	; (8013724 <tcp_timer_needed+0x34>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d103      	bne.n	801370c <tcp_timer_needed+0x1c>
 8013704:	4b08      	ldr	r3, [pc, #32]	; (8013728 <tcp_timer_needed+0x38>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d007      	beq.n	801371c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801370c:	4b04      	ldr	r3, [pc, #16]	; (8013720 <tcp_timer_needed+0x30>)
 801370e:	2201      	movs	r2, #1
 8013710:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013712:	2200      	movs	r2, #0
 8013714:	4905      	ldr	r1, [pc, #20]	; (801372c <tcp_timer_needed+0x3c>)
 8013716:	20fa      	movs	r0, #250	; 0xfa
 8013718:	f000 f8cc 	bl	80138b4 <sys_timeout>
  }
}
 801371c:	bf00      	nop
 801371e:	bd80      	pop	{r7, pc}
 8013720:	2000cc84 	.word	0x2000cc84
 8013724:	2000cc38 	.word	0x2000cc38
 8013728:	2000cc3c 	.word	0x2000cc3c
 801372c:	080136a9 	.word	0x080136a9

08013730 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	60f8      	str	r0, [r7, #12]
 8013738:	60b9      	str	r1, [r7, #8]
 801373a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801373c:	200a      	movs	r0, #10
 801373e:	f7f8 fd43 	bl	800c1c8 <memp_malloc>
 8013742:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d109      	bne.n	801375e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d151      	bne.n	80137f4 <sys_timeout_abs+0xc4>
 8013750:	4b2a      	ldr	r3, [pc, #168]	; (80137fc <sys_timeout_abs+0xcc>)
 8013752:	22be      	movs	r2, #190	; 0xbe
 8013754:	492a      	ldr	r1, [pc, #168]	; (8013800 <sys_timeout_abs+0xd0>)
 8013756:	482b      	ldr	r0, [pc, #172]	; (8013804 <sys_timeout_abs+0xd4>)
 8013758:	f005 faa6 	bl	8018ca8 <iprintf>
    return;
 801375c:	e04a      	b.n	80137f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	2200      	movs	r2, #0
 8013762:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	68ba      	ldr	r2, [r7, #8]
 8013768:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	68fa      	ldr	r2, [r7, #12]
 8013774:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013776:	4b24      	ldr	r3, [pc, #144]	; (8013808 <sys_timeout_abs+0xd8>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d103      	bne.n	8013786 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801377e:	4a22      	ldr	r2, [pc, #136]	; (8013808 <sys_timeout_abs+0xd8>)
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	6013      	str	r3, [r2, #0]
    return;
 8013784:	e037      	b.n	80137f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	685a      	ldr	r2, [r3, #4]
 801378a:	4b1f      	ldr	r3, [pc, #124]	; (8013808 <sys_timeout_abs+0xd8>)
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	1ad3      	subs	r3, r2, r3
 8013792:	0fdb      	lsrs	r3, r3, #31
 8013794:	f003 0301 	and.w	r3, r3, #1
 8013798:	b2db      	uxtb	r3, r3
 801379a:	2b00      	cmp	r3, #0
 801379c:	d007      	beq.n	80137ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801379e:	4b1a      	ldr	r3, [pc, #104]	; (8013808 <sys_timeout_abs+0xd8>)
 80137a0:	681a      	ldr	r2, [r3, #0]
 80137a2:	693b      	ldr	r3, [r7, #16]
 80137a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80137a6:	4a18      	ldr	r2, [pc, #96]	; (8013808 <sys_timeout_abs+0xd8>)
 80137a8:	693b      	ldr	r3, [r7, #16]
 80137aa:	6013      	str	r3, [r2, #0]
 80137ac:	e023      	b.n	80137f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80137ae:	4b16      	ldr	r3, [pc, #88]	; (8013808 <sys_timeout_abs+0xd8>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	617b      	str	r3, [r7, #20]
 80137b4:	e01a      	b.n	80137ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00b      	beq.n	80137d6 <sys_timeout_abs+0xa6>
 80137be:	693b      	ldr	r3, [r7, #16]
 80137c0:	685a      	ldr	r2, [r3, #4]
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	685b      	ldr	r3, [r3, #4]
 80137c8:	1ad3      	subs	r3, r2, r3
 80137ca:	0fdb      	lsrs	r3, r3, #31
 80137cc:	f003 0301 	and.w	r3, r3, #1
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d007      	beq.n	80137e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	693a      	ldr	r2, [r7, #16]
 80137e2:	601a      	str	r2, [r3, #0]
        break;
 80137e4:	e007      	b.n	80137f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	617b      	str	r3, [r7, #20]
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d1e1      	bne.n	80137b6 <sys_timeout_abs+0x86>
 80137f2:	e000      	b.n	80137f6 <sys_timeout_abs+0xc6>
    return;
 80137f4:	bf00      	nop
      }
    }
  }
}
 80137f6:	3718      	adds	r7, #24
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	0801c330 	.word	0x0801c330
 8013800:	0801c364 	.word	0x0801c364
 8013804:	0801c3a4 	.word	0x0801c3a4
 8013808:	2000cc7c 	.word	0x2000cc7c

0801380c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	4798      	blx	r3

  now = sys_now();
 801381e:	f7f2 ffaf 	bl	8006780 <sys_now>
 8013822:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	4b0f      	ldr	r3, [pc, #60]	; (8013868 <lwip_cyclic_timer+0x5c>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	4413      	add	r3, r2
 801382e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	0fdb      	lsrs	r3, r3, #31
 8013838:	f003 0301 	and.w	r3, r3, #1
 801383c:	b2db      	uxtb	r3, r3
 801383e:	2b00      	cmp	r3, #0
 8013840:	d009      	beq.n	8013856 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	681a      	ldr	r2, [r3, #0]
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	4413      	add	r3, r2
 801384a:	687a      	ldr	r2, [r7, #4]
 801384c:	4907      	ldr	r1, [pc, #28]	; (801386c <lwip_cyclic_timer+0x60>)
 801384e:	4618      	mov	r0, r3
 8013850:	f7ff ff6e 	bl	8013730 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013854:	e004      	b.n	8013860 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013856:	687a      	ldr	r2, [r7, #4]
 8013858:	4904      	ldr	r1, [pc, #16]	; (801386c <lwip_cyclic_timer+0x60>)
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f7ff ff68 	bl	8013730 <sys_timeout_abs>
}
 8013860:	bf00      	nop
 8013862:	3718      	adds	r7, #24
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}
 8013868:	2000cc80 	.word	0x2000cc80
 801386c:	0801380d 	.word	0x0801380d

08013870 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b082      	sub	sp, #8
 8013874:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013876:	2301      	movs	r3, #1
 8013878:	607b      	str	r3, [r7, #4]
 801387a:	e00e      	b.n	801389a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801387c:	4a0b      	ldr	r2, [pc, #44]	; (80138ac <sys_timeouts_init+0x3c>)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	00db      	lsls	r3, r3, #3
 8013888:	4a08      	ldr	r2, [pc, #32]	; (80138ac <sys_timeouts_init+0x3c>)
 801388a:	4413      	add	r3, r2
 801388c:	461a      	mov	r2, r3
 801388e:	4908      	ldr	r1, [pc, #32]	; (80138b0 <sys_timeouts_init+0x40>)
 8013890:	f000 f810 	bl	80138b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	3301      	adds	r3, #1
 8013898:	607b      	str	r3, [r7, #4]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b04      	cmp	r3, #4
 801389e:	d9ed      	bls.n	801387c <sys_timeouts_init+0xc>
  }
}
 80138a0:	bf00      	nop
 80138a2:	bf00      	nop
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	0801d2fc 	.word	0x0801d2fc
 80138b0:	0801380d 	.word	0x0801380d

080138b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b086      	sub	sp, #24
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80138c6:	d306      	bcc.n	80138d6 <sys_timeout+0x22>
 80138c8:	4b0a      	ldr	r3, [pc, #40]	; (80138f4 <sys_timeout+0x40>)
 80138ca:	f240 1229 	movw	r2, #297	; 0x129
 80138ce:	490a      	ldr	r1, [pc, #40]	; (80138f8 <sys_timeout+0x44>)
 80138d0:	480a      	ldr	r0, [pc, #40]	; (80138fc <sys_timeout+0x48>)
 80138d2:	f005 f9e9 	bl	8018ca8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80138d6:	f7f2 ff53 	bl	8006780 <sys_now>
 80138da:	4602      	mov	r2, r0
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	4413      	add	r3, r2
 80138e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	68b9      	ldr	r1, [r7, #8]
 80138e6:	6978      	ldr	r0, [r7, #20]
 80138e8:	f7ff ff22 	bl	8013730 <sys_timeout_abs>
#endif
}
 80138ec:	bf00      	nop
 80138ee:	3718      	adds	r7, #24
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	0801c330 	.word	0x0801c330
 80138f8:	0801c3cc 	.word	0x0801c3cc
 80138fc:	0801c3a4 	.word	0x0801c3a4

08013900 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801390a:	4b19      	ldr	r3, [pc, #100]	; (8013970 <sys_untimeout+0x70>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d029      	beq.n	8013966 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8013912:	4b17      	ldr	r3, [pc, #92]	; (8013970 <sys_untimeout+0x70>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	60bb      	str	r3, [r7, #8]
 8013918:	2300      	movs	r3, #0
 801391a:	60fb      	str	r3, [r7, #12]
 801391c:	e01f      	b.n	801395e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	687a      	ldr	r2, [r7, #4]
 8013924:	429a      	cmp	r2, r3
 8013926:	d115      	bne.n	8013954 <sys_untimeout+0x54>
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	683a      	ldr	r2, [r7, #0]
 801392e:	429a      	cmp	r2, r3
 8013930:	d110      	bne.n	8013954 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d104      	bne.n	8013942 <sys_untimeout+0x42>
        next_timeout = t->next;
 8013938:	68bb      	ldr	r3, [r7, #8]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a0c      	ldr	r2, [pc, #48]	; (8013970 <sys_untimeout+0x70>)
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	e003      	b.n	801394a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	681a      	ldr	r2, [r3, #0]
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801394a:	68b9      	ldr	r1, [r7, #8]
 801394c:	200a      	movs	r0, #10
 801394e:	f7f8 fcb1 	bl	800c2b4 <memp_free>
      return;
 8013952:	e009      	b.n	8013968 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	60fb      	str	r3, [r7, #12]
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	60bb      	str	r3, [r7, #8]
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d1dc      	bne.n	801391e <sys_untimeout+0x1e>
    }
  }
  return;
 8013964:	e000      	b.n	8013968 <sys_untimeout+0x68>
    return;
 8013966:	bf00      	nop
}
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	2000cc7c 	.word	0x2000cc7c

08013974 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b084      	sub	sp, #16
 8013978:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801397a:	f7f2 ff01 	bl	8006780 <sys_now>
 801397e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013980:	4b17      	ldr	r3, [pc, #92]	; (80139e0 <sys_check_timeouts+0x6c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d022      	beq.n	80139d2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	68fa      	ldr	r2, [r7, #12]
 8013992:	1ad3      	subs	r3, r2, r3
 8013994:	0fdb      	lsrs	r3, r3, #31
 8013996:	f003 0301 	and.w	r3, r3, #1
 801399a:	b2db      	uxtb	r3, r3
 801399c:	2b00      	cmp	r3, #0
 801399e:	d11a      	bne.n	80139d6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4a0e      	ldr	r2, [pc, #56]	; (80139e0 <sys_check_timeouts+0x6c>)
 80139a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	689b      	ldr	r3, [r3, #8]
 80139ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80139ae:	68bb      	ldr	r3, [r7, #8]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	4a0a      	ldr	r2, [pc, #40]	; (80139e4 <sys_check_timeouts+0x70>)
 80139ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80139bc:	68b9      	ldr	r1, [r7, #8]
 80139be:	200a      	movs	r0, #10
 80139c0:	f7f8 fc78 	bl	800c2b4 <memp_free>
    if (handler != NULL) {
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d0da      	beq.n	8013980 <sys_check_timeouts+0xc>
      handler(arg);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6838      	ldr	r0, [r7, #0]
 80139ce:	4798      	blx	r3
  do {
 80139d0:	e7d6      	b.n	8013980 <sys_check_timeouts+0xc>
      return;
 80139d2:	bf00      	nop
 80139d4:	e000      	b.n	80139d8 <sys_check_timeouts+0x64>
      return;
 80139d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80139d8:	3710      	adds	r7, #16
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	2000cc7c 	.word	0x2000cc7c
 80139e4:	2000cc80 	.word	0x2000cc80

080139e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80139ee:	4b16      	ldr	r3, [pc, #88]	; (8013a48 <sys_timeouts_sleeptime+0x60>)
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d102      	bne.n	80139fc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80139f6:	f04f 33ff 	mov.w	r3, #4294967295
 80139fa:	e020      	b.n	8013a3e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80139fc:	f7f2 fec0 	bl	8006780 <sys_now>
 8013a00:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013a02:	4b11      	ldr	r3, [pc, #68]	; (8013a48 <sys_timeouts_sleeptime+0x60>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	685a      	ldr	r2, [r3, #4]
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	0fdb      	lsrs	r3, r3, #31
 8013a0e:	f003 0301 	and.w	r3, r3, #1
 8013a12:	b2db      	uxtb	r3, r3
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d001      	beq.n	8013a1c <sys_timeouts_sleeptime+0x34>
    return 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	e010      	b.n	8013a3e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013a1c:	4b0a      	ldr	r3, [pc, #40]	; (8013a48 <sys_timeouts_sleeptime+0x60>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	685a      	ldr	r2, [r3, #4]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013a28:	683b      	ldr	r3, [r7, #0]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	da06      	bge.n	8013a3c <sys_timeouts_sleeptime+0x54>
 8013a2e:	4b07      	ldr	r3, [pc, #28]	; (8013a4c <sys_timeouts_sleeptime+0x64>)
 8013a30:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013a34:	4906      	ldr	r1, [pc, #24]	; (8013a50 <sys_timeouts_sleeptime+0x68>)
 8013a36:	4807      	ldr	r0, [pc, #28]	; (8013a54 <sys_timeouts_sleeptime+0x6c>)
 8013a38:	f005 f936 	bl	8018ca8 <iprintf>
    return ret;
 8013a3c:	683b      	ldr	r3, [r7, #0]
  }
}
 8013a3e:	4618      	mov	r0, r3
 8013a40:	3708      	adds	r7, #8
 8013a42:	46bd      	mov	sp, r7
 8013a44:	bd80      	pop	{r7, pc}
 8013a46:	bf00      	nop
 8013a48:	2000cc7c 	.word	0x2000cc7c
 8013a4c:	0801c330 	.word	0x0801c330
 8013a50:	0801c404 	.word	0x0801c404
 8013a54:	0801c3a4 	.word	0x0801c3a4

08013a58 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a5c:	f004 ff68 	bl	8018930 <rand>
 8013a60:	4603      	mov	r3, r0
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	4b01      	ldr	r3, [pc, #4]	; (8013a78 <udp_init+0x20>)
 8013a72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013a74:	bf00      	nop
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	2000002c 	.word	0x2000002c

08013a7c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013a82:	2300      	movs	r3, #0
 8013a84:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013a86:	4b17      	ldr	r3, [pc, #92]	; (8013ae4 <udp_new_port+0x68>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	1c5a      	adds	r2, r3, #1
 8013a8c:	b291      	uxth	r1, r2
 8013a8e:	4a15      	ldr	r2, [pc, #84]	; (8013ae4 <udp_new_port+0x68>)
 8013a90:	8011      	strh	r1, [r2, #0]
 8013a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a96:	4293      	cmp	r3, r2
 8013a98:	d103      	bne.n	8013aa2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013a9a:	4b12      	ldr	r3, [pc, #72]	; (8013ae4 <udp_new_port+0x68>)
 8013a9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013aa0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013aa2:	4b11      	ldr	r3, [pc, #68]	; (8013ae8 <udp_new_port+0x6c>)
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	603b      	str	r3, [r7, #0]
 8013aa8:	e011      	b.n	8013ace <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	8a5a      	ldrh	r2, [r3, #18]
 8013aae:	4b0d      	ldr	r3, [pc, #52]	; (8013ae4 <udp_new_port+0x68>)
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d108      	bne.n	8013ac8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013ab6:	88fb      	ldrh	r3, [r7, #6]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	80fb      	strh	r3, [r7, #6]
 8013abc:	88fb      	ldrh	r3, [r7, #6]
 8013abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013ac2:	d3e0      	bcc.n	8013a86 <udp_new_port+0xa>
        return 0;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e007      	b.n	8013ad8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	603b      	str	r3, [r7, #0]
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1ea      	bne.n	8013aaa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013ad4:	4b03      	ldr	r3, [pc, #12]	; (8013ae4 <udp_new_port+0x68>)
 8013ad6:	881b      	ldrh	r3, [r3, #0]
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	370c      	adds	r7, #12
 8013adc:	46bd      	mov	sp, r7
 8013ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae2:	4770      	bx	lr
 8013ae4:	2000002c 	.word	0x2000002c
 8013ae8:	2000cc88 	.word	0x2000cc88

08013aec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	60f8      	str	r0, [r7, #12]
 8013af4:	60b9      	str	r1, [r7, #8]
 8013af6:	4613      	mov	r3, r2
 8013af8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d105      	bne.n	8013b0c <udp_input_local_match+0x20>
 8013b00:	4b27      	ldr	r3, [pc, #156]	; (8013ba0 <udp_input_local_match+0xb4>)
 8013b02:	2287      	movs	r2, #135	; 0x87
 8013b04:	4927      	ldr	r1, [pc, #156]	; (8013ba4 <udp_input_local_match+0xb8>)
 8013b06:	4828      	ldr	r0, [pc, #160]	; (8013ba8 <udp_input_local_match+0xbc>)
 8013b08:	f005 f8ce 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d105      	bne.n	8013b1e <udp_input_local_match+0x32>
 8013b12:	4b23      	ldr	r3, [pc, #140]	; (8013ba0 <udp_input_local_match+0xb4>)
 8013b14:	2288      	movs	r2, #136	; 0x88
 8013b16:	4925      	ldr	r1, [pc, #148]	; (8013bac <udp_input_local_match+0xc0>)
 8013b18:	4823      	ldr	r0, [pc, #140]	; (8013ba8 <udp_input_local_match+0xbc>)
 8013b1a:	f005 f8c5 	bl	8018ca8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	7a1b      	ldrb	r3, [r3, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d00b      	beq.n	8013b3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	7a1a      	ldrb	r2, [r3, #8]
 8013b2a:	4b21      	ldr	r3, [pc, #132]	; (8013bb0 <udp_input_local_match+0xc4>)
 8013b2c:	685b      	ldr	r3, [r3, #4]
 8013b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013b32:	3301      	adds	r3, #1
 8013b34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d001      	beq.n	8013b3e <udp_input_local_match+0x52>
    return 0;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	e02b      	b.n	8013b96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013b3e:	79fb      	ldrb	r3, [r7, #7]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d018      	beq.n	8013b76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d013      	beq.n	8013b72 <udp_input_local_match+0x86>
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d00f      	beq.n	8013b72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b52:	4b17      	ldr	r3, [pc, #92]	; (8013bb0 <udp_input_local_match+0xc4>)
 8013b54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b5a:	d00a      	beq.n	8013b72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	4b13      	ldr	r3, [pc, #76]	; (8013bb0 <udp_input_local_match+0xc4>)
 8013b62:	695b      	ldr	r3, [r3, #20]
 8013b64:	405a      	eors	r2, r3
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	3308      	adds	r3, #8
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d110      	bne.n	8013b94 <udp_input_local_match+0xa8>
          return 1;
 8013b72:	2301      	movs	r3, #1
 8013b74:	e00f      	b.n	8013b96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d009      	beq.n	8013b90 <udp_input_local_match+0xa4>
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d005      	beq.n	8013b90 <udp_input_local_match+0xa4>
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	681a      	ldr	r2, [r3, #0]
 8013b88:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <udp_input_local_match+0xc4>)
 8013b8a:	695b      	ldr	r3, [r3, #20]
 8013b8c:	429a      	cmp	r2, r3
 8013b8e:	d101      	bne.n	8013b94 <udp_input_local_match+0xa8>
        return 1;
 8013b90:	2301      	movs	r3, #1
 8013b92:	e000      	b.n	8013b96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013b94:	2300      	movs	r3, #0
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3710      	adds	r7, #16
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	0801c418 	.word	0x0801c418
 8013ba4:	0801c448 	.word	0x0801c448
 8013ba8:	0801c46c 	.word	0x0801c46c
 8013bac:	0801c494 	.word	0x0801c494
 8013bb0:	200094b8 	.word	0x200094b8

08013bb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013bb4:	b590      	push	{r4, r7, lr}
 8013bb6:	b08d      	sub	sp, #52	; 0x34
 8013bb8:	af02      	add	r7, sp, #8
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d105      	bne.n	8013bd4 <udp_input+0x20>
 8013bc8:	4b7c      	ldr	r3, [pc, #496]	; (8013dbc <udp_input+0x208>)
 8013bca:	22cf      	movs	r2, #207	; 0xcf
 8013bcc:	497c      	ldr	r1, [pc, #496]	; (8013dc0 <udp_input+0x20c>)
 8013bce:	487d      	ldr	r0, [pc, #500]	; (8013dc4 <udp_input+0x210>)
 8013bd0:	f005 f86a 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d105      	bne.n	8013be6 <udp_input+0x32>
 8013bda:	4b78      	ldr	r3, [pc, #480]	; (8013dbc <udp_input+0x208>)
 8013bdc:	22d0      	movs	r2, #208	; 0xd0
 8013bde:	497a      	ldr	r1, [pc, #488]	; (8013dc8 <udp_input+0x214>)
 8013be0:	4878      	ldr	r0, [pc, #480]	; (8013dc4 <udp_input+0x210>)
 8013be2:	f005 f861 	bl	8018ca8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	895b      	ldrh	r3, [r3, #10]
 8013bea:	2b07      	cmp	r3, #7
 8013bec:	d803      	bhi.n	8013bf6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7f9 fa10 	bl	800d014 <pbuf_free>
    goto end;
 8013bf4:	e0de      	b.n	8013db4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013bfc:	4b73      	ldr	r3, [pc, #460]	; (8013dcc <udp_input+0x218>)
 8013bfe:	695b      	ldr	r3, [r3, #20]
 8013c00:	4a72      	ldr	r2, [pc, #456]	; (8013dcc <udp_input+0x218>)
 8013c02:	6812      	ldr	r2, [r2, #0]
 8013c04:	4611      	mov	r1, r2
 8013c06:	4618      	mov	r0, r3
 8013c08:	f003 fe08 	bl	801781c <ip4_addr_isbroadcast_u32>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	881b      	ldrh	r3, [r3, #0]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7f7 fdfe 	bl	800b818 <lwip_htons>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013c20:	697b      	ldr	r3, [r7, #20]
 8013c22:	885b      	ldrh	r3, [r3, #2]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f7 fdf6 	bl	800b818 <lwip_htons>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013c30:	2300      	movs	r3, #0
 8013c32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013c34:	2300      	movs	r3, #0
 8013c36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c3c:	4b64      	ldr	r3, [pc, #400]	; (8013dd0 <udp_input+0x21c>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	627b      	str	r3, [r7, #36]	; 0x24
 8013c42:	e054      	b.n	8013cee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c46:	8a5b      	ldrh	r3, [r3, #18]
 8013c48:	89fa      	ldrh	r2, [r7, #14]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d14a      	bne.n	8013ce4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013c4e:	7cfb      	ldrb	r3, [r7, #19]
 8013c50:	461a      	mov	r2, r3
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013c56:	f7ff ff49 	bl	8013aec <udp_input_local_match>
 8013c5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d041      	beq.n	8013ce4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c62:	7c1b      	ldrb	r3, [r3, #16]
 8013c64:	f003 0304 	and.w	r3, r3, #4
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d11d      	bne.n	8013ca8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013c6c:	69fb      	ldr	r3, [r7, #28]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d102      	bne.n	8013c78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c74:	61fb      	str	r3, [r7, #28]
 8013c76:	e017      	b.n	8013ca8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013c78:	7cfb      	ldrb	r3, [r7, #19]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d014      	beq.n	8013ca8 <udp_input+0xf4>
 8013c7e:	4b53      	ldr	r3, [pc, #332]	; (8013dcc <udp_input+0x218>)
 8013c80:	695b      	ldr	r3, [r3, #20]
 8013c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c86:	d10f      	bne.n	8013ca8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	681a      	ldr	r2, [r3, #0]
 8013c8c:	683b      	ldr	r3, [r7, #0]
 8013c8e:	3304      	adds	r3, #4
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	429a      	cmp	r2, r3
 8013c94:	d008      	beq.n	8013ca8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c98:	681a      	ldr	r2, [r3, #0]
 8013c9a:	683b      	ldr	r3, [r7, #0]
 8013c9c:	3304      	adds	r3, #4
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d101      	bne.n	8013ca8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ca6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013caa:	8a9b      	ldrh	r3, [r3, #20]
 8013cac:	8a3a      	ldrh	r2, [r7, #16]
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d118      	bne.n	8013ce4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d005      	beq.n	8013cc6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cbc:	685a      	ldr	r2, [r3, #4]
 8013cbe:	4b43      	ldr	r3, [pc, #268]	; (8013dcc <udp_input+0x218>)
 8013cc0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d10e      	bne.n	8013ce4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013cc6:	6a3b      	ldr	r3, [r7, #32]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d014      	beq.n	8013cf6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cce:	68da      	ldr	r2, [r3, #12]
 8013cd0:	6a3b      	ldr	r3, [r7, #32]
 8013cd2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013cd4:	4b3e      	ldr	r3, [pc, #248]	; (8013dd0 <udp_input+0x21c>)
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013cdc:	4a3c      	ldr	r2, [pc, #240]	; (8013dd0 <udp_input+0x21c>)
 8013cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ce2:	e008      	b.n	8013cf6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	627b      	str	r3, [r7, #36]	; 0x24
 8013cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d1a7      	bne.n	8013c44 <udp_input+0x90>
 8013cf4:	e000      	b.n	8013cf8 <udp_input+0x144>
        break;
 8013cf6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d101      	bne.n	8013d02 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d002      	beq.n	8013d0e <udp_input+0x15a>
    for_us = 1;
 8013d08:	2301      	movs	r3, #1
 8013d0a:	76fb      	strb	r3, [r7, #27]
 8013d0c:	e00a      	b.n	8013d24 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013d0e:	683b      	ldr	r3, [r7, #0]
 8013d10:	3304      	adds	r3, #4
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	4b2d      	ldr	r3, [pc, #180]	; (8013dcc <udp_input+0x218>)
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	429a      	cmp	r2, r3
 8013d1a:	bf0c      	ite	eq
 8013d1c:	2301      	moveq	r3, #1
 8013d1e:	2300      	movne	r3, #0
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013d24:	7efb      	ldrb	r3, [r7, #27]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d041      	beq.n	8013dae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013d2a:	2108      	movs	r1, #8
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f7f9 f8eb 	bl	800cf08 <pbuf_remove_header>
 8013d32:	4603      	mov	r3, r0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00a      	beq.n	8013d4e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013d38:	4b20      	ldr	r3, [pc, #128]	; (8013dbc <udp_input+0x208>)
 8013d3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013d3e:	4925      	ldr	r1, [pc, #148]	; (8013dd4 <udp_input+0x220>)
 8013d40:	4820      	ldr	r0, [pc, #128]	; (8013dc4 <udp_input+0x210>)
 8013d42:	f004 ffb1 	bl	8018ca8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f7f9 f964 	bl	800d014 <pbuf_free>
      goto end;
 8013d4c:	e032      	b.n	8013db4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d012      	beq.n	8013d7a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	699b      	ldr	r3, [r3, #24]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d00a      	beq.n	8013d72 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d5e:	699c      	ldr	r4, [r3, #24]
 8013d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d62:	69d8      	ldr	r0, [r3, #28]
 8013d64:	8a3b      	ldrh	r3, [r7, #16]
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	4b1b      	ldr	r3, [pc, #108]	; (8013dd8 <udp_input+0x224>)
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d6e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013d70:	e021      	b.n	8013db6 <udp_input+0x202>
        pbuf_free(p);
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f7f9 f94e 	bl	800d014 <pbuf_free>
        goto end;
 8013d78:	e01c      	b.n	8013db4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013d7a:	7cfb      	ldrb	r3, [r7, #19]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d112      	bne.n	8013da6 <udp_input+0x1f2>
 8013d80:	4b12      	ldr	r3, [pc, #72]	; (8013dcc <udp_input+0x218>)
 8013d82:	695b      	ldr	r3, [r3, #20]
 8013d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d88:	2be0      	cmp	r3, #224	; 0xe0
 8013d8a:	d00c      	beq.n	8013da6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013d8c:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <udp_input+0x218>)
 8013d8e:	899b      	ldrh	r3, [r3, #12]
 8013d90:	3308      	adds	r3, #8
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	b21b      	sxth	r3, r3
 8013d96:	4619      	mov	r1, r3
 8013d98:	6878      	ldr	r0, [r7, #4]
 8013d9a:	f7f9 f928 	bl	800cfee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013d9e:	2103      	movs	r1, #3
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f003 f9fd 	bl	80171a0 <icmp_dest_unreach>
      pbuf_free(p);
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f7f9 f934 	bl	800d014 <pbuf_free>
  return;
 8013dac:	e003      	b.n	8013db6 <udp_input+0x202>
    pbuf_free(p);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f7f9 f930 	bl	800d014 <pbuf_free>
  return;
 8013db4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013db6:	372c      	adds	r7, #44	; 0x2c
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd90      	pop	{r4, r7, pc}
 8013dbc:	0801c418 	.word	0x0801c418
 8013dc0:	0801c4bc 	.word	0x0801c4bc
 8013dc4:	0801c46c 	.word	0x0801c46c
 8013dc8:	0801c4d4 	.word	0x0801c4d4
 8013dcc:	200094b8 	.word	0x200094b8
 8013dd0:	2000cc88 	.word	0x2000cc88
 8013dd4:	0801c4f0 	.word	0x0801c4f0
 8013dd8:	200094c8 	.word	0x200094c8

08013ddc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b088      	sub	sp, #32
 8013de0:	af02      	add	r7, sp, #8
 8013de2:	60f8      	str	r0, [r7, #12]
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d109      	bne.n	8013e04 <udp_sendto_if+0x28>
 8013df0:	4b2e      	ldr	r3, [pc, #184]	; (8013eac <udp_sendto_if+0xd0>)
 8013df2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013df6:	492e      	ldr	r1, [pc, #184]	; (8013eb0 <udp_sendto_if+0xd4>)
 8013df8:	482e      	ldr	r0, [pc, #184]	; (8013eb4 <udp_sendto_if+0xd8>)
 8013dfa:	f004 ff55 	bl	8018ca8 <iprintf>
 8013dfe:	f06f 030f 	mvn.w	r3, #15
 8013e02:	e04f      	b.n	8013ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d109      	bne.n	8013e1e <udp_sendto_if+0x42>
 8013e0a:	4b28      	ldr	r3, [pc, #160]	; (8013eac <udp_sendto_if+0xd0>)
 8013e0c:	f240 2281 	movw	r2, #641	; 0x281
 8013e10:	4929      	ldr	r1, [pc, #164]	; (8013eb8 <udp_sendto_if+0xdc>)
 8013e12:	4828      	ldr	r0, [pc, #160]	; (8013eb4 <udp_sendto_if+0xd8>)
 8013e14:	f004 ff48 	bl	8018ca8 <iprintf>
 8013e18:	f06f 030f 	mvn.w	r3, #15
 8013e1c:	e042      	b.n	8013ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d109      	bne.n	8013e38 <udp_sendto_if+0x5c>
 8013e24:	4b21      	ldr	r3, [pc, #132]	; (8013eac <udp_sendto_if+0xd0>)
 8013e26:	f240 2282 	movw	r2, #642	; 0x282
 8013e2a:	4924      	ldr	r1, [pc, #144]	; (8013ebc <udp_sendto_if+0xe0>)
 8013e2c:	4821      	ldr	r0, [pc, #132]	; (8013eb4 <udp_sendto_if+0xd8>)
 8013e2e:	f004 ff3b 	bl	8018ca8 <iprintf>
 8013e32:	f06f 030f 	mvn.w	r3, #15
 8013e36:	e035      	b.n	8013ea4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013e38:	6a3b      	ldr	r3, [r7, #32]
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d109      	bne.n	8013e52 <udp_sendto_if+0x76>
 8013e3e:	4b1b      	ldr	r3, [pc, #108]	; (8013eac <udp_sendto_if+0xd0>)
 8013e40:	f240 2283 	movw	r2, #643	; 0x283
 8013e44:	491e      	ldr	r1, [pc, #120]	; (8013ec0 <udp_sendto_if+0xe4>)
 8013e46:	481b      	ldr	r0, [pc, #108]	; (8013eb4 <udp_sendto_if+0xd8>)
 8013e48:	f004 ff2e 	bl	8018ca8 <iprintf>
 8013e4c:	f06f 030f 	mvn.w	r3, #15
 8013e50:	e028      	b.n	8013ea4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d009      	beq.n	8013e6c <udp_sendto_if+0x90>
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d005      	beq.n	8013e6c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013e68:	2be0      	cmp	r3, #224	; 0xe0
 8013e6a:	d103      	bne.n	8013e74 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013e6c:	6a3b      	ldr	r3, [r7, #32]
 8013e6e:	3304      	adds	r3, #4
 8013e70:	617b      	str	r3, [r7, #20]
 8013e72:	e00b      	b.n	8013e8c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	6a3b      	ldr	r3, [r7, #32]
 8013e7a:	3304      	adds	r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d002      	beq.n	8013e88 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013e82:	f06f 0303 	mvn.w	r3, #3
 8013e86:	e00d      	b.n	8013ea4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013e8c:	887a      	ldrh	r2, [r7, #2]
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	9301      	str	r3, [sp, #4]
 8013e92:	6a3b      	ldr	r3, [r7, #32]
 8013e94:	9300      	str	r3, [sp, #0]
 8013e96:	4613      	mov	r3, r2
 8013e98:	687a      	ldr	r2, [r7, #4]
 8013e9a:	68b9      	ldr	r1, [r7, #8]
 8013e9c:	68f8      	ldr	r0, [r7, #12]
 8013e9e:	f000 f811 	bl	8013ec4 <udp_sendto_if_src>
 8013ea2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3718      	adds	r7, #24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	0801c418 	.word	0x0801c418
 8013eb0:	0801c58c 	.word	0x0801c58c
 8013eb4:	0801c46c 	.word	0x0801c46c
 8013eb8:	0801c5a8 	.word	0x0801c5a8
 8013ebc:	0801c5c4 	.word	0x0801c5c4
 8013ec0:	0801c5e4 	.word	0x0801c5e4

08013ec4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b08c      	sub	sp, #48	; 0x30
 8013ec8:	af04      	add	r7, sp, #16
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d109      	bne.n	8013eec <udp_sendto_if_src+0x28>
 8013ed8:	4b65      	ldr	r3, [pc, #404]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013eda:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013ede:	4965      	ldr	r1, [pc, #404]	; (8014074 <udp_sendto_if_src+0x1b0>)
 8013ee0:	4865      	ldr	r0, [pc, #404]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013ee2:	f004 fee1 	bl	8018ca8 <iprintf>
 8013ee6:	f06f 030f 	mvn.w	r3, #15
 8013eea:	e0bc      	b.n	8014066 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d109      	bne.n	8013f06 <udp_sendto_if_src+0x42>
 8013ef2:	4b5f      	ldr	r3, [pc, #380]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013ef4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013ef8:	4960      	ldr	r1, [pc, #384]	; (801407c <udp_sendto_if_src+0x1b8>)
 8013efa:	485f      	ldr	r0, [pc, #380]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013efc:	f004 fed4 	bl	8018ca8 <iprintf>
 8013f00:	f06f 030f 	mvn.w	r3, #15
 8013f04:	e0af      	b.n	8014066 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d109      	bne.n	8013f20 <udp_sendto_if_src+0x5c>
 8013f0c:	4b58      	ldr	r3, [pc, #352]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013f0e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013f12:	495b      	ldr	r1, [pc, #364]	; (8014080 <udp_sendto_if_src+0x1bc>)
 8013f14:	4858      	ldr	r0, [pc, #352]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013f16:	f004 fec7 	bl	8018ca8 <iprintf>
 8013f1a:	f06f 030f 	mvn.w	r3, #15
 8013f1e:	e0a2      	b.n	8014066 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d109      	bne.n	8013f3a <udp_sendto_if_src+0x76>
 8013f26:	4b52      	ldr	r3, [pc, #328]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013f28:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013f2c:	4955      	ldr	r1, [pc, #340]	; (8014084 <udp_sendto_if_src+0x1c0>)
 8013f2e:	4852      	ldr	r0, [pc, #328]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013f30:	f004 feba 	bl	8018ca8 <iprintf>
 8013f34:	f06f 030f 	mvn.w	r3, #15
 8013f38:	e095      	b.n	8014066 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d109      	bne.n	8013f54 <udp_sendto_if_src+0x90>
 8013f40:	4b4b      	ldr	r3, [pc, #300]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013f42:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013f46:	4950      	ldr	r1, [pc, #320]	; (8014088 <udp_sendto_if_src+0x1c4>)
 8013f48:	484b      	ldr	r0, [pc, #300]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013f4a:	f004 fead 	bl	8018ca8 <iprintf>
 8013f4e:	f06f 030f 	mvn.w	r3, #15
 8013f52:	e088      	b.n	8014066 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	8a5b      	ldrh	r3, [r3, #18]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d10f      	bne.n	8013f7c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013f5c:	68f9      	ldr	r1, [r7, #12]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	8a5b      	ldrh	r3, [r3, #18]
 8013f62:	461a      	mov	r2, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 f893 	bl	8014090 <udp_bind>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013f6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d002      	beq.n	8013f7c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013f76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013f7a:	e074      	b.n	8014066 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	891b      	ldrh	r3, [r3, #8]
 8013f80:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d902      	bls.n	8013f8e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013f88:	f04f 33ff 	mov.w	r3, #4294967295
 8013f8c:	e06b      	b.n	8014066 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013f8e:	2108      	movs	r1, #8
 8013f90:	68b8      	ldr	r0, [r7, #8]
 8013f92:	f7f8 ffa9 	bl	800cee8 <pbuf_add_header>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d015      	beq.n	8013fc8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013f9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013fa0:	2108      	movs	r1, #8
 8013fa2:	2022      	movs	r0, #34	; 0x22
 8013fa4:	f7f8 fd52 	bl	800ca4c <pbuf_alloc>
 8013fa8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d102      	bne.n	8013fb6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013fb4:	e057      	b.n	8014066 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	891b      	ldrh	r3, [r3, #8]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d006      	beq.n	8013fcc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013fbe:	68b9      	ldr	r1, [r7, #8]
 8013fc0:	69f8      	ldr	r0, [r7, #28]
 8013fc2:	f7f9 f94b 	bl	800d25c <pbuf_chain>
 8013fc6:	e001      	b.n	8013fcc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013fcc:	69fb      	ldr	r3, [r7, #28]
 8013fce:	895b      	ldrh	r3, [r3, #10]
 8013fd0:	2b07      	cmp	r3, #7
 8013fd2:	d806      	bhi.n	8013fe2 <udp_sendto_if_src+0x11e>
 8013fd4:	4b26      	ldr	r3, [pc, #152]	; (8014070 <udp_sendto_if_src+0x1ac>)
 8013fd6:	f240 320d 	movw	r2, #781	; 0x30d
 8013fda:	492c      	ldr	r1, [pc, #176]	; (801408c <udp_sendto_if_src+0x1c8>)
 8013fdc:	4826      	ldr	r0, [pc, #152]	; (8014078 <udp_sendto_if_src+0x1b4>)
 8013fde:	f004 fe63 	bl	8018ca8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013fe2:	69fb      	ldr	r3, [r7, #28]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	8a5b      	ldrh	r3, [r3, #18]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7f7 fc13 	bl	800b818 <lwip_htons>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	461a      	mov	r2, r3
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013ffa:	887b      	ldrh	r3, [r7, #2]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7f7 fc0b 	bl	800b818 <lwip_htons>
 8014002:	4603      	mov	r3, r0
 8014004:	461a      	mov	r2, r3
 8014006:	697b      	ldr	r3, [r7, #20]
 8014008:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	2200      	movs	r2, #0
 801400e:	719a      	strb	r2, [r3, #6]
 8014010:	2200      	movs	r2, #0
 8014012:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	891b      	ldrh	r3, [r3, #8]
 8014018:	4618      	mov	r0, r3
 801401a:	f7f7 fbfd 	bl	800b818 <lwip_htons>
 801401e:	4603      	mov	r3, r0
 8014020:	461a      	mov	r2, r3
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014026:	2311      	movs	r3, #17
 8014028:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	7adb      	ldrb	r3, [r3, #11]
 801402e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	7a9b      	ldrb	r3, [r3, #10]
 8014034:	7cb9      	ldrb	r1, [r7, #18]
 8014036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014038:	9202      	str	r2, [sp, #8]
 801403a:	7cfa      	ldrb	r2, [r7, #19]
 801403c:	9201      	str	r2, [sp, #4]
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	460b      	mov	r3, r1
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014046:	69f8      	ldr	r0, [r7, #28]
 8014048:	f003 fb3a 	bl	80176c0 <ip4_output_if_src>
 801404c:	4603      	mov	r3, r0
 801404e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014050:	69fa      	ldr	r2, [r7, #28]
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	429a      	cmp	r2, r3
 8014056:	d004      	beq.n	8014062 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014058:	69f8      	ldr	r0, [r7, #28]
 801405a:	f7f8 ffdb 	bl	800d014 <pbuf_free>
    q = NULL;
 801405e:	2300      	movs	r3, #0
 8014060:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014062:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3720      	adds	r7, #32
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	0801c418 	.word	0x0801c418
 8014074:	0801c604 	.word	0x0801c604
 8014078:	0801c46c 	.word	0x0801c46c
 801407c:	0801c624 	.word	0x0801c624
 8014080:	0801c644 	.word	0x0801c644
 8014084:	0801c668 	.word	0x0801c668
 8014088:	0801c68c 	.word	0x0801c68c
 801408c:	0801c6b0 	.word	0x0801c6b0

08014090 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af00      	add	r7, sp, #0
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	60b9      	str	r1, [r7, #8]
 801409a:	4613      	mov	r3, r2
 801409c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d101      	bne.n	80140a8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80140a4:	4b39      	ldr	r3, [pc, #228]	; (801418c <udp_bind+0xfc>)
 80140a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d109      	bne.n	80140c2 <udp_bind+0x32>
 80140ae:	4b38      	ldr	r3, [pc, #224]	; (8014190 <udp_bind+0x100>)
 80140b0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80140b4:	4937      	ldr	r1, [pc, #220]	; (8014194 <udp_bind+0x104>)
 80140b6:	4838      	ldr	r0, [pc, #224]	; (8014198 <udp_bind+0x108>)
 80140b8:	f004 fdf6 	bl	8018ca8 <iprintf>
 80140bc:	f06f 030f 	mvn.w	r3, #15
 80140c0:	e060      	b.n	8014184 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140c6:	4b35      	ldr	r3, [pc, #212]	; (801419c <udp_bind+0x10c>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	617b      	str	r3, [r7, #20]
 80140cc:	e009      	b.n	80140e2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80140ce:	68fa      	ldr	r2, [r7, #12]
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d102      	bne.n	80140dc <udp_bind+0x4c>
      rebind = 1;
 80140d6:	2301      	movs	r3, #1
 80140d8:	74fb      	strb	r3, [r7, #19]
      break;
 80140da:	e005      	b.n	80140e8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	617b      	str	r3, [r7, #20]
 80140e2:	697b      	ldr	r3, [r7, #20]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d1f2      	bne.n	80140ce <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80140e8:	88fb      	ldrh	r3, [r7, #6]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d109      	bne.n	8014102 <udp_bind+0x72>
    port = udp_new_port();
 80140ee:	f7ff fcc5 	bl	8013a7c <udp_new_port>
 80140f2:	4603      	mov	r3, r0
 80140f4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80140f6:	88fb      	ldrh	r3, [r7, #6]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d12c      	bne.n	8014156 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80140fc:	f06f 0307 	mvn.w	r3, #7
 8014100:	e040      	b.n	8014184 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014102:	4b26      	ldr	r3, [pc, #152]	; (801419c <udp_bind+0x10c>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	617b      	str	r3, [r7, #20]
 8014108:	e022      	b.n	8014150 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	429a      	cmp	r2, r3
 8014110:	d01b      	beq.n	801414a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	8a5b      	ldrh	r3, [r3, #18]
 8014116:	88fa      	ldrh	r2, [r7, #6]
 8014118:	429a      	cmp	r2, r3
 801411a:	d116      	bne.n	801414a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014124:	429a      	cmp	r2, r3
 8014126:	d00d      	beq.n	8014144 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00a      	beq.n	8014144 <udp_bind+0xb4>
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d006      	beq.n	8014144 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014136:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014138:	2b00      	cmp	r3, #0
 801413a:	d003      	beq.n	8014144 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d102      	bne.n	801414a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014144:	f06f 0307 	mvn.w	r3, #7
 8014148:	e01c      	b.n	8014184 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	68db      	ldr	r3, [r3, #12]
 801414e:	617b      	str	r3, [r7, #20]
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1d9      	bne.n	801410a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <udp_bind+0xd2>
 801415c:	68bb      	ldr	r3, [r7, #8]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	e000      	b.n	8014164 <udp_bind+0xd4>
 8014162:	2300      	movs	r3, #0
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	88fa      	ldrh	r2, [r7, #6]
 801416c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801416e:	7cfb      	ldrb	r3, [r7, #19]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d106      	bne.n	8014182 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014174:	4b09      	ldr	r3, [pc, #36]	; (801419c <udp_bind+0x10c>)
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801417c:	4a07      	ldr	r2, [pc, #28]	; (801419c <udp_bind+0x10c>)
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014182:	2300      	movs	r3, #0
}
 8014184:	4618      	mov	r0, r3
 8014186:	3718      	adds	r7, #24
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}
 801418c:	0801d324 	.word	0x0801d324
 8014190:	0801c418 	.word	0x0801c418
 8014194:	0801c6e0 	.word	0x0801c6e0
 8014198:	0801c46c 	.word	0x0801c46c
 801419c:	2000cc88 	.word	0x2000cc88

080141a0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	4613      	mov	r3, r2
 80141ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d109      	bne.n	80141c8 <udp_connect+0x28>
 80141b4:	4b2c      	ldr	r3, [pc, #176]	; (8014268 <udp_connect+0xc8>)
 80141b6:	f240 4235 	movw	r2, #1077	; 0x435
 80141ba:	492c      	ldr	r1, [pc, #176]	; (801426c <udp_connect+0xcc>)
 80141bc:	482c      	ldr	r0, [pc, #176]	; (8014270 <udp_connect+0xd0>)
 80141be:	f004 fd73 	bl	8018ca8 <iprintf>
 80141c2:	f06f 030f 	mvn.w	r3, #15
 80141c6:	e04b      	b.n	8014260 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d109      	bne.n	80141e2 <udp_connect+0x42>
 80141ce:	4b26      	ldr	r3, [pc, #152]	; (8014268 <udp_connect+0xc8>)
 80141d0:	f240 4236 	movw	r2, #1078	; 0x436
 80141d4:	4927      	ldr	r1, [pc, #156]	; (8014274 <udp_connect+0xd4>)
 80141d6:	4826      	ldr	r0, [pc, #152]	; (8014270 <udp_connect+0xd0>)
 80141d8:	f004 fd66 	bl	8018ca8 <iprintf>
 80141dc:	f06f 030f 	mvn.w	r3, #15
 80141e0:	e03e      	b.n	8014260 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	8a5b      	ldrh	r3, [r3, #18]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d10f      	bne.n	801420a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80141ea:	68f9      	ldr	r1, [r7, #12]
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	8a5b      	ldrh	r3, [r3, #18]
 80141f0:	461a      	mov	r2, r3
 80141f2:	68f8      	ldr	r0, [r7, #12]
 80141f4:	f7ff ff4c 	bl	8014090 <udp_bind>
 80141f8:	4603      	mov	r3, r0
 80141fa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80141fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d002      	beq.n	801420a <udp_connect+0x6a>
      return err;
 8014204:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014208:	e02a      	b.n	8014260 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d002      	beq.n	8014216 <udp_connect+0x76>
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	e000      	b.n	8014218 <udp_connect+0x78>
 8014216:	2300      	movs	r3, #0
 8014218:	68fa      	ldr	r2, [r7, #12]
 801421a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	88fa      	ldrh	r2, [r7, #6]
 8014220:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	7c1b      	ldrb	r3, [r3, #16]
 8014226:	f043 0304 	orr.w	r3, r3, #4
 801422a:	b2da      	uxtb	r2, r3
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014230:	4b11      	ldr	r3, [pc, #68]	; (8014278 <udp_connect+0xd8>)
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	617b      	str	r3, [r7, #20]
 8014236:	e008      	b.n	801424a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014238:	68fa      	ldr	r2, [r7, #12]
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	429a      	cmp	r2, r3
 801423e:	d101      	bne.n	8014244 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014240:	2300      	movs	r3, #0
 8014242:	e00d      	b.n	8014260 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	68db      	ldr	r3, [r3, #12]
 8014248:	617b      	str	r3, [r7, #20]
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d1f3      	bne.n	8014238 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014250:	4b09      	ldr	r3, [pc, #36]	; (8014278 <udp_connect+0xd8>)
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014258:	4a07      	ldr	r2, [pc, #28]	; (8014278 <udp_connect+0xd8>)
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801425e:	2300      	movs	r3, #0
}
 8014260:	4618      	mov	r0, r3
 8014262:	3718      	adds	r7, #24
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	0801c418 	.word	0x0801c418
 801426c:	0801c6f8 	.word	0x0801c6f8
 8014270:	0801c46c 	.word	0x0801c46c
 8014274:	0801c714 	.word	0x0801c714
 8014278:	2000cc88 	.word	0x2000cc88

0801427c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d107      	bne.n	801429e <udp_recv+0x22>
 801428e:	4b08      	ldr	r3, [pc, #32]	; (80142b0 <udp_recv+0x34>)
 8014290:	f240 428a 	movw	r2, #1162	; 0x48a
 8014294:	4907      	ldr	r1, [pc, #28]	; (80142b4 <udp_recv+0x38>)
 8014296:	4808      	ldr	r0, [pc, #32]	; (80142b8 <udp_recv+0x3c>)
 8014298:	f004 fd06 	bl	8018ca8 <iprintf>
 801429c:	e005      	b.n	80142aa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	61da      	str	r2, [r3, #28]
}
 80142aa:	3710      	adds	r7, #16
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	0801c418 	.word	0x0801c418
 80142b4:	0801c74c 	.word	0x0801c74c
 80142b8:	0801c46c 	.word	0x0801c46c

080142bc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d107      	bne.n	80142da <udp_remove+0x1e>
 80142ca:	4b19      	ldr	r3, [pc, #100]	; (8014330 <udp_remove+0x74>)
 80142cc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80142d0:	4918      	ldr	r1, [pc, #96]	; (8014334 <udp_remove+0x78>)
 80142d2:	4819      	ldr	r0, [pc, #100]	; (8014338 <udp_remove+0x7c>)
 80142d4:	f004 fce8 	bl	8018ca8 <iprintf>
 80142d8:	e026      	b.n	8014328 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80142da:	4b18      	ldr	r3, [pc, #96]	; (801433c <udp_remove+0x80>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	687a      	ldr	r2, [r7, #4]
 80142e0:	429a      	cmp	r2, r3
 80142e2:	d105      	bne.n	80142f0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80142e4:	4b15      	ldr	r3, [pc, #84]	; (801433c <udp_remove+0x80>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	68db      	ldr	r3, [r3, #12]
 80142ea:	4a14      	ldr	r2, [pc, #80]	; (801433c <udp_remove+0x80>)
 80142ec:	6013      	str	r3, [r2, #0]
 80142ee:	e017      	b.n	8014320 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80142f0:	4b12      	ldr	r3, [pc, #72]	; (801433c <udp_remove+0x80>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	60fb      	str	r3, [r7, #12]
 80142f6:	e010      	b.n	801431a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d009      	beq.n	8014314 <udp_remove+0x58>
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	429a      	cmp	r2, r3
 8014308:	d104      	bne.n	8014314 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	68da      	ldr	r2, [r3, #12]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	60da      	str	r2, [r3, #12]
        break;
 8014312:	e005      	b.n	8014320 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	60fb      	str	r3, [r7, #12]
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d1eb      	bne.n	80142f8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	2000      	movs	r0, #0
 8014324:	f7f7 ffc6 	bl	800c2b4 <memp_free>
}
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	0801c418 	.word	0x0801c418
 8014334:	0801c764 	.word	0x0801c764
 8014338:	0801c46c 	.word	0x0801c46c
 801433c:	2000cc88 	.word	0x2000cc88

08014340 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014346:	2000      	movs	r0, #0
 8014348:	f7f7 ff3e 	bl	800c1c8 <memp_malloc>
 801434c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d007      	beq.n	8014364 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014354:	2220      	movs	r2, #32
 8014356:	2100      	movs	r1, #0
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f004 fd0a 	bl	8018d72 <memset>
    pcb->ttl = UDP_TTL;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	22ff      	movs	r2, #255	; 0xff
 8014362:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014364:	687b      	ldr	r3, [r7, #4]
}
 8014366:	4618      	mov	r0, r3
 8014368:	3708      	adds	r7, #8
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
	...

08014370 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014370:	b480      	push	{r7}
 8014372:	b085      	sub	sp, #20
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d01e      	beq.n	80143be <udp_netif_ip_addr_changed+0x4e>
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d01a      	beq.n	80143be <udp_netif_ip_addr_changed+0x4e>
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d017      	beq.n	80143be <udp_netif_ip_addr_changed+0x4e>
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d013      	beq.n	80143be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014396:	4b0d      	ldr	r3, [pc, #52]	; (80143cc <udp_netif_ip_addr_changed+0x5c>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	60fb      	str	r3, [r7, #12]
 801439c:	e00c      	b.n	80143b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	681a      	ldr	r2, [r3, #0]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d103      	bne.n	80143b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	681a      	ldr	r2, [r3, #0]
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	60fb      	str	r3, [r7, #12]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1ef      	bne.n	801439e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80143be:	bf00      	nop
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	2000cc88 	.word	0x2000cc88

080143d0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80143d4:	4b20      	ldr	r3, [pc, #128]	; (8014458 <dhcp_inc_pcb_refcount+0x88>)
 80143d6:	781b      	ldrb	r3, [r3, #0]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d133      	bne.n	8014444 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80143dc:	4b1f      	ldr	r3, [pc, #124]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d005      	beq.n	80143f0 <dhcp_inc_pcb_refcount+0x20>
 80143e4:	4b1e      	ldr	r3, [pc, #120]	; (8014460 <dhcp_inc_pcb_refcount+0x90>)
 80143e6:	22e5      	movs	r2, #229	; 0xe5
 80143e8:	491e      	ldr	r1, [pc, #120]	; (8014464 <dhcp_inc_pcb_refcount+0x94>)
 80143ea:	481f      	ldr	r0, [pc, #124]	; (8014468 <dhcp_inc_pcb_refcount+0x98>)
 80143ec:	f004 fc5c 	bl	8018ca8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80143f0:	f7ff ffa6 	bl	8014340 <udp_new>
 80143f4:	4603      	mov	r3, r0
 80143f6:	4a19      	ldr	r2, [pc, #100]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 80143f8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80143fa:	4b18      	ldr	r3, [pc, #96]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d102      	bne.n	8014408 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014402:	f04f 33ff 	mov.w	r3, #4294967295
 8014406:	e024      	b.n	8014452 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014408:	4b14      	ldr	r3, [pc, #80]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	7a5a      	ldrb	r2, [r3, #9]
 801440e:	4b13      	ldr	r3, [pc, #76]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	f042 0220 	orr.w	r2, r2, #32
 8014416:	b2d2      	uxtb	r2, r2
 8014418:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801441a:	4b10      	ldr	r3, [pc, #64]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	2244      	movs	r2, #68	; 0x44
 8014420:	4912      	ldr	r1, [pc, #72]	; (801446c <dhcp_inc_pcb_refcount+0x9c>)
 8014422:	4618      	mov	r0, r3
 8014424:	f7ff fe34 	bl	8014090 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014428:	4b0c      	ldr	r3, [pc, #48]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2243      	movs	r2, #67	; 0x43
 801442e:	490f      	ldr	r1, [pc, #60]	; (801446c <dhcp_inc_pcb_refcount+0x9c>)
 8014430:	4618      	mov	r0, r3
 8014432:	f7ff feb5 	bl	80141a0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014436:	4b09      	ldr	r3, [pc, #36]	; (801445c <dhcp_inc_pcb_refcount+0x8c>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	2200      	movs	r2, #0
 801443c:	490c      	ldr	r1, [pc, #48]	; (8014470 <dhcp_inc_pcb_refcount+0xa0>)
 801443e:	4618      	mov	r0, r3
 8014440:	f7ff ff1c 	bl	801427c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014444:	4b04      	ldr	r3, [pc, #16]	; (8014458 <dhcp_inc_pcb_refcount+0x88>)
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	3301      	adds	r3, #1
 801444a:	b2da      	uxtb	r2, r3
 801444c:	4b02      	ldr	r3, [pc, #8]	; (8014458 <dhcp_inc_pcb_refcount+0x88>)
 801444e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	4618      	mov	r0, r3
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	2000ccb8 	.word	0x2000ccb8
 801445c:	2000ccb4 	.word	0x2000ccb4
 8014460:	0801c77c 	.word	0x0801c77c
 8014464:	0801c7b4 	.word	0x0801c7b4
 8014468:	0801c7dc 	.word	0x0801c7dc
 801446c:	0801d324 	.word	0x0801d324
 8014470:	08015d09 	.word	0x08015d09

08014474 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014478:	4b0e      	ldr	r3, [pc, #56]	; (80144b4 <dhcp_dec_pcb_refcount+0x40>)
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d105      	bne.n	801448c <dhcp_dec_pcb_refcount+0x18>
 8014480:	4b0d      	ldr	r3, [pc, #52]	; (80144b8 <dhcp_dec_pcb_refcount+0x44>)
 8014482:	22ff      	movs	r2, #255	; 0xff
 8014484:	490d      	ldr	r1, [pc, #52]	; (80144bc <dhcp_dec_pcb_refcount+0x48>)
 8014486:	480e      	ldr	r0, [pc, #56]	; (80144c0 <dhcp_dec_pcb_refcount+0x4c>)
 8014488:	f004 fc0e 	bl	8018ca8 <iprintf>
  dhcp_pcb_refcount--;
 801448c:	4b09      	ldr	r3, [pc, #36]	; (80144b4 <dhcp_dec_pcb_refcount+0x40>)
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	3b01      	subs	r3, #1
 8014492:	b2da      	uxtb	r2, r3
 8014494:	4b07      	ldr	r3, [pc, #28]	; (80144b4 <dhcp_dec_pcb_refcount+0x40>)
 8014496:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014498:	4b06      	ldr	r3, [pc, #24]	; (80144b4 <dhcp_dec_pcb_refcount+0x40>)
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d107      	bne.n	80144b0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80144a0:	4b08      	ldr	r3, [pc, #32]	; (80144c4 <dhcp_dec_pcb_refcount+0x50>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7ff ff09 	bl	80142bc <udp_remove>
    dhcp_pcb = NULL;
 80144aa:	4b06      	ldr	r3, [pc, #24]	; (80144c4 <dhcp_dec_pcb_refcount+0x50>)
 80144ac:	2200      	movs	r2, #0
 80144ae:	601a      	str	r2, [r3, #0]
  }
}
 80144b0:	bf00      	nop
 80144b2:	bd80      	pop	{r7, pc}
 80144b4:	2000ccb8 	.word	0x2000ccb8
 80144b8:	0801c77c 	.word	0x0801c77c
 80144bc:	0801c804 	.word	0x0801c804
 80144c0:	0801c7dc 	.word	0x0801c7dc
 80144c4:	2000ccb4 	.word	0x2000ccb4

080144c8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144d4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80144d6:	210c      	movs	r1, #12
 80144d8:	68f8      	ldr	r0, [r7, #12]
 80144da:	f001 f857 	bl	801558c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80144de:	4b06      	ldr	r3, [pc, #24]	; (80144f8 <dhcp_handle_nak+0x30>)
 80144e0:	4a05      	ldr	r2, [pc, #20]	; (80144f8 <dhcp_handle_nak+0x30>)
 80144e2:	4905      	ldr	r1, [pc, #20]	; (80144f8 <dhcp_handle_nak+0x30>)
 80144e4:	6878      	ldr	r0, [r7, #4]
 80144e6:	f7f8 f887 	bl	800c5f8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fc4a 	bl	8014d84 <dhcp_discover>
}
 80144f0:	bf00      	nop
 80144f2:	3710      	adds	r7, #16
 80144f4:	46bd      	mov	sp, r7
 80144f6:	bd80      	pop	{r7, pc}
 80144f8:	0801d324 	.word	0x0801d324

080144fc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014508:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801450a:	2108      	movs	r1, #8
 801450c:	68f8      	ldr	r0, [r7, #12]
 801450e:	f001 f83d 	bl	801558c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	331c      	adds	r3, #28
 8014516:	2200      	movs	r2, #0
 8014518:	4619      	mov	r1, r3
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f002 fb3e 	bl	8016b9c <etharp_query>
 8014520:	4603      	mov	r3, r0
 8014522:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	799b      	ldrb	r3, [r3, #6]
 8014528:	2bff      	cmp	r3, #255	; 0xff
 801452a:	d005      	beq.n	8014538 <dhcp_check+0x3c>
    dhcp->tries++;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	799b      	ldrb	r3, [r3, #6]
 8014530:	3301      	adds	r3, #1
 8014532:	b2da      	uxtb	r2, r3
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014538:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801453c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801453e:	893b      	ldrh	r3, [r7, #8]
 8014540:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014544:	4a06      	ldr	r2, [pc, #24]	; (8014560 <dhcp_check+0x64>)
 8014546:	fb82 1203 	smull	r1, r2, r2, r3
 801454a:	1152      	asrs	r2, r2, #5
 801454c:	17db      	asrs	r3, r3, #31
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	b29a      	uxth	r2, r3
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014556:	bf00      	nop
 8014558:	3710      	adds	r7, #16
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	10624dd3 	.word	0x10624dd3

08014564 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b084      	sub	sp, #16
 8014568:	af00      	add	r7, sp, #0
 801456a:	6078      	str	r0, [r7, #4]
 801456c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014572:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014574:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <dhcp_handle_offer+0x44>)
 8014576:	789b      	ldrb	r3, [r3, #2]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d011      	beq.n	80145a0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2200      	movs	r2, #0
 8014580:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014582:	4b0a      	ldr	r3, [pc, #40]	; (80145ac <dhcp_handle_offer+0x48>)
 8014584:	689b      	ldr	r3, [r3, #8]
 8014586:	4618      	mov	r0, r3
 8014588:	f7f7 f95b 	bl	800b842 <lwip_htonl>
 801458c:	4602      	mov	r2, r0
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014592:	683b      	ldr	r3, [r7, #0]
 8014594:	691a      	ldr	r2, [r3, #16]
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f000 f808 	bl	80145b0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80145a0:	bf00      	nop
 80145a2:	3710      	adds	r7, #16
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}
 80145a8:	2000ccac 	.word	0x2000ccac
 80145ac:	2000cc8c 	.word	0x2000cc8c

080145b0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80145b0:	b5b0      	push	{r4, r5, r7, lr}
 80145b2:	b08a      	sub	sp, #40	; 0x28
 80145b4:	af02      	add	r7, sp, #8
 80145b6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d109      	bne.n	80145d2 <dhcp_select+0x22>
 80145be:	4b71      	ldr	r3, [pc, #452]	; (8014784 <dhcp_select+0x1d4>)
 80145c0:	f240 1277 	movw	r2, #375	; 0x177
 80145c4:	4970      	ldr	r1, [pc, #448]	; (8014788 <dhcp_select+0x1d8>)
 80145c6:	4871      	ldr	r0, [pc, #452]	; (801478c <dhcp_select+0x1dc>)
 80145c8:	f004 fb6e 	bl	8018ca8 <iprintf>
 80145cc:	f06f 030f 	mvn.w	r3, #15
 80145d0:	e0d3      	b.n	801477a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80145d8:	69bb      	ldr	r3, [r7, #24]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d109      	bne.n	80145f2 <dhcp_select+0x42>
 80145de:	4b69      	ldr	r3, [pc, #420]	; (8014784 <dhcp_select+0x1d4>)
 80145e0:	f240 1279 	movw	r2, #377	; 0x179
 80145e4:	496a      	ldr	r1, [pc, #424]	; (8014790 <dhcp_select+0x1e0>)
 80145e6:	4869      	ldr	r0, [pc, #420]	; (801478c <dhcp_select+0x1dc>)
 80145e8:	f004 fb5e 	bl	8018ca8 <iprintf>
 80145ec:	f06f 0305 	mvn.w	r3, #5
 80145f0:	e0c3      	b.n	801477a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80145f2:	2101      	movs	r1, #1
 80145f4:	69b8      	ldr	r0, [r7, #24]
 80145f6:	f000 ffc9 	bl	801558c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80145fa:	f107 030c 	add.w	r3, r7, #12
 80145fe:	2203      	movs	r2, #3
 8014600:	69b9      	ldr	r1, [r7, #24]
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f001 fc4e 	bl	8015ea4 <dhcp_create_msg>
 8014608:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	2b00      	cmp	r3, #0
 801460e:	f000 8085 	beq.w	801471c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014618:	89b8      	ldrh	r0, [r7, #12]
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014620:	2302      	movs	r3, #2
 8014622:	2239      	movs	r2, #57	; 0x39
 8014624:	f000 ffcc 	bl	80155c0 <dhcp_option>
 8014628:	4603      	mov	r3, r0
 801462a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801462c:	89b8      	ldrh	r0, [r7, #12]
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014638:	461a      	mov	r2, r3
 801463a:	f001 f81b 	bl	8015674 <dhcp_option_short>
 801463e:	4603      	mov	r3, r0
 8014640:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014642:	89b8      	ldrh	r0, [r7, #12]
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801464a:	2304      	movs	r3, #4
 801464c:	2232      	movs	r2, #50	; 0x32
 801464e:	f000 ffb7 	bl	80155c0 <dhcp_option>
 8014652:	4603      	mov	r3, r0
 8014654:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014656:	89bc      	ldrh	r4, [r7, #12]
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801465e:	69bb      	ldr	r3, [r7, #24]
 8014660:	69db      	ldr	r3, [r3, #28]
 8014662:	4618      	mov	r0, r3
 8014664:	f7f7 f8ed 	bl	800b842 <lwip_htonl>
 8014668:	4603      	mov	r3, r0
 801466a:	461a      	mov	r2, r3
 801466c:	4629      	mov	r1, r5
 801466e:	4620      	mov	r0, r4
 8014670:	f001 f832 	bl	80156d8 <dhcp_option_long>
 8014674:	4603      	mov	r3, r0
 8014676:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014678:	89b8      	ldrh	r0, [r7, #12]
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014680:	2304      	movs	r3, #4
 8014682:	2236      	movs	r2, #54	; 0x36
 8014684:	f000 ff9c 	bl	80155c0 <dhcp_option>
 8014688:	4603      	mov	r3, r0
 801468a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801468c:	89bc      	ldrh	r4, [r7, #12]
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014694:	69bb      	ldr	r3, [r7, #24]
 8014696:	699b      	ldr	r3, [r3, #24]
 8014698:	4618      	mov	r0, r3
 801469a:	f7f7 f8d2 	bl	800b842 <lwip_htonl>
 801469e:	4603      	mov	r3, r0
 80146a0:	461a      	mov	r2, r3
 80146a2:	4629      	mov	r1, r5
 80146a4:	4620      	mov	r0, r4
 80146a6:	f001 f817 	bl	80156d8 <dhcp_option_long>
 80146aa:	4603      	mov	r3, r0
 80146ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80146ae:	89b8      	ldrh	r0, [r7, #12]
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146b6:	2303      	movs	r3, #3
 80146b8:	2237      	movs	r2, #55	; 0x37
 80146ba:	f000 ff81 	bl	80155c0 <dhcp_option>
 80146be:	4603      	mov	r3, r0
 80146c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146c2:	2300      	movs	r3, #0
 80146c4:	77bb      	strb	r3, [r7, #30]
 80146c6:	e00e      	b.n	80146e6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80146c8:	89b8      	ldrh	r0, [r7, #12]
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146d0:	7fbb      	ldrb	r3, [r7, #30]
 80146d2:	4a30      	ldr	r2, [pc, #192]	; (8014794 <dhcp_select+0x1e4>)
 80146d4:	5cd3      	ldrb	r3, [r2, r3]
 80146d6:	461a      	mov	r2, r3
 80146d8:	f000 ffa6 	bl	8015628 <dhcp_option_byte>
 80146dc:	4603      	mov	r3, r0
 80146de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80146e0:	7fbb      	ldrb	r3, [r7, #30]
 80146e2:	3301      	adds	r3, #1
 80146e4:	77bb      	strb	r3, [r7, #30]
 80146e6:	7fbb      	ldrb	r3, [r7, #30]
 80146e8:	2b02      	cmp	r3, #2
 80146ea:	d9ed      	bls.n	80146c8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146ec:	89b8      	ldrh	r0, [r7, #12]
 80146ee:	693b      	ldr	r3, [r7, #16]
 80146f0:	33f0      	adds	r3, #240	; 0xf0
 80146f2:	697a      	ldr	r2, [r7, #20]
 80146f4:	4619      	mov	r1, r3
 80146f6:	f001 fcab 	bl	8016050 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80146fa:	4b27      	ldr	r3, [pc, #156]	; (8014798 <dhcp_select+0x1e8>)
 80146fc:	6818      	ldr	r0, [r3, #0]
 80146fe:	4b27      	ldr	r3, [pc, #156]	; (801479c <dhcp_select+0x1ec>)
 8014700:	9301      	str	r3, [sp, #4]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	9300      	str	r3, [sp, #0]
 8014706:	2343      	movs	r3, #67	; 0x43
 8014708:	4a25      	ldr	r2, [pc, #148]	; (80147a0 <dhcp_select+0x1f0>)
 801470a:	6979      	ldr	r1, [r7, #20]
 801470c:	f7ff fbda 	bl	8013ec4 <udp_sendto_if_src>
 8014710:	4603      	mov	r3, r0
 8014712:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014714:	6978      	ldr	r0, [r7, #20]
 8014716:	f7f8 fc7d 	bl	800d014 <pbuf_free>
 801471a:	e001      	b.n	8014720 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801471c:	23ff      	movs	r3, #255	; 0xff
 801471e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	799b      	ldrb	r3, [r3, #6]
 8014724:	2bff      	cmp	r3, #255	; 0xff
 8014726:	d005      	beq.n	8014734 <dhcp_select+0x184>
    dhcp->tries++;
 8014728:	69bb      	ldr	r3, [r7, #24]
 801472a:	799b      	ldrb	r3, [r3, #6]
 801472c:	3301      	adds	r3, #1
 801472e:	b2da      	uxtb	r2, r3
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	799b      	ldrb	r3, [r3, #6]
 8014738:	2b05      	cmp	r3, #5
 801473a:	d80d      	bhi.n	8014758 <dhcp_select+0x1a8>
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	799b      	ldrb	r3, [r3, #6]
 8014740:	461a      	mov	r2, r3
 8014742:	2301      	movs	r3, #1
 8014744:	4093      	lsls	r3, r2
 8014746:	b29b      	uxth	r3, r3
 8014748:	461a      	mov	r2, r3
 801474a:	0152      	lsls	r2, r2, #5
 801474c:	1ad2      	subs	r2, r2, r3
 801474e:	0092      	lsls	r2, r2, #2
 8014750:	4413      	add	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	b29b      	uxth	r3, r3
 8014756:	e001      	b.n	801475c <dhcp_select+0x1ac>
 8014758:	f64e 2360 	movw	r3, #60000	; 0xea60
 801475c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801475e:	89fb      	ldrh	r3, [r7, #14]
 8014760:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014764:	4a0f      	ldr	r2, [pc, #60]	; (80147a4 <dhcp_select+0x1f4>)
 8014766:	fb82 1203 	smull	r1, r2, r2, r3
 801476a:	1152      	asrs	r2, r2, #5
 801476c:	17db      	asrs	r3, r3, #31
 801476e:	1ad3      	subs	r3, r2, r3
 8014770:	b29a      	uxth	r2, r3
 8014772:	69bb      	ldr	r3, [r7, #24]
 8014774:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014776:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801477a:	4618      	mov	r0, r3
 801477c:	3720      	adds	r7, #32
 801477e:	46bd      	mov	sp, r7
 8014780:	bdb0      	pop	{r4, r5, r7, pc}
 8014782:	bf00      	nop
 8014784:	0801c77c 	.word	0x0801c77c
 8014788:	0801c828 	.word	0x0801c828
 801478c:	0801c7dc 	.word	0x0801c7dc
 8014790:	0801c844 	.word	0x0801c844
 8014794:	20000030 	.word	0x20000030
 8014798:	2000ccb4 	.word	0x2000ccb4
 801479c:	0801d324 	.word	0x0801d324
 80147a0:	0801d328 	.word	0x0801d328
 80147a4:	10624dd3 	.word	0x10624dd3

080147a8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80147ae:	4b27      	ldr	r3, [pc, #156]	; (801484c <dhcp_coarse_tmr+0xa4>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	607b      	str	r3, [r7, #4]
 80147b4:	e042      	b.n	801483c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d039      	beq.n	8014836 <dhcp_coarse_tmr+0x8e>
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	795b      	ldrb	r3, [r3, #5]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d035      	beq.n	8014836 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	8a9b      	ldrh	r3, [r3, #20]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d012      	beq.n	80147f8 <dhcp_coarse_tmr+0x50>
 80147d2:	683b      	ldr	r3, [r7, #0]
 80147d4:	8a5b      	ldrh	r3, [r3, #18]
 80147d6:	3301      	adds	r3, #1
 80147d8:	b29a      	uxth	r2, r3
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	825a      	strh	r2, [r3, #18]
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	8a5a      	ldrh	r2, [r3, #18]
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	8a9b      	ldrh	r3, [r3, #20]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d106      	bne.n	80147f8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f000 fe34 	bl	8015458 <dhcp_release_and_stop>
        dhcp_start(netif);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f000 f96b 	bl	8014acc <dhcp_start>
 80147f6:	e01e      	b.n	8014836 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	8a1b      	ldrh	r3, [r3, #16]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d00b      	beq.n	8014818 <dhcp_coarse_tmr+0x70>
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	8a1b      	ldrh	r3, [r3, #16]
 8014804:	1e5a      	subs	r2, r3, #1
 8014806:	b291      	uxth	r1, r2
 8014808:	683a      	ldr	r2, [r7, #0]
 801480a:	8211      	strh	r1, [r2, #16]
 801480c:	2b01      	cmp	r3, #1
 801480e:	d103      	bne.n	8014818 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f000 f8c7 	bl	80149a4 <dhcp_t2_timeout>
 8014816:	e00e      	b.n	8014836 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	89db      	ldrh	r3, [r3, #14]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d00a      	beq.n	8014836 <dhcp_coarse_tmr+0x8e>
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	89db      	ldrh	r3, [r3, #14]
 8014824:	1e5a      	subs	r2, r3, #1
 8014826:	b291      	uxth	r1, r2
 8014828:	683a      	ldr	r2, [r7, #0]
 801482a:	81d1      	strh	r1, [r2, #14]
 801482c:	2b01      	cmp	r3, #1
 801482e:	d102      	bne.n	8014836 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014830:	6878      	ldr	r0, [r7, #4]
 8014832:	f000 f888 	bl	8014946 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	607b      	str	r3, [r7, #4]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d1b9      	bne.n	80147b6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014842:	bf00      	nop
 8014844:	bf00      	nop
 8014846:	3708      	adds	r7, #8
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	2000cc20 	.word	0x2000cc20

08014850 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014856:	4b16      	ldr	r3, [pc, #88]	; (80148b0 <dhcp_fine_tmr+0x60>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	607b      	str	r3, [r7, #4]
 801485c:	e020      	b.n	80148a0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014862:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d017      	beq.n	801489a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	891b      	ldrh	r3, [r3, #8]
 801486e:	2b01      	cmp	r3, #1
 8014870:	d906      	bls.n	8014880 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	891b      	ldrh	r3, [r3, #8]
 8014876:	3b01      	subs	r3, #1
 8014878:	b29a      	uxth	r2, r3
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	811a      	strh	r2, [r3, #8]
 801487e:	e00c      	b.n	801489a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	891b      	ldrh	r3, [r3, #8]
 8014884:	2b01      	cmp	r3, #1
 8014886:	d108      	bne.n	801489a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	891b      	ldrh	r3, [r3, #8]
 801488c:	3b01      	subs	r3, #1
 801488e:	b29a      	uxth	r2, r3
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 f80d 	bl	80148b4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	607b      	str	r3, [r7, #4]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d1db      	bne.n	801485e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80148a6:	bf00      	nop
 80148a8:	bf00      	nop
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	2000cc20 	.word	0x2000cc20

080148b4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	795b      	ldrb	r3, [r3, #5]
 80148c6:	2b0c      	cmp	r3, #12
 80148c8:	d003      	beq.n	80148d2 <dhcp_timeout+0x1e>
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	795b      	ldrb	r3, [r3, #5]
 80148ce:	2b06      	cmp	r3, #6
 80148d0:	d103      	bne.n	80148da <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f000 fa56 	bl	8014d84 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80148d8:	e031      	b.n	801493e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	795b      	ldrb	r3, [r3, #5]
 80148de:	2b01      	cmp	r3, #1
 80148e0:	d10e      	bne.n	8014900 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	799b      	ldrb	r3, [r3, #6]
 80148e6:	2b05      	cmp	r3, #5
 80148e8:	d803      	bhi.n	80148f2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f7ff fe60 	bl	80145b0 <dhcp_select>
}
 80148f0:	e025      	b.n	801493e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80148f2:	6878      	ldr	r0, [r7, #4]
 80148f4:	f000 fdb0 	bl	8015458 <dhcp_release_and_stop>
      dhcp_start(netif);
 80148f8:	6878      	ldr	r0, [r7, #4]
 80148fa:	f000 f8e7 	bl	8014acc <dhcp_start>
}
 80148fe:	e01e      	b.n	801493e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	795b      	ldrb	r3, [r3, #5]
 8014904:	2b08      	cmp	r3, #8
 8014906:	d10b      	bne.n	8014920 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	799b      	ldrb	r3, [r3, #6]
 801490c:	2b01      	cmp	r3, #1
 801490e:	d803      	bhi.n	8014918 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7ff fdf3 	bl	80144fc <dhcp_check>
}
 8014916:	e012      	b.n	801493e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f000 fad5 	bl	8014ec8 <dhcp_bind>
}
 801491e:	e00e      	b.n	801493e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	795b      	ldrb	r3, [r3, #5]
 8014924:	2b03      	cmp	r3, #3
 8014926:	d10a      	bne.n	801493e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	799b      	ldrb	r3, [r3, #6]
 801492c:	2b01      	cmp	r3, #1
 801492e:	d803      	bhi.n	8014938 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f000 fcdb 	bl	80152ec <dhcp_reboot>
}
 8014936:	e002      	b.n	801493e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f000 fa23 	bl	8014d84 <dhcp_discover>
}
 801493e:	bf00      	nop
 8014940:	3710      	adds	r7, #16
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}

08014946 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014946:	b580      	push	{r7, lr}
 8014948:	b084      	sub	sp, #16
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014952:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	795b      	ldrb	r3, [r3, #5]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d007      	beq.n	801496c <dhcp_t1_timeout+0x26>
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	795b      	ldrb	r3, [r3, #5]
 8014960:	2b0a      	cmp	r3, #10
 8014962:	d003      	beq.n	801496c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014968:	2b05      	cmp	r3, #5
 801496a:	d117      	bne.n	801499c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f000 fb85 	bl	801507c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	899b      	ldrh	r3, [r3, #12]
 8014976:	461a      	mov	r2, r3
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	8a5b      	ldrh	r3, [r3, #18]
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	2b01      	cmp	r3, #1
 8014980:	dd0c      	ble.n	801499c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	899b      	ldrh	r3, [r3, #12]
 8014986:	461a      	mov	r2, r3
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	8a5b      	ldrh	r3, [r3, #18]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	2b00      	cmp	r3, #0
 8014990:	da00      	bge.n	8014994 <dhcp_t1_timeout+0x4e>
 8014992:	3301      	adds	r3, #1
 8014994:	105b      	asrs	r3, r3, #1
 8014996:	b29a      	uxth	r2, r3
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801499c:	bf00      	nop
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	795b      	ldrb	r3, [r3, #5]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	d00b      	beq.n	80149d2 <dhcp_t2_timeout+0x2e>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	795b      	ldrb	r3, [r3, #5]
 80149be:	2b0a      	cmp	r3, #10
 80149c0:	d007      	beq.n	80149d2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80149c6:	2b05      	cmp	r3, #5
 80149c8:	d003      	beq.n	80149d2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	795b      	ldrb	r3, [r3, #5]
 80149ce:	2b04      	cmp	r3, #4
 80149d0:	d117      	bne.n	8014a02 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 fbee 	bl	80151b4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	8a9b      	ldrh	r3, [r3, #20]
 80149dc:	461a      	mov	r2, r3
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	8a5b      	ldrh	r3, [r3, #18]
 80149e2:	1ad3      	subs	r3, r2, r3
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	dd0c      	ble.n	8014a02 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	8a9b      	ldrh	r3, [r3, #20]
 80149ec:	461a      	mov	r2, r3
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	8a5b      	ldrh	r3, [r3, #18]
 80149f2:	1ad3      	subs	r3, r2, r3
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	da00      	bge.n	80149fa <dhcp_t2_timeout+0x56>
 80149f8:	3301      	adds	r3, #1
 80149fa:	105b      	asrs	r3, r3, #1
 80149fc:	b29a      	uxth	r2, r3
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014a02:	bf00      	nop
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
	...

08014a0c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a1a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	2200      	movs	r2, #0
 8014a26:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014a28:	4b26      	ldr	r3, [pc, #152]	; (8014ac4 <dhcp_handle_ack+0xb8>)
 8014a2a:	78db      	ldrb	r3, [r3, #3]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d003      	beq.n	8014a38 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014a30:	4b25      	ldr	r3, [pc, #148]	; (8014ac8 <dhcp_handle_ack+0xbc>)
 8014a32:	68da      	ldr	r2, [r3, #12]
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014a38:	4b22      	ldr	r3, [pc, #136]	; (8014ac4 <dhcp_handle_ack+0xb8>)
 8014a3a:	791b      	ldrb	r3, [r3, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d004      	beq.n	8014a4a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014a40:	4b21      	ldr	r3, [pc, #132]	; (8014ac8 <dhcp_handle_ack+0xbc>)
 8014a42:	691a      	ldr	r2, [r3, #16]
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8014a48:	e004      	b.n	8014a54 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a4e:	085a      	lsrs	r2, r3, #1
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014a54:	4b1b      	ldr	r3, [pc, #108]	; (8014ac4 <dhcp_handle_ack+0xb8>)
 8014a56:	795b      	ldrb	r3, [r3, #5]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d004      	beq.n	8014a66 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014a5c:	4b1a      	ldr	r3, [pc, #104]	; (8014ac8 <dhcp_handle_ack+0xbc>)
 8014a5e:	695a      	ldr	r2, [r3, #20]
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	631a      	str	r2, [r3, #48]	; 0x30
 8014a64:	e007      	b.n	8014a76 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	00db      	lsls	r3, r3, #3
 8014a6e:	1a9b      	subs	r3, r3, r2
 8014a70:	08da      	lsrs	r2, r3, #3
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	691a      	ldr	r2, [r3, #16]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014a7e:	4b11      	ldr	r3, [pc, #68]	; (8014ac4 <dhcp_handle_ack+0xb8>)
 8014a80:	799b      	ldrb	r3, [r3, #6]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00b      	beq.n	8014a9e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014a86:	4b10      	ldr	r3, [pc, #64]	; (8014ac8 <dhcp_handle_ack+0xbc>)
 8014a88:	699b      	ldr	r3, [r3, #24]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f6 fed9 	bl	800b842 <lwip_htonl>
 8014a90:	4602      	mov	r2, r0
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	2201      	movs	r2, #1
 8014a9a:	71da      	strb	r2, [r3, #7]
 8014a9c:	e002      	b.n	8014aa4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014aa4:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <dhcp_handle_ack+0xb8>)
 8014aa6:	79db      	ldrb	r3, [r3, #7]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d007      	beq.n	8014abc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014aac:	4b06      	ldr	r3, [pc, #24]	; (8014ac8 <dhcp_handle_ack+0xbc>)
 8014aae:	69db      	ldr	r3, [r3, #28]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f6 fec6 	bl	800b842 <lwip_htonl>
 8014ab6:	4602      	mov	r2, r0
 8014ab8:	68fb      	ldr	r3, [r7, #12]
 8014aba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014abc:	bf00      	nop
 8014abe:	3710      	adds	r7, #16
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	2000ccac 	.word	0x2000ccac
 8014ac8:	2000cc8c 	.word	0x2000cc8c

08014acc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d109      	bne.n	8014aee <dhcp_start+0x22>
 8014ada:	4b37      	ldr	r3, [pc, #220]	; (8014bb8 <dhcp_start+0xec>)
 8014adc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014ae0:	4936      	ldr	r1, [pc, #216]	; (8014bbc <dhcp_start+0xf0>)
 8014ae2:	4837      	ldr	r0, [pc, #220]	; (8014bc0 <dhcp_start+0xf4>)
 8014ae4:	f004 f8e0 	bl	8018ca8 <iprintf>
 8014ae8:	f06f 030f 	mvn.w	r3, #15
 8014aec:	e060      	b.n	8014bb0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014af4:	f003 0301 	and.w	r3, r3, #1
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d109      	bne.n	8014b10 <dhcp_start+0x44>
 8014afc:	4b2e      	ldr	r3, [pc, #184]	; (8014bb8 <dhcp_start+0xec>)
 8014afe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014b02:	4930      	ldr	r1, [pc, #192]	; (8014bc4 <dhcp_start+0xf8>)
 8014b04:	482e      	ldr	r0, [pc, #184]	; (8014bc0 <dhcp_start+0xf4>)
 8014b06:	f004 f8cf 	bl	8018ca8 <iprintf>
 8014b0a:	f06f 030f 	mvn.w	r3, #15
 8014b0e:	e04f      	b.n	8014bb0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b1a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014b1e:	d202      	bcs.n	8014b26 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014b20:	f04f 33ff 	mov.w	r3, #4294967295
 8014b24:	e044      	b.n	8014bb0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d10d      	bne.n	8014b48 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014b2c:	2034      	movs	r0, #52	; 0x34
 8014b2e:	f7f7 f9a7 	bl	800be80 <mem_malloc>
 8014b32:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d102      	bne.n	8014b40 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014b3e:	e037      	b.n	8014bb0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	625a      	str	r2, [r3, #36]	; 0x24
 8014b46:	e005      	b.n	8014b54 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	791b      	ldrb	r3, [r3, #4]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d001      	beq.n	8014b54 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014b50:	f7ff fc90 	bl	8014474 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014b54:	2234      	movs	r2, #52	; 0x34
 8014b56:	2100      	movs	r1, #0
 8014b58:	68f8      	ldr	r0, [r7, #12]
 8014b5a:	f004 f90a 	bl	8018d72 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014b5e:	f7ff fc37 	bl	80143d0 <dhcp_inc_pcb_refcount>
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d002      	beq.n	8014b6e <dhcp_start+0xa2>
    return ERR_MEM;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6c:	e020      	b.n	8014bb0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	2201      	movs	r2, #1
 8014b72:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014b7a:	f003 0304 	and.w	r3, r3, #4
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d105      	bne.n	8014b8e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014b82:	2102      	movs	r1, #2
 8014b84:	68f8      	ldr	r0, [r7, #12]
 8014b86:	f000 fd01 	bl	801558c <dhcp_set_state>
    return ERR_OK;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	e010      	b.n	8014bb0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f000 f8f8 	bl	8014d84 <dhcp_discover>
 8014b94:	4603      	mov	r3, r0
 8014b96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014b98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d005      	beq.n	8014bac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f000 fc59 	bl	8015458 <dhcp_release_and_stop>
    return ERR_MEM;
 8014ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8014baa:	e001      	b.n	8014bb0 <dhcp_start+0xe4>
  }
  return result;
 8014bac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3710      	adds	r7, #16
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	0801c77c 	.word	0x0801c77c
 8014bbc:	0801c860 	.word	0x0801c860
 8014bc0:	0801c7dc 	.word	0x0801c7dc
 8014bc4:	0801c8a4 	.word	0x0801c8a4

08014bc8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b084      	sub	sp, #16
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bd4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d025      	beq.n	8014c28 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	795b      	ldrb	r3, [r3, #5]
 8014be0:	2b0a      	cmp	r3, #10
 8014be2:	d008      	beq.n	8014bf6 <dhcp_network_changed+0x2e>
 8014be4:	2b0a      	cmp	r3, #10
 8014be6:	dc0d      	bgt.n	8014c04 <dhcp_network_changed+0x3c>
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d01f      	beq.n	8014c2c <dhcp_network_changed+0x64>
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	db09      	blt.n	8014c04 <dhcp_network_changed+0x3c>
 8014bf0:	3b03      	subs	r3, #3
 8014bf2:	2b02      	cmp	r3, #2
 8014bf4:	d806      	bhi.n	8014c04 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f000 fb75 	bl	80152ec <dhcp_reboot>
      break;
 8014c02:	e014      	b.n	8014c2e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	795b      	ldrb	r3, [r3, #5]
 8014c08:	2b0c      	cmp	r3, #12
 8014c0a:	d906      	bls.n	8014c1a <dhcp_network_changed+0x52>
 8014c0c:	4b09      	ldr	r3, [pc, #36]	; (8014c34 <dhcp_network_changed+0x6c>)
 8014c0e:	f240 326d 	movw	r2, #877	; 0x36d
 8014c12:	4909      	ldr	r1, [pc, #36]	; (8014c38 <dhcp_network_changed+0x70>)
 8014c14:	4809      	ldr	r0, [pc, #36]	; (8014c3c <dhcp_network_changed+0x74>)
 8014c16:	f004 f847 	bl	8018ca8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2200      	movs	r2, #0
 8014c1e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f000 f8af 	bl	8014d84 <dhcp_discover>
      break;
 8014c26:	e002      	b.n	8014c2e <dhcp_network_changed+0x66>
    return;
 8014c28:	bf00      	nop
 8014c2a:	e000      	b.n	8014c2e <dhcp_network_changed+0x66>
      break;
 8014c2c:	bf00      	nop
  }
}
 8014c2e:	3710      	adds	r7, #16
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	0801c77c 	.word	0x0801c77c
 8014c38:	0801c8c8 	.word	0x0801c8c8
 8014c3c:	0801c7dc 	.word	0x0801c7dc

08014c40 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b084      	sub	sp, #16
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
 8014c48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d107      	bne.n	8014c60 <dhcp_arp_reply+0x20>
 8014c50:	4b0e      	ldr	r3, [pc, #56]	; (8014c8c <dhcp_arp_reply+0x4c>)
 8014c52:	f240 328b 	movw	r2, #907	; 0x38b
 8014c56:	490e      	ldr	r1, [pc, #56]	; (8014c90 <dhcp_arp_reply+0x50>)
 8014c58:	480e      	ldr	r0, [pc, #56]	; (8014c94 <dhcp_arp_reply+0x54>)
 8014c5a:	f004 f825 	bl	8018ca8 <iprintf>
 8014c5e:	e012      	b.n	8014c86 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c64:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d00c      	beq.n	8014c86 <dhcp_arp_reply+0x46>
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	795b      	ldrb	r3, [r3, #5]
 8014c70:	2b08      	cmp	r3, #8
 8014c72:	d108      	bne.n	8014c86 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	681a      	ldr	r2, [r3, #0]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	69db      	ldr	r3, [r3, #28]
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d102      	bne.n	8014c86 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 f809 	bl	8014c98 <dhcp_decline>
    }
  }
}
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	0801c77c 	.word	0x0801c77c
 8014c90:	0801c860 	.word	0x0801c860
 8014c94:	0801c7dc 	.word	0x0801c7dc

08014c98 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014c98:	b5b0      	push	{r4, r5, r7, lr}
 8014c9a:	b08a      	sub	sp, #40	; 0x28
 8014c9c:	af02      	add	r7, sp, #8
 8014c9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ca4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014ca6:	210c      	movs	r1, #12
 8014ca8:	69b8      	ldr	r0, [r7, #24]
 8014caa:	f000 fc6f 	bl	801558c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014cae:	f107 030c 	add.w	r3, r7, #12
 8014cb2:	2204      	movs	r2, #4
 8014cb4:	69b9      	ldr	r1, [r7, #24]
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f001 f8f4 	bl	8015ea4 <dhcp_create_msg>
 8014cbc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d035      	beq.n	8014d30 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014cca:	89b8      	ldrh	r0, [r7, #12]
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014cd2:	2304      	movs	r3, #4
 8014cd4:	2232      	movs	r2, #50	; 0x32
 8014cd6:	f000 fc73 	bl	80155c0 <dhcp_option>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014cde:	89bc      	ldrh	r4, [r7, #12]
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	69db      	ldr	r3, [r3, #28]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7f6 fda9 	bl	800b842 <lwip_htonl>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	4629      	mov	r1, r5
 8014cf6:	4620      	mov	r0, r4
 8014cf8:	f000 fcee 	bl	80156d8 <dhcp_option_long>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014d00:	89b8      	ldrh	r0, [r7, #12]
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	33f0      	adds	r3, #240	; 0xf0
 8014d06:	697a      	ldr	r2, [r7, #20]
 8014d08:	4619      	mov	r1, r3
 8014d0a:	f001 f9a1 	bl	8016050 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014d0e:	4b19      	ldr	r3, [pc, #100]	; (8014d74 <dhcp_decline+0xdc>)
 8014d10:	6818      	ldr	r0, [r3, #0]
 8014d12:	4b19      	ldr	r3, [pc, #100]	; (8014d78 <dhcp_decline+0xe0>)
 8014d14:	9301      	str	r3, [sp, #4]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	9300      	str	r3, [sp, #0]
 8014d1a:	2343      	movs	r3, #67	; 0x43
 8014d1c:	4a17      	ldr	r2, [pc, #92]	; (8014d7c <dhcp_decline+0xe4>)
 8014d1e:	6979      	ldr	r1, [r7, #20]
 8014d20:	f7ff f8d0 	bl	8013ec4 <udp_sendto_if_src>
 8014d24:	4603      	mov	r3, r0
 8014d26:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014d28:	6978      	ldr	r0, [r7, #20]
 8014d2a:	f7f8 f973 	bl	800d014 <pbuf_free>
 8014d2e:	e001      	b.n	8014d34 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014d30:	23ff      	movs	r3, #255	; 0xff
 8014d32:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	799b      	ldrb	r3, [r3, #6]
 8014d38:	2bff      	cmp	r3, #255	; 0xff
 8014d3a:	d005      	beq.n	8014d48 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014d3c:	69bb      	ldr	r3, [r7, #24]
 8014d3e:	799b      	ldrb	r3, [r3, #6]
 8014d40:	3301      	adds	r3, #1
 8014d42:	b2da      	uxtb	r2, r3
 8014d44:	69bb      	ldr	r3, [r7, #24]
 8014d46:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014d48:	f242 7310 	movw	r3, #10000	; 0x2710
 8014d4c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014d4e:	89fb      	ldrh	r3, [r7, #14]
 8014d50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014d54:	4a0a      	ldr	r2, [pc, #40]	; (8014d80 <dhcp_decline+0xe8>)
 8014d56:	fb82 1203 	smull	r1, r2, r2, r3
 8014d5a:	1152      	asrs	r2, r2, #5
 8014d5c:	17db      	asrs	r3, r3, #31
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	b29a      	uxth	r2, r3
 8014d62:	69bb      	ldr	r3, [r7, #24]
 8014d64:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014d66:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3720      	adds	r7, #32
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bdb0      	pop	{r4, r5, r7, pc}
 8014d72:	bf00      	nop
 8014d74:	2000ccb4 	.word	0x2000ccb4
 8014d78:	0801d324 	.word	0x0801d324
 8014d7c:	0801d328 	.word	0x0801d328
 8014d80:	10624dd3 	.word	0x10624dd3

08014d84 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b08a      	sub	sp, #40	; 0x28
 8014d88:	af02      	add	r7, sp, #8
 8014d8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d90:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014d92:	2300      	movs	r3, #0
 8014d94:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014d96:	69bb      	ldr	r3, [r7, #24]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014d9c:	2106      	movs	r1, #6
 8014d9e:	69b8      	ldr	r0, [r7, #24]
 8014da0:	f000 fbf4 	bl	801558c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014da4:	f107 0308 	add.w	r3, r7, #8
 8014da8:	2201      	movs	r2, #1
 8014daa:	69b9      	ldr	r1, [r7, #24]
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f001 f879 	bl	8015ea4 <dhcp_create_msg>
 8014db2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d04b      	beq.n	8014e52 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014dc0:	8938      	ldrh	r0, [r7, #8]
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014dc8:	2302      	movs	r3, #2
 8014dca:	2239      	movs	r2, #57	; 0x39
 8014dcc:	f000 fbf8 	bl	80155c0 <dhcp_option>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014dd4:	8938      	ldrh	r0, [r7, #8]
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014de0:	461a      	mov	r2, r3
 8014de2:	f000 fc47 	bl	8015674 <dhcp_option_short>
 8014de6:	4603      	mov	r3, r0
 8014de8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014dea:	8938      	ldrh	r0, [r7, #8]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014df2:	2303      	movs	r3, #3
 8014df4:	2237      	movs	r2, #55	; 0x37
 8014df6:	f000 fbe3 	bl	80155c0 <dhcp_option>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014dfe:	2300      	movs	r3, #0
 8014e00:	77fb      	strb	r3, [r7, #31]
 8014e02:	e00e      	b.n	8014e22 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014e04:	8938      	ldrh	r0, [r7, #8]
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014e0c:	7ffb      	ldrb	r3, [r7, #31]
 8014e0e:	4a29      	ldr	r2, [pc, #164]	; (8014eb4 <dhcp_discover+0x130>)
 8014e10:	5cd3      	ldrb	r3, [r2, r3]
 8014e12:	461a      	mov	r2, r3
 8014e14:	f000 fc08 	bl	8015628 <dhcp_option_byte>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014e1c:	7ffb      	ldrb	r3, [r7, #31]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	77fb      	strb	r3, [r7, #31]
 8014e22:	7ffb      	ldrb	r3, [r7, #31]
 8014e24:	2b02      	cmp	r3, #2
 8014e26:	d9ed      	bls.n	8014e04 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014e28:	8938      	ldrh	r0, [r7, #8]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	33f0      	adds	r3, #240	; 0xf0
 8014e2e:	693a      	ldr	r2, [r7, #16]
 8014e30:	4619      	mov	r1, r3
 8014e32:	f001 f90d 	bl	8016050 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014e36:	4b20      	ldr	r3, [pc, #128]	; (8014eb8 <dhcp_discover+0x134>)
 8014e38:	6818      	ldr	r0, [r3, #0]
 8014e3a:	4b20      	ldr	r3, [pc, #128]	; (8014ebc <dhcp_discover+0x138>)
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	9300      	str	r3, [sp, #0]
 8014e42:	2343      	movs	r3, #67	; 0x43
 8014e44:	4a1e      	ldr	r2, [pc, #120]	; (8014ec0 <dhcp_discover+0x13c>)
 8014e46:	6939      	ldr	r1, [r7, #16]
 8014e48:	f7ff f83c 	bl	8013ec4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014e4c:	6938      	ldr	r0, [r7, #16]
 8014e4e:	f7f8 f8e1 	bl	800d014 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	799b      	ldrb	r3, [r3, #6]
 8014e56:	2bff      	cmp	r3, #255	; 0xff
 8014e58:	d005      	beq.n	8014e66 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	799b      	ldrb	r3, [r3, #6]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	b2da      	uxtb	r2, r3
 8014e62:	69bb      	ldr	r3, [r7, #24]
 8014e64:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014e66:	69bb      	ldr	r3, [r7, #24]
 8014e68:	799b      	ldrb	r3, [r3, #6]
 8014e6a:	2b05      	cmp	r3, #5
 8014e6c:	d80d      	bhi.n	8014e8a <dhcp_discover+0x106>
 8014e6e:	69bb      	ldr	r3, [r7, #24]
 8014e70:	799b      	ldrb	r3, [r3, #6]
 8014e72:	461a      	mov	r2, r3
 8014e74:	2301      	movs	r3, #1
 8014e76:	4093      	lsls	r3, r2
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	461a      	mov	r2, r3
 8014e7c:	0152      	lsls	r2, r2, #5
 8014e7e:	1ad2      	subs	r2, r2, r3
 8014e80:	0092      	lsls	r2, r2, #2
 8014e82:	4413      	add	r3, r2
 8014e84:	00db      	lsls	r3, r3, #3
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	e001      	b.n	8014e8e <dhcp_discover+0x10a>
 8014e8a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014e8e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e90:	897b      	ldrh	r3, [r7, #10]
 8014e92:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e96:	4a0b      	ldr	r2, [pc, #44]	; (8014ec4 <dhcp_discover+0x140>)
 8014e98:	fb82 1203 	smull	r1, r2, r2, r3
 8014e9c:	1152      	asrs	r2, r2, #5
 8014e9e:	17db      	asrs	r3, r3, #31
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	69bb      	ldr	r3, [r7, #24]
 8014ea6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3720      	adds	r7, #32
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	20000030 	.word	0x20000030
 8014eb8:	2000ccb4 	.word	0x2000ccb4
 8014ebc:	0801d324 	.word	0x0801d324
 8014ec0:	0801d328 	.word	0x0801d328
 8014ec4:	10624dd3 	.word	0x10624dd3

08014ec8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b088      	sub	sp, #32
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d107      	bne.n	8014ee6 <dhcp_bind+0x1e>
 8014ed6:	4b64      	ldr	r3, [pc, #400]	; (8015068 <dhcp_bind+0x1a0>)
 8014ed8:	f240 4215 	movw	r2, #1045	; 0x415
 8014edc:	4963      	ldr	r1, [pc, #396]	; (801506c <dhcp_bind+0x1a4>)
 8014ede:	4864      	ldr	r0, [pc, #400]	; (8015070 <dhcp_bind+0x1a8>)
 8014ee0:	f003 fee2 	bl	8018ca8 <iprintf>
 8014ee4:	e0bc      	b.n	8015060 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014eec:	69bb      	ldr	r3, [r7, #24]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d107      	bne.n	8014f02 <dhcp_bind+0x3a>
 8014ef2:	4b5d      	ldr	r3, [pc, #372]	; (8015068 <dhcp_bind+0x1a0>)
 8014ef4:	f240 4217 	movw	r2, #1047	; 0x417
 8014ef8:	495e      	ldr	r1, [pc, #376]	; (8015074 <dhcp_bind+0x1ac>)
 8014efa:	485d      	ldr	r0, [pc, #372]	; (8015070 <dhcp_bind+0x1a8>)
 8014efc:	f003 fed4 	bl	8018ca8 <iprintf>
 8014f00:	e0ae      	b.n	8015060 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8014f02:	69bb      	ldr	r3, [r7, #24]
 8014f04:	2200      	movs	r2, #0
 8014f06:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014f08:	69bb      	ldr	r3, [r7, #24]
 8014f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f10:	d019      	beq.n	8014f46 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f16:	331e      	adds	r3, #30
 8014f18:	4a57      	ldr	r2, [pc, #348]	; (8015078 <dhcp_bind+0x1b0>)
 8014f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8014f1e:	095b      	lsrs	r3, r3, #5
 8014f20:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f28:	d302      	bcc.n	8014f30 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f2e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014f30:	69fb      	ldr	r3, [r7, #28]
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	69bb      	ldr	r3, [r7, #24]
 8014f36:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	8a9b      	ldrh	r3, [r3, #20]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d102      	bne.n	8014f46 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	2201      	movs	r2, #1
 8014f44:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f4e:	d01d      	beq.n	8014f8c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f50:	69bb      	ldr	r3, [r7, #24]
 8014f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f54:	331e      	adds	r3, #30
 8014f56:	4a48      	ldr	r2, [pc, #288]	; (8015078 <dhcp_bind+0x1b0>)
 8014f58:	fba2 2303 	umull	r2, r3, r2, r3
 8014f5c:	095b      	lsrs	r3, r3, #5
 8014f5e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f66:	d302      	bcc.n	8014f6e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f6c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014f6e:	69fb      	ldr	r3, [r7, #28]
 8014f70:	b29a      	uxth	r2, r3
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014f76:	69bb      	ldr	r3, [r7, #24]
 8014f78:	895b      	ldrh	r3, [r3, #10]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d102      	bne.n	8014f84 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014f7e:	69bb      	ldr	r3, [r7, #24]
 8014f80:	2201      	movs	r2, #1
 8014f82:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014f84:	69bb      	ldr	r3, [r7, #24]
 8014f86:	895a      	ldrh	r2, [r3, #10]
 8014f88:	69bb      	ldr	r3, [r7, #24]
 8014f8a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f94:	d01d      	beq.n	8014fd2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f9a:	331e      	adds	r3, #30
 8014f9c:	4a36      	ldr	r2, [pc, #216]	; (8015078 <dhcp_bind+0x1b0>)
 8014f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8014fa2:	095b      	lsrs	r3, r3, #5
 8014fa4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014fa6:	69fb      	ldr	r3, [r7, #28]
 8014fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fac:	d302      	bcc.n	8014fb4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8014fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fb2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014fb4:	69fb      	ldr	r3, [r7, #28]
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	69bb      	ldr	r3, [r7, #24]
 8014fba:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014fbc:	69bb      	ldr	r3, [r7, #24]
 8014fbe:	899b      	ldrh	r3, [r3, #12]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d102      	bne.n	8014fca <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014fca:	69bb      	ldr	r3, [r7, #24]
 8014fcc:	899a      	ldrh	r2, [r3, #12]
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8014fd2:	69bb      	ldr	r3, [r7, #24]
 8014fd4:	895a      	ldrh	r2, [r3, #10]
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	899b      	ldrh	r3, [r3, #12]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d306      	bcc.n	8014fec <dhcp_bind+0x124>
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	899b      	ldrh	r3, [r3, #12]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d002      	beq.n	8014fec <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014fe6:	69bb      	ldr	r3, [r7, #24]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014fec:	69bb      	ldr	r3, [r7, #24]
 8014fee:	79db      	ldrb	r3, [r3, #7]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d003      	beq.n	8014ffc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	6a1b      	ldr	r3, [r3, #32]
 8014ff8:	613b      	str	r3, [r7, #16]
 8014ffa:	e014      	b.n	8015026 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014ffc:	69bb      	ldr	r3, [r7, #24]
 8014ffe:	331c      	adds	r3, #28
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015008:	2b00      	cmp	r3, #0
 801500a:	db02      	blt.n	8015012 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801500c:	23ff      	movs	r3, #255	; 0xff
 801500e:	613b      	str	r3, [r7, #16]
 8015010:	e009      	b.n	8015026 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015012:	7dfb      	ldrb	r3, [r7, #23]
 8015014:	2bbf      	cmp	r3, #191	; 0xbf
 8015016:	d903      	bls.n	8015020 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015018:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801501c:	613b      	str	r3, [r7, #16]
 801501e:	e002      	b.n	8015026 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015024:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d108      	bne.n	8015044 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	69da      	ldr	r2, [r3, #28]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	4013      	ands	r3, r2
 801503a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015042:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015044:	210a      	movs	r1, #10
 8015046:	69b8      	ldr	r0, [r7, #24]
 8015048:	f000 faa0 	bl	801558c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	f103 011c 	add.w	r1, r3, #28
 8015052:	f107 030c 	add.w	r3, r7, #12
 8015056:	f107 0210 	add.w	r2, r7, #16
 801505a:	6878      	ldr	r0, [r7, #4]
 801505c:	f7f7 facc 	bl	800c5f8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015060:	3720      	adds	r7, #32
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}
 8015066:	bf00      	nop
 8015068:	0801c77c 	.word	0x0801c77c
 801506c:	0801c8dc 	.word	0x0801c8dc
 8015070:	0801c7dc 	.word	0x0801c7dc
 8015074:	0801c8f8 	.word	0x0801c8f8
 8015078:	88888889 	.word	0x88888889

0801507c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b08a      	sub	sp, #40	; 0x28
 8015080:	af02      	add	r7, sp, #8
 8015082:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015088:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801508a:	2105      	movs	r1, #5
 801508c:	69b8      	ldr	r0, [r7, #24]
 801508e:	f000 fa7d 	bl	801558c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015092:	f107 030c 	add.w	r3, r7, #12
 8015096:	2203      	movs	r2, #3
 8015098:	69b9      	ldr	r1, [r7, #24]
 801509a:	6878      	ldr	r0, [r7, #4]
 801509c:	f000 ff02 	bl	8015ea4 <dhcp_create_msg>
 80150a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d04e      	beq.n	8015146 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80150ae:	89b8      	ldrh	r0, [r7, #12]
 80150b0:	693b      	ldr	r3, [r7, #16]
 80150b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150b6:	2302      	movs	r3, #2
 80150b8:	2239      	movs	r2, #57	; 0x39
 80150ba:	f000 fa81 	bl	80155c0 <dhcp_option>
 80150be:	4603      	mov	r3, r0
 80150c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80150c2:	89b8      	ldrh	r0, [r7, #12]
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80150ce:	461a      	mov	r2, r3
 80150d0:	f000 fad0 	bl	8015674 <dhcp_option_short>
 80150d4:	4603      	mov	r3, r0
 80150d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80150d8:	89b8      	ldrh	r0, [r7, #12]
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150e0:	2303      	movs	r3, #3
 80150e2:	2237      	movs	r2, #55	; 0x37
 80150e4:	f000 fa6c 	bl	80155c0 <dhcp_option>
 80150e8:	4603      	mov	r3, r0
 80150ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150ec:	2300      	movs	r3, #0
 80150ee:	77bb      	strb	r3, [r7, #30]
 80150f0:	e00e      	b.n	8015110 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150f2:	89b8      	ldrh	r0, [r7, #12]
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150fa:	7fbb      	ldrb	r3, [r7, #30]
 80150fc:	4a2a      	ldr	r2, [pc, #168]	; (80151a8 <dhcp_renew+0x12c>)
 80150fe:	5cd3      	ldrb	r3, [r2, r3]
 8015100:	461a      	mov	r2, r3
 8015102:	f000 fa91 	bl	8015628 <dhcp_option_byte>
 8015106:	4603      	mov	r3, r0
 8015108:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801510a:	7fbb      	ldrb	r3, [r7, #30]
 801510c:	3301      	adds	r3, #1
 801510e:	77bb      	strb	r3, [r7, #30]
 8015110:	7fbb      	ldrb	r3, [r7, #30]
 8015112:	2b02      	cmp	r3, #2
 8015114:	d9ed      	bls.n	80150f2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015116:	89b8      	ldrh	r0, [r7, #12]
 8015118:	693b      	ldr	r3, [r7, #16]
 801511a:	33f0      	adds	r3, #240	; 0xf0
 801511c:	697a      	ldr	r2, [r7, #20]
 801511e:	4619      	mov	r1, r3
 8015120:	f000 ff96 	bl	8016050 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015124:	4b21      	ldr	r3, [pc, #132]	; (80151ac <dhcp_renew+0x130>)
 8015126:	6818      	ldr	r0, [r3, #0]
 8015128:	69bb      	ldr	r3, [r7, #24]
 801512a:	f103 0218 	add.w	r2, r3, #24
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	9300      	str	r3, [sp, #0]
 8015132:	2343      	movs	r3, #67	; 0x43
 8015134:	6979      	ldr	r1, [r7, #20]
 8015136:	f7fe fe51 	bl	8013ddc <udp_sendto_if>
 801513a:	4603      	mov	r3, r0
 801513c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801513e:	6978      	ldr	r0, [r7, #20]
 8015140:	f7f7 ff68 	bl	800d014 <pbuf_free>
 8015144:	e001      	b.n	801514a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015146:	23ff      	movs	r3, #255	; 0xff
 8015148:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	799b      	ldrb	r3, [r3, #6]
 801514e:	2bff      	cmp	r3, #255	; 0xff
 8015150:	d005      	beq.n	801515e <dhcp_renew+0xe2>
    dhcp->tries++;
 8015152:	69bb      	ldr	r3, [r7, #24]
 8015154:	799b      	ldrb	r3, [r3, #6]
 8015156:	3301      	adds	r3, #1
 8015158:	b2da      	uxtb	r2, r3
 801515a:	69bb      	ldr	r3, [r7, #24]
 801515c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801515e:	69bb      	ldr	r3, [r7, #24]
 8015160:	799b      	ldrb	r3, [r3, #6]
 8015162:	2b09      	cmp	r3, #9
 8015164:	d80a      	bhi.n	801517c <dhcp_renew+0x100>
 8015166:	69bb      	ldr	r3, [r7, #24]
 8015168:	799b      	ldrb	r3, [r3, #6]
 801516a:	b29b      	uxth	r3, r3
 801516c:	461a      	mov	r2, r3
 801516e:	0152      	lsls	r2, r2, #5
 8015170:	1ad2      	subs	r2, r2, r3
 8015172:	0092      	lsls	r2, r2, #2
 8015174:	4413      	add	r3, r2
 8015176:	011b      	lsls	r3, r3, #4
 8015178:	b29b      	uxth	r3, r3
 801517a:	e001      	b.n	8015180 <dhcp_renew+0x104>
 801517c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015180:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015182:	89fb      	ldrh	r3, [r7, #14]
 8015184:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015188:	4a09      	ldr	r2, [pc, #36]	; (80151b0 <dhcp_renew+0x134>)
 801518a:	fb82 1203 	smull	r1, r2, r2, r3
 801518e:	1152      	asrs	r2, r2, #5
 8015190:	17db      	asrs	r3, r3, #31
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	b29a      	uxth	r2, r3
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801519a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3720      	adds	r7, #32
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	20000030 	.word	0x20000030
 80151ac:	2000ccb4 	.word	0x2000ccb4
 80151b0:	10624dd3 	.word	0x10624dd3

080151b4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b08a      	sub	sp, #40	; 0x28
 80151b8:	af02      	add	r7, sp, #8
 80151ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151c0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80151c2:	2104      	movs	r1, #4
 80151c4:	69b8      	ldr	r0, [r7, #24]
 80151c6:	f000 f9e1 	bl	801558c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80151ca:	f107 030c 	add.w	r3, r7, #12
 80151ce:	2203      	movs	r2, #3
 80151d0:	69b9      	ldr	r1, [r7, #24]
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f000 fe66 	bl	8015ea4 <dhcp_create_msg>
 80151d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80151da:	697b      	ldr	r3, [r7, #20]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d04c      	beq.n	801527a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80151e0:	697b      	ldr	r3, [r7, #20]
 80151e2:	685b      	ldr	r3, [r3, #4]
 80151e4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80151e6:	89b8      	ldrh	r0, [r7, #12]
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151ee:	2302      	movs	r3, #2
 80151f0:	2239      	movs	r2, #57	; 0x39
 80151f2:	f000 f9e5 	bl	80155c0 <dhcp_option>
 80151f6:	4603      	mov	r3, r0
 80151f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80151fa:	89b8      	ldrh	r0, [r7, #12]
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015206:	461a      	mov	r2, r3
 8015208:	f000 fa34 	bl	8015674 <dhcp_option_short>
 801520c:	4603      	mov	r3, r0
 801520e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015210:	89b8      	ldrh	r0, [r7, #12]
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015218:	2303      	movs	r3, #3
 801521a:	2237      	movs	r2, #55	; 0x37
 801521c:	f000 f9d0 	bl	80155c0 <dhcp_option>
 8015220:	4603      	mov	r3, r0
 8015222:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015224:	2300      	movs	r3, #0
 8015226:	77bb      	strb	r3, [r7, #30]
 8015228:	e00e      	b.n	8015248 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801522a:	89b8      	ldrh	r0, [r7, #12]
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015232:	7fbb      	ldrb	r3, [r7, #30]
 8015234:	4a29      	ldr	r2, [pc, #164]	; (80152dc <dhcp_rebind+0x128>)
 8015236:	5cd3      	ldrb	r3, [r2, r3]
 8015238:	461a      	mov	r2, r3
 801523a:	f000 f9f5 	bl	8015628 <dhcp_option_byte>
 801523e:	4603      	mov	r3, r0
 8015240:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015242:	7fbb      	ldrb	r3, [r7, #30]
 8015244:	3301      	adds	r3, #1
 8015246:	77bb      	strb	r3, [r7, #30]
 8015248:	7fbb      	ldrb	r3, [r7, #30]
 801524a:	2b02      	cmp	r3, #2
 801524c:	d9ed      	bls.n	801522a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801524e:	89b8      	ldrh	r0, [r7, #12]
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	33f0      	adds	r3, #240	; 0xf0
 8015254:	697a      	ldr	r2, [r7, #20]
 8015256:	4619      	mov	r1, r3
 8015258:	f000 fefa 	bl	8016050 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801525c:	4b20      	ldr	r3, [pc, #128]	; (80152e0 <dhcp_rebind+0x12c>)
 801525e:	6818      	ldr	r0, [r3, #0]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	9300      	str	r3, [sp, #0]
 8015264:	2343      	movs	r3, #67	; 0x43
 8015266:	4a1f      	ldr	r2, [pc, #124]	; (80152e4 <dhcp_rebind+0x130>)
 8015268:	6979      	ldr	r1, [r7, #20]
 801526a:	f7fe fdb7 	bl	8013ddc <udp_sendto_if>
 801526e:	4603      	mov	r3, r0
 8015270:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015272:	6978      	ldr	r0, [r7, #20]
 8015274:	f7f7 fece 	bl	800d014 <pbuf_free>
 8015278:	e001      	b.n	801527e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801527a:	23ff      	movs	r3, #255	; 0xff
 801527c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801527e:	69bb      	ldr	r3, [r7, #24]
 8015280:	799b      	ldrb	r3, [r3, #6]
 8015282:	2bff      	cmp	r3, #255	; 0xff
 8015284:	d005      	beq.n	8015292 <dhcp_rebind+0xde>
    dhcp->tries++;
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	799b      	ldrb	r3, [r3, #6]
 801528a:	3301      	adds	r3, #1
 801528c:	b2da      	uxtb	r2, r3
 801528e:	69bb      	ldr	r3, [r7, #24]
 8015290:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	799b      	ldrb	r3, [r3, #6]
 8015296:	2b09      	cmp	r3, #9
 8015298:	d80a      	bhi.n	80152b0 <dhcp_rebind+0xfc>
 801529a:	69bb      	ldr	r3, [r7, #24]
 801529c:	799b      	ldrb	r3, [r3, #6]
 801529e:	b29b      	uxth	r3, r3
 80152a0:	461a      	mov	r2, r3
 80152a2:	0152      	lsls	r2, r2, #5
 80152a4:	1ad2      	subs	r2, r2, r3
 80152a6:	0092      	lsls	r2, r2, #2
 80152a8:	4413      	add	r3, r2
 80152aa:	00db      	lsls	r3, r3, #3
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	e001      	b.n	80152b4 <dhcp_rebind+0x100>
 80152b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80152b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80152b6:	89fb      	ldrh	r3, [r7, #14]
 80152b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80152bc:	4a0a      	ldr	r2, [pc, #40]	; (80152e8 <dhcp_rebind+0x134>)
 80152be:	fb82 1203 	smull	r1, r2, r2, r3
 80152c2:	1152      	asrs	r2, r2, #5
 80152c4:	17db      	asrs	r3, r3, #31
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80152ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3720      	adds	r7, #32
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	20000030 	.word	0x20000030
 80152e0:	2000ccb4 	.word	0x2000ccb4
 80152e4:	0801d328 	.word	0x0801d328
 80152e8:	10624dd3 	.word	0x10624dd3

080152ec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80152ec:	b5b0      	push	{r4, r5, r7, lr}
 80152ee:	b08a      	sub	sp, #40	; 0x28
 80152f0:	af02      	add	r7, sp, #8
 80152f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152f8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80152fa:	2103      	movs	r1, #3
 80152fc:	69b8      	ldr	r0, [r7, #24]
 80152fe:	f000 f945 	bl	801558c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015302:	f107 030c 	add.w	r3, r7, #12
 8015306:	2203      	movs	r2, #3
 8015308:	69b9      	ldr	r1, [r7, #24]
 801530a:	6878      	ldr	r0, [r7, #4]
 801530c:	f000 fdca 	bl	8015ea4 <dhcp_create_msg>
 8015310:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d066      	beq.n	80153e6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801531e:	89b8      	ldrh	r0, [r7, #12]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015326:	2302      	movs	r3, #2
 8015328:	2239      	movs	r2, #57	; 0x39
 801532a:	f000 f949 	bl	80155c0 <dhcp_option>
 801532e:	4603      	mov	r3, r0
 8015330:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015332:	89b8      	ldrh	r0, [r7, #12]
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	33f0      	adds	r3, #240	; 0xf0
 8015338:	f44f 7210 	mov.w	r2, #576	; 0x240
 801533c:	4619      	mov	r1, r3
 801533e:	f000 f999 	bl	8015674 <dhcp_option_short>
 8015342:	4603      	mov	r3, r0
 8015344:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015346:	89b8      	ldrh	r0, [r7, #12]
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801534e:	2304      	movs	r3, #4
 8015350:	2232      	movs	r2, #50	; 0x32
 8015352:	f000 f935 	bl	80155c0 <dhcp_option>
 8015356:	4603      	mov	r3, r0
 8015358:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801535a:	89bc      	ldrh	r4, [r7, #12]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	69db      	ldr	r3, [r3, #28]
 8015366:	4618      	mov	r0, r3
 8015368:	f7f6 fa6b 	bl	800b842 <lwip_htonl>
 801536c:	4603      	mov	r3, r0
 801536e:	461a      	mov	r2, r3
 8015370:	4629      	mov	r1, r5
 8015372:	4620      	mov	r0, r4
 8015374:	f000 f9b0 	bl	80156d8 <dhcp_option_long>
 8015378:	4603      	mov	r3, r0
 801537a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801537c:	89b8      	ldrh	r0, [r7, #12]
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015384:	2303      	movs	r3, #3
 8015386:	2237      	movs	r2, #55	; 0x37
 8015388:	f000 f91a 	bl	80155c0 <dhcp_option>
 801538c:	4603      	mov	r3, r0
 801538e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015390:	2300      	movs	r3, #0
 8015392:	77bb      	strb	r3, [r7, #30]
 8015394:	e00e      	b.n	80153b4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015396:	89b8      	ldrh	r0, [r7, #12]
 8015398:	693b      	ldr	r3, [r7, #16]
 801539a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801539e:	7fbb      	ldrb	r3, [r7, #30]
 80153a0:	4a29      	ldr	r2, [pc, #164]	; (8015448 <dhcp_reboot+0x15c>)
 80153a2:	5cd3      	ldrb	r3, [r2, r3]
 80153a4:	461a      	mov	r2, r3
 80153a6:	f000 f93f 	bl	8015628 <dhcp_option_byte>
 80153aa:	4603      	mov	r3, r0
 80153ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80153ae:	7fbb      	ldrb	r3, [r7, #30]
 80153b0:	3301      	adds	r3, #1
 80153b2:	77bb      	strb	r3, [r7, #30]
 80153b4:	7fbb      	ldrb	r3, [r7, #30]
 80153b6:	2b02      	cmp	r3, #2
 80153b8:	d9ed      	bls.n	8015396 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80153ba:	89b8      	ldrh	r0, [r7, #12]
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	33f0      	adds	r3, #240	; 0xf0
 80153c0:	697a      	ldr	r2, [r7, #20]
 80153c2:	4619      	mov	r1, r3
 80153c4:	f000 fe44 	bl	8016050 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80153c8:	4b20      	ldr	r3, [pc, #128]	; (801544c <dhcp_reboot+0x160>)
 80153ca:	6818      	ldr	r0, [r3, #0]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	2343      	movs	r3, #67	; 0x43
 80153d2:	4a1f      	ldr	r2, [pc, #124]	; (8015450 <dhcp_reboot+0x164>)
 80153d4:	6979      	ldr	r1, [r7, #20]
 80153d6:	f7fe fd01 	bl	8013ddc <udp_sendto_if>
 80153da:	4603      	mov	r3, r0
 80153dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80153de:	6978      	ldr	r0, [r7, #20]
 80153e0:	f7f7 fe18 	bl	800d014 <pbuf_free>
 80153e4:	e001      	b.n	80153ea <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80153e6:	23ff      	movs	r3, #255	; 0xff
 80153e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80153ea:	69bb      	ldr	r3, [r7, #24]
 80153ec:	799b      	ldrb	r3, [r3, #6]
 80153ee:	2bff      	cmp	r3, #255	; 0xff
 80153f0:	d005      	beq.n	80153fe <dhcp_reboot+0x112>
    dhcp->tries++;
 80153f2:	69bb      	ldr	r3, [r7, #24]
 80153f4:	799b      	ldrb	r3, [r3, #6]
 80153f6:	3301      	adds	r3, #1
 80153f8:	b2da      	uxtb	r2, r3
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	799b      	ldrb	r3, [r3, #6]
 8015402:	2b09      	cmp	r3, #9
 8015404:	d80a      	bhi.n	801541c <dhcp_reboot+0x130>
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	799b      	ldrb	r3, [r3, #6]
 801540a:	b29b      	uxth	r3, r3
 801540c:	461a      	mov	r2, r3
 801540e:	0152      	lsls	r2, r2, #5
 8015410:	1ad2      	subs	r2, r2, r3
 8015412:	0092      	lsls	r2, r2, #2
 8015414:	4413      	add	r3, r2
 8015416:	00db      	lsls	r3, r3, #3
 8015418:	b29b      	uxth	r3, r3
 801541a:	e001      	b.n	8015420 <dhcp_reboot+0x134>
 801541c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015420:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015422:	89fb      	ldrh	r3, [r7, #14]
 8015424:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015428:	4a0a      	ldr	r2, [pc, #40]	; (8015454 <dhcp_reboot+0x168>)
 801542a:	fb82 1203 	smull	r1, r2, r2, r3
 801542e:	1152      	asrs	r2, r2, #5
 8015430:	17db      	asrs	r3, r3, #31
 8015432:	1ad3      	subs	r3, r2, r3
 8015434:	b29a      	uxth	r2, r3
 8015436:	69bb      	ldr	r3, [r7, #24]
 8015438:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801543a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801543e:	4618      	mov	r0, r3
 8015440:	3720      	adds	r7, #32
 8015442:	46bd      	mov	sp, r7
 8015444:	bdb0      	pop	{r4, r5, r7, pc}
 8015446:	bf00      	nop
 8015448:	20000030 	.word	0x20000030
 801544c:	2000ccb4 	.word	0x2000ccb4
 8015450:	0801d328 	.word	0x0801d328
 8015454:	10624dd3 	.word	0x10624dd3

08015458 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015458:	b5b0      	push	{r4, r5, r7, lr}
 801545a:	b08a      	sub	sp, #40	; 0x28
 801545c:	af02      	add	r7, sp, #8
 801545e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015464:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015466:	69fb      	ldr	r3, [r7, #28]
 8015468:	2b00      	cmp	r3, #0
 801546a:	f000 8084 	beq.w	8015576 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	795b      	ldrb	r3, [r3, #5]
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 8081 	beq.w	801557a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	699b      	ldr	r3, [r3, #24]
 801547c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	2200      	movs	r2, #0
 8015482:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015484:	69fb      	ldr	r3, [r7, #28]
 8015486:	2200      	movs	r2, #0
 8015488:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801548a:	69fb      	ldr	r3, [r7, #28]
 801548c:	2200      	movs	r2, #0
 801548e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015490:	69fb      	ldr	r3, [r7, #28]
 8015492:	2200      	movs	r2, #0
 8015494:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	2200      	movs	r2, #0
 801549a:	631a      	str	r2, [r3, #48]	; 0x30
 801549c:	69fb      	ldr	r3, [r7, #28]
 801549e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154a0:	69fb      	ldr	r3, [r7, #28]
 80154a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80154a4:	69fb      	ldr	r3, [r7, #28]
 80154a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	2200      	movs	r2, #0
 80154b0:	829a      	strh	r2, [r3, #20]
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	8a9a      	ldrh	r2, [r3, #20]
 80154b6:	69fb      	ldr	r3, [r7, #28]
 80154b8:	825a      	strh	r2, [r3, #18]
 80154ba:	69fb      	ldr	r3, [r7, #28]
 80154bc:	8a5a      	ldrh	r2, [r3, #18]
 80154be:	69fb      	ldr	r3, [r7, #28]
 80154c0:	821a      	strh	r2, [r3, #16]
 80154c2:	69fb      	ldr	r3, [r7, #28]
 80154c4:	8a1a      	ldrh	r2, [r3, #16]
 80154c6:	69fb      	ldr	r3, [r7, #28]
 80154c8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80154ca:	6878      	ldr	r0, [r7, #4]
 80154cc:	f000 fdee 	bl	80160ac <dhcp_supplied_address>
 80154d0:	4603      	mov	r3, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d03b      	beq.n	801554e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80154d6:	f107 030e 	add.w	r3, r7, #14
 80154da:	2207      	movs	r2, #7
 80154dc:	69f9      	ldr	r1, [r7, #28]
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 fce0 	bl	8015ea4 <dhcp_create_msg>
 80154e4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80154e6:	69bb      	ldr	r3, [r7, #24]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d030      	beq.n	801554e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154ec:	69bb      	ldr	r3, [r7, #24]
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80154f2:	89f8      	ldrh	r0, [r7, #14]
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154fa:	2304      	movs	r3, #4
 80154fc:	2236      	movs	r2, #54	; 0x36
 80154fe:	f000 f85f 	bl	80155c0 <dhcp_option>
 8015502:	4603      	mov	r3, r0
 8015504:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015506:	89fc      	ldrh	r4, [r7, #14]
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	4618      	mov	r0, r3
 8015512:	f7f6 f996 	bl	800b842 <lwip_htonl>
 8015516:	4603      	mov	r3, r0
 8015518:	461a      	mov	r2, r3
 801551a:	4629      	mov	r1, r5
 801551c:	4620      	mov	r0, r4
 801551e:	f000 f8db 	bl	80156d8 <dhcp_option_long>
 8015522:	4603      	mov	r3, r0
 8015524:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015526:	89f8      	ldrh	r0, [r7, #14]
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	33f0      	adds	r3, #240	; 0xf0
 801552c:	69ba      	ldr	r2, [r7, #24]
 801552e:	4619      	mov	r1, r3
 8015530:	f000 fd8e 	bl	8016050 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015534:	4b13      	ldr	r3, [pc, #76]	; (8015584 <dhcp_release_and_stop+0x12c>)
 8015536:	6818      	ldr	r0, [r3, #0]
 8015538:	f107 0210 	add.w	r2, r7, #16
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	9300      	str	r3, [sp, #0]
 8015540:	2343      	movs	r3, #67	; 0x43
 8015542:	69b9      	ldr	r1, [r7, #24]
 8015544:	f7fe fc4a 	bl	8013ddc <udp_sendto_if>
      pbuf_free(p_out);
 8015548:	69b8      	ldr	r0, [r7, #24]
 801554a:	f7f7 fd63 	bl	800d014 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801554e:	4b0e      	ldr	r3, [pc, #56]	; (8015588 <dhcp_release_and_stop+0x130>)
 8015550:	4a0d      	ldr	r2, [pc, #52]	; (8015588 <dhcp_release_and_stop+0x130>)
 8015552:	490d      	ldr	r1, [pc, #52]	; (8015588 <dhcp_release_and_stop+0x130>)
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f7 f84f 	bl	800c5f8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801555a:	2100      	movs	r1, #0
 801555c:	69f8      	ldr	r0, [r7, #28]
 801555e:	f000 f815 	bl	801558c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	791b      	ldrb	r3, [r3, #4]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d008      	beq.n	801557c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801556a:	f7fe ff83 	bl	8014474 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	2200      	movs	r2, #0
 8015572:	711a      	strb	r2, [r3, #4]
 8015574:	e002      	b.n	801557c <dhcp_release_and_stop+0x124>
    return;
 8015576:	bf00      	nop
 8015578:	e000      	b.n	801557c <dhcp_release_and_stop+0x124>
    return;
 801557a:	bf00      	nop
  }
}
 801557c:	3720      	adds	r7, #32
 801557e:	46bd      	mov	sp, r7
 8015580:	bdb0      	pop	{r4, r5, r7, pc}
 8015582:	bf00      	nop
 8015584:	2000ccb4 	.word	0x2000ccb4
 8015588:	0801d324 	.word	0x0801d324

0801558c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801558c:	b480      	push	{r7}
 801558e:	b083      	sub	sp, #12
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	460b      	mov	r3, r1
 8015596:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	795b      	ldrb	r3, [r3, #5]
 801559c:	78fa      	ldrb	r2, [r7, #3]
 801559e:	429a      	cmp	r2, r3
 80155a0:	d008      	beq.n	80155b4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	78fa      	ldrb	r2, [r7, #3]
 80155a6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2200      	movs	r2, #0
 80155ac:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2200      	movs	r2, #0
 80155b2:	811a      	strh	r2, [r3, #8]
  }
}
 80155b4:	bf00      	nop
 80155b6:	370c      	adds	r7, #12
 80155b8:	46bd      	mov	sp, r7
 80155ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155be:	4770      	bx	lr

080155c0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6039      	str	r1, [r7, #0]
 80155c8:	4611      	mov	r1, r2
 80155ca:	461a      	mov	r2, r3
 80155cc:	4603      	mov	r3, r0
 80155ce:	80fb      	strh	r3, [r7, #6]
 80155d0:	460b      	mov	r3, r1
 80155d2:	717b      	strb	r3, [r7, #5]
 80155d4:	4613      	mov	r3, r2
 80155d6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80155d8:	88fa      	ldrh	r2, [r7, #6]
 80155da:	793b      	ldrb	r3, [r7, #4]
 80155dc:	4413      	add	r3, r2
 80155de:	3302      	adds	r3, #2
 80155e0:	2b44      	cmp	r3, #68	; 0x44
 80155e2:	d906      	bls.n	80155f2 <dhcp_option+0x32>
 80155e4:	4b0d      	ldr	r3, [pc, #52]	; (801561c <dhcp_option+0x5c>)
 80155e6:	f240 529a 	movw	r2, #1434	; 0x59a
 80155ea:	490d      	ldr	r1, [pc, #52]	; (8015620 <dhcp_option+0x60>)
 80155ec:	480d      	ldr	r0, [pc, #52]	; (8015624 <dhcp_option+0x64>)
 80155ee:	f003 fb5b 	bl	8018ca8 <iprintf>
  options[options_out_len++] = option_type;
 80155f2:	88fb      	ldrh	r3, [r7, #6]
 80155f4:	1c5a      	adds	r2, r3, #1
 80155f6:	80fa      	strh	r2, [r7, #6]
 80155f8:	461a      	mov	r2, r3
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	4413      	add	r3, r2
 80155fe:	797a      	ldrb	r2, [r7, #5]
 8015600:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015602:	88fb      	ldrh	r3, [r7, #6]
 8015604:	1c5a      	adds	r2, r3, #1
 8015606:	80fa      	strh	r2, [r7, #6]
 8015608:	461a      	mov	r2, r3
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	4413      	add	r3, r2
 801560e:	793a      	ldrb	r2, [r7, #4]
 8015610:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015612:	88fb      	ldrh	r3, [r7, #6]
}
 8015614:	4618      	mov	r0, r3
 8015616:	3708      	adds	r7, #8
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	0801c77c 	.word	0x0801c77c
 8015620:	0801c910 	.word	0x0801c910
 8015624:	0801c7dc 	.word	0x0801c7dc

08015628 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	4603      	mov	r3, r0
 8015630:	6039      	str	r1, [r7, #0]
 8015632:	80fb      	strh	r3, [r7, #6]
 8015634:	4613      	mov	r3, r2
 8015636:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015638:	88fb      	ldrh	r3, [r7, #6]
 801563a:	2b43      	cmp	r3, #67	; 0x43
 801563c:	d906      	bls.n	801564c <dhcp_option_byte+0x24>
 801563e:	4b0a      	ldr	r3, [pc, #40]	; (8015668 <dhcp_option_byte+0x40>)
 8015640:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015644:	4909      	ldr	r1, [pc, #36]	; (801566c <dhcp_option_byte+0x44>)
 8015646:	480a      	ldr	r0, [pc, #40]	; (8015670 <dhcp_option_byte+0x48>)
 8015648:	f003 fb2e 	bl	8018ca8 <iprintf>
  options[options_out_len++] = value;
 801564c:	88fb      	ldrh	r3, [r7, #6]
 801564e:	1c5a      	adds	r2, r3, #1
 8015650:	80fa      	strh	r2, [r7, #6]
 8015652:	461a      	mov	r2, r3
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	4413      	add	r3, r2
 8015658:	797a      	ldrb	r2, [r7, #5]
 801565a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801565c:	88fb      	ldrh	r3, [r7, #6]
}
 801565e:	4618      	mov	r0, r3
 8015660:	3708      	adds	r7, #8
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	0801c77c 	.word	0x0801c77c
 801566c:	0801c954 	.word	0x0801c954
 8015670:	0801c7dc 	.word	0x0801c7dc

08015674 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	4603      	mov	r3, r0
 801567c:	6039      	str	r1, [r7, #0]
 801567e:	80fb      	strh	r3, [r7, #6]
 8015680:	4613      	mov	r3, r2
 8015682:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015684:	88fb      	ldrh	r3, [r7, #6]
 8015686:	3302      	adds	r3, #2
 8015688:	2b44      	cmp	r3, #68	; 0x44
 801568a:	d906      	bls.n	801569a <dhcp_option_short+0x26>
 801568c:	4b0f      	ldr	r3, [pc, #60]	; (80156cc <dhcp_option_short+0x58>)
 801568e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015692:	490f      	ldr	r1, [pc, #60]	; (80156d0 <dhcp_option_short+0x5c>)
 8015694:	480f      	ldr	r0, [pc, #60]	; (80156d4 <dhcp_option_short+0x60>)
 8015696:	f003 fb07 	bl	8018ca8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801569a:	88bb      	ldrh	r3, [r7, #4]
 801569c:	0a1b      	lsrs	r3, r3, #8
 801569e:	b29a      	uxth	r2, r3
 80156a0:	88fb      	ldrh	r3, [r7, #6]
 80156a2:	1c59      	adds	r1, r3, #1
 80156a4:	80f9      	strh	r1, [r7, #6]
 80156a6:	4619      	mov	r1, r3
 80156a8:	683b      	ldr	r3, [r7, #0]
 80156aa:	440b      	add	r3, r1
 80156ac:	b2d2      	uxtb	r2, r2
 80156ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80156b0:	88fb      	ldrh	r3, [r7, #6]
 80156b2:	1c5a      	adds	r2, r3, #1
 80156b4:	80fa      	strh	r2, [r7, #6]
 80156b6:	461a      	mov	r2, r3
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	4413      	add	r3, r2
 80156bc:	88ba      	ldrh	r2, [r7, #4]
 80156be:	b2d2      	uxtb	r2, r2
 80156c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80156c2:	88fb      	ldrh	r3, [r7, #6]
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	0801c77c 	.word	0x0801c77c
 80156d0:	0801c98c 	.word	0x0801c98c
 80156d4:	0801c7dc 	.word	0x0801c7dc

080156d8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b084      	sub	sp, #16
 80156dc:	af00      	add	r7, sp, #0
 80156de:	4603      	mov	r3, r0
 80156e0:	60b9      	str	r1, [r7, #8]
 80156e2:	607a      	str	r2, [r7, #4]
 80156e4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80156e6:	89fb      	ldrh	r3, [r7, #14]
 80156e8:	3304      	adds	r3, #4
 80156ea:	2b44      	cmp	r3, #68	; 0x44
 80156ec:	d906      	bls.n	80156fc <dhcp_option_long+0x24>
 80156ee:	4b19      	ldr	r3, [pc, #100]	; (8015754 <dhcp_option_long+0x7c>)
 80156f0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80156f4:	4918      	ldr	r1, [pc, #96]	; (8015758 <dhcp_option_long+0x80>)
 80156f6:	4819      	ldr	r0, [pc, #100]	; (801575c <dhcp_option_long+0x84>)
 80156f8:	f003 fad6 	bl	8018ca8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	0e1a      	lsrs	r2, r3, #24
 8015700:	89fb      	ldrh	r3, [r7, #14]
 8015702:	1c59      	adds	r1, r3, #1
 8015704:	81f9      	strh	r1, [r7, #14]
 8015706:	4619      	mov	r1, r3
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	440b      	add	r3, r1
 801570c:	b2d2      	uxtb	r2, r2
 801570e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	0c1a      	lsrs	r2, r3, #16
 8015714:	89fb      	ldrh	r3, [r7, #14]
 8015716:	1c59      	adds	r1, r3, #1
 8015718:	81f9      	strh	r1, [r7, #14]
 801571a:	4619      	mov	r1, r3
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	440b      	add	r3, r1
 8015720:	b2d2      	uxtb	r2, r2
 8015722:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	0a1a      	lsrs	r2, r3, #8
 8015728:	89fb      	ldrh	r3, [r7, #14]
 801572a:	1c59      	adds	r1, r3, #1
 801572c:	81f9      	strh	r1, [r7, #14]
 801572e:	4619      	mov	r1, r3
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	440b      	add	r3, r1
 8015734:	b2d2      	uxtb	r2, r2
 8015736:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015738:	89fb      	ldrh	r3, [r7, #14]
 801573a:	1c5a      	adds	r2, r3, #1
 801573c:	81fa      	strh	r2, [r7, #14]
 801573e:	461a      	mov	r2, r3
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	4413      	add	r3, r2
 8015744:	687a      	ldr	r2, [r7, #4]
 8015746:	b2d2      	uxtb	r2, r2
 8015748:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801574a:	89fb      	ldrh	r3, [r7, #14]
}
 801574c:	4618      	mov	r0, r3
 801574e:	3710      	adds	r7, #16
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	0801c77c 	.word	0x0801c77c
 8015758:	0801c9c8 	.word	0x0801c9c8
 801575c:	0801c7dc 	.word	0x0801c7dc

08015760 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b090      	sub	sp, #64	; 0x40
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
 8015768:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801576a:	2300      	movs	r3, #0
 801576c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801576e:	2300      	movs	r3, #0
 8015770:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015772:	2208      	movs	r2, #8
 8015774:	2100      	movs	r1, #0
 8015776:	48b5      	ldr	r0, [pc, #724]	; (8015a4c <dhcp_parse_reply+0x2ec>)
 8015778:	f003 fafb 	bl	8018d72 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	895b      	ldrh	r3, [r3, #10]
 8015780:	2b2b      	cmp	r3, #43	; 0x2b
 8015782:	d802      	bhi.n	801578a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015784:	f06f 0301 	mvn.w	r3, #1
 8015788:	e2a7      	b.n	8015cda <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015790:	23f0      	movs	r3, #240	; 0xf0
 8015792:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	891b      	ldrh	r3, [r3, #8]
 8015798:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801579e:	e00c      	b.n	80157ba <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80157a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a2:	895b      	ldrh	r3, [r3, #10]
 80157a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80157a6:	1ad3      	subs	r3, r2, r3
 80157a8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80157aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ac:	895b      	ldrh	r3, [r3, #10]
 80157ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80157b0:	1ad3      	subs	r3, r2, r3
 80157b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80157b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80157ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d004      	beq.n	80157ca <dhcp_parse_reply+0x6a>
 80157c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c2:	895b      	ldrh	r3, [r3, #10]
 80157c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d2ea      	bcs.n	80157a0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80157ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d102      	bne.n	80157d6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80157d0:	f06f 0301 	mvn.w	r3, #1
 80157d4:	e281      	b.n	8015cda <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80157d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80157d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80157da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80157dc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80157de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80157e4:	e239      	b.n	8015c5a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80157e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80157e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80157ea:	4413      	add	r3, r2
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80157f0:	2300      	movs	r3, #0
 80157f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80157f6:	f04f 33ff 	mov.w	r3, #4294967295
 80157fa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80157fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80157fe:	3302      	adds	r3, #2
 8015800:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015802:	8bfa      	ldrh	r2, [r7, #30]
 8015804:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015806:	429a      	cmp	r2, r3
 8015808:	d202      	bcs.n	8015810 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801580a:	f06f 0301 	mvn.w	r3, #1
 801580e:	e264      	b.n	8015cda <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015810:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015812:	3301      	adds	r3, #1
 8015814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015816:	8952      	ldrh	r2, [r2, #10]
 8015818:	4293      	cmp	r3, r2
 801581a:	da07      	bge.n	801582c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801581c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801581e:	3301      	adds	r3, #1
 8015820:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015822:	4413      	add	r3, r2
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801582a:	e00b      	b.n	8015844 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	2b00      	cmp	r3, #0
 8015832:	d004      	beq.n	801583e <dhcp_parse_reply+0xde>
 8015834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	e000      	b.n	8015840 <dhcp_parse_reply+0xe0>
 801583e:	2300      	movs	r3, #0
 8015840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015848:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801584c:	7dfb      	ldrb	r3, [r7, #23]
 801584e:	2b3b      	cmp	r3, #59	; 0x3b
 8015850:	f200 812c 	bhi.w	8015aac <dhcp_parse_reply+0x34c>
 8015854:	a201      	add	r2, pc, #4	; (adr r2, 801585c <dhcp_parse_reply+0xfc>)
 8015856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801585a:	bf00      	nop
 801585c:	0801594d 	.word	0x0801594d
 8015860:	0801595d 	.word	0x0801595d
 8015864:	08015aad 	.word	0x08015aad
 8015868:	0801597f 	.word	0x0801597f
 801586c:	08015aad 	.word	0x08015aad
 8015870:	08015aad 	.word	0x08015aad
 8015874:	08015aad 	.word	0x08015aad
 8015878:	08015aad 	.word	0x08015aad
 801587c:	08015aad 	.word	0x08015aad
 8015880:	08015aad 	.word	0x08015aad
 8015884:	08015aad 	.word	0x08015aad
 8015888:	08015aad 	.word	0x08015aad
 801588c:	08015aad 	.word	0x08015aad
 8015890:	08015aad 	.word	0x08015aad
 8015894:	08015aad 	.word	0x08015aad
 8015898:	08015aad 	.word	0x08015aad
 801589c:	08015aad 	.word	0x08015aad
 80158a0:	08015aad 	.word	0x08015aad
 80158a4:	08015aad 	.word	0x08015aad
 80158a8:	08015aad 	.word	0x08015aad
 80158ac:	08015aad 	.word	0x08015aad
 80158b0:	08015aad 	.word	0x08015aad
 80158b4:	08015aad 	.word	0x08015aad
 80158b8:	08015aad 	.word	0x08015aad
 80158bc:	08015aad 	.word	0x08015aad
 80158c0:	08015aad 	.word	0x08015aad
 80158c4:	08015aad 	.word	0x08015aad
 80158c8:	08015aad 	.word	0x08015aad
 80158cc:	08015aad 	.word	0x08015aad
 80158d0:	08015aad 	.word	0x08015aad
 80158d4:	08015aad 	.word	0x08015aad
 80158d8:	08015aad 	.word	0x08015aad
 80158dc:	08015aad 	.word	0x08015aad
 80158e0:	08015aad 	.word	0x08015aad
 80158e4:	08015aad 	.word	0x08015aad
 80158e8:	08015aad 	.word	0x08015aad
 80158ec:	08015aad 	.word	0x08015aad
 80158f0:	08015aad 	.word	0x08015aad
 80158f4:	08015aad 	.word	0x08015aad
 80158f8:	08015aad 	.word	0x08015aad
 80158fc:	08015aad 	.word	0x08015aad
 8015900:	08015aad 	.word	0x08015aad
 8015904:	08015aad 	.word	0x08015aad
 8015908:	08015aad 	.word	0x08015aad
 801590c:	08015aad 	.word	0x08015aad
 8015910:	08015aad 	.word	0x08015aad
 8015914:	08015aad 	.word	0x08015aad
 8015918:	08015aad 	.word	0x08015aad
 801591c:	08015aad 	.word	0x08015aad
 8015920:	08015aad 	.word	0x08015aad
 8015924:	08015aad 	.word	0x08015aad
 8015928:	080159ab 	.word	0x080159ab
 801592c:	080159cd 	.word	0x080159cd
 8015930:	08015a09 	.word	0x08015a09
 8015934:	08015a2b 	.word	0x08015a2b
 8015938:	08015aad 	.word	0x08015aad
 801593c:	08015aad 	.word	0x08015aad
 8015940:	08015aad 	.word	0x08015aad
 8015944:	08015a69 	.word	0x08015a69
 8015948:	08015a8b 	.word	0x08015a8b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801594c:	2300      	movs	r3, #0
 801594e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801595a:	e0ab      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801595c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015960:	2b04      	cmp	r3, #4
 8015962:	d009      	beq.n	8015978 <dhcp_parse_reply+0x218>
 8015964:	4b3a      	ldr	r3, [pc, #232]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 8015966:	f240 622e 	movw	r2, #1582	; 0x62e
 801596a:	493a      	ldr	r1, [pc, #232]	; (8015a54 <dhcp_parse_reply+0x2f4>)
 801596c:	483a      	ldr	r0, [pc, #232]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 801596e:	f003 f99b 	bl	8018ca8 <iprintf>
 8015972:	f06f 0305 	mvn.w	r3, #5
 8015976:	e1b0      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015978:	2306      	movs	r3, #6
 801597a:	623b      	str	r3, [r7, #32]
        break;
 801597c:	e09a      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801597e:	2304      	movs	r3, #4
 8015980:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015984:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801598c:	429a      	cmp	r2, r3
 801598e:	d209      	bcs.n	80159a4 <dhcp_parse_reply+0x244>
 8015990:	4b2f      	ldr	r3, [pc, #188]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 8015992:	f240 6233 	movw	r2, #1587	; 0x633
 8015996:	4931      	ldr	r1, [pc, #196]	; (8015a5c <dhcp_parse_reply+0x2fc>)
 8015998:	482f      	ldr	r0, [pc, #188]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 801599a:	f003 f985 	bl	8018ca8 <iprintf>
 801599e:	f06f 0305 	mvn.w	r3, #5
 80159a2:	e19a      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80159a4:	2307      	movs	r3, #7
 80159a6:	623b      	str	r3, [r7, #32]
        break;
 80159a8:	e084      	b.n	8015ab4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80159aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159ae:	2b04      	cmp	r3, #4
 80159b0:	d009      	beq.n	80159c6 <dhcp_parse_reply+0x266>
 80159b2:	4b27      	ldr	r3, [pc, #156]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 80159b4:	f240 6241 	movw	r2, #1601	; 0x641
 80159b8:	4926      	ldr	r1, [pc, #152]	; (8015a54 <dhcp_parse_reply+0x2f4>)
 80159ba:	4827      	ldr	r0, [pc, #156]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 80159bc:	f003 f974 	bl	8018ca8 <iprintf>
 80159c0:	f06f 0305 	mvn.w	r3, #5
 80159c4:	e189      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80159c6:	2303      	movs	r3, #3
 80159c8:	623b      	str	r3, [r7, #32]
        break;
 80159ca:	e073      	b.n	8015ab4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80159cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	d009      	beq.n	80159e8 <dhcp_parse_reply+0x288>
 80159d4:	4b1e      	ldr	r3, [pc, #120]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 80159d6:	f240 624f 	movw	r2, #1615	; 0x64f
 80159da:	4921      	ldr	r1, [pc, #132]	; (8015a60 <dhcp_parse_reply+0x300>)
 80159dc:	481e      	ldr	r0, [pc, #120]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 80159de:	f003 f963 	bl	8018ca8 <iprintf>
 80159e2:	f06f 0305 	mvn.w	r3, #5
 80159e6:	e178      	b.n	8015cda <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80159e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80159ea:	2bf0      	cmp	r3, #240	; 0xf0
 80159ec:	d009      	beq.n	8015a02 <dhcp_parse_reply+0x2a2>
 80159ee:	4b18      	ldr	r3, [pc, #96]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 80159f0:	f240 6251 	movw	r2, #1617	; 0x651
 80159f4:	491b      	ldr	r1, [pc, #108]	; (8015a64 <dhcp_parse_reply+0x304>)
 80159f6:	4818      	ldr	r0, [pc, #96]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 80159f8:	f003 f956 	bl	8018ca8 <iprintf>
 80159fc:	f06f 0305 	mvn.w	r3, #5
 8015a00:	e16b      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015a02:	2300      	movs	r3, #0
 8015a04:	623b      	str	r3, [r7, #32]
        break;
 8015a06:	e055      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a0c:	2b01      	cmp	r3, #1
 8015a0e:	d009      	beq.n	8015a24 <dhcp_parse_reply+0x2c4>
 8015a10:	4b0f      	ldr	r3, [pc, #60]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 8015a12:	f240 6255 	movw	r2, #1621	; 0x655
 8015a16:	4912      	ldr	r1, [pc, #72]	; (8015a60 <dhcp_parse_reply+0x300>)
 8015a18:	480f      	ldr	r0, [pc, #60]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 8015a1a:	f003 f945 	bl	8018ca8 <iprintf>
 8015a1e:	f06f 0305 	mvn.w	r3, #5
 8015a22:	e15a      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015a24:	2301      	movs	r3, #1
 8015a26:	623b      	str	r3, [r7, #32]
        break;
 8015a28:	e044      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a2e:	2b04      	cmp	r3, #4
 8015a30:	d009      	beq.n	8015a46 <dhcp_parse_reply+0x2e6>
 8015a32:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <dhcp_parse_reply+0x2f0>)
 8015a34:	f240 6259 	movw	r2, #1625	; 0x659
 8015a38:	4906      	ldr	r1, [pc, #24]	; (8015a54 <dhcp_parse_reply+0x2f4>)
 8015a3a:	4807      	ldr	r0, [pc, #28]	; (8015a58 <dhcp_parse_reply+0x2f8>)
 8015a3c:	f003 f934 	bl	8018ca8 <iprintf>
 8015a40:	f06f 0305 	mvn.w	r3, #5
 8015a44:	e149      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015a46:	2302      	movs	r3, #2
 8015a48:	623b      	str	r3, [r7, #32]
        break;
 8015a4a:	e033      	b.n	8015ab4 <dhcp_parse_reply+0x354>
 8015a4c:	2000ccac 	.word	0x2000ccac
 8015a50:	0801c77c 	.word	0x0801c77c
 8015a54:	0801ca04 	.word	0x0801ca04
 8015a58:	0801c7dc 	.word	0x0801c7dc
 8015a5c:	0801ca10 	.word	0x0801ca10
 8015a60:	0801ca24 	.word	0x0801ca24
 8015a64:	0801ca30 	.word	0x0801ca30
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a6c:	2b04      	cmp	r3, #4
 8015a6e:	d009      	beq.n	8015a84 <dhcp_parse_reply+0x324>
 8015a70:	4b9c      	ldr	r3, [pc, #624]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015a72:	f240 625d 	movw	r2, #1629	; 0x65d
 8015a76:	499c      	ldr	r1, [pc, #624]	; (8015ce8 <dhcp_parse_reply+0x588>)
 8015a78:	489c      	ldr	r0, [pc, #624]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015a7a:	f003 f915 	bl	8018ca8 <iprintf>
 8015a7e:	f06f 0305 	mvn.w	r3, #5
 8015a82:	e12a      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015a84:	2304      	movs	r3, #4
 8015a86:	623b      	str	r3, [r7, #32]
        break;
 8015a88:	e014      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a8e:	2b04      	cmp	r3, #4
 8015a90:	d009      	beq.n	8015aa6 <dhcp_parse_reply+0x346>
 8015a92:	4b94      	ldr	r3, [pc, #592]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015a94:	f240 6261 	movw	r2, #1633	; 0x661
 8015a98:	4993      	ldr	r1, [pc, #588]	; (8015ce8 <dhcp_parse_reply+0x588>)
 8015a9a:	4894      	ldr	r0, [pc, #592]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015a9c:	f003 f904 	bl	8018ca8 <iprintf>
 8015aa0:	f06f 0305 	mvn.w	r3, #5
 8015aa4:	e119      	b.n	8015cda <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015aa6:	2305      	movs	r3, #5
 8015aa8:	623b      	str	r3, [r7, #32]
        break;
 8015aaa:	e003      	b.n	8015ab4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015aac:	2300      	movs	r3, #0
 8015aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015ab2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015ab4:	7dfb      	ldrb	r3, [r7, #23]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d103      	bne.n	8015ac2 <dhcp_parse_reply+0x362>
      offset++;
 8015aba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015abc:	3301      	adds	r3, #1
 8015abe:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015ac0:	e0a1      	b.n	8015c06 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015ac2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ac8:	4413      	add	r3, r2
 8015aca:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015ace:	4293      	cmp	r3, r2
 8015ad0:	dd02      	ble.n	8015ad8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015ad2:	f06f 0301 	mvn.w	r3, #1
 8015ad6:	e100      	b.n	8015cda <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015adc:	b29a      	uxth	r2, r3
 8015ade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ae0:	4413      	add	r3, r2
 8015ae2:	b29b      	uxth	r3, r3
 8015ae4:	3302      	adds	r3, #2
 8015ae6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f000 808a 	beq.w	8015c06 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015af6:	6a3b      	ldr	r3, [r7, #32]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	db02      	blt.n	8015b02 <dhcp_parse_reply+0x3a2>
 8015afc:	6a3b      	ldr	r3, [r7, #32]
 8015afe:	2b07      	cmp	r3, #7
 8015b00:	dd06      	ble.n	8015b10 <dhcp_parse_reply+0x3b0>
 8015b02:	4b78      	ldr	r3, [pc, #480]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015b04:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015b08:	4979      	ldr	r1, [pc, #484]	; (8015cf0 <dhcp_parse_reply+0x590>)
 8015b0a:	4878      	ldr	r0, [pc, #480]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015b0c:	f003 f8cc 	bl	8018ca8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015b10:	4a78      	ldr	r2, [pc, #480]	; (8015cf4 <dhcp_parse_reply+0x594>)
 8015b12:	6a3b      	ldr	r3, [r7, #32]
 8015b14:	4413      	add	r3, r2
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d174      	bne.n	8015c06 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b20:	2b04      	cmp	r3, #4
 8015b22:	bf28      	it	cs
 8015b24:	2304      	movcs	r3, #4
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015b2a:	8bfb      	ldrh	r3, [r7, #30]
 8015b2c:	8aba      	ldrh	r2, [r7, #20]
 8015b2e:	f107 0108 	add.w	r1, r7, #8
 8015b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b34:	f7f7 fc74 	bl	800d420 <pbuf_copy_partial>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	8abb      	ldrh	r3, [r7, #20]
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	d002      	beq.n	8015b48 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015b42:	f06f 0301 	mvn.w	r3, #1
 8015b46:	e0c8      	b.n	8015cda <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015b48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b4c:	2b04      	cmp	r3, #4
 8015b4e:	d933      	bls.n	8015bb8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b54:	f003 0303 	and.w	r3, r3, #3
 8015b58:	b2db      	uxtb	r3, r3
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d009      	beq.n	8015b72 <dhcp_parse_reply+0x412>
 8015b5e:	4b61      	ldr	r3, [pc, #388]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015b60:	f240 6281 	movw	r2, #1665	; 0x681
 8015b64:	4964      	ldr	r1, [pc, #400]	; (8015cf8 <dhcp_parse_reply+0x598>)
 8015b66:	4861      	ldr	r0, [pc, #388]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015b68:	f003 f89e 	bl	8018ca8 <iprintf>
 8015b6c:	f06f 0305 	mvn.w	r3, #5
 8015b70:	e0b3      	b.n	8015cda <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015b72:	4a60      	ldr	r2, [pc, #384]	; (8015cf4 <dhcp_parse_reply+0x594>)
 8015b74:	6a3b      	ldr	r3, [r7, #32]
 8015b76:	4413      	add	r3, r2
 8015b78:	2201      	movs	r2, #1
 8015b7a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7f5 fe5f 	bl	800b842 <lwip_htonl>
 8015b84:	4602      	mov	r2, r0
 8015b86:	495d      	ldr	r1, [pc, #372]	; (8015cfc <dhcp_parse_reply+0x59c>)
 8015b88:	6a3b      	ldr	r3, [r7, #32]
 8015b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015b8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015b92:	3b04      	subs	r3, #4
 8015b94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015b98:	8bfb      	ldrh	r3, [r7, #30]
 8015b9a:	3304      	adds	r3, #4
 8015b9c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015b9e:	8a7a      	ldrh	r2, [r7, #18]
 8015ba0:	8bfb      	ldrh	r3, [r7, #30]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d202      	bcs.n	8015bac <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015ba6:	f06f 0301 	mvn.w	r3, #1
 8015baa:	e096      	b.n	8015cda <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015bac:	8a7b      	ldrh	r3, [r7, #18]
 8015bae:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015bb0:	6a3b      	ldr	r3, [r7, #32]
 8015bb2:	3301      	adds	r3, #1
 8015bb4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015bb6:	e79e      	b.n	8015af6 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bbc:	2b04      	cmp	r3, #4
 8015bbe:	d106      	bne.n	8015bce <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7f5 fe3d 	bl	800b842 <lwip_htonl>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	60bb      	str	r3, [r7, #8]
 8015bcc:	e011      	b.n	8015bf2 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	d009      	beq.n	8015bea <dhcp_parse_reply+0x48a>
 8015bd6:	4b43      	ldr	r3, [pc, #268]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015bd8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015bdc:	4948      	ldr	r1, [pc, #288]	; (8015d00 <dhcp_parse_reply+0x5a0>)
 8015bde:	4843      	ldr	r0, [pc, #268]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015be0:	f003 f862 	bl	8018ca8 <iprintf>
 8015be4:	f06f 0305 	mvn.w	r3, #5
 8015be8:	e077      	b.n	8015cda <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015bea:	f107 0308 	add.w	r3, r7, #8
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015bf2:	4a40      	ldr	r2, [pc, #256]	; (8015cf4 <dhcp_parse_reply+0x594>)
 8015bf4:	6a3b      	ldr	r3, [r7, #32]
 8015bf6:	4413      	add	r3, r2
 8015bf8:	2201      	movs	r2, #1
 8015bfa:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015bfc:	68ba      	ldr	r2, [r7, #8]
 8015bfe:	493f      	ldr	r1, [pc, #252]	; (8015cfc <dhcp_parse_reply+0x59c>)
 8015c00:	6a3b      	ldr	r3, [r7, #32]
 8015c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c08:	895b      	ldrh	r3, [r3, #10]
 8015c0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d324      	bcc.n	8015c5a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c12:	895b      	ldrh	r3, [r3, #10]
 8015c14:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c1c:	895b      	ldrh	r3, [r3, #10]
 8015c1e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015c24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015c26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d213      	bcs.n	8015c54 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d109      	bne.n	8015c4c <dhcp_parse_reply+0x4ec>
 8015c38:	4b2a      	ldr	r3, [pc, #168]	; (8015ce4 <dhcp_parse_reply+0x584>)
 8015c3a:	f240 629d 	movw	r2, #1693	; 0x69d
 8015c3e:	4931      	ldr	r1, [pc, #196]	; (8015d04 <dhcp_parse_reply+0x5a4>)
 8015c40:	482a      	ldr	r0, [pc, #168]	; (8015cec <dhcp_parse_reply+0x58c>)
 8015c42:	f003 f831 	bl	8018ca8 <iprintf>
 8015c46:	f06f 0305 	mvn.w	r3, #5
 8015c4a:	e046      	b.n	8015cda <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015c52:	e002      	b.n	8015c5a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015c54:	f06f 0301 	mvn.w	r3, #1
 8015c58:	e03f      	b.n	8015cda <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d00a      	beq.n	8015c76 <dhcp_parse_reply+0x516>
 8015c60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015c62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d206      	bcs.n	8015c76 <dhcp_parse_reply+0x516>
 8015c68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015c6c:	4413      	add	r3, r2
 8015c6e:	781b      	ldrb	r3, [r3, #0]
 8015c70:	2bff      	cmp	r3, #255	; 0xff
 8015c72:	f47f adb8 	bne.w	80157e6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015c76:	4b1f      	ldr	r3, [pc, #124]	; (8015cf4 <dhcp_parse_reply+0x594>)
 8015c78:	781b      	ldrb	r3, [r3, #0]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d018      	beq.n	8015cb0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c7e:	4b1f      	ldr	r3, [pc, #124]	; (8015cfc <dhcp_parse_reply+0x59c>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015c84:	4b1b      	ldr	r3, [pc, #108]	; (8015cf4 <dhcp_parse_reply+0x594>)
 8015c86:	2200      	movs	r2, #0
 8015c88:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	d102      	bne.n	8015c96 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015c90:	2301      	movs	r3, #1
 8015c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015c94:	e00c      	b.n	8015cb0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2b02      	cmp	r3, #2
 8015c9a:	d102      	bne.n	8015ca2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015c9c:	2301      	movs	r3, #1
 8015c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ca0:	e006      	b.n	8015cb0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	2b03      	cmp	r3, #3
 8015ca6:	d103      	bne.n	8015cb0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015ca8:	2301      	movs	r3, #1
 8015caa:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015cac:	2301      	movs	r3, #1
 8015cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d006      	beq.n	8015cc4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015cba:	236c      	movs	r3, #108	; 0x6c
 8015cbc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015cbe:	23ec      	movs	r3, #236	; 0xec
 8015cc0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015cc2:	e56a      	b.n	801579a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d006      	beq.n	8015cd8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015cce:	232c      	movs	r3, #44	; 0x2c
 8015cd0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015cd2:	236c      	movs	r3, #108	; 0x6c
 8015cd4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015cd6:	e560      	b.n	801579a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015cd8:	2300      	movs	r3, #0
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3740      	adds	r7, #64	; 0x40
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	0801c77c 	.word	0x0801c77c
 8015ce8:	0801ca04 	.word	0x0801ca04
 8015cec:	0801c7dc 	.word	0x0801c7dc
 8015cf0:	0801ca48 	.word	0x0801ca48
 8015cf4:	2000ccac 	.word	0x2000ccac
 8015cf8:	0801ca5c 	.word	0x0801ca5c
 8015cfc:	2000cc8c 	.word	0x2000cc8c
 8015d00:	0801ca74 	.word	0x0801ca74
 8015d04:	0801ca88 	.word	0x0801ca88

08015d08 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b08a      	sub	sp, #40	; 0x28
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	60f8      	str	r0, [r7, #12]
 8015d10:	60b9      	str	r1, [r7, #8]
 8015d12:	607a      	str	r2, [r7, #4]
 8015d14:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015d16:	4b60      	ldr	r3, [pc, #384]	; (8015e98 <dhcp_recv+0x190>)
 8015d18:	685b      	ldr	r3, [r3, #4]
 8015d1a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d1c:	6a3b      	ldr	r3, [r7, #32]
 8015d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d20:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	f000 809d 	beq.w	8015e6a <dhcp_recv+0x162>
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	791b      	ldrb	r3, [r3, #4]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	f000 8098 	beq.w	8015e6a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	895b      	ldrh	r3, [r3, #10]
 8015d3e:	2b2b      	cmp	r3, #43	; 0x2b
 8015d40:	f240 8095 	bls.w	8015e6e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015d44:	69bb      	ldr	r3, [r7, #24]
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	2b02      	cmp	r3, #2
 8015d4a:	f040 8092 	bne.w	8015e72 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d4e:	2300      	movs	r3, #0
 8015d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d54:	e012      	b.n	8015d7c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d5a:	6a3a      	ldr	r2, [r7, #32]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8015d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d66:	69b9      	ldr	r1, [r7, #24]
 8015d68:	440b      	add	r3, r1
 8015d6a:	7f1b      	ldrb	r3, [r3, #28]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	f040 8082 	bne.w	8015e76 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d76:	3301      	adds	r3, #1
 8015d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d7c:	6a3b      	ldr	r3, [r7, #32]
 8015d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d82:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d203      	bcs.n	8015d92 <dhcp_recv+0x8a>
 8015d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d8e:	2b05      	cmp	r3, #5
 8015d90:	d9e1      	bls.n	8015d56 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7f5 fd53 	bl	800b842 <lwip_htonl>
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	69fb      	ldr	r3, [r7, #28]
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d169      	bne.n	8015e7a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015da6:	69f9      	ldr	r1, [r7, #28]
 8015da8:	6878      	ldr	r0, [r7, #4]
 8015daa:	f7ff fcd9 	bl	8015760 <dhcp_parse_reply>
 8015dae:	4603      	mov	r3, r0
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d164      	bne.n	8015e7e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015db4:	4b39      	ldr	r3, [pc, #228]	; (8015e9c <dhcp_recv+0x194>)
 8015db6:	785b      	ldrb	r3, [r3, #1]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d062      	beq.n	8015e82 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015dc2:	4b37      	ldr	r3, [pc, #220]	; (8015ea0 <dhcp_recv+0x198>)
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015dc8:	7cfb      	ldrb	r3, [r7, #19]
 8015dca:	2b05      	cmp	r3, #5
 8015dcc:	d12a      	bne.n	8015e24 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	795b      	ldrb	r3, [r3, #5]
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	d112      	bne.n	8015dfc <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015dd6:	6979      	ldr	r1, [r7, #20]
 8015dd8:	6a38      	ldr	r0, [r7, #32]
 8015dda:	f7fe fe17 	bl	8014a0c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015dde:	6a3b      	ldr	r3, [r7, #32]
 8015de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015de4:	f003 0308 	and.w	r3, r3, #8
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d003      	beq.n	8015df4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015dec:	6a38      	ldr	r0, [r7, #32]
 8015dee:	f7fe fb85 	bl	80144fc <dhcp_check>
 8015df2:	e049      	b.n	8015e88 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8015df4:	6a38      	ldr	r0, [r7, #32]
 8015df6:	f7ff f867 	bl	8014ec8 <dhcp_bind>
 8015dfa:	e045      	b.n	8015e88 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015dfc:	69fb      	ldr	r3, [r7, #28]
 8015dfe:	795b      	ldrb	r3, [r3, #5]
 8015e00:	2b03      	cmp	r3, #3
 8015e02:	d007      	beq.n	8015e14 <dhcp_recv+0x10c>
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	795b      	ldrb	r3, [r3, #5]
 8015e08:	2b04      	cmp	r3, #4
 8015e0a:	d003      	beq.n	8015e14 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015e10:	2b05      	cmp	r3, #5
 8015e12:	d139      	bne.n	8015e88 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8015e14:	6979      	ldr	r1, [r7, #20]
 8015e16:	6a38      	ldr	r0, [r7, #32]
 8015e18:	f7fe fdf8 	bl	8014a0c <dhcp_handle_ack>
      dhcp_bind(netif);
 8015e1c:	6a38      	ldr	r0, [r7, #32]
 8015e1e:	f7ff f853 	bl	8014ec8 <dhcp_bind>
 8015e22:	e031      	b.n	8015e88 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8015e24:	7cfb      	ldrb	r3, [r7, #19]
 8015e26:	2b06      	cmp	r3, #6
 8015e28:	d113      	bne.n	8015e52 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015e2e:	2b03      	cmp	r3, #3
 8015e30:	d00b      	beq.n	8015e4a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e32:	69fb      	ldr	r3, [r7, #28]
 8015e34:	795b      	ldrb	r3, [r3, #5]
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d007      	beq.n	8015e4a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015e3e:	2b04      	cmp	r3, #4
 8015e40:	d003      	beq.n	8015e4a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015e42:	69fb      	ldr	r3, [r7, #28]
 8015e44:	795b      	ldrb	r3, [r3, #5]
 8015e46:	2b05      	cmp	r3, #5
 8015e48:	d103      	bne.n	8015e52 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015e4a:	6a38      	ldr	r0, [r7, #32]
 8015e4c:	f7fe fb3c 	bl	80144c8 <dhcp_handle_nak>
 8015e50:	e01a      	b.n	8015e88 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8015e52:	7cfb      	ldrb	r3, [r7, #19]
 8015e54:	2b02      	cmp	r3, #2
 8015e56:	d116      	bne.n	8015e86 <dhcp_recv+0x17e>
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	795b      	ldrb	r3, [r3, #5]
 8015e5c:	2b06      	cmp	r3, #6
 8015e5e:	d112      	bne.n	8015e86 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015e60:	6979      	ldr	r1, [r7, #20]
 8015e62:	6a38      	ldr	r0, [r7, #32]
 8015e64:	f7fe fb7e 	bl	8014564 <dhcp_handle_offer>
 8015e68:	e00e      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e6a:	bf00      	nop
 8015e6c:	e00c      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e6e:	bf00      	nop
 8015e70:	e00a      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e72:	bf00      	nop
 8015e74:	e008      	b.n	8015e88 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015e76:	bf00      	nop
 8015e78:	e006      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e7a:	bf00      	nop
 8015e7c:	e004      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e7e:	bf00      	nop
 8015e80:	e002      	b.n	8015e88 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015e82:	bf00      	nop
 8015e84:	e000      	b.n	8015e88 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015e86:	bf00      	nop
  pbuf_free(p);
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7f7 f8c3 	bl	800d014 <pbuf_free>
}
 8015e8e:	bf00      	nop
 8015e90:	3728      	adds	r7, #40	; 0x28
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	200094b8 	.word	0x200094b8
 8015e9c:	2000ccac 	.word	0x2000ccac
 8015ea0:	2000cc8c 	.word	0x2000cc8c

08015ea4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b088      	sub	sp, #32
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	603b      	str	r3, [r7, #0]
 8015eb0:	4613      	mov	r3, r2
 8015eb2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d108      	bne.n	8015ecc <dhcp_create_msg+0x28>
 8015eba:	4b5f      	ldr	r3, [pc, #380]	; (8016038 <dhcp_create_msg+0x194>)
 8015ebc:	f240 7269 	movw	r2, #1897	; 0x769
 8015ec0:	495e      	ldr	r1, [pc, #376]	; (801603c <dhcp_create_msg+0x198>)
 8015ec2:	485f      	ldr	r0, [pc, #380]	; (8016040 <dhcp_create_msg+0x19c>)
 8015ec4:	f002 fef0 	bl	8018ca8 <iprintf>
 8015ec8:	2300      	movs	r3, #0
 8015eca:	e0b1      	b.n	8016030 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d108      	bne.n	8015ee4 <dhcp_create_msg+0x40>
 8015ed2:	4b59      	ldr	r3, [pc, #356]	; (8016038 <dhcp_create_msg+0x194>)
 8015ed4:	f240 726a 	movw	r2, #1898	; 0x76a
 8015ed8:	495a      	ldr	r1, [pc, #360]	; (8016044 <dhcp_create_msg+0x1a0>)
 8015eda:	4859      	ldr	r0, [pc, #356]	; (8016040 <dhcp_create_msg+0x19c>)
 8015edc:	f002 fee4 	bl	8018ca8 <iprintf>
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	e0a5      	b.n	8016030 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015ee4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ee8:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015eec:	2036      	movs	r0, #54	; 0x36
 8015eee:	f7f6 fdad 	bl	800ca4c <pbuf_alloc>
 8015ef2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d101      	bne.n	8015efe <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8015efa:	2300      	movs	r3, #0
 8015efc:	e098      	b.n	8016030 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	895b      	ldrh	r3, [r3, #10]
 8015f02:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8015f06:	d206      	bcs.n	8015f16 <dhcp_create_msg+0x72>
 8015f08:	4b4b      	ldr	r3, [pc, #300]	; (8016038 <dhcp_create_msg+0x194>)
 8015f0a:	f240 7271 	movw	r2, #1905	; 0x771
 8015f0e:	494e      	ldr	r1, [pc, #312]	; (8016048 <dhcp_create_msg+0x1a4>)
 8015f10:	484b      	ldr	r0, [pc, #300]	; (8016040 <dhcp_create_msg+0x19c>)
 8015f12:	f002 fec9 	bl	8018ca8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8015f16:	79fb      	ldrb	r3, [r7, #7]
 8015f18:	2b03      	cmp	r3, #3
 8015f1a:	d103      	bne.n	8015f24 <dhcp_create_msg+0x80>
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	795b      	ldrb	r3, [r3, #5]
 8015f20:	2b03      	cmp	r3, #3
 8015f22:	d10d      	bne.n	8015f40 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	799b      	ldrb	r3, [r3, #6]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d105      	bne.n	8015f38 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015f2c:	f002 fd00 	bl	8018930 <rand>
 8015f30:	4603      	mov	r3, r0
 8015f32:	461a      	mov	r2, r3
 8015f34:	4b45      	ldr	r3, [pc, #276]	; (801604c <dhcp_create_msg+0x1a8>)
 8015f36:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015f38:	4b44      	ldr	r3, [pc, #272]	; (801604c <dhcp_create_msg+0x1a8>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015f40:	69bb      	ldr	r3, [r7, #24]
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015f46:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015f4a:	2100      	movs	r1, #0
 8015f4c:	6978      	ldr	r0, [r7, #20]
 8015f4e:	f002 ff10 	bl	8018d72 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	2201      	movs	r2, #1
 8015f56:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	2201      	movs	r2, #1
 8015f5c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015f68:	68bb      	ldr	r3, [r7, #8]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f7f5 fc68 	bl	800b842 <lwip_htonl>
 8015f72:	4602      	mov	r2, r0
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015f78:	79fb      	ldrb	r3, [r7, #7]
 8015f7a:	2b08      	cmp	r3, #8
 8015f7c:	d010      	beq.n	8015fa0 <dhcp_create_msg+0xfc>
 8015f7e:	79fb      	ldrb	r3, [r7, #7]
 8015f80:	2b04      	cmp	r3, #4
 8015f82:	d00d      	beq.n	8015fa0 <dhcp_create_msg+0xfc>
 8015f84:	79fb      	ldrb	r3, [r7, #7]
 8015f86:	2b07      	cmp	r3, #7
 8015f88:	d00a      	beq.n	8015fa0 <dhcp_create_msg+0xfc>
 8015f8a:	79fb      	ldrb	r3, [r7, #7]
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d10c      	bne.n	8015faa <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015f94:	2b05      	cmp	r3, #5
 8015f96:	d003      	beq.n	8015fa0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015f98:	68bb      	ldr	r3, [r7, #8]
 8015f9a:	795b      	ldrb	r3, [r3, #5]
 8015f9c:	2b04      	cmp	r3, #4
 8015f9e:	d104      	bne.n	8015faa <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	3304      	adds	r3, #4
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	697b      	ldr	r3, [r7, #20]
 8015fa8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015faa:	2300      	movs	r3, #0
 8015fac:	83fb      	strh	r3, [r7, #30]
 8015fae:	e00c      	b.n	8015fca <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015fb0:	8bfa      	ldrh	r2, [r7, #30]
 8015fb2:	8bfb      	ldrh	r3, [r7, #30]
 8015fb4:	68f9      	ldr	r1, [r7, #12]
 8015fb6:	440a      	add	r2, r1
 8015fb8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015fbc:	697a      	ldr	r2, [r7, #20]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	460a      	mov	r2, r1
 8015fc2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015fc4:	8bfb      	ldrh	r3, [r7, #30]
 8015fc6:	3301      	adds	r3, #1
 8015fc8:	83fb      	strh	r3, [r7, #30]
 8015fca:	8bfb      	ldrh	r3, [r7, #30]
 8015fcc:	2b05      	cmp	r3, #5
 8015fce:	d9ef      	bls.n	8015fb0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015fd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015fe2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015fec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015ff6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016000:	2301      	movs	r3, #1
 8016002:	2235      	movs	r2, #53	; 0x35
 8016004:	2000      	movs	r0, #0
 8016006:	f7ff fadb 	bl	80155c0 <dhcp_option>
 801600a:	4603      	mov	r3, r0
 801600c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016014:	79fa      	ldrb	r2, [r7, #7]
 8016016:	8a7b      	ldrh	r3, [r7, #18]
 8016018:	4618      	mov	r0, r3
 801601a:	f7ff fb05 	bl	8015628 <dhcp_option_byte>
 801601e:	4603      	mov	r3, r0
 8016020:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d002      	beq.n	801602e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	8a7a      	ldrh	r2, [r7, #18]
 801602c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801602e:	69bb      	ldr	r3, [r7, #24]
}
 8016030:	4618      	mov	r0, r3
 8016032:	3720      	adds	r7, #32
 8016034:	46bd      	mov	sp, r7
 8016036:	bd80      	pop	{r7, pc}
 8016038:	0801c77c 	.word	0x0801c77c
 801603c:	0801ca9c 	.word	0x0801ca9c
 8016040:	0801c7dc 	.word	0x0801c7dc
 8016044:	0801cabc 	.word	0x0801cabc
 8016048:	0801cadc 	.word	0x0801cadc
 801604c:	2000ccbc 	.word	0x2000ccbc

08016050 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b084      	sub	sp, #16
 8016054:	af00      	add	r7, sp, #0
 8016056:	4603      	mov	r3, r0
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801605e:	89fb      	ldrh	r3, [r7, #14]
 8016060:	1c5a      	adds	r2, r3, #1
 8016062:	81fa      	strh	r2, [r7, #14]
 8016064:	461a      	mov	r2, r3
 8016066:	68bb      	ldr	r3, [r7, #8]
 8016068:	4413      	add	r3, r2
 801606a:	22ff      	movs	r2, #255	; 0xff
 801606c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801606e:	e007      	b.n	8016080 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016070:	89fb      	ldrh	r3, [r7, #14]
 8016072:	1c5a      	adds	r2, r3, #1
 8016074:	81fa      	strh	r2, [r7, #14]
 8016076:	461a      	mov	r2, r3
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	4413      	add	r3, r2
 801607c:	2200      	movs	r2, #0
 801607e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016080:	89fb      	ldrh	r3, [r7, #14]
 8016082:	2b43      	cmp	r3, #67	; 0x43
 8016084:	d904      	bls.n	8016090 <dhcp_option_trailer+0x40>
 8016086:	89fb      	ldrh	r3, [r7, #14]
 8016088:	f003 0303 	and.w	r3, r3, #3
 801608c:	2b00      	cmp	r3, #0
 801608e:	d002      	beq.n	8016096 <dhcp_option_trailer+0x46>
 8016090:	89fb      	ldrh	r3, [r7, #14]
 8016092:	2b43      	cmp	r3, #67	; 0x43
 8016094:	d9ec      	bls.n	8016070 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016096:	89fb      	ldrh	r3, [r7, #14]
 8016098:	33f0      	adds	r3, #240	; 0xf0
 801609a:	b29b      	uxth	r3, r3
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f7f6 fe32 	bl	800cd08 <pbuf_realloc>
}
 80160a4:	bf00      	nop
 80160a6:	3710      	adds	r7, #16
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80160ac:	b480      	push	{r7}
 80160ae:	b085      	sub	sp, #20
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d017      	beq.n	80160ea <dhcp_supplied_address+0x3e>
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d013      	beq.n	80160ea <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	795b      	ldrb	r3, [r3, #5]
 80160cc:	2b0a      	cmp	r3, #10
 80160ce:	d007      	beq.n	80160e0 <dhcp_supplied_address+0x34>
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	795b      	ldrb	r3, [r3, #5]
 80160d4:	2b05      	cmp	r3, #5
 80160d6:	d003      	beq.n	80160e0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80160dc:	2b04      	cmp	r3, #4
 80160de:	d101      	bne.n	80160e4 <dhcp_supplied_address+0x38>
 80160e0:	2301      	movs	r3, #1
 80160e2:	e000      	b.n	80160e6 <dhcp_supplied_address+0x3a>
 80160e4:	2300      	movs	r3, #0
 80160e6:	b2db      	uxtb	r3, r3
 80160e8:	e000      	b.n	80160ec <dhcp_supplied_address+0x40>
  }
  return 0;
 80160ea:	2300      	movs	r3, #0
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	3714      	adds	r7, #20
 80160f0:	46bd      	mov	sp, r7
 80160f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f6:	4770      	bx	lr

080160f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016100:	4915      	ldr	r1, [pc, #84]	; (8016158 <etharp_free_entry+0x60>)
 8016102:	687a      	ldr	r2, [r7, #4]
 8016104:	4613      	mov	r3, r2
 8016106:	005b      	lsls	r3, r3, #1
 8016108:	4413      	add	r3, r2
 801610a:	00db      	lsls	r3, r3, #3
 801610c:	440b      	add	r3, r1
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d013      	beq.n	801613c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016114:	4910      	ldr	r1, [pc, #64]	; (8016158 <etharp_free_entry+0x60>)
 8016116:	687a      	ldr	r2, [r7, #4]
 8016118:	4613      	mov	r3, r2
 801611a:	005b      	lsls	r3, r3, #1
 801611c:	4413      	add	r3, r2
 801611e:	00db      	lsls	r3, r3, #3
 8016120:	440b      	add	r3, r1
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4618      	mov	r0, r3
 8016126:	f7f6 ff75 	bl	800d014 <pbuf_free>
    arp_table[i].q = NULL;
 801612a:	490b      	ldr	r1, [pc, #44]	; (8016158 <etharp_free_entry+0x60>)
 801612c:	687a      	ldr	r2, [r7, #4]
 801612e:	4613      	mov	r3, r2
 8016130:	005b      	lsls	r3, r3, #1
 8016132:	4413      	add	r3, r2
 8016134:	00db      	lsls	r3, r3, #3
 8016136:	440b      	add	r3, r1
 8016138:	2200      	movs	r2, #0
 801613a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801613c:	4906      	ldr	r1, [pc, #24]	; (8016158 <etharp_free_entry+0x60>)
 801613e:	687a      	ldr	r2, [r7, #4]
 8016140:	4613      	mov	r3, r2
 8016142:	005b      	lsls	r3, r3, #1
 8016144:	4413      	add	r3, r2
 8016146:	00db      	lsls	r3, r3, #3
 8016148:	440b      	add	r3, r1
 801614a:	3314      	adds	r3, #20
 801614c:	2200      	movs	r2, #0
 801614e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016150:	bf00      	nop
 8016152:	3708      	adds	r7, #8
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	2000ccc0 	.word	0x2000ccc0

0801615c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016162:	2300      	movs	r3, #0
 8016164:	607b      	str	r3, [r7, #4]
 8016166:	e096      	b.n	8016296 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016168:	494f      	ldr	r1, [pc, #316]	; (80162a8 <etharp_tmr+0x14c>)
 801616a:	687a      	ldr	r2, [r7, #4]
 801616c:	4613      	mov	r3, r2
 801616e:	005b      	lsls	r3, r3, #1
 8016170:	4413      	add	r3, r2
 8016172:	00db      	lsls	r3, r3, #3
 8016174:	440b      	add	r3, r1
 8016176:	3314      	adds	r3, #20
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801617c:	78fb      	ldrb	r3, [r7, #3]
 801617e:	2b00      	cmp	r3, #0
 8016180:	f000 8086 	beq.w	8016290 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016184:	4948      	ldr	r1, [pc, #288]	; (80162a8 <etharp_tmr+0x14c>)
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	4613      	mov	r3, r2
 801618a:	005b      	lsls	r3, r3, #1
 801618c:	4413      	add	r3, r2
 801618e:	00db      	lsls	r3, r3, #3
 8016190:	440b      	add	r3, r1
 8016192:	3312      	adds	r3, #18
 8016194:	881b      	ldrh	r3, [r3, #0]
 8016196:	3301      	adds	r3, #1
 8016198:	b298      	uxth	r0, r3
 801619a:	4943      	ldr	r1, [pc, #268]	; (80162a8 <etharp_tmr+0x14c>)
 801619c:	687a      	ldr	r2, [r7, #4]
 801619e:	4613      	mov	r3, r2
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	4413      	add	r3, r2
 80161a4:	00db      	lsls	r3, r3, #3
 80161a6:	440b      	add	r3, r1
 80161a8:	3312      	adds	r3, #18
 80161aa:	4602      	mov	r2, r0
 80161ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161ae:	493e      	ldr	r1, [pc, #248]	; (80162a8 <etharp_tmr+0x14c>)
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	4613      	mov	r3, r2
 80161b4:	005b      	lsls	r3, r3, #1
 80161b6:	4413      	add	r3, r2
 80161b8:	00db      	lsls	r3, r3, #3
 80161ba:	440b      	add	r3, r1
 80161bc:	3312      	adds	r3, #18
 80161be:	881b      	ldrh	r3, [r3, #0]
 80161c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80161c4:	d215      	bcs.n	80161f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161c6:	4938      	ldr	r1, [pc, #224]	; (80162a8 <etharp_tmr+0x14c>)
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	4613      	mov	r3, r2
 80161cc:	005b      	lsls	r3, r3, #1
 80161ce:	4413      	add	r3, r2
 80161d0:	00db      	lsls	r3, r3, #3
 80161d2:	440b      	add	r3, r1
 80161d4:	3314      	adds	r3, #20
 80161d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d10e      	bne.n	80161fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80161dc:	4932      	ldr	r1, [pc, #200]	; (80162a8 <etharp_tmr+0x14c>)
 80161de:	687a      	ldr	r2, [r7, #4]
 80161e0:	4613      	mov	r3, r2
 80161e2:	005b      	lsls	r3, r3, #1
 80161e4:	4413      	add	r3, r2
 80161e6:	00db      	lsls	r3, r3, #3
 80161e8:	440b      	add	r3, r1
 80161ea:	3312      	adds	r3, #18
 80161ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161ee:	2b04      	cmp	r3, #4
 80161f0:	d903      	bls.n	80161fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80161f2:	6878      	ldr	r0, [r7, #4]
 80161f4:	f7ff ff80 	bl	80160f8 <etharp_free_entry>
 80161f8:	e04a      	b.n	8016290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80161fa:	492b      	ldr	r1, [pc, #172]	; (80162a8 <etharp_tmr+0x14c>)
 80161fc:	687a      	ldr	r2, [r7, #4]
 80161fe:	4613      	mov	r3, r2
 8016200:	005b      	lsls	r3, r3, #1
 8016202:	4413      	add	r3, r2
 8016204:	00db      	lsls	r3, r3, #3
 8016206:	440b      	add	r3, r1
 8016208:	3314      	adds	r3, #20
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	2b03      	cmp	r3, #3
 801620e:	d10a      	bne.n	8016226 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016210:	4925      	ldr	r1, [pc, #148]	; (80162a8 <etharp_tmr+0x14c>)
 8016212:	687a      	ldr	r2, [r7, #4]
 8016214:	4613      	mov	r3, r2
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	4413      	add	r3, r2
 801621a:	00db      	lsls	r3, r3, #3
 801621c:	440b      	add	r3, r1
 801621e:	3314      	adds	r3, #20
 8016220:	2204      	movs	r2, #4
 8016222:	701a      	strb	r2, [r3, #0]
 8016224:	e034      	b.n	8016290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016226:	4920      	ldr	r1, [pc, #128]	; (80162a8 <etharp_tmr+0x14c>)
 8016228:	687a      	ldr	r2, [r7, #4]
 801622a:	4613      	mov	r3, r2
 801622c:	005b      	lsls	r3, r3, #1
 801622e:	4413      	add	r3, r2
 8016230:	00db      	lsls	r3, r3, #3
 8016232:	440b      	add	r3, r1
 8016234:	3314      	adds	r3, #20
 8016236:	781b      	ldrb	r3, [r3, #0]
 8016238:	2b04      	cmp	r3, #4
 801623a:	d10a      	bne.n	8016252 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801623c:	491a      	ldr	r1, [pc, #104]	; (80162a8 <etharp_tmr+0x14c>)
 801623e:	687a      	ldr	r2, [r7, #4]
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	440b      	add	r3, r1
 801624a:	3314      	adds	r3, #20
 801624c:	2202      	movs	r2, #2
 801624e:	701a      	strb	r2, [r3, #0]
 8016250:	e01e      	b.n	8016290 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016252:	4915      	ldr	r1, [pc, #84]	; (80162a8 <etharp_tmr+0x14c>)
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	440b      	add	r3, r1
 8016260:	3314      	adds	r3, #20
 8016262:	781b      	ldrb	r3, [r3, #0]
 8016264:	2b01      	cmp	r3, #1
 8016266:	d113      	bne.n	8016290 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016268:	490f      	ldr	r1, [pc, #60]	; (80162a8 <etharp_tmr+0x14c>)
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	4613      	mov	r3, r2
 801626e:	005b      	lsls	r3, r3, #1
 8016270:	4413      	add	r3, r2
 8016272:	00db      	lsls	r3, r3, #3
 8016274:	440b      	add	r3, r1
 8016276:	3308      	adds	r3, #8
 8016278:	6818      	ldr	r0, [r3, #0]
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	4a08      	ldr	r2, [pc, #32]	; (80162a8 <etharp_tmr+0x14c>)
 8016286:	4413      	add	r3, r2
 8016288:	3304      	adds	r3, #4
 801628a:	4619      	mov	r1, r3
 801628c:	f000 fe72 	bl	8016f74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	3301      	adds	r3, #1
 8016294:	607b      	str	r3, [r7, #4]
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	2b09      	cmp	r3, #9
 801629a:	f77f af65 	ble.w	8016168 <etharp_tmr+0xc>
      }
    }
  }
}
 801629e:	bf00      	nop
 80162a0:	bf00      	nop
 80162a2:	3708      	adds	r7, #8
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	2000ccc0 	.word	0x2000ccc0

080162ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08a      	sub	sp, #40	; 0x28
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	460b      	mov	r3, r1
 80162b6:	607a      	str	r2, [r7, #4]
 80162b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80162ba:	230a      	movs	r3, #10
 80162bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80162be:	230a      	movs	r3, #10
 80162c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80162c2:	230a      	movs	r3, #10
 80162c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80162c6:	2300      	movs	r3, #0
 80162c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80162ca:	230a      	movs	r3, #10
 80162cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80162ce:	2300      	movs	r3, #0
 80162d0:	83bb      	strh	r3, [r7, #28]
 80162d2:	2300      	movs	r3, #0
 80162d4:	837b      	strh	r3, [r7, #26]
 80162d6:	2300      	movs	r3, #0
 80162d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162da:	2300      	movs	r3, #0
 80162dc:	843b      	strh	r3, [r7, #32]
 80162de:	e0ae      	b.n	801643e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80162e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162e4:	49a6      	ldr	r1, [pc, #664]	; (8016580 <etharp_find_entry+0x2d4>)
 80162e6:	4613      	mov	r3, r2
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4413      	add	r3, r2
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	440b      	add	r3, r1
 80162f0:	3314      	adds	r3, #20
 80162f2:	781b      	ldrb	r3, [r3, #0]
 80162f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80162f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80162fa:	2b0a      	cmp	r3, #10
 80162fc:	d105      	bne.n	801630a <etharp_find_entry+0x5e>
 80162fe:	7dfb      	ldrb	r3, [r7, #23]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d102      	bne.n	801630a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016304:	8c3b      	ldrh	r3, [r7, #32]
 8016306:	847b      	strh	r3, [r7, #34]	; 0x22
 8016308:	e095      	b.n	8016436 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801630a:	7dfb      	ldrb	r3, [r7, #23]
 801630c:	2b00      	cmp	r3, #0
 801630e:	f000 8092 	beq.w	8016436 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016312:	7dfb      	ldrb	r3, [r7, #23]
 8016314:	2b01      	cmp	r3, #1
 8016316:	d009      	beq.n	801632c <etharp_find_entry+0x80>
 8016318:	7dfb      	ldrb	r3, [r7, #23]
 801631a:	2b01      	cmp	r3, #1
 801631c:	d806      	bhi.n	801632c <etharp_find_entry+0x80>
 801631e:	4b99      	ldr	r3, [pc, #612]	; (8016584 <etharp_find_entry+0x2d8>)
 8016320:	f240 1223 	movw	r2, #291	; 0x123
 8016324:	4998      	ldr	r1, [pc, #608]	; (8016588 <etharp_find_entry+0x2dc>)
 8016326:	4899      	ldr	r0, [pc, #612]	; (801658c <etharp_find_entry+0x2e0>)
 8016328:	f002 fcbe 	bl	8018ca8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d020      	beq.n	8016374 <etharp_find_entry+0xc8>
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	6819      	ldr	r1, [r3, #0]
 8016336:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801633a:	4891      	ldr	r0, [pc, #580]	; (8016580 <etharp_find_entry+0x2d4>)
 801633c:	4613      	mov	r3, r2
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4413      	add	r3, r2
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	4403      	add	r3, r0
 8016346:	3304      	adds	r3, #4
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	4299      	cmp	r1, r3
 801634c:	d112      	bne.n	8016374 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d00c      	beq.n	801636e <etharp_find_entry+0xc2>
 8016354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016358:	4989      	ldr	r1, [pc, #548]	; (8016580 <etharp_find_entry+0x2d4>)
 801635a:	4613      	mov	r3, r2
 801635c:	005b      	lsls	r3, r3, #1
 801635e:	4413      	add	r3, r2
 8016360:	00db      	lsls	r3, r3, #3
 8016362:	440b      	add	r3, r1
 8016364:	3308      	adds	r3, #8
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	687a      	ldr	r2, [r7, #4]
 801636a:	429a      	cmp	r2, r3
 801636c:	d102      	bne.n	8016374 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801636e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016372:	e100      	b.n	8016576 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016374:	7dfb      	ldrb	r3, [r7, #23]
 8016376:	2b01      	cmp	r3, #1
 8016378:	d140      	bne.n	80163fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801637a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801637e:	4980      	ldr	r1, [pc, #512]	; (8016580 <etharp_find_entry+0x2d4>)
 8016380:	4613      	mov	r3, r2
 8016382:	005b      	lsls	r3, r3, #1
 8016384:	4413      	add	r3, r2
 8016386:	00db      	lsls	r3, r3, #3
 8016388:	440b      	add	r3, r1
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d01a      	beq.n	80163c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016390:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016394:	497a      	ldr	r1, [pc, #488]	; (8016580 <etharp_find_entry+0x2d4>)
 8016396:	4613      	mov	r3, r2
 8016398:	005b      	lsls	r3, r3, #1
 801639a:	4413      	add	r3, r2
 801639c:	00db      	lsls	r3, r3, #3
 801639e:	440b      	add	r3, r1
 80163a0:	3312      	adds	r3, #18
 80163a2:	881b      	ldrh	r3, [r3, #0]
 80163a4:	8bba      	ldrh	r2, [r7, #28]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d845      	bhi.n	8016436 <etharp_find_entry+0x18a>
            old_queue = i;
 80163aa:	8c3b      	ldrh	r3, [r7, #32]
 80163ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80163ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163b2:	4973      	ldr	r1, [pc, #460]	; (8016580 <etharp_find_entry+0x2d4>)
 80163b4:	4613      	mov	r3, r2
 80163b6:	005b      	lsls	r3, r3, #1
 80163b8:	4413      	add	r3, r2
 80163ba:	00db      	lsls	r3, r3, #3
 80163bc:	440b      	add	r3, r1
 80163be:	3312      	adds	r3, #18
 80163c0:	881b      	ldrh	r3, [r3, #0]
 80163c2:	83bb      	strh	r3, [r7, #28]
 80163c4:	e037      	b.n	8016436 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80163c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ca:	496d      	ldr	r1, [pc, #436]	; (8016580 <etharp_find_entry+0x2d4>)
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	3312      	adds	r3, #18
 80163d8:	881b      	ldrh	r3, [r3, #0]
 80163da:	8b7a      	ldrh	r2, [r7, #26]
 80163dc:	429a      	cmp	r2, r3
 80163de:	d82a      	bhi.n	8016436 <etharp_find_entry+0x18a>
            old_pending = i;
 80163e0:	8c3b      	ldrh	r3, [r7, #32]
 80163e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80163e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163e8:	4965      	ldr	r1, [pc, #404]	; (8016580 <etharp_find_entry+0x2d4>)
 80163ea:	4613      	mov	r3, r2
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4413      	add	r3, r2
 80163f0:	00db      	lsls	r3, r3, #3
 80163f2:	440b      	add	r3, r1
 80163f4:	3312      	adds	r3, #18
 80163f6:	881b      	ldrh	r3, [r3, #0]
 80163f8:	837b      	strh	r3, [r7, #26]
 80163fa:	e01c      	b.n	8016436 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80163fc:	7dfb      	ldrb	r3, [r7, #23]
 80163fe:	2b01      	cmp	r3, #1
 8016400:	d919      	bls.n	8016436 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016406:	495e      	ldr	r1, [pc, #376]	; (8016580 <etharp_find_entry+0x2d4>)
 8016408:	4613      	mov	r3, r2
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4413      	add	r3, r2
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	440b      	add	r3, r1
 8016412:	3312      	adds	r3, #18
 8016414:	881b      	ldrh	r3, [r3, #0]
 8016416:	8b3a      	ldrh	r2, [r7, #24]
 8016418:	429a      	cmp	r2, r3
 801641a:	d80c      	bhi.n	8016436 <etharp_find_entry+0x18a>
            old_stable = i;
 801641c:	8c3b      	ldrh	r3, [r7, #32]
 801641e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016420:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016424:	4956      	ldr	r1, [pc, #344]	; (8016580 <etharp_find_entry+0x2d4>)
 8016426:	4613      	mov	r3, r2
 8016428:	005b      	lsls	r3, r3, #1
 801642a:	4413      	add	r3, r2
 801642c:	00db      	lsls	r3, r3, #3
 801642e:	440b      	add	r3, r1
 8016430:	3312      	adds	r3, #18
 8016432:	881b      	ldrh	r3, [r3, #0]
 8016434:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016436:	8c3b      	ldrh	r3, [r7, #32]
 8016438:	3301      	adds	r3, #1
 801643a:	b29b      	uxth	r3, r3
 801643c:	843b      	strh	r3, [r7, #32]
 801643e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016442:	2b09      	cmp	r3, #9
 8016444:	f77f af4c 	ble.w	80162e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016448:	7afb      	ldrb	r3, [r7, #11]
 801644a:	f003 0302 	and.w	r3, r3, #2
 801644e:	2b00      	cmp	r3, #0
 8016450:	d108      	bne.n	8016464 <etharp_find_entry+0x1b8>
 8016452:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016456:	2b0a      	cmp	r3, #10
 8016458:	d107      	bne.n	801646a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801645a:	7afb      	ldrb	r3, [r7, #11]
 801645c:	f003 0301 	and.w	r3, r3, #1
 8016460:	2b00      	cmp	r3, #0
 8016462:	d102      	bne.n	801646a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016464:	f04f 33ff 	mov.w	r3, #4294967295
 8016468:	e085      	b.n	8016576 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801646a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801646e:	2b09      	cmp	r3, #9
 8016470:	dc02      	bgt.n	8016478 <etharp_find_entry+0x1cc>
    i = empty;
 8016472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016474:	843b      	strh	r3, [r7, #32]
 8016476:	e039      	b.n	80164ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016478:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801647c:	2b09      	cmp	r3, #9
 801647e:	dc14      	bgt.n	80164aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016482:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016488:	493d      	ldr	r1, [pc, #244]	; (8016580 <etharp_find_entry+0x2d4>)
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	440b      	add	r3, r1
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d018      	beq.n	80164cc <etharp_find_entry+0x220>
 801649a:	4b3a      	ldr	r3, [pc, #232]	; (8016584 <etharp_find_entry+0x2d8>)
 801649c:	f240 126d 	movw	r2, #365	; 0x16d
 80164a0:	493b      	ldr	r1, [pc, #236]	; (8016590 <etharp_find_entry+0x2e4>)
 80164a2:	483a      	ldr	r0, [pc, #232]	; (801658c <etharp_find_entry+0x2e0>)
 80164a4:	f002 fc00 	bl	8018ca8 <iprintf>
 80164a8:	e010      	b.n	80164cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80164aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80164ae:	2b09      	cmp	r3, #9
 80164b0:	dc02      	bgt.n	80164b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80164b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164b4:	843b      	strh	r3, [r7, #32]
 80164b6:	e009      	b.n	80164cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80164b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80164bc:	2b09      	cmp	r3, #9
 80164be:	dc02      	bgt.n	80164c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80164c0:	8bfb      	ldrh	r3, [r7, #30]
 80164c2:	843b      	strh	r3, [r7, #32]
 80164c4:	e002      	b.n	80164cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80164c6:	f04f 33ff 	mov.w	r3, #4294967295
 80164ca:	e054      	b.n	8016576 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164d0:	2b09      	cmp	r3, #9
 80164d2:	dd06      	ble.n	80164e2 <etharp_find_entry+0x236>
 80164d4:	4b2b      	ldr	r3, [pc, #172]	; (8016584 <etharp_find_entry+0x2d8>)
 80164d6:	f240 127f 	movw	r2, #383	; 0x17f
 80164da:	492e      	ldr	r1, [pc, #184]	; (8016594 <etharp_find_entry+0x2e8>)
 80164dc:	482b      	ldr	r0, [pc, #172]	; (801658c <etharp_find_entry+0x2e0>)
 80164de:	f002 fbe3 	bl	8018ca8 <iprintf>
    etharp_free_entry(i);
 80164e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7ff fe06 	bl	80160f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80164f0:	2b09      	cmp	r3, #9
 80164f2:	dd06      	ble.n	8016502 <etharp_find_entry+0x256>
 80164f4:	4b23      	ldr	r3, [pc, #140]	; (8016584 <etharp_find_entry+0x2d8>)
 80164f6:	f240 1283 	movw	r2, #387	; 0x183
 80164fa:	4926      	ldr	r1, [pc, #152]	; (8016594 <etharp_find_entry+0x2e8>)
 80164fc:	4823      	ldr	r0, [pc, #140]	; (801658c <etharp_find_entry+0x2e0>)
 80164fe:	f002 fbd3 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016502:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016506:	491e      	ldr	r1, [pc, #120]	; (8016580 <etharp_find_entry+0x2d4>)
 8016508:	4613      	mov	r3, r2
 801650a:	005b      	lsls	r3, r3, #1
 801650c:	4413      	add	r3, r2
 801650e:	00db      	lsls	r3, r3, #3
 8016510:	440b      	add	r3, r1
 8016512:	3314      	adds	r3, #20
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d006      	beq.n	8016528 <etharp_find_entry+0x27c>
 801651a:	4b1a      	ldr	r3, [pc, #104]	; (8016584 <etharp_find_entry+0x2d8>)
 801651c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016520:	491d      	ldr	r1, [pc, #116]	; (8016598 <etharp_find_entry+0x2ec>)
 8016522:	481a      	ldr	r0, [pc, #104]	; (801658c <etharp_find_entry+0x2e0>)
 8016524:	f002 fbc0 	bl	8018ca8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d00b      	beq.n	8016546 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801652e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	6819      	ldr	r1, [r3, #0]
 8016536:	4812      	ldr	r0, [pc, #72]	; (8016580 <etharp_find_entry+0x2d4>)
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	4403      	add	r3, r0
 8016542:	3304      	adds	r3, #4
 8016544:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801654a:	490d      	ldr	r1, [pc, #52]	; (8016580 <etharp_find_entry+0x2d4>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	3312      	adds	r3, #18
 8016558:	2200      	movs	r2, #0
 801655a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801655c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016560:	4907      	ldr	r1, [pc, #28]	; (8016580 <etharp_find_entry+0x2d4>)
 8016562:	4613      	mov	r3, r2
 8016564:	005b      	lsls	r3, r3, #1
 8016566:	4413      	add	r3, r2
 8016568:	00db      	lsls	r3, r3, #3
 801656a:	440b      	add	r3, r1
 801656c:	3308      	adds	r3, #8
 801656e:	687a      	ldr	r2, [r7, #4]
 8016570:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3728      	adds	r7, #40	; 0x28
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	2000ccc0 	.word	0x2000ccc0
 8016584:	0801cb1c 	.word	0x0801cb1c
 8016588:	0801cb54 	.word	0x0801cb54
 801658c:	0801cb94 	.word	0x0801cb94
 8016590:	0801cbbc 	.word	0x0801cbbc
 8016594:	0801cbd4 	.word	0x0801cbd4
 8016598:	0801cbe8 	.word	0x0801cbe8

0801659c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b088      	sub	sp, #32
 80165a0:	af02      	add	r7, sp, #8
 80165a2:	60f8      	str	r0, [r7, #12]
 80165a4:	60b9      	str	r1, [r7, #8]
 80165a6:	607a      	str	r2, [r7, #4]
 80165a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80165b0:	2b06      	cmp	r3, #6
 80165b2:	d006      	beq.n	80165c2 <etharp_update_arp_entry+0x26>
 80165b4:	4b48      	ldr	r3, [pc, #288]	; (80166d8 <etharp_update_arp_entry+0x13c>)
 80165b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80165ba:	4948      	ldr	r1, [pc, #288]	; (80166dc <etharp_update_arp_entry+0x140>)
 80165bc:	4848      	ldr	r0, [pc, #288]	; (80166e0 <etharp_update_arp_entry+0x144>)
 80165be:	f002 fb73 	bl	8018ca8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d012      	beq.n	80165ee <etharp_update_arp_entry+0x52>
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d00e      	beq.n	80165ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	68f9      	ldr	r1, [r7, #12]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f001 f920 	bl	801781c <ip4_addr_isbroadcast_u32>
 80165dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d105      	bne.n	80165ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80165e2:	68bb      	ldr	r3, [r7, #8]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80165ea:	2be0      	cmp	r3, #224	; 0xe0
 80165ec:	d102      	bne.n	80165f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80165ee:	f06f 030f 	mvn.w	r3, #15
 80165f2:	e06c      	b.n	80166ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80165f4:	78fb      	ldrb	r3, [r7, #3]
 80165f6:	68fa      	ldr	r2, [r7, #12]
 80165f8:	4619      	mov	r1, r3
 80165fa:	68b8      	ldr	r0, [r7, #8]
 80165fc:	f7ff fe56 	bl	80162ac <etharp_find_entry>
 8016600:	4603      	mov	r3, r0
 8016602:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016604:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016608:	2b00      	cmp	r3, #0
 801660a:	da02      	bge.n	8016612 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801660c:	8afb      	ldrh	r3, [r7, #22]
 801660e:	b25b      	sxtb	r3, r3
 8016610:	e05d      	b.n	80166ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016612:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016616:	4933      	ldr	r1, [pc, #204]	; (80166e4 <etharp_update_arp_entry+0x148>)
 8016618:	4613      	mov	r3, r2
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	4413      	add	r3, r2
 801661e:	00db      	lsls	r3, r3, #3
 8016620:	440b      	add	r3, r1
 8016622:	3314      	adds	r3, #20
 8016624:	2202      	movs	r2, #2
 8016626:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016628:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801662c:	492d      	ldr	r1, [pc, #180]	; (80166e4 <etharp_update_arp_entry+0x148>)
 801662e:	4613      	mov	r3, r2
 8016630:	005b      	lsls	r3, r3, #1
 8016632:	4413      	add	r3, r2
 8016634:	00db      	lsls	r3, r3, #3
 8016636:	440b      	add	r3, r1
 8016638:	3308      	adds	r3, #8
 801663a:	68fa      	ldr	r2, [r7, #12]
 801663c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801663e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016642:	4613      	mov	r3, r2
 8016644:	005b      	lsls	r3, r3, #1
 8016646:	4413      	add	r3, r2
 8016648:	00db      	lsls	r3, r3, #3
 801664a:	3308      	adds	r3, #8
 801664c:	4a25      	ldr	r2, [pc, #148]	; (80166e4 <etharp_update_arp_entry+0x148>)
 801664e:	4413      	add	r3, r2
 8016650:	3304      	adds	r3, #4
 8016652:	2206      	movs	r2, #6
 8016654:	6879      	ldr	r1, [r7, #4]
 8016656:	4618      	mov	r0, r3
 8016658:	f002 fc18 	bl	8018e8c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801665c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016660:	4920      	ldr	r1, [pc, #128]	; (80166e4 <etharp_update_arp_entry+0x148>)
 8016662:	4613      	mov	r3, r2
 8016664:	005b      	lsls	r3, r3, #1
 8016666:	4413      	add	r3, r2
 8016668:	00db      	lsls	r3, r3, #3
 801666a:	440b      	add	r3, r1
 801666c:	3312      	adds	r3, #18
 801666e:	2200      	movs	r2, #0
 8016670:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016672:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016676:	491b      	ldr	r1, [pc, #108]	; (80166e4 <etharp_update_arp_entry+0x148>)
 8016678:	4613      	mov	r3, r2
 801667a:	005b      	lsls	r3, r3, #1
 801667c:	4413      	add	r3, r2
 801667e:	00db      	lsls	r3, r3, #3
 8016680:	440b      	add	r3, r1
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d021      	beq.n	80166cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801668c:	4915      	ldr	r1, [pc, #84]	; (80166e4 <etharp_update_arp_entry+0x148>)
 801668e:	4613      	mov	r3, r2
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	4413      	add	r3, r2
 8016694:	00db      	lsls	r3, r3, #3
 8016696:	440b      	add	r3, r1
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801669c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166a0:	4910      	ldr	r1, [pc, #64]	; (80166e4 <etharp_update_arp_entry+0x148>)
 80166a2:	4613      	mov	r3, r2
 80166a4:	005b      	lsls	r3, r3, #1
 80166a6:	4413      	add	r3, r2
 80166a8:	00db      	lsls	r3, r3, #3
 80166aa:	440b      	add	r3, r1
 80166ac:	2200      	movs	r2, #0
 80166ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80166b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80166ba:	9300      	str	r3, [sp, #0]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6939      	ldr	r1, [r7, #16]
 80166c0:	68f8      	ldr	r0, [r7, #12]
 80166c2:	f001 ffb9 	bl	8018638 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80166c6:	6938      	ldr	r0, [r7, #16]
 80166c8:	f7f6 fca4 	bl	800d014 <pbuf_free>
  }
  return ERR_OK;
 80166cc:	2300      	movs	r3, #0
}
 80166ce:	4618      	mov	r0, r3
 80166d0:	3718      	adds	r7, #24
 80166d2:	46bd      	mov	sp, r7
 80166d4:	bd80      	pop	{r7, pc}
 80166d6:	bf00      	nop
 80166d8:	0801cb1c 	.word	0x0801cb1c
 80166dc:	0801cc14 	.word	0x0801cc14
 80166e0:	0801cb94 	.word	0x0801cb94
 80166e4:	2000ccc0 	.word	0x2000ccc0

080166e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b084      	sub	sp, #16
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166f0:	2300      	movs	r3, #0
 80166f2:	60fb      	str	r3, [r7, #12]
 80166f4:	e01e      	b.n	8016734 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80166f6:	4913      	ldr	r1, [pc, #76]	; (8016744 <etharp_cleanup_netif+0x5c>)
 80166f8:	68fa      	ldr	r2, [r7, #12]
 80166fa:	4613      	mov	r3, r2
 80166fc:	005b      	lsls	r3, r3, #1
 80166fe:	4413      	add	r3, r2
 8016700:	00db      	lsls	r3, r3, #3
 8016702:	440b      	add	r3, r1
 8016704:	3314      	adds	r3, #20
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801670a:	7afb      	ldrb	r3, [r7, #11]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00e      	beq.n	801672e <etharp_cleanup_netif+0x46>
 8016710:	490c      	ldr	r1, [pc, #48]	; (8016744 <etharp_cleanup_netif+0x5c>)
 8016712:	68fa      	ldr	r2, [r7, #12]
 8016714:	4613      	mov	r3, r2
 8016716:	005b      	lsls	r3, r3, #1
 8016718:	4413      	add	r3, r2
 801671a:	00db      	lsls	r3, r3, #3
 801671c:	440b      	add	r3, r1
 801671e:	3308      	adds	r3, #8
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	687a      	ldr	r2, [r7, #4]
 8016724:	429a      	cmp	r2, r3
 8016726:	d102      	bne.n	801672e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016728:	68f8      	ldr	r0, [r7, #12]
 801672a:	f7ff fce5 	bl	80160f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	3301      	adds	r3, #1
 8016732:	60fb      	str	r3, [r7, #12]
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	2b09      	cmp	r3, #9
 8016738:	dddd      	ble.n	80166f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801673a:	bf00      	nop
 801673c:	bf00      	nop
 801673e:	3710      	adds	r7, #16
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}
 8016744:	2000ccc0 	.word	0x2000ccc0

08016748 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016748:	b5b0      	push	{r4, r5, r7, lr}
 801674a:	b08a      	sub	sp, #40	; 0x28
 801674c:	af04      	add	r7, sp, #16
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2b00      	cmp	r3, #0
 8016756:	d107      	bne.n	8016768 <etharp_input+0x20>
 8016758:	4b3f      	ldr	r3, [pc, #252]	; (8016858 <etharp_input+0x110>)
 801675a:	f240 228a 	movw	r2, #650	; 0x28a
 801675e:	493f      	ldr	r1, [pc, #252]	; (801685c <etharp_input+0x114>)
 8016760:	483f      	ldr	r0, [pc, #252]	; (8016860 <etharp_input+0x118>)
 8016762:	f002 faa1 	bl	8018ca8 <iprintf>
 8016766:	e074      	b.n	8016852 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	881b      	ldrh	r3, [r3, #0]
 8016772:	b29b      	uxth	r3, r3
 8016774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016778:	d10c      	bne.n	8016794 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801677e:	2b06      	cmp	r3, #6
 8016780:	d108      	bne.n	8016794 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016786:	2b04      	cmp	r3, #4
 8016788:	d104      	bne.n	8016794 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	885b      	ldrh	r3, [r3, #2]
 801678e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016790:	2b08      	cmp	r3, #8
 8016792:	d003      	beq.n	801679c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	f7f6 fc3d 	bl	800d014 <pbuf_free>
    return;
 801679a:	e05a      	b.n	8016852 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	330e      	adds	r3, #14
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	3318      	adds	r3, #24
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80167ac:	683b      	ldr	r3, [r7, #0]
 80167ae:	3304      	adds	r3, #4
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d102      	bne.n	80167bc <etharp_input+0x74>
    for_us = 0;
 80167b6:	2300      	movs	r3, #0
 80167b8:	75fb      	strb	r3, [r7, #23]
 80167ba:	e009      	b.n	80167d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80167bc:	68ba      	ldr	r2, [r7, #8]
 80167be:	683b      	ldr	r3, [r7, #0]
 80167c0:	3304      	adds	r3, #4
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	429a      	cmp	r2, r3
 80167c6:	bf0c      	ite	eq
 80167c8:	2301      	moveq	r3, #1
 80167ca:	2300      	movne	r3, #0
 80167cc:	b2db      	uxtb	r3, r3
 80167ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	f103 0208 	add.w	r2, r3, #8
 80167d6:	7dfb      	ldrb	r3, [r7, #23]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d001      	beq.n	80167e0 <etharp_input+0x98>
 80167dc:	2301      	movs	r3, #1
 80167de:	e000      	b.n	80167e2 <etharp_input+0x9a>
 80167e0:	2302      	movs	r3, #2
 80167e2:	f107 010c 	add.w	r1, r7, #12
 80167e6:	6838      	ldr	r0, [r7, #0]
 80167e8:	f7ff fed8 	bl	801659c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	88db      	ldrh	r3, [r3, #6]
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167f6:	d003      	beq.n	8016800 <etharp_input+0xb8>
 80167f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80167fc:	d01e      	beq.n	801683c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80167fe:	e025      	b.n	801684c <etharp_input+0x104>
      if (for_us) {
 8016800:	7dfb      	ldrb	r3, [r7, #23]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d021      	beq.n	801684a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016812:	683b      	ldr	r3, [r7, #0]
 8016814:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801681c:	693a      	ldr	r2, [r7, #16]
 801681e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016820:	2102      	movs	r1, #2
 8016822:	9103      	str	r1, [sp, #12]
 8016824:	f107 010c 	add.w	r1, r7, #12
 8016828:	9102      	str	r1, [sp, #8]
 801682a:	9201      	str	r2, [sp, #4]
 801682c:	9300      	str	r3, [sp, #0]
 801682e:	462b      	mov	r3, r5
 8016830:	4622      	mov	r2, r4
 8016832:	4601      	mov	r1, r0
 8016834:	6838      	ldr	r0, [r7, #0]
 8016836:	f000 faef 	bl	8016e18 <etharp_raw>
      break;
 801683a:	e006      	b.n	801684a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801683c:	f107 030c 	add.w	r3, r7, #12
 8016840:	4619      	mov	r1, r3
 8016842:	6838      	ldr	r0, [r7, #0]
 8016844:	f7fe f9fc 	bl	8014c40 <dhcp_arp_reply>
      break;
 8016848:	e000      	b.n	801684c <etharp_input+0x104>
      break;
 801684a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7f6 fbe1 	bl	800d014 <pbuf_free>
}
 8016852:	3718      	adds	r7, #24
 8016854:	46bd      	mov	sp, r7
 8016856:	bdb0      	pop	{r4, r5, r7, pc}
 8016858:	0801cb1c 	.word	0x0801cb1c
 801685c:	0801cc6c 	.word	0x0801cc6c
 8016860:	0801cb94 	.word	0x0801cb94

08016864 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b086      	sub	sp, #24
 8016868:	af02      	add	r7, sp, #8
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	60b9      	str	r1, [r7, #8]
 801686e:	4613      	mov	r3, r2
 8016870:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016872:	79fa      	ldrb	r2, [r7, #7]
 8016874:	4944      	ldr	r1, [pc, #272]	; (8016988 <etharp_output_to_arp_index+0x124>)
 8016876:	4613      	mov	r3, r2
 8016878:	005b      	lsls	r3, r3, #1
 801687a:	4413      	add	r3, r2
 801687c:	00db      	lsls	r3, r3, #3
 801687e:	440b      	add	r3, r1
 8016880:	3314      	adds	r3, #20
 8016882:	781b      	ldrb	r3, [r3, #0]
 8016884:	2b01      	cmp	r3, #1
 8016886:	d806      	bhi.n	8016896 <etharp_output_to_arp_index+0x32>
 8016888:	4b40      	ldr	r3, [pc, #256]	; (801698c <etharp_output_to_arp_index+0x128>)
 801688a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801688e:	4940      	ldr	r1, [pc, #256]	; (8016990 <etharp_output_to_arp_index+0x12c>)
 8016890:	4840      	ldr	r0, [pc, #256]	; (8016994 <etharp_output_to_arp_index+0x130>)
 8016892:	f002 fa09 	bl	8018ca8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016896:	79fa      	ldrb	r2, [r7, #7]
 8016898:	493b      	ldr	r1, [pc, #236]	; (8016988 <etharp_output_to_arp_index+0x124>)
 801689a:	4613      	mov	r3, r2
 801689c:	005b      	lsls	r3, r3, #1
 801689e:	4413      	add	r3, r2
 80168a0:	00db      	lsls	r3, r3, #3
 80168a2:	440b      	add	r3, r1
 80168a4:	3314      	adds	r3, #20
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	2b02      	cmp	r3, #2
 80168aa:	d153      	bne.n	8016954 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80168ac:	79fa      	ldrb	r2, [r7, #7]
 80168ae:	4936      	ldr	r1, [pc, #216]	; (8016988 <etharp_output_to_arp_index+0x124>)
 80168b0:	4613      	mov	r3, r2
 80168b2:	005b      	lsls	r3, r3, #1
 80168b4:	4413      	add	r3, r2
 80168b6:	00db      	lsls	r3, r3, #3
 80168b8:	440b      	add	r3, r1
 80168ba:	3312      	adds	r3, #18
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80168c2:	d919      	bls.n	80168f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80168c4:	79fa      	ldrb	r2, [r7, #7]
 80168c6:	4613      	mov	r3, r2
 80168c8:	005b      	lsls	r3, r3, #1
 80168ca:	4413      	add	r3, r2
 80168cc:	00db      	lsls	r3, r3, #3
 80168ce:	4a2e      	ldr	r2, [pc, #184]	; (8016988 <etharp_output_to_arp_index+0x124>)
 80168d0:	4413      	add	r3, r2
 80168d2:	3304      	adds	r3, #4
 80168d4:	4619      	mov	r1, r3
 80168d6:	68f8      	ldr	r0, [r7, #12]
 80168d8:	f000 fb4c 	bl	8016f74 <etharp_request>
 80168dc:	4603      	mov	r3, r0
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d138      	bne.n	8016954 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80168e2:	79fa      	ldrb	r2, [r7, #7]
 80168e4:	4928      	ldr	r1, [pc, #160]	; (8016988 <etharp_output_to_arp_index+0x124>)
 80168e6:	4613      	mov	r3, r2
 80168e8:	005b      	lsls	r3, r3, #1
 80168ea:	4413      	add	r3, r2
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	440b      	add	r3, r1
 80168f0:	3314      	adds	r3, #20
 80168f2:	2203      	movs	r2, #3
 80168f4:	701a      	strb	r2, [r3, #0]
 80168f6:	e02d      	b.n	8016954 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80168f8:	79fa      	ldrb	r2, [r7, #7]
 80168fa:	4923      	ldr	r1, [pc, #140]	; (8016988 <etharp_output_to_arp_index+0x124>)
 80168fc:	4613      	mov	r3, r2
 80168fe:	005b      	lsls	r3, r3, #1
 8016900:	4413      	add	r3, r2
 8016902:	00db      	lsls	r3, r3, #3
 8016904:	440b      	add	r3, r1
 8016906:	3312      	adds	r3, #18
 8016908:	881b      	ldrh	r3, [r3, #0]
 801690a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801690e:	d321      	bcc.n	8016954 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016910:	79fa      	ldrb	r2, [r7, #7]
 8016912:	4613      	mov	r3, r2
 8016914:	005b      	lsls	r3, r3, #1
 8016916:	4413      	add	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	4a1b      	ldr	r2, [pc, #108]	; (8016988 <etharp_output_to_arp_index+0x124>)
 801691c:	4413      	add	r3, r2
 801691e:	1d19      	adds	r1, r3, #4
 8016920:	79fa      	ldrb	r2, [r7, #7]
 8016922:	4613      	mov	r3, r2
 8016924:	005b      	lsls	r3, r3, #1
 8016926:	4413      	add	r3, r2
 8016928:	00db      	lsls	r3, r3, #3
 801692a:	3308      	adds	r3, #8
 801692c:	4a16      	ldr	r2, [pc, #88]	; (8016988 <etharp_output_to_arp_index+0x124>)
 801692e:	4413      	add	r3, r2
 8016930:	3304      	adds	r3, #4
 8016932:	461a      	mov	r2, r3
 8016934:	68f8      	ldr	r0, [r7, #12]
 8016936:	f000 fafb 	bl	8016f30 <etharp_request_dst>
 801693a:	4603      	mov	r3, r0
 801693c:	2b00      	cmp	r3, #0
 801693e:	d109      	bne.n	8016954 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016940:	79fa      	ldrb	r2, [r7, #7]
 8016942:	4911      	ldr	r1, [pc, #68]	; (8016988 <etharp_output_to_arp_index+0x124>)
 8016944:	4613      	mov	r3, r2
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	4413      	add	r3, r2
 801694a:	00db      	lsls	r3, r3, #3
 801694c:	440b      	add	r3, r1
 801694e:	3314      	adds	r3, #20
 8016950:	2203      	movs	r2, #3
 8016952:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801695a:	79fa      	ldrb	r2, [r7, #7]
 801695c:	4613      	mov	r3, r2
 801695e:	005b      	lsls	r3, r3, #1
 8016960:	4413      	add	r3, r2
 8016962:	00db      	lsls	r3, r3, #3
 8016964:	3308      	adds	r3, #8
 8016966:	4a08      	ldr	r2, [pc, #32]	; (8016988 <etharp_output_to_arp_index+0x124>)
 8016968:	4413      	add	r3, r2
 801696a:	3304      	adds	r3, #4
 801696c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016970:	9200      	str	r2, [sp, #0]
 8016972:	460a      	mov	r2, r1
 8016974:	68b9      	ldr	r1, [r7, #8]
 8016976:	68f8      	ldr	r0, [r7, #12]
 8016978:	f001 fe5e 	bl	8018638 <ethernet_output>
 801697c:	4603      	mov	r3, r0
}
 801697e:	4618      	mov	r0, r3
 8016980:	3710      	adds	r7, #16
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	2000ccc0 	.word	0x2000ccc0
 801698c:	0801cb1c 	.word	0x0801cb1c
 8016990:	0801cc8c 	.word	0x0801cc8c
 8016994:	0801cb94 	.word	0x0801cb94

08016998 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b08a      	sub	sp, #40	; 0x28
 801699c:	af02      	add	r7, sp, #8
 801699e:	60f8      	str	r0, [r7, #12]
 80169a0:	60b9      	str	r1, [r7, #8]
 80169a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d106      	bne.n	80169bc <etharp_output+0x24>
 80169ae:	4b73      	ldr	r3, [pc, #460]	; (8016b7c <etharp_output+0x1e4>)
 80169b0:	f240 321e 	movw	r2, #798	; 0x31e
 80169b4:	4972      	ldr	r1, [pc, #456]	; (8016b80 <etharp_output+0x1e8>)
 80169b6:	4873      	ldr	r0, [pc, #460]	; (8016b84 <etharp_output+0x1ec>)
 80169b8:	f002 f976 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d106      	bne.n	80169d0 <etharp_output+0x38>
 80169c2:	4b6e      	ldr	r3, [pc, #440]	; (8016b7c <etharp_output+0x1e4>)
 80169c4:	f240 321f 	movw	r2, #799	; 0x31f
 80169c8:	496f      	ldr	r1, [pc, #444]	; (8016b88 <etharp_output+0x1f0>)
 80169ca:	486e      	ldr	r0, [pc, #440]	; (8016b84 <etharp_output+0x1ec>)
 80169cc:	f002 f96c 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d106      	bne.n	80169e4 <etharp_output+0x4c>
 80169d6:	4b69      	ldr	r3, [pc, #420]	; (8016b7c <etharp_output+0x1e4>)
 80169d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80169dc:	496b      	ldr	r1, [pc, #428]	; (8016b8c <etharp_output+0x1f4>)
 80169de:	4869      	ldr	r0, [pc, #420]	; (8016b84 <etharp_output+0x1ec>)
 80169e0:	f002 f962 	bl	8018ca8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	68f9      	ldr	r1, [r7, #12]
 80169ea:	4618      	mov	r0, r3
 80169ec:	f000 ff16 	bl	801781c <ip4_addr_isbroadcast_u32>
 80169f0:	4603      	mov	r3, r0
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d002      	beq.n	80169fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80169f6:	4b66      	ldr	r3, [pc, #408]	; (8016b90 <etharp_output+0x1f8>)
 80169f8:	61fb      	str	r3, [r7, #28]
 80169fa:	e0af      	b.n	8016b5c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a04:	2be0      	cmp	r3, #224	; 0xe0
 8016a06:	d118      	bne.n	8016a3a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016a10:	235e      	movs	r3, #94	; 0x5e
 8016a12:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	3301      	adds	r3, #1
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	3302      	adds	r3, #2
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	3303      	adds	r3, #3
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016a32:	f107 0310 	add.w	r3, r7, #16
 8016a36:	61fb      	str	r3, [r7, #28]
 8016a38:	e090      	b.n	8016b5c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	681a      	ldr	r2, [r3, #0]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	3304      	adds	r3, #4
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	405a      	eors	r2, r3
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	3308      	adds	r3, #8
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4013      	ands	r3, r2
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d012      	beq.n	8016a78 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a58:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016a5c:	4293      	cmp	r3, r2
 8016a5e:	d00b      	beq.n	8016a78 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	330c      	adds	r3, #12
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d003      	beq.n	8016a72 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	330c      	adds	r3, #12
 8016a6e:	61bb      	str	r3, [r7, #24]
 8016a70:	e002      	b.n	8016a78 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016a72:	f06f 0303 	mvn.w	r3, #3
 8016a76:	e07d      	b.n	8016b74 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016a78:	4b46      	ldr	r3, [pc, #280]	; (8016b94 <etharp_output+0x1fc>)
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	4a46      	ldr	r2, [pc, #280]	; (8016b98 <etharp_output+0x200>)
 8016a80:	460b      	mov	r3, r1
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	440b      	add	r3, r1
 8016a86:	00db      	lsls	r3, r3, #3
 8016a88:	4413      	add	r3, r2
 8016a8a:	3314      	adds	r3, #20
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	2b01      	cmp	r3, #1
 8016a90:	d925      	bls.n	8016ade <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016a92:	4b40      	ldr	r3, [pc, #256]	; (8016b94 <etharp_output+0x1fc>)
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	4619      	mov	r1, r3
 8016a98:	4a3f      	ldr	r2, [pc, #252]	; (8016b98 <etharp_output+0x200>)
 8016a9a:	460b      	mov	r3, r1
 8016a9c:	005b      	lsls	r3, r3, #1
 8016a9e:	440b      	add	r3, r1
 8016aa0:	00db      	lsls	r3, r3, #3
 8016aa2:	4413      	add	r3, r2
 8016aa4:	3308      	adds	r3, #8
 8016aa6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016aa8:	68fa      	ldr	r2, [r7, #12]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d117      	bne.n	8016ade <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016aae:	69bb      	ldr	r3, [r7, #24]
 8016ab0:	681a      	ldr	r2, [r3, #0]
 8016ab2:	4b38      	ldr	r3, [pc, #224]	; (8016b94 <etharp_output+0x1fc>)
 8016ab4:	781b      	ldrb	r3, [r3, #0]
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	4937      	ldr	r1, [pc, #220]	; (8016b98 <etharp_output+0x200>)
 8016aba:	4603      	mov	r3, r0
 8016abc:	005b      	lsls	r3, r3, #1
 8016abe:	4403      	add	r3, r0
 8016ac0:	00db      	lsls	r3, r3, #3
 8016ac2:	440b      	add	r3, r1
 8016ac4:	3304      	adds	r3, #4
 8016ac6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ac8:	429a      	cmp	r2, r3
 8016aca:	d108      	bne.n	8016ade <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016acc:	4b31      	ldr	r3, [pc, #196]	; (8016b94 <etharp_output+0x1fc>)
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	68b9      	ldr	r1, [r7, #8]
 8016ad4:	68f8      	ldr	r0, [r7, #12]
 8016ad6:	f7ff fec5 	bl	8016864 <etharp_output_to_arp_index>
 8016ada:	4603      	mov	r3, r0
 8016adc:	e04a      	b.n	8016b74 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016ade:	2300      	movs	r3, #0
 8016ae0:	75fb      	strb	r3, [r7, #23]
 8016ae2:	e031      	b.n	8016b48 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ae4:	7dfa      	ldrb	r2, [r7, #23]
 8016ae6:	492c      	ldr	r1, [pc, #176]	; (8016b98 <etharp_output+0x200>)
 8016ae8:	4613      	mov	r3, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	4413      	add	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	440b      	add	r3, r1
 8016af2:	3314      	adds	r3, #20
 8016af4:	781b      	ldrb	r3, [r3, #0]
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d923      	bls.n	8016b42 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016afa:	7dfa      	ldrb	r2, [r7, #23]
 8016afc:	4926      	ldr	r1, [pc, #152]	; (8016b98 <etharp_output+0x200>)
 8016afe:	4613      	mov	r3, r2
 8016b00:	005b      	lsls	r3, r3, #1
 8016b02:	4413      	add	r3, r2
 8016b04:	00db      	lsls	r3, r3, #3
 8016b06:	440b      	add	r3, r1
 8016b08:	3308      	adds	r3, #8
 8016b0a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b0c:	68fa      	ldr	r2, [r7, #12]
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d117      	bne.n	8016b42 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	6819      	ldr	r1, [r3, #0]
 8016b16:	7dfa      	ldrb	r2, [r7, #23]
 8016b18:	481f      	ldr	r0, [pc, #124]	; (8016b98 <etharp_output+0x200>)
 8016b1a:	4613      	mov	r3, r2
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	4413      	add	r3, r2
 8016b20:	00db      	lsls	r3, r3, #3
 8016b22:	4403      	add	r3, r0
 8016b24:	3304      	adds	r3, #4
 8016b26:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016b28:	4299      	cmp	r1, r3
 8016b2a:	d10a      	bne.n	8016b42 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016b2c:	4a19      	ldr	r2, [pc, #100]	; (8016b94 <etharp_output+0x1fc>)
 8016b2e:	7dfb      	ldrb	r3, [r7, #23]
 8016b30:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016b32:	7dfb      	ldrb	r3, [r7, #23]
 8016b34:	461a      	mov	r2, r3
 8016b36:	68b9      	ldr	r1, [r7, #8]
 8016b38:	68f8      	ldr	r0, [r7, #12]
 8016b3a:	f7ff fe93 	bl	8016864 <etharp_output_to_arp_index>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	e018      	b.n	8016b74 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b42:	7dfb      	ldrb	r3, [r7, #23]
 8016b44:	3301      	adds	r3, #1
 8016b46:	75fb      	strb	r3, [r7, #23]
 8016b48:	7dfb      	ldrb	r3, [r7, #23]
 8016b4a:	2b09      	cmp	r3, #9
 8016b4c:	d9ca      	bls.n	8016ae4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	69b9      	ldr	r1, [r7, #24]
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f000 f822 	bl	8016b9c <etharp_query>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	e00b      	b.n	8016b74 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b66:	9300      	str	r3, [sp, #0]
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	68b9      	ldr	r1, [r7, #8]
 8016b6c:	68f8      	ldr	r0, [r7, #12]
 8016b6e:	f001 fd63 	bl	8018638 <ethernet_output>
 8016b72:	4603      	mov	r3, r0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	3720      	adds	r7, #32
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bd80      	pop	{r7, pc}
 8016b7c:	0801cb1c 	.word	0x0801cb1c
 8016b80:	0801cc6c 	.word	0x0801cc6c
 8016b84:	0801cb94 	.word	0x0801cb94
 8016b88:	0801ccbc 	.word	0x0801ccbc
 8016b8c:	0801cc5c 	.word	0x0801cc5c
 8016b90:	0801d32c 	.word	0x0801d32c
 8016b94:	2000cdb0 	.word	0x2000cdb0
 8016b98:	2000ccc0 	.word	0x2000ccc0

08016b9c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b08c      	sub	sp, #48	; 0x30
 8016ba0:	af02      	add	r7, sp, #8
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	332a      	adds	r3, #42	; 0x2a
 8016bac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016bae:	23ff      	movs	r3, #255	; 0xff
 8016bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	68f9      	ldr	r1, [r7, #12]
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f000 fe2c 	bl	801781c <ip4_addr_isbroadcast_u32>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10c      	bne.n	8016be4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016bd2:	2be0      	cmp	r3, #224	; 0xe0
 8016bd4:	d006      	beq.n	8016be4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d003      	beq.n	8016be4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d102      	bne.n	8016bea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016be4:	f06f 030f 	mvn.w	r3, #15
 8016be8:	e101      	b.n	8016dee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	2101      	movs	r1, #1
 8016bee:	68b8      	ldr	r0, [r7, #8]
 8016bf0:	f7ff fb5c 	bl	80162ac <etharp_find_entry>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016bf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	da02      	bge.n	8016c06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016c00:	8a7b      	ldrh	r3, [r7, #18]
 8016c02:	b25b      	sxtb	r3, r3
 8016c04:	e0f3      	b.n	8016dee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016c06:	8a7b      	ldrh	r3, [r7, #18]
 8016c08:	2b7e      	cmp	r3, #126	; 0x7e
 8016c0a:	d906      	bls.n	8016c1a <etharp_query+0x7e>
 8016c0c:	4b7a      	ldr	r3, [pc, #488]	; (8016df8 <etharp_query+0x25c>)
 8016c0e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016c12:	497a      	ldr	r1, [pc, #488]	; (8016dfc <etharp_query+0x260>)
 8016c14:	487a      	ldr	r0, [pc, #488]	; (8016e00 <etharp_query+0x264>)
 8016c16:	f002 f847 	bl	8018ca8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016c1a:	8a7b      	ldrh	r3, [r7, #18]
 8016c1c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016c1e:	7c7a      	ldrb	r2, [r7, #17]
 8016c20:	4978      	ldr	r1, [pc, #480]	; (8016e04 <etharp_query+0x268>)
 8016c22:	4613      	mov	r3, r2
 8016c24:	005b      	lsls	r3, r3, #1
 8016c26:	4413      	add	r3, r2
 8016c28:	00db      	lsls	r3, r3, #3
 8016c2a:	440b      	add	r3, r1
 8016c2c:	3314      	adds	r3, #20
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d115      	bne.n	8016c60 <etharp_query+0xc4>
    is_new_entry = 1;
 8016c34:	2301      	movs	r3, #1
 8016c36:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c38:	7c7a      	ldrb	r2, [r7, #17]
 8016c3a:	4972      	ldr	r1, [pc, #456]	; (8016e04 <etharp_query+0x268>)
 8016c3c:	4613      	mov	r3, r2
 8016c3e:	005b      	lsls	r3, r3, #1
 8016c40:	4413      	add	r3, r2
 8016c42:	00db      	lsls	r3, r3, #3
 8016c44:	440b      	add	r3, r1
 8016c46:	3314      	adds	r3, #20
 8016c48:	2201      	movs	r2, #1
 8016c4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016c4c:	7c7a      	ldrb	r2, [r7, #17]
 8016c4e:	496d      	ldr	r1, [pc, #436]	; (8016e04 <etharp_query+0x268>)
 8016c50:	4613      	mov	r3, r2
 8016c52:	005b      	lsls	r3, r3, #1
 8016c54:	4413      	add	r3, r2
 8016c56:	00db      	lsls	r3, r3, #3
 8016c58:	440b      	add	r3, r1
 8016c5a:	3308      	adds	r3, #8
 8016c5c:	68fa      	ldr	r2, [r7, #12]
 8016c5e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016c60:	7c7a      	ldrb	r2, [r7, #17]
 8016c62:	4968      	ldr	r1, [pc, #416]	; (8016e04 <etharp_query+0x268>)
 8016c64:	4613      	mov	r3, r2
 8016c66:	005b      	lsls	r3, r3, #1
 8016c68:	4413      	add	r3, r2
 8016c6a:	00db      	lsls	r3, r3, #3
 8016c6c:	440b      	add	r3, r1
 8016c6e:	3314      	adds	r3, #20
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	2b01      	cmp	r3, #1
 8016c74:	d011      	beq.n	8016c9a <etharp_query+0xfe>
 8016c76:	7c7a      	ldrb	r2, [r7, #17]
 8016c78:	4962      	ldr	r1, [pc, #392]	; (8016e04 <etharp_query+0x268>)
 8016c7a:	4613      	mov	r3, r2
 8016c7c:	005b      	lsls	r3, r3, #1
 8016c7e:	4413      	add	r3, r2
 8016c80:	00db      	lsls	r3, r3, #3
 8016c82:	440b      	add	r3, r1
 8016c84:	3314      	adds	r3, #20
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	2b01      	cmp	r3, #1
 8016c8a:	d806      	bhi.n	8016c9a <etharp_query+0xfe>
 8016c8c:	4b5a      	ldr	r3, [pc, #360]	; (8016df8 <etharp_query+0x25c>)
 8016c8e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016c92:	495d      	ldr	r1, [pc, #372]	; (8016e08 <etharp_query+0x26c>)
 8016c94:	485a      	ldr	r0, [pc, #360]	; (8016e00 <etharp_query+0x264>)
 8016c96:	f002 f807 	bl	8018ca8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016c9a:	6a3b      	ldr	r3, [r7, #32]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d102      	bne.n	8016ca6 <etharp_query+0x10a>
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d10c      	bne.n	8016cc0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016ca6:	68b9      	ldr	r1, [r7, #8]
 8016ca8:	68f8      	ldr	r0, [r7, #12]
 8016caa:	f000 f963 	bl	8016f74 <etharp_request>
 8016cae:	4603      	mov	r3, r0
 8016cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d102      	bne.n	8016cc0 <etharp_query+0x124>
      return result;
 8016cba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016cbe:	e096      	b.n	8016dee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d106      	bne.n	8016cd4 <etharp_query+0x138>
 8016cc6:	4b4c      	ldr	r3, [pc, #304]	; (8016df8 <etharp_query+0x25c>)
 8016cc8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016ccc:	494f      	ldr	r1, [pc, #316]	; (8016e0c <etharp_query+0x270>)
 8016cce:	484c      	ldr	r0, [pc, #304]	; (8016e00 <etharp_query+0x264>)
 8016cd0:	f001 ffea 	bl	8018ca8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016cd4:	7c7a      	ldrb	r2, [r7, #17]
 8016cd6:	494b      	ldr	r1, [pc, #300]	; (8016e04 <etharp_query+0x268>)
 8016cd8:	4613      	mov	r3, r2
 8016cda:	005b      	lsls	r3, r3, #1
 8016cdc:	4413      	add	r3, r2
 8016cde:	00db      	lsls	r3, r3, #3
 8016ce0:	440b      	add	r3, r1
 8016ce2:	3314      	adds	r3, #20
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	2b01      	cmp	r3, #1
 8016ce8:	d917      	bls.n	8016d1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016cea:	4a49      	ldr	r2, [pc, #292]	; (8016e10 <etharp_query+0x274>)
 8016cec:	7c7b      	ldrb	r3, [r7, #17]
 8016cee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016cf0:	7c7a      	ldrb	r2, [r7, #17]
 8016cf2:	4613      	mov	r3, r2
 8016cf4:	005b      	lsls	r3, r3, #1
 8016cf6:	4413      	add	r3, r2
 8016cf8:	00db      	lsls	r3, r3, #3
 8016cfa:	3308      	adds	r3, #8
 8016cfc:	4a41      	ldr	r2, [pc, #260]	; (8016e04 <etharp_query+0x268>)
 8016cfe:	4413      	add	r3, r2
 8016d00:	3304      	adds	r3, #4
 8016d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d06:	9200      	str	r2, [sp, #0]
 8016d08:	697a      	ldr	r2, [r7, #20]
 8016d0a:	6879      	ldr	r1, [r7, #4]
 8016d0c:	68f8      	ldr	r0, [r7, #12]
 8016d0e:	f001 fc93 	bl	8018638 <ethernet_output>
 8016d12:	4603      	mov	r3, r0
 8016d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d18:	e067      	b.n	8016dea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d1a:	7c7a      	ldrb	r2, [r7, #17]
 8016d1c:	4939      	ldr	r1, [pc, #228]	; (8016e04 <etharp_query+0x268>)
 8016d1e:	4613      	mov	r3, r2
 8016d20:	005b      	lsls	r3, r3, #1
 8016d22:	4413      	add	r3, r2
 8016d24:	00db      	lsls	r3, r3, #3
 8016d26:	440b      	add	r3, r1
 8016d28:	3314      	adds	r3, #20
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	d15c      	bne.n	8016dea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016d30:	2300      	movs	r3, #0
 8016d32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d38:	e01c      	b.n	8016d74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d3a:	69fb      	ldr	r3, [r7, #28]
 8016d3c:	895a      	ldrh	r2, [r3, #10]
 8016d3e:	69fb      	ldr	r3, [r7, #28]
 8016d40:	891b      	ldrh	r3, [r3, #8]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d10a      	bne.n	8016d5c <etharp_query+0x1c0>
 8016d46:	69fb      	ldr	r3, [r7, #28]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d006      	beq.n	8016d5c <etharp_query+0x1c0>
 8016d4e:	4b2a      	ldr	r3, [pc, #168]	; (8016df8 <etharp_query+0x25c>)
 8016d50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016d54:	492f      	ldr	r1, [pc, #188]	; (8016e14 <etharp_query+0x278>)
 8016d56:	482a      	ldr	r0, [pc, #168]	; (8016e00 <etharp_query+0x264>)
 8016d58:	f001 ffa6 	bl	8018ca8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016d5c:	69fb      	ldr	r3, [r7, #28]
 8016d5e:	7b1b      	ldrb	r3, [r3, #12]
 8016d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	d002      	beq.n	8016d6e <etharp_query+0x1d2>
        copy_needed = 1;
 8016d68:	2301      	movs	r3, #1
 8016d6a:	61bb      	str	r3, [r7, #24]
        break;
 8016d6c:	e005      	b.n	8016d7a <etharp_query+0x1de>
      }
      p = p->next;
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1df      	bne.n	8016d3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016d7a:	69bb      	ldr	r3, [r7, #24]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d007      	beq.n	8016d90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016d80:	687a      	ldr	r2, [r7, #4]
 8016d82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016d86:	200e      	movs	r0, #14
 8016d88:	f7f6 fbe6 	bl	800d558 <pbuf_clone>
 8016d8c:	61f8      	str	r0, [r7, #28]
 8016d8e:	e004      	b.n	8016d9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016d94:	69f8      	ldr	r0, [r7, #28]
 8016d96:	f7f6 f9e3 	bl	800d160 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d021      	beq.n	8016de4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016da0:	7c7a      	ldrb	r2, [r7, #17]
 8016da2:	4918      	ldr	r1, [pc, #96]	; (8016e04 <etharp_query+0x268>)
 8016da4:	4613      	mov	r3, r2
 8016da6:	005b      	lsls	r3, r3, #1
 8016da8:	4413      	add	r3, r2
 8016daa:	00db      	lsls	r3, r3, #3
 8016dac:	440b      	add	r3, r1
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00a      	beq.n	8016dca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016db4:	7c7a      	ldrb	r2, [r7, #17]
 8016db6:	4913      	ldr	r1, [pc, #76]	; (8016e04 <etharp_query+0x268>)
 8016db8:	4613      	mov	r3, r2
 8016dba:	005b      	lsls	r3, r3, #1
 8016dbc:	4413      	add	r3, r2
 8016dbe:	00db      	lsls	r3, r3, #3
 8016dc0:	440b      	add	r3, r1
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7f6 f925 	bl	800d014 <pbuf_free>
      }
      arp_table[i].q = p;
 8016dca:	7c7a      	ldrb	r2, [r7, #17]
 8016dcc:	490d      	ldr	r1, [pc, #52]	; (8016e04 <etharp_query+0x268>)
 8016dce:	4613      	mov	r3, r2
 8016dd0:	005b      	lsls	r3, r3, #1
 8016dd2:	4413      	add	r3, r2
 8016dd4:	00db      	lsls	r3, r3, #3
 8016dd6:	440b      	add	r3, r1
 8016dd8:	69fa      	ldr	r2, [r7, #28]
 8016dda:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016de2:	e002      	b.n	8016dea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016de4:	23ff      	movs	r3, #255	; 0xff
 8016de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016dea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3728      	adds	r7, #40	; 0x28
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}
 8016df6:	bf00      	nop
 8016df8:	0801cb1c 	.word	0x0801cb1c
 8016dfc:	0801ccc8 	.word	0x0801ccc8
 8016e00:	0801cb94 	.word	0x0801cb94
 8016e04:	2000ccc0 	.word	0x2000ccc0
 8016e08:	0801ccd8 	.word	0x0801ccd8
 8016e0c:	0801ccbc 	.word	0x0801ccbc
 8016e10:	2000cdb0 	.word	0x2000cdb0
 8016e14:	0801cd00 	.word	0x0801cd00

08016e18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b08a      	sub	sp, #40	; 0x28
 8016e1c:	af02      	add	r7, sp, #8
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	607a      	str	r2, [r7, #4]
 8016e24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e26:	2300      	movs	r3, #0
 8016e28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d106      	bne.n	8016e3e <etharp_raw+0x26>
 8016e30:	4b3a      	ldr	r3, [pc, #232]	; (8016f1c <etharp_raw+0x104>)
 8016e32:	f240 4257 	movw	r2, #1111	; 0x457
 8016e36:	493a      	ldr	r1, [pc, #232]	; (8016f20 <etharp_raw+0x108>)
 8016e38:	483a      	ldr	r0, [pc, #232]	; (8016f24 <etharp_raw+0x10c>)
 8016e3a:	f001 ff35 	bl	8018ca8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e42:	211c      	movs	r1, #28
 8016e44:	200e      	movs	r0, #14
 8016e46:	f7f5 fe01 	bl	800ca4c <pbuf_alloc>
 8016e4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016e4c:	69bb      	ldr	r3, [r7, #24]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d102      	bne.n	8016e58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016e52:	f04f 33ff 	mov.w	r3, #4294967295
 8016e56:	e05d      	b.n	8016f14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	895b      	ldrh	r3, [r3, #10]
 8016e5c:	2b1b      	cmp	r3, #27
 8016e5e:	d806      	bhi.n	8016e6e <etharp_raw+0x56>
 8016e60:	4b2e      	ldr	r3, [pc, #184]	; (8016f1c <etharp_raw+0x104>)
 8016e62:	f240 4262 	movw	r2, #1122	; 0x462
 8016e66:	4930      	ldr	r1, [pc, #192]	; (8016f28 <etharp_raw+0x110>)
 8016e68:	482e      	ldr	r0, [pc, #184]	; (8016f24 <etharp_raw+0x10c>)
 8016e6a:	f001 ff1d 	bl	8018ca8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016e6e:	69bb      	ldr	r3, [r7, #24]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016e74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7f4 fcce 	bl	800b818 <lwip_htons>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	461a      	mov	r2, r3
 8016e80:	697b      	ldr	r3, [r7, #20]
 8016e82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e8a:	2b06      	cmp	r3, #6
 8016e8c:	d006      	beq.n	8016e9c <etharp_raw+0x84>
 8016e8e:	4b23      	ldr	r3, [pc, #140]	; (8016f1c <etharp_raw+0x104>)
 8016e90:	f240 4269 	movw	r2, #1129	; 0x469
 8016e94:	4925      	ldr	r1, [pc, #148]	; (8016f2c <etharp_raw+0x114>)
 8016e96:	4823      	ldr	r0, [pc, #140]	; (8016f24 <etharp_raw+0x10c>)
 8016e98:	f001 ff06 	bl	8018ca8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	2206      	movs	r2, #6
 8016ea2:	6839      	ldr	r1, [r7, #0]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f001 fff1 	bl	8018e8c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016eaa:	697b      	ldr	r3, [r7, #20]
 8016eac:	3312      	adds	r3, #18
 8016eae:	2206      	movs	r2, #6
 8016eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f001 ffea 	bl	8018e8c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	330e      	adds	r3, #14
 8016ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ebe:	6812      	ldr	r2, [r2, #0]
 8016ec0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	3318      	adds	r3, #24
 8016ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ec8:	6812      	ldr	r2, [r2, #0]
 8016eca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	701a      	strb	r2, [r3, #0]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f042 0201 	orr.w	r2, r2, #1
 8016ed8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	2200      	movs	r2, #0
 8016ede:	f042 0208 	orr.w	r2, r2, #8
 8016ee2:	709a      	strb	r2, [r3, #2]
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	2206      	movs	r2, #6
 8016eec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016eee:	697b      	ldr	r3, [r7, #20]
 8016ef0:	2204      	movs	r2, #4
 8016ef2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016ef4:	f640 0306 	movw	r3, #2054	; 0x806
 8016ef8:	9300      	str	r3, [sp, #0]
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	68ba      	ldr	r2, [r7, #8]
 8016efe:	69b9      	ldr	r1, [r7, #24]
 8016f00:	68f8      	ldr	r0, [r7, #12]
 8016f02:	f001 fb99 	bl	8018638 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016f06:	69b8      	ldr	r0, [r7, #24]
 8016f08:	f7f6 f884 	bl	800d014 <pbuf_free>
  p = NULL;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f14:	4618      	mov	r0, r3
 8016f16:	3720      	adds	r7, #32
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	0801cb1c 	.word	0x0801cb1c
 8016f20:	0801cc6c 	.word	0x0801cc6c
 8016f24:	0801cb94 	.word	0x0801cb94
 8016f28:	0801cd1c 	.word	0x0801cd1c
 8016f2c:	0801cd50 	.word	0x0801cd50

08016f30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b088      	sub	sp, #32
 8016f34:	af04      	add	r7, sp, #16
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	60b9      	str	r1, [r7, #8]
 8016f3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	9203      	str	r2, [sp, #12]
 8016f50:	68ba      	ldr	r2, [r7, #8]
 8016f52:	9202      	str	r2, [sp, #8]
 8016f54:	4a06      	ldr	r2, [pc, #24]	; (8016f70 <etharp_request_dst+0x40>)
 8016f56:	9201      	str	r2, [sp, #4]
 8016f58:	9300      	str	r3, [sp, #0]
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	687a      	ldr	r2, [r7, #4]
 8016f5e:	68f8      	ldr	r0, [r7, #12]
 8016f60:	f7ff ff5a 	bl	8016e18 <etharp_raw>
 8016f64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3710      	adds	r7, #16
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	0801d334 	.word	0x0801d334

08016f74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016f7e:	4a05      	ldr	r2, [pc, #20]	; (8016f94 <etharp_request+0x20>)
 8016f80:	6839      	ldr	r1, [r7, #0]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f7ff ffd4 	bl	8016f30 <etharp_request_dst>
 8016f88:	4603      	mov	r3, r0
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3708      	adds	r7, #8
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	0801d32c 	.word	0x0801d32c

08016f98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08e      	sub	sp, #56	; 0x38
 8016f9c:	af04      	add	r7, sp, #16
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016fa2:	4b79      	ldr	r3, [pc, #484]	; (8017188 <icmp_input+0x1f0>)
 8016fa4:	689b      	ldr	r3, [r3, #8]
 8016fa6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016faa:	781b      	ldrb	r3, [r3, #0]
 8016fac:	f003 030f 	and.w	r3, r3, #15
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	009b      	lsls	r3, r3, #2
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fba:	2b13      	cmp	r3, #19
 8016fbc:	f240 80cd 	bls.w	801715a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	895b      	ldrh	r3, [r3, #10]
 8016fc4:	2b03      	cmp	r3, #3
 8016fc6:	f240 80ca 	bls.w	801715e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016fd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	f000 80b7 	beq.w	801714c <icmp_input+0x1b4>
 8016fde:	2b08      	cmp	r3, #8
 8016fe0:	f040 80b7 	bne.w	8017152 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016fe4:	4b69      	ldr	r3, [pc, #420]	; (801718c <icmp_input+0x1f4>)
 8016fe6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016fe8:	4b67      	ldr	r3, [pc, #412]	; (8017188 <icmp_input+0x1f0>)
 8016fea:	695b      	ldr	r3, [r3, #20]
 8016fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ff0:	2be0      	cmp	r3, #224	; 0xe0
 8016ff2:	f000 80bb 	beq.w	801716c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016ff6:	4b64      	ldr	r3, [pc, #400]	; (8017188 <icmp_input+0x1f0>)
 8016ff8:	695b      	ldr	r3, [r3, #20]
 8016ffa:	4a63      	ldr	r2, [pc, #396]	; (8017188 <icmp_input+0x1f0>)
 8016ffc:	6812      	ldr	r2, [r2, #0]
 8016ffe:	4611      	mov	r1, r2
 8017000:	4618      	mov	r0, r3
 8017002:	f000 fc0b 	bl	801781c <ip4_addr_isbroadcast_u32>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	f040 80b1 	bne.w	8017170 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	891b      	ldrh	r3, [r3, #8]
 8017012:	2b07      	cmp	r3, #7
 8017014:	f240 80a5 	bls.w	8017162 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801701a:	330e      	adds	r3, #14
 801701c:	4619      	mov	r1, r3
 801701e:	6878      	ldr	r0, [r7, #4]
 8017020:	f7f5 ff62 	bl	800cee8 <pbuf_add_header>
 8017024:	4603      	mov	r3, r0
 8017026:	2b00      	cmp	r3, #0
 8017028:	d04b      	beq.n	80170c2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	891a      	ldrh	r2, [r3, #8]
 801702e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017030:	4413      	add	r3, r2
 8017032:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	891b      	ldrh	r3, [r3, #8]
 8017038:	8b7a      	ldrh	r2, [r7, #26]
 801703a:	429a      	cmp	r2, r3
 801703c:	f0c0 809a 	bcc.w	8017174 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017040:	8b7b      	ldrh	r3, [r7, #26]
 8017042:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017046:	4619      	mov	r1, r3
 8017048:	200e      	movs	r0, #14
 801704a:	f7f5 fcff 	bl	800ca4c <pbuf_alloc>
 801704e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	2b00      	cmp	r3, #0
 8017054:	f000 8090 	beq.w	8017178 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	895b      	ldrh	r3, [r3, #10]
 801705c:	461a      	mov	r2, r3
 801705e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017060:	3308      	adds	r3, #8
 8017062:	429a      	cmp	r2, r3
 8017064:	d203      	bcs.n	801706e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017066:	6978      	ldr	r0, [r7, #20]
 8017068:	f7f5 ffd4 	bl	800d014 <pbuf_free>
          goto icmperr;
 801706c:	e085      	b.n	801717a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017076:	4618      	mov	r0, r3
 8017078:	f001 ff08 	bl	8018e8c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801707c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801707e:	4619      	mov	r1, r3
 8017080:	6978      	ldr	r0, [r7, #20]
 8017082:	f7f5 ff41 	bl	800cf08 <pbuf_remove_header>
 8017086:	4603      	mov	r3, r0
 8017088:	2b00      	cmp	r3, #0
 801708a:	d009      	beq.n	80170a0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801708c:	4b40      	ldr	r3, [pc, #256]	; (8017190 <icmp_input+0x1f8>)
 801708e:	22b6      	movs	r2, #182	; 0xb6
 8017090:	4940      	ldr	r1, [pc, #256]	; (8017194 <icmp_input+0x1fc>)
 8017092:	4841      	ldr	r0, [pc, #260]	; (8017198 <icmp_input+0x200>)
 8017094:	f001 fe08 	bl	8018ca8 <iprintf>
          pbuf_free(r);
 8017098:	6978      	ldr	r0, [r7, #20]
 801709a:	f7f5 ffbb 	bl	800d014 <pbuf_free>
          goto icmperr;
 801709e:	e06c      	b.n	801717a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80170a0:	6879      	ldr	r1, [r7, #4]
 80170a2:	6978      	ldr	r0, [r7, #20]
 80170a4:	f7f6 f8ea 	bl	800d27c <pbuf_copy>
 80170a8:	4603      	mov	r3, r0
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d003      	beq.n	80170b6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80170ae:	6978      	ldr	r0, [r7, #20]
 80170b0:	f7f5 ffb0 	bl	800d014 <pbuf_free>
          goto icmperr;
 80170b4:	e061      	b.n	801717a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f7f5 ffac 	bl	800d014 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80170bc:	697b      	ldr	r3, [r7, #20]
 80170be:	607b      	str	r3, [r7, #4]
 80170c0:	e00f      	b.n	80170e2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80170c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170c4:	330e      	adds	r3, #14
 80170c6:	4619      	mov	r1, r3
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7f5 ff1d 	bl	800cf08 <pbuf_remove_header>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d006      	beq.n	80170e2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80170d4:	4b2e      	ldr	r3, [pc, #184]	; (8017190 <icmp_input+0x1f8>)
 80170d6:	22c7      	movs	r2, #199	; 0xc7
 80170d8:	4930      	ldr	r1, [pc, #192]	; (801719c <icmp_input+0x204>)
 80170da:	482f      	ldr	r0, [pc, #188]	; (8017198 <icmp_input+0x200>)
 80170dc:	f001 fde4 	bl	8018ca8 <iprintf>
          goto icmperr;
 80170e0:	e04b      	b.n	801717a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	685b      	ldr	r3, [r3, #4]
 80170e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80170e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170ea:	4619      	mov	r1, r3
 80170ec:	6878      	ldr	r0, [r7, #4]
 80170ee:	f7f5 fefb 	bl	800cee8 <pbuf_add_header>
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d12b      	bne.n	8017150 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	685b      	ldr	r3, [r3, #4]
 80170fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80170fe:	69fb      	ldr	r3, [r7, #28]
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017106:	4b20      	ldr	r3, [pc, #128]	; (8017188 <icmp_input+0x1f0>)
 8017108:	691a      	ldr	r2, [r3, #16]
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801710e:	693b      	ldr	r3, [r7, #16]
 8017110:	2200      	movs	r2, #0
 8017112:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	2200      	movs	r2, #0
 8017118:	709a      	strb	r2, [r3, #2]
 801711a:	2200      	movs	r2, #0
 801711c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	22ff      	movs	r2, #255	; 0xff
 8017122:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	2200      	movs	r2, #0
 8017128:	729a      	strb	r2, [r3, #10]
 801712a:	2200      	movs	r2, #0
 801712c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	9302      	str	r3, [sp, #8]
 8017132:	2301      	movs	r3, #1
 8017134:	9301      	str	r3, [sp, #4]
 8017136:	2300      	movs	r3, #0
 8017138:	9300      	str	r3, [sp, #0]
 801713a:	23ff      	movs	r3, #255	; 0xff
 801713c:	2200      	movs	r2, #0
 801713e:	69f9      	ldr	r1, [r7, #28]
 8017140:	6878      	ldr	r0, [r7, #4]
 8017142:	f000 fa93 	bl	801766c <ip4_output_if>
 8017146:	4603      	mov	r3, r0
 8017148:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801714a:	e001      	b.n	8017150 <icmp_input+0x1b8>
      break;
 801714c:	bf00      	nop
 801714e:	e000      	b.n	8017152 <icmp_input+0x1ba>
      break;
 8017150:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7f5 ff5e 	bl	800d014 <pbuf_free>
  return;
 8017158:	e013      	b.n	8017182 <icmp_input+0x1ea>
    goto lenerr;
 801715a:	bf00      	nop
 801715c:	e002      	b.n	8017164 <icmp_input+0x1cc>
    goto lenerr;
 801715e:	bf00      	nop
 8017160:	e000      	b.n	8017164 <icmp_input+0x1cc>
        goto lenerr;
 8017162:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017164:	6878      	ldr	r0, [r7, #4]
 8017166:	f7f5 ff55 	bl	800d014 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801716a:	e00a      	b.n	8017182 <icmp_input+0x1ea>
        goto icmperr;
 801716c:	bf00      	nop
 801716e:	e004      	b.n	801717a <icmp_input+0x1e2>
        goto icmperr;
 8017170:	bf00      	nop
 8017172:	e002      	b.n	801717a <icmp_input+0x1e2>
          goto icmperr;
 8017174:	bf00      	nop
 8017176:	e000      	b.n	801717a <icmp_input+0x1e2>
          goto icmperr;
 8017178:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f7f5 ff4a 	bl	800d014 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017180:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017182:	3728      	adds	r7, #40	; 0x28
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	200094b8 	.word	0x200094b8
 801718c:	200094cc 	.word	0x200094cc
 8017190:	0801cd94 	.word	0x0801cd94
 8017194:	0801cdcc 	.word	0x0801cdcc
 8017198:	0801ce04 	.word	0x0801ce04
 801719c:	0801ce2c 	.word	0x0801ce2c

080171a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	460b      	mov	r3, r1
 80171aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80171ac:	78fb      	ldrb	r3, [r7, #3]
 80171ae:	461a      	mov	r2, r3
 80171b0:	2103      	movs	r1, #3
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f000 f814 	bl	80171e0 <icmp_send_response>
}
 80171b8:	bf00      	nop
 80171ba:	3708      	adds	r7, #8
 80171bc:	46bd      	mov	sp, r7
 80171be:	bd80      	pop	{r7, pc}

080171c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]
 80171c8:	460b      	mov	r3, r1
 80171ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80171cc:	78fb      	ldrb	r3, [r7, #3]
 80171ce:	461a      	mov	r2, r3
 80171d0:	210b      	movs	r1, #11
 80171d2:	6878      	ldr	r0, [r7, #4]
 80171d4:	f000 f804 	bl	80171e0 <icmp_send_response>
}
 80171d8:	bf00      	nop
 80171da:	3708      	adds	r7, #8
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b08c      	sub	sp, #48	; 0x30
 80171e4:	af04      	add	r7, sp, #16
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	460b      	mov	r3, r1
 80171ea:	70fb      	strb	r3, [r7, #3]
 80171ec:	4613      	mov	r3, r2
 80171ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80171f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171f4:	2124      	movs	r1, #36	; 0x24
 80171f6:	2022      	movs	r0, #34	; 0x22
 80171f8:	f7f5 fc28 	bl	800ca4c <pbuf_alloc>
 80171fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d04c      	beq.n	801729e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017204:	69fb      	ldr	r3, [r7, #28]
 8017206:	895b      	ldrh	r3, [r3, #10]
 8017208:	2b23      	cmp	r3, #35	; 0x23
 801720a:	d806      	bhi.n	801721a <icmp_send_response+0x3a>
 801720c:	4b26      	ldr	r3, [pc, #152]	; (80172a8 <icmp_send_response+0xc8>)
 801720e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017212:	4926      	ldr	r1, [pc, #152]	; (80172ac <icmp_send_response+0xcc>)
 8017214:	4826      	ldr	r0, [pc, #152]	; (80172b0 <icmp_send_response+0xd0>)
 8017216:	f001 fd47 	bl	8018ca8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	685b      	ldr	r3, [r3, #4]
 8017224:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	78fa      	ldrb	r2, [r7, #3]
 801722a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	78ba      	ldrb	r2, [r7, #2]
 8017230:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017232:	697b      	ldr	r3, [r7, #20]
 8017234:	2200      	movs	r2, #0
 8017236:	711a      	strb	r2, [r3, #4]
 8017238:	2200      	movs	r2, #0
 801723a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801723c:	697b      	ldr	r3, [r7, #20]
 801723e:	2200      	movs	r2, #0
 8017240:	719a      	strb	r2, [r3, #6]
 8017242:	2200      	movs	r2, #0
 8017244:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	f103 0008 	add.w	r0, r3, #8
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	685b      	ldr	r3, [r3, #4]
 8017252:	221c      	movs	r2, #28
 8017254:	4619      	mov	r1, r3
 8017256:	f001 fe19 	bl	8018e8c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801725a:	69bb      	ldr	r3, [r7, #24]
 801725c:	68db      	ldr	r3, [r3, #12]
 801725e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017260:	f107 030c 	add.w	r3, r7, #12
 8017264:	4618      	mov	r0, r3
 8017266:	f000 f825 	bl	80172b4 <ip4_route>
 801726a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801726c:	693b      	ldr	r3, [r7, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d011      	beq.n	8017296 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	2200      	movs	r2, #0
 8017276:	709a      	strb	r2, [r3, #2]
 8017278:	2200      	movs	r2, #0
 801727a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801727c:	f107 020c 	add.w	r2, r7, #12
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	9302      	str	r3, [sp, #8]
 8017284:	2301      	movs	r3, #1
 8017286:	9301      	str	r3, [sp, #4]
 8017288:	2300      	movs	r3, #0
 801728a:	9300      	str	r3, [sp, #0]
 801728c:	23ff      	movs	r3, #255	; 0xff
 801728e:	2100      	movs	r1, #0
 8017290:	69f8      	ldr	r0, [r7, #28]
 8017292:	f000 f9eb 	bl	801766c <ip4_output_if>
  }
  pbuf_free(q);
 8017296:	69f8      	ldr	r0, [r7, #28]
 8017298:	f7f5 febc 	bl	800d014 <pbuf_free>
 801729c:	e000      	b.n	80172a0 <icmp_send_response+0xc0>
    return;
 801729e:	bf00      	nop
}
 80172a0:	3720      	adds	r7, #32
 80172a2:	46bd      	mov	sp, r7
 80172a4:	bd80      	pop	{r7, pc}
 80172a6:	bf00      	nop
 80172a8:	0801cd94 	.word	0x0801cd94
 80172ac:	0801ce60 	.word	0x0801ce60
 80172b0:	0801ce04 	.word	0x0801ce04

080172b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80172b4:	b480      	push	{r7}
 80172b6:	b085      	sub	sp, #20
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80172bc:	4b33      	ldr	r3, [pc, #204]	; (801738c <ip4_route+0xd8>)
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	60fb      	str	r3, [r7, #12]
 80172c2:	e036      	b.n	8017332 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80172ca:	f003 0301 	and.w	r3, r3, #1
 80172ce:	b2db      	uxtb	r3, r3
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d02b      	beq.n	801732c <ip4_route+0x78>
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80172da:	089b      	lsrs	r3, r3, #2
 80172dc:	f003 0301 	and.w	r3, r3, #1
 80172e0:	b2db      	uxtb	r3, r3
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d022      	beq.n	801732c <ip4_route+0x78>
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	3304      	adds	r3, #4
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d01d      	beq.n	801732c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681a      	ldr	r2, [r3, #0]
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	3304      	adds	r3, #4
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	405a      	eors	r2, r3
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	3308      	adds	r3, #8
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	4013      	ands	r3, r2
 8017304:	2b00      	cmp	r3, #0
 8017306:	d101      	bne.n	801730c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	e038      	b.n	801737e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017312:	f003 0302 	and.w	r3, r3, #2
 8017316:	2b00      	cmp	r3, #0
 8017318:	d108      	bne.n	801732c <ip4_route+0x78>
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	681a      	ldr	r2, [r3, #0]
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	330c      	adds	r3, #12
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	429a      	cmp	r2, r3
 8017326:	d101      	bne.n	801732c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	e028      	b.n	801737e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	60fb      	str	r3, [r7, #12]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d1c5      	bne.n	80172c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017338:	4b15      	ldr	r3, [pc, #84]	; (8017390 <ip4_route+0xdc>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d01a      	beq.n	8017376 <ip4_route+0xc2>
 8017340:	4b13      	ldr	r3, [pc, #76]	; (8017390 <ip4_route+0xdc>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017348:	f003 0301 	and.w	r3, r3, #1
 801734c:	2b00      	cmp	r3, #0
 801734e:	d012      	beq.n	8017376 <ip4_route+0xc2>
 8017350:	4b0f      	ldr	r3, [pc, #60]	; (8017390 <ip4_route+0xdc>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017358:	f003 0304 	and.w	r3, r3, #4
 801735c:	2b00      	cmp	r3, #0
 801735e:	d00a      	beq.n	8017376 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017360:	4b0b      	ldr	r3, [pc, #44]	; (8017390 <ip4_route+0xdc>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	3304      	adds	r3, #4
 8017366:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017368:	2b00      	cmp	r3, #0
 801736a:	d004      	beq.n	8017376 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	b2db      	uxtb	r3, r3
 8017372:	2b7f      	cmp	r3, #127	; 0x7f
 8017374:	d101      	bne.n	801737a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017376:	2300      	movs	r3, #0
 8017378:	e001      	b.n	801737e <ip4_route+0xca>
  }

  return netif_default;
 801737a:	4b05      	ldr	r3, [pc, #20]	; (8017390 <ip4_route+0xdc>)
 801737c:	681b      	ldr	r3, [r3, #0]
}
 801737e:	4618      	mov	r0, r3
 8017380:	3714      	adds	r7, #20
 8017382:	46bd      	mov	sp, r7
 8017384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	2000cc20 	.word	0x2000cc20
 8017390:	2000cc24 	.word	0x2000cc24

08017394 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b082      	sub	sp, #8
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80173a2:	f003 0301 	and.w	r3, r3, #1
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d016      	beq.n	80173da <ip4_input_accept+0x46>
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	3304      	adds	r3, #4
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d011      	beq.n	80173da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80173b6:	4b0b      	ldr	r3, [pc, #44]	; (80173e4 <ip4_input_accept+0x50>)
 80173b8:	695a      	ldr	r2, [r3, #20]
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	3304      	adds	r3, #4
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d008      	beq.n	80173d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80173c4:	4b07      	ldr	r3, [pc, #28]	; (80173e4 <ip4_input_accept+0x50>)
 80173c6:	695b      	ldr	r3, [r3, #20]
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	4618      	mov	r0, r3
 80173cc:	f000 fa26 	bl	801781c <ip4_addr_isbroadcast_u32>
 80173d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d001      	beq.n	80173da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80173d6:	2301      	movs	r3, #1
 80173d8:	e000      	b.n	80173dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3708      	adds	r7, #8
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}
 80173e4:	200094b8 	.word	0x200094b8

080173e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b088      	sub	sp, #32
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80173f2:	2301      	movs	r3, #1
 80173f4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80173fc:	69fb      	ldr	r3, [r7, #28]
 80173fe:	781b      	ldrb	r3, [r3, #0]
 8017400:	091b      	lsrs	r3, r3, #4
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b04      	cmp	r3, #4
 8017406:	d004      	beq.n	8017412 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f7f5 fe03 	bl	800d014 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801740e:	2300      	movs	r3, #0
 8017410:	e123      	b.n	801765a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	f003 030f 	and.w	r3, r3, #15
 801741a:	b2db      	uxtb	r3, r3
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	b2db      	uxtb	r3, r3
 8017420:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	885b      	ldrh	r3, [r3, #2]
 8017426:	b29b      	uxth	r3, r3
 8017428:	4618      	mov	r0, r3
 801742a:	f7f4 f9f5 	bl	800b818 <lwip_htons>
 801742e:	4603      	mov	r3, r0
 8017430:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	891b      	ldrh	r3, [r3, #8]
 8017436:	8a3a      	ldrh	r2, [r7, #16]
 8017438:	429a      	cmp	r2, r3
 801743a:	d204      	bcs.n	8017446 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801743c:	8a3b      	ldrh	r3, [r7, #16]
 801743e:	4619      	mov	r1, r3
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f7f5 fc61 	bl	800cd08 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	895b      	ldrh	r3, [r3, #10]
 801744a:	8a7a      	ldrh	r2, [r7, #18]
 801744c:	429a      	cmp	r2, r3
 801744e:	d807      	bhi.n	8017460 <ip4_input+0x78>
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	891b      	ldrh	r3, [r3, #8]
 8017454:	8a3a      	ldrh	r2, [r7, #16]
 8017456:	429a      	cmp	r2, r3
 8017458:	d802      	bhi.n	8017460 <ip4_input+0x78>
 801745a:	8a7b      	ldrh	r3, [r7, #18]
 801745c:	2b13      	cmp	r3, #19
 801745e:	d804      	bhi.n	801746a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017460:	6878      	ldr	r0, [r7, #4]
 8017462:	f7f5 fdd7 	bl	800d014 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017466:	2300      	movs	r3, #0
 8017468:	e0f7      	b.n	801765a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801746a:	69fb      	ldr	r3, [r7, #28]
 801746c:	691b      	ldr	r3, [r3, #16]
 801746e:	4a7d      	ldr	r2, [pc, #500]	; (8017664 <ip4_input+0x27c>)
 8017470:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	68db      	ldr	r3, [r3, #12]
 8017476:	4a7b      	ldr	r2, [pc, #492]	; (8017664 <ip4_input+0x27c>)
 8017478:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801747a:	4b7a      	ldr	r3, [pc, #488]	; (8017664 <ip4_input+0x27c>)
 801747c:	695b      	ldr	r3, [r3, #20]
 801747e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017482:	2be0      	cmp	r3, #224	; 0xe0
 8017484:	d112      	bne.n	80174ac <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801748c:	f003 0301 	and.w	r3, r3, #1
 8017490:	b2db      	uxtb	r3, r3
 8017492:	2b00      	cmp	r3, #0
 8017494:	d007      	beq.n	80174a6 <ip4_input+0xbe>
 8017496:	683b      	ldr	r3, [r7, #0]
 8017498:	3304      	adds	r3, #4
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d002      	beq.n	80174a6 <ip4_input+0xbe>
      netif = inp;
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	61bb      	str	r3, [r7, #24]
 80174a4:	e02a      	b.n	80174fc <ip4_input+0x114>
    } else {
      netif = NULL;
 80174a6:	2300      	movs	r3, #0
 80174a8:	61bb      	str	r3, [r7, #24]
 80174aa:	e027      	b.n	80174fc <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80174ac:	6838      	ldr	r0, [r7, #0]
 80174ae:	f7ff ff71 	bl	8017394 <ip4_input_accept>
 80174b2:	4603      	mov	r3, r0
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d002      	beq.n	80174be <ip4_input+0xd6>
      netif = inp;
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	61bb      	str	r3, [r7, #24]
 80174bc:	e01e      	b.n	80174fc <ip4_input+0x114>
    } else {
      netif = NULL;
 80174be:	2300      	movs	r3, #0
 80174c0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80174c2:	4b68      	ldr	r3, [pc, #416]	; (8017664 <ip4_input+0x27c>)
 80174c4:	695b      	ldr	r3, [r3, #20]
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	2b7f      	cmp	r3, #127	; 0x7f
 80174ca:	d017      	beq.n	80174fc <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80174cc:	4b66      	ldr	r3, [pc, #408]	; (8017668 <ip4_input+0x280>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	61bb      	str	r3, [r7, #24]
 80174d2:	e00e      	b.n	80174f2 <ip4_input+0x10a>
          if (netif == inp) {
 80174d4:	69ba      	ldr	r2, [r7, #24]
 80174d6:	683b      	ldr	r3, [r7, #0]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d006      	beq.n	80174ea <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80174dc:	69b8      	ldr	r0, [r7, #24]
 80174de:	f7ff ff59 	bl	8017394 <ip4_input_accept>
 80174e2:	4603      	mov	r3, r0
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d108      	bne.n	80174fa <ip4_input+0x112>
 80174e8:	e000      	b.n	80174ec <ip4_input+0x104>
            continue;
 80174ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 80174ec:	69bb      	ldr	r3, [r7, #24]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	61bb      	str	r3, [r7, #24]
 80174f2:	69bb      	ldr	r3, [r7, #24]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d1ed      	bne.n	80174d4 <ip4_input+0xec>
 80174f8:	e000      	b.n	80174fc <ip4_input+0x114>
            break;
 80174fa:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80174fc:	69bb      	ldr	r3, [r7, #24]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d111      	bne.n	8017526 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017502:	69fb      	ldr	r3, [r7, #28]
 8017504:	7a5b      	ldrb	r3, [r3, #9]
 8017506:	2b11      	cmp	r3, #17
 8017508:	d10d      	bne.n	8017526 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801750a:	8a7b      	ldrh	r3, [r7, #18]
 801750c:	69fa      	ldr	r2, [r7, #28]
 801750e:	4413      	add	r3, r2
 8017510:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	885b      	ldrh	r3, [r3, #2]
 8017516:	b29b      	uxth	r3, r3
 8017518:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801751c:	d103      	bne.n	8017526 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017522:	2300      	movs	r3, #0
 8017524:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d017      	beq.n	801755c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801752c:	4b4d      	ldr	r3, [pc, #308]	; (8017664 <ip4_input+0x27c>)
 801752e:	691b      	ldr	r3, [r3, #16]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d013      	beq.n	801755c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017534:	4b4b      	ldr	r3, [pc, #300]	; (8017664 <ip4_input+0x27c>)
 8017536:	691b      	ldr	r3, [r3, #16]
 8017538:	6839      	ldr	r1, [r7, #0]
 801753a:	4618      	mov	r0, r3
 801753c:	f000 f96e 	bl	801781c <ip4_addr_isbroadcast_u32>
 8017540:	4603      	mov	r3, r0
 8017542:	2b00      	cmp	r3, #0
 8017544:	d105      	bne.n	8017552 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017546:	4b47      	ldr	r3, [pc, #284]	; (8017664 <ip4_input+0x27c>)
 8017548:	691b      	ldr	r3, [r3, #16]
 801754a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801754e:	2be0      	cmp	r3, #224	; 0xe0
 8017550:	d104      	bne.n	801755c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017552:	6878      	ldr	r0, [r7, #4]
 8017554:	f7f5 fd5e 	bl	800d014 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017558:	2300      	movs	r3, #0
 801755a:	e07e      	b.n	801765a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801755c:	69bb      	ldr	r3, [r7, #24]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d104      	bne.n	801756c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017562:	6878      	ldr	r0, [r7, #4]
 8017564:	f7f5 fd56 	bl	800d014 <pbuf_free>
    return ERR_OK;
 8017568:	2300      	movs	r3, #0
 801756a:	e076      	b.n	801765a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801756c:	69fb      	ldr	r3, [r7, #28]
 801756e:	88db      	ldrh	r3, [r3, #6]
 8017570:	b29b      	uxth	r3, r3
 8017572:	461a      	mov	r2, r3
 8017574:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017578:	4013      	ands	r3, r2
 801757a:	2b00      	cmp	r3, #0
 801757c:	d00b      	beq.n	8017596 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 fc92 	bl	8017ea8 <ip4_reass>
 8017584:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d101      	bne.n	8017590 <ip4_input+0x1a8>
      return ERR_OK;
 801758c:	2300      	movs	r3, #0
 801758e:	e064      	b.n	801765a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	685b      	ldr	r3, [r3, #4]
 8017594:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017596:	4a33      	ldr	r2, [pc, #204]	; (8017664 <ip4_input+0x27c>)
 8017598:	69bb      	ldr	r3, [r7, #24]
 801759a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801759c:	4a31      	ldr	r2, [pc, #196]	; (8017664 <ip4_input+0x27c>)
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80175a2:	4a30      	ldr	r2, [pc, #192]	; (8017664 <ip4_input+0x27c>)
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	781b      	ldrb	r3, [r3, #0]
 80175ac:	f003 030f 	and.w	r3, r3, #15
 80175b0:	b2db      	uxtb	r3, r3
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	b29a      	uxth	r2, r3
 80175b8:	4b2a      	ldr	r3, [pc, #168]	; (8017664 <ip4_input+0x27c>)
 80175ba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80175bc:	8a7b      	ldrh	r3, [r7, #18]
 80175be:	4619      	mov	r1, r3
 80175c0:	6878      	ldr	r0, [r7, #4]
 80175c2:	f7f5 fca1 	bl	800cf08 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80175c6:	69fb      	ldr	r3, [r7, #28]
 80175c8:	7a5b      	ldrb	r3, [r3, #9]
 80175ca:	2b11      	cmp	r3, #17
 80175cc:	d006      	beq.n	80175dc <ip4_input+0x1f4>
 80175ce:	2b11      	cmp	r3, #17
 80175d0:	dc13      	bgt.n	80175fa <ip4_input+0x212>
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	d00c      	beq.n	80175f0 <ip4_input+0x208>
 80175d6:	2b06      	cmp	r3, #6
 80175d8:	d005      	beq.n	80175e6 <ip4_input+0x1fe>
 80175da:	e00e      	b.n	80175fa <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80175dc:	6839      	ldr	r1, [r7, #0]
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7fc fae8 	bl	8013bb4 <udp_input>
        break;
 80175e4:	e026      	b.n	8017634 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80175e6:	6839      	ldr	r1, [r7, #0]
 80175e8:	6878      	ldr	r0, [r7, #4]
 80175ea:	f7f7 fe67 	bl	800f2bc <tcp_input>
        break;
 80175ee:	e021      	b.n	8017634 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80175f0:	6839      	ldr	r1, [r7, #0]
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f7ff fcd0 	bl	8016f98 <icmp_input>
        break;
 80175f8:	e01c      	b.n	8017634 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80175fa:	4b1a      	ldr	r3, [pc, #104]	; (8017664 <ip4_input+0x27c>)
 80175fc:	695b      	ldr	r3, [r3, #20]
 80175fe:	69b9      	ldr	r1, [r7, #24]
 8017600:	4618      	mov	r0, r3
 8017602:	f000 f90b 	bl	801781c <ip4_addr_isbroadcast_u32>
 8017606:	4603      	mov	r3, r0
 8017608:	2b00      	cmp	r3, #0
 801760a:	d10f      	bne.n	801762c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801760c:	4b15      	ldr	r3, [pc, #84]	; (8017664 <ip4_input+0x27c>)
 801760e:	695b      	ldr	r3, [r3, #20]
 8017610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017614:	2be0      	cmp	r3, #224	; 0xe0
 8017616:	d009      	beq.n	801762c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017618:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801761c:	4619      	mov	r1, r3
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f7f5 fce5 	bl	800cfee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017624:	2102      	movs	r1, #2
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f7ff fdba 	bl	80171a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7f5 fcf1 	bl	800d014 <pbuf_free>
        break;
 8017632:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017634:	4b0b      	ldr	r3, [pc, #44]	; (8017664 <ip4_input+0x27c>)
 8017636:	2200      	movs	r2, #0
 8017638:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801763a:	4b0a      	ldr	r3, [pc, #40]	; (8017664 <ip4_input+0x27c>)
 801763c:	2200      	movs	r2, #0
 801763e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017640:	4b08      	ldr	r3, [pc, #32]	; (8017664 <ip4_input+0x27c>)
 8017642:	2200      	movs	r2, #0
 8017644:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017646:	4b07      	ldr	r3, [pc, #28]	; (8017664 <ip4_input+0x27c>)
 8017648:	2200      	movs	r2, #0
 801764a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801764c:	4b05      	ldr	r3, [pc, #20]	; (8017664 <ip4_input+0x27c>)
 801764e:	2200      	movs	r2, #0
 8017650:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017652:	4b04      	ldr	r3, [pc, #16]	; (8017664 <ip4_input+0x27c>)
 8017654:	2200      	movs	r2, #0
 8017656:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017658:	2300      	movs	r3, #0
}
 801765a:	4618      	mov	r0, r3
 801765c:	3720      	adds	r7, #32
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	200094b8 	.word	0x200094b8
 8017668:	2000cc20 	.word	0x2000cc20

0801766c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08a      	sub	sp, #40	; 0x28
 8017670:	af04      	add	r7, sp, #16
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
 8017678:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801767a:	68bb      	ldr	r3, [r7, #8]
 801767c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d009      	beq.n	8017698 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017684:	68bb      	ldr	r3, [r7, #8]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d003      	beq.n	8017692 <ip4_output_if+0x26>
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d102      	bne.n	8017698 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017694:	3304      	adds	r3, #4
 8017696:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017698:	78fa      	ldrb	r2, [r7, #3]
 801769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769c:	9302      	str	r3, [sp, #8]
 801769e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80176a2:	9301      	str	r3, [sp, #4]
 80176a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80176a8:	9300      	str	r3, [sp, #0]
 80176aa:	4613      	mov	r3, r2
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	6979      	ldr	r1, [r7, #20]
 80176b0:	68f8      	ldr	r0, [r7, #12]
 80176b2:	f000 f805 	bl	80176c0 <ip4_output_if_src>
 80176b6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	3718      	adds	r7, #24
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}

080176c0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b088      	sub	sp, #32
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
 80176cc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	7b9b      	ldrb	r3, [r3, #14]
 80176d2:	2b01      	cmp	r3, #1
 80176d4:	d006      	beq.n	80176e4 <ip4_output_if_src+0x24>
 80176d6:	4b4b      	ldr	r3, [pc, #300]	; (8017804 <ip4_output_if_src+0x144>)
 80176d8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80176dc:	494a      	ldr	r1, [pc, #296]	; (8017808 <ip4_output_if_src+0x148>)
 80176de:	484b      	ldr	r0, [pc, #300]	; (801780c <ip4_output_if_src+0x14c>)
 80176e0:	f001 fae2 	bl	8018ca8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d060      	beq.n	80177ac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80176ea:	2314      	movs	r3, #20
 80176ec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80176ee:	2114      	movs	r1, #20
 80176f0:	68f8      	ldr	r0, [r7, #12]
 80176f2:	f7f5 fbf9 	bl	800cee8 <pbuf_add_header>
 80176f6:	4603      	mov	r3, r0
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d002      	beq.n	8017702 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80176fc:	f06f 0301 	mvn.w	r3, #1
 8017700:	e07c      	b.n	80177fc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	895b      	ldrh	r3, [r3, #10]
 801770c:	2b13      	cmp	r3, #19
 801770e:	d806      	bhi.n	801771e <ip4_output_if_src+0x5e>
 8017710:	4b3c      	ldr	r3, [pc, #240]	; (8017804 <ip4_output_if_src+0x144>)
 8017712:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017716:	493e      	ldr	r1, [pc, #248]	; (8017810 <ip4_output_if_src+0x150>)
 8017718:	483c      	ldr	r0, [pc, #240]	; (801780c <ip4_output_if_src+0x14c>)
 801771a:	f001 fac5 	bl	8018ca8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801771e:	69fb      	ldr	r3, [r7, #28]
 8017720:	78fa      	ldrb	r2, [r7, #3]
 8017722:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017724:	69fb      	ldr	r3, [r7, #28]
 8017726:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801772a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681a      	ldr	r2, [r3, #0]
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017734:	8b7b      	ldrh	r3, [r7, #26]
 8017736:	089b      	lsrs	r3, r3, #2
 8017738:	b29b      	uxth	r3, r3
 801773a:	b2db      	uxtb	r3, r3
 801773c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017740:	b2da      	uxtb	r2, r3
 8017742:	69fb      	ldr	r3, [r7, #28]
 8017744:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017746:	69fb      	ldr	r3, [r7, #28]
 8017748:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801774c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	891b      	ldrh	r3, [r3, #8]
 8017752:	4618      	mov	r0, r3
 8017754:	f7f4 f860 	bl	800b818 <lwip_htons>
 8017758:	4603      	mov	r3, r0
 801775a:	461a      	mov	r2, r3
 801775c:	69fb      	ldr	r3, [r7, #28]
 801775e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	2200      	movs	r2, #0
 8017764:	719a      	strb	r2, [r3, #6]
 8017766:	2200      	movs	r2, #0
 8017768:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801776a:	4b2a      	ldr	r3, [pc, #168]	; (8017814 <ip4_output_if_src+0x154>)
 801776c:	881b      	ldrh	r3, [r3, #0]
 801776e:	4618      	mov	r0, r3
 8017770:	f7f4 f852 	bl	800b818 <lwip_htons>
 8017774:	4603      	mov	r3, r0
 8017776:	461a      	mov	r2, r3
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801777c:	4b25      	ldr	r3, [pc, #148]	; (8017814 <ip4_output_if_src+0x154>)
 801777e:	881b      	ldrh	r3, [r3, #0]
 8017780:	3301      	adds	r3, #1
 8017782:	b29a      	uxth	r2, r3
 8017784:	4b23      	ldr	r3, [pc, #140]	; (8017814 <ip4_output_if_src+0x154>)
 8017786:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d104      	bne.n	8017798 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801778e:	4b22      	ldr	r3, [pc, #136]	; (8017818 <ip4_output_if_src+0x158>)
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	69fb      	ldr	r3, [r7, #28]
 8017794:	60da      	str	r2, [r3, #12]
 8017796:	e003      	b.n	80177a0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80177a0:	69fb      	ldr	r3, [r7, #28]
 80177a2:	2200      	movs	r2, #0
 80177a4:	729a      	strb	r2, [r3, #10]
 80177a6:	2200      	movs	r2, #0
 80177a8:	72da      	strb	r2, [r3, #11]
 80177aa:	e00f      	b.n	80177cc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	895b      	ldrh	r3, [r3, #10]
 80177b0:	2b13      	cmp	r3, #19
 80177b2:	d802      	bhi.n	80177ba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80177b4:	f06f 0301 	mvn.w	r3, #1
 80177b8:	e020      	b.n	80177fc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80177c0:	69fb      	ldr	r3, [r7, #28]
 80177c2:	691b      	ldr	r3, [r3, #16]
 80177c4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80177c6:	f107 0314 	add.w	r3, r7, #20
 80177ca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80177cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d00c      	beq.n	80177ee <ip4_output_if_src+0x12e>
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	891a      	ldrh	r2, [r3, #8]
 80177d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80177dc:	429a      	cmp	r2, r3
 80177de:	d906      	bls.n	80177ee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80177e0:	687a      	ldr	r2, [r7, #4]
 80177e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f000 fd53 	bl	8018290 <ip4_frag>
 80177ea:	4603      	mov	r3, r0
 80177ec:	e006      	b.n	80177fc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	695b      	ldr	r3, [r3, #20]
 80177f2:	687a      	ldr	r2, [r7, #4]
 80177f4:	68f9      	ldr	r1, [r7, #12]
 80177f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80177f8:	4798      	blx	r3
 80177fa:	4603      	mov	r3, r0
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3720      	adds	r7, #32
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}
 8017804:	0801ce8c 	.word	0x0801ce8c
 8017808:	0801cec0 	.word	0x0801cec0
 801780c:	0801cecc 	.word	0x0801cecc
 8017810:	0801cef4 	.word	0x0801cef4
 8017814:	2000cdb2 	.word	0x2000cdb2
 8017818:	0801d324 	.word	0x0801d324

0801781c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801781c:	b480      	push	{r7}
 801781e:	b085      	sub	sp, #20
 8017820:	af00      	add	r7, sp, #0
 8017822:	6078      	str	r0, [r7, #4]
 8017824:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017830:	d002      	beq.n	8017838 <ip4_addr_isbroadcast_u32+0x1c>
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d101      	bne.n	801783c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017838:	2301      	movs	r3, #1
 801783a:	e02a      	b.n	8017892 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017842:	f003 0302 	and.w	r3, r3, #2
 8017846:	2b00      	cmp	r3, #0
 8017848:	d101      	bne.n	801784e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801784a:	2300      	movs	r3, #0
 801784c:	e021      	b.n	8017892 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801784e:	683b      	ldr	r3, [r7, #0]
 8017850:	3304      	adds	r3, #4
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	687a      	ldr	r2, [r7, #4]
 8017856:	429a      	cmp	r2, r3
 8017858:	d101      	bne.n	801785e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801785a:	2300      	movs	r3, #0
 801785c:	e019      	b.n	8017892 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801785e:	68fa      	ldr	r2, [r7, #12]
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	3304      	adds	r3, #4
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	405a      	eors	r2, r3
 8017868:	683b      	ldr	r3, [r7, #0]
 801786a:	3308      	adds	r3, #8
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	4013      	ands	r3, r2
 8017870:	2b00      	cmp	r3, #0
 8017872:	d10d      	bne.n	8017890 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	3308      	adds	r3, #8
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	43da      	mvns	r2, r3
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017880:	683b      	ldr	r3, [r7, #0]
 8017882:	3308      	adds	r3, #8
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017888:	429a      	cmp	r2, r3
 801788a:	d101      	bne.n	8017890 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801788c:	2301      	movs	r3, #1
 801788e:	e000      	b.n	8017892 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017890:	2300      	movs	r3, #0
  }
}
 8017892:	4618      	mov	r0, r3
 8017894:	3714      	adds	r7, #20
 8017896:	46bd      	mov	sp, r7
 8017898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789c:	4770      	bx	lr
	...

080178a0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80178aa:	4b12      	ldr	r3, [pc, #72]	; (80178f4 <ip_reass_tmr+0x54>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80178b0:	e018      	b.n	80178e4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	7fdb      	ldrb	r3, [r3, #31]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d00b      	beq.n	80178d2 <ip_reass_tmr+0x32>
      r->timer--;
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	7fdb      	ldrb	r3, [r3, #31]
 80178be:	3b01      	subs	r3, #1
 80178c0:	b2da      	uxtb	r2, r3
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	681b      	ldr	r3, [r3, #0]
 80178ce:	60fb      	str	r3, [r7, #12]
 80178d0:	e008      	b.n	80178e4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80178dc:	68b9      	ldr	r1, [r7, #8]
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f000 f80a 	bl	80178f8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d1e3      	bne.n	80178b2 <ip_reass_tmr+0x12>
    }
  }
}
 80178ea:	bf00      	nop
 80178ec:	bf00      	nop
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	2000cdb4 	.word	0x2000cdb4

080178f8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b088      	sub	sp, #32
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017902:	2300      	movs	r3, #0
 8017904:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017906:	683a      	ldr	r2, [r7, #0]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	429a      	cmp	r2, r3
 801790c:	d105      	bne.n	801791a <ip_reass_free_complete_datagram+0x22>
 801790e:	4b45      	ldr	r3, [pc, #276]	; (8017a24 <ip_reass_free_complete_datagram+0x12c>)
 8017910:	22ab      	movs	r2, #171	; 0xab
 8017912:	4945      	ldr	r1, [pc, #276]	; (8017a28 <ip_reass_free_complete_datagram+0x130>)
 8017914:	4845      	ldr	r0, [pc, #276]	; (8017a2c <ip_reass_free_complete_datagram+0x134>)
 8017916:	f001 f9c7 	bl	8018ca8 <iprintf>
  if (prev != NULL) {
 801791a:	683b      	ldr	r3, [r7, #0]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d00a      	beq.n	8017936 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	687a      	ldr	r2, [r7, #4]
 8017926:	429a      	cmp	r2, r3
 8017928:	d005      	beq.n	8017936 <ip_reass_free_complete_datagram+0x3e>
 801792a:	4b3e      	ldr	r3, [pc, #248]	; (8017a24 <ip_reass_free_complete_datagram+0x12c>)
 801792c:	22ad      	movs	r2, #173	; 0xad
 801792e:	4940      	ldr	r1, [pc, #256]	; (8017a30 <ip_reass_free_complete_datagram+0x138>)
 8017930:	483e      	ldr	r0, [pc, #248]	; (8017a2c <ip_reass_free_complete_datagram+0x134>)
 8017932:	f001 f9b9 	bl	8018ca8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	889b      	ldrh	r3, [r3, #4]
 8017942:	b29b      	uxth	r3, r3
 8017944:	2b00      	cmp	r3, #0
 8017946:	d12a      	bne.n	801799e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	685b      	ldr	r3, [r3, #4]
 801794c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	681a      	ldr	r2, [r3, #0]
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017956:	69bb      	ldr	r3, [r7, #24]
 8017958:	6858      	ldr	r0, [r3, #4]
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	3308      	adds	r3, #8
 801795e:	2214      	movs	r2, #20
 8017960:	4619      	mov	r1, r3
 8017962:	f001 fa93 	bl	8018e8c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017966:	2101      	movs	r1, #1
 8017968:	69b8      	ldr	r0, [r7, #24]
 801796a:	f7ff fc29 	bl	80171c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801796e:	69b8      	ldr	r0, [r7, #24]
 8017970:	f7f5 fbde 	bl	800d130 <pbuf_clen>
 8017974:	4603      	mov	r3, r0
 8017976:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017978:	8bfa      	ldrh	r2, [r7, #30]
 801797a:	8a7b      	ldrh	r3, [r7, #18]
 801797c:	4413      	add	r3, r2
 801797e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017982:	db05      	blt.n	8017990 <ip_reass_free_complete_datagram+0x98>
 8017984:	4b27      	ldr	r3, [pc, #156]	; (8017a24 <ip_reass_free_complete_datagram+0x12c>)
 8017986:	22bc      	movs	r2, #188	; 0xbc
 8017988:	492a      	ldr	r1, [pc, #168]	; (8017a34 <ip_reass_free_complete_datagram+0x13c>)
 801798a:	4828      	ldr	r0, [pc, #160]	; (8017a2c <ip_reass_free_complete_datagram+0x134>)
 801798c:	f001 f98c 	bl	8018ca8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017990:	8bfa      	ldrh	r2, [r7, #30]
 8017992:	8a7b      	ldrh	r3, [r7, #18]
 8017994:	4413      	add	r3, r2
 8017996:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017998:	69b8      	ldr	r0, [r7, #24]
 801799a:	f7f5 fb3b 	bl	800d014 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	685b      	ldr	r3, [r3, #4]
 80179a2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80179a4:	e01f      	b.n	80179e6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80179a6:	69bb      	ldr	r3, [r7, #24]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	617b      	str	r3, [r7, #20]
    pcur = p;
 80179ac:	69bb      	ldr	r3, [r7, #24]
 80179ae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80179b0:	697b      	ldr	r3, [r7, #20]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	f7f5 fbba 	bl	800d130 <pbuf_clen>
 80179bc:	4603      	mov	r3, r0
 80179be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80179c0:	8bfa      	ldrh	r2, [r7, #30]
 80179c2:	8a7b      	ldrh	r3, [r7, #18]
 80179c4:	4413      	add	r3, r2
 80179c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80179ca:	db05      	blt.n	80179d8 <ip_reass_free_complete_datagram+0xe0>
 80179cc:	4b15      	ldr	r3, [pc, #84]	; (8017a24 <ip_reass_free_complete_datagram+0x12c>)
 80179ce:	22cc      	movs	r2, #204	; 0xcc
 80179d0:	4918      	ldr	r1, [pc, #96]	; (8017a34 <ip_reass_free_complete_datagram+0x13c>)
 80179d2:	4816      	ldr	r0, [pc, #88]	; (8017a2c <ip_reass_free_complete_datagram+0x134>)
 80179d4:	f001 f968 	bl	8018ca8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80179d8:	8bfa      	ldrh	r2, [r7, #30]
 80179da:	8a7b      	ldrh	r3, [r7, #18]
 80179dc:	4413      	add	r3, r2
 80179de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80179e0:	68f8      	ldr	r0, [r7, #12]
 80179e2:	f7f5 fb17 	bl	800d014 <pbuf_free>
  while (p != NULL) {
 80179e6:	69bb      	ldr	r3, [r7, #24]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d1dc      	bne.n	80179a6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80179ec:	6839      	ldr	r1, [r7, #0]
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f000 f8c2 	bl	8017b78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80179f4:	4b10      	ldr	r3, [pc, #64]	; (8017a38 <ip_reass_free_complete_datagram+0x140>)
 80179f6:	881b      	ldrh	r3, [r3, #0]
 80179f8:	8bfa      	ldrh	r2, [r7, #30]
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d905      	bls.n	8017a0a <ip_reass_free_complete_datagram+0x112>
 80179fe:	4b09      	ldr	r3, [pc, #36]	; (8017a24 <ip_reass_free_complete_datagram+0x12c>)
 8017a00:	22d2      	movs	r2, #210	; 0xd2
 8017a02:	490e      	ldr	r1, [pc, #56]	; (8017a3c <ip_reass_free_complete_datagram+0x144>)
 8017a04:	4809      	ldr	r0, [pc, #36]	; (8017a2c <ip_reass_free_complete_datagram+0x134>)
 8017a06:	f001 f94f 	bl	8018ca8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017a0a:	4b0b      	ldr	r3, [pc, #44]	; (8017a38 <ip_reass_free_complete_datagram+0x140>)
 8017a0c:	881a      	ldrh	r2, [r3, #0]
 8017a0e:	8bfb      	ldrh	r3, [r7, #30]
 8017a10:	1ad3      	subs	r3, r2, r3
 8017a12:	b29a      	uxth	r2, r3
 8017a14:	4b08      	ldr	r3, [pc, #32]	; (8017a38 <ip_reass_free_complete_datagram+0x140>)
 8017a16:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017a18:	8bfb      	ldrh	r3, [r7, #30]
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3720      	adds	r7, #32
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	0801cf24 	.word	0x0801cf24
 8017a28:	0801cf60 	.word	0x0801cf60
 8017a2c:	0801cf6c 	.word	0x0801cf6c
 8017a30:	0801cf94 	.word	0x0801cf94
 8017a34:	0801cfa8 	.word	0x0801cfa8
 8017a38:	2000cdb8 	.word	0x2000cdb8
 8017a3c:	0801cfc8 	.word	0x0801cfc8

08017a40 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08a      	sub	sp, #40	; 0x28
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
 8017a48:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017a52:	2300      	movs	r3, #0
 8017a54:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017a56:	2300      	movs	r3, #0
 8017a58:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017a5e:	4b28      	ldr	r3, [pc, #160]	; (8017b00 <ip_reass_remove_oldest_datagram+0xc0>)
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017a64:	e030      	b.n	8017ac8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a68:	695a      	ldr	r2, [r3, #20]
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	68db      	ldr	r3, [r3, #12]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	d10c      	bne.n	8017a8c <ip_reass_remove_oldest_datagram+0x4c>
 8017a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a74:	699a      	ldr	r2, [r3, #24]
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	691b      	ldr	r3, [r3, #16]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d106      	bne.n	8017a8c <ip_reass_remove_oldest_datagram+0x4c>
 8017a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a80:	899a      	ldrh	r2, [r3, #12]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	889b      	ldrh	r3, [r3, #4]
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	d014      	beq.n	8017ab6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017a8c:	693b      	ldr	r3, [r7, #16]
 8017a8e:	3301      	adds	r3, #1
 8017a90:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017a92:	6a3b      	ldr	r3, [r7, #32]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d104      	bne.n	8017aa2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a9a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017a9c:	69fb      	ldr	r3, [r7, #28]
 8017a9e:	61bb      	str	r3, [r7, #24]
 8017aa0:	e009      	b.n	8017ab6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aa4:	7fda      	ldrb	r2, [r3, #31]
 8017aa6:	6a3b      	ldr	r3, [r7, #32]
 8017aa8:	7fdb      	ldrb	r3, [r3, #31]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d803      	bhi.n	8017ab6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ab2:	69fb      	ldr	r3, [r7, #28]
 8017ab4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d001      	beq.n	8017ac2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d1cb      	bne.n	8017a66 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017ace:	6a3b      	ldr	r3, [r7, #32]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d008      	beq.n	8017ae6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017ad4:	69b9      	ldr	r1, [r7, #24]
 8017ad6:	6a38      	ldr	r0, [r7, #32]
 8017ad8:	f7ff ff0e 	bl	80178f8 <ip_reass_free_complete_datagram>
 8017adc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017ade:	697a      	ldr	r2, [r7, #20]
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017ae6:	697a      	ldr	r2, [r7, #20]
 8017ae8:	683b      	ldr	r3, [r7, #0]
 8017aea:	429a      	cmp	r2, r3
 8017aec:	da02      	bge.n	8017af4 <ip_reass_remove_oldest_datagram+0xb4>
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	2b01      	cmp	r3, #1
 8017af2:	dcac      	bgt.n	8017a4e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017af4:	697b      	ldr	r3, [r7, #20]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3728      	adds	r7, #40	; 0x28
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	2000cdb4 	.word	0x2000cdb4

08017b04 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b084      	sub	sp, #16
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017b0e:	2004      	movs	r0, #4
 8017b10:	f7f4 fb5a 	bl	800c1c8 <memp_malloc>
 8017b14:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017b16:	68fb      	ldr	r3, [r7, #12]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d110      	bne.n	8017b3e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017b1c:	6839      	ldr	r1, [r7, #0]
 8017b1e:	6878      	ldr	r0, [r7, #4]
 8017b20:	f7ff ff8e 	bl	8017a40 <ip_reass_remove_oldest_datagram>
 8017b24:	4602      	mov	r2, r0
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	4293      	cmp	r3, r2
 8017b2a:	dc03      	bgt.n	8017b34 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017b2c:	2004      	movs	r0, #4
 8017b2e:	f7f4 fb4b 	bl	800c1c8 <memp_malloc>
 8017b32:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017b34:	68fb      	ldr	r3, [r7, #12]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d101      	bne.n	8017b3e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	e016      	b.n	8017b6c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017b3e:	2220      	movs	r2, #32
 8017b40:	2100      	movs	r1, #0
 8017b42:	68f8      	ldr	r0, [r7, #12]
 8017b44:	f001 f915 	bl	8018d72 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	220f      	movs	r2, #15
 8017b4c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017b4e:	4b09      	ldr	r3, [pc, #36]	; (8017b74 <ip_reass_enqueue_new_datagram+0x70>)
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017b56:	4a07      	ldr	r2, [pc, #28]	; (8017b74 <ip_reass_enqueue_new_datagram+0x70>)
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	3308      	adds	r3, #8
 8017b60:	2214      	movs	r2, #20
 8017b62:	6879      	ldr	r1, [r7, #4]
 8017b64:	4618      	mov	r0, r3
 8017b66:	f001 f991 	bl	8018e8c <memcpy>
  return ipr;
 8017b6a:	68fb      	ldr	r3, [r7, #12]
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3710      	adds	r7, #16
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	2000cdb4 	.word	0x2000cdb4

08017b78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b78:	b580      	push	{r7, lr}
 8017b7a:	b082      	sub	sp, #8
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
 8017b80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017b82:	4b10      	ldr	r3, [pc, #64]	; (8017bc4 <ip_reass_dequeue_datagram+0x4c>)
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	687a      	ldr	r2, [r7, #4]
 8017b88:	429a      	cmp	r2, r3
 8017b8a:	d104      	bne.n	8017b96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	4a0c      	ldr	r2, [pc, #48]	; (8017bc4 <ip_reass_dequeue_datagram+0x4c>)
 8017b92:	6013      	str	r3, [r2, #0]
 8017b94:	e00d      	b.n	8017bb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017b96:	683b      	ldr	r3, [r7, #0]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d106      	bne.n	8017baa <ip_reass_dequeue_datagram+0x32>
 8017b9c:	4b0a      	ldr	r3, [pc, #40]	; (8017bc8 <ip_reass_dequeue_datagram+0x50>)
 8017b9e:	f240 1245 	movw	r2, #325	; 0x145
 8017ba2:	490a      	ldr	r1, [pc, #40]	; (8017bcc <ip_reass_dequeue_datagram+0x54>)
 8017ba4:	480a      	ldr	r0, [pc, #40]	; (8017bd0 <ip_reass_dequeue_datagram+0x58>)
 8017ba6:	f001 f87f 	bl	8018ca8 <iprintf>
    prev->next = ipr->next;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681a      	ldr	r2, [r3, #0]
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017bb2:	6879      	ldr	r1, [r7, #4]
 8017bb4:	2004      	movs	r0, #4
 8017bb6:	f7f4 fb7d 	bl	800c2b4 <memp_free>
}
 8017bba:	bf00      	nop
 8017bbc:	3708      	adds	r7, #8
 8017bbe:	46bd      	mov	sp, r7
 8017bc0:	bd80      	pop	{r7, pc}
 8017bc2:	bf00      	nop
 8017bc4:	2000cdb4 	.word	0x2000cdb4
 8017bc8:	0801cf24 	.word	0x0801cf24
 8017bcc:	0801cfec 	.word	0x0801cfec
 8017bd0:	0801cf6c 	.word	0x0801cf6c

08017bd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b08c      	sub	sp, #48	; 0x30
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017be0:	2300      	movs	r3, #0
 8017be2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017be4:	2301      	movs	r3, #1
 8017be6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	685b      	ldr	r3, [r3, #4]
 8017bec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017bee:	69fb      	ldr	r3, [r7, #28]
 8017bf0:	885b      	ldrh	r3, [r3, #2]
 8017bf2:	b29b      	uxth	r3, r3
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7f3 fe0f 	bl	800b818 <lwip_htons>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017bfe:	69fb      	ldr	r3, [r7, #28]
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	f003 030f 	and.w	r3, r3, #15
 8017c06:	b2db      	uxtb	r3, r3
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017c0c:	7e7b      	ldrb	r3, [r7, #25]
 8017c0e:	b29b      	uxth	r3, r3
 8017c10:	8b7a      	ldrh	r2, [r7, #26]
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d202      	bcs.n	8017c1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c16:	f04f 33ff 	mov.w	r3, #4294967295
 8017c1a:	e135      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017c1c:	7e7b      	ldrb	r3, [r7, #25]
 8017c1e:	b29b      	uxth	r3, r3
 8017c20:	8b7a      	ldrh	r2, [r7, #26]
 8017c22:	1ad3      	subs	r3, r2, r3
 8017c24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017c26:	69fb      	ldr	r3, [r7, #28]
 8017c28:	88db      	ldrh	r3, [r3, #6]
 8017c2a:	b29b      	uxth	r3, r3
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7f3 fdf3 	bl	800b818 <lwip_htons>
 8017c32:	4603      	mov	r3, r0
 8017c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c38:	b29b      	uxth	r3, r3
 8017c3a:	00db      	lsls	r3, r3, #3
 8017c3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017c3e:	68bb      	ldr	r3, [r7, #8]
 8017c40:	685b      	ldr	r3, [r3, #4]
 8017c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	2200      	movs	r2, #0
 8017c48:	701a      	strb	r2, [r3, #0]
 8017c4a:	2200      	movs	r2, #0
 8017c4c:	705a      	strb	r2, [r3, #1]
 8017c4e:	2200      	movs	r2, #0
 8017c50:	709a      	strb	r2, [r3, #2]
 8017c52:	2200      	movs	r2, #0
 8017c54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c58:	8afa      	ldrh	r2, [r7, #22]
 8017c5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017c5c:	8afa      	ldrh	r2, [r7, #22]
 8017c5e:	8b7b      	ldrh	r3, [r7, #26]
 8017c60:	4413      	add	r3, r2
 8017c62:	b29a      	uxth	r2, r3
 8017c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c6a:	88db      	ldrh	r3, [r3, #6]
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	8afa      	ldrh	r2, [r7, #22]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d902      	bls.n	8017c7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c74:	f04f 33ff 	mov.w	r3, #4294967295
 8017c78:	e106      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8017c80:	e068      	b.n	8017d54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c8a:	889b      	ldrh	r3, [r3, #4]
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	693b      	ldr	r3, [r7, #16]
 8017c90:	889b      	ldrh	r3, [r3, #4]
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d235      	bcs.n	8017d04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017c9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d020      	beq.n	8017ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ca6:	889b      	ldrh	r3, [r3, #4]
 8017ca8:	b29a      	uxth	r2, r3
 8017caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cac:	88db      	ldrh	r3, [r3, #6]
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d307      	bcc.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cb6:	88db      	ldrh	r3, [r3, #6]
 8017cb8:	b29a      	uxth	r2, r3
 8017cba:	693b      	ldr	r3, [r7, #16]
 8017cbc:	889b      	ldrh	r3, [r3, #4]
 8017cbe:	b29b      	uxth	r3, r3
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	d902      	bls.n	8017cca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8017cc8:	e0de      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ccc:	68ba      	ldr	r2, [r7, #8]
 8017cce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cd2:	88db      	ldrh	r3, [r3, #6]
 8017cd4:	b29a      	uxth	r2, r3
 8017cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cd8:	889b      	ldrh	r3, [r3, #4]
 8017cda:	b29b      	uxth	r3, r3
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	d03d      	beq.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017ce4:	e03a      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce8:	88db      	ldrh	r3, [r3, #6]
 8017cea:	b29a      	uxth	r2, r3
 8017cec:	693b      	ldr	r3, [r7, #16]
 8017cee:	889b      	ldrh	r3, [r3, #4]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d902      	bls.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8017cfa:	e0c5      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	68ba      	ldr	r2, [r7, #8]
 8017d00:	605a      	str	r2, [r3, #4]
      break;
 8017d02:	e02b      	b.n	8017d5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d06:	889b      	ldrh	r3, [r3, #4]
 8017d08:	b29a      	uxth	r2, r3
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	889b      	ldrh	r3, [r3, #4]
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	429a      	cmp	r2, r3
 8017d12:	d102      	bne.n	8017d1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d14:	f04f 33ff 	mov.w	r3, #4294967295
 8017d18:	e0b6      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d1c:	889b      	ldrh	r3, [r3, #4]
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	693b      	ldr	r3, [r7, #16]
 8017d22:	88db      	ldrh	r3, [r3, #6]
 8017d24:	b29b      	uxth	r3, r3
 8017d26:	429a      	cmp	r2, r3
 8017d28:	d202      	bcs.n	8017d30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d2e:	e0ab      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d009      	beq.n	8017d4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d38:	88db      	ldrh	r3, [r3, #6]
 8017d3a:	b29a      	uxth	r2, r3
 8017d3c:	693b      	ldr	r3, [r7, #16]
 8017d3e:	889b      	ldrh	r3, [r3, #4]
 8017d40:	b29b      	uxth	r3, r3
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d001      	beq.n	8017d4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017d4a:	693b      	ldr	r3, [r7, #16]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017d50:	693b      	ldr	r3, [r7, #16]
 8017d52:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d193      	bne.n	8017c82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017d5a:	e000      	b.n	8017d5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017d5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d12d      	bne.n	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	d01c      	beq.n	8017da4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d6c:	88db      	ldrh	r3, [r3, #6]
 8017d6e:	b29a      	uxth	r2, r3
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	889b      	ldrh	r3, [r3, #4]
 8017d74:	b29b      	uxth	r3, r3
 8017d76:	429a      	cmp	r2, r3
 8017d78:	d906      	bls.n	8017d88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017d7a:	4b45      	ldr	r3, [pc, #276]	; (8017e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d7c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017d80:	4944      	ldr	r1, [pc, #272]	; (8017e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017d82:	4845      	ldr	r0, [pc, #276]	; (8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d84:	f000 ff90 	bl	8018ca8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d8a:	68ba      	ldr	r2, [r7, #8]
 8017d8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d90:	88db      	ldrh	r3, [r3, #6]
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d96:	889b      	ldrh	r3, [r3, #4]
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d010      	beq.n	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	623b      	str	r3, [r7, #32]
 8017da2:	e00d      	b.n	8017dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	685b      	ldr	r3, [r3, #4]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d006      	beq.n	8017dba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017dac:	4b38      	ldr	r3, [pc, #224]	; (8017e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017dae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017db2:	493a      	ldr	r1, [pc, #232]	; (8017e9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017db4:	4838      	ldr	r0, [pc, #224]	; (8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017db6:	f000 ff77 	bl	8018ca8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	68ba      	ldr	r2, [r7, #8]
 8017dbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d105      	bne.n	8017dd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	7f9b      	ldrb	r3, [r3, #30]
 8017dca:	f003 0301 	and.w	r3, r3, #1
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	d059      	beq.n	8017e86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017dd2:	6a3b      	ldr	r3, [r7, #32]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d04f      	beq.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d006      	beq.n	8017dee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	685b      	ldr	r3, [r3, #4]
 8017de4:	685b      	ldr	r3, [r3, #4]
 8017de6:	889b      	ldrh	r3, [r3, #4]
 8017de8:	b29b      	uxth	r3, r3
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d002      	beq.n	8017df4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017dee:	2300      	movs	r3, #0
 8017df0:	623b      	str	r3, [r7, #32]
 8017df2:	e041      	b.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017dfe:	e012      	b.n	8017e26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e02:	685b      	ldr	r3, [r3, #4]
 8017e04:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e08:	88db      	ldrh	r3, [r3, #6]
 8017e0a:	b29a      	uxth	r2, r3
 8017e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e0e:	889b      	ldrh	r3, [r3, #4]
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d002      	beq.n	8017e1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	623b      	str	r3, [r7, #32]
            break;
 8017e1a:	e007      	b.n	8017e2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e1e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d1e9      	bne.n	8017e00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017e2c:	6a3b      	ldr	r3, [r7, #32]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d022      	beq.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d106      	bne.n	8017e48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017e3a:	4b15      	ldr	r3, [pc, #84]	; (8017e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e3c:	f240 12df 	movw	r2, #479	; 0x1df
 8017e40:	4917      	ldr	r1, [pc, #92]	; (8017ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017e42:	4815      	ldr	r0, [pc, #84]	; (8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e44:	f000 ff30 	bl	8018ca8 <iprintf>
          LWIP_ASSERT("sanity check",
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d106      	bne.n	8017e62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017e54:	4b0e      	ldr	r3, [pc, #56]	; (8017e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e56:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017e5a:	4911      	ldr	r1, [pc, #68]	; (8017ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017e5c:	480e      	ldr	r0, [pc, #56]	; (8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e5e:	f000 ff23 	bl	8018ca8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d006      	beq.n	8017e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017e6a:	4b09      	ldr	r3, [pc, #36]	; (8017e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017e6c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017e70:	490c      	ldr	r1, [pc, #48]	; (8017ea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017e72:	4809      	ldr	r0, [pc, #36]	; (8017e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017e74:	f000 ff18 	bl	8018ca8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017e78:	6a3b      	ldr	r3, [r7, #32]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	bf14      	ite	ne
 8017e7e:	2301      	movne	r3, #1
 8017e80:	2300      	moveq	r3, #0
 8017e82:	b2db      	uxtb	r3, r3
 8017e84:	e000      	b.n	8017e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017e86:	2300      	movs	r3, #0
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3730      	adds	r7, #48	; 0x30
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}
 8017e90:	0801cf24 	.word	0x0801cf24
 8017e94:	0801d008 	.word	0x0801d008
 8017e98:	0801cf6c 	.word	0x0801cf6c
 8017e9c:	0801d028 	.word	0x0801d028
 8017ea0:	0801d060 	.word	0x0801d060
 8017ea4:	0801d070 	.word	0x0801d070

08017ea8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b08e      	sub	sp, #56	; 0x38
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	685b      	ldr	r3, [r3, #4]
 8017eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	f003 030f 	and.w	r3, r3, #15
 8017ebe:	b2db      	uxtb	r3, r3
 8017ec0:	009b      	lsls	r3, r3, #2
 8017ec2:	b2db      	uxtb	r3, r3
 8017ec4:	2b14      	cmp	r3, #20
 8017ec6:	f040 8171 	bne.w	80181ac <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	88db      	ldrh	r3, [r3, #6]
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7f3 fca1 	bl	800b818 <lwip_htons>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	00db      	lsls	r3, r3, #3
 8017ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ee4:	885b      	ldrh	r3, [r3, #2]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	4618      	mov	r0, r3
 8017eea:	f7f3 fc95 	bl	800b818 <lwip_htons>
 8017eee:	4603      	mov	r3, r0
 8017ef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	f003 030f 	and.w	r3, r3, #15
 8017efa:	b2db      	uxtb	r3, r3
 8017efc:	009b      	lsls	r3, r3, #2
 8017efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017f02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	f0c0 8150 	bcc.w	80181b0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017f18:	1ad3      	subs	r3, r2, r3
 8017f1a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017f1c:	6878      	ldr	r0, [r7, #4]
 8017f1e:	f7f5 f907 	bl	800d130 <pbuf_clen>
 8017f22:	4603      	mov	r3, r0
 8017f24:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017f26:	4b8c      	ldr	r3, [pc, #560]	; (8018158 <ip4_reass+0x2b0>)
 8017f28:	881b      	ldrh	r3, [r3, #0]
 8017f2a:	461a      	mov	r2, r3
 8017f2c:	8c3b      	ldrh	r3, [r7, #32]
 8017f2e:	4413      	add	r3, r2
 8017f30:	2b0a      	cmp	r3, #10
 8017f32:	dd10      	ble.n	8017f56 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017f34:	8c3b      	ldrh	r3, [r7, #32]
 8017f36:	4619      	mov	r1, r3
 8017f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f3a:	f7ff fd81 	bl	8017a40 <ip_reass_remove_oldest_datagram>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	f000 8137 	beq.w	80181b4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017f46:	4b84      	ldr	r3, [pc, #528]	; (8018158 <ip4_reass+0x2b0>)
 8017f48:	881b      	ldrh	r3, [r3, #0]
 8017f4a:	461a      	mov	r2, r3
 8017f4c:	8c3b      	ldrh	r3, [r7, #32]
 8017f4e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017f50:	2b0a      	cmp	r3, #10
 8017f52:	f300 812f 	bgt.w	80181b4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017f56:	4b81      	ldr	r3, [pc, #516]	; (801815c <ip4_reass+0x2b4>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	633b      	str	r3, [r7, #48]	; 0x30
 8017f5c:	e015      	b.n	8017f8a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f60:	695a      	ldr	r2, [r3, #20]
 8017f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f64:	68db      	ldr	r3, [r3, #12]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d10c      	bne.n	8017f84 <ip4_reass+0xdc>
 8017f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f6c:	699a      	ldr	r2, [r3, #24]
 8017f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f70:	691b      	ldr	r3, [r3, #16]
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d106      	bne.n	8017f84 <ip4_reass+0xdc>
 8017f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f78:	899a      	ldrh	r2, [r3, #12]
 8017f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7c:	889b      	ldrh	r3, [r3, #4]
 8017f7e:	b29b      	uxth	r3, r3
 8017f80:	429a      	cmp	r2, r3
 8017f82:	d006      	beq.n	8017f92 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	633b      	str	r3, [r7, #48]	; 0x30
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1e6      	bne.n	8017f5e <ip4_reass+0xb6>
 8017f90:	e000      	b.n	8017f94 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017f92:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d109      	bne.n	8017fae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017f9a:	8c3b      	ldrh	r3, [r7, #32]
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017fa0:	f7ff fdb0 	bl	8017b04 <ip_reass_enqueue_new_datagram>
 8017fa4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d11c      	bne.n	8017fe6 <ip4_reass+0x13e>
      goto nullreturn;
 8017fac:	e105      	b.n	80181ba <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb0:	88db      	ldrh	r3, [r3, #6]
 8017fb2:	b29b      	uxth	r3, r3
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7f3 fc2f 	bl	800b818 <lwip_htons>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d110      	bne.n	8017fe6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc6:	89db      	ldrh	r3, [r3, #14]
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7f3 fc25 	bl	800b818 <lwip_htons>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d006      	beq.n	8017fe6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fda:	3308      	adds	r3, #8
 8017fdc:	2214      	movs	r2, #20
 8017fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f000 ff53 	bl	8018e8c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fe8:	88db      	ldrh	r3, [r3, #6]
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	f003 0320 	and.w	r3, r3, #32
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	bf0c      	ite	eq
 8017ff4:	2301      	moveq	r3, #1
 8017ff6:	2300      	movne	r3, #0
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00e      	beq.n	8018020 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018002:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018004:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018006:	4413      	add	r3, r2
 8018008:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801800a:	8b7a      	ldrh	r2, [r7, #26]
 801800c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801800e:	429a      	cmp	r2, r3
 8018010:	f0c0 80a0 	bcc.w	8018154 <ip4_reass+0x2ac>
 8018014:	8b7b      	ldrh	r3, [r7, #26]
 8018016:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801801a:	4293      	cmp	r3, r2
 801801c:	f200 809a 	bhi.w	8018154 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018020:	69fa      	ldr	r2, [r7, #28]
 8018022:	6879      	ldr	r1, [r7, #4]
 8018024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018026:	f7ff fdd5 	bl	8017bd4 <ip_reass_chain_frag_into_datagram_and_validate>
 801802a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018032:	f000 809b 	beq.w	801816c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018036:	4b48      	ldr	r3, [pc, #288]	; (8018158 <ip4_reass+0x2b0>)
 8018038:	881a      	ldrh	r2, [r3, #0]
 801803a:	8c3b      	ldrh	r3, [r7, #32]
 801803c:	4413      	add	r3, r2
 801803e:	b29a      	uxth	r2, r3
 8018040:	4b45      	ldr	r3, [pc, #276]	; (8018158 <ip4_reass+0x2b0>)
 8018042:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018044:	69fb      	ldr	r3, [r7, #28]
 8018046:	2b00      	cmp	r3, #0
 8018048:	d00d      	beq.n	8018066 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801804a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801804c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801804e:	4413      	add	r3, r2
 8018050:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018054:	8a7a      	ldrh	r2, [r7, #18]
 8018056:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801805a:	7f9b      	ldrb	r3, [r3, #30]
 801805c:	f043 0301 	orr.w	r3, r3, #1
 8018060:	b2da      	uxtb	r2, r3
 8018062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018064:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018066:	697b      	ldr	r3, [r7, #20]
 8018068:	2b01      	cmp	r3, #1
 801806a:	d171      	bne.n	8018150 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801806c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801806e:	8b9b      	ldrh	r3, [r3, #28]
 8018070:	3314      	adds	r3, #20
 8018072:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018076:	685b      	ldr	r3, [r3, #4]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018080:	685b      	ldr	r3, [r3, #4]
 8018082:	685b      	ldr	r3, [r3, #4]
 8018084:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018088:	3308      	adds	r3, #8
 801808a:	2214      	movs	r2, #20
 801808c:	4619      	mov	r1, r3
 801808e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018090:	f000 fefc 	bl	8018e8c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018094:	8a3b      	ldrh	r3, [r7, #16]
 8018096:	4618      	mov	r0, r3
 8018098:	f7f3 fbbe 	bl	800b818 <lwip_htons>
 801809c:	4603      	mov	r3, r0
 801809e:	461a      	mov	r2, r3
 80180a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80180a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a6:	2200      	movs	r2, #0
 80180a8:	719a      	strb	r2, [r3, #6]
 80180aa:	2200      	movs	r2, #0
 80180ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80180ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b0:	2200      	movs	r2, #0
 80180b2:	729a      	strb	r2, [r3, #10]
 80180b4:	2200      	movs	r2, #0
 80180b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80180b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ba:	685b      	ldr	r3, [r3, #4]
 80180bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80180be:	e00d      	b.n	80180dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80180c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80180c6:	2114      	movs	r1, #20
 80180c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80180ca:	f7f4 ff1d 	bl	800cf08 <pbuf_remove_header>
      pbuf_cat(p, r);
 80180ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80180d0:	6878      	ldr	r0, [r7, #4]
 80180d2:	f7f5 f86d 	bl	800d1b0 <pbuf_cat>
      r = iprh->next_pbuf;
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80180dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d1ee      	bne.n	80180c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80180e2:	4b1e      	ldr	r3, [pc, #120]	; (801815c <ip4_reass+0x2b4>)
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80180e8:	429a      	cmp	r2, r3
 80180ea:	d102      	bne.n	80180f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80180ec:	2300      	movs	r3, #0
 80180ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180f0:	e010      	b.n	8018114 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80180f2:	4b1a      	ldr	r3, [pc, #104]	; (801815c <ip4_reass+0x2b4>)
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80180f8:	e007      	b.n	801810a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80180fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018100:	429a      	cmp	r2, r3
 8018102:	d006      	beq.n	8018112 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	62fb      	str	r3, [r7, #44]	; 0x2c
 801810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1f4      	bne.n	80180fa <ip4_reass+0x252>
 8018110:	e000      	b.n	8018114 <ip4_reass+0x26c>
          break;
 8018112:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018118:	f7ff fd2e 	bl	8017b78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801811c:	6878      	ldr	r0, [r7, #4]
 801811e:	f7f5 f807 	bl	800d130 <pbuf_clen>
 8018122:	4603      	mov	r3, r0
 8018124:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018126:	4b0c      	ldr	r3, [pc, #48]	; (8018158 <ip4_reass+0x2b0>)
 8018128:	881b      	ldrh	r3, [r3, #0]
 801812a:	8c3a      	ldrh	r2, [r7, #32]
 801812c:	429a      	cmp	r2, r3
 801812e:	d906      	bls.n	801813e <ip4_reass+0x296>
 8018130:	4b0b      	ldr	r3, [pc, #44]	; (8018160 <ip4_reass+0x2b8>)
 8018132:	f240 229b 	movw	r2, #667	; 0x29b
 8018136:	490b      	ldr	r1, [pc, #44]	; (8018164 <ip4_reass+0x2bc>)
 8018138:	480b      	ldr	r0, [pc, #44]	; (8018168 <ip4_reass+0x2c0>)
 801813a:	f000 fdb5 	bl	8018ca8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801813e:	4b06      	ldr	r3, [pc, #24]	; (8018158 <ip4_reass+0x2b0>)
 8018140:	881a      	ldrh	r2, [r3, #0]
 8018142:	8c3b      	ldrh	r3, [r7, #32]
 8018144:	1ad3      	subs	r3, r2, r3
 8018146:	b29a      	uxth	r2, r3
 8018148:	4b03      	ldr	r3, [pc, #12]	; (8018158 <ip4_reass+0x2b0>)
 801814a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	e038      	b.n	80181c2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018150:	2300      	movs	r3, #0
 8018152:	e036      	b.n	80181c2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018154:	bf00      	nop
 8018156:	e00a      	b.n	801816e <ip4_reass+0x2c6>
 8018158:	2000cdb8 	.word	0x2000cdb8
 801815c:	2000cdb4 	.word	0x2000cdb4
 8018160:	0801cf24 	.word	0x0801cf24
 8018164:	0801d094 	.word	0x0801d094
 8018168:	0801cf6c 	.word	0x0801cf6c
    goto nullreturn_ipr;
 801816c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018170:	2b00      	cmp	r3, #0
 8018172:	d106      	bne.n	8018182 <ip4_reass+0x2da>
 8018174:	4b15      	ldr	r3, [pc, #84]	; (80181cc <ip4_reass+0x324>)
 8018176:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801817a:	4915      	ldr	r1, [pc, #84]	; (80181d0 <ip4_reass+0x328>)
 801817c:	4815      	ldr	r0, [pc, #84]	; (80181d4 <ip4_reass+0x32c>)
 801817e:	f000 fd93 	bl	8018ca8 <iprintf>
  if (ipr->p == NULL) {
 8018182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018184:	685b      	ldr	r3, [r3, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d116      	bne.n	80181b8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801818a:	4b13      	ldr	r3, [pc, #76]	; (80181d8 <ip4_reass+0x330>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018190:	429a      	cmp	r2, r3
 8018192:	d006      	beq.n	80181a2 <ip4_reass+0x2fa>
 8018194:	4b0d      	ldr	r3, [pc, #52]	; (80181cc <ip4_reass+0x324>)
 8018196:	f240 22ab 	movw	r2, #683	; 0x2ab
 801819a:	4910      	ldr	r1, [pc, #64]	; (80181dc <ip4_reass+0x334>)
 801819c:	480d      	ldr	r0, [pc, #52]	; (80181d4 <ip4_reass+0x32c>)
 801819e:	f000 fd83 	bl	8018ca8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80181a2:	2100      	movs	r1, #0
 80181a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181a6:	f7ff fce7 	bl	8017b78 <ip_reass_dequeue_datagram>
 80181aa:	e006      	b.n	80181ba <ip4_reass+0x312>
    goto nullreturn;
 80181ac:	bf00      	nop
 80181ae:	e004      	b.n	80181ba <ip4_reass+0x312>
    goto nullreturn;
 80181b0:	bf00      	nop
 80181b2:	e002      	b.n	80181ba <ip4_reass+0x312>
      goto nullreturn;
 80181b4:	bf00      	nop
 80181b6:	e000      	b.n	80181ba <ip4_reass+0x312>
  }

nullreturn:
 80181b8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7f4 ff2a 	bl	800d014 <pbuf_free>
  return NULL;
 80181c0:	2300      	movs	r3, #0
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3738      	adds	r7, #56	; 0x38
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	0801cf24 	.word	0x0801cf24
 80181d0:	0801d0b0 	.word	0x0801d0b0
 80181d4:	0801cf6c 	.word	0x0801cf6c
 80181d8:	2000cdb4 	.word	0x2000cdb4
 80181dc:	0801d0bc 	.word	0x0801d0bc

080181e0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80181e4:	2005      	movs	r0, #5
 80181e6:	f7f3 ffef 	bl	800c1c8 <memp_malloc>
 80181ea:	4603      	mov	r3, r0
}
 80181ec:	4618      	mov	r0, r3
 80181ee:	bd80      	pop	{r7, pc}

080181f0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d106      	bne.n	801820c <ip_frag_free_pbuf_custom_ref+0x1c>
 80181fe:	4b07      	ldr	r3, [pc, #28]	; (801821c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018200:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018204:	4906      	ldr	r1, [pc, #24]	; (8018220 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018206:	4807      	ldr	r0, [pc, #28]	; (8018224 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018208:	f000 fd4e 	bl	8018ca8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801820c:	6879      	ldr	r1, [r7, #4]
 801820e:	2005      	movs	r0, #5
 8018210:	f7f4 f850 	bl	800c2b4 <memp_free>
}
 8018214:	bf00      	nop
 8018216:	3708      	adds	r7, #8
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	0801cf24 	.word	0x0801cf24
 8018220:	0801d0dc 	.word	0x0801d0dc
 8018224:	0801cf6c 	.word	0x0801cf6c

08018228 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b084      	sub	sp, #16
 801822c:	af00      	add	r7, sp, #0
 801822e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d106      	bne.n	8018248 <ipfrag_free_pbuf_custom+0x20>
 801823a:	4b11      	ldr	r3, [pc, #68]	; (8018280 <ipfrag_free_pbuf_custom+0x58>)
 801823c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018240:	4910      	ldr	r1, [pc, #64]	; (8018284 <ipfrag_free_pbuf_custom+0x5c>)
 8018242:	4811      	ldr	r0, [pc, #68]	; (8018288 <ipfrag_free_pbuf_custom+0x60>)
 8018244:	f000 fd30 	bl	8018ca8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018248:	68fa      	ldr	r2, [r7, #12]
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	429a      	cmp	r2, r3
 801824e:	d006      	beq.n	801825e <ipfrag_free_pbuf_custom+0x36>
 8018250:	4b0b      	ldr	r3, [pc, #44]	; (8018280 <ipfrag_free_pbuf_custom+0x58>)
 8018252:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018256:	490d      	ldr	r1, [pc, #52]	; (801828c <ipfrag_free_pbuf_custom+0x64>)
 8018258:	480b      	ldr	r0, [pc, #44]	; (8018288 <ipfrag_free_pbuf_custom+0x60>)
 801825a:	f000 fd25 	bl	8018ca8 <iprintf>
  if (pcr->original != NULL) {
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	695b      	ldr	r3, [r3, #20]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d004      	beq.n	8018270 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018266:	68fb      	ldr	r3, [r7, #12]
 8018268:	695b      	ldr	r3, [r3, #20]
 801826a:	4618      	mov	r0, r3
 801826c:	f7f4 fed2 	bl	800d014 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018270:	68f8      	ldr	r0, [r7, #12]
 8018272:	f7ff ffbd 	bl	80181f0 <ip_frag_free_pbuf_custom_ref>
}
 8018276:	bf00      	nop
 8018278:	3710      	adds	r7, #16
 801827a:	46bd      	mov	sp, r7
 801827c:	bd80      	pop	{r7, pc}
 801827e:	bf00      	nop
 8018280:	0801cf24 	.word	0x0801cf24
 8018284:	0801d0e8 	.word	0x0801d0e8
 8018288:	0801cf6c 	.word	0x0801cf6c
 801828c:	0801d0f4 	.word	0x0801d0f4

08018290 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b094      	sub	sp, #80	; 0x50
 8018294:	af02      	add	r7, sp, #8
 8018296:	60f8      	str	r0, [r7, #12]
 8018298:	60b9      	str	r1, [r7, #8]
 801829a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801829c:	2300      	movs	r3, #0
 801829e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182a6:	3b14      	subs	r3, #20
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	da00      	bge.n	80182ae <ip4_frag+0x1e>
 80182ac:	3307      	adds	r3, #7
 80182ae:	10db      	asrs	r3, r3, #3
 80182b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80182b2:	2314      	movs	r3, #20
 80182b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80182bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182be:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80182c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	f003 030f 	and.w	r3, r3, #15
 80182c8:	b2db      	uxtb	r3, r3
 80182ca:	009b      	lsls	r3, r3, #2
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	2b14      	cmp	r3, #20
 80182d0:	d002      	beq.n	80182d8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80182d2:	f06f 0305 	mvn.w	r3, #5
 80182d6:	e110      	b.n	80184fa <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	895b      	ldrh	r3, [r3, #10]
 80182dc:	2b13      	cmp	r3, #19
 80182de:	d809      	bhi.n	80182f4 <ip4_frag+0x64>
 80182e0:	4b88      	ldr	r3, [pc, #544]	; (8018504 <ip4_frag+0x274>)
 80182e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80182e6:	4988      	ldr	r1, [pc, #544]	; (8018508 <ip4_frag+0x278>)
 80182e8:	4888      	ldr	r0, [pc, #544]	; (801850c <ip4_frag+0x27c>)
 80182ea:	f000 fcdd 	bl	8018ca8 <iprintf>
 80182ee:	f06f 0305 	mvn.w	r3, #5
 80182f2:	e102      	b.n	80184fa <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80182f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f6:	88db      	ldrh	r3, [r3, #6]
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7f3 fa8c 	bl	800b818 <lwip_htons>
 8018300:	4603      	mov	r3, r0
 8018302:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018304:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018306:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801830a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801830e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018314:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	891b      	ldrh	r3, [r3, #8]
 801831a:	3b14      	subs	r3, #20
 801831c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018320:	e0e1      	b.n	80184e6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018322:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018324:	00db      	lsls	r3, r3, #3
 8018326:	b29b      	uxth	r3, r3
 8018328:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801832c:	4293      	cmp	r3, r2
 801832e:	bf28      	it	cs
 8018330:	4613      	movcs	r3, r2
 8018332:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018334:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018338:	2114      	movs	r1, #20
 801833a:	200e      	movs	r0, #14
 801833c:	f7f4 fb86 	bl	800ca4c <pbuf_alloc>
 8018340:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018344:	2b00      	cmp	r3, #0
 8018346:	f000 80d5 	beq.w	80184f4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801834a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801834c:	895b      	ldrh	r3, [r3, #10]
 801834e:	2b13      	cmp	r3, #19
 8018350:	d806      	bhi.n	8018360 <ip4_frag+0xd0>
 8018352:	4b6c      	ldr	r3, [pc, #432]	; (8018504 <ip4_frag+0x274>)
 8018354:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018358:	496d      	ldr	r1, [pc, #436]	; (8018510 <ip4_frag+0x280>)
 801835a:	486c      	ldr	r0, [pc, #432]	; (801850c <ip4_frag+0x27c>)
 801835c:	f000 fca4 	bl	8018ca8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018362:	685b      	ldr	r3, [r3, #4]
 8018364:	2214      	movs	r2, #20
 8018366:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018368:	4618      	mov	r0, r3
 801836a:	f000 fd8f 	bl	8018e8c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018376:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801837a:	e064      	b.n	8018446 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	895a      	ldrh	r2, [r3, #10]
 8018380:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018382:	1ad3      	subs	r3, r2, r3
 8018384:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	895b      	ldrh	r3, [r3, #10]
 801838a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801838c:	429a      	cmp	r2, r3
 801838e:	d906      	bls.n	801839e <ip4_frag+0x10e>
 8018390:	4b5c      	ldr	r3, [pc, #368]	; (8018504 <ip4_frag+0x274>)
 8018392:	f240 322d 	movw	r2, #813	; 0x32d
 8018396:	495f      	ldr	r1, [pc, #380]	; (8018514 <ip4_frag+0x284>)
 8018398:	485c      	ldr	r0, [pc, #368]	; (801850c <ip4_frag+0x27c>)
 801839a:	f000 fc85 	bl	8018ca8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801839e:	8bfa      	ldrh	r2, [r7, #30]
 80183a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80183a4:	4293      	cmp	r3, r2
 80183a6:	bf28      	it	cs
 80183a8:	4613      	movcs	r3, r2
 80183aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80183ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d105      	bne.n	80183c2 <ip4_frag+0x132>
        poff = 0;
 80183b6:	2300      	movs	r3, #0
 80183b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	60fb      	str	r3, [r7, #12]
        continue;
 80183c0:	e041      	b.n	8018446 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80183c2:	f7ff ff0d 	bl	80181e0 <ip_frag_alloc_pbuf_custom_ref>
 80183c6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80183c8:	69bb      	ldr	r3, [r7, #24]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d103      	bne.n	80183d6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80183ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183d0:	f7f4 fe20 	bl	800d014 <pbuf_free>
        goto memerr;
 80183d4:	e08f      	b.n	80184f6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80183d6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80183dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80183de:	4413      	add	r3, r2
 80183e0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80183e4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80183e8:	9201      	str	r2, [sp, #4]
 80183ea:	9300      	str	r3, [sp, #0]
 80183ec:	4603      	mov	r3, r0
 80183ee:	2241      	movs	r2, #65	; 0x41
 80183f0:	2000      	movs	r0, #0
 80183f2:	f7f4 fc55 	bl	800cca0 <pbuf_alloced_custom>
 80183f6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80183f8:	697b      	ldr	r3, [r7, #20]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d106      	bne.n	801840c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80183fe:	69b8      	ldr	r0, [r7, #24]
 8018400:	f7ff fef6 	bl	80181f0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018406:	f7f4 fe05 	bl	800d014 <pbuf_free>
        goto memerr;
 801840a:	e074      	b.n	80184f6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801840c:	68f8      	ldr	r0, [r7, #12]
 801840e:	f7f4 fea7 	bl	800d160 <pbuf_ref>
      pcr->original = p;
 8018412:	69bb      	ldr	r3, [r7, #24]
 8018414:	68fa      	ldr	r2, [r7, #12]
 8018416:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018418:	69bb      	ldr	r3, [r7, #24]
 801841a:	4a3f      	ldr	r2, [pc, #252]	; (8018518 <ip4_frag+0x288>)
 801841c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801841e:	6979      	ldr	r1, [r7, #20]
 8018420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018422:	f7f4 fec5 	bl	800d1b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018426:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801842a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018434:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018438:	2b00      	cmp	r3, #0
 801843a:	d004      	beq.n	8018446 <ip4_frag+0x1b6>
        poff = 0;
 801843c:	2300      	movs	r3, #0
 801843e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801844a:	2b00      	cmp	r3, #0
 801844c:	d196      	bne.n	801837c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801844e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018454:	4413      	add	r3, r2
 8018456:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018458:	68bb      	ldr	r3, [r7, #8]
 801845a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801845c:	f1a3 0213 	sub.w	r2, r3, #19
 8018460:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018464:	429a      	cmp	r2, r3
 8018466:	bfcc      	ite	gt
 8018468:	2301      	movgt	r3, #1
 801846a:	2300      	movle	r3, #0
 801846c:	b2db      	uxtb	r3, r3
 801846e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018470:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018478:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801847a:	6a3b      	ldr	r3, [r7, #32]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d002      	beq.n	8018486 <ip4_frag+0x1f6>
 8018480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018482:	2b00      	cmp	r3, #0
 8018484:	d003      	beq.n	801848e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018488:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801848c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801848e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018490:	4618      	mov	r0, r3
 8018492:	f7f3 f9c1 	bl	800b818 <lwip_htons>
 8018496:	4603      	mov	r3, r0
 8018498:	461a      	mov	r2, r3
 801849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801849e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80184a0:	3314      	adds	r3, #20
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	4618      	mov	r0, r3
 80184a6:	f7f3 f9b7 	bl	800b818 <lwip_htons>
 80184aa:	4603      	mov	r3, r0
 80184ac:	461a      	mov	r2, r3
 80184ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80184b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b4:	2200      	movs	r2, #0
 80184b6:	729a      	strb	r2, [r3, #10]
 80184b8:	2200      	movs	r2, #0
 80184ba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	695b      	ldr	r3, [r3, #20]
 80184c0:	687a      	ldr	r2, [r7, #4]
 80184c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184c4:	68b8      	ldr	r0, [r7, #8]
 80184c6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80184c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184ca:	f7f4 fda3 	bl	800d014 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80184ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80184d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80184d4:	1ad3      	subs	r3, r2, r3
 80184d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80184da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80184de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80184e0:	4413      	add	r3, r2
 80184e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80184e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	f47f af19 	bne.w	8018322 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80184f0:	2300      	movs	r3, #0
 80184f2:	e002      	b.n	80184fa <ip4_frag+0x26a>
      goto memerr;
 80184f4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80184f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3748      	adds	r7, #72	; 0x48
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	0801cf24 	.word	0x0801cf24
 8018508:	0801d100 	.word	0x0801d100
 801850c:	0801cf6c 	.word	0x0801cf6c
 8018510:	0801d11c 	.word	0x0801d11c
 8018514:	0801d13c 	.word	0x0801d13c
 8018518:	08018229 	.word	0x08018229

0801851c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b086      	sub	sp, #24
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018526:	230e      	movs	r3, #14
 8018528:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	895b      	ldrh	r3, [r3, #10]
 801852e:	2b0e      	cmp	r3, #14
 8018530:	d96e      	bls.n	8018610 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	7bdb      	ldrb	r3, [r3, #15]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d106      	bne.n	8018548 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801853a:	683b      	ldr	r3, [r7, #0]
 801853c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018540:	3301      	adds	r3, #1
 8018542:	b2da      	uxtb	r2, r3
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	685b      	ldr	r3, [r3, #4]
 801854c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801854e:	693b      	ldr	r3, [r7, #16]
 8018550:	7b1a      	ldrb	r2, [r3, #12]
 8018552:	7b5b      	ldrb	r3, [r3, #13]
 8018554:	021b      	lsls	r3, r3, #8
 8018556:	4313      	orrs	r3, r2
 8018558:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801855a:	693b      	ldr	r3, [r7, #16]
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	f003 0301 	and.w	r3, r3, #1
 8018562:	2b00      	cmp	r3, #0
 8018564:	d023      	beq.n	80185ae <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	781b      	ldrb	r3, [r3, #0]
 801856a:	2b01      	cmp	r3, #1
 801856c:	d10f      	bne.n	801858e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801856e:	693b      	ldr	r3, [r7, #16]
 8018570:	785b      	ldrb	r3, [r3, #1]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d11b      	bne.n	80185ae <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018576:	693b      	ldr	r3, [r7, #16]
 8018578:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801857a:	2b5e      	cmp	r3, #94	; 0x5e
 801857c:	d117      	bne.n	80185ae <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	7b5b      	ldrb	r3, [r3, #13]
 8018582:	f043 0310 	orr.w	r3, r3, #16
 8018586:	b2da      	uxtb	r2, r3
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	735a      	strb	r2, [r3, #13]
 801858c:	e00f      	b.n	80185ae <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801858e:	693b      	ldr	r3, [r7, #16]
 8018590:	2206      	movs	r2, #6
 8018592:	4928      	ldr	r1, [pc, #160]	; (8018634 <ethernet_input+0x118>)
 8018594:	4618      	mov	r0, r3
 8018596:	f000 fbdc 	bl	8018d52 <memcmp>
 801859a:	4603      	mov	r3, r0
 801859c:	2b00      	cmp	r3, #0
 801859e:	d106      	bne.n	80185ae <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	7b5b      	ldrb	r3, [r3, #13]
 80185a4:	f043 0308 	orr.w	r3, r3, #8
 80185a8:	b2da      	uxtb	r2, r3
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80185ae:	89fb      	ldrh	r3, [r7, #14]
 80185b0:	2b08      	cmp	r3, #8
 80185b2:	d003      	beq.n	80185bc <ethernet_input+0xa0>
 80185b4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80185b8:	d014      	beq.n	80185e4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80185ba:	e032      	b.n	8018622 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80185c2:	f003 0308 	and.w	r3, r3, #8
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d024      	beq.n	8018614 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80185ca:	8afb      	ldrh	r3, [r7, #22]
 80185cc:	4619      	mov	r1, r3
 80185ce:	6878      	ldr	r0, [r7, #4]
 80185d0:	f7f4 fc9a 	bl	800cf08 <pbuf_remove_header>
 80185d4:	4603      	mov	r3, r0
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d11e      	bne.n	8018618 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80185da:	6839      	ldr	r1, [r7, #0]
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f7fe ff03 	bl	80173e8 <ip4_input>
      break;
 80185e2:	e013      	b.n	801860c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80185ea:	f003 0308 	and.w	r3, r3, #8
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d014      	beq.n	801861c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80185f2:	8afb      	ldrh	r3, [r7, #22]
 80185f4:	4619      	mov	r1, r3
 80185f6:	6878      	ldr	r0, [r7, #4]
 80185f8:	f7f4 fc86 	bl	800cf08 <pbuf_remove_header>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d10e      	bne.n	8018620 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018602:	6839      	ldr	r1, [r7, #0]
 8018604:	6878      	ldr	r0, [r7, #4]
 8018606:	f7fe f89f 	bl	8016748 <etharp_input>
      break;
 801860a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801860c:	2300      	movs	r3, #0
 801860e:	e00c      	b.n	801862a <ethernet_input+0x10e>
    goto free_and_return;
 8018610:	bf00      	nop
 8018612:	e006      	b.n	8018622 <ethernet_input+0x106>
        goto free_and_return;
 8018614:	bf00      	nop
 8018616:	e004      	b.n	8018622 <ethernet_input+0x106>
        goto free_and_return;
 8018618:	bf00      	nop
 801861a:	e002      	b.n	8018622 <ethernet_input+0x106>
        goto free_and_return;
 801861c:	bf00      	nop
 801861e:	e000      	b.n	8018622 <ethernet_input+0x106>
        goto free_and_return;
 8018620:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	f7f4 fcf6 	bl	800d014 <pbuf_free>
  return ERR_OK;
 8018628:	2300      	movs	r3, #0
}
 801862a:	4618      	mov	r0, r3
 801862c:	3718      	adds	r7, #24
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
 8018632:	bf00      	nop
 8018634:	0801d32c 	.word	0x0801d32c

08018638 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018638:	b580      	push	{r7, lr}
 801863a:	b086      	sub	sp, #24
 801863c:	af00      	add	r7, sp, #0
 801863e:	60f8      	str	r0, [r7, #12]
 8018640:	60b9      	str	r1, [r7, #8]
 8018642:	607a      	str	r2, [r7, #4]
 8018644:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018646:	8c3b      	ldrh	r3, [r7, #32]
 8018648:	4618      	mov	r0, r3
 801864a:	f7f3 f8e5 	bl	800b818 <lwip_htons>
 801864e:	4603      	mov	r3, r0
 8018650:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018652:	210e      	movs	r1, #14
 8018654:	68b8      	ldr	r0, [r7, #8]
 8018656:	f7f4 fc47 	bl	800cee8 <pbuf_add_header>
 801865a:	4603      	mov	r3, r0
 801865c:	2b00      	cmp	r3, #0
 801865e:	d125      	bne.n	80186ac <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018660:	68bb      	ldr	r3, [r7, #8]
 8018662:	685b      	ldr	r3, [r3, #4]
 8018664:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018666:	693b      	ldr	r3, [r7, #16]
 8018668:	8afa      	ldrh	r2, [r7, #22]
 801866a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801866c:	693b      	ldr	r3, [r7, #16]
 801866e:	2206      	movs	r2, #6
 8018670:	6839      	ldr	r1, [r7, #0]
 8018672:	4618      	mov	r0, r3
 8018674:	f000 fc0a 	bl	8018e8c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018678:	693b      	ldr	r3, [r7, #16]
 801867a:	3306      	adds	r3, #6
 801867c:	2206      	movs	r2, #6
 801867e:	6879      	ldr	r1, [r7, #4]
 8018680:	4618      	mov	r0, r3
 8018682:	f000 fc03 	bl	8018e8c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801868c:	2b06      	cmp	r3, #6
 801868e:	d006      	beq.n	801869e <ethernet_output+0x66>
 8018690:	4b0a      	ldr	r3, [pc, #40]	; (80186bc <ethernet_output+0x84>)
 8018692:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018696:	490a      	ldr	r1, [pc, #40]	; (80186c0 <ethernet_output+0x88>)
 8018698:	480a      	ldr	r0, [pc, #40]	; (80186c4 <ethernet_output+0x8c>)
 801869a:	f000 fb05 	bl	8018ca8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	699b      	ldr	r3, [r3, #24]
 80186a2:	68b9      	ldr	r1, [r7, #8]
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	4798      	blx	r3
 80186a8:	4603      	mov	r3, r0
 80186aa:	e002      	b.n	80186b2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80186ac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80186ae:	f06f 0301 	mvn.w	r3, #1
}
 80186b2:	4618      	mov	r0, r3
 80186b4:	3718      	adds	r7, #24
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	0801d14c 	.word	0x0801d14c
 80186c0:	0801d184 	.word	0x0801d184
 80186c4:	0801d1b8 	.word	0x0801d1b8

080186c8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b086      	sub	sp, #24
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]
 80186d0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	60bb      	str	r3, [r7, #8]
 80186d6:	2304      	movs	r3, #4
 80186d8:	60fb      	str	r3, [r7, #12]
 80186da:	2300      	movs	r3, #0
 80186dc:	613b      	str	r3, [r7, #16]
 80186de:	2300      	movs	r3, #0
 80186e0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80186e2:	f107 0308 	add.w	r3, r7, #8
 80186e6:	2100      	movs	r1, #0
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7ee fc2b 	bl	8006f44 <osMessageCreate>
 80186ee:	4602      	mov	r2, r0
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d102      	bne.n	8018702 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80186fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018700:	e000      	b.n	8018704 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018702:	2300      	movs	r3, #0
}
 8018704:	4618      	mov	r0, r3
 8018706:	3718      	adds	r7, #24
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}

0801870c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
 8018714:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	6839      	ldr	r1, [r7, #0]
 801871c:	2200      	movs	r2, #0
 801871e:	4618      	mov	r0, r3
 8018720:	f7ee fc38 	bl	8006f94 <osMessagePut>
 8018724:	4603      	mov	r3, r0
 8018726:	2b00      	cmp	r3, #0
 8018728:	d102      	bne.n	8018730 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801872a:	2300      	movs	r3, #0
 801872c:	73fb      	strb	r3, [r7, #15]
 801872e:	e001      	b.n	8018734 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018730:	23ff      	movs	r3, #255	; 0xff
 8018732:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018738:	4618      	mov	r0, r3
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}

08018740 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b08c      	sub	sp, #48	; 0x30
 8018744:	af00      	add	r7, sp, #0
 8018746:	61f8      	str	r0, [r7, #28]
 8018748:	61b9      	str	r1, [r7, #24]
 801874a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801874c:	f7ee fa6a 	bl	8006c24 <osKernelSysTick>
 8018750:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018752:	697b      	ldr	r3, [r7, #20]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d017      	beq.n	8018788 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018758:	69fb      	ldr	r3, [r7, #28]
 801875a:	6819      	ldr	r1, [r3, #0]
 801875c:	f107 0320 	add.w	r3, r7, #32
 8018760:	697a      	ldr	r2, [r7, #20]
 8018762:	4618      	mov	r0, r3
 8018764:	f7ee fc56 	bl	8007014 <osMessageGet>

    if(event.status == osEventMessage)
 8018768:	6a3b      	ldr	r3, [r7, #32]
 801876a:	2b10      	cmp	r3, #16
 801876c:	d109      	bne.n	8018782 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018770:	461a      	mov	r2, r3
 8018772:	69bb      	ldr	r3, [r7, #24]
 8018774:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018776:	f7ee fa55 	bl	8006c24 <osKernelSysTick>
 801877a:	4602      	mov	r2, r0
 801877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877e:	1ad3      	subs	r3, r2, r3
 8018780:	e019      	b.n	80187b6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018782:	f04f 33ff 	mov.w	r3, #4294967295
 8018786:	e016      	b.n	80187b6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018788:	69fb      	ldr	r3, [r7, #28]
 801878a:	6819      	ldr	r1, [r3, #0]
 801878c:	463b      	mov	r3, r7
 801878e:	f04f 32ff 	mov.w	r2, #4294967295
 8018792:	4618      	mov	r0, r3
 8018794:	f7ee fc3e 	bl	8007014 <osMessageGet>
 8018798:	f107 0320 	add.w	r3, r7, #32
 801879c:	463a      	mov	r2, r7
 801879e:	ca07      	ldmia	r2, {r0, r1, r2}
 80187a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80187a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187a6:	461a      	mov	r2, r3
 80187a8:	69bb      	ldr	r3, [r7, #24]
 80187aa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80187ac:	f7ee fa3a 	bl	8006c24 <osKernelSysTick>
 80187b0:	4602      	mov	r2, r0
 80187b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187b4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80187b6:	4618      	mov	r0, r3
 80187b8:	3730      	adds	r7, #48	; 0x30
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}

080187be <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80187be:	b480      	push	{r7}
 80187c0:	b083      	sub	sp, #12
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d101      	bne.n	80187d2 <sys_mbox_valid+0x14>
    return 0;
 80187ce:	2300      	movs	r3, #0
 80187d0:	e000      	b.n	80187d4 <sys_mbox_valid+0x16>
  else
    return 1;
 80187d2:	2301      	movs	r3, #1
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	370c      	adds	r7, #12
 80187d8:	46bd      	mov	sp, r7
 80187da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187de:	4770      	bx	lr

080187e0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80187e0:	b580      	push	{r7, lr}
 80187e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80187e4:	4803      	ldr	r0, [pc, #12]	; (80187f4 <sys_init+0x14>)
 80187e6:	f7ee fa8d 	bl	8006d04 <osMutexCreate>
 80187ea:	4603      	mov	r3, r0
 80187ec:	4a02      	ldr	r2, [pc, #8]	; (80187f8 <sys_init+0x18>)
 80187ee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80187f0:	bf00      	nop
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	0801d33c 	.word	0x0801d33c
 80187f8:	2000cdc0 	.word	0x2000cdc0

080187fc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b084      	sub	sp, #16
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018804:	2300      	movs	r3, #0
 8018806:	60bb      	str	r3, [r7, #8]
 8018808:	2300      	movs	r3, #0
 801880a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801880c:	f107 0308 	add.w	r3, r7, #8
 8018810:	4618      	mov	r0, r3
 8018812:	f7ee fa77 	bl	8006d04 <osMutexCreate>
 8018816:	4602      	mov	r2, r0
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d102      	bne.n	801882a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018824:	f04f 33ff 	mov.w	r3, #4294967295
 8018828:	e000      	b.n	801882c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801882a:	2300      	movs	r3, #0
}
 801882c:	4618      	mov	r0, r3
 801882e:	3710      	adds	r7, #16
 8018830:	46bd      	mov	sp, r7
 8018832:	bd80      	pop	{r7, pc}

08018834 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b082      	sub	sp, #8
 8018838:	af00      	add	r7, sp, #0
 801883a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	f04f 31ff 	mov.w	r1, #4294967295
 8018844:	4618      	mov	r0, r3
 8018846:	f7ee fa75 	bl	8006d34 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801884a:	bf00      	nop
 801884c:	3708      	adds	r7, #8
 801884e:	46bd      	mov	sp, r7
 8018850:	bd80      	pop	{r7, pc}

08018852 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018852:	b580      	push	{r7, lr}
 8018854:	b082      	sub	sp, #8
 8018856:	af00      	add	r7, sp, #0
 8018858:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
 801885e:	4618      	mov	r0, r3
 8018860:	f7ee fab6 	bl	8006dd0 <osMutexRelease>
}
 8018864:	bf00      	nop
 8018866:	3708      	adds	r7, #8
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}

0801886c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b08c      	sub	sp, #48	; 0x30
 8018870:	af00      	add	r7, sp, #0
 8018872:	60f8      	str	r0, [r7, #12]
 8018874:	60b9      	str	r1, [r7, #8]
 8018876:	607a      	str	r2, [r7, #4]
 8018878:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801887a:	f107 0314 	add.w	r3, r7, #20
 801887e:	2200      	movs	r2, #0
 8018880:	601a      	str	r2, [r3, #0]
 8018882:	605a      	str	r2, [r3, #4]
 8018884:	609a      	str	r2, [r3, #8]
 8018886:	60da      	str	r2, [r3, #12]
 8018888:	611a      	str	r2, [r3, #16]
 801888a:	615a      	str	r2, [r3, #20]
 801888c:	619a      	str	r2, [r3, #24]
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	617b      	str	r3, [r7, #20]
 8018892:	68bb      	ldr	r3, [r7, #8]
 8018894:	61bb      	str	r3, [r7, #24]
 8018896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018898:	b21b      	sxth	r3, r3
 801889a:	83bb      	strh	r3, [r7, #28]
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80188a0:	f107 0314 	add.w	r3, r7, #20
 80188a4:	6879      	ldr	r1, [r7, #4]
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7ee f9cc 	bl	8006c44 <osThreadCreate>
 80188ac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80188ae:	4618      	mov	r0, r3
 80188b0:	3730      	adds	r7, #48	; 0x30
 80188b2:	46bd      	mov	sp, r7
 80188b4:	bd80      	pop	{r7, pc}
	...

080188b8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80188bc:	4b04      	ldr	r3, [pc, #16]	; (80188d0 <sys_arch_protect+0x18>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f04f 31ff 	mov.w	r1, #4294967295
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7ee fa35 	bl	8006d34 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80188ca:	2301      	movs	r3, #1
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	bd80      	pop	{r7, pc}
 80188d0:	2000cdc0 	.word	0x2000cdc0

080188d4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80188dc:	4b04      	ldr	r3, [pc, #16]	; (80188f0 <sys_arch_unprotect+0x1c>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7ee fa75 	bl	8006dd0 <osMutexRelease>
}
 80188e6:	bf00      	nop
 80188e8:	3708      	adds	r7, #8
 80188ea:	46bd      	mov	sp, r7
 80188ec:	bd80      	pop	{r7, pc}
 80188ee:	bf00      	nop
 80188f0:	2000cdc0 	.word	0x2000cdc0

080188f4 <atoi>:
 80188f4:	220a      	movs	r2, #10
 80188f6:	2100      	movs	r1, #0
 80188f8:	f000 b8da 	b.w	8018ab0 <strtol>

080188fc <__itoa>:
 80188fc:	1e93      	subs	r3, r2, #2
 80188fe:	2b22      	cmp	r3, #34	; 0x22
 8018900:	b510      	push	{r4, lr}
 8018902:	460c      	mov	r4, r1
 8018904:	d904      	bls.n	8018910 <__itoa+0x14>
 8018906:	2300      	movs	r3, #0
 8018908:	700b      	strb	r3, [r1, #0]
 801890a:	461c      	mov	r4, r3
 801890c:	4620      	mov	r0, r4
 801890e:	bd10      	pop	{r4, pc}
 8018910:	2a0a      	cmp	r2, #10
 8018912:	d109      	bne.n	8018928 <__itoa+0x2c>
 8018914:	2800      	cmp	r0, #0
 8018916:	da07      	bge.n	8018928 <__itoa+0x2c>
 8018918:	232d      	movs	r3, #45	; 0x2d
 801891a:	700b      	strb	r3, [r1, #0]
 801891c:	4240      	negs	r0, r0
 801891e:	2101      	movs	r1, #1
 8018920:	4421      	add	r1, r4
 8018922:	f000 f8cf 	bl	8018ac4 <__utoa>
 8018926:	e7f1      	b.n	801890c <__itoa+0x10>
 8018928:	2100      	movs	r1, #0
 801892a:	e7f9      	b.n	8018920 <__itoa+0x24>

0801892c <itoa>:
 801892c:	f7ff bfe6 	b.w	80188fc <__itoa>

08018930 <rand>:
 8018930:	4b16      	ldr	r3, [pc, #88]	; (801898c <rand+0x5c>)
 8018932:	b510      	push	{r4, lr}
 8018934:	681c      	ldr	r4, [r3, #0]
 8018936:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018938:	b9b3      	cbnz	r3, 8018968 <rand+0x38>
 801893a:	2018      	movs	r0, #24
 801893c:	f000 fad2 	bl	8018ee4 <malloc>
 8018940:	4602      	mov	r2, r0
 8018942:	6320      	str	r0, [r4, #48]	; 0x30
 8018944:	b920      	cbnz	r0, 8018950 <rand+0x20>
 8018946:	4b12      	ldr	r3, [pc, #72]	; (8018990 <rand+0x60>)
 8018948:	4812      	ldr	r0, [pc, #72]	; (8018994 <rand+0x64>)
 801894a:	2152      	movs	r1, #82	; 0x52
 801894c:	f000 faac 	bl	8018ea8 <__assert_func>
 8018950:	4911      	ldr	r1, [pc, #68]	; (8018998 <rand+0x68>)
 8018952:	4b12      	ldr	r3, [pc, #72]	; (801899c <rand+0x6c>)
 8018954:	e9c0 1300 	strd	r1, r3, [r0]
 8018958:	4b11      	ldr	r3, [pc, #68]	; (80189a0 <rand+0x70>)
 801895a:	6083      	str	r3, [r0, #8]
 801895c:	230b      	movs	r3, #11
 801895e:	8183      	strh	r3, [r0, #12]
 8018960:	2100      	movs	r1, #0
 8018962:	2001      	movs	r0, #1
 8018964:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018968:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801896a:	480e      	ldr	r0, [pc, #56]	; (80189a4 <rand+0x74>)
 801896c:	690b      	ldr	r3, [r1, #16]
 801896e:	694c      	ldr	r4, [r1, #20]
 8018970:	4a0d      	ldr	r2, [pc, #52]	; (80189a8 <rand+0x78>)
 8018972:	4358      	muls	r0, r3
 8018974:	fb02 0004 	mla	r0, r2, r4, r0
 8018978:	fba3 3202 	umull	r3, r2, r3, r2
 801897c:	3301      	adds	r3, #1
 801897e:	eb40 0002 	adc.w	r0, r0, r2
 8018982:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018986:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801898a:	bd10      	pop	{r4, pc}
 801898c:	2000008c 	.word	0x2000008c
 8018990:	0801d344 	.word	0x0801d344
 8018994:	0801d35b 	.word	0x0801d35b
 8018998:	abcd330e 	.word	0xabcd330e
 801899c:	e66d1234 	.word	0xe66d1234
 80189a0:	0005deec 	.word	0x0005deec
 80189a4:	5851f42d 	.word	0x5851f42d
 80189a8:	4c957f2d 	.word	0x4c957f2d

080189ac <_strtol_l.constprop.0>:
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189b2:	d001      	beq.n	80189b8 <_strtol_l.constprop.0+0xc>
 80189b4:	2b24      	cmp	r3, #36	; 0x24
 80189b6:	d906      	bls.n	80189c6 <_strtol_l.constprop.0+0x1a>
 80189b8:	f000 fa3c 	bl	8018e34 <__errno>
 80189bc:	2316      	movs	r3, #22
 80189be:	6003      	str	r3, [r0, #0]
 80189c0:	2000      	movs	r0, #0
 80189c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018aac <_strtol_l.constprop.0+0x100>
 80189ca:	460d      	mov	r5, r1
 80189cc:	462e      	mov	r6, r5
 80189ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80189d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80189d6:	f017 0708 	ands.w	r7, r7, #8
 80189da:	d1f7      	bne.n	80189cc <_strtol_l.constprop.0+0x20>
 80189dc:	2c2d      	cmp	r4, #45	; 0x2d
 80189de:	d132      	bne.n	8018a46 <_strtol_l.constprop.0+0x9a>
 80189e0:	782c      	ldrb	r4, [r5, #0]
 80189e2:	2701      	movs	r7, #1
 80189e4:	1cb5      	adds	r5, r6, #2
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d05b      	beq.n	8018aa2 <_strtol_l.constprop.0+0xf6>
 80189ea:	2b10      	cmp	r3, #16
 80189ec:	d109      	bne.n	8018a02 <_strtol_l.constprop.0+0x56>
 80189ee:	2c30      	cmp	r4, #48	; 0x30
 80189f0:	d107      	bne.n	8018a02 <_strtol_l.constprop.0+0x56>
 80189f2:	782c      	ldrb	r4, [r5, #0]
 80189f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80189f8:	2c58      	cmp	r4, #88	; 0x58
 80189fa:	d14d      	bne.n	8018a98 <_strtol_l.constprop.0+0xec>
 80189fc:	786c      	ldrb	r4, [r5, #1]
 80189fe:	2310      	movs	r3, #16
 8018a00:	3502      	adds	r5, #2
 8018a02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018a06:	f108 38ff 	add.w	r8, r8, #4294967295
 8018a0a:	f04f 0e00 	mov.w	lr, #0
 8018a0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8018a12:	4676      	mov	r6, lr
 8018a14:	fb03 8a19 	mls	sl, r3, r9, r8
 8018a18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018a1c:	f1bc 0f09 	cmp.w	ip, #9
 8018a20:	d816      	bhi.n	8018a50 <_strtol_l.constprop.0+0xa4>
 8018a22:	4664      	mov	r4, ip
 8018a24:	42a3      	cmp	r3, r4
 8018a26:	dd24      	ble.n	8018a72 <_strtol_l.constprop.0+0xc6>
 8018a28:	f1be 3fff 	cmp.w	lr, #4294967295
 8018a2c:	d008      	beq.n	8018a40 <_strtol_l.constprop.0+0x94>
 8018a2e:	45b1      	cmp	r9, r6
 8018a30:	d31c      	bcc.n	8018a6c <_strtol_l.constprop.0+0xc0>
 8018a32:	d101      	bne.n	8018a38 <_strtol_l.constprop.0+0x8c>
 8018a34:	45a2      	cmp	sl, r4
 8018a36:	db19      	blt.n	8018a6c <_strtol_l.constprop.0+0xc0>
 8018a38:	fb06 4603 	mla	r6, r6, r3, r4
 8018a3c:	f04f 0e01 	mov.w	lr, #1
 8018a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018a44:	e7e8      	b.n	8018a18 <_strtol_l.constprop.0+0x6c>
 8018a46:	2c2b      	cmp	r4, #43	; 0x2b
 8018a48:	bf04      	itt	eq
 8018a4a:	782c      	ldrbeq	r4, [r5, #0]
 8018a4c:	1cb5      	addeq	r5, r6, #2
 8018a4e:	e7ca      	b.n	80189e6 <_strtol_l.constprop.0+0x3a>
 8018a50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018a54:	f1bc 0f19 	cmp.w	ip, #25
 8018a58:	d801      	bhi.n	8018a5e <_strtol_l.constprop.0+0xb2>
 8018a5a:	3c37      	subs	r4, #55	; 0x37
 8018a5c:	e7e2      	b.n	8018a24 <_strtol_l.constprop.0+0x78>
 8018a5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018a62:	f1bc 0f19 	cmp.w	ip, #25
 8018a66:	d804      	bhi.n	8018a72 <_strtol_l.constprop.0+0xc6>
 8018a68:	3c57      	subs	r4, #87	; 0x57
 8018a6a:	e7db      	b.n	8018a24 <_strtol_l.constprop.0+0x78>
 8018a6c:	f04f 3eff 	mov.w	lr, #4294967295
 8018a70:	e7e6      	b.n	8018a40 <_strtol_l.constprop.0+0x94>
 8018a72:	f1be 3fff 	cmp.w	lr, #4294967295
 8018a76:	d105      	bne.n	8018a84 <_strtol_l.constprop.0+0xd8>
 8018a78:	2322      	movs	r3, #34	; 0x22
 8018a7a:	6003      	str	r3, [r0, #0]
 8018a7c:	4646      	mov	r6, r8
 8018a7e:	b942      	cbnz	r2, 8018a92 <_strtol_l.constprop.0+0xe6>
 8018a80:	4630      	mov	r0, r6
 8018a82:	e79e      	b.n	80189c2 <_strtol_l.constprop.0+0x16>
 8018a84:	b107      	cbz	r7, 8018a88 <_strtol_l.constprop.0+0xdc>
 8018a86:	4276      	negs	r6, r6
 8018a88:	2a00      	cmp	r2, #0
 8018a8a:	d0f9      	beq.n	8018a80 <_strtol_l.constprop.0+0xd4>
 8018a8c:	f1be 0f00 	cmp.w	lr, #0
 8018a90:	d000      	beq.n	8018a94 <_strtol_l.constprop.0+0xe8>
 8018a92:	1e69      	subs	r1, r5, #1
 8018a94:	6011      	str	r1, [r2, #0]
 8018a96:	e7f3      	b.n	8018a80 <_strtol_l.constprop.0+0xd4>
 8018a98:	2430      	movs	r4, #48	; 0x30
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d1b1      	bne.n	8018a02 <_strtol_l.constprop.0+0x56>
 8018a9e:	2308      	movs	r3, #8
 8018aa0:	e7af      	b.n	8018a02 <_strtol_l.constprop.0+0x56>
 8018aa2:	2c30      	cmp	r4, #48	; 0x30
 8018aa4:	d0a5      	beq.n	80189f2 <_strtol_l.constprop.0+0x46>
 8018aa6:	230a      	movs	r3, #10
 8018aa8:	e7ab      	b.n	8018a02 <_strtol_l.constprop.0+0x56>
 8018aaa:	bf00      	nop
 8018aac:	0801d3d9 	.word	0x0801d3d9

08018ab0 <strtol>:
 8018ab0:	4613      	mov	r3, r2
 8018ab2:	460a      	mov	r2, r1
 8018ab4:	4601      	mov	r1, r0
 8018ab6:	4802      	ldr	r0, [pc, #8]	; (8018ac0 <strtol+0x10>)
 8018ab8:	6800      	ldr	r0, [r0, #0]
 8018aba:	f7ff bf77 	b.w	80189ac <_strtol_l.constprop.0>
 8018abe:	bf00      	nop
 8018ac0:	2000008c 	.word	0x2000008c

08018ac4 <__utoa>:
 8018ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ac6:	4c1f      	ldr	r4, [pc, #124]	; (8018b44 <__utoa+0x80>)
 8018ac8:	b08b      	sub	sp, #44	; 0x2c
 8018aca:	4605      	mov	r5, r0
 8018acc:	460b      	mov	r3, r1
 8018ace:	466e      	mov	r6, sp
 8018ad0:	f104 0c20 	add.w	ip, r4, #32
 8018ad4:	6820      	ldr	r0, [r4, #0]
 8018ad6:	6861      	ldr	r1, [r4, #4]
 8018ad8:	4637      	mov	r7, r6
 8018ada:	c703      	stmia	r7!, {r0, r1}
 8018adc:	3408      	adds	r4, #8
 8018ade:	4564      	cmp	r4, ip
 8018ae0:	463e      	mov	r6, r7
 8018ae2:	d1f7      	bne.n	8018ad4 <__utoa+0x10>
 8018ae4:	7921      	ldrb	r1, [r4, #4]
 8018ae6:	7139      	strb	r1, [r7, #4]
 8018ae8:	1e91      	subs	r1, r2, #2
 8018aea:	6820      	ldr	r0, [r4, #0]
 8018aec:	6038      	str	r0, [r7, #0]
 8018aee:	2922      	cmp	r1, #34	; 0x22
 8018af0:	f04f 0100 	mov.w	r1, #0
 8018af4:	d904      	bls.n	8018b00 <__utoa+0x3c>
 8018af6:	7019      	strb	r1, [r3, #0]
 8018af8:	460b      	mov	r3, r1
 8018afa:	4618      	mov	r0, r3
 8018afc:	b00b      	add	sp, #44	; 0x2c
 8018afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b00:	1e58      	subs	r0, r3, #1
 8018b02:	4684      	mov	ip, r0
 8018b04:	fbb5 f7f2 	udiv	r7, r5, r2
 8018b08:	fb02 5617 	mls	r6, r2, r7, r5
 8018b0c:	3628      	adds	r6, #40	; 0x28
 8018b0e:	446e      	add	r6, sp
 8018b10:	460c      	mov	r4, r1
 8018b12:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8018b16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8018b1a:	462e      	mov	r6, r5
 8018b1c:	42b2      	cmp	r2, r6
 8018b1e:	f101 0101 	add.w	r1, r1, #1
 8018b22:	463d      	mov	r5, r7
 8018b24:	d9ee      	bls.n	8018b04 <__utoa+0x40>
 8018b26:	2200      	movs	r2, #0
 8018b28:	545a      	strb	r2, [r3, r1]
 8018b2a:	1919      	adds	r1, r3, r4
 8018b2c:	1aa5      	subs	r5, r4, r2
 8018b2e:	42aa      	cmp	r2, r5
 8018b30:	dae3      	bge.n	8018afa <__utoa+0x36>
 8018b32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018b36:	780e      	ldrb	r6, [r1, #0]
 8018b38:	7006      	strb	r6, [r0, #0]
 8018b3a:	3201      	adds	r2, #1
 8018b3c:	f801 5901 	strb.w	r5, [r1], #-1
 8018b40:	e7f4      	b.n	8018b2c <__utoa+0x68>
 8018b42:	bf00      	nop
 8018b44:	0801d3b3 	.word	0x0801d3b3

08018b48 <std>:
 8018b48:	2300      	movs	r3, #0
 8018b4a:	b510      	push	{r4, lr}
 8018b4c:	4604      	mov	r4, r0
 8018b4e:	e9c0 3300 	strd	r3, r3, [r0]
 8018b52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018b56:	6083      	str	r3, [r0, #8]
 8018b58:	8181      	strh	r1, [r0, #12]
 8018b5a:	6643      	str	r3, [r0, #100]	; 0x64
 8018b5c:	81c2      	strh	r2, [r0, #14]
 8018b5e:	6183      	str	r3, [r0, #24]
 8018b60:	4619      	mov	r1, r3
 8018b62:	2208      	movs	r2, #8
 8018b64:	305c      	adds	r0, #92	; 0x5c
 8018b66:	f000 f904 	bl	8018d72 <memset>
 8018b6a:	4b05      	ldr	r3, [pc, #20]	; (8018b80 <std+0x38>)
 8018b6c:	6263      	str	r3, [r4, #36]	; 0x24
 8018b6e:	4b05      	ldr	r3, [pc, #20]	; (8018b84 <std+0x3c>)
 8018b70:	62a3      	str	r3, [r4, #40]	; 0x28
 8018b72:	4b05      	ldr	r3, [pc, #20]	; (8018b88 <std+0x40>)
 8018b74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018b76:	4b05      	ldr	r3, [pc, #20]	; (8018b8c <std+0x44>)
 8018b78:	6224      	str	r4, [r4, #32]
 8018b7a:	6323      	str	r3, [r4, #48]	; 0x30
 8018b7c:	bd10      	pop	{r4, pc}
 8018b7e:	bf00      	nop
 8018b80:	08018ccd 	.word	0x08018ccd
 8018b84:	08018cef 	.word	0x08018cef
 8018b88:	08018d27 	.word	0x08018d27
 8018b8c:	08018d4b 	.word	0x08018d4b

08018b90 <stdio_exit_handler>:
 8018b90:	4a02      	ldr	r2, [pc, #8]	; (8018b9c <stdio_exit_handler+0xc>)
 8018b92:	4903      	ldr	r1, [pc, #12]	; (8018ba0 <stdio_exit_handler+0x10>)
 8018b94:	4803      	ldr	r0, [pc, #12]	; (8018ba4 <stdio_exit_handler+0x14>)
 8018b96:	f000 b869 	b.w	8018c6c <_fwalk_sglue>
 8018b9a:	bf00      	nop
 8018b9c:	20000034 	.word	0x20000034
 8018ba0:	08019701 	.word	0x08019701
 8018ba4:	20000040 	.word	0x20000040

08018ba8 <cleanup_stdio>:
 8018ba8:	6841      	ldr	r1, [r0, #4]
 8018baa:	4b0c      	ldr	r3, [pc, #48]	; (8018bdc <cleanup_stdio+0x34>)
 8018bac:	4299      	cmp	r1, r3
 8018bae:	b510      	push	{r4, lr}
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	d001      	beq.n	8018bb8 <cleanup_stdio+0x10>
 8018bb4:	f000 fda4 	bl	8019700 <_fflush_r>
 8018bb8:	68a1      	ldr	r1, [r4, #8]
 8018bba:	4b09      	ldr	r3, [pc, #36]	; (8018be0 <cleanup_stdio+0x38>)
 8018bbc:	4299      	cmp	r1, r3
 8018bbe:	d002      	beq.n	8018bc6 <cleanup_stdio+0x1e>
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f000 fd9d 	bl	8019700 <_fflush_r>
 8018bc6:	68e1      	ldr	r1, [r4, #12]
 8018bc8:	4b06      	ldr	r3, [pc, #24]	; (8018be4 <cleanup_stdio+0x3c>)
 8018bca:	4299      	cmp	r1, r3
 8018bcc:	d004      	beq.n	8018bd8 <cleanup_stdio+0x30>
 8018bce:	4620      	mov	r0, r4
 8018bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bd4:	f000 bd94 	b.w	8019700 <_fflush_r>
 8018bd8:	bd10      	pop	{r4, pc}
 8018bda:	bf00      	nop
 8018bdc:	2000cdc4 	.word	0x2000cdc4
 8018be0:	2000ce2c 	.word	0x2000ce2c
 8018be4:	2000ce94 	.word	0x2000ce94

08018be8 <global_stdio_init.part.0>:
 8018be8:	b510      	push	{r4, lr}
 8018bea:	4b0b      	ldr	r3, [pc, #44]	; (8018c18 <global_stdio_init.part.0+0x30>)
 8018bec:	4c0b      	ldr	r4, [pc, #44]	; (8018c1c <global_stdio_init.part.0+0x34>)
 8018bee:	4a0c      	ldr	r2, [pc, #48]	; (8018c20 <global_stdio_init.part.0+0x38>)
 8018bf0:	601a      	str	r2, [r3, #0]
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	2200      	movs	r2, #0
 8018bf6:	2104      	movs	r1, #4
 8018bf8:	f7ff ffa6 	bl	8018b48 <std>
 8018bfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018c00:	2201      	movs	r2, #1
 8018c02:	2109      	movs	r1, #9
 8018c04:	f7ff ffa0 	bl	8018b48 <std>
 8018c08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018c0c:	2202      	movs	r2, #2
 8018c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c12:	2112      	movs	r1, #18
 8018c14:	f7ff bf98 	b.w	8018b48 <std>
 8018c18:	2000cefc 	.word	0x2000cefc
 8018c1c:	2000cdc4 	.word	0x2000cdc4
 8018c20:	08018b91 	.word	0x08018b91

08018c24 <__sfp_lock_acquire>:
 8018c24:	4801      	ldr	r0, [pc, #4]	; (8018c2c <__sfp_lock_acquire+0x8>)
 8018c26:	f000 b92f 	b.w	8018e88 <__retarget_lock_acquire_recursive>
 8018c2a:	bf00      	nop
 8018c2c:	2000cf01 	.word	0x2000cf01

08018c30 <__sfp_lock_release>:
 8018c30:	4801      	ldr	r0, [pc, #4]	; (8018c38 <__sfp_lock_release+0x8>)
 8018c32:	f000 b92a 	b.w	8018e8a <__retarget_lock_release_recursive>
 8018c36:	bf00      	nop
 8018c38:	2000cf01 	.word	0x2000cf01

08018c3c <__sinit>:
 8018c3c:	b510      	push	{r4, lr}
 8018c3e:	4604      	mov	r4, r0
 8018c40:	f7ff fff0 	bl	8018c24 <__sfp_lock_acquire>
 8018c44:	6a23      	ldr	r3, [r4, #32]
 8018c46:	b11b      	cbz	r3, 8018c50 <__sinit+0x14>
 8018c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c4c:	f7ff bff0 	b.w	8018c30 <__sfp_lock_release>
 8018c50:	4b04      	ldr	r3, [pc, #16]	; (8018c64 <__sinit+0x28>)
 8018c52:	6223      	str	r3, [r4, #32]
 8018c54:	4b04      	ldr	r3, [pc, #16]	; (8018c68 <__sinit+0x2c>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d1f5      	bne.n	8018c48 <__sinit+0xc>
 8018c5c:	f7ff ffc4 	bl	8018be8 <global_stdio_init.part.0>
 8018c60:	e7f2      	b.n	8018c48 <__sinit+0xc>
 8018c62:	bf00      	nop
 8018c64:	08018ba9 	.word	0x08018ba9
 8018c68:	2000cefc 	.word	0x2000cefc

08018c6c <_fwalk_sglue>:
 8018c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c70:	4607      	mov	r7, r0
 8018c72:	4688      	mov	r8, r1
 8018c74:	4614      	mov	r4, r2
 8018c76:	2600      	movs	r6, #0
 8018c78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018c7c:	f1b9 0901 	subs.w	r9, r9, #1
 8018c80:	d505      	bpl.n	8018c8e <_fwalk_sglue+0x22>
 8018c82:	6824      	ldr	r4, [r4, #0]
 8018c84:	2c00      	cmp	r4, #0
 8018c86:	d1f7      	bne.n	8018c78 <_fwalk_sglue+0xc>
 8018c88:	4630      	mov	r0, r6
 8018c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c8e:	89ab      	ldrh	r3, [r5, #12]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d907      	bls.n	8018ca4 <_fwalk_sglue+0x38>
 8018c94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018c98:	3301      	adds	r3, #1
 8018c9a:	d003      	beq.n	8018ca4 <_fwalk_sglue+0x38>
 8018c9c:	4629      	mov	r1, r5
 8018c9e:	4638      	mov	r0, r7
 8018ca0:	47c0      	blx	r8
 8018ca2:	4306      	orrs	r6, r0
 8018ca4:	3568      	adds	r5, #104	; 0x68
 8018ca6:	e7e9      	b.n	8018c7c <_fwalk_sglue+0x10>

08018ca8 <iprintf>:
 8018ca8:	b40f      	push	{r0, r1, r2, r3}
 8018caa:	b507      	push	{r0, r1, r2, lr}
 8018cac:	4906      	ldr	r1, [pc, #24]	; (8018cc8 <iprintf+0x20>)
 8018cae:	ab04      	add	r3, sp, #16
 8018cb0:	6808      	ldr	r0, [r1, #0]
 8018cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cb6:	6881      	ldr	r1, [r0, #8]
 8018cb8:	9301      	str	r3, [sp, #4]
 8018cba:	f000 f9f1 	bl	80190a0 <_vfiprintf_r>
 8018cbe:	b003      	add	sp, #12
 8018cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cc4:	b004      	add	sp, #16
 8018cc6:	4770      	bx	lr
 8018cc8:	2000008c 	.word	0x2000008c

08018ccc <__sread>:
 8018ccc:	b510      	push	{r4, lr}
 8018cce:	460c      	mov	r4, r1
 8018cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cd4:	f000 f88a 	bl	8018dec <_read_r>
 8018cd8:	2800      	cmp	r0, #0
 8018cda:	bfab      	itete	ge
 8018cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018cde:	89a3      	ldrhlt	r3, [r4, #12]
 8018ce0:	181b      	addge	r3, r3, r0
 8018ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ce6:	bfac      	ite	ge
 8018ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8018cea:	81a3      	strhlt	r3, [r4, #12]
 8018cec:	bd10      	pop	{r4, pc}

08018cee <__swrite>:
 8018cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cf2:	461f      	mov	r7, r3
 8018cf4:	898b      	ldrh	r3, [r1, #12]
 8018cf6:	05db      	lsls	r3, r3, #23
 8018cf8:	4605      	mov	r5, r0
 8018cfa:	460c      	mov	r4, r1
 8018cfc:	4616      	mov	r6, r2
 8018cfe:	d505      	bpl.n	8018d0c <__swrite+0x1e>
 8018d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d04:	2302      	movs	r3, #2
 8018d06:	2200      	movs	r2, #0
 8018d08:	f000 f85e 	bl	8018dc8 <_lseek_r>
 8018d0c:	89a3      	ldrh	r3, [r4, #12]
 8018d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d16:	81a3      	strh	r3, [r4, #12]
 8018d18:	4632      	mov	r2, r6
 8018d1a:	463b      	mov	r3, r7
 8018d1c:	4628      	mov	r0, r5
 8018d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d22:	f000 b875 	b.w	8018e10 <_write_r>

08018d26 <__sseek>:
 8018d26:	b510      	push	{r4, lr}
 8018d28:	460c      	mov	r4, r1
 8018d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d2e:	f000 f84b 	bl	8018dc8 <_lseek_r>
 8018d32:	1c43      	adds	r3, r0, #1
 8018d34:	89a3      	ldrh	r3, [r4, #12]
 8018d36:	bf15      	itete	ne
 8018d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8018d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d42:	81a3      	strheq	r3, [r4, #12]
 8018d44:	bf18      	it	ne
 8018d46:	81a3      	strhne	r3, [r4, #12]
 8018d48:	bd10      	pop	{r4, pc}

08018d4a <__sclose>:
 8018d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d4e:	f000 b82b 	b.w	8018da8 <_close_r>

08018d52 <memcmp>:
 8018d52:	b510      	push	{r4, lr}
 8018d54:	3901      	subs	r1, #1
 8018d56:	4402      	add	r2, r0
 8018d58:	4290      	cmp	r0, r2
 8018d5a:	d101      	bne.n	8018d60 <memcmp+0xe>
 8018d5c:	2000      	movs	r0, #0
 8018d5e:	e005      	b.n	8018d6c <memcmp+0x1a>
 8018d60:	7803      	ldrb	r3, [r0, #0]
 8018d62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d66:	42a3      	cmp	r3, r4
 8018d68:	d001      	beq.n	8018d6e <memcmp+0x1c>
 8018d6a:	1b18      	subs	r0, r3, r4
 8018d6c:	bd10      	pop	{r4, pc}
 8018d6e:	3001      	adds	r0, #1
 8018d70:	e7f2      	b.n	8018d58 <memcmp+0x6>

08018d72 <memset>:
 8018d72:	4402      	add	r2, r0
 8018d74:	4603      	mov	r3, r0
 8018d76:	4293      	cmp	r3, r2
 8018d78:	d100      	bne.n	8018d7c <memset+0xa>
 8018d7a:	4770      	bx	lr
 8018d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8018d80:	e7f9      	b.n	8018d76 <memset+0x4>

08018d82 <strncpy>:
 8018d82:	b510      	push	{r4, lr}
 8018d84:	3901      	subs	r1, #1
 8018d86:	4603      	mov	r3, r0
 8018d88:	b132      	cbz	r2, 8018d98 <strncpy+0x16>
 8018d8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018d8e:	f803 4b01 	strb.w	r4, [r3], #1
 8018d92:	3a01      	subs	r2, #1
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	d1f7      	bne.n	8018d88 <strncpy+0x6>
 8018d98:	441a      	add	r2, r3
 8018d9a:	2100      	movs	r1, #0
 8018d9c:	4293      	cmp	r3, r2
 8018d9e:	d100      	bne.n	8018da2 <strncpy+0x20>
 8018da0:	bd10      	pop	{r4, pc}
 8018da2:	f803 1b01 	strb.w	r1, [r3], #1
 8018da6:	e7f9      	b.n	8018d9c <strncpy+0x1a>

08018da8 <_close_r>:
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	4d06      	ldr	r5, [pc, #24]	; (8018dc4 <_close_r+0x1c>)
 8018dac:	2300      	movs	r3, #0
 8018dae:	4604      	mov	r4, r0
 8018db0:	4608      	mov	r0, r1
 8018db2:	602b      	str	r3, [r5, #0]
 8018db4:	f7e8 f9db 	bl	800116e <_close>
 8018db8:	1c43      	adds	r3, r0, #1
 8018dba:	d102      	bne.n	8018dc2 <_close_r+0x1a>
 8018dbc:	682b      	ldr	r3, [r5, #0]
 8018dbe:	b103      	cbz	r3, 8018dc2 <_close_r+0x1a>
 8018dc0:	6023      	str	r3, [r4, #0]
 8018dc2:	bd38      	pop	{r3, r4, r5, pc}
 8018dc4:	2000cdbc 	.word	0x2000cdbc

08018dc8 <_lseek_r>:
 8018dc8:	b538      	push	{r3, r4, r5, lr}
 8018dca:	4d07      	ldr	r5, [pc, #28]	; (8018de8 <_lseek_r+0x20>)
 8018dcc:	4604      	mov	r4, r0
 8018dce:	4608      	mov	r0, r1
 8018dd0:	4611      	mov	r1, r2
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	602a      	str	r2, [r5, #0]
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	f7e8 f9f0 	bl	80011bc <_lseek>
 8018ddc:	1c43      	adds	r3, r0, #1
 8018dde:	d102      	bne.n	8018de6 <_lseek_r+0x1e>
 8018de0:	682b      	ldr	r3, [r5, #0]
 8018de2:	b103      	cbz	r3, 8018de6 <_lseek_r+0x1e>
 8018de4:	6023      	str	r3, [r4, #0]
 8018de6:	bd38      	pop	{r3, r4, r5, pc}
 8018de8:	2000cdbc 	.word	0x2000cdbc

08018dec <_read_r>:
 8018dec:	b538      	push	{r3, r4, r5, lr}
 8018dee:	4d07      	ldr	r5, [pc, #28]	; (8018e0c <_read_r+0x20>)
 8018df0:	4604      	mov	r4, r0
 8018df2:	4608      	mov	r0, r1
 8018df4:	4611      	mov	r1, r2
 8018df6:	2200      	movs	r2, #0
 8018df8:	602a      	str	r2, [r5, #0]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	f7e8 f97e 	bl	80010fc <_read>
 8018e00:	1c43      	adds	r3, r0, #1
 8018e02:	d102      	bne.n	8018e0a <_read_r+0x1e>
 8018e04:	682b      	ldr	r3, [r5, #0]
 8018e06:	b103      	cbz	r3, 8018e0a <_read_r+0x1e>
 8018e08:	6023      	str	r3, [r4, #0]
 8018e0a:	bd38      	pop	{r3, r4, r5, pc}
 8018e0c:	2000cdbc 	.word	0x2000cdbc

08018e10 <_write_r>:
 8018e10:	b538      	push	{r3, r4, r5, lr}
 8018e12:	4d07      	ldr	r5, [pc, #28]	; (8018e30 <_write_r+0x20>)
 8018e14:	4604      	mov	r4, r0
 8018e16:	4608      	mov	r0, r1
 8018e18:	4611      	mov	r1, r2
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	602a      	str	r2, [r5, #0]
 8018e1e:	461a      	mov	r2, r3
 8018e20:	f7e8 f989 	bl	8001136 <_write>
 8018e24:	1c43      	adds	r3, r0, #1
 8018e26:	d102      	bne.n	8018e2e <_write_r+0x1e>
 8018e28:	682b      	ldr	r3, [r5, #0]
 8018e2a:	b103      	cbz	r3, 8018e2e <_write_r+0x1e>
 8018e2c:	6023      	str	r3, [r4, #0]
 8018e2e:	bd38      	pop	{r3, r4, r5, pc}
 8018e30:	2000cdbc 	.word	0x2000cdbc

08018e34 <__errno>:
 8018e34:	4b01      	ldr	r3, [pc, #4]	; (8018e3c <__errno+0x8>)
 8018e36:	6818      	ldr	r0, [r3, #0]
 8018e38:	4770      	bx	lr
 8018e3a:	bf00      	nop
 8018e3c:	2000008c 	.word	0x2000008c

08018e40 <__libc_init_array>:
 8018e40:	b570      	push	{r4, r5, r6, lr}
 8018e42:	4d0d      	ldr	r5, [pc, #52]	; (8018e78 <__libc_init_array+0x38>)
 8018e44:	4c0d      	ldr	r4, [pc, #52]	; (8018e7c <__libc_init_array+0x3c>)
 8018e46:	1b64      	subs	r4, r4, r5
 8018e48:	10a4      	asrs	r4, r4, #2
 8018e4a:	2600      	movs	r6, #0
 8018e4c:	42a6      	cmp	r6, r4
 8018e4e:	d109      	bne.n	8018e64 <__libc_init_array+0x24>
 8018e50:	4d0b      	ldr	r5, [pc, #44]	; (8018e80 <__libc_init_array+0x40>)
 8018e52:	4c0c      	ldr	r4, [pc, #48]	; (8018e84 <__libc_init_array+0x44>)
 8018e54:	f000 fe50 	bl	8019af8 <_init>
 8018e58:	1b64      	subs	r4, r4, r5
 8018e5a:	10a4      	asrs	r4, r4, #2
 8018e5c:	2600      	movs	r6, #0
 8018e5e:	42a6      	cmp	r6, r4
 8018e60:	d105      	bne.n	8018e6e <__libc_init_array+0x2e>
 8018e62:	bd70      	pop	{r4, r5, r6, pc}
 8018e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e68:	4798      	blx	r3
 8018e6a:	3601      	adds	r6, #1
 8018e6c:	e7ee      	b.n	8018e4c <__libc_init_array+0xc>
 8018e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018e72:	4798      	blx	r3
 8018e74:	3601      	adds	r6, #1
 8018e76:	e7f2      	b.n	8018e5e <__libc_init_array+0x1e>
 8018e78:	0801d550 	.word	0x0801d550
 8018e7c:	0801d550 	.word	0x0801d550
 8018e80:	0801d550 	.word	0x0801d550
 8018e84:	0801d554 	.word	0x0801d554

08018e88 <__retarget_lock_acquire_recursive>:
 8018e88:	4770      	bx	lr

08018e8a <__retarget_lock_release_recursive>:
 8018e8a:	4770      	bx	lr

08018e8c <memcpy>:
 8018e8c:	440a      	add	r2, r1
 8018e8e:	4291      	cmp	r1, r2
 8018e90:	f100 33ff 	add.w	r3, r0, #4294967295
 8018e94:	d100      	bne.n	8018e98 <memcpy+0xc>
 8018e96:	4770      	bx	lr
 8018e98:	b510      	push	{r4, lr}
 8018e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018ea2:	4291      	cmp	r1, r2
 8018ea4:	d1f9      	bne.n	8018e9a <memcpy+0xe>
 8018ea6:	bd10      	pop	{r4, pc}

08018ea8 <__assert_func>:
 8018ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018eaa:	4614      	mov	r4, r2
 8018eac:	461a      	mov	r2, r3
 8018eae:	4b09      	ldr	r3, [pc, #36]	; (8018ed4 <__assert_func+0x2c>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	4605      	mov	r5, r0
 8018eb4:	68d8      	ldr	r0, [r3, #12]
 8018eb6:	b14c      	cbz	r4, 8018ecc <__assert_func+0x24>
 8018eb8:	4b07      	ldr	r3, [pc, #28]	; (8018ed8 <__assert_func+0x30>)
 8018eba:	9100      	str	r1, [sp, #0]
 8018ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ec0:	4906      	ldr	r1, [pc, #24]	; (8018edc <__assert_func+0x34>)
 8018ec2:	462b      	mov	r3, r5
 8018ec4:	f000 fc44 	bl	8019750 <fiprintf>
 8018ec8:	f000 fcfa 	bl	80198c0 <abort>
 8018ecc:	4b04      	ldr	r3, [pc, #16]	; (8018ee0 <__assert_func+0x38>)
 8018ece:	461c      	mov	r4, r3
 8018ed0:	e7f3      	b.n	8018eba <__assert_func+0x12>
 8018ed2:	bf00      	nop
 8018ed4:	2000008c 	.word	0x2000008c
 8018ed8:	0801d4d9 	.word	0x0801d4d9
 8018edc:	0801d4e6 	.word	0x0801d4e6
 8018ee0:	0801d514 	.word	0x0801d514

08018ee4 <malloc>:
 8018ee4:	4b02      	ldr	r3, [pc, #8]	; (8018ef0 <malloc+0xc>)
 8018ee6:	4601      	mov	r1, r0
 8018ee8:	6818      	ldr	r0, [r3, #0]
 8018eea:	f000 b823 	b.w	8018f34 <_malloc_r>
 8018eee:	bf00      	nop
 8018ef0:	2000008c 	.word	0x2000008c

08018ef4 <sbrk_aligned>:
 8018ef4:	b570      	push	{r4, r5, r6, lr}
 8018ef6:	4e0e      	ldr	r6, [pc, #56]	; (8018f30 <sbrk_aligned+0x3c>)
 8018ef8:	460c      	mov	r4, r1
 8018efa:	6831      	ldr	r1, [r6, #0]
 8018efc:	4605      	mov	r5, r0
 8018efe:	b911      	cbnz	r1, 8018f06 <sbrk_aligned+0x12>
 8018f00:	f000 fcce 	bl	80198a0 <_sbrk_r>
 8018f04:	6030      	str	r0, [r6, #0]
 8018f06:	4621      	mov	r1, r4
 8018f08:	4628      	mov	r0, r5
 8018f0a:	f000 fcc9 	bl	80198a0 <_sbrk_r>
 8018f0e:	1c43      	adds	r3, r0, #1
 8018f10:	d00a      	beq.n	8018f28 <sbrk_aligned+0x34>
 8018f12:	1cc4      	adds	r4, r0, #3
 8018f14:	f024 0403 	bic.w	r4, r4, #3
 8018f18:	42a0      	cmp	r0, r4
 8018f1a:	d007      	beq.n	8018f2c <sbrk_aligned+0x38>
 8018f1c:	1a21      	subs	r1, r4, r0
 8018f1e:	4628      	mov	r0, r5
 8018f20:	f000 fcbe 	bl	80198a0 <_sbrk_r>
 8018f24:	3001      	adds	r0, #1
 8018f26:	d101      	bne.n	8018f2c <sbrk_aligned+0x38>
 8018f28:	f04f 34ff 	mov.w	r4, #4294967295
 8018f2c:	4620      	mov	r0, r4
 8018f2e:	bd70      	pop	{r4, r5, r6, pc}
 8018f30:	2000cf08 	.word	0x2000cf08

08018f34 <_malloc_r>:
 8018f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f38:	1ccd      	adds	r5, r1, #3
 8018f3a:	f025 0503 	bic.w	r5, r5, #3
 8018f3e:	3508      	adds	r5, #8
 8018f40:	2d0c      	cmp	r5, #12
 8018f42:	bf38      	it	cc
 8018f44:	250c      	movcc	r5, #12
 8018f46:	2d00      	cmp	r5, #0
 8018f48:	4607      	mov	r7, r0
 8018f4a:	db01      	blt.n	8018f50 <_malloc_r+0x1c>
 8018f4c:	42a9      	cmp	r1, r5
 8018f4e:	d905      	bls.n	8018f5c <_malloc_r+0x28>
 8018f50:	230c      	movs	r3, #12
 8018f52:	603b      	str	r3, [r7, #0]
 8018f54:	2600      	movs	r6, #0
 8018f56:	4630      	mov	r0, r6
 8018f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019030 <_malloc_r+0xfc>
 8018f60:	f000 f868 	bl	8019034 <__malloc_lock>
 8018f64:	f8d8 3000 	ldr.w	r3, [r8]
 8018f68:	461c      	mov	r4, r3
 8018f6a:	bb5c      	cbnz	r4, 8018fc4 <_malloc_r+0x90>
 8018f6c:	4629      	mov	r1, r5
 8018f6e:	4638      	mov	r0, r7
 8018f70:	f7ff ffc0 	bl	8018ef4 <sbrk_aligned>
 8018f74:	1c43      	adds	r3, r0, #1
 8018f76:	4604      	mov	r4, r0
 8018f78:	d155      	bne.n	8019026 <_malloc_r+0xf2>
 8018f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8018f7e:	4626      	mov	r6, r4
 8018f80:	2e00      	cmp	r6, #0
 8018f82:	d145      	bne.n	8019010 <_malloc_r+0xdc>
 8018f84:	2c00      	cmp	r4, #0
 8018f86:	d048      	beq.n	801901a <_malloc_r+0xe6>
 8018f88:	6823      	ldr	r3, [r4, #0]
 8018f8a:	4631      	mov	r1, r6
 8018f8c:	4638      	mov	r0, r7
 8018f8e:	eb04 0903 	add.w	r9, r4, r3
 8018f92:	f000 fc85 	bl	80198a0 <_sbrk_r>
 8018f96:	4581      	cmp	r9, r0
 8018f98:	d13f      	bne.n	801901a <_malloc_r+0xe6>
 8018f9a:	6821      	ldr	r1, [r4, #0]
 8018f9c:	1a6d      	subs	r5, r5, r1
 8018f9e:	4629      	mov	r1, r5
 8018fa0:	4638      	mov	r0, r7
 8018fa2:	f7ff ffa7 	bl	8018ef4 <sbrk_aligned>
 8018fa6:	3001      	adds	r0, #1
 8018fa8:	d037      	beq.n	801901a <_malloc_r+0xe6>
 8018faa:	6823      	ldr	r3, [r4, #0]
 8018fac:	442b      	add	r3, r5
 8018fae:	6023      	str	r3, [r4, #0]
 8018fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8018fb4:	2b00      	cmp	r3, #0
 8018fb6:	d038      	beq.n	801902a <_malloc_r+0xf6>
 8018fb8:	685a      	ldr	r2, [r3, #4]
 8018fba:	42a2      	cmp	r2, r4
 8018fbc:	d12b      	bne.n	8019016 <_malloc_r+0xe2>
 8018fbe:	2200      	movs	r2, #0
 8018fc0:	605a      	str	r2, [r3, #4]
 8018fc2:	e00f      	b.n	8018fe4 <_malloc_r+0xb0>
 8018fc4:	6822      	ldr	r2, [r4, #0]
 8018fc6:	1b52      	subs	r2, r2, r5
 8018fc8:	d41f      	bmi.n	801900a <_malloc_r+0xd6>
 8018fca:	2a0b      	cmp	r2, #11
 8018fcc:	d917      	bls.n	8018ffe <_malloc_r+0xca>
 8018fce:	1961      	adds	r1, r4, r5
 8018fd0:	42a3      	cmp	r3, r4
 8018fd2:	6025      	str	r5, [r4, #0]
 8018fd4:	bf18      	it	ne
 8018fd6:	6059      	strne	r1, [r3, #4]
 8018fd8:	6863      	ldr	r3, [r4, #4]
 8018fda:	bf08      	it	eq
 8018fdc:	f8c8 1000 	streq.w	r1, [r8]
 8018fe0:	5162      	str	r2, [r4, r5]
 8018fe2:	604b      	str	r3, [r1, #4]
 8018fe4:	4638      	mov	r0, r7
 8018fe6:	f104 060b 	add.w	r6, r4, #11
 8018fea:	f000 f829 	bl	8019040 <__malloc_unlock>
 8018fee:	f026 0607 	bic.w	r6, r6, #7
 8018ff2:	1d23      	adds	r3, r4, #4
 8018ff4:	1af2      	subs	r2, r6, r3
 8018ff6:	d0ae      	beq.n	8018f56 <_malloc_r+0x22>
 8018ff8:	1b9b      	subs	r3, r3, r6
 8018ffa:	50a3      	str	r3, [r4, r2]
 8018ffc:	e7ab      	b.n	8018f56 <_malloc_r+0x22>
 8018ffe:	42a3      	cmp	r3, r4
 8019000:	6862      	ldr	r2, [r4, #4]
 8019002:	d1dd      	bne.n	8018fc0 <_malloc_r+0x8c>
 8019004:	f8c8 2000 	str.w	r2, [r8]
 8019008:	e7ec      	b.n	8018fe4 <_malloc_r+0xb0>
 801900a:	4623      	mov	r3, r4
 801900c:	6864      	ldr	r4, [r4, #4]
 801900e:	e7ac      	b.n	8018f6a <_malloc_r+0x36>
 8019010:	4634      	mov	r4, r6
 8019012:	6876      	ldr	r6, [r6, #4]
 8019014:	e7b4      	b.n	8018f80 <_malloc_r+0x4c>
 8019016:	4613      	mov	r3, r2
 8019018:	e7cc      	b.n	8018fb4 <_malloc_r+0x80>
 801901a:	230c      	movs	r3, #12
 801901c:	603b      	str	r3, [r7, #0]
 801901e:	4638      	mov	r0, r7
 8019020:	f000 f80e 	bl	8019040 <__malloc_unlock>
 8019024:	e797      	b.n	8018f56 <_malloc_r+0x22>
 8019026:	6025      	str	r5, [r4, #0]
 8019028:	e7dc      	b.n	8018fe4 <_malloc_r+0xb0>
 801902a:	605b      	str	r3, [r3, #4]
 801902c:	deff      	udf	#255	; 0xff
 801902e:	bf00      	nop
 8019030:	2000cf04 	.word	0x2000cf04

08019034 <__malloc_lock>:
 8019034:	4801      	ldr	r0, [pc, #4]	; (801903c <__malloc_lock+0x8>)
 8019036:	f7ff bf27 	b.w	8018e88 <__retarget_lock_acquire_recursive>
 801903a:	bf00      	nop
 801903c:	2000cf00 	.word	0x2000cf00

08019040 <__malloc_unlock>:
 8019040:	4801      	ldr	r0, [pc, #4]	; (8019048 <__malloc_unlock+0x8>)
 8019042:	f7ff bf22 	b.w	8018e8a <__retarget_lock_release_recursive>
 8019046:	bf00      	nop
 8019048:	2000cf00 	.word	0x2000cf00

0801904c <__sfputc_r>:
 801904c:	6893      	ldr	r3, [r2, #8]
 801904e:	3b01      	subs	r3, #1
 8019050:	2b00      	cmp	r3, #0
 8019052:	b410      	push	{r4}
 8019054:	6093      	str	r3, [r2, #8]
 8019056:	da08      	bge.n	801906a <__sfputc_r+0x1e>
 8019058:	6994      	ldr	r4, [r2, #24]
 801905a:	42a3      	cmp	r3, r4
 801905c:	db01      	blt.n	8019062 <__sfputc_r+0x16>
 801905e:	290a      	cmp	r1, #10
 8019060:	d103      	bne.n	801906a <__sfputc_r+0x1e>
 8019062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019066:	f000 bb85 	b.w	8019774 <__swbuf_r>
 801906a:	6813      	ldr	r3, [r2, #0]
 801906c:	1c58      	adds	r0, r3, #1
 801906e:	6010      	str	r0, [r2, #0]
 8019070:	7019      	strb	r1, [r3, #0]
 8019072:	4608      	mov	r0, r1
 8019074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019078:	4770      	bx	lr

0801907a <__sfputs_r>:
 801907a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801907c:	4606      	mov	r6, r0
 801907e:	460f      	mov	r7, r1
 8019080:	4614      	mov	r4, r2
 8019082:	18d5      	adds	r5, r2, r3
 8019084:	42ac      	cmp	r4, r5
 8019086:	d101      	bne.n	801908c <__sfputs_r+0x12>
 8019088:	2000      	movs	r0, #0
 801908a:	e007      	b.n	801909c <__sfputs_r+0x22>
 801908c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019090:	463a      	mov	r2, r7
 8019092:	4630      	mov	r0, r6
 8019094:	f7ff ffda 	bl	801904c <__sfputc_r>
 8019098:	1c43      	adds	r3, r0, #1
 801909a:	d1f3      	bne.n	8019084 <__sfputs_r+0xa>
 801909c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080190a0 <_vfiprintf_r>:
 80190a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190a4:	460d      	mov	r5, r1
 80190a6:	b09d      	sub	sp, #116	; 0x74
 80190a8:	4614      	mov	r4, r2
 80190aa:	4698      	mov	r8, r3
 80190ac:	4606      	mov	r6, r0
 80190ae:	b118      	cbz	r0, 80190b8 <_vfiprintf_r+0x18>
 80190b0:	6a03      	ldr	r3, [r0, #32]
 80190b2:	b90b      	cbnz	r3, 80190b8 <_vfiprintf_r+0x18>
 80190b4:	f7ff fdc2 	bl	8018c3c <__sinit>
 80190b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190ba:	07d9      	lsls	r1, r3, #31
 80190bc:	d405      	bmi.n	80190ca <_vfiprintf_r+0x2a>
 80190be:	89ab      	ldrh	r3, [r5, #12]
 80190c0:	059a      	lsls	r2, r3, #22
 80190c2:	d402      	bmi.n	80190ca <_vfiprintf_r+0x2a>
 80190c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190c6:	f7ff fedf 	bl	8018e88 <__retarget_lock_acquire_recursive>
 80190ca:	89ab      	ldrh	r3, [r5, #12]
 80190cc:	071b      	lsls	r3, r3, #28
 80190ce:	d501      	bpl.n	80190d4 <_vfiprintf_r+0x34>
 80190d0:	692b      	ldr	r3, [r5, #16]
 80190d2:	b99b      	cbnz	r3, 80190fc <_vfiprintf_r+0x5c>
 80190d4:	4629      	mov	r1, r5
 80190d6:	4630      	mov	r0, r6
 80190d8:	f000 fb8a 	bl	80197f0 <__swsetup_r>
 80190dc:	b170      	cbz	r0, 80190fc <_vfiprintf_r+0x5c>
 80190de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190e0:	07dc      	lsls	r4, r3, #31
 80190e2:	d504      	bpl.n	80190ee <_vfiprintf_r+0x4e>
 80190e4:	f04f 30ff 	mov.w	r0, #4294967295
 80190e8:	b01d      	add	sp, #116	; 0x74
 80190ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ee:	89ab      	ldrh	r3, [r5, #12]
 80190f0:	0598      	lsls	r0, r3, #22
 80190f2:	d4f7      	bmi.n	80190e4 <_vfiprintf_r+0x44>
 80190f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190f6:	f7ff fec8 	bl	8018e8a <__retarget_lock_release_recursive>
 80190fa:	e7f3      	b.n	80190e4 <_vfiprintf_r+0x44>
 80190fc:	2300      	movs	r3, #0
 80190fe:	9309      	str	r3, [sp, #36]	; 0x24
 8019100:	2320      	movs	r3, #32
 8019102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019106:	f8cd 800c 	str.w	r8, [sp, #12]
 801910a:	2330      	movs	r3, #48	; 0x30
 801910c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80192c0 <_vfiprintf_r+0x220>
 8019110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019114:	f04f 0901 	mov.w	r9, #1
 8019118:	4623      	mov	r3, r4
 801911a:	469a      	mov	sl, r3
 801911c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019120:	b10a      	cbz	r2, 8019126 <_vfiprintf_r+0x86>
 8019122:	2a25      	cmp	r2, #37	; 0x25
 8019124:	d1f9      	bne.n	801911a <_vfiprintf_r+0x7a>
 8019126:	ebba 0b04 	subs.w	fp, sl, r4
 801912a:	d00b      	beq.n	8019144 <_vfiprintf_r+0xa4>
 801912c:	465b      	mov	r3, fp
 801912e:	4622      	mov	r2, r4
 8019130:	4629      	mov	r1, r5
 8019132:	4630      	mov	r0, r6
 8019134:	f7ff ffa1 	bl	801907a <__sfputs_r>
 8019138:	3001      	adds	r0, #1
 801913a:	f000 80a9 	beq.w	8019290 <_vfiprintf_r+0x1f0>
 801913e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019140:	445a      	add	r2, fp
 8019142:	9209      	str	r2, [sp, #36]	; 0x24
 8019144:	f89a 3000 	ldrb.w	r3, [sl]
 8019148:	2b00      	cmp	r3, #0
 801914a:	f000 80a1 	beq.w	8019290 <_vfiprintf_r+0x1f0>
 801914e:	2300      	movs	r3, #0
 8019150:	f04f 32ff 	mov.w	r2, #4294967295
 8019154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019158:	f10a 0a01 	add.w	sl, sl, #1
 801915c:	9304      	str	r3, [sp, #16]
 801915e:	9307      	str	r3, [sp, #28]
 8019160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019164:	931a      	str	r3, [sp, #104]	; 0x68
 8019166:	4654      	mov	r4, sl
 8019168:	2205      	movs	r2, #5
 801916a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801916e:	4854      	ldr	r0, [pc, #336]	; (80192c0 <_vfiprintf_r+0x220>)
 8019170:	f7e7 f866 	bl	8000240 <memchr>
 8019174:	9a04      	ldr	r2, [sp, #16]
 8019176:	b9d8      	cbnz	r0, 80191b0 <_vfiprintf_r+0x110>
 8019178:	06d1      	lsls	r1, r2, #27
 801917a:	bf44      	itt	mi
 801917c:	2320      	movmi	r3, #32
 801917e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019182:	0713      	lsls	r3, r2, #28
 8019184:	bf44      	itt	mi
 8019186:	232b      	movmi	r3, #43	; 0x2b
 8019188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801918c:	f89a 3000 	ldrb.w	r3, [sl]
 8019190:	2b2a      	cmp	r3, #42	; 0x2a
 8019192:	d015      	beq.n	80191c0 <_vfiprintf_r+0x120>
 8019194:	9a07      	ldr	r2, [sp, #28]
 8019196:	4654      	mov	r4, sl
 8019198:	2000      	movs	r0, #0
 801919a:	f04f 0c0a 	mov.w	ip, #10
 801919e:	4621      	mov	r1, r4
 80191a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191a4:	3b30      	subs	r3, #48	; 0x30
 80191a6:	2b09      	cmp	r3, #9
 80191a8:	d94d      	bls.n	8019246 <_vfiprintf_r+0x1a6>
 80191aa:	b1b0      	cbz	r0, 80191da <_vfiprintf_r+0x13a>
 80191ac:	9207      	str	r2, [sp, #28]
 80191ae:	e014      	b.n	80191da <_vfiprintf_r+0x13a>
 80191b0:	eba0 0308 	sub.w	r3, r0, r8
 80191b4:	fa09 f303 	lsl.w	r3, r9, r3
 80191b8:	4313      	orrs	r3, r2
 80191ba:	9304      	str	r3, [sp, #16]
 80191bc:	46a2      	mov	sl, r4
 80191be:	e7d2      	b.n	8019166 <_vfiprintf_r+0xc6>
 80191c0:	9b03      	ldr	r3, [sp, #12]
 80191c2:	1d19      	adds	r1, r3, #4
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	9103      	str	r1, [sp, #12]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	bfbb      	ittet	lt
 80191cc:	425b      	neglt	r3, r3
 80191ce:	f042 0202 	orrlt.w	r2, r2, #2
 80191d2:	9307      	strge	r3, [sp, #28]
 80191d4:	9307      	strlt	r3, [sp, #28]
 80191d6:	bfb8      	it	lt
 80191d8:	9204      	strlt	r2, [sp, #16]
 80191da:	7823      	ldrb	r3, [r4, #0]
 80191dc:	2b2e      	cmp	r3, #46	; 0x2e
 80191de:	d10c      	bne.n	80191fa <_vfiprintf_r+0x15a>
 80191e0:	7863      	ldrb	r3, [r4, #1]
 80191e2:	2b2a      	cmp	r3, #42	; 0x2a
 80191e4:	d134      	bne.n	8019250 <_vfiprintf_r+0x1b0>
 80191e6:	9b03      	ldr	r3, [sp, #12]
 80191e8:	1d1a      	adds	r2, r3, #4
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	9203      	str	r2, [sp, #12]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	bfb8      	it	lt
 80191f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80191f6:	3402      	adds	r4, #2
 80191f8:	9305      	str	r3, [sp, #20]
 80191fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80192d0 <_vfiprintf_r+0x230>
 80191fe:	7821      	ldrb	r1, [r4, #0]
 8019200:	2203      	movs	r2, #3
 8019202:	4650      	mov	r0, sl
 8019204:	f7e7 f81c 	bl	8000240 <memchr>
 8019208:	b138      	cbz	r0, 801921a <_vfiprintf_r+0x17a>
 801920a:	9b04      	ldr	r3, [sp, #16]
 801920c:	eba0 000a 	sub.w	r0, r0, sl
 8019210:	2240      	movs	r2, #64	; 0x40
 8019212:	4082      	lsls	r2, r0
 8019214:	4313      	orrs	r3, r2
 8019216:	3401      	adds	r4, #1
 8019218:	9304      	str	r3, [sp, #16]
 801921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801921e:	4829      	ldr	r0, [pc, #164]	; (80192c4 <_vfiprintf_r+0x224>)
 8019220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019224:	2206      	movs	r2, #6
 8019226:	f7e7 f80b 	bl	8000240 <memchr>
 801922a:	2800      	cmp	r0, #0
 801922c:	d03f      	beq.n	80192ae <_vfiprintf_r+0x20e>
 801922e:	4b26      	ldr	r3, [pc, #152]	; (80192c8 <_vfiprintf_r+0x228>)
 8019230:	bb1b      	cbnz	r3, 801927a <_vfiprintf_r+0x1da>
 8019232:	9b03      	ldr	r3, [sp, #12]
 8019234:	3307      	adds	r3, #7
 8019236:	f023 0307 	bic.w	r3, r3, #7
 801923a:	3308      	adds	r3, #8
 801923c:	9303      	str	r3, [sp, #12]
 801923e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019240:	443b      	add	r3, r7
 8019242:	9309      	str	r3, [sp, #36]	; 0x24
 8019244:	e768      	b.n	8019118 <_vfiprintf_r+0x78>
 8019246:	fb0c 3202 	mla	r2, ip, r2, r3
 801924a:	460c      	mov	r4, r1
 801924c:	2001      	movs	r0, #1
 801924e:	e7a6      	b.n	801919e <_vfiprintf_r+0xfe>
 8019250:	2300      	movs	r3, #0
 8019252:	3401      	adds	r4, #1
 8019254:	9305      	str	r3, [sp, #20]
 8019256:	4619      	mov	r1, r3
 8019258:	f04f 0c0a 	mov.w	ip, #10
 801925c:	4620      	mov	r0, r4
 801925e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019262:	3a30      	subs	r2, #48	; 0x30
 8019264:	2a09      	cmp	r2, #9
 8019266:	d903      	bls.n	8019270 <_vfiprintf_r+0x1d0>
 8019268:	2b00      	cmp	r3, #0
 801926a:	d0c6      	beq.n	80191fa <_vfiprintf_r+0x15a>
 801926c:	9105      	str	r1, [sp, #20]
 801926e:	e7c4      	b.n	80191fa <_vfiprintf_r+0x15a>
 8019270:	fb0c 2101 	mla	r1, ip, r1, r2
 8019274:	4604      	mov	r4, r0
 8019276:	2301      	movs	r3, #1
 8019278:	e7f0      	b.n	801925c <_vfiprintf_r+0x1bc>
 801927a:	ab03      	add	r3, sp, #12
 801927c:	9300      	str	r3, [sp, #0]
 801927e:	462a      	mov	r2, r5
 8019280:	4b12      	ldr	r3, [pc, #72]	; (80192cc <_vfiprintf_r+0x22c>)
 8019282:	a904      	add	r1, sp, #16
 8019284:	4630      	mov	r0, r6
 8019286:	f3af 8000 	nop.w
 801928a:	4607      	mov	r7, r0
 801928c:	1c78      	adds	r0, r7, #1
 801928e:	d1d6      	bne.n	801923e <_vfiprintf_r+0x19e>
 8019290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019292:	07d9      	lsls	r1, r3, #31
 8019294:	d405      	bmi.n	80192a2 <_vfiprintf_r+0x202>
 8019296:	89ab      	ldrh	r3, [r5, #12]
 8019298:	059a      	lsls	r2, r3, #22
 801929a:	d402      	bmi.n	80192a2 <_vfiprintf_r+0x202>
 801929c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801929e:	f7ff fdf4 	bl	8018e8a <__retarget_lock_release_recursive>
 80192a2:	89ab      	ldrh	r3, [r5, #12]
 80192a4:	065b      	lsls	r3, r3, #25
 80192a6:	f53f af1d 	bmi.w	80190e4 <_vfiprintf_r+0x44>
 80192aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192ac:	e71c      	b.n	80190e8 <_vfiprintf_r+0x48>
 80192ae:	ab03      	add	r3, sp, #12
 80192b0:	9300      	str	r3, [sp, #0]
 80192b2:	462a      	mov	r2, r5
 80192b4:	4b05      	ldr	r3, [pc, #20]	; (80192cc <_vfiprintf_r+0x22c>)
 80192b6:	a904      	add	r1, sp, #16
 80192b8:	4630      	mov	r0, r6
 80192ba:	f000 f879 	bl	80193b0 <_printf_i>
 80192be:	e7e4      	b.n	801928a <_vfiprintf_r+0x1ea>
 80192c0:	0801d515 	.word	0x0801d515
 80192c4:	0801d51f 	.word	0x0801d51f
 80192c8:	00000000 	.word	0x00000000
 80192cc:	0801907b 	.word	0x0801907b
 80192d0:	0801d51b 	.word	0x0801d51b

080192d4 <_printf_common>:
 80192d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192d8:	4616      	mov	r6, r2
 80192da:	4699      	mov	r9, r3
 80192dc:	688a      	ldr	r2, [r1, #8]
 80192de:	690b      	ldr	r3, [r1, #16]
 80192e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80192e4:	4293      	cmp	r3, r2
 80192e6:	bfb8      	it	lt
 80192e8:	4613      	movlt	r3, r2
 80192ea:	6033      	str	r3, [r6, #0]
 80192ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80192f0:	4607      	mov	r7, r0
 80192f2:	460c      	mov	r4, r1
 80192f4:	b10a      	cbz	r2, 80192fa <_printf_common+0x26>
 80192f6:	3301      	adds	r3, #1
 80192f8:	6033      	str	r3, [r6, #0]
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	0699      	lsls	r1, r3, #26
 80192fe:	bf42      	ittt	mi
 8019300:	6833      	ldrmi	r3, [r6, #0]
 8019302:	3302      	addmi	r3, #2
 8019304:	6033      	strmi	r3, [r6, #0]
 8019306:	6825      	ldr	r5, [r4, #0]
 8019308:	f015 0506 	ands.w	r5, r5, #6
 801930c:	d106      	bne.n	801931c <_printf_common+0x48>
 801930e:	f104 0a19 	add.w	sl, r4, #25
 8019312:	68e3      	ldr	r3, [r4, #12]
 8019314:	6832      	ldr	r2, [r6, #0]
 8019316:	1a9b      	subs	r3, r3, r2
 8019318:	42ab      	cmp	r3, r5
 801931a:	dc26      	bgt.n	801936a <_printf_common+0x96>
 801931c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019320:	1e13      	subs	r3, r2, #0
 8019322:	6822      	ldr	r2, [r4, #0]
 8019324:	bf18      	it	ne
 8019326:	2301      	movne	r3, #1
 8019328:	0692      	lsls	r2, r2, #26
 801932a:	d42b      	bmi.n	8019384 <_printf_common+0xb0>
 801932c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019330:	4649      	mov	r1, r9
 8019332:	4638      	mov	r0, r7
 8019334:	47c0      	blx	r8
 8019336:	3001      	adds	r0, #1
 8019338:	d01e      	beq.n	8019378 <_printf_common+0xa4>
 801933a:	6823      	ldr	r3, [r4, #0]
 801933c:	6922      	ldr	r2, [r4, #16]
 801933e:	f003 0306 	and.w	r3, r3, #6
 8019342:	2b04      	cmp	r3, #4
 8019344:	bf02      	ittt	eq
 8019346:	68e5      	ldreq	r5, [r4, #12]
 8019348:	6833      	ldreq	r3, [r6, #0]
 801934a:	1aed      	subeq	r5, r5, r3
 801934c:	68a3      	ldr	r3, [r4, #8]
 801934e:	bf0c      	ite	eq
 8019350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019354:	2500      	movne	r5, #0
 8019356:	4293      	cmp	r3, r2
 8019358:	bfc4      	itt	gt
 801935a:	1a9b      	subgt	r3, r3, r2
 801935c:	18ed      	addgt	r5, r5, r3
 801935e:	2600      	movs	r6, #0
 8019360:	341a      	adds	r4, #26
 8019362:	42b5      	cmp	r5, r6
 8019364:	d11a      	bne.n	801939c <_printf_common+0xc8>
 8019366:	2000      	movs	r0, #0
 8019368:	e008      	b.n	801937c <_printf_common+0xa8>
 801936a:	2301      	movs	r3, #1
 801936c:	4652      	mov	r2, sl
 801936e:	4649      	mov	r1, r9
 8019370:	4638      	mov	r0, r7
 8019372:	47c0      	blx	r8
 8019374:	3001      	adds	r0, #1
 8019376:	d103      	bne.n	8019380 <_printf_common+0xac>
 8019378:	f04f 30ff 	mov.w	r0, #4294967295
 801937c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019380:	3501      	adds	r5, #1
 8019382:	e7c6      	b.n	8019312 <_printf_common+0x3e>
 8019384:	18e1      	adds	r1, r4, r3
 8019386:	1c5a      	adds	r2, r3, #1
 8019388:	2030      	movs	r0, #48	; 0x30
 801938a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801938e:	4422      	add	r2, r4
 8019390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019398:	3302      	adds	r3, #2
 801939a:	e7c7      	b.n	801932c <_printf_common+0x58>
 801939c:	2301      	movs	r3, #1
 801939e:	4622      	mov	r2, r4
 80193a0:	4649      	mov	r1, r9
 80193a2:	4638      	mov	r0, r7
 80193a4:	47c0      	blx	r8
 80193a6:	3001      	adds	r0, #1
 80193a8:	d0e6      	beq.n	8019378 <_printf_common+0xa4>
 80193aa:	3601      	adds	r6, #1
 80193ac:	e7d9      	b.n	8019362 <_printf_common+0x8e>
	...

080193b0 <_printf_i>:
 80193b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80193b4:	7e0f      	ldrb	r7, [r1, #24]
 80193b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80193b8:	2f78      	cmp	r7, #120	; 0x78
 80193ba:	4691      	mov	r9, r2
 80193bc:	4680      	mov	r8, r0
 80193be:	460c      	mov	r4, r1
 80193c0:	469a      	mov	sl, r3
 80193c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80193c6:	d807      	bhi.n	80193d8 <_printf_i+0x28>
 80193c8:	2f62      	cmp	r7, #98	; 0x62
 80193ca:	d80a      	bhi.n	80193e2 <_printf_i+0x32>
 80193cc:	2f00      	cmp	r7, #0
 80193ce:	f000 80d4 	beq.w	801957a <_printf_i+0x1ca>
 80193d2:	2f58      	cmp	r7, #88	; 0x58
 80193d4:	f000 80c0 	beq.w	8019558 <_printf_i+0x1a8>
 80193d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80193dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80193e0:	e03a      	b.n	8019458 <_printf_i+0xa8>
 80193e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80193e6:	2b15      	cmp	r3, #21
 80193e8:	d8f6      	bhi.n	80193d8 <_printf_i+0x28>
 80193ea:	a101      	add	r1, pc, #4	; (adr r1, 80193f0 <_printf_i+0x40>)
 80193ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80193f0:	08019449 	.word	0x08019449
 80193f4:	0801945d 	.word	0x0801945d
 80193f8:	080193d9 	.word	0x080193d9
 80193fc:	080193d9 	.word	0x080193d9
 8019400:	080193d9 	.word	0x080193d9
 8019404:	080193d9 	.word	0x080193d9
 8019408:	0801945d 	.word	0x0801945d
 801940c:	080193d9 	.word	0x080193d9
 8019410:	080193d9 	.word	0x080193d9
 8019414:	080193d9 	.word	0x080193d9
 8019418:	080193d9 	.word	0x080193d9
 801941c:	08019561 	.word	0x08019561
 8019420:	08019489 	.word	0x08019489
 8019424:	0801951b 	.word	0x0801951b
 8019428:	080193d9 	.word	0x080193d9
 801942c:	080193d9 	.word	0x080193d9
 8019430:	08019583 	.word	0x08019583
 8019434:	080193d9 	.word	0x080193d9
 8019438:	08019489 	.word	0x08019489
 801943c:	080193d9 	.word	0x080193d9
 8019440:	080193d9 	.word	0x080193d9
 8019444:	08019523 	.word	0x08019523
 8019448:	682b      	ldr	r3, [r5, #0]
 801944a:	1d1a      	adds	r2, r3, #4
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	602a      	str	r2, [r5, #0]
 8019450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019458:	2301      	movs	r3, #1
 801945a:	e09f      	b.n	801959c <_printf_i+0x1ec>
 801945c:	6820      	ldr	r0, [r4, #0]
 801945e:	682b      	ldr	r3, [r5, #0]
 8019460:	0607      	lsls	r7, r0, #24
 8019462:	f103 0104 	add.w	r1, r3, #4
 8019466:	6029      	str	r1, [r5, #0]
 8019468:	d501      	bpl.n	801946e <_printf_i+0xbe>
 801946a:	681e      	ldr	r6, [r3, #0]
 801946c:	e003      	b.n	8019476 <_printf_i+0xc6>
 801946e:	0646      	lsls	r6, r0, #25
 8019470:	d5fb      	bpl.n	801946a <_printf_i+0xba>
 8019472:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019476:	2e00      	cmp	r6, #0
 8019478:	da03      	bge.n	8019482 <_printf_i+0xd2>
 801947a:	232d      	movs	r3, #45	; 0x2d
 801947c:	4276      	negs	r6, r6
 801947e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019482:	485a      	ldr	r0, [pc, #360]	; (80195ec <_printf_i+0x23c>)
 8019484:	230a      	movs	r3, #10
 8019486:	e012      	b.n	80194ae <_printf_i+0xfe>
 8019488:	682b      	ldr	r3, [r5, #0]
 801948a:	6820      	ldr	r0, [r4, #0]
 801948c:	1d19      	adds	r1, r3, #4
 801948e:	6029      	str	r1, [r5, #0]
 8019490:	0605      	lsls	r5, r0, #24
 8019492:	d501      	bpl.n	8019498 <_printf_i+0xe8>
 8019494:	681e      	ldr	r6, [r3, #0]
 8019496:	e002      	b.n	801949e <_printf_i+0xee>
 8019498:	0641      	lsls	r1, r0, #25
 801949a:	d5fb      	bpl.n	8019494 <_printf_i+0xe4>
 801949c:	881e      	ldrh	r6, [r3, #0]
 801949e:	4853      	ldr	r0, [pc, #332]	; (80195ec <_printf_i+0x23c>)
 80194a0:	2f6f      	cmp	r7, #111	; 0x6f
 80194a2:	bf0c      	ite	eq
 80194a4:	2308      	moveq	r3, #8
 80194a6:	230a      	movne	r3, #10
 80194a8:	2100      	movs	r1, #0
 80194aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80194ae:	6865      	ldr	r5, [r4, #4]
 80194b0:	60a5      	str	r5, [r4, #8]
 80194b2:	2d00      	cmp	r5, #0
 80194b4:	bfa2      	ittt	ge
 80194b6:	6821      	ldrge	r1, [r4, #0]
 80194b8:	f021 0104 	bicge.w	r1, r1, #4
 80194bc:	6021      	strge	r1, [r4, #0]
 80194be:	b90e      	cbnz	r6, 80194c4 <_printf_i+0x114>
 80194c0:	2d00      	cmp	r5, #0
 80194c2:	d04b      	beq.n	801955c <_printf_i+0x1ac>
 80194c4:	4615      	mov	r5, r2
 80194c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80194ca:	fb03 6711 	mls	r7, r3, r1, r6
 80194ce:	5dc7      	ldrb	r7, [r0, r7]
 80194d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80194d4:	4637      	mov	r7, r6
 80194d6:	42bb      	cmp	r3, r7
 80194d8:	460e      	mov	r6, r1
 80194da:	d9f4      	bls.n	80194c6 <_printf_i+0x116>
 80194dc:	2b08      	cmp	r3, #8
 80194de:	d10b      	bne.n	80194f8 <_printf_i+0x148>
 80194e0:	6823      	ldr	r3, [r4, #0]
 80194e2:	07de      	lsls	r6, r3, #31
 80194e4:	d508      	bpl.n	80194f8 <_printf_i+0x148>
 80194e6:	6923      	ldr	r3, [r4, #16]
 80194e8:	6861      	ldr	r1, [r4, #4]
 80194ea:	4299      	cmp	r1, r3
 80194ec:	bfde      	ittt	le
 80194ee:	2330      	movle	r3, #48	; 0x30
 80194f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80194f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80194f8:	1b52      	subs	r2, r2, r5
 80194fa:	6122      	str	r2, [r4, #16]
 80194fc:	f8cd a000 	str.w	sl, [sp]
 8019500:	464b      	mov	r3, r9
 8019502:	aa03      	add	r2, sp, #12
 8019504:	4621      	mov	r1, r4
 8019506:	4640      	mov	r0, r8
 8019508:	f7ff fee4 	bl	80192d4 <_printf_common>
 801950c:	3001      	adds	r0, #1
 801950e:	d14a      	bne.n	80195a6 <_printf_i+0x1f6>
 8019510:	f04f 30ff 	mov.w	r0, #4294967295
 8019514:	b004      	add	sp, #16
 8019516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801951a:	6823      	ldr	r3, [r4, #0]
 801951c:	f043 0320 	orr.w	r3, r3, #32
 8019520:	6023      	str	r3, [r4, #0]
 8019522:	4833      	ldr	r0, [pc, #204]	; (80195f0 <_printf_i+0x240>)
 8019524:	2778      	movs	r7, #120	; 0x78
 8019526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801952a:	6823      	ldr	r3, [r4, #0]
 801952c:	6829      	ldr	r1, [r5, #0]
 801952e:	061f      	lsls	r7, r3, #24
 8019530:	f851 6b04 	ldr.w	r6, [r1], #4
 8019534:	d402      	bmi.n	801953c <_printf_i+0x18c>
 8019536:	065f      	lsls	r7, r3, #25
 8019538:	bf48      	it	mi
 801953a:	b2b6      	uxthmi	r6, r6
 801953c:	07df      	lsls	r7, r3, #31
 801953e:	bf48      	it	mi
 8019540:	f043 0320 	orrmi.w	r3, r3, #32
 8019544:	6029      	str	r1, [r5, #0]
 8019546:	bf48      	it	mi
 8019548:	6023      	strmi	r3, [r4, #0]
 801954a:	b91e      	cbnz	r6, 8019554 <_printf_i+0x1a4>
 801954c:	6823      	ldr	r3, [r4, #0]
 801954e:	f023 0320 	bic.w	r3, r3, #32
 8019552:	6023      	str	r3, [r4, #0]
 8019554:	2310      	movs	r3, #16
 8019556:	e7a7      	b.n	80194a8 <_printf_i+0xf8>
 8019558:	4824      	ldr	r0, [pc, #144]	; (80195ec <_printf_i+0x23c>)
 801955a:	e7e4      	b.n	8019526 <_printf_i+0x176>
 801955c:	4615      	mov	r5, r2
 801955e:	e7bd      	b.n	80194dc <_printf_i+0x12c>
 8019560:	682b      	ldr	r3, [r5, #0]
 8019562:	6826      	ldr	r6, [r4, #0]
 8019564:	6961      	ldr	r1, [r4, #20]
 8019566:	1d18      	adds	r0, r3, #4
 8019568:	6028      	str	r0, [r5, #0]
 801956a:	0635      	lsls	r5, r6, #24
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	d501      	bpl.n	8019574 <_printf_i+0x1c4>
 8019570:	6019      	str	r1, [r3, #0]
 8019572:	e002      	b.n	801957a <_printf_i+0x1ca>
 8019574:	0670      	lsls	r0, r6, #25
 8019576:	d5fb      	bpl.n	8019570 <_printf_i+0x1c0>
 8019578:	8019      	strh	r1, [r3, #0]
 801957a:	2300      	movs	r3, #0
 801957c:	6123      	str	r3, [r4, #16]
 801957e:	4615      	mov	r5, r2
 8019580:	e7bc      	b.n	80194fc <_printf_i+0x14c>
 8019582:	682b      	ldr	r3, [r5, #0]
 8019584:	1d1a      	adds	r2, r3, #4
 8019586:	602a      	str	r2, [r5, #0]
 8019588:	681d      	ldr	r5, [r3, #0]
 801958a:	6862      	ldr	r2, [r4, #4]
 801958c:	2100      	movs	r1, #0
 801958e:	4628      	mov	r0, r5
 8019590:	f7e6 fe56 	bl	8000240 <memchr>
 8019594:	b108      	cbz	r0, 801959a <_printf_i+0x1ea>
 8019596:	1b40      	subs	r0, r0, r5
 8019598:	6060      	str	r0, [r4, #4]
 801959a:	6863      	ldr	r3, [r4, #4]
 801959c:	6123      	str	r3, [r4, #16]
 801959e:	2300      	movs	r3, #0
 80195a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195a4:	e7aa      	b.n	80194fc <_printf_i+0x14c>
 80195a6:	6923      	ldr	r3, [r4, #16]
 80195a8:	462a      	mov	r2, r5
 80195aa:	4649      	mov	r1, r9
 80195ac:	4640      	mov	r0, r8
 80195ae:	47d0      	blx	sl
 80195b0:	3001      	adds	r0, #1
 80195b2:	d0ad      	beq.n	8019510 <_printf_i+0x160>
 80195b4:	6823      	ldr	r3, [r4, #0]
 80195b6:	079b      	lsls	r3, r3, #30
 80195b8:	d413      	bmi.n	80195e2 <_printf_i+0x232>
 80195ba:	68e0      	ldr	r0, [r4, #12]
 80195bc:	9b03      	ldr	r3, [sp, #12]
 80195be:	4298      	cmp	r0, r3
 80195c0:	bfb8      	it	lt
 80195c2:	4618      	movlt	r0, r3
 80195c4:	e7a6      	b.n	8019514 <_printf_i+0x164>
 80195c6:	2301      	movs	r3, #1
 80195c8:	4632      	mov	r2, r6
 80195ca:	4649      	mov	r1, r9
 80195cc:	4640      	mov	r0, r8
 80195ce:	47d0      	blx	sl
 80195d0:	3001      	adds	r0, #1
 80195d2:	d09d      	beq.n	8019510 <_printf_i+0x160>
 80195d4:	3501      	adds	r5, #1
 80195d6:	68e3      	ldr	r3, [r4, #12]
 80195d8:	9903      	ldr	r1, [sp, #12]
 80195da:	1a5b      	subs	r3, r3, r1
 80195dc:	42ab      	cmp	r3, r5
 80195de:	dcf2      	bgt.n	80195c6 <_printf_i+0x216>
 80195e0:	e7eb      	b.n	80195ba <_printf_i+0x20a>
 80195e2:	2500      	movs	r5, #0
 80195e4:	f104 0619 	add.w	r6, r4, #25
 80195e8:	e7f5      	b.n	80195d6 <_printf_i+0x226>
 80195ea:	bf00      	nop
 80195ec:	0801d526 	.word	0x0801d526
 80195f0:	0801d537 	.word	0x0801d537

080195f4 <__sflush_r>:
 80195f4:	898a      	ldrh	r2, [r1, #12]
 80195f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195fa:	4605      	mov	r5, r0
 80195fc:	0710      	lsls	r0, r2, #28
 80195fe:	460c      	mov	r4, r1
 8019600:	d458      	bmi.n	80196b4 <__sflush_r+0xc0>
 8019602:	684b      	ldr	r3, [r1, #4]
 8019604:	2b00      	cmp	r3, #0
 8019606:	dc05      	bgt.n	8019614 <__sflush_r+0x20>
 8019608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801960a:	2b00      	cmp	r3, #0
 801960c:	dc02      	bgt.n	8019614 <__sflush_r+0x20>
 801960e:	2000      	movs	r0, #0
 8019610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019616:	2e00      	cmp	r6, #0
 8019618:	d0f9      	beq.n	801960e <__sflush_r+0x1a>
 801961a:	2300      	movs	r3, #0
 801961c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019620:	682f      	ldr	r7, [r5, #0]
 8019622:	6a21      	ldr	r1, [r4, #32]
 8019624:	602b      	str	r3, [r5, #0]
 8019626:	d032      	beq.n	801968e <__sflush_r+0x9a>
 8019628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801962a:	89a3      	ldrh	r3, [r4, #12]
 801962c:	075a      	lsls	r2, r3, #29
 801962e:	d505      	bpl.n	801963c <__sflush_r+0x48>
 8019630:	6863      	ldr	r3, [r4, #4]
 8019632:	1ac0      	subs	r0, r0, r3
 8019634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019636:	b10b      	cbz	r3, 801963c <__sflush_r+0x48>
 8019638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801963a:	1ac0      	subs	r0, r0, r3
 801963c:	2300      	movs	r3, #0
 801963e:	4602      	mov	r2, r0
 8019640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019642:	6a21      	ldr	r1, [r4, #32]
 8019644:	4628      	mov	r0, r5
 8019646:	47b0      	blx	r6
 8019648:	1c43      	adds	r3, r0, #1
 801964a:	89a3      	ldrh	r3, [r4, #12]
 801964c:	d106      	bne.n	801965c <__sflush_r+0x68>
 801964e:	6829      	ldr	r1, [r5, #0]
 8019650:	291d      	cmp	r1, #29
 8019652:	d82b      	bhi.n	80196ac <__sflush_r+0xb8>
 8019654:	4a29      	ldr	r2, [pc, #164]	; (80196fc <__sflush_r+0x108>)
 8019656:	410a      	asrs	r2, r1
 8019658:	07d6      	lsls	r6, r2, #31
 801965a:	d427      	bmi.n	80196ac <__sflush_r+0xb8>
 801965c:	2200      	movs	r2, #0
 801965e:	6062      	str	r2, [r4, #4]
 8019660:	04d9      	lsls	r1, r3, #19
 8019662:	6922      	ldr	r2, [r4, #16]
 8019664:	6022      	str	r2, [r4, #0]
 8019666:	d504      	bpl.n	8019672 <__sflush_r+0x7e>
 8019668:	1c42      	adds	r2, r0, #1
 801966a:	d101      	bne.n	8019670 <__sflush_r+0x7c>
 801966c:	682b      	ldr	r3, [r5, #0]
 801966e:	b903      	cbnz	r3, 8019672 <__sflush_r+0x7e>
 8019670:	6560      	str	r0, [r4, #84]	; 0x54
 8019672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019674:	602f      	str	r7, [r5, #0]
 8019676:	2900      	cmp	r1, #0
 8019678:	d0c9      	beq.n	801960e <__sflush_r+0x1a>
 801967a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801967e:	4299      	cmp	r1, r3
 8019680:	d002      	beq.n	8019688 <__sflush_r+0x94>
 8019682:	4628      	mov	r0, r5
 8019684:	f000 f924 	bl	80198d0 <_free_r>
 8019688:	2000      	movs	r0, #0
 801968a:	6360      	str	r0, [r4, #52]	; 0x34
 801968c:	e7c0      	b.n	8019610 <__sflush_r+0x1c>
 801968e:	2301      	movs	r3, #1
 8019690:	4628      	mov	r0, r5
 8019692:	47b0      	blx	r6
 8019694:	1c41      	adds	r1, r0, #1
 8019696:	d1c8      	bne.n	801962a <__sflush_r+0x36>
 8019698:	682b      	ldr	r3, [r5, #0]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d0c5      	beq.n	801962a <__sflush_r+0x36>
 801969e:	2b1d      	cmp	r3, #29
 80196a0:	d001      	beq.n	80196a6 <__sflush_r+0xb2>
 80196a2:	2b16      	cmp	r3, #22
 80196a4:	d101      	bne.n	80196aa <__sflush_r+0xb6>
 80196a6:	602f      	str	r7, [r5, #0]
 80196a8:	e7b1      	b.n	801960e <__sflush_r+0x1a>
 80196aa:	89a3      	ldrh	r3, [r4, #12]
 80196ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196b0:	81a3      	strh	r3, [r4, #12]
 80196b2:	e7ad      	b.n	8019610 <__sflush_r+0x1c>
 80196b4:	690f      	ldr	r7, [r1, #16]
 80196b6:	2f00      	cmp	r7, #0
 80196b8:	d0a9      	beq.n	801960e <__sflush_r+0x1a>
 80196ba:	0793      	lsls	r3, r2, #30
 80196bc:	680e      	ldr	r6, [r1, #0]
 80196be:	bf08      	it	eq
 80196c0:	694b      	ldreq	r3, [r1, #20]
 80196c2:	600f      	str	r7, [r1, #0]
 80196c4:	bf18      	it	ne
 80196c6:	2300      	movne	r3, #0
 80196c8:	eba6 0807 	sub.w	r8, r6, r7
 80196cc:	608b      	str	r3, [r1, #8]
 80196ce:	f1b8 0f00 	cmp.w	r8, #0
 80196d2:	dd9c      	ble.n	801960e <__sflush_r+0x1a>
 80196d4:	6a21      	ldr	r1, [r4, #32]
 80196d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80196d8:	4643      	mov	r3, r8
 80196da:	463a      	mov	r2, r7
 80196dc:	4628      	mov	r0, r5
 80196de:	47b0      	blx	r6
 80196e0:	2800      	cmp	r0, #0
 80196e2:	dc06      	bgt.n	80196f2 <__sflush_r+0xfe>
 80196e4:	89a3      	ldrh	r3, [r4, #12]
 80196e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80196ea:	81a3      	strh	r3, [r4, #12]
 80196ec:	f04f 30ff 	mov.w	r0, #4294967295
 80196f0:	e78e      	b.n	8019610 <__sflush_r+0x1c>
 80196f2:	4407      	add	r7, r0
 80196f4:	eba8 0800 	sub.w	r8, r8, r0
 80196f8:	e7e9      	b.n	80196ce <__sflush_r+0xda>
 80196fa:	bf00      	nop
 80196fc:	dfbffffe 	.word	0xdfbffffe

08019700 <_fflush_r>:
 8019700:	b538      	push	{r3, r4, r5, lr}
 8019702:	690b      	ldr	r3, [r1, #16]
 8019704:	4605      	mov	r5, r0
 8019706:	460c      	mov	r4, r1
 8019708:	b913      	cbnz	r3, 8019710 <_fflush_r+0x10>
 801970a:	2500      	movs	r5, #0
 801970c:	4628      	mov	r0, r5
 801970e:	bd38      	pop	{r3, r4, r5, pc}
 8019710:	b118      	cbz	r0, 801971a <_fflush_r+0x1a>
 8019712:	6a03      	ldr	r3, [r0, #32]
 8019714:	b90b      	cbnz	r3, 801971a <_fflush_r+0x1a>
 8019716:	f7ff fa91 	bl	8018c3c <__sinit>
 801971a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d0f3      	beq.n	801970a <_fflush_r+0xa>
 8019722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019724:	07d0      	lsls	r0, r2, #31
 8019726:	d404      	bmi.n	8019732 <_fflush_r+0x32>
 8019728:	0599      	lsls	r1, r3, #22
 801972a:	d402      	bmi.n	8019732 <_fflush_r+0x32>
 801972c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801972e:	f7ff fbab 	bl	8018e88 <__retarget_lock_acquire_recursive>
 8019732:	4628      	mov	r0, r5
 8019734:	4621      	mov	r1, r4
 8019736:	f7ff ff5d 	bl	80195f4 <__sflush_r>
 801973a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801973c:	07da      	lsls	r2, r3, #31
 801973e:	4605      	mov	r5, r0
 8019740:	d4e4      	bmi.n	801970c <_fflush_r+0xc>
 8019742:	89a3      	ldrh	r3, [r4, #12]
 8019744:	059b      	lsls	r3, r3, #22
 8019746:	d4e1      	bmi.n	801970c <_fflush_r+0xc>
 8019748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801974a:	f7ff fb9e 	bl	8018e8a <__retarget_lock_release_recursive>
 801974e:	e7dd      	b.n	801970c <_fflush_r+0xc>

08019750 <fiprintf>:
 8019750:	b40e      	push	{r1, r2, r3}
 8019752:	b503      	push	{r0, r1, lr}
 8019754:	4601      	mov	r1, r0
 8019756:	ab03      	add	r3, sp, #12
 8019758:	4805      	ldr	r0, [pc, #20]	; (8019770 <fiprintf+0x20>)
 801975a:	f853 2b04 	ldr.w	r2, [r3], #4
 801975e:	6800      	ldr	r0, [r0, #0]
 8019760:	9301      	str	r3, [sp, #4]
 8019762:	f7ff fc9d 	bl	80190a0 <_vfiprintf_r>
 8019766:	b002      	add	sp, #8
 8019768:	f85d eb04 	ldr.w	lr, [sp], #4
 801976c:	b003      	add	sp, #12
 801976e:	4770      	bx	lr
 8019770:	2000008c 	.word	0x2000008c

08019774 <__swbuf_r>:
 8019774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019776:	460e      	mov	r6, r1
 8019778:	4614      	mov	r4, r2
 801977a:	4605      	mov	r5, r0
 801977c:	b118      	cbz	r0, 8019786 <__swbuf_r+0x12>
 801977e:	6a03      	ldr	r3, [r0, #32]
 8019780:	b90b      	cbnz	r3, 8019786 <__swbuf_r+0x12>
 8019782:	f7ff fa5b 	bl	8018c3c <__sinit>
 8019786:	69a3      	ldr	r3, [r4, #24]
 8019788:	60a3      	str	r3, [r4, #8]
 801978a:	89a3      	ldrh	r3, [r4, #12]
 801978c:	071a      	lsls	r2, r3, #28
 801978e:	d525      	bpl.n	80197dc <__swbuf_r+0x68>
 8019790:	6923      	ldr	r3, [r4, #16]
 8019792:	b31b      	cbz	r3, 80197dc <__swbuf_r+0x68>
 8019794:	6823      	ldr	r3, [r4, #0]
 8019796:	6922      	ldr	r2, [r4, #16]
 8019798:	1a98      	subs	r0, r3, r2
 801979a:	6963      	ldr	r3, [r4, #20]
 801979c:	b2f6      	uxtb	r6, r6
 801979e:	4283      	cmp	r3, r0
 80197a0:	4637      	mov	r7, r6
 80197a2:	dc04      	bgt.n	80197ae <__swbuf_r+0x3a>
 80197a4:	4621      	mov	r1, r4
 80197a6:	4628      	mov	r0, r5
 80197a8:	f7ff ffaa 	bl	8019700 <_fflush_r>
 80197ac:	b9e0      	cbnz	r0, 80197e8 <__swbuf_r+0x74>
 80197ae:	68a3      	ldr	r3, [r4, #8]
 80197b0:	3b01      	subs	r3, #1
 80197b2:	60a3      	str	r3, [r4, #8]
 80197b4:	6823      	ldr	r3, [r4, #0]
 80197b6:	1c5a      	adds	r2, r3, #1
 80197b8:	6022      	str	r2, [r4, #0]
 80197ba:	701e      	strb	r6, [r3, #0]
 80197bc:	6962      	ldr	r2, [r4, #20]
 80197be:	1c43      	adds	r3, r0, #1
 80197c0:	429a      	cmp	r2, r3
 80197c2:	d004      	beq.n	80197ce <__swbuf_r+0x5a>
 80197c4:	89a3      	ldrh	r3, [r4, #12]
 80197c6:	07db      	lsls	r3, r3, #31
 80197c8:	d506      	bpl.n	80197d8 <__swbuf_r+0x64>
 80197ca:	2e0a      	cmp	r6, #10
 80197cc:	d104      	bne.n	80197d8 <__swbuf_r+0x64>
 80197ce:	4621      	mov	r1, r4
 80197d0:	4628      	mov	r0, r5
 80197d2:	f7ff ff95 	bl	8019700 <_fflush_r>
 80197d6:	b938      	cbnz	r0, 80197e8 <__swbuf_r+0x74>
 80197d8:	4638      	mov	r0, r7
 80197da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197dc:	4621      	mov	r1, r4
 80197de:	4628      	mov	r0, r5
 80197e0:	f000 f806 	bl	80197f0 <__swsetup_r>
 80197e4:	2800      	cmp	r0, #0
 80197e6:	d0d5      	beq.n	8019794 <__swbuf_r+0x20>
 80197e8:	f04f 37ff 	mov.w	r7, #4294967295
 80197ec:	e7f4      	b.n	80197d8 <__swbuf_r+0x64>
	...

080197f0 <__swsetup_r>:
 80197f0:	b538      	push	{r3, r4, r5, lr}
 80197f2:	4b2a      	ldr	r3, [pc, #168]	; (801989c <__swsetup_r+0xac>)
 80197f4:	4605      	mov	r5, r0
 80197f6:	6818      	ldr	r0, [r3, #0]
 80197f8:	460c      	mov	r4, r1
 80197fa:	b118      	cbz	r0, 8019804 <__swsetup_r+0x14>
 80197fc:	6a03      	ldr	r3, [r0, #32]
 80197fe:	b90b      	cbnz	r3, 8019804 <__swsetup_r+0x14>
 8019800:	f7ff fa1c 	bl	8018c3c <__sinit>
 8019804:	89a3      	ldrh	r3, [r4, #12]
 8019806:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801980a:	0718      	lsls	r0, r3, #28
 801980c:	d422      	bmi.n	8019854 <__swsetup_r+0x64>
 801980e:	06d9      	lsls	r1, r3, #27
 8019810:	d407      	bmi.n	8019822 <__swsetup_r+0x32>
 8019812:	2309      	movs	r3, #9
 8019814:	602b      	str	r3, [r5, #0]
 8019816:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801981a:	81a3      	strh	r3, [r4, #12]
 801981c:	f04f 30ff 	mov.w	r0, #4294967295
 8019820:	e034      	b.n	801988c <__swsetup_r+0x9c>
 8019822:	0758      	lsls	r0, r3, #29
 8019824:	d512      	bpl.n	801984c <__swsetup_r+0x5c>
 8019826:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019828:	b141      	cbz	r1, 801983c <__swsetup_r+0x4c>
 801982a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801982e:	4299      	cmp	r1, r3
 8019830:	d002      	beq.n	8019838 <__swsetup_r+0x48>
 8019832:	4628      	mov	r0, r5
 8019834:	f000 f84c 	bl	80198d0 <_free_r>
 8019838:	2300      	movs	r3, #0
 801983a:	6363      	str	r3, [r4, #52]	; 0x34
 801983c:	89a3      	ldrh	r3, [r4, #12]
 801983e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019842:	81a3      	strh	r3, [r4, #12]
 8019844:	2300      	movs	r3, #0
 8019846:	6063      	str	r3, [r4, #4]
 8019848:	6923      	ldr	r3, [r4, #16]
 801984a:	6023      	str	r3, [r4, #0]
 801984c:	89a3      	ldrh	r3, [r4, #12]
 801984e:	f043 0308 	orr.w	r3, r3, #8
 8019852:	81a3      	strh	r3, [r4, #12]
 8019854:	6923      	ldr	r3, [r4, #16]
 8019856:	b94b      	cbnz	r3, 801986c <__swsetup_r+0x7c>
 8019858:	89a3      	ldrh	r3, [r4, #12]
 801985a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801985e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019862:	d003      	beq.n	801986c <__swsetup_r+0x7c>
 8019864:	4621      	mov	r1, r4
 8019866:	4628      	mov	r0, r5
 8019868:	f000 f8a4 	bl	80199b4 <__smakebuf_r>
 801986c:	89a0      	ldrh	r0, [r4, #12]
 801986e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019872:	f010 0301 	ands.w	r3, r0, #1
 8019876:	d00a      	beq.n	801988e <__swsetup_r+0x9e>
 8019878:	2300      	movs	r3, #0
 801987a:	60a3      	str	r3, [r4, #8]
 801987c:	6963      	ldr	r3, [r4, #20]
 801987e:	425b      	negs	r3, r3
 8019880:	61a3      	str	r3, [r4, #24]
 8019882:	6923      	ldr	r3, [r4, #16]
 8019884:	b943      	cbnz	r3, 8019898 <__swsetup_r+0xa8>
 8019886:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801988a:	d1c4      	bne.n	8019816 <__swsetup_r+0x26>
 801988c:	bd38      	pop	{r3, r4, r5, pc}
 801988e:	0781      	lsls	r1, r0, #30
 8019890:	bf58      	it	pl
 8019892:	6963      	ldrpl	r3, [r4, #20]
 8019894:	60a3      	str	r3, [r4, #8]
 8019896:	e7f4      	b.n	8019882 <__swsetup_r+0x92>
 8019898:	2000      	movs	r0, #0
 801989a:	e7f7      	b.n	801988c <__swsetup_r+0x9c>
 801989c:	2000008c 	.word	0x2000008c

080198a0 <_sbrk_r>:
 80198a0:	b538      	push	{r3, r4, r5, lr}
 80198a2:	4d06      	ldr	r5, [pc, #24]	; (80198bc <_sbrk_r+0x1c>)
 80198a4:	2300      	movs	r3, #0
 80198a6:	4604      	mov	r4, r0
 80198a8:	4608      	mov	r0, r1
 80198aa:	602b      	str	r3, [r5, #0]
 80198ac:	f7e7 fc94 	bl	80011d8 <_sbrk>
 80198b0:	1c43      	adds	r3, r0, #1
 80198b2:	d102      	bne.n	80198ba <_sbrk_r+0x1a>
 80198b4:	682b      	ldr	r3, [r5, #0]
 80198b6:	b103      	cbz	r3, 80198ba <_sbrk_r+0x1a>
 80198b8:	6023      	str	r3, [r4, #0]
 80198ba:	bd38      	pop	{r3, r4, r5, pc}
 80198bc:	2000cdbc 	.word	0x2000cdbc

080198c0 <abort>:
 80198c0:	b508      	push	{r3, lr}
 80198c2:	2006      	movs	r0, #6
 80198c4:	f000 f8da 	bl	8019a7c <raise>
 80198c8:	2001      	movs	r0, #1
 80198ca:	f7e7 fc0d 	bl	80010e8 <_exit>
	...

080198d0 <_free_r>:
 80198d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80198d2:	2900      	cmp	r1, #0
 80198d4:	d044      	beq.n	8019960 <_free_r+0x90>
 80198d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80198da:	9001      	str	r0, [sp, #4]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	f1a1 0404 	sub.w	r4, r1, #4
 80198e2:	bfb8      	it	lt
 80198e4:	18e4      	addlt	r4, r4, r3
 80198e6:	f7ff fba5 	bl	8019034 <__malloc_lock>
 80198ea:	4a1e      	ldr	r2, [pc, #120]	; (8019964 <_free_r+0x94>)
 80198ec:	9801      	ldr	r0, [sp, #4]
 80198ee:	6813      	ldr	r3, [r2, #0]
 80198f0:	b933      	cbnz	r3, 8019900 <_free_r+0x30>
 80198f2:	6063      	str	r3, [r4, #4]
 80198f4:	6014      	str	r4, [r2, #0]
 80198f6:	b003      	add	sp, #12
 80198f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198fc:	f7ff bba0 	b.w	8019040 <__malloc_unlock>
 8019900:	42a3      	cmp	r3, r4
 8019902:	d908      	bls.n	8019916 <_free_r+0x46>
 8019904:	6825      	ldr	r5, [r4, #0]
 8019906:	1961      	adds	r1, r4, r5
 8019908:	428b      	cmp	r3, r1
 801990a:	bf01      	itttt	eq
 801990c:	6819      	ldreq	r1, [r3, #0]
 801990e:	685b      	ldreq	r3, [r3, #4]
 8019910:	1949      	addeq	r1, r1, r5
 8019912:	6021      	streq	r1, [r4, #0]
 8019914:	e7ed      	b.n	80198f2 <_free_r+0x22>
 8019916:	461a      	mov	r2, r3
 8019918:	685b      	ldr	r3, [r3, #4]
 801991a:	b10b      	cbz	r3, 8019920 <_free_r+0x50>
 801991c:	42a3      	cmp	r3, r4
 801991e:	d9fa      	bls.n	8019916 <_free_r+0x46>
 8019920:	6811      	ldr	r1, [r2, #0]
 8019922:	1855      	adds	r5, r2, r1
 8019924:	42a5      	cmp	r5, r4
 8019926:	d10b      	bne.n	8019940 <_free_r+0x70>
 8019928:	6824      	ldr	r4, [r4, #0]
 801992a:	4421      	add	r1, r4
 801992c:	1854      	adds	r4, r2, r1
 801992e:	42a3      	cmp	r3, r4
 8019930:	6011      	str	r1, [r2, #0]
 8019932:	d1e0      	bne.n	80198f6 <_free_r+0x26>
 8019934:	681c      	ldr	r4, [r3, #0]
 8019936:	685b      	ldr	r3, [r3, #4]
 8019938:	6053      	str	r3, [r2, #4]
 801993a:	440c      	add	r4, r1
 801993c:	6014      	str	r4, [r2, #0]
 801993e:	e7da      	b.n	80198f6 <_free_r+0x26>
 8019940:	d902      	bls.n	8019948 <_free_r+0x78>
 8019942:	230c      	movs	r3, #12
 8019944:	6003      	str	r3, [r0, #0]
 8019946:	e7d6      	b.n	80198f6 <_free_r+0x26>
 8019948:	6825      	ldr	r5, [r4, #0]
 801994a:	1961      	adds	r1, r4, r5
 801994c:	428b      	cmp	r3, r1
 801994e:	bf04      	itt	eq
 8019950:	6819      	ldreq	r1, [r3, #0]
 8019952:	685b      	ldreq	r3, [r3, #4]
 8019954:	6063      	str	r3, [r4, #4]
 8019956:	bf04      	itt	eq
 8019958:	1949      	addeq	r1, r1, r5
 801995a:	6021      	streq	r1, [r4, #0]
 801995c:	6054      	str	r4, [r2, #4]
 801995e:	e7ca      	b.n	80198f6 <_free_r+0x26>
 8019960:	b003      	add	sp, #12
 8019962:	bd30      	pop	{r4, r5, pc}
 8019964:	2000cf04 	.word	0x2000cf04

08019968 <__swhatbuf_r>:
 8019968:	b570      	push	{r4, r5, r6, lr}
 801996a:	460c      	mov	r4, r1
 801996c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019970:	2900      	cmp	r1, #0
 8019972:	b096      	sub	sp, #88	; 0x58
 8019974:	4615      	mov	r5, r2
 8019976:	461e      	mov	r6, r3
 8019978:	da0d      	bge.n	8019996 <__swhatbuf_r+0x2e>
 801997a:	89a3      	ldrh	r3, [r4, #12]
 801997c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019980:	f04f 0100 	mov.w	r1, #0
 8019984:	bf0c      	ite	eq
 8019986:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801998a:	2340      	movne	r3, #64	; 0x40
 801998c:	2000      	movs	r0, #0
 801998e:	6031      	str	r1, [r6, #0]
 8019990:	602b      	str	r3, [r5, #0]
 8019992:	b016      	add	sp, #88	; 0x58
 8019994:	bd70      	pop	{r4, r5, r6, pc}
 8019996:	466a      	mov	r2, sp
 8019998:	f000 f878 	bl	8019a8c <_fstat_r>
 801999c:	2800      	cmp	r0, #0
 801999e:	dbec      	blt.n	801997a <__swhatbuf_r+0x12>
 80199a0:	9901      	ldr	r1, [sp, #4]
 80199a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80199a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80199aa:	4259      	negs	r1, r3
 80199ac:	4159      	adcs	r1, r3
 80199ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199b2:	e7eb      	b.n	801998c <__swhatbuf_r+0x24>

080199b4 <__smakebuf_r>:
 80199b4:	898b      	ldrh	r3, [r1, #12]
 80199b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80199b8:	079d      	lsls	r5, r3, #30
 80199ba:	4606      	mov	r6, r0
 80199bc:	460c      	mov	r4, r1
 80199be:	d507      	bpl.n	80199d0 <__smakebuf_r+0x1c>
 80199c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	6123      	str	r3, [r4, #16]
 80199c8:	2301      	movs	r3, #1
 80199ca:	6163      	str	r3, [r4, #20]
 80199cc:	b002      	add	sp, #8
 80199ce:	bd70      	pop	{r4, r5, r6, pc}
 80199d0:	ab01      	add	r3, sp, #4
 80199d2:	466a      	mov	r2, sp
 80199d4:	f7ff ffc8 	bl	8019968 <__swhatbuf_r>
 80199d8:	9900      	ldr	r1, [sp, #0]
 80199da:	4605      	mov	r5, r0
 80199dc:	4630      	mov	r0, r6
 80199de:	f7ff faa9 	bl	8018f34 <_malloc_r>
 80199e2:	b948      	cbnz	r0, 80199f8 <__smakebuf_r+0x44>
 80199e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199e8:	059a      	lsls	r2, r3, #22
 80199ea:	d4ef      	bmi.n	80199cc <__smakebuf_r+0x18>
 80199ec:	f023 0303 	bic.w	r3, r3, #3
 80199f0:	f043 0302 	orr.w	r3, r3, #2
 80199f4:	81a3      	strh	r3, [r4, #12]
 80199f6:	e7e3      	b.n	80199c0 <__smakebuf_r+0xc>
 80199f8:	89a3      	ldrh	r3, [r4, #12]
 80199fa:	6020      	str	r0, [r4, #0]
 80199fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a00:	81a3      	strh	r3, [r4, #12]
 8019a02:	9b00      	ldr	r3, [sp, #0]
 8019a04:	6163      	str	r3, [r4, #20]
 8019a06:	9b01      	ldr	r3, [sp, #4]
 8019a08:	6120      	str	r0, [r4, #16]
 8019a0a:	b15b      	cbz	r3, 8019a24 <__smakebuf_r+0x70>
 8019a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019a10:	4630      	mov	r0, r6
 8019a12:	f000 f84d 	bl	8019ab0 <_isatty_r>
 8019a16:	b128      	cbz	r0, 8019a24 <__smakebuf_r+0x70>
 8019a18:	89a3      	ldrh	r3, [r4, #12]
 8019a1a:	f023 0303 	bic.w	r3, r3, #3
 8019a1e:	f043 0301 	orr.w	r3, r3, #1
 8019a22:	81a3      	strh	r3, [r4, #12]
 8019a24:	89a3      	ldrh	r3, [r4, #12]
 8019a26:	431d      	orrs	r5, r3
 8019a28:	81a5      	strh	r5, [r4, #12]
 8019a2a:	e7cf      	b.n	80199cc <__smakebuf_r+0x18>

08019a2c <_raise_r>:
 8019a2c:	291f      	cmp	r1, #31
 8019a2e:	b538      	push	{r3, r4, r5, lr}
 8019a30:	4604      	mov	r4, r0
 8019a32:	460d      	mov	r5, r1
 8019a34:	d904      	bls.n	8019a40 <_raise_r+0x14>
 8019a36:	2316      	movs	r3, #22
 8019a38:	6003      	str	r3, [r0, #0]
 8019a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a3e:	bd38      	pop	{r3, r4, r5, pc}
 8019a40:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019a42:	b112      	cbz	r2, 8019a4a <_raise_r+0x1e>
 8019a44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a48:	b94b      	cbnz	r3, 8019a5e <_raise_r+0x32>
 8019a4a:	4620      	mov	r0, r4
 8019a4c:	f000 f852 	bl	8019af4 <_getpid_r>
 8019a50:	462a      	mov	r2, r5
 8019a52:	4601      	mov	r1, r0
 8019a54:	4620      	mov	r0, r4
 8019a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a5a:	f000 b839 	b.w	8019ad0 <_kill_r>
 8019a5e:	2b01      	cmp	r3, #1
 8019a60:	d00a      	beq.n	8019a78 <_raise_r+0x4c>
 8019a62:	1c59      	adds	r1, r3, #1
 8019a64:	d103      	bne.n	8019a6e <_raise_r+0x42>
 8019a66:	2316      	movs	r3, #22
 8019a68:	6003      	str	r3, [r0, #0]
 8019a6a:	2001      	movs	r0, #1
 8019a6c:	e7e7      	b.n	8019a3e <_raise_r+0x12>
 8019a6e:	2400      	movs	r4, #0
 8019a70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019a74:	4628      	mov	r0, r5
 8019a76:	4798      	blx	r3
 8019a78:	2000      	movs	r0, #0
 8019a7a:	e7e0      	b.n	8019a3e <_raise_r+0x12>

08019a7c <raise>:
 8019a7c:	4b02      	ldr	r3, [pc, #8]	; (8019a88 <raise+0xc>)
 8019a7e:	4601      	mov	r1, r0
 8019a80:	6818      	ldr	r0, [r3, #0]
 8019a82:	f7ff bfd3 	b.w	8019a2c <_raise_r>
 8019a86:	bf00      	nop
 8019a88:	2000008c 	.word	0x2000008c

08019a8c <_fstat_r>:
 8019a8c:	b538      	push	{r3, r4, r5, lr}
 8019a8e:	4d07      	ldr	r5, [pc, #28]	; (8019aac <_fstat_r+0x20>)
 8019a90:	2300      	movs	r3, #0
 8019a92:	4604      	mov	r4, r0
 8019a94:	4608      	mov	r0, r1
 8019a96:	4611      	mov	r1, r2
 8019a98:	602b      	str	r3, [r5, #0]
 8019a9a:	f7e7 fb74 	bl	8001186 <_fstat>
 8019a9e:	1c43      	adds	r3, r0, #1
 8019aa0:	d102      	bne.n	8019aa8 <_fstat_r+0x1c>
 8019aa2:	682b      	ldr	r3, [r5, #0]
 8019aa4:	b103      	cbz	r3, 8019aa8 <_fstat_r+0x1c>
 8019aa6:	6023      	str	r3, [r4, #0]
 8019aa8:	bd38      	pop	{r3, r4, r5, pc}
 8019aaa:	bf00      	nop
 8019aac:	2000cdbc 	.word	0x2000cdbc

08019ab0 <_isatty_r>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4d06      	ldr	r5, [pc, #24]	; (8019acc <_isatty_r+0x1c>)
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	4608      	mov	r0, r1
 8019aba:	602b      	str	r3, [r5, #0]
 8019abc:	f7e7 fb73 	bl	80011a6 <_isatty>
 8019ac0:	1c43      	adds	r3, r0, #1
 8019ac2:	d102      	bne.n	8019aca <_isatty_r+0x1a>
 8019ac4:	682b      	ldr	r3, [r5, #0]
 8019ac6:	b103      	cbz	r3, 8019aca <_isatty_r+0x1a>
 8019ac8:	6023      	str	r3, [r4, #0]
 8019aca:	bd38      	pop	{r3, r4, r5, pc}
 8019acc:	2000cdbc 	.word	0x2000cdbc

08019ad0 <_kill_r>:
 8019ad0:	b538      	push	{r3, r4, r5, lr}
 8019ad2:	4d07      	ldr	r5, [pc, #28]	; (8019af0 <_kill_r+0x20>)
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	4604      	mov	r4, r0
 8019ad8:	4608      	mov	r0, r1
 8019ada:	4611      	mov	r1, r2
 8019adc:	602b      	str	r3, [r5, #0]
 8019ade:	f7e7 faf1 	bl	80010c4 <_kill>
 8019ae2:	1c43      	adds	r3, r0, #1
 8019ae4:	d102      	bne.n	8019aec <_kill_r+0x1c>
 8019ae6:	682b      	ldr	r3, [r5, #0]
 8019ae8:	b103      	cbz	r3, 8019aec <_kill_r+0x1c>
 8019aea:	6023      	str	r3, [r4, #0]
 8019aec:	bd38      	pop	{r3, r4, r5, pc}
 8019aee:	bf00      	nop
 8019af0:	2000cdbc 	.word	0x2000cdbc

08019af4 <_getpid_r>:
 8019af4:	f7e7 bade 	b.w	80010b4 <_getpid>

08019af8 <_init>:
 8019af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019afa:	bf00      	nop
 8019afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019afe:	bc08      	pop	{r3}
 8019b00:	469e      	mov	lr, r3
 8019b02:	4770      	bx	lr

08019b04 <_fini>:
 8019b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b06:	bf00      	nop
 8019b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b0a:	bc08      	pop	{r3}
 8019b0c:	469e      	mov	lr, r3
 8019b0e:	4770      	bx	lr
