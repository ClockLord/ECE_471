
ECE471_Hw3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035d8  080035d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035e0  080035e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e0  080035e0  000135e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035e4  080035e4  000135e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b4  2000000c  080035f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080035f4  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d62f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dfc  00000000  00000000  0002d6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000812  00000000  00000000  0002ff38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256eb  00000000  00000000  0003074a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d89a  00000000  00000000  00055e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ef5  00000000  00000000  000636cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b44  00000000  00000000  0014b5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0014e108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080035a8 	.word	0x080035a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080035a8 	.word	0x080035a8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <setState>:
};

void setState(enum state);

// function setState will set LEDs to desired states
void setState(enum state State){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]

	switch(State){
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d028      	beq.n	8000566 <setState+0x62>
 8000514:	2b02      	cmp	r3, #2
 8000516:	dc37      	bgt.n	8000588 <setState+0x84>
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <setState+0x1e>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d011      	beq.n	8000544 <setState+0x40>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		break;
	}

}
 8000520:	e032      	b.n	8000588 <setState+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 8000522:	2201      	movs	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	481a      	ldr	r0, [pc, #104]	; (8000590 <setState+0x8c>)
 8000528:	f000 fea0 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //red
 800052c:	2200      	movs	r2, #0
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	4817      	ldr	r0, [pc, #92]	; (8000590 <setState+0x8c>)
 8000532:	f000 fe9b 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //blue
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4814      	ldr	r0, [pc, #80]	; (8000590 <setState+0x8c>)
 800053e:	f000 fe95 	bl	800126c <HAL_GPIO_WritePin>
		break;
 8000542:	e021      	b.n	8000588 <setState+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2101      	movs	r1, #1
 8000548:	4811      	ldr	r0, [pc, #68]	; (8000590 <setState+0x8c>)
 800054a:	f000 fe8f 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <setState+0x8c>)
 8000554:	f000 fe8a 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800055e:	480c      	ldr	r0, [pc, #48]	; (8000590 <setState+0x8c>)
 8000560:	f000 fe84 	bl	800126c <HAL_GPIO_WritePin>
		break;
 8000564:	e010      	b.n	8000588 <setState+0x84>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4809      	ldr	r0, [pc, #36]	; (8000590 <setState+0x8c>)
 800056c:	f000 fe7e 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <setState+0x8c>)
 8000576:	f000 fe79 	bl	800126c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <setState+0x8c>)
 8000582:	f000 fe73 	bl	800126c <HAL_GPIO_WritePin>
		break;
 8000586:	bf00      	nop
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40020400 	.word	0x40020400

08000594 <main>:


static enum state State = led1;

int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

  HAL_Init();
 8000598:	f000 fb3d 	bl	8000c16 <HAL_Init>
  SystemClock_Config();
 800059c:	f000 f83c 	bl	8000618 <SystemClock_Config>
  MX_GPIO_Init();
 80005a0:	f000 f900 	bl	80007a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f8a0 	bl	80006e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a8:	f000 f8ce 	bl	8000748 <MX_USB_OTG_FS_PCD_Init>


  while (1)
  {
	  //check to see if the button is pressed
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4817      	ldr	r0, [pc, #92]	; (8000610 <main+0x7c>)
 80005b2:	f000 fe43 	bl	800123c <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f7      	bne.n	80005ac <main+0x18>

		  HAL_Delay(200);	//delay to prevent button debouncing
 80005bc:	20c8      	movs	r0, #200	; 0xc8
 80005be:	f000 fb87 	bl	8000cd0 <HAL_Delay>

	      if(State == led1) {
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <main+0x80>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d108      	bne.n	80005dc <main+0x48>
	    	  setState(State);
 80005ca:	4b12      	ldr	r3, [pc, #72]	; (8000614 <main+0x80>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff ff98 	bl	8000504 <setState>
	          State = led2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <main+0x80>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
 80005da:	e7e7      	b.n	80005ac <main+0x18>
	      } else if (State == led2) {
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <main+0x80>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d108      	bne.n	80005f6 <main+0x62>
	    	  setState(State);
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x80>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff8b 	bl	8000504 <setState>
	          State = led3;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0x80>)
 80005f0:	2202      	movs	r2, #2
 80005f2:	701a      	strb	r2, [r3, #0]
 80005f4:	e7da      	b.n	80005ac <main+0x18>
	      } else if (State == led3) {
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <main+0x80>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d1d6      	bne.n	80005ac <main+0x18>
	    	  setState(State);
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <main+0x80>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ff7e 	bl	8000504 <setState>
	          State = led1;
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <main+0x80>)
 800060a:	2200      	movs	r2, #0
 800060c:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 800060e:	e7cd      	b.n	80005ac <main+0x18>
 8000610:	40020800 	.word	0x40020800
 8000614:	200005b8 	.word	0x200005b8

08000618 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 ff92 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  HAL_PWR_EnableBkUpAccess();
 800063c:	f000 ff78 	bl	8001530 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f000 ff57 	bl	8001550 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 f94c 	bl	8000944 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f9e5 	bl	8001a98 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 f936 	bl	8000944 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80006ec:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_USART3_UART_Init+0x58>)
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <MX_USART3_UART_Init+0x5c>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_USART3_UART_Init+0x58>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_USART3_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_USART3_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <MX_USART3_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_USART3_UART_Init+0x58>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_USART3_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072a:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_USART3_UART_Init+0x58>)
 800072c:	f001 ffca 	bl	80026c4 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000736:	f000 f905 	bl	8000944 <Error_Handler>
  }

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000028 	.word	0x20000028
 8000744:	40004800 	.word	0x40004800

08000748 <MX_USB_OTG_FS_PCD_Init>:

static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000752:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	2206      	movs	r2, #6
 8000758:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075c:	2202      	movs	r2, #2
 800075e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000768:	2202      	movs	r2, #2
 800076a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076e:	2201      	movs	r2, #1
 8000770:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2201      	movs	r2, #1
 8000782:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	f000 fd87 	bl	800129e <HAL_PCD_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000796:	f000 f8d5 	bl	8000944 <Error_Handler>
  }

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200000b0 	.word	0x200000b0

080007a4 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	; 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b5d      	ldr	r3, [pc, #372]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a5c      	ldr	r2, [pc, #368]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	61bb      	str	r3, [r7, #24]
 80007d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d2:	4b57      	ldr	r3, [pc, #348]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a56      	ldr	r2, [pc, #344]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b54      	ldr	r3, [pc, #336]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b51      	ldr	r3, [pc, #324]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a50      	ldr	r2, [pc, #320]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b4e      	ldr	r3, [pc, #312]	; (8000930 <MX_GPIO_Init+0x18c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	4b4b      	ldr	r3, [pc, #300]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4a      	ldr	r2, [pc, #296]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	4b45      	ldr	r3, [pc, #276]	; (8000930 <MX_GPIO_Init+0x18c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a44      	ldr	r2, [pc, #272]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b42      	ldr	r3, [pc, #264]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000832:	4b3f      	ldr	r3, [pc, #252]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a3e      	ldr	r2, [pc, #248]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <MX_GPIO_Init+0x18c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f246 0181 	movw	r1, #24705	; 0x6081
 8000850:	4838      	ldr	r0, [pc, #224]	; (8000934 <MX_GPIO_Init+0x190>)
 8000852:	f000 fd0b 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4837      	ldr	r0, [pc, #220]	; (8000938 <MX_GPIO_Init+0x194>)
 800085c:	f000 fd06 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4831      	ldr	r0, [pc, #196]	; (800093c <MX_GPIO_Init+0x198>)
 8000878:	f000 fb34 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDC_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000888:	2303      	movs	r3, #3
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088c:	230b      	movs	r3, #11
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4829      	ldr	r0, [pc, #164]	; (800093c <MX_GPIO_Init+0x198>)
 8000898:	f000 fb24 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 800089c:	2306      	movs	r3, #6
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ac:	230b      	movs	r3, #11
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4822      	ldr	r0, [pc, #136]	; (8000940 <MX_GPIO_Init+0x19c>)
 80008b8:	f000 fb14 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008bc:	2330      	movs	r3, #48	; 0x30
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481b      	ldr	r0, [pc, #108]	; (800093c <MX_GPIO_Init+0x198>)
 80008d0:	f000 fb08 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|LD3_Pin|LD2_Pin;
 80008d4:	f246 0381 	movw	r3, #24705	; 0x6081
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_GPIO_Init+0x190>)
 80008ee:	f000 faf9 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008f2:	2340      	movs	r3, #64	; 0x40
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_GPIO_Init+0x194>)
 800090a:	f000 faeb 	bl	8000ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin PG11 PG13 */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|GPIO_PIN_11|GPIO_PIN_13;
 800090e:	f44f 5322 	mov.w	r3, #10368	; 0x2880
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_GPIO_Init+0x194>)
 8000924:	f000 fade 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400
 8000938:	40021800 	.word	0x40021800
 800093c:	40020800 	.word	0x40020800
 8000940:	40020000 	.word	0x40020000

08000944 <Error_Handler>:

void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop

  __disable_irq();
  while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x44>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x44>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x44>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x44>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x44>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b0aa      	sub	sp, #168	; 0xa8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 0310 	add.w	r3, r7, #16
 80009b4:	2284      	movs	r2, #132	; 0x84
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fdc9 	bl	8003550 <memset>
  if(huart->Instance==USART3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a22      	ldr	r2, [pc, #136]	; (8000a4c <HAL_UART_MspInit+0xb4>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13c      	bne.n	8000a42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fa84 	bl	8001ee4 <HAL_RCCEx_PeriphCLKConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009e2:	f7ff ffaf 	bl	8000944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 80009ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a13      	ldr	r2, [pc, #76]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0xb8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <HAL_UART_MspInit+0xbc>)
 8000a3e:	f000 fa51 	bl	8000ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	37a8      	adds	r7, #168	; 0xa8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004800 	.word	0x40004800
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020c00 	.word	0x40020c00

08000a58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	; 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	2284      	movs	r2, #132	; 0x84
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fd69 	bl	8003550 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a86:	d159      	bne.n	8000b3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a94:	f107 0318 	add.w	r3, r7, #24
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fa23 	bl	8001ee4 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000aa4:	f7ff ff4e 	bl	8000944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ac0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ada:	230a      	movs	r3, #10
 8000adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4818      	ldr	r0, [pc, #96]	; (8000b48 <HAL_PCD_MspInit+0xf0>)
 8000ae8:	f000 f9fc 	bl	8000ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b04:	4619      	mov	r1, r3
 8000b06:	4810      	ldr	r0, [pc, #64]	; (8000b48 <HAL_PCD_MspInit+0xf0>)
 8000b08:	f000 f9ec 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b16:	6353      	str	r3, [r2, #52]	; 0x34
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_PCD_MspInit+0xec>)
 8000b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b3c:	bf00      	nop
 8000b3e:	37b0      	adds	r7, #176	; 0xb0
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f000 f87a 	bl	8000c90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SystemInit+0x20>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <SystemInit+0x20>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ffd7 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fcb5 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fccd 	bl	8000594 <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c08:	080035e8 	.word	0x080035e8
  ldr r2, =_sbss
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c10:	200005c0 	.word	0x200005c0

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>

08000c16 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f92e 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f000 f805 	bl	8000c30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c26:	f7ff fe93 	bl	8000950 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f93b 	bl	8000eca <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f911 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200005bc 	.word	0x200005bc

08000cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200005bc 	.word	0x200005bc

08000cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
  {
  }
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <__NVIC_SetPriorityGrouping+0x40>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x40>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	05fa0000 	.word	0x05fa0000

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e175      	b.n	80011f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8164 	bne.w	80011ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x56>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80be 	beq.w	80011ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_GPIO_Init+0x324>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001086:	4a61      	ldr	r2, [pc, #388]	; (800120c <HAL_GPIO_Init+0x328>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d037      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d031      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a56      	ldr	r2, [pc, #344]	; (8001218 <HAL_GPIO_Init+0x334>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x338>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x33c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a53      	ldr	r2, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x340>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x22a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x344>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x348>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x34c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x350>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x21a>
 80010fa:	2309      	movs	r3, #9
 80010fc:	e012      	b.n	8001124 <HAL_GPIO_Init+0x240>
 80010fe:	230a      	movs	r3, #10
 8001100:	e010      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001102:	2308      	movs	r3, #8
 8001104:	e00e      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001106:	2307      	movs	r3, #7
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110a:	2306      	movs	r3, #6
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001122:	2300      	movs	r3, #0
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_Init+0x328>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x354>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae86 	bls.w	8000f04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40022000 	.word	0x40022000
 8001234:	40022400 	.word	0x40022400
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001254:	2301      	movs	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	e001      	b.n	800125e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800129e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a0:	b08f      	sub	sp, #60	; 0x3c
 80012a2:	af0a      	add	r7, sp, #40	; 0x28
 80012a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e116      	b.n	80014de <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fbc4 	bl	8000a58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f001 fe92 	bl	8003018 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	687e      	ldr	r6, [r7, #4]
 80012fc:	466d      	mov	r5, sp
 80012fe:	f106 0410 	add.w	r4, r6, #16
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001312:	1d33      	adds	r3, r6, #4
 8001314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f001 fe26 	bl	8002f68 <USB_CoreInit>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2202      	movs	r2, #2
 8001326:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0d7      	b.n	80014de <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fe80 	bl	800303a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e04a      	b.n	80013d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	333d      	adds	r3, #61	; 0x3d
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	4413      	add	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	333c      	adds	r3, #60	; 0x3c
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001368:	7bfa      	ldrb	r2, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	b298      	uxth	r0, r3
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3344      	adds	r3, #68	; 0x44
 800137c:	4602      	mov	r2, r0
 800137e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3340      	adds	r3, #64	; 0x40
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	3348      	adds	r3, #72	; 0x48
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	334c      	adds	r3, #76	; 0x4c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	3354      	adds	r3, #84	; 0x54
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3af      	bcc.n	8001340 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e044      	b.n	8001470 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	440b      	add	r3, r1
 80013f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3b5      	bcc.n	80013e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	687e      	ldr	r6, [r7, #4]
 8001482:	466d      	mov	r5, sp
 8001484:	f106 0410 	add.w	r4, r6, #16
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001490:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001494:	e885 0003 	stmia.w	r5, {r0, r1}
 8001498:	1d33      	adds	r3, r6, #4
 800149a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800149c:	6838      	ldr	r0, [r7, #0]
 800149e:	f001 fe19 	bl	80030d4 <USB_DevInit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2202      	movs	r2, #2
 80014ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e014      	b.n	80014de <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d102      	bne.n	80014d2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f80b 	bl	80014e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 ffd7 	bl	800348a <USB_DevDisconnect>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080014e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001516:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_PCDEx_ActivateLPM+0x44>)
 8001518:	4313      	orrs	r3, r2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	10000003 	.word	0x10000003

08001530 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	40007000 	.word	0x40007000

08001550 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e291      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8087 	beq.w	8001682 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001574:	4b96      	ldr	r3, [pc, #600]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 030c 	and.w	r3, r3, #12
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00c      	beq.n	800159a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001580:	4b93      	ldr	r3, [pc, #588]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 030c 	and.w	r3, r3, #12
 8001588:	2b08      	cmp	r3, #8
 800158a:	d112      	bne.n	80015b2 <HAL_RCC_OscConfig+0x62>
 800158c:	4b90      	ldr	r3, [pc, #576]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001598:	d10b      	bne.n	80015b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d06c      	beq.n	8001680 <HAL_RCC_OscConfig+0x130>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d168      	bne.n	8001680 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e26b      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ba:	d106      	bne.n	80015ca <HAL_RCC_OscConfig+0x7a>
 80015bc:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a83      	ldr	r2, [pc, #524]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x9c>
 80015d2:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b7c      	ldr	r3, [pc, #496]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e01d      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0xc0>
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a75      	ldr	r2, [pc, #468]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80015fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b73      	ldr	r3, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a72      	ldr	r2, [pc, #456]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0xd8>
 8001610:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a6e      	ldr	r2, [pc, #440]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a6b      	ldr	r2, [pc, #428]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fb42 	bl	8000cb8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fb3e 	bl	8000cb8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e21f      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b61      	ldr	r3, [pc, #388]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0xe8>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fb2e 	bl	8000cb8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fb2a 	bl	8000cb8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e20b      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	4b57      	ldr	r3, [pc, #348]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x110>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d069      	beq.n	8001762 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b00      	cmp	r3, #0
 8001698:	d00b      	beq.n	80016b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d11c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x190>
 80016a6:	4b4a      	ldr	r3, [pc, #296]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d116      	bne.n	80016e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <HAL_RCC_OscConfig+0x17a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e1df      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	493d      	ldr	r1, [pc, #244]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016de:	e040      	b.n	8001762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	4b39      	ldr	r3, [pc, #228]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a38      	ldr	r2, [pc, #224]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fae0 	bl	8000cb8 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fadc 	bl	8000cb8 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e1bd      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b30      	ldr	r3, [pc, #192]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f0      	beq.n	80016fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b2d      	ldr	r3, [pc, #180]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
 800172e:	e018      	b.n	8001762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a26      	ldr	r2, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fabc 	bl	8000cb8 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fab8 	bl	8000cb8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e199      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d038      	beq.n	80017e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d019      	beq.n	80017aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 8001778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001782:	f7ff fa99 	bl	8000cb8 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800178a:	f7ff fa95 	bl	8000cb8 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e176      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x23a>
 80017a8:	e01a      	b.n	80017e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fa7f 	bl	8000cb8 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fa7b 	bl	8000cb8 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d903      	bls.n	80017d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e15c      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
 80017d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d4:	4b91      	ldr	r3, [pc, #580]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80017d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ee      	bne.n	80017be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f000 80a4 	beq.w	8001936 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b8b      	ldr	r3, [pc, #556]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10d      	bne.n	8001816 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a87      	ldr	r2, [pc, #540]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001812:	2301      	movs	r3, #1
 8001814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001816:	4b82      	ldr	r3, [pc, #520]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d118      	bne.n	8001854 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001822:	4b7f      	ldr	r3, [pc, #508]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7e      	ldr	r2, [pc, #504]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182e:	f7ff fa43 	bl	8000cb8 <HAL_GetTick>
 8001832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7ff fa3f 	bl	8000cb8 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e120      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001848:	4b75      	ldr	r3, [pc, #468]	; (8001a20 <HAL_RCC_OscConfig+0x4d0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f0      	beq.n	8001836 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x31a>
 800185c:	4b6f      	ldr	r3, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001860:	4a6e      	ldr	r2, [pc, #440]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	; 0x70
 8001868:	e02d      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x33c>
 8001872:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001876:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	6713      	str	r3, [r2, #112]	; 0x70
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001884:	f023 0304 	bic.w	r3, r3, #4
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x35e>
 8001894:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	4b5e      	ldr	r3, [pc, #376]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff f9f3 	bl	8000cb8 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff f9ef 	bl	8000cb8 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0ce      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x386>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fa:	f7ff f9dd 	bl	8000cb8 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f9d9 	bl	8000cb8 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0b8      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a4 	beq.w	8001a88 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001940:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d06b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d149      	bne.n	80019e8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a30      	ldr	r2, [pc, #192]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800195a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f9aa 	bl	8000cb8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f9a6 	bl	8000cb8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e087      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69da      	ldr	r2, [r3, #28]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	431a      	orrs	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	019b      	lsls	r3, r3, #6
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	3b01      	subs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	4313      	orrs	r3, r2
 80019ac:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019b2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a18      	ldr	r2, [pc, #96]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff f97a 	bl	8000cb8 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f976 	bl	8000cb8 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e057      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x478>
 80019e6:	e04f      	b.n	8001a88 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff f960 	bl	8000cb8 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f95c 	bl	8000cb8 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e03d      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x4ac>
 8001a1a:	e035      	b.n	8001a88 <HAL_RCC_OscConfig+0x538>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_OscConfig+0x544>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d028      	beq.n	8001a84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d121      	bne.n	8001a84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d11a      	bne.n	8001a84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a5a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d111      	bne.n	8001a84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	085b      	lsrs	r3, r3, #1
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0d0      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 030f 	and.w	r3, r3, #15
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d910      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b67      	ldr	r3, [pc, #412]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 020f 	bic.w	r2, r3, #15
 8001ac6:	4965      	ldr	r1, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d040      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d115      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e073      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06b      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7a:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 0203 	bic.w	r2, r3, #3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4936      	ldr	r1, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f894 	bl	8000cb8 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b94:	f7ff f890 	bl	8000cb8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e053      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 020c 	and.w	r2, r3, #12
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d1eb      	bne.n	8001b94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 030f 	and.w	r3, r3, #15
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d210      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bca:	4b24      	ldr	r3, [pc, #144]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 020f 	bic.w	r2, r3, #15
 8001bd2:	4922      	ldr	r1, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1cc>)
 8001c3c:	5ccb      	ldrb	r3, [r1, r3]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1d0>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1d4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fff0 	bl	8000c30 <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080035c0 	.word	0x080035c0
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c74:	b094      	sub	sp, #80	; 0x50
 8001c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c80:	2300      	movs	r3, #0
 8001c82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c88:	4b79      	ldr	r3, [pc, #484]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d00d      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	f200 80e1 	bhi.w	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x3a>
 8001ca2:	e0db      	b.n	8001e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca4:	4b73      	ldr	r3, [pc, #460]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca8:	e0db      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001caa:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001cae:	e0d8      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cba:	4b6d      	ldr	r3, [pc, #436]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	2200      	movs	r2, #0
 8001cce:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001cda:	2300      	movs	r3, #0
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8001cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	f04f 0000 	mov.w	r0, #0
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	0159      	lsls	r1, r3, #5
 8001cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf4:	0150      	lsls	r0, r2, #5
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	1a51      	subs	r1, r2, r1
 8001cfe:	6139      	str	r1, [r7, #16]
 8001d00:	4629      	mov	r1, r5
 8001d02:	eb63 0301 	sbc.w	r3, r3, r1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d14:	4659      	mov	r1, fp
 8001d16:	018b      	lsls	r3, r1, #6
 8001d18:	4651      	mov	r1, sl
 8001d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d1e:	4651      	mov	r1, sl
 8001d20:	018a      	lsls	r2, r1, #6
 8001d22:	4651      	mov	r1, sl
 8001d24:	ebb2 0801 	subs.w	r8, r2, r1
 8001d28:	4659      	mov	r1, fp
 8001d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d42:	4690      	mov	r8, r2
 8001d44:	4699      	mov	r9, r3
 8001d46:	4623      	mov	r3, r4
 8001d48:	eb18 0303 	adds.w	r3, r8, r3
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	462b      	mov	r3, r5
 8001d50:	eb49 0303 	adc.w	r3, r9, r3
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	f04f 0300 	mov.w	r3, #0
 8001d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d62:	4629      	mov	r1, r5
 8001d64:	024b      	lsls	r3, r1, #9
 8001d66:	4621      	mov	r1, r4
 8001d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d6c:	4621      	mov	r1, r4
 8001d6e:	024a      	lsls	r2, r1, #9
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d76:	2200      	movs	r2, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d80:	f7fe fa42 	bl	8000208 <__aeabi_uldivmod>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4613      	mov	r3, r2
 8001d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d8c:	e058      	b.n	8001e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8e:	4b38      	ldr	r3, [pc, #224]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	099b      	lsrs	r3, r3, #6
 8001d94:	2200      	movs	r2, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	4611      	mov	r1, r2
 8001d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
 8001da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001da8:	4642      	mov	r2, r8
 8001daa:	464b      	mov	r3, r9
 8001dac:	f04f 0000 	mov.w	r0, #0
 8001db0:	f04f 0100 	mov.w	r1, #0
 8001db4:	0159      	lsls	r1, r3, #5
 8001db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dba:	0150      	lsls	r0, r2, #5
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001de0:	ebb2 040a 	subs.w	r4, r2, sl
 8001de4:	eb63 050b 	sbc.w	r5, r3, fp
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	00eb      	lsls	r3, r5, #3
 8001df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001df6:	00e2      	lsls	r2, r4, #3
 8001df8:	4614      	mov	r4, r2
 8001dfa:	461d      	mov	r5, r3
 8001dfc:	4643      	mov	r3, r8
 8001dfe:	18e3      	adds	r3, r4, r3
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	464b      	mov	r3, r9
 8001e04:	eb45 0303 	adc.w	r3, r5, r3
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e16:	4629      	mov	r1, r5
 8001e18:	028b      	lsls	r3, r1, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e20:	4621      	mov	r1, r4
 8001e22:	028a      	lsls	r2, r1, #10
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
 8001e2e:	61fa      	str	r2, [r7, #28]
 8001e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e34:	f7fe f9e8 	bl	8000208 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e5a:	e002      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3750      	adds	r7, #80	; 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	00f42400 	.word	0x00f42400
 8001e78:	007a1200 	.word	0x007a1200

08001e7c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000000 	.word	0x20000000

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e98:	f7ff fff0 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0a9b      	lsrs	r3, r3, #10
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4903      	ldr	r1, [pc, #12]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	080035d0 	.word	0x080035d0

08001ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ec0:	f7ff ffdc 	bl	8001e7c <HAL_RCC_GetHCLKFreq>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	0b5b      	lsrs	r3, r3, #13
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	4903      	ldr	r1, [pc, #12]	; (8001ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed2:	5ccb      	ldrb	r3, [r1, r3]
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	080035d0 	.word	0x080035d0

08001ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d012      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4a68      	ldr	r2, [pc, #416]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f16:	6093      	str	r3, [r2, #8]
 8001f18:	4b66      	ldr	r3, [pc, #408]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f20:	4964      	ldr	r1, [pc, #400]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d017      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	4959      	ldr	r1, [pc, #356]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f7a:	4b4e      	ldr	r3, [pc, #312]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	494a      	ldr	r1, [pc, #296]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f98:	d101      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0320 	and.w	r3, r3, #32
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 808b 	beq.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fe0:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fec:	f7fe fe64 	bl	8000cb8 <HAL_GetTick>
 8001ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7fe fe60 	bl	8000cb8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b64      	cmp	r3, #100	; 0x64
 8002000:	d901      	bls.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e357      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002006:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002012:	4b28      	ldr	r3, [pc, #160]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d035      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d02e      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d114      	bne.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe fe28 	bl	8000cb8 <HAL_GetTick>
 8002068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206a:	e00a      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206c:	f7fe fe24 	bl	8000cb8 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f241 3288 	movw	r2, #5000	; 0x1388
 800207a:	4293      	cmp	r3, r2
 800207c:	d901      	bls.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e319      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0ee      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800209a:	d111      	bne.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020aa:	400b      	ands	r3, r1
 80020ac:	4901      	ldr	r1, [pc, #4]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
 80020b2:	e00b      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40007000 	.word	0x40007000
 80020bc:	0ffffcff 	.word	0x0ffffcff
 80020c0:	4baa      	ldr	r3, [pc, #680]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4aa9      	ldr	r2, [pc, #676]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020ca:	6093      	str	r3, [r2, #8]
 80020cc:	4ba7      	ldr	r3, [pc, #668]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	49a4      	ldr	r1, [pc, #656]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d010      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020ea:	4ba0      	ldr	r3, [pc, #640]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f0:	4a9e      	ldr	r2, [pc, #632]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020fa:	4b9c      	ldr	r3, [pc, #624]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	4999      	ldr	r1, [pc, #612]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002118:	4b94      	ldr	r3, [pc, #592]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002126:	4991      	ldr	r1, [pc, #580]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800213a:	4b8c      	ldr	r3, [pc, #560]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002148:	4988      	ldr	r1, [pc, #544]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800215c:	4b83      	ldr	r3, [pc, #524]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800216a:	4980      	ldr	r1, [pc, #512]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800217e:	4b7b      	ldr	r3, [pc, #492]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4977      	ldr	r1, [pc, #476]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a0:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	496f      	ldr	r1, [pc, #444]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c2:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f023 020c 	bic.w	r2, r3, #12
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d0:	4966      	ldr	r1, [pc, #408]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021e4:	4b61      	ldr	r3, [pc, #388]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	495e      	ldr	r1, [pc, #376]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002206:	4b59      	ldr	r3, [pc, #356]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002214:	4955      	ldr	r1, [pc, #340]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002216:	4313      	orrs	r3, r2
 8002218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00a      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002228:	4b50      	ldr	r3, [pc, #320]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002236:	494d      	ldr	r1, [pc, #308]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800224a:	4b48      	ldr	r3, [pc, #288]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	4944      	ldr	r1, [pc, #272]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227a:	493c      	ldr	r1, [pc, #240]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	4933      	ldr	r1, [pc, #204]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022b0:	4b2e      	ldr	r3, [pc, #184]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022be:	492b      	ldr	r1, [pc, #172]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022d2:	4b26      	ldr	r3, [pc, #152]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e0:	4922      	ldr	r1, [pc, #136]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f0:	d101      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002320:	4912      	ldr	r1, [pc, #72]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002344:	4909      	ldr	r1, [pc, #36]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d006      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80d9 	beq.w	8002512 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a01      	ldr	r2, [pc, #4]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800236a:	e001      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800236c:	40023800 	.word	0x40023800
 8002370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002372:	f7fe fca1 	bl	8000cb8 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002378:	e008      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800237a:	f7fe fc9d 	bl	8000cb8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e194      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800238c:	4b6c      	ldr	r3, [pc, #432]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d021      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11d      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023ac:	4b64      	ldr	r3, [pc, #400]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b2:	0c1b      	lsrs	r3, r3, #16
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ba:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	0e1b      	lsrs	r3, r3, #24
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	019a      	lsls	r2, r3, #6
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	041b      	lsls	r3, r3, #16
 80023d2:	431a      	orrs	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	061b      	lsls	r3, r3, #24
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	071b      	lsls	r3, r3, #28
 80023e0:	4957      	ldr	r1, [pc, #348]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02e      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d129      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002414:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241a:	0c1b      	lsrs	r3, r3, #16
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002428:	0f1b      	lsrs	r3, r3, #28
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	019a      	lsls	r2, r3, #6
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	431a      	orrs	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	071b      	lsls	r3, r3, #28
 8002448:	493d      	ldr	r1, [pc, #244]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002456:	f023 021f 	bic.w	r2, r3, #31
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	3b01      	subs	r3, #1
 8002460:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01d      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247a:	0e1b      	lsrs	r3, r3, #24
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002488:	0f1b      	lsrs	r3, r3, #28
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	019a      	lsls	r2, r3, #6
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	061b      	lsls	r3, r3, #24
 80024a2:	431a      	orrs	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	071b      	lsls	r3, r3, #28
 80024a8:	4925      	ldr	r1, [pc, #148]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d011      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	019a      	lsls	r2, r3, #6
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	071b      	lsls	r3, r3, #28
 80024d8:	4919      	ldr	r1, [pc, #100]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024e0:	4b17      	ldr	r3, [pc, #92]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fbe4 	bl	8000cb8 <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024f4:	f7fe fbe0 	bl	8000cb8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0d7      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b01      	cmp	r3, #1
 8002516:	f040 80cd 	bne.w	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002526:	f7fe fbc7 	bl	8000cb8 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800252e:	f7fe fbc3 	bl	8000cb8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d903      	bls.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0ba      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002544:	4b5e      	ldr	r3, [pc, #376]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002550:	d0ed      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800256e:	2b00      	cmp	r3, #0
 8002570:	d02e      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d12a      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	0f1b      	lsrs	r3, r3, #28
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	019a      	lsls	r2, r3, #6
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	041b      	lsls	r3, r3, #16
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	061b      	lsls	r3, r3, #24
 80025a8:	431a      	orrs	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	071b      	lsls	r3, r3, #28
 80025ae:	4944      	ldr	r1, [pc, #272]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025b6:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	493d      	ldr	r1, [pc, #244]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d022      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e4:	d11d      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ec:	0e1b      	lsrs	r3, r3, #24
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025f4:	4b32      	ldr	r3, [pc, #200]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	0f1b      	lsrs	r3, r3, #28
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	019a      	lsls	r2, r3, #6
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	071b      	lsls	r3, r3, #28
 800261a:	4929      	ldr	r1, [pc, #164]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d028      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	0e1b      	lsrs	r3, r3, #24
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800263e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	019a      	lsls	r2, r3, #6
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	041b      	lsls	r3, r3, #16
 8002654:	431a      	orrs	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	071b      	lsls	r3, r3, #28
 8002662:	4917      	ldr	r1, [pc, #92]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800266c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	4911      	ldr	r1, [pc, #68]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800268c:	f7fe fb14 	bl	8000cb8 <HAL_GetTick>
 8002690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002694:	f7fe fb10 	bl	8000cb8 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e007      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b2:	d1ef      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e040      	b.n	8002758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f956 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0201 	bic.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f82c 	bl	8002760 <UART_SetConfig>
 8002708:	4603      	mov	r3, r0
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e022      	b.n	8002758 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fa84 	bl	8002c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800272e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800273e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb0b 	bl	8002d6c <UART_CheckIdleState>
 8002756:	4603      	mov	r3, r0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba6      	ldr	r3, [pc, #664]	; (8002a24 <UART_SetConfig+0x2c4>)
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	6979      	ldr	r1, [r7, #20]
 8002794:	430b      	orrs	r3, r1
 8002796:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a94      	ldr	r2, [pc, #592]	; (8002a28 <UART_SetConfig+0x2c8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d120      	bne.n	800281e <UART_SetConfig+0xbe>
 80027dc:	4b93      	ldr	r3, [pc, #588]	; (8002a2c <UART_SetConfig+0x2cc>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d816      	bhi.n	8002818 <UART_SetConfig+0xb8>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <UART_SetConfig+0x90>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	0800280d 	.word	0x0800280d
 80027f8:	08002807 	.word	0x08002807
 80027fc:	08002813 	.word	0x08002813
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	e150      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002806:	2302      	movs	r3, #2
 8002808:	77fb      	strb	r3, [r7, #31]
 800280a:	e14d      	b.n	8002aa8 <UART_SetConfig+0x348>
 800280c:	2304      	movs	r3, #4
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e14a      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002812:	2308      	movs	r3, #8
 8002814:	77fb      	strb	r3, [r7, #31]
 8002816:	e147      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002818:	2310      	movs	r3, #16
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e144      	b.n	8002aa8 <UART_SetConfig+0x348>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a83      	ldr	r2, [pc, #524]	; (8002a30 <UART_SetConfig+0x2d0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d132      	bne.n	800288e <UART_SetConfig+0x12e>
 8002828:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <UART_SetConfig+0x2cc>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d828      	bhi.n	8002888 <UART_SetConfig+0x128>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <UART_SetConfig+0xdc>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	08002871 	.word	0x08002871
 8002840:	08002889 	.word	0x08002889
 8002844:	08002889 	.word	0x08002889
 8002848:	08002889 	.word	0x08002889
 800284c:	0800287d 	.word	0x0800287d
 8002850:	08002889 	.word	0x08002889
 8002854:	08002889 	.word	0x08002889
 8002858:	08002889 	.word	0x08002889
 800285c:	08002877 	.word	0x08002877
 8002860:	08002889 	.word	0x08002889
 8002864:	08002889 	.word	0x08002889
 8002868:	08002889 	.word	0x08002889
 800286c:	08002883 	.word	0x08002883
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e118      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002876:	2302      	movs	r3, #2
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e115      	b.n	8002aa8 <UART_SetConfig+0x348>
 800287c:	2304      	movs	r3, #4
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e112      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002882:	2308      	movs	r3, #8
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e10f      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002888:	2310      	movs	r3, #16
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e10c      	b.n	8002aa8 <UART_SetConfig+0x348>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a68      	ldr	r2, [pc, #416]	; (8002a34 <UART_SetConfig+0x2d4>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d120      	bne.n	80028da <UART_SetConfig+0x17a>
 8002898:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <UART_SetConfig+0x2cc>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80028a2:	2b30      	cmp	r3, #48	; 0x30
 80028a4:	d013      	beq.n	80028ce <UART_SetConfig+0x16e>
 80028a6:	2b30      	cmp	r3, #48	; 0x30
 80028a8:	d814      	bhi.n	80028d4 <UART_SetConfig+0x174>
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d009      	beq.n	80028c2 <UART_SetConfig+0x162>
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d810      	bhi.n	80028d4 <UART_SetConfig+0x174>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <UART_SetConfig+0x15c>
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d006      	beq.n	80028c8 <UART_SetConfig+0x168>
 80028ba:	e00b      	b.n	80028d4 <UART_SetConfig+0x174>
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	e0f2      	b.n	8002aa8 <UART_SetConfig+0x348>
 80028c2:	2302      	movs	r3, #2
 80028c4:	77fb      	strb	r3, [r7, #31]
 80028c6:	e0ef      	b.n	8002aa8 <UART_SetConfig+0x348>
 80028c8:	2304      	movs	r3, #4
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e0ec      	b.n	8002aa8 <UART_SetConfig+0x348>
 80028ce:	2308      	movs	r3, #8
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e0e9      	b.n	8002aa8 <UART_SetConfig+0x348>
 80028d4:	2310      	movs	r3, #16
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e0e6      	b.n	8002aa8 <UART_SetConfig+0x348>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a56      	ldr	r2, [pc, #344]	; (8002a38 <UART_SetConfig+0x2d8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d120      	bne.n	8002926 <UART_SetConfig+0x1c6>
 80028e4:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <UART_SetConfig+0x2cc>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028ee:	2bc0      	cmp	r3, #192	; 0xc0
 80028f0:	d013      	beq.n	800291a <UART_SetConfig+0x1ba>
 80028f2:	2bc0      	cmp	r3, #192	; 0xc0
 80028f4:	d814      	bhi.n	8002920 <UART_SetConfig+0x1c0>
 80028f6:	2b80      	cmp	r3, #128	; 0x80
 80028f8:	d009      	beq.n	800290e <UART_SetConfig+0x1ae>
 80028fa:	2b80      	cmp	r3, #128	; 0x80
 80028fc:	d810      	bhi.n	8002920 <UART_SetConfig+0x1c0>
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <UART_SetConfig+0x1a8>
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d006      	beq.n	8002914 <UART_SetConfig+0x1b4>
 8002906:	e00b      	b.n	8002920 <UART_SetConfig+0x1c0>
 8002908:	2300      	movs	r3, #0
 800290a:	77fb      	strb	r3, [r7, #31]
 800290c:	e0cc      	b.n	8002aa8 <UART_SetConfig+0x348>
 800290e:	2302      	movs	r3, #2
 8002910:	77fb      	strb	r3, [r7, #31]
 8002912:	e0c9      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002914:	2304      	movs	r3, #4
 8002916:	77fb      	strb	r3, [r7, #31]
 8002918:	e0c6      	b.n	8002aa8 <UART_SetConfig+0x348>
 800291a:	2308      	movs	r3, #8
 800291c:	77fb      	strb	r3, [r7, #31]
 800291e:	e0c3      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002920:	2310      	movs	r3, #16
 8002922:	77fb      	strb	r3, [r7, #31]
 8002924:	e0c0      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a44      	ldr	r2, [pc, #272]	; (8002a3c <UART_SetConfig+0x2dc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d125      	bne.n	800297c <UART_SetConfig+0x21c>
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <UART_SetConfig+0x2cc>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800293a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800293e:	d017      	beq.n	8002970 <UART_SetConfig+0x210>
 8002940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002944:	d817      	bhi.n	8002976 <UART_SetConfig+0x216>
 8002946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800294a:	d00b      	beq.n	8002964 <UART_SetConfig+0x204>
 800294c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002950:	d811      	bhi.n	8002976 <UART_SetConfig+0x216>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <UART_SetConfig+0x1fe>
 8002956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295a:	d006      	beq.n	800296a <UART_SetConfig+0x20a>
 800295c:	e00b      	b.n	8002976 <UART_SetConfig+0x216>
 800295e:	2300      	movs	r3, #0
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e0a1      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002964:	2302      	movs	r3, #2
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e09e      	b.n	8002aa8 <UART_SetConfig+0x348>
 800296a:	2304      	movs	r3, #4
 800296c:	77fb      	strb	r3, [r7, #31]
 800296e:	e09b      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002970:	2308      	movs	r3, #8
 8002972:	77fb      	strb	r3, [r7, #31]
 8002974:	e098      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002976:	2310      	movs	r3, #16
 8002978:	77fb      	strb	r3, [r7, #31]
 800297a:	e095      	b.n	8002aa8 <UART_SetConfig+0x348>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <UART_SetConfig+0x2e0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d125      	bne.n	80029d2 <UART_SetConfig+0x272>
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <UART_SetConfig+0x2cc>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002994:	d017      	beq.n	80029c6 <UART_SetConfig+0x266>
 8002996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800299a:	d817      	bhi.n	80029cc <UART_SetConfig+0x26c>
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a0:	d00b      	beq.n	80029ba <UART_SetConfig+0x25a>
 80029a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a6:	d811      	bhi.n	80029cc <UART_SetConfig+0x26c>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <UART_SetConfig+0x254>
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d006      	beq.n	80029c0 <UART_SetConfig+0x260>
 80029b2:	e00b      	b.n	80029cc <UART_SetConfig+0x26c>
 80029b4:	2301      	movs	r3, #1
 80029b6:	77fb      	strb	r3, [r7, #31]
 80029b8:	e076      	b.n	8002aa8 <UART_SetConfig+0x348>
 80029ba:	2302      	movs	r3, #2
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e073      	b.n	8002aa8 <UART_SetConfig+0x348>
 80029c0:	2304      	movs	r3, #4
 80029c2:	77fb      	strb	r3, [r7, #31]
 80029c4:	e070      	b.n	8002aa8 <UART_SetConfig+0x348>
 80029c6:	2308      	movs	r3, #8
 80029c8:	77fb      	strb	r3, [r7, #31]
 80029ca:	e06d      	b.n	8002aa8 <UART_SetConfig+0x348>
 80029cc:	2310      	movs	r3, #16
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e06a      	b.n	8002aa8 <UART_SetConfig+0x348>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <UART_SetConfig+0x2e4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d138      	bne.n	8002a4e <UART_SetConfig+0x2ee>
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <UART_SetConfig+0x2cc>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80029e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ea:	d017      	beq.n	8002a1c <UART_SetConfig+0x2bc>
 80029ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029f0:	d82a      	bhi.n	8002a48 <UART_SetConfig+0x2e8>
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d00b      	beq.n	8002a10 <UART_SetConfig+0x2b0>
 80029f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fc:	d824      	bhi.n	8002a48 <UART_SetConfig+0x2e8>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <UART_SetConfig+0x2aa>
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a06:	d006      	beq.n	8002a16 <UART_SetConfig+0x2b6>
 8002a08:	e01e      	b.n	8002a48 <UART_SetConfig+0x2e8>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	77fb      	strb	r3, [r7, #31]
 8002a0e:	e04b      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a10:	2302      	movs	r3, #2
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	e048      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a16:	2304      	movs	r3, #4
 8002a18:	77fb      	strb	r3, [r7, #31]
 8002a1a:	e045      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	77fb      	strb	r3, [r7, #31]
 8002a20:	e042      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a22:	bf00      	nop
 8002a24:	efff69f3 	.word	0xefff69f3
 8002a28:	40011000 	.word	0x40011000
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40004400 	.word	0x40004400
 8002a34:	40004800 	.word	0x40004800
 8002a38:	40004c00 	.word	0x40004c00
 8002a3c:	40005000 	.word	0x40005000
 8002a40:	40011400 	.word	0x40011400
 8002a44:	40007800 	.word	0x40007800
 8002a48:	2310      	movs	r3, #16
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e02c      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <UART_SetConfig+0x4bc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d125      	bne.n	8002aa4 <UART_SetConfig+0x344>
 8002a58:	4b71      	ldr	r3, [pc, #452]	; (8002c20 <UART_SetConfig+0x4c0>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a66:	d017      	beq.n	8002a98 <UART_SetConfig+0x338>
 8002a68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a6c:	d817      	bhi.n	8002a9e <UART_SetConfig+0x33e>
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a72:	d00b      	beq.n	8002a8c <UART_SetConfig+0x32c>
 8002a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a78:	d811      	bhi.n	8002a9e <UART_SetConfig+0x33e>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <UART_SetConfig+0x326>
 8002a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a82:	d006      	beq.n	8002a92 <UART_SetConfig+0x332>
 8002a84:	e00b      	b.n	8002a9e <UART_SetConfig+0x33e>
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]
 8002a8a:	e00d      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	77fb      	strb	r3, [r7, #31]
 8002a90:	e00a      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a92:	2304      	movs	r3, #4
 8002a94:	77fb      	strb	r3, [r7, #31]
 8002a96:	e007      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e004      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e001      	b.n	8002aa8 <UART_SetConfig+0x348>
 8002aa4:	2310      	movs	r3, #16
 8002aa6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab0:	d15b      	bne.n	8002b6a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002ab2:	7ffb      	ldrb	r3, [r7, #31]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d828      	bhi.n	8002b0a <UART_SetConfig+0x3aa>
 8002ab8:	a201      	add	r2, pc, #4	; (adr r2, 8002ac0 <UART_SetConfig+0x360>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ae5 	.word	0x08002ae5
 8002ac4:	08002aed 	.word	0x08002aed
 8002ac8:	08002af5 	.word	0x08002af5
 8002acc:	08002b0b 	.word	0x08002b0b
 8002ad0:	08002afb 	.word	0x08002afb
 8002ad4:	08002b0b 	.word	0x08002b0b
 8002ad8:	08002b0b 	.word	0x08002b0b
 8002adc:	08002b0b 	.word	0x08002b0b
 8002ae0:	08002b03 	.word	0x08002b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7ff f9d6 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	61b8      	str	r0, [r7, #24]
        break;
 8002aea:	e013      	b.n	8002b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aec:	f7ff f9e6 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002af0:	61b8      	str	r0, [r7, #24]
        break;
 8002af2:	e00f      	b.n	8002b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <UART_SetConfig+0x4c4>)
 8002af6:	61bb      	str	r3, [r7, #24]
        break;
 8002af8:	e00c      	b.n	8002b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002afa:	f7ff f8b9 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002afe:	61b8      	str	r0, [r7, #24]
        break;
 8002b00:	e008      	b.n	8002b14 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b06:	61bb      	str	r3, [r7, #24]
        break;
 8002b08:	e004      	b.n	8002b14 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	77bb      	strb	r3, [r7, #30]
        break;
 8002b12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d074      	beq.n	8002c04 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	d916      	bls.n	8002b64 <UART_SetConfig+0x404>
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d212      	bcs.n	8002b64 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f023 030f 	bic.w	r3, r3, #15
 8002b46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	085b      	lsrs	r3, r3, #1
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	89fb      	ldrh	r3, [r7, #14]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	89fa      	ldrh	r2, [r7, #14]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e04f      	b.n	8002c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	77bb      	strb	r3, [r7, #30]
 8002b68:	e04c      	b.n	8002c04 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d828      	bhi.n	8002bc2 <UART_SetConfig+0x462>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0x418>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002b9d 	.word	0x08002b9d
 8002b7c:	08002ba5 	.word	0x08002ba5
 8002b80:	08002bad 	.word	0x08002bad
 8002b84:	08002bc3 	.word	0x08002bc3
 8002b88:	08002bb3 	.word	0x08002bb3
 8002b8c:	08002bc3 	.word	0x08002bc3
 8002b90:	08002bc3 	.word	0x08002bc3
 8002b94:	08002bc3 	.word	0x08002bc3
 8002b98:	08002bbb 	.word	0x08002bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7ff f97a 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	61b8      	str	r0, [r7, #24]
        break;
 8002ba2:	e013      	b.n	8002bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba4:	f7ff f98a 	bl	8001ebc <HAL_RCC_GetPCLK2Freq>
 8002ba8:	61b8      	str	r0, [r7, #24]
        break;
 8002baa:	e00f      	b.n	8002bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <UART_SetConfig+0x4c4>)
 8002bae:	61bb      	str	r3, [r7, #24]
        break;
 8002bb0:	e00c      	b.n	8002bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb2:	f7ff f85d 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8002bb6:	61b8      	str	r0, [r7, #24]
        break;
 8002bb8:	e008      	b.n	8002bcc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bbe:	61bb      	str	r3, [r7, #24]
        break;
 8002bc0:	e004      	b.n	8002bcc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8002bca:	bf00      	nop
    }

    if (pclk != 0U)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	085a      	lsrs	r2, r3, #1
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	441a      	add	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d909      	bls.n	8002c00 <UART_SetConfig+0x4a0>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d205      	bcs.n	8002c00 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e001      	b.n	8002c04 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c10:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3720      	adds	r7, #32
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40007c00 	.word	0x40007c00
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400

08002c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00a      	beq.n	8002c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00a      	beq.n	8002cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01a      	beq.n	8002d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d26:	d10a      	bne.n	8002d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	605a      	str	r2, [r3, #4]
  }
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d7c:	f7fd ff9c 	bl	8000cb8 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d10e      	bne.n	8002dae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f81b 	bl	8002dda <UART_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e011      	b.n	8002dd2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b09c      	sub	sp, #112	; 0x70
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dea:	e0a7      	b.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	f000 80a3 	beq.w	8002f3c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7fd ff5f 	bl	8000cb8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x32>
 8002e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d13f      	bne.n	8002e8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e20:	667b      	str	r3, [r7, #100]	; 0x64
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e6      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3308      	adds	r3, #8
 8002e44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	663b      	str	r3, [r7, #96]	; 0x60
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e5      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e068      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d050      	beq.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea8:	d148      	bne.n	8002f3c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	e853 3f00 	ldrex	r3, [r3]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eda:	e841 2300 	strex	r3, r2, [r1]
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1e6      	bne.n	8002eb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3308      	adds	r3, #8
 8002eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	e853 3f00 	ldrex	r3, [r3]
 8002ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	f023 0301 	bic.w	r3, r3, #1
 8002efc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f06:	623a      	str	r2, [r7, #32]
 8002f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0a:	69f9      	ldr	r1, [r7, #28]
 8002f0c:	6a3a      	ldr	r2, [r7, #32]
 8002f0e:	e841 2300 	strex	r3, r2, [r1]
 8002f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1e5      	bne.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e010      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69da      	ldr	r2, [r3, #28]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	f43f af48 	beq.w	8002dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3770      	adds	r7, #112	; 0x70
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f68:	b084      	sub	sp, #16
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	f107 001c 	add.w	r0, r7, #28
 8002f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d120      	bne.n	8002fc2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <USB_CoreInit+0xac>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa96 	bl	80034e8 <USB_CoreReset>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e010      	b.n	8002fe4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa8a 	bl	80034e8 <USB_CoreReset>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10b      	bne.n	8003002 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f043 0206 	orr.w	r2, r3, #6
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800300e:	b004      	add	sp, #16
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	ffbdffbf 	.word	0xffbdffbf

08003018 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f023 0201 	bic.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d115      	bne.n	8003088 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003068:	2001      	movs	r0, #1
 800306a:	f7fd fe31 	bl	8000cd0 <HAL_Delay>
      ms++;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3301      	adds	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 fa29 	bl	80034cc <USB_GetMode>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d01e      	beq.n	80030be <USB_SetCurrentMode+0x84>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b31      	cmp	r3, #49	; 0x31
 8003084:	d9f0      	bls.n	8003068 <USB_SetCurrentMode+0x2e>
 8003086:	e01a      	b.n	80030be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d115      	bne.n	80030ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800309a:	2001      	movs	r0, #1
 800309c:	f7fd fe18 	bl	8000cd0 <HAL_Delay>
      ms++;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fa10 	bl	80034cc <USB_GetMode>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d005      	beq.n	80030be <USB_SetCurrentMode+0x84>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b31      	cmp	r3, #49	; 0x31
 80030b6:	d9f0      	bls.n	800309a <USB_SetCurrentMode+0x60>
 80030b8:	e001      	b.n	80030be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e005      	b.n	80030ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b32      	cmp	r3, #50	; 0x32
 80030c2:	d101      	bne.n	80030c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d4:	b084      	sub	sp, #16
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	e009      	b.n	8003108 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3340      	adds	r3, #64	; 0x40
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0e      	cmp	r3, #14
 800310c:	d9f2      	bls.n	80030f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11c      	bne.n	800314e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003122:	f043 0302 	orr.w	r3, r3, #2
 8003126:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e005      	b.n	800315a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003160:	461a      	mov	r2, r3
 8003162:	2300      	movs	r3, #0
 8003164:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316c:	4619      	mov	r1, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003174:	461a      	mov	r2, r3
 8003176:	680b      	ldr	r3, [r1, #0]
 8003178:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800317a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317c:	2b01      	cmp	r3, #1
 800317e:	d10c      	bne.n	800319a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	2b00      	cmp	r3, #0
 8003184:	d104      	bne.n	8003190 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f965 	bl	8003458 <USB_SetDevSpeed>
 800318e:	e008      	b.n	80031a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003190:	2101      	movs	r1, #1
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f960 	bl	8003458 <USB_SetDevSpeed>
 8003198:	e003      	b.n	80031a2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800319a:	2103      	movs	r1, #3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f95b 	bl	8003458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031a2:	2110      	movs	r1, #16
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f8f3 	bl	8003390 <USB_FlushTxFifo>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f91f 	bl	80033f8 <USB_FlushRxFifo>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	461a      	mov	r2, r3
 80031cc:	2300      	movs	r3, #0
 80031ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	461a      	mov	r2, r3
 80031e4:	2300      	movs	r3, #0
 80031e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e8:	2300      	movs	r3, #0
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e043      	b.n	8003276 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003204:	d118      	bne.n	8003238 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003218:	461a      	mov	r2, r3
 800321a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e013      	b.n	800324a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322e:	461a      	mov	r2, r3
 8003230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e008      	b.n	800324a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003244:	461a      	mov	r2, r3
 8003246:	2300      	movs	r3, #0
 8003248:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003256:	461a      	mov	r2, r3
 8003258:	2300      	movs	r3, #0
 800325a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800326e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3301      	adds	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	429a      	cmp	r2, r3
 800327c:	d3b7      	bcc.n	80031ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	e043      	b.n	800330c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329a:	d118      	bne.n	80032ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e013      	b.n	80032e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c4:	461a      	mov	r2, r3
 80032c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e008      	b.n	80032e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	2300      	movs	r3, #0
 80032f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	461a      	mov	r2, r3
 8003300:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003304:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	3301      	adds	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	429a      	cmp	r2, r3
 8003312:	d3b7      	bcc.n	8003284 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003326:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003334:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2b00      	cmp	r3, #0
 800333a:	d105      	bne.n	8003348 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f043 0210 	orr.w	r2, r3, #16
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <USB_DevInit+0x2b4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f043 0208 	orr.w	r2, r3, #8
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <USB_DevInit+0x2b8>)
 8003372:	4313      	orrs	r3, r2
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003384:	b004      	add	sp, #16
 8003386:	4770      	bx	lr
 8003388:	803c3800 	.word	0x803c3800
 800338c:	40000004 	.word	0x40000004

08003390 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	3301      	adds	r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <USB_FlushTxFifo+0x64>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d901      	bls.n	80033b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e01b      	b.n	80033e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	daf2      	bge.n	800339e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	019b      	lsls	r3, r3, #6
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <USB_FlushTxFifo+0x64>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e006      	b.n	80033e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d0f0      	beq.n	80033c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	00030d40 	.word	0x00030d40

080033f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3301      	adds	r3, #1
 8003408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <USB_FlushRxFifo+0x5c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e018      	b.n	8003448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	daf2      	bge.n	8003404 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2210      	movs	r2, #16
 8003426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3301      	adds	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a08      	ldr	r2, [pc, #32]	; (8003454 <USB_FlushRxFifo+0x5c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e006      	b.n	8003448 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b10      	cmp	r3, #16
 8003444:	d0f0      	beq.n	8003428 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	00030d40 	.word	0x00030d40

08003458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800348a:	b480      	push	{r7}
 800348c:	b085      	sub	sp, #20
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80034a4:	f023 0303 	bic.w	r3, r3, #3
 80034a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034b8:	f043 0302 	orr.w	r3, r3, #2
 80034bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0301 	and.w	r3, r3, #1
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a13      	ldr	r2, [pc, #76]	; (800354c <USB_CoreReset+0x64>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e01b      	b.n	800353e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	daf2      	bge.n	80034f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f043 0201 	orr.w	r2, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3301      	adds	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <USB_CoreReset+0x64>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d0f0      	beq.n	800351e <USB_CoreReset+0x36>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	00030d40 	.word	0x00030d40

08003550 <memset>:
 8003550:	4402      	add	r2, r0
 8003552:	4603      	mov	r3, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4d0d      	ldr	r5, [pc, #52]	; (8003598 <__libc_init_array+0x38>)
 8003564:	4c0d      	ldr	r4, [pc, #52]	; (800359c <__libc_init_array+0x3c>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	2600      	movs	r6, #0
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	4d0b      	ldr	r5, [pc, #44]	; (80035a0 <__libc_init_array+0x40>)
 8003572:	4c0c      	ldr	r4, [pc, #48]	; (80035a4 <__libc_init_array+0x44>)
 8003574:	f000 f818 	bl	80035a8 <_init>
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	2600      	movs	r6, #0
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f855 3b04 	ldr.w	r3, [r5], #4
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	080035e0 	.word	0x080035e0
 800359c:	080035e0 	.word	0x080035e0
 80035a0:	080035e0 	.word	0x080035e0
 80035a4:	080035e4 	.word	0x080035e4

080035a8 <_init>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr

080035b4 <_fini>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr
