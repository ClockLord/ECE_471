
ECE471_Hw8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008358  08008358  00018358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d4  080083d4  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  080083d4  080083d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083dc  080083dc  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080083e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000018  080083fc  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b8  0800849c  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004734  20000158  0800853c  00020158  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000488c  0800853c  0002488c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001dc2e  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e8f  00000000  00000000  0003ddf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000018a0  00000000  00000000  00041c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000132d  00000000  00000000  00043528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299d9  00000000  00000000  00044855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d417  00000000  00000000  0006e22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010156c  00000000  00000000  0008b645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000068a8  00000000  00000000  0018cbb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0019345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000158 	.word	0x20000158
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008340 	.word	0x08008340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000015c 	.word	0x2000015c
 800020c:	08008340 	.word	0x08008340

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000174 	.word	0x20000174
 800053c:	200001c8 	.word	0x200001c8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 ff9e 	bl	8001486 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f865 	bl	8000618 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa51 	bl	80009f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f8c9 	bl	80006e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9ef 	bl	8000938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 fa1d 	bl	8000998 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800055e:	f000 f911 	bl	8000784 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000562:	f000 f987 	bl	8000874 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0xb4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0220 	orr.w	r2, r2, #32
 8000574:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000576:	2108      	movs	r1, #8
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <main+0xb8>)
 800057a:	f003 f9c3 	bl	8003904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <main+0xbc>)
 8000582:	f003 f9bf 	bl	8003904 <HAL_TIM_PWM_Start>
/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PwmDataBuffer */
  osMessageQDef(PwmDataBuffer, 16, uint16_t);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0xc0>)
 8000588:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PwmDataBufferHandle = osMessageCreate(osMessageQ(PwmDataBuffer), NULL);
 8000592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f005 fee0 	bl	800635e <osMessageCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xc4>)
 80005a2:	6013      	str	r3, [r2, #0]
/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xc8>)
 80005a6:	f107 041c 	add.w	r4, r7, #28
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fe6d 	bl	800629e <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xcc>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SetPwm */
  osThreadDef(SetPwm, SetPwmTask, osPriorityHigh, 0, 128);
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xd0>)
 80005cc:	463c      	mov	r4, r7
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SetPwmHandle = osThreadCreate(osThread(SetPwm), NULL);
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fe5c 	bl	800629e <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0xd4>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f005 fe50 	bl	8006290 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xb0>
 80005f2:	bf00      	nop
 80005f4:	20000548 	.word	0x20000548
 80005f8:	200004b0 	.word	0x200004b0
 80005fc:	200004fc 	.word	0x200004fc
 8000600:	08008358 	.word	0x08008358
 8000604:	20000ae0 	.word	0x20000ae0
 8000608:	08008374 	.word	0x08008374
 800060c:	20000ad8 	.word	0x20000ad8
 8000610:	08008398 	.word	0x08008398
 8000614:	20000adc 	.word	0x20000adc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fe50 	bl	80082cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f001 ff34 	bl	80024a8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 ff13 	bl	80024c8 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fb89 	bl	8000dbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f9a1 	bl	8002a10 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 fb73 	bl	8000dbe <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */
  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ETH_Init+0x84>)
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_ETH_Init+0x88>)
 80006f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ETH_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ETH_Init+0x8c>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ETH_Init+0x8c>)
 8000700:	22e1      	movs	r2, #225	; 0xe1
 8000702:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ETH_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_ETH_Init+0x84>)
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_ETH_Init+0x8c>)
 800071a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ETH_Init+0x84>)
 800071e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000722:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ETH_Init+0x84>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_ETH_Init+0x90>)
 8000728:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_ETH_Init+0x84>)
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_ETH_Init+0x94>)
 800072e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_ETH_Init+0x84>)
 8000732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000736:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_ETH_Init+0x84>)
 800073a:	f001 f869 	bl	8001810 <HAL_ETH_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fb3b 	bl	8000dbe <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000748:	2238      	movs	r2, #56	; 0x38
 800074a:	2100      	movs	r1, #0
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_ETH_Init+0x98>)
 800074e:	f007 fdbd 	bl	80082cc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_ETH_Init+0x98>)
 8000754:	2221      	movs	r2, #33	; 0x21
 8000756:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_ETH_Init+0x98>)
 800075a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800075e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_ETH_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */
  /* USER CODE END ETH_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000400 	.word	0x20000400
 8000770:	40028000 	.word	0x40028000
 8000774:	20000ae8 	.word	0x20000ae8
 8000778:	200000b8 	.word	0x200000b8
 800077c:	20000018 	.word	0x20000018
 8000780:	200003c8 	.word	0x200003c8

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM3_Init+0xe8>)
 80007b8:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_TIM3_Init+0xec>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_TIM3_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM3_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM3_Init+0xe8>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007dc:	4823      	ldr	r0, [pc, #140]	; (800086c <MX_TIM3_Init+0xe8>)
 80007de:	f002 ff5f 	bl	80036a0 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007e8:	f000 fae9 	bl	8000dbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <MX_TIM3_Init+0xe8>)
 80007fa:	f003 fbb1 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000804:	f000 fadb 	bl	8000dbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM3_Init+0xe8>)
 800080a:	f003 f819 	bl	8003840 <HAL_TIM_PWM_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 fad3 	bl	8000dbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_TIM3_Init+0xe8>)
 8000828:	f004 f84a 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 fac4 	bl	8000dbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	2208      	movs	r2, #8
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM3_Init+0xe8>)
 800084e:	f003 fa73 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000858:	f000 fab1 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM3_Init+0xe8>)
 800085e:	f000 fbc7 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004b0 	.word	0x200004b0
 8000870:	40000400 	.word	0x40000400

08000874 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_TIM12_Init+0xbc>)
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_TIM12_Init+0xc0>)
 800089e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008c2:	f002 feed 	bl	80036a0 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fa77 	bl	8000dbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008de:	f003 fb3f 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80008e8:	f000 fa69 	bl	8000dbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ee:	f002 ffa7 	bl	8003840 <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 fa61 	bl	8000dbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000914:	f003 fa10 	bl	8003d38 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800091e:	f000 fa4e 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000924:	f000 fb64 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200004fc 	.word	0x200004fc
 8000934:	40001800 	.word	0x40001800

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_USART3_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800097c:	f004 f84c 	bl	8004a18 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 fa1a 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000548 	.word	0x20000548
 8000994:	40004800 	.word	0x40004800

08000998 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2206      	movs	r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2201      	movs	r2, #1
 80009c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	f001 fc1b 	bl	8002216 <HAL_PCD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f9ea 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200005d0 	.word	0x200005d0

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000aa0:	f001 fba0 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000aaa:	f001 fb9b 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_GPIO_Init+0x13c>)
 8000ac6:	f001 f9c9 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000ae2:	f001 f9bb 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000afa:	f001 f9af 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000b16:	f001 f9a1 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800

08000b34 <setPWM>:
	}
}


//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

		switch(value){	//set the duty cycle
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	f200 808e 	bhi.w	8000c68 <setPWM+0x134>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <setPWM+0x20>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b87 	.word	0x08000b87
 8000b5c:	08000b9b 	.word	0x08000b9b
 8000b60:	08000bb1 	.word	0x08000bb1
 8000b64:	08000bcb 	.word	0x08000bcb
 8000b68:	08000be1 	.word	0x08000be1
 8000b6c:	08000bfb 	.word	0x08000bfb
 8000b70:	08000c17 	.word	0x08000c17
 8000b74:	08000c31 	.word	0x08000c31
 8000b78:	08000c47 	.word	0x08000c47
 8000b7c:	08000c61 	.word	0x08000c61
			case 0:
				dutyCycle =0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
				break;
 8000b84:	e072      	b.n	8000c6c <setPWM+0x138>
			case 1:
				dutyCycle =(max/10);
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <setPWM+0x160>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <setPWM+0x164>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	60fb      	str	r3, [r7, #12]
				break;
 8000b98:	e068      	b.n	8000c6c <setPWM+0x138>
			case 2:
				dutyCycle =2*(max/10);
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <setPWM+0x160>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <setPWM+0x164>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
				break;
 8000bae:	e05d      	b.n	8000c6c <setPWM+0x138>
			case 3:
				dutyCycle =3*(max/10);
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <setPWM+0x160>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <setPWM+0x164>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1092      	asrs	r2, r2, #2
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
				break;
 8000bc8:	e050      	b.n	8000c6c <setPWM+0x138>
			case 4:
				dutyCycle =4*(max/10);
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <setPWM+0x160>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <setPWM+0x164>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	17db      	asrs	r3, r3, #31
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
				break;
 8000bde:	e045      	b.n	8000c6c <setPWM+0x138>
			case 5:
				dutyCycle =5*(max/10);
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <setPWM+0x160>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <setPWM+0x164>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1092      	asrs	r2, r2, #2
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
				break;
 8000bf8:	e038      	b.n	8000c6c <setPWM+0x138>
			case 6:
				dutyCycle =6*(max/10);
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <setPWM+0x160>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <setPWM+0x164>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1092      	asrs	r2, r2, #2
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
				break;
 8000c14:	e02a      	b.n	8000c6c <setPWM+0x138>
			case 7:
				dutyCycle =7*(max/10);
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <setPWM+0x160>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <setPWM+0x164>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1092      	asrs	r2, r2, #2
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
				break;
 8000c2e:	e01d      	b.n	8000c6c <setPWM+0x138>
			case 8:
				dutyCycle =8*(max/10);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <setPWM+0x160>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <setPWM+0x164>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1092      	asrs	r2, r2, #2
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	60fb      	str	r3, [r7, #12]
				break;
 8000c44:	e012      	b.n	8000c6c <setPWM+0x138>
			case 9:
				dutyCycle =9*(max/10);
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <setPWM+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <setPWM+0x164>)
 8000c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c50:	1092      	asrs	r2, r2, #2
 8000c52:	17db      	asrs	r3, r3, #31
 8000c54:	1ad2      	subs	r2, r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
				break;
 8000c5e:	e005      	b.n	8000c6c <setPWM+0x138>
			case 10:
				dutyCycle = max;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <setPWM+0x160>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
				break;
 8000c66:	e001      	b.n	8000c6c <setPWM+0x138>
			default:
				dutyCycle = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
		}

		if(led == green){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <setPWM+0x146>
			TIM3->CCR3 = dutyCycle;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <setPWM+0x168>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		else if (led == red){
			TIM12->CCR1 = dutyCycle;
		}
}
 8000c78:	e005      	b.n	8000c86 <setPWM+0x152>
		else if (led == red){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <setPWM+0x152>
			TIM12->CCR1 = dutyCycle;
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <setPWM+0x16c>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000004 	.word	0x20000004
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40001800 	.word	0x40001800

08000ca4 <checkFlag>:

void checkFlag(){	//implement blueLed functionality
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0


	if (blueFlag==false){
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <checkFlag+0x3c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	f083 0301 	eor.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d008      	beq.n	8000cc8 <checkFlag+0x24>
		osDelay(200);
 8000cb6:	20c8      	movs	r0, #200	; 0xc8
 8000cb8:	f005 fb3d 	bl	8006336 <osDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <checkFlag+0x40>)
 8000cc2:	f001 fa8f 	bl	80021e4 <HAL_GPIO_WritePin>
	}
	else if(blueFlag==true){
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		}

}
 8000cc6:	e008      	b.n	8000cda <checkFlag+0x36>
	else if(blueFlag==true){
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <checkFlag+0x3c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d004      	beq.n	8000cda <checkFlag+0x36>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <checkFlag+0x40>)
 8000cd6:	f001 fa85 	bl	80021e4 <HAL_GPIO_WritePin>
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000ae5 	.word	0x20000ae5
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <killSwitch>:

void killSwitch(){	//implement killSwitch functionality
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

	 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4808      	ldr	r0, [pc, #32]	; (8000d14 <killSwitch+0x2c>)
 8000cf2:	f001 fa5f 	bl	80021b4 <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d108      	bne.n	8000d0e <killSwitch+0x26>

		 TIM3->CCR3 = 0;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <killSwitch+0x30>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	63da      	str	r2, [r3, #60]	; 0x3c
		 TIM12->CCR1 = 0;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <killSwitch+0x34>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
		 osDelay(200);	//debouncing delay
 8000d08:	20c8      	movs	r0, #200	; 0xc8
 8000d0a:	f005 fb14 	bl	8006336 <osDelay>

	 }
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40001800 	.word	0x40001800

08000d20 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

/* Infinite loop */
	for(;;)
	{
		killSwitch();
 8000d28:	f7ff ffde 	bl	8000ce8 <killSwitch>
		checkFlag();
 8000d2c:	f7ff ffba 	bl	8000ca4 <checkFlag>
		killSwitch();
 8000d30:	e7fa      	b.n	8000d28 <StartDefaultTask+0x8>
	...

08000d34 <SetPwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetPwmTask */
void SetPwmTask(void const * argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
/* Infinite loop */
	for(;;)
	{
		 BaseType_t status;
		 uint8_t receivedData;
		 status = xQueueReceive(PwmDataBufferHandle, &receivedData, portMAX_DELAY);
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <SetPwmTask+0x5c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f107 010b 	add.w	r1, r7, #11
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f005 fdd3 	bl	80068f4 <xQueueReceive>
 8000d4e:	60f8      	str	r0, [r7, #12]

			 if(status == pdPASS){	//if the queue is recieved succesfully
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d115      	bne.n	8000d82 <SetPwmTask+0x4e>

				 blueFlag = true;	//set blueflag to true if data has been recieved
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <SetPwmTask+0x60>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]

					 if(receivedData=='r'){
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	2b72      	cmp	r3, #114	; 0x72
 8000d60:	d106      	bne.n	8000d70 <SetPwmTask+0x3c>

							 setPWM(redLed,10);
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <SetPwmTask+0x64>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	210a      	movs	r1, #10
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fee3 	bl	8000b34 <setPWM>
 8000d6e:	e008      	b.n	8000d82 <SetPwmTask+0x4e>


					 }

					 else if (receivedData=='g'){
 8000d70:	7afb      	ldrb	r3, [r7, #11]
 8000d72:	2b67      	cmp	r3, #103	; 0x67
 8000d74:	d105      	bne.n	8000d82 <SetPwmTask+0x4e>

							 setPWM(greenLed,10);
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <SetPwmTask+0x68>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	210a      	movs	r1, #10
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fed9 	bl	8000b34 <setPWM>
					 }


			 }

		 osDelay(200);
 8000d82:	20c8      	movs	r0, #200	; 0xc8
 8000d84:	f005 fad7 	bl	8006336 <osDelay>
		 blueFlag = false;	//set blueflag to false if data has not been recieved
 8000d88:	4b02      	ldr	r3, [pc, #8]	; (8000d94 <SetPwmTask+0x60>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	{
 8000d8e:	e7d5      	b.n	8000d3c <SetPwmTask+0x8>
 8000d90:	20000ae0 	.word	0x20000ae0
 8000d94:	20000ae5 	.word	0x20000ae5
 8000d98:	20000ae4 	.word	0x20000ae4
 8000d9c:	20000000 	.word	0x20000000

08000da0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db0:	d101      	bne.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000db2:	f000 fb75 	bl	80014a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc2:	b672      	cpsid	i
}
 8000dc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	210f      	movs	r1, #15
 8000e02:	f06f 0001 	mvn.w	r0, #1
 8000e06:	f000 fc47 	bl	8001698 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <HAL_ETH_MspInit+0x158>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	f040 8096 	bne.w	8000f68 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e50:	623b      	str	r3, [r7, #32]
 8000e52:	6a3b      	ldr	r3, [r7, #32]
 8000e54:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a40      	ldr	r2, [pc, #256]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e80:	61bb      	str	r3, [r7, #24]
 8000e82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e84:	4b3b      	ldr	r3, [pc, #236]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e88:	4a3a      	ldr	r2, [pc, #232]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	f043 0304 	orr.w	r3, r3, #4
 8000e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a34      	ldr	r2, [pc, #208]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a2e      	ldr	r2, [pc, #184]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b2c      	ldr	r3, [pc, #176]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed0:	4a28      	ldr	r2, [pc, #160]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <HAL_ETH_MspInit+0x15c>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ee4:	2332      	movs	r3, #50	; 0x32
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	481e      	ldr	r0, [pc, #120]	; (8000f78 <HAL_ETH_MspInit+0x160>)
 8000f00:	f000 ffac 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f04:	2386      	movs	r3, #134	; 0x86
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f14:	230b      	movs	r3, #11
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4817      	ldr	r0, [pc, #92]	; (8000f7c <HAL_ETH_MspInit+0x164>)
 8000f20:	f000 ff9c 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f36:	230b      	movs	r3, #11
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <HAL_ETH_MspInit+0x168>)
 8000f42:	f000 ff8b 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f58:	230b      	movs	r3, #11
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f60:	4619      	mov	r1, r3
 8000f62:	4808      	ldr	r0, [pc, #32]	; (8000f84 <HAL_ETH_MspInit+0x16c>)
 8000f64:	f000 ff7a 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3738      	adds	r7, #56	; 0x38
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40028000 	.word	0x40028000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021800 	.word	0x40021800

08000f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <HAL_TIM_Base_MspInit+0x5c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d10c      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000fb2:	e010      	b.n	8000fd6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_TIM_Base_MspInit+0x64>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_Base_MspInit+0x60>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40001800 	.word	0x40001800

08000ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a22      	ldr	r2, [pc, #136]	; (8001098 <HAL_TIM_MspPostInit+0xa8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11c      	bne.n	800104c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a21      	ldr	r2, [pc, #132]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800102a:	2301      	movs	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800103a:	2302      	movs	r3, #2
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <HAL_TIM_MspPostInit+0xb0>)
 8001046:	f000 ff09 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800104a:	e021      	b.n	8001090 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_TIM_MspPostInit+0xb4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d11c      	bne.n	8001090 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_MspPostInit+0xac>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800106e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001080:	2309      	movs	r3, #9
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_TIM_MspPostInit+0xb0>)
 800108c:	f000 fee6 	bl	8001e5c <HAL_GPIO_Init>
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40001800 	.word	0x40001800

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0aa      	sub	sp, #168	; 0xa8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2284      	movs	r2, #132	; 0x84
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f007 f8ff 	bl	80082cc <memset>
  if(huart->Instance==USART3)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_UART_MspInit+0xc4>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d144      	bne.n	8001162 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 feea 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010f2:	f7ff fe64 	bl	8000dbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <HAL_UART_MspInit+0xc8>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_UART_MspInit+0xc8>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_UART_MspInit+0xc8>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_UART_MspInit+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800114a:	4619      	mov	r1, r3
 800114c:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_UART_MspInit+0xcc>)
 800114e:	f000 fe85 	bl	8001e5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2105      	movs	r1, #5
 8001156:	2027      	movs	r0, #39	; 0x27
 8001158:	f000 fa9e 	bl	8001698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800115c:	2027      	movs	r0, #39	; 0x27
 800115e:	f000 fab7 	bl	80016d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	37a8      	adds	r7, #168	; 0xa8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004800 	.word	0x40004800
 8001170:	40023800 	.word	0x40023800
 8001174:	40020c00 	.word	0x40020c00

08001178 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ac      	sub	sp, #176	; 0xb0
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	2284      	movs	r2, #132	; 0x84
 8001196:	2100      	movs	r1, #0
 8001198:	4618      	mov	r0, r3
 800119a:	f007 f897 	bl	80082cc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a6:	d159      	bne.n	800125c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80011a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fe81 	bl	8002ec0 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011c4:	f7ff fdfb 	bl	8000dbe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c8:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <HAL_PCD_MspInit+0xec>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f4:	2303      	movs	r3, #3
 80011f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011fa:	230a      	movs	r3, #10
 80011fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	4619      	mov	r1, r3
 8001206:	4818      	ldr	r0, [pc, #96]	; (8001268 <HAL_PCD_MspInit+0xf0>)
 8001208:	f000 fe28 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800120c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	2300      	movs	r3, #0
 8001216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001224:	4619      	mov	r1, r3
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <HAL_PCD_MspInit+0xf0>)
 8001228:	f000 fe18 	bl	8001e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800122c:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001236:	6353      	str	r3, [r2, #52]	; 0x34
 8001238:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800123a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800123c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_PCD_MspInit+0xec>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6453      	str	r3, [r2, #68]	; 0x44
 8001250:	4b04      	ldr	r3, [pc, #16]	; (8001264 <HAL_PCD_MspInit+0xec>)
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800125c:	bf00      	nop
 800125e:	37b0      	adds	r7, #176	; 0xb0
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_InitTick+0xe4>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <HAL_InitTick+0xe4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6413      	str	r3, [r2, #64]	; 0x40
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_InitTick+0xe4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001294:	f107 0210 	add.w	r2, r7, #16
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 fddc 	bl	8002e5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012ae:	f001 fdad 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 80012b2:	6378      	str	r0, [r7, #52]	; 0x34
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b6:	f001 fda9 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <HAL_InitTick+0xe8>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	3b01      	subs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <HAL_InitTick+0xec>)
 80012d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_InitTick+0xec>)
 80012d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012dc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_InitTick+0xec>)
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_InitTick+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_InitTick+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <HAL_InitTick+0xec>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80012f6:	4818      	ldr	r0, [pc, #96]	; (8001358 <HAL_InitTick+0xec>)
 80012f8:	f002 f9d2 	bl	80036a0 <HAL_TIM_Base_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001302:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001306:	2b00      	cmp	r3, #0
 8001308:	d11b      	bne.n	8001342 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800130a:	4813      	ldr	r0, [pc, #76]	; (8001358 <HAL_InitTick+0xec>)
 800130c:	f002 fa20 	bl	8003750 <HAL_TIM_Base_Start_IT>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001316:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800131a:	2b00      	cmp	r3, #0
 800131c:	d111      	bne.n	8001342 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800131e:	201c      	movs	r0, #28
 8001320:	f000 f9d6 	bl	80016d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	d808      	bhi.n	800133c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800132a:	2200      	movs	r2, #0
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	201c      	movs	r0, #28
 8001330:	f000 f9b2 	bl	8001698 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_InitTick+0xf0>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e002      	b.n	8001342 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001346:	4618      	mov	r0, r3
 8001348:	3738      	adds	r7, #56	; 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	431bde83 	.word	0x431bde83
 8001358:	20000af0 	.word	0x20000af0
 800135c:	2000000c 	.word	0x2000000c

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM2_IRQHandler+0x10>)
 8001392:	f002 fbb1 	bl	8003af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000af0 	.word	0x20000af0

080013a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		BaseType_t xSchedulerChanged = pdFALSE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
		uint8_t buffer;
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, &buffer, 1, 0);
 80013aa:	1df9      	adds	r1, r7, #7
 80013ac:	2300      	movs	r3, #0
 80013ae:	2201      	movs	r2, #1
 80013b0:	4814      	ldr	r0, [pc, #80]	; (8001404 <USART3_IRQHandler+0x64>)
 80013b2:	f003 fc02 	bl	8004bba <HAL_UART_Receive>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]

		if (HAL_OK == status) {	//if uart has been recieved
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10e      	bne.n	80013de <USART3_IRQHandler+0x3e>

		    xQueueSendFromISR(PwmDataBufferHandle, &buffer, &xSchedulerChanged);
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <USART3_IRQHandler+0x68>)
 80013c2:	6818      	ldr	r0, [r3, #0]
 80013c4:	f107 0208 	add.w	r2, r7, #8
 80013c8:	1df9      	adds	r1, r7, #7
 80013ca:	2300      	movs	r3, #0
 80013cc:	f005 f9f1 	bl	80067b2 <xQueueGenericSendFromISR>
		    HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
 80013d0:	1df9      	adds	r1, r7, #7
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	2201      	movs	r2, #1
 80013d8:	480a      	ldr	r0, [pc, #40]	; (8001404 <USART3_IRQHandler+0x64>)
 80013da:	f003 fb6b 	bl	8004ab4 <HAL_UART_Transmit>
			//for debugging purposes
		}



		portYIELD_FROM_ISR(xSchedulerChanged);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <USART3_IRQHandler+0x54>
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <USART3_IRQHandler+0x6c>)
 80013e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	f3bf 8f4f 	dsb	sy
 80013f0:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <USART3_IRQHandler+0x64>)
 80013f6:	f003 fca5 	bl	8004d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000548 	.word	0x20000548
 8001408:	20000ae0 	.word	0x20000ae0
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143a:	490e      	ldr	r1, [pc, #56]	; (8001474 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001450:	4c0b      	ldr	r4, [pc, #44]	; (8001480 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145e:	f7ff ffd7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001462:	f006 ff3b 	bl	80082dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff f86b 	bl	8000540 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001478:	080083e4 	.word	0x080083e4
  ldr r2, =_sbss
 800147c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001480:	2000488c 	.word	0x2000488c

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>

08001486 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f8f9 	bl	8001682 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001490:	200f      	movs	r0, #15
 8001492:	f7ff feeb 	bl	800126c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001496:	f7ff fc97 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000010 	.word	0x20000010
 80014c4:	20000b3c 	.word	0x20000b3c

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	20000b3c 	.word	0x20000b3c

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	4313      	orrs	r3, r2
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x40>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	05fa0000 	.word	0x05fa0000

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff4c 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016aa:	f7ff ff61 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	6978      	ldr	r0, [r7, #20]
 80016b6:	f7ff ffb1 	bl	800161c <NVIC_EncodePriority>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff80 	bl	80015c8 <__NVIC_SetPriority>
}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff54 	bl	800158c <__NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016fa:	f7ff fee5 	bl	80014c8 <HAL_GetTick>
 80016fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d008      	beq.n	800171e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e052      	b.n	80017c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0216 	bic.w	r2, r2, #22
 800172c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800173c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	2b00      	cmp	r3, #0
 8001744:	d103      	bne.n	800174e <HAL_DMA_Abort+0x62>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0208 	bic.w	r2, r2, #8
 800175c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176e:	e013      	b.n	8001798 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001770:	f7ff feaa 	bl	80014c8 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b05      	cmp	r3, #5
 800177c:	d90c      	bls.n	8001798 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2220      	movs	r2, #32
 8001782:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2203      	movs	r2, #3
 8001788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e015      	b.n	80017c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e4      	bne.n	8001770 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	223f      	movs	r2, #63	; 0x3f
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d004      	beq.n	80017ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00c      	b.n	8001804 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06a      	b.n	80018f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2223      	movs	r2, #35	; 0x23
 8001830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff faef 	bl	8000e18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b31      	ldr	r3, [pc, #196]	; (8001900 <HAL_ETH_Init+0xf0>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a30      	ldr	r2, [pc, #192]	; (8001900 <HAL_ETH_Init+0xf0>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <HAL_ETH_Init+0xf0>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <HAL_ETH_Init+0xf4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <HAL_ETH_Init+0xf4>)
 8001858:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800185c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_ETH_Init+0xf4>)
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <HAL_ETH_Init+0xf4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_ETH_Init+0xf4>)
 800186e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001886:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001888:	f7ff fe1e 	bl	80014c8 <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800188e:	e011      	b.n	80018b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001890:	f7ff fe1a 	bl	80014c8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800189e:	d909      	bls.n	80018b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2204      	movs	r2, #4
 80018a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	22e0      	movs	r2, #224	; 0xe0
 80018ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e021      	b.n	80018f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e4      	bne.n	8001890 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f958 	bl	8001b7c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f9ff 	bl	8001cd0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 fa55 	bl	8001d82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	461a      	mov	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 f9bd 	bl	8001c60 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2210      	movs	r2, #16
 80018f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	40013800 	.word	0x40013800

08001908 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4b51      	ldr	r3, [pc, #324]	; (8001a64 <ETH_SetMACConfig+0x15c>)
 800191e:	4013      	ands	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	7c1b      	ldrb	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <ETH_SetMACConfig+0x28>
 800192a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800192e:	e000      	b.n	8001932 <ETH_SetMACConfig+0x2a>
 8001930:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	7c5b      	ldrb	r3, [r3, #17]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <ETH_SetMACConfig+0x38>
 800193a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193e:	e000      	b.n	8001942 <ETH_SetMACConfig+0x3a>
 8001940:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001942:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001948:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	7fdb      	ldrb	r3, [r3, #31]
 800194e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001950:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001956:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	7f92      	ldrb	r2, [r2, #30]
 800195c:	2a00      	cmp	r2, #0
 800195e:	d102      	bne.n	8001966 <ETH_SetMACConfig+0x5e>
 8001960:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001964:	e000      	b.n	8001968 <ETH_SetMACConfig+0x60>
 8001966:	2200      	movs	r2, #0
                        macconf->Speed |
 8001968:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	7f1b      	ldrb	r3, [r3, #28]
 800196e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001970:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001976:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	791b      	ldrb	r3, [r3, #4]
 800197c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800197e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001986:	2a00      	cmp	r2, #0
 8001988:	d102      	bne.n	8001990 <ETH_SetMACConfig+0x88>
 800198a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198e:	e000      	b.n	8001992 <ETH_SetMACConfig+0x8a>
 8001990:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001992:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	7bdb      	ldrb	r3, [r3, #15]
 8001998:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800199a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80019a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80019aa:	4313      	orrs	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7ff fd8c 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019de:	4013      	ands	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019ee:	2a00      	cmp	r2, #0
 80019f0:	d101      	bne.n	80019f6 <ETH_SetMACConfig+0xee>
 80019f2:	2280      	movs	r2, #128	; 0x80
 80019f4:	e000      	b.n	80019f8 <ETH_SetMACConfig+0xf0>
 80019f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001a06:	2a01      	cmp	r2, #1
 8001a08:	d101      	bne.n	8001a0e <ETH_SetMACConfig+0x106>
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	e000      	b.n	8001a10 <ETH_SetMACConfig+0x108>
 8001a0e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a10:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a18:	2a01      	cmp	r2, #1
 8001a1a:	d101      	bne.n	8001a20 <ETH_SetMACConfig+0x118>
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	e000      	b.n	8001a22 <ETH_SetMACConfig+0x11a>
 8001a20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a2a:	2a01      	cmp	r2, #1
 8001a2c:	d101      	bne.n	8001a32 <ETH_SetMACConfig+0x12a>
 8001a2e:	2202      	movs	r2, #2
 8001a30:	e000      	b.n	8001a34 <ETH_SetMACConfig+0x12c>
 8001a32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a34:	4313      	orrs	r3, r2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff fd47 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	ff20810f 	.word	0xff20810f

08001a68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <ETH_SetDMAConfig+0x110>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7b1b      	ldrb	r3, [r3, #12]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d102      	bne.n	8001a94 <ETH_SetDMAConfig+0x2c>
 8001a8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a92:	e000      	b.n	8001a96 <ETH_SetDMAConfig+0x2e>
 8001a94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	7b5b      	ldrb	r3, [r3, #13]
 8001a9a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a9c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	7f52      	ldrb	r2, [r2, #29]
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d102      	bne.n	8001aac <ETH_SetDMAConfig+0x44>
 8001aa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aaa:	e000      	b.n	8001aae <ETH_SetDMAConfig+0x46>
 8001aac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001aae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	7b9b      	ldrb	r3, [r3, #14]
 8001ab4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ab6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001abc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	7f1b      	ldrb	r3, [r3, #28]
 8001ac2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ac4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7f9b      	ldrb	r3, [r3, #30]
 8001aca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001acc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ad2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ada:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001adc:	4313      	orrs	r3, r2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aec:	461a      	mov	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f7ff fcee 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	791b      	ldrb	r3, [r3, #4]
 8001b16:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b1c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b22:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b28:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b30:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b32:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b3a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b40:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b4e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7ff fcbf 	bl	80014e0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	f8de3f23 	.word	0xf8de3f23

08001b7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0a6      	sub	sp, #152	; 0x98
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001bf0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fe86 	bl	8001908 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c30:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff08 	bl	8001a68 <ETH_SetDMAConfig>
}
 8001c58:	bf00      	nop
 8001c5a:	3798      	adds	r7, #152	; 0x98
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3305      	adds	r3, #5
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	3204      	adds	r2, #4
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <ETH_MACAddressConfig+0x68>)
 8001c82:	4413      	add	r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3302      	adds	r3, #2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <ETH_MACAddressConfig+0x6c>)
 8001cb2:	4413      	add	r3, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40028040 	.word	0x40028040
 8001ccc:	40028044 	.word	0x40028044

08001cd0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e03e      	b.n	8001d5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	3206      	adds	r2, #6
 8001d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d80c      	bhi.n	8001d40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	e004      	b.n	8001d4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	461a      	mov	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d9bd      	bls.n	8001cde <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d74:	611a      	str	r2, [r3, #16]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	e046      	b.n	8001e1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6919      	ldr	r1, [r3, #16]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	440b      	add	r3, r1
 8001da0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2200      	movs	r2, #0
 8001db8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001dd4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	3212      	adds	r2, #18
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d80c      	bhi.n	8001e0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	e004      	b.n	8001e18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d9b5      	bls.n	8001d90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	60da      	str	r2, [r3, #12]
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e175      	b.n	8002168 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8164 	bne.w	8002162 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x56>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80be 	beq.w	8002162 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	4b66      	ldr	r3, [pc, #408]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_GPIO_Init+0x324>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ffe:	4a61      	ldr	r2, [pc, #388]	; (8002184 <HAL_GPIO_Init+0x328>)
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	089b      	lsrs	r3, r3, #2
 8002004:	3302      	adds	r3, #2
 8002006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	220f      	movs	r2, #15
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_GPIO_Init+0x32c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d037      	beq.n	800209a <HAL_GPIO_Init+0x23e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a57      	ldr	r2, [pc, #348]	; (800218c <HAL_GPIO_Init+0x330>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d031      	beq.n	8002096 <HAL_GPIO_Init+0x23a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a56      	ldr	r2, [pc, #344]	; (8002190 <HAL_GPIO_Init+0x334>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x236>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a55      	ldr	r2, [pc, #340]	; (8002194 <HAL_GPIO_Init+0x338>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x232>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_GPIO_Init+0x33c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x22e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_GPIO_Init+0x340>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x22a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a52      	ldr	r2, [pc, #328]	; (80021a0 <HAL_GPIO_Init+0x344>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x226>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a51      	ldr	r2, [pc, #324]	; (80021a4 <HAL_GPIO_Init+0x348>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x222>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a50      	ldr	r2, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x34c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x21e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4f      	ldr	r2, [pc, #316]	; (80021ac <HAL_GPIO_Init+0x350>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x21a>
 8002072:	2309      	movs	r3, #9
 8002074:	e012      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002076:	230a      	movs	r3, #10
 8002078:	e010      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207a:	2308      	movs	r3, #8
 800207c:	e00e      	b.n	800209c <HAL_GPIO_Init+0x240>
 800207e:	2307      	movs	r3, #7
 8002080:	e00c      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002082:	2306      	movs	r3, #6
 8002084:	e00a      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002086:	2305      	movs	r3, #5
 8002088:	e008      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208a:	2304      	movs	r3, #4
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x240>
 800208e:	2303      	movs	r3, #3
 8002090:	e004      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002092:	2302      	movs	r3, #2
 8002094:	e002      	b.n	800209c <HAL_GPIO_Init+0x240>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x240>
 800209a:	2300      	movs	r3, #0
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f002 0203 	and.w	r2, r2, #3
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4093      	lsls	r3, r2
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ac:	4935      	ldr	r1, [pc, #212]	; (8002184 <HAL_GPIO_Init+0x328>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ba:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020de:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e4:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <HAL_GPIO_Init+0x354>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002108:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <HAL_GPIO_Init+0x354>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_GPIO_Init+0x354>)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <HAL_GPIO_Init+0x354>)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b0f      	cmp	r3, #15
 800216c:	f67f ae86 	bls.w	8001e7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	40013800 	.word	0x40013800
 8002188:	40020000 	.word	0x40020000
 800218c:	40020400 	.word	0x40020400
 8002190:	40020800 	.word	0x40020800
 8002194:	40020c00 	.word	0x40020c00
 8002198:	40021000 	.word	0x40021000
 800219c:	40021400 	.word	0x40021400
 80021a0:	40021800 	.word	0x40021800
 80021a4:	40021c00 	.word	0x40021c00
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40022400 	.word	0x40022400
 80021b0:	40013c00 	.word	0x40013c00

080021b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d002      	beq.n	80021d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e001      	b.n	80021d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021d2:	2300      	movs	r3, #0
 80021d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002218:	b08f      	sub	sp, #60	; 0x3c
 800221a:	af0a      	add	r7, sp, #40	; 0x28
 800221c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e116      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe ff98 	bl	8001178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f003 fd5e 	bl	8005d28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	687e      	ldr	r6, [r7, #4]
 8002274:	466d      	mov	r5, sp
 8002276:	f106 0410 	add.w	r4, r6, #16
 800227a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002286:	e885 0003 	stmia.w	r5, {r0, r1}
 800228a:	1d33      	adds	r3, r6, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f003 fcf2 	bl	8005c78 <USB_CoreInit>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0d7      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fd4c 	bl	8005d4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e04a      	b.n	800234e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	333d      	adds	r3, #61	; 0x3d
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3344      	adds	r3, #68	; 0x44
 80022f4:	4602      	mov	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	3340      	adds	r3, #64	; 0x40
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3348      	adds	r3, #72	; 0x48
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334c      	adds	r3, #76	; 0x4c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3354      	adds	r3, #84	; 0x54
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3af      	bcc.n	80022b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e044      	b.n	80023e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3b5      	bcc.n	800235e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	687e      	ldr	r6, [r7, #4]
 80023fa:	466d      	mov	r5, sp
 80023fc:	f106 0410 	add.w	r4, r6, #16
 8002400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002410:	1d33      	adds	r3, r6, #4
 8002412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002414:	6838      	ldr	r0, [r7, #0]
 8002416:	f003 fce5 	bl	8005de4 <USB_DevInit>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e014      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f80b 	bl	8002460 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fea3 	bl	800619a <USB_DevDisconnect>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002460 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002490:	4313      	orrs	r3, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	10000003 	.word	0x10000003

080024a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024d0:	2300      	movs	r3, #0
 80024d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e291      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ec:	4b96      	ldr	r3, [pc, #600]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d00c      	beq.n	8002512 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f8:	4b93      	ldr	r3, [pc, #588]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	2b08      	cmp	r3, #8
 8002502:	d112      	bne.n	800252a <HAL_RCC_OscConfig+0x62>
 8002504:	4b90      	ldr	r3, [pc, #576]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002512:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d06c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x130>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d168      	bne.n	80025f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e26b      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x7a>
 8002534:	4b84      	ldr	r3, [pc, #528]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a83      	ldr	r2, [pc, #524]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253e:	6013      	str	r3, [r2, #0]
 8002540:	e02e      	b.n	80025a0 <HAL_RCC_OscConfig+0xd8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x9c>
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a7e      	ldr	r2, [pc, #504]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7b      	ldr	r2, [pc, #492]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e01d      	b.n	80025a0 <HAL_RCC_OscConfig+0xd8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0xc0>
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b73      	ldr	r3, [pc, #460]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a72      	ldr	r2, [pc, #456]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_RCC_OscConfig+0xd8>
 8002588:	4b6f      	ldr	r3, [pc, #444]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6e      	ldr	r2, [pc, #440]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800258e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	4b6c      	ldr	r3, [pc, #432]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6b      	ldr	r2, [pc, #428]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe ff8e 	bl	80014c8 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe ff8a 	bl	80014c8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e21f      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b61      	ldr	r3, [pc, #388]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e014      	b.n	80025fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe ff7a 	bl	80014c8 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d8:	f7fe ff76 	bl	80014c8 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b64      	cmp	r3, #100	; 0x64
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e20b      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	4b57      	ldr	r3, [pc, #348]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x110>
 80025f6:	e000      	b.n	80025fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d069      	beq.n	80026da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002606:	4b50      	ldr	r3, [pc, #320]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00b      	beq.n	800262a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b08      	cmp	r3, #8
 800261c:	d11c      	bne.n	8002658 <HAL_RCC_OscConfig+0x190>
 800261e:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d116      	bne.n	8002658 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_RCC_OscConfig+0x17a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e1df      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	493d      	ldr	r1, [pc, #244]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002656:	e040      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002660:	4b39      	ldr	r3, [pc, #228]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a38      	ldr	r2, [pc, #224]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe ff2c 	bl	80014c8 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe ff28 	bl	80014c8 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e1bd      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4929      	ldr	r1, [pc, #164]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
 80026a6:	e018      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a8:	4b27      	ldr	r3, [pc, #156]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a26      	ldr	r2, [pc, #152]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe ff08 	bl	80014c8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe ff04 	bl	80014c8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e199      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d038      	beq.n	8002758 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d019      	beq.n	8002722 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f2:	4a15      	ldr	r2, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe fee5 	bl	80014c8 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7fe fee1 	bl	80014c8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e176      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x23a>
 8002720:	e01a      	b.n	8002758 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002726:	4a08      	ldr	r2, [pc, #32]	; (8002748 <HAL_RCC_OscConfig+0x280>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272e:	f7fe fecb 	bl	80014c8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe fec7 	bl	80014c8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d903      	bls.n	800274c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e15c      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
 8002748:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b91      	ldr	r3, [pc, #580]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 80a4 	beq.w	80028ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10d      	bne.n	800278e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a87      	ldr	r2, [pc, #540]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b85      	ldr	r3, [pc, #532]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278e:	4b82      	ldr	r3, [pc, #520]	; (8002998 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800279a:	4b7f      	ldr	r3, [pc, #508]	; (8002998 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7e      	ldr	r2, [pc, #504]	; (8002998 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fe8f 	bl	80014c8 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe fe8b 	bl	80014c8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e120      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c0:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x4d0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x31a>
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d8:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
 80027e0:	e02d      	b.n	800283e <HAL_RCC_OscConfig+0x376>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0x33c>
 80027ea:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a69      	ldr	r2, [pc, #420]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027f0:	f023 0301 	bic.w	r3, r3, #1
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a66      	ldr	r2, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80027fc:	f023 0304 	bic.w	r3, r3, #4
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	e01c      	b.n	800283e <HAL_RCC_OscConfig+0x376>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2b05      	cmp	r3, #5
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x35e>
 800280c:	4b61      	ldr	r3, [pc, #388]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a60      	ldr	r2, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
 8002824:	e00b      	b.n	800283e <HAL_RCC_OscConfig+0x376>
 8002826:	4b5b      	ldr	r3, [pc, #364]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6713      	str	r3, [r2, #112]	; 0x70
 8002832:	4b58      	ldr	r3, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002836:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d015      	beq.n	8002872 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002846:	f7fe fe3f 	bl	80014c8 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fe fe3b 	bl	80014c8 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f241 3288 	movw	r2, #5000	; 0x1388
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0ce      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0ee      	beq.n	800284e <HAL_RCC_OscConfig+0x386>
 8002870:	e014      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002872:	f7fe fe29 	bl	80014c8 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	e00a      	b.n	8002890 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287a:	f7fe fe25 	bl	80014c8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f241 3288 	movw	r2, #5000	; 0x1388
 8002888:	4293      	cmp	r3, r2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002890:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ee      	bne.n	800287a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a2:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a3b      	ldr	r2, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80a4 	beq.w	8002a00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b8:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d06b      	beq.n	800299c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d149      	bne.n	8002960 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fdf6 	bl	80014c8 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe fdf2 	bl	80014c8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	4313      	orrs	r3, r2
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800292a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002938:	f7fe fdc6 	bl	80014c8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fdc2 	bl	80014c8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e057      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x478>
 800295e:	e04f      	b.n	8002a00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0b      	ldr	r2, [pc, #44]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fe fdac 	bl	80014c8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fda8 	bl	80014c8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e03d      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_OscConfig+0x4cc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x4ac>
 8002992:	e035      	b.n	8002a00 <HAL_RCC_OscConfig+0x538>
 8002994:	40023800 	.word	0x40023800
 8002998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x544>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0d0      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 020f 	bic.w	r2, r3, #15
 8002a3e:	4965      	ldr	r1, [pc, #404]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d040      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e073      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06b      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4936      	ldr	r1, [pc, #216]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b04:	f7fe fce0 	bl	80014c8 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe fcdc 	bl	80014c8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e053      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d210      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	4922      	ldr	r1, [pc, #136]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1cc>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1d4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fb52 	bl	800126c <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	080083bc 	.word	0x080083bc
 8002be0:	20000008 	.word	0x20000008
 8002be4:	2000000c 	.word	0x2000000c

08002be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bec:	b094      	sub	sp, #80	; 0x50
 8002bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d00d      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	f200 80e1 	bhi.w	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x34>
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1a:	e0db      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c20:	e0db      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c22:	4b73      	ldr	r3, [pc, #460]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c26:	e0d8      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c28:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c32:	4b6d      	ldr	r3, [pc, #436]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3e:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	2200      	movs	r2, #0
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c48:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
 8002c52:	2300      	movs	r3, #0
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
 8002c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c5a:	4622      	mov	r2, r4
 8002c5c:	462b      	mov	r3, r5
 8002c5e:	f04f 0000 	mov.w	r0, #0
 8002c62:	f04f 0100 	mov.w	r1, #0
 8002c66:	0159      	lsls	r1, r3, #5
 8002c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6c:	0150      	lsls	r0, r2, #5
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4621      	mov	r1, r4
 8002c74:	1a51      	subs	r1, r2, r1
 8002c76:	6139      	str	r1, [r7, #16]
 8002c78:	4629      	mov	r1, r5
 8002c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c8c:	4659      	mov	r1, fp
 8002c8e:	018b      	lsls	r3, r1, #6
 8002c90:	4651      	mov	r1, sl
 8002c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c96:	4651      	mov	r1, sl
 8002c98:	018a      	lsls	r2, r1, #6
 8002c9a:	4651      	mov	r1, sl
 8002c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8002ca0:	4659      	mov	r1, fp
 8002ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cba:	4690      	mov	r8, r2
 8002cbc:	4699      	mov	r9, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	eb18 0303 	adds.w	r3, r8, r3
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	462b      	mov	r3, r5
 8002cc8:	eb49 0303 	adc.w	r3, r9, r3
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cda:	4629      	mov	r1, r5
 8002cdc:	024b      	lsls	r3, r1, #9
 8002cde:	4621      	mov	r1, r4
 8002ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	024a      	lsls	r2, r1, #9
 8002ce8:	4610      	mov	r0, r2
 8002cea:	4619      	mov	r1, r3
 8002cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cf8:	f7fd fa8a 	bl	8000210 <__aeabi_uldivmod>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4613      	mov	r3, r2
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d04:	e058      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b38      	ldr	r3, [pc, #224]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	4611      	mov	r1, r2
 8002d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d16:	623b      	str	r3, [r7, #32]
 8002d18:	2300      	movs	r3, #0
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d20:	4642      	mov	r2, r8
 8002d22:	464b      	mov	r3, r9
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	0159      	lsls	r1, r3, #5
 8002d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d32:	0150      	lsls	r0, r2, #5
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4641      	mov	r1, r8
 8002d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d58:	ebb2 040a 	subs.w	r4, r2, sl
 8002d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	00eb      	lsls	r3, r5, #3
 8002d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d6e:	00e2      	lsls	r2, r4, #3
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	4643      	mov	r3, r8
 8002d76:	18e3      	adds	r3, r4, r3
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	eb45 0303 	adc.w	r3, r5, r3
 8002d80:	607b      	str	r3, [r7, #4]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	028b      	lsls	r3, r1, #10
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d98:	4621      	mov	r1, r4
 8002d9a:	028a      	lsls	r2, r1, #10
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	61fa      	str	r2, [r7, #28]
 8002da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dac:	f7fd fa30 	bl	8000210 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	0c1b      	lsrs	r3, r3, #16
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd2:	e002      	b.n	8002dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3750      	adds	r7, #80	; 0x50
 8002de0:	46bd      	mov	sp, r7
 8002de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	007a1200 	.word	0x007a1200

08002df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002df8:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e10:	f7ff fff0 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0307 	and.w	r3, r3, #7
 8002e20:	4903      	ldr	r1, [pc, #12]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e22:	5ccb      	ldrb	r3, [r1, r3]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	080083cc 	.word	0x080083cc

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e38:	f7ff ffdc 	bl	8002df4 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	0b5b      	lsrs	r3, r3, #13
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4903      	ldr	r1, [pc, #12]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	080083cc 	.word	0x080083cc

08002e5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	220f      	movs	r2, #15
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0203 	and.w	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e78:	4b0f      	ldr	r3, [pc, #60]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_RCC_GetClockConfig+0x5c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_RCC_GetClockConfig+0x60>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 020f 	and.w	r2, r3, #15
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40023c00 	.word	0x40023c00

08002ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d012      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee8:	4b69      	ldr	r3, [pc, #420]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a68      	ldr	r2, [pc, #416]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef2:	6093      	str	r3, [r2, #8]
 8002ef4:	4b66      	ldr	r3, [pc, #408]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	4964      	ldr	r1, [pc, #400]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d017      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	4959      	ldr	r1, [pc, #356]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f38:	d101      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f56:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	494a      	ldr	r1, [pc, #296]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f92:	2301      	movs	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 808b 	beq.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	4a39      	ldr	r2, [pc, #228]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb0:	4b37      	ldr	r3, [pc, #220]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60bb      	str	r3, [r7, #8]
 8002fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fc8:	f7fe fa7e 	bl	80014c8 <HAL_GetTick>
 8002fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd0:	f7fe fa7a 	bl	80014c8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e357      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fe2:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d035      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	429a      	cmp	r2, r3
 800300a:	d02e      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800300c:	4b20      	ldr	r3, [pc, #128]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800302e:	4a18      	ldr	r2, [pc, #96]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b01      	cmp	r3, #1
 800303e:	d114      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fa42 	bl	80014c8 <HAL_GetTick>
 8003044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003046:	e00a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003048:	f7fe fa3e 	bl	80014c8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e319      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0ee      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003076:	d111      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003086:	400b      	ands	r3, r1
 8003088:	4901      	ldr	r1, [pc, #4]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003090:	40023800 	.word	0x40023800
 8003094:	40007000 	.word	0x40007000
 8003098:	0ffffcff 	.word	0x0ffffcff
 800309c:	4baa      	ldr	r3, [pc, #680]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4aa9      	ldr	r2, [pc, #676]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030a6:	6093      	str	r3, [r2, #8]
 80030a8:	4ba7      	ldr	r3, [pc, #668]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	49a4      	ldr	r1, [pc, #656]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d010      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030c6:	4ba0      	ldr	r3, [pc, #640]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	4a9e      	ldr	r2, [pc, #632]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030d6:	4b9c      	ldr	r3, [pc, #624]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4999      	ldr	r1, [pc, #612]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f4:	4b94      	ldr	r3, [pc, #592]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003102:	4991      	ldr	r1, [pc, #580]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003116:	4b8c      	ldr	r3, [pc, #560]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003124:	4988      	ldr	r1, [pc, #544]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003138:	4b83      	ldr	r3, [pc, #524]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003146:	4980      	ldr	r1, [pc, #512]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800315a:	4b7b      	ldr	r3, [pc, #492]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4977      	ldr	r1, [pc, #476]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800317c:	4b72      	ldr	r3, [pc, #456]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	496f      	ldr	r1, [pc, #444]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800319e:	4b6a      	ldr	r3, [pc, #424]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a4:	f023 020c 	bic.w	r2, r3, #12
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ac:	4966      	ldr	r1, [pc, #408]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031c0:	4b61      	ldr	r3, [pc, #388]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ce:	495e      	ldr	r1, [pc, #376]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031e2:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f0:	4955      	ldr	r1, [pc, #340]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003226:	4b48      	ldr	r3, [pc, #288]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	4944      	ldr	r1, [pc, #272]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003248:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800324e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	493c      	ldr	r1, [pc, #240]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	4933      	ldr	r1, [pc, #204]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800328c:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329a:	492b      	ldr	r1, [pc, #172]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d011      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032bc:	4922      	ldr	r1, [pc, #136]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032cc:	d101      	bne.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	4912      	ldr	r1, [pc, #72]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	4909      	ldr	r1, [pc, #36]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d006      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80d9 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a01      	ldr	r2, [pc, #4]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003346:	e001      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003348:	40023800 	.word	0x40023800
 800334c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334e:	f7fe f8bb 	bl	80014c8 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003356:	f7fe f8b7 	bl	80014c8 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d901      	bls.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e194      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003368:	4b6c      	ldr	r3, [pc, #432]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d021      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003388:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338e:	0c1b      	lsrs	r3, r3, #16
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003396:	4b61      	ldr	r3, [pc, #388]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	019a      	lsls	r2, r3, #6
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	071b      	lsls	r3, r3, #28
 80033bc:	4957      	ldr	r1, [pc, #348]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d004      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02e      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d129      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	0c1b      	lsrs	r3, r3, #16
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003404:	0f1b      	lsrs	r3, r3, #28
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	019a      	lsls	r2, r3, #6
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	431a      	orrs	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	071b      	lsls	r3, r3, #28
 8003424:	493d      	ldr	r1, [pc, #244]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003432:	f023 021f 	bic.w	r2, r3, #31
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	3b01      	subs	r3, #1
 800343c:	4937      	ldr	r1, [pc, #220]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01d      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003456:	0e1b      	lsrs	r3, r3, #24
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800345e:	4b2f      	ldr	r3, [pc, #188]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003464:	0f1b      	lsrs	r3, r3, #28
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	019a      	lsls	r2, r3, #6
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	061b      	lsls	r3, r3, #24
 800347e:	431a      	orrs	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	071b      	lsls	r3, r3, #28
 8003484:	4925      	ldr	r1, [pc, #148]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d011      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	019a      	lsls	r2, r3, #6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	071b      	lsls	r3, r3, #28
 80034b4:	4919      	ldr	r1, [pc, #100]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c8:	f7fd fffe 	bl	80014c8 <HAL_GetTick>
 80034cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034d0:	f7fd fffa 	bl	80014c8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e0d7      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e2:	4b0e      	ldr	r3, [pc, #56]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d0f0      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	f040 80cd 	bne.w	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034f6:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003502:	f7fd ffe1 	bl	80014c8 <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800350a:	f7fd ffdd 	bl	80014c8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b64      	cmp	r3, #100	; 0x64
 8003516:	d903      	bls.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0ba      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800351c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003520:	4b5e      	ldr	r3, [pc, #376]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d0ed      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d009      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12a      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003564:	4b4d      	ldr	r3, [pc, #308]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356a:	0f1b      	lsrs	r3, r3, #28
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	019a      	lsls	r2, r3, #6
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	071b      	lsls	r3, r3, #28
 800358a:	4944      	ldr	r1, [pc, #272]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003592:	4b42      	ldr	r3, [pc, #264]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	3b01      	subs	r3, #1
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	493d      	ldr	r1, [pc, #244]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d022      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035c0:	d11d      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	0e1b      	lsrs	r3, r3, #24
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035d0:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	0f1b      	lsrs	r3, r3, #28
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	019a      	lsls	r2, r3, #6
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	041b      	lsls	r3, r3, #16
 80035ea:	431a      	orrs	r2, r3
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	071b      	lsls	r3, r3, #28
 80035f6:	4929      	ldr	r1, [pc, #164]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d028      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	0e1b      	lsrs	r3, r3, #24
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361e:	0c1b      	lsrs	r3, r3, #16
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	019a      	lsls	r2, r3, #6
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	431a      	orrs	r2, r3
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	061b      	lsls	r3, r3, #24
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	071b      	lsls	r3, r3, #28
 800363e:	4917      	ldr	r1, [pc, #92]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003646:	4b15      	ldr	r3, [pc, #84]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4911      	ldr	r1, [pc, #68]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0e      	ldr	r2, [pc, #56]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fd ff2e 	bl	80014c8 <HAL_GetTick>
 800366c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003670:	f7fd ff2a 	bl	80014c8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d901      	bls.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e007      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368e:	d1ef      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3720      	adds	r7, #32
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e049      	b.n	8003746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d106      	bne.n	80036cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fd fc5e 	bl	8000f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3304      	adds	r3, #4
 80036dc:	4619      	mov	r1, r3
 80036de:	4610      	mov	r0, r2
 80036e0:	f000 fd30 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d001      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e054      	b.n	8003812 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <HAL_TIM_Base_Start_IT+0xd0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d022      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d01d      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a22      	ldr	r2, [pc, #136]	; (8003824 <HAL_TIM_Base_Start_IT+0xd4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d018      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_TIM_Base_Start_IT+0xd8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d013      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1f      	ldr	r2, [pc, #124]	; (800382c <HAL_TIM_Base_Start_IT+0xdc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00e      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_TIM_Base_Start_IT+0xe0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1c      	ldr	r2, [pc, #112]	; (8003834 <HAL_TIM_Base_Start_IT+0xe4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_TIM_Base_Start_IT+0x80>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_TIM_Base_Start_IT+0xe8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d115      	bne.n	80037fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	4b19      	ldr	r3, [pc, #100]	; (800383c <HAL_TIM_Base_Start_IT+0xec>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d015      	beq.n	800380e <HAL_TIM_Base_Start_IT+0xbe>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d011      	beq.n	800380e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0201 	orr.w	r2, r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037fa:	e008      	b.n	800380e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e000      	b.n	8003810 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40010000 	.word	0x40010000
 8003824:	40000400 	.word	0x40000400
 8003828:	40000800 	.word	0x40000800
 800382c:	40000c00 	.word	0x40000c00
 8003830:	40010400 	.word	0x40010400
 8003834:	40014000 	.word	0x40014000
 8003838:	40001800 	.word	0x40001800
 800383c:	00010007 	.word	0x00010007

08003840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e049      	b.n	80038e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f841 	bl	80038ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f000 fc60 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_TIM_PWM_Start+0x24>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	bf14      	ite	ne
 8003920:	2301      	movne	r3, #1
 8003922:	2300      	moveq	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e03c      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b04      	cmp	r3, #4
 800392c:	d109      	bne.n	8003942 <HAL_TIM_PWM_Start+0x3e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b01      	cmp	r3, #1
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	e02f      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b08      	cmp	r3, #8
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x58>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e022      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d109      	bne.n	8003976 <HAL_TIM_PWM_Start+0x72>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e015      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x8c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e008      	b.n	80039a2 <HAL_TIM_PWM_Start+0x9e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e092      	b.n	8003ad0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xb6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039b8:	e023      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xc6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	e01b      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0xd6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	e013      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xe6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039e8:	e00b      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0xf6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	e003      	b.n	8003a02 <HAL_TIM_PWM_Start+0xfe>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2201      	movs	r2, #1
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 ff32 	bl	8004874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_TIM_PWM_Start+0x1d4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d004      	beq.n	8003a24 <HAL_TIM_PWM_Start+0x120>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	; (8003adc <HAL_TIM_PWM_Start+0x1d8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_PWM_Start+0x124>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_TIM_PWM_Start+0x126>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a25      	ldr	r2, [pc, #148]	; (8003ad8 <HAL_TIM_PWM_Start+0x1d4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a50:	d01d      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_TIM_PWM_Start+0x1dc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d018      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_TIM_PWM_Start+0x1e0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_TIM_PWM_Start+0x1e4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00e      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a19      	ldr	r2, [pc, #100]	; (8003adc <HAL_TIM_PWM_Start+0x1d8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d009      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_TIM_PWM_Start+0x1e8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d004      	beq.n	8003a8e <HAL_TIM_PWM_Start+0x18a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	; (8003af0 <HAL_TIM_PWM_Start+0x1ec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d115      	bne.n	8003aba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b17      	ldr	r3, [pc, #92]	; (8003af4 <HAL_TIM_PWM_Start+0x1f0>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b06      	cmp	r3, #6
 8003a9e:	d015      	beq.n	8003acc <HAL_TIM_PWM_Start+0x1c8>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d011      	beq.n	8003acc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab8:	e008      	b.n	8003acc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e000      	b.n	8003ace <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40010000 	.word	0x40010000
 8003adc:	40010400 	.word	0x40010400
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800
 8003ae8:	40000c00 	.word	0x40000c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40001800 	.word	0x40001800
 8003af4:	00010007 	.word	0x00010007

08003af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0202 	mvn.w	r2, #2
 8003b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fae4 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fad6 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 fae7 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0204 	mvn.w	r2, #4
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 faba 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 faac 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 fabd 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0208 	mvn.w	r2, #8
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa90 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fa82 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fa93 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2208      	movs	r2, #8
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fa66 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa58 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fa69 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0201 	mvn.w	r2, #1
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fd f892 	bl	8000da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fea4 	bl	80049f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb6:	d10e      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d107      	bne.n	8003cd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fe97 	bl	8004a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d10e      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d107      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fa17 	bl	8004130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d10e      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0220 	mvn.w	r2, #32
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fe57 	bl	80049dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e0ff      	b.n	8003f56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b14      	cmp	r3, #20
 8003d62:	f200 80f0 	bhi.w	8003f46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003f47 	.word	0x08003f47
 8003d74:	08003f47 	.word	0x08003f47
 8003d78:	08003f47 	.word	0x08003f47
 8003d7c:	08003e01 	.word	0x08003e01
 8003d80:	08003f47 	.word	0x08003f47
 8003d84:	08003f47 	.word	0x08003f47
 8003d88:	08003f47 	.word	0x08003f47
 8003d8c:	08003e43 	.word	0x08003e43
 8003d90:	08003f47 	.word	0x08003f47
 8003d94:	08003f47 	.word	0x08003f47
 8003d98:	08003f47 	.word	0x08003f47
 8003d9c:	08003e83 	.word	0x08003e83
 8003da0:	08003f47 	.word	0x08003f47
 8003da4:	08003f47 	.word	0x08003f47
 8003da8:	08003f47 	.word	0x08003f47
 8003dac:	08003ec5 	.word	0x08003ec5
 8003db0:	08003f47 	.word	0x08003f47
 8003db4:	08003f47 	.word	0x08003f47
 8003db8:	08003f47 	.word	0x08003f47
 8003dbc:	08003f05 	.word	0x08003f05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fa5c 	bl	8004284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0208 	orr.w	r2, r2, #8
 8003dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0204 	bic.w	r2, r2, #4
 8003dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6999      	ldr	r1, [r3, #24]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	619a      	str	r2, [r3, #24]
      break;
 8003dfe:	e0a5      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 faae 	bl	8004368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6999      	ldr	r1, [r3, #24]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	619a      	str	r2, [r3, #24]
      break;
 8003e40:	e084      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fb05 	bl	8004458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 0208 	orr.w	r2, r2, #8
 8003e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0204 	bic.w	r2, r2, #4
 8003e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]
      break;
 8003e80:	e064      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 fb5b 	bl	8004544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69d9      	ldr	r1, [r3, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	61da      	str	r2, [r3, #28]
      break;
 8003ec2:	e043      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb92 	bl	80045f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0208 	orr.w	r2, r2, #8
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0204 	bic.w	r2, r2, #4
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	430a      	orrs	r2, r1
 8003f00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f02:	e023      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68b9      	ldr	r1, [r7, #8]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fbc4 	bl	8004698 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	021a      	lsls	r2, r3, #8
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f44:	e002      	b.n	8003f4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop

08003f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b4      	b.n	80040e6 <HAL_TIM_ConfigClockSource+0x186>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	4b56      	ldr	r3, [pc, #344]	; (80040f0 <HAL_TIM_ConfigClockSource+0x190>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_TIM_ConfigClockSource+0x172>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa6>
 8003fd0:	2b70      	cmp	r3, #112	; 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x11a>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b50      	cmp	r3, #80	; 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xfa>
 8003fe0:	2b50      	cmp	r3, #80	; 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x13a>
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b30      	cmp	r3, #48	; 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b30      	cmp	r3, #48	; 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	f000 fc0d 	bl	8004834 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04f      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	f000 fbf6 	bl	8004834 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fb6a 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	; 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fbc3 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004078:	e02c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 fb89 	bl	800479e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	; 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fbb3 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 8004098:	e01c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fb4a 	bl	8004740 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fba3 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 fb9a 	bl	80047fe <TIM_ITRx_SetConfig>
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fffeff88 	.word	0xfffeff88

080040f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3d      	ldr	r2, [pc, #244]	; (800425c <TIM_Base_SetConfig+0x118>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <TIM_Base_SetConfig+0x120>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <TIM_Base_SetConfig+0x114>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d027      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0x118>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d023      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <TIM_Base_SetConfig+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <TIM_Base_SetConfig+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d017      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_Base_SetConfig+0x128>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0x134>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <TIM_Base_SetConfig+0x138>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <TIM_Base_SetConfig+0x13c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800
 8004278:	40001800 	.word	0x40001800
 800427c:	40001c00 	.word	0x40001c00
 8004280:	40002000 	.word	0x40002000

08004284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4b2b      	ldr	r3, [pc, #172]	; (800435c <TIM_OC1_SetConfig+0xd8>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0302 	bic.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <TIM_OC1_SetConfig+0xdc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d003      	beq.n	80042e8 <TIM_OC1_SetConfig+0x64>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a20      	ldr	r2, [pc, #128]	; (8004364 <TIM_OC1_SetConfig+0xe0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d10c      	bne.n	8004302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0308 	bic.w	r3, r3, #8
 80042ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 0304 	bic.w	r3, r3, #4
 8004300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a16      	ldr	r2, [pc, #88]	; (8004360 <TIM_OC1_SetConfig+0xdc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d003      	beq.n	8004312 <TIM_OC1_SetConfig+0x8e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <TIM_OC1_SetConfig+0xe0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d111      	bne.n	8004336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	621a      	str	r2, [r3, #32]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	fffeff8f 	.word	0xfffeff8f
 8004360:	40010000 	.word	0x40010000
 8004364:	40010400 	.word	0x40010400

08004368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0210 	bic.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <TIM_OC2_SetConfig+0xe4>)
 8004394:	4013      	ands	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0320 	bic.w	r3, r3, #32
 80043b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a23      	ldr	r2, [pc, #140]	; (8004450 <TIM_OC2_SetConfig+0xe8>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_OC2_SetConfig+0x68>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a22      	ldr	r2, [pc, #136]	; (8004454 <TIM_OC2_SetConfig+0xec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d10d      	bne.n	80043ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <TIM_OC2_SetConfig+0xe8>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d003      	beq.n	80043fc <TIM_OC2_SetConfig+0x94>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a17      	ldr	r2, [pc, #92]	; (8004454 <TIM_OC2_SetConfig+0xec>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d113      	bne.n	8004424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	621a      	str	r2, [r3, #32]
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	feff8fff 	.word	0xfeff8fff
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4b2d      	ldr	r3, [pc, #180]	; (8004538 <TIM_OC3_SetConfig+0xe0>)
 8004484:	4013      	ands	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <TIM_OC3_SetConfig+0xe4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC3_SetConfig+0x66>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a21      	ldr	r2, [pc, #132]	; (8004540 <TIM_OC3_SetConfig+0xe8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <TIM_OC3_SetConfig+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d003      	beq.n	80044ea <TIM_OC3_SetConfig+0x92>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a16      	ldr	r2, [pc, #88]	; (8004540 <TIM_OC3_SetConfig+0xe8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d113      	bne.n	8004512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4313      	orrs	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	621a      	str	r2, [r3, #32]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	fffeff8f 	.word	0xfffeff8f
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400

08004544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <TIM_OC4_SetConfig+0xa4>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800458e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a13      	ldr	r2, [pc, #76]	; (80045ec <TIM_OC4_SetConfig+0xa8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC4_SetConfig+0x68>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <TIM_OC4_SetConfig+0xac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d109      	bne.n	80045c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	621a      	str	r2, [r3, #32]
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	feff8fff 	.word	0xfeff8fff
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40010400 	.word	0x40010400

080045f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <TIM_OC5_SetConfig+0x98>)
 8004620:	4013      	ands	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	041b      	lsls	r3, r3, #16
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a12      	ldr	r2, [pc, #72]	; (8004690 <TIM_OC5_SetConfig+0x9c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_OC5_SetConfig+0x5e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a11      	ldr	r2, [pc, #68]	; (8004694 <TIM_OC5_SetConfig+0xa0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d109      	bne.n	8004666 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	021b      	lsls	r3, r3, #8
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	621a      	str	r2, [r3, #32]
}
 8004680:	bf00      	nop
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	fffeff8f 	.word	0xfffeff8f
 8004690:	40010000 	.word	0x40010000
 8004694:	40010400 	.word	0x40010400

08004698 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <TIM_OC6_SetConfig+0x9c>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	051b      	lsls	r3, r3, #20
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a13      	ldr	r2, [pc, #76]	; (8004738 <TIM_OC6_SetConfig+0xa0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d003      	beq.n	80046f8 <TIM_OC6_SetConfig+0x60>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a12      	ldr	r2, [pc, #72]	; (800473c <TIM_OC6_SetConfig+0xa4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d109      	bne.n	800470c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	029b      	lsls	r3, r3, #10
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	621a      	str	r2, [r3, #32]
}
 8004726:	bf00      	nop
 8004728:	371c      	adds	r7, #28
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	feff8fff 	.word	0xfeff8fff
 8004738:	40010000 	.word	0x40010000
 800473c:	40010400 	.word	0x40010400

08004740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479e:	b480      	push	{r7}
 80047a0:	b087      	sub	sp, #28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f023 0210 	bic.w	r2, r3, #16
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	031b      	lsls	r3, r3, #12
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	621a      	str	r2, [r3, #32]
}
 80047f2:	bf00      	nop
 80047f4:	371c      	adds	r7, #28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	f043 0307 	orr.w	r3, r3, #7
 8004820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800484e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	431a      	orrs	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	609a      	str	r2, [r3, #8]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	2201      	movs	r2, #1
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1a      	ldr	r2, [r3, #32]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	43db      	mvns	r3, r3
 8004896:	401a      	ands	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a1a      	ldr	r2, [r3, #32]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	fa01 f303 	lsl.w	r3, r1, r3
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e06d      	b.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a30      	ldr	r2, [pc, #192]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a2f      	ldr	r2, [pc, #188]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d108      	bne.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004924:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68fa      	ldr	r2, [r7, #12]
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a20      	ldr	r2, [pc, #128]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d01d      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1d      	ldr	r2, [pc, #116]	; (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a1a      	ldr	r2, [pc, #104]	; (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10c      	bne.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40001800 	.word	0x40001800

080049dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e040      	b.n	8004aac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fb34 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fc66 	bl	8005328 <UART_SetConfig>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e022      	b.n	8004aac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 febe 	bl	80057f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 ff45 	bl	8005934 <UART_CheckIdleState>
 8004aaa:	4603      	mov	r3, r0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af02      	add	r7, sp, #8
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d171      	bne.n	8004bb0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d002      	beq.n	8004ad8 <HAL_UART_Transmit+0x24>
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e06a      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2221      	movs	r2, #33	; 0x21
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fced 	bl	80014c8 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x68>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b24:	e02c      	b.n	8004b80 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2180      	movs	r1, #128	; 0x80
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 ff36 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e038      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1cc      	bne.n	8004b26 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 ff03 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e005      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b08a      	sub	sp, #40	; 0x28
 8004bbe:	af02      	add	r7, sp, #8
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	f040 80b1 	bne.w	8004d38 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_UART_Receive+0x28>
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0a9      	b.n	8004d3a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2222      	movs	r2, #34	; 0x22
 8004bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bfc:	f7fc fc64 	bl	80014c8 <HAL_GetTick>
 8004c00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	d10e      	bne.n	8004c3a <HAL_UART_Receive+0x80>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_UART_Receive+0x76>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c2e:	e02d      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	22ff      	movs	r2, #255	; 0xff
 8004c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c38:	e028      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <HAL_UART_Receive+0xa4>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d104      	bne.n	8004c54 <HAL_UART_Receive+0x9a>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	22ff      	movs	r2, #255	; 0xff
 8004c4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c52:	e01b      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	227f      	movs	r2, #127	; 0x7f
 8004c58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c5c:	e016      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c66:	d10d      	bne.n	8004c84 <HAL_UART_Receive+0xca>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d104      	bne.n	8004c7a <HAL_UART_Receive+0xc0>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	227f      	movs	r2, #127	; 0x7f
 8004c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c78:	e008      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c82:	e003      	b.n	8004c8c <HAL_UART_Receive+0xd2>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c92:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9c:	d108      	bne.n	8004cb0 <HAL_UART_Receive+0xf6>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d104      	bne.n	8004cb0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e003      	b.n	8004cb8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cb8:	e032      	b.n	8004d20 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2120      	movs	r1, #32
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fe6c 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e032      	b.n	8004d3a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	8a7b      	ldrh	r3, [r7, #18]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3302      	adds	r3, #2
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e00c      	b.n	8004d0e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	8a7b      	ldrh	r3, [r7, #18]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4013      	ands	r3, r2
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1c6      	bne.n	8004cba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b0ba      	sub	sp, #232	; 0xe8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d6e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d72:	4013      	ands	r3, r2
 8004d74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d115      	bne.n	8004dac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00f      	beq.n	8004dac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8297 	beq.w	80052d0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
      }
      return;
 8004daa:	e291      	b.n	80052d0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8117 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004dc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004dc6:	4b85      	ldr	r3, [pc, #532]	; (8004fdc <HAL_UART_IRQHandler+0x298>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f000 810a 	beq.w	8004fe4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d011      	beq.n	8004e00 <HAL_UART_IRQHandler+0xbc>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2201      	movs	r2, #1
 8004dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d011      	beq.n	8004e30 <HAL_UART_IRQHandler+0xec>
 8004e0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e26:	f043 0204 	orr.w	r2, r3, #4
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d011      	beq.n	8004e60 <HAL_UART_IRQHandler+0x11c>
 8004e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00b      	beq.n	8004e60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e56:	f043 0202 	orr.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d017      	beq.n	8004e9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00b      	beq.n	8004e9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e92:	f043 0208 	orr.w	r2, r3, #8
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d012      	beq.n	8004ece <HAL_UART_IRQHandler+0x18a>
 8004ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 81fd 	beq.w	80052d4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00d      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d04f      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fe01 	bl	8005b2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d141      	bne.n	8004fbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3308      	adds	r3, #8
 8004f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1d9      	bne.n	8004f3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d013      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <HAL_UART_IRQHandler+0x29c>)
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc fc16 	bl	80017cc <HAL_DMA_Abort_IT>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d017      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb4:	e00f      	b.n	8004fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9a0 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	e00b      	b.n	8004fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f99c 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc4:	e007      	b.n	8004fd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f998 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004fd4:	e17e      	b.n	80052d4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	bf00      	nop
    return;
 8004fd8:	e17c      	b.n	80052d4 <HAL_UART_IRQHandler+0x590>
 8004fda:	bf00      	nop
 8004fdc:	04000120 	.word	0x04000120
 8004fe0:	08005bf7 	.word	0x08005bf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 814c 	bne.w	8005286 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8145 	beq.w	8005286 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 813e 	beq.w	8005286 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2210      	movs	r2, #16
 8005010:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	f040 80b6 	bne.w	800518e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8150 	beq.w	80052d8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800503e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005042:	429a      	cmp	r2, r3
 8005044:	f080 8148 	bcs.w	80052d8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800504e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005056:	69db      	ldr	r3, [r3, #28]
 8005058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800505c:	f000 8086 	beq.w	800516c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800508a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800508e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005096:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1da      	bne.n	8005060 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050bc:	f023 0301 	bic.w	r3, r3, #1
 80050c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e1      	bne.n	80050aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800510a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800510c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e3      	bne.n	80050e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800513a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513c:	f023 0310 	bic.w	r3, r3, #16
 8005140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005150:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800515c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e4      	bne.n	800512c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005166:	4618      	mov	r0, r3
 8005168:	f7fc fac0 	bl	80016ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800517e:	b29b      	uxth	r3, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b29b      	uxth	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8c2 	bl	8005310 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800518c:	e0a4      	b.n	80052d8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800519a:	b29b      	uxth	r3, r3
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8096 	beq.w	80052dc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80051b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 8091 	beq.w	80052dc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e4      	bne.n	80051ba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005214:	633a      	str	r2, [r7, #48]	; 0x30
 8005216:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800521a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e3      	bne.n	80051f0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60fb      	str	r3, [r7, #12]
   return(result);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	617b      	str	r3, [r7, #20]
   return(result);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e4      	bne.n	800523c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005278:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f846 	bl	8005310 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005284:	e02a      	b.n	80052dc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00e      	beq.n	80052b0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d008      	beq.n	80052b0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d01c      	beq.n	80052e0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
    }
    return;
 80052ae:	e017      	b.n	80052e0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d012      	beq.n	80052e2 <HAL_UART_IRQHandler+0x59e>
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00c      	beq.n	80052e2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fcaa 	bl	8005c22 <UART_EndTransmit_IT>
    return;
 80052ce:	e008      	b.n	80052e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80052d0:	bf00      	nop
 80052d2:	e006      	b.n	80052e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80052d4:	bf00      	nop
 80052d6:	e004      	b.n	80052e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80052d8:	bf00      	nop
 80052da:	e002      	b.n	80052e2 <HAL_UART_IRQHandler+0x59e>
      return;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_UART_IRQHandler+0x59e>
    return;
 80052e0:	bf00      	nop
  }

}
 80052e2:	37e8      	adds	r7, #232	; 0xe8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4ba6      	ldr	r3, [pc, #664]	; (80055ec <UART_SetConfig+0x2c4>)
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	6979      	ldr	r1, [r7, #20]
 800535c:	430b      	orrs	r3, r1
 800535e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	430a      	orrs	r2, r1
 8005398:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a94      	ldr	r2, [pc, #592]	; (80055f0 <UART_SetConfig+0x2c8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d120      	bne.n	80053e6 <UART_SetConfig+0xbe>
 80053a4:	4b93      	ldr	r3, [pc, #588]	; (80055f4 <UART_SetConfig+0x2cc>)
 80053a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d816      	bhi.n	80053e0 <UART_SetConfig+0xb8>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x90>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d5 	.word	0x080053d5
 80053c0:	080053cf 	.word	0x080053cf
 80053c4:	080053db 	.word	0x080053db
 80053c8:	2301      	movs	r3, #1
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e150      	b.n	8005670 <UART_SetConfig+0x348>
 80053ce:	2302      	movs	r3, #2
 80053d0:	77fb      	strb	r3, [r7, #31]
 80053d2:	e14d      	b.n	8005670 <UART_SetConfig+0x348>
 80053d4:	2304      	movs	r3, #4
 80053d6:	77fb      	strb	r3, [r7, #31]
 80053d8:	e14a      	b.n	8005670 <UART_SetConfig+0x348>
 80053da:	2308      	movs	r3, #8
 80053dc:	77fb      	strb	r3, [r7, #31]
 80053de:	e147      	b.n	8005670 <UART_SetConfig+0x348>
 80053e0:	2310      	movs	r3, #16
 80053e2:	77fb      	strb	r3, [r7, #31]
 80053e4:	e144      	b.n	8005670 <UART_SetConfig+0x348>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a83      	ldr	r2, [pc, #524]	; (80055f8 <UART_SetConfig+0x2d0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d132      	bne.n	8005456 <UART_SetConfig+0x12e>
 80053f0:	4b80      	ldr	r3, [pc, #512]	; (80055f4 <UART_SetConfig+0x2cc>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f003 030c 	and.w	r3, r3, #12
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d828      	bhi.n	8005450 <UART_SetConfig+0x128>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <UART_SetConfig+0xdc>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005439 	.word	0x08005439
 8005408:	08005451 	.word	0x08005451
 800540c:	08005451 	.word	0x08005451
 8005410:	08005451 	.word	0x08005451
 8005414:	08005445 	.word	0x08005445
 8005418:	08005451 	.word	0x08005451
 800541c:	08005451 	.word	0x08005451
 8005420:	08005451 	.word	0x08005451
 8005424:	0800543f 	.word	0x0800543f
 8005428:	08005451 	.word	0x08005451
 800542c:	08005451 	.word	0x08005451
 8005430:	08005451 	.word	0x08005451
 8005434:	0800544b 	.word	0x0800544b
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
 800543c:	e118      	b.n	8005670 <UART_SetConfig+0x348>
 800543e:	2302      	movs	r3, #2
 8005440:	77fb      	strb	r3, [r7, #31]
 8005442:	e115      	b.n	8005670 <UART_SetConfig+0x348>
 8005444:	2304      	movs	r3, #4
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e112      	b.n	8005670 <UART_SetConfig+0x348>
 800544a:	2308      	movs	r3, #8
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e10f      	b.n	8005670 <UART_SetConfig+0x348>
 8005450:	2310      	movs	r3, #16
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e10c      	b.n	8005670 <UART_SetConfig+0x348>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a68      	ldr	r2, [pc, #416]	; (80055fc <UART_SetConfig+0x2d4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d120      	bne.n	80054a2 <UART_SetConfig+0x17a>
 8005460:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <UART_SetConfig+0x2cc>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800546a:	2b30      	cmp	r3, #48	; 0x30
 800546c:	d013      	beq.n	8005496 <UART_SetConfig+0x16e>
 800546e:	2b30      	cmp	r3, #48	; 0x30
 8005470:	d814      	bhi.n	800549c <UART_SetConfig+0x174>
 8005472:	2b20      	cmp	r3, #32
 8005474:	d009      	beq.n	800548a <UART_SetConfig+0x162>
 8005476:	2b20      	cmp	r3, #32
 8005478:	d810      	bhi.n	800549c <UART_SetConfig+0x174>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <UART_SetConfig+0x15c>
 800547e:	2b10      	cmp	r3, #16
 8005480:	d006      	beq.n	8005490 <UART_SetConfig+0x168>
 8005482:	e00b      	b.n	800549c <UART_SetConfig+0x174>
 8005484:	2300      	movs	r3, #0
 8005486:	77fb      	strb	r3, [r7, #31]
 8005488:	e0f2      	b.n	8005670 <UART_SetConfig+0x348>
 800548a:	2302      	movs	r3, #2
 800548c:	77fb      	strb	r3, [r7, #31]
 800548e:	e0ef      	b.n	8005670 <UART_SetConfig+0x348>
 8005490:	2304      	movs	r3, #4
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e0ec      	b.n	8005670 <UART_SetConfig+0x348>
 8005496:	2308      	movs	r3, #8
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e0e9      	b.n	8005670 <UART_SetConfig+0x348>
 800549c:	2310      	movs	r3, #16
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e0e6      	b.n	8005670 <UART_SetConfig+0x348>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a56      	ldr	r2, [pc, #344]	; (8005600 <UART_SetConfig+0x2d8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d120      	bne.n	80054ee <UART_SetConfig+0x1c6>
 80054ac:	4b51      	ldr	r3, [pc, #324]	; (80055f4 <UART_SetConfig+0x2cc>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054b6:	2bc0      	cmp	r3, #192	; 0xc0
 80054b8:	d013      	beq.n	80054e2 <UART_SetConfig+0x1ba>
 80054ba:	2bc0      	cmp	r3, #192	; 0xc0
 80054bc:	d814      	bhi.n	80054e8 <UART_SetConfig+0x1c0>
 80054be:	2b80      	cmp	r3, #128	; 0x80
 80054c0:	d009      	beq.n	80054d6 <UART_SetConfig+0x1ae>
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d810      	bhi.n	80054e8 <UART_SetConfig+0x1c0>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <UART_SetConfig+0x1a8>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d006      	beq.n	80054dc <UART_SetConfig+0x1b4>
 80054ce:	e00b      	b.n	80054e8 <UART_SetConfig+0x1c0>
 80054d0:	2300      	movs	r3, #0
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e0cc      	b.n	8005670 <UART_SetConfig+0x348>
 80054d6:	2302      	movs	r3, #2
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e0c9      	b.n	8005670 <UART_SetConfig+0x348>
 80054dc:	2304      	movs	r3, #4
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e0c6      	b.n	8005670 <UART_SetConfig+0x348>
 80054e2:	2308      	movs	r3, #8
 80054e4:	77fb      	strb	r3, [r7, #31]
 80054e6:	e0c3      	b.n	8005670 <UART_SetConfig+0x348>
 80054e8:	2310      	movs	r3, #16
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e0c0      	b.n	8005670 <UART_SetConfig+0x348>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a44      	ldr	r2, [pc, #272]	; (8005604 <UART_SetConfig+0x2dc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d125      	bne.n	8005544 <UART_SetConfig+0x21c>
 80054f8:	4b3e      	ldr	r3, [pc, #248]	; (80055f4 <UART_SetConfig+0x2cc>)
 80054fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005506:	d017      	beq.n	8005538 <UART_SetConfig+0x210>
 8005508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800550c:	d817      	bhi.n	800553e <UART_SetConfig+0x216>
 800550e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005512:	d00b      	beq.n	800552c <UART_SetConfig+0x204>
 8005514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005518:	d811      	bhi.n	800553e <UART_SetConfig+0x216>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <UART_SetConfig+0x1fe>
 800551e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005522:	d006      	beq.n	8005532 <UART_SetConfig+0x20a>
 8005524:	e00b      	b.n	800553e <UART_SetConfig+0x216>
 8005526:	2300      	movs	r3, #0
 8005528:	77fb      	strb	r3, [r7, #31]
 800552a:	e0a1      	b.n	8005670 <UART_SetConfig+0x348>
 800552c:	2302      	movs	r3, #2
 800552e:	77fb      	strb	r3, [r7, #31]
 8005530:	e09e      	b.n	8005670 <UART_SetConfig+0x348>
 8005532:	2304      	movs	r3, #4
 8005534:	77fb      	strb	r3, [r7, #31]
 8005536:	e09b      	b.n	8005670 <UART_SetConfig+0x348>
 8005538:	2308      	movs	r3, #8
 800553a:	77fb      	strb	r3, [r7, #31]
 800553c:	e098      	b.n	8005670 <UART_SetConfig+0x348>
 800553e:	2310      	movs	r3, #16
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e095      	b.n	8005670 <UART_SetConfig+0x348>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a2f      	ldr	r2, [pc, #188]	; (8005608 <UART_SetConfig+0x2e0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d125      	bne.n	800559a <UART_SetConfig+0x272>
 800554e:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <UART_SetConfig+0x2cc>)
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800555c:	d017      	beq.n	800558e <UART_SetConfig+0x266>
 800555e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005562:	d817      	bhi.n	8005594 <UART_SetConfig+0x26c>
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d00b      	beq.n	8005582 <UART_SetConfig+0x25a>
 800556a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556e:	d811      	bhi.n	8005594 <UART_SetConfig+0x26c>
 8005570:	2b00      	cmp	r3, #0
 8005572:	d003      	beq.n	800557c <UART_SetConfig+0x254>
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005578:	d006      	beq.n	8005588 <UART_SetConfig+0x260>
 800557a:	e00b      	b.n	8005594 <UART_SetConfig+0x26c>
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e076      	b.n	8005670 <UART_SetConfig+0x348>
 8005582:	2302      	movs	r3, #2
 8005584:	77fb      	strb	r3, [r7, #31]
 8005586:	e073      	b.n	8005670 <UART_SetConfig+0x348>
 8005588:	2304      	movs	r3, #4
 800558a:	77fb      	strb	r3, [r7, #31]
 800558c:	e070      	b.n	8005670 <UART_SetConfig+0x348>
 800558e:	2308      	movs	r3, #8
 8005590:	77fb      	strb	r3, [r7, #31]
 8005592:	e06d      	b.n	8005670 <UART_SetConfig+0x348>
 8005594:	2310      	movs	r3, #16
 8005596:	77fb      	strb	r3, [r7, #31]
 8005598:	e06a      	b.n	8005670 <UART_SetConfig+0x348>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a1b      	ldr	r2, [pc, #108]	; (800560c <UART_SetConfig+0x2e4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d138      	bne.n	8005616 <UART_SetConfig+0x2ee>
 80055a4:	4b13      	ldr	r3, [pc, #76]	; (80055f4 <UART_SetConfig+0x2cc>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b2:	d017      	beq.n	80055e4 <UART_SetConfig+0x2bc>
 80055b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b8:	d82a      	bhi.n	8005610 <UART_SetConfig+0x2e8>
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d00b      	beq.n	80055d8 <UART_SetConfig+0x2b0>
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c4:	d824      	bhi.n	8005610 <UART_SetConfig+0x2e8>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <UART_SetConfig+0x2aa>
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ce:	d006      	beq.n	80055de <UART_SetConfig+0x2b6>
 80055d0:	e01e      	b.n	8005610 <UART_SetConfig+0x2e8>
 80055d2:	2300      	movs	r3, #0
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e04b      	b.n	8005670 <UART_SetConfig+0x348>
 80055d8:	2302      	movs	r3, #2
 80055da:	77fb      	strb	r3, [r7, #31]
 80055dc:	e048      	b.n	8005670 <UART_SetConfig+0x348>
 80055de:	2304      	movs	r3, #4
 80055e0:	77fb      	strb	r3, [r7, #31]
 80055e2:	e045      	b.n	8005670 <UART_SetConfig+0x348>
 80055e4:	2308      	movs	r3, #8
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e042      	b.n	8005670 <UART_SetConfig+0x348>
 80055ea:	bf00      	nop
 80055ec:	efff69f3 	.word	0xefff69f3
 80055f0:	40011000 	.word	0x40011000
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40004400 	.word	0x40004400
 80055fc:	40004800 	.word	0x40004800
 8005600:	40004c00 	.word	0x40004c00
 8005604:	40005000 	.word	0x40005000
 8005608:	40011400 	.word	0x40011400
 800560c:	40007800 	.word	0x40007800
 8005610:	2310      	movs	r3, #16
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e02c      	b.n	8005670 <UART_SetConfig+0x348>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a72      	ldr	r2, [pc, #456]	; (80057e4 <UART_SetConfig+0x4bc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d125      	bne.n	800566c <UART_SetConfig+0x344>
 8005620:	4b71      	ldr	r3, [pc, #452]	; (80057e8 <UART_SetConfig+0x4c0>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800562a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800562e:	d017      	beq.n	8005660 <UART_SetConfig+0x338>
 8005630:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005634:	d817      	bhi.n	8005666 <UART_SetConfig+0x33e>
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563a:	d00b      	beq.n	8005654 <UART_SetConfig+0x32c>
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005640:	d811      	bhi.n	8005666 <UART_SetConfig+0x33e>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <UART_SetConfig+0x326>
 8005646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800564a:	d006      	beq.n	800565a <UART_SetConfig+0x332>
 800564c:	e00b      	b.n	8005666 <UART_SetConfig+0x33e>
 800564e:	2300      	movs	r3, #0
 8005650:	77fb      	strb	r3, [r7, #31]
 8005652:	e00d      	b.n	8005670 <UART_SetConfig+0x348>
 8005654:	2302      	movs	r3, #2
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e00a      	b.n	8005670 <UART_SetConfig+0x348>
 800565a:	2304      	movs	r3, #4
 800565c:	77fb      	strb	r3, [r7, #31]
 800565e:	e007      	b.n	8005670 <UART_SetConfig+0x348>
 8005660:	2308      	movs	r3, #8
 8005662:	77fb      	strb	r3, [r7, #31]
 8005664:	e004      	b.n	8005670 <UART_SetConfig+0x348>
 8005666:	2310      	movs	r3, #16
 8005668:	77fb      	strb	r3, [r7, #31]
 800566a:	e001      	b.n	8005670 <UART_SetConfig+0x348>
 800566c:	2310      	movs	r3, #16
 800566e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005678:	d15b      	bne.n	8005732 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800567a:	7ffb      	ldrb	r3, [r7, #31]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d828      	bhi.n	80056d2 <UART_SetConfig+0x3aa>
 8005680:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <UART_SetConfig+0x360>)
 8005682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005686:	bf00      	nop
 8005688:	080056ad 	.word	0x080056ad
 800568c:	080056b5 	.word	0x080056b5
 8005690:	080056bd 	.word	0x080056bd
 8005694:	080056d3 	.word	0x080056d3
 8005698:	080056c3 	.word	0x080056c3
 800569c:	080056d3 	.word	0x080056d3
 80056a0:	080056d3 	.word	0x080056d3
 80056a4:	080056d3 	.word	0x080056d3
 80056a8:	080056cb 	.word	0x080056cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ac:	f7fd fbae 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 80056b0:	61b8      	str	r0, [r7, #24]
        break;
 80056b2:	e013      	b.n	80056dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd fbbe 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 80056b8:	61b8      	str	r0, [r7, #24]
        break;
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <UART_SetConfig+0x4c4>)
 80056be:	61bb      	str	r3, [r7, #24]
        break;
 80056c0:	e00c      	b.n	80056dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c2:	f7fd fa91 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 80056c6:	61b8      	str	r0, [r7, #24]
        break;
 80056c8:	e008      	b.n	80056dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	61bb      	str	r3, [r7, #24]
        break;
 80056d0:	e004      	b.n	80056dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	77bb      	strb	r3, [r7, #30]
        break;
 80056da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d074      	beq.n	80057cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	005a      	lsls	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	441a      	add	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d916      	bls.n	800572c <UART_SetConfig+0x404>
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005704:	d212      	bcs.n	800572c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	b29b      	uxth	r3, r3
 800570a:	f023 030f 	bic.w	r3, r3, #15
 800570e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	b29a      	uxth	r2, r3
 800571c:	89fb      	ldrh	r3, [r7, #14]
 800571e:	4313      	orrs	r3, r2
 8005720:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	89fa      	ldrh	r2, [r7, #14]
 8005728:	60da      	str	r2, [r3, #12]
 800572a:	e04f      	b.n	80057cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	77bb      	strb	r3, [r7, #30]
 8005730:	e04c      	b.n	80057cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005732:	7ffb      	ldrb	r3, [r7, #31]
 8005734:	2b08      	cmp	r3, #8
 8005736:	d828      	bhi.n	800578a <UART_SetConfig+0x462>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <UART_SetConfig+0x418>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	0800578b 	.word	0x0800578b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800578b 	.word	0x0800578b
 8005758:	0800578b 	.word	0x0800578b
 800575c:	0800578b 	.word	0x0800578b
 8005760:	08005783 	.word	0x08005783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005764:	f7fd fb52 	bl	8002e0c <HAL_RCC_GetPCLK1Freq>
 8005768:	61b8      	str	r0, [r7, #24]
        break;
 800576a:	e013      	b.n	8005794 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7fd fb62 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8005770:	61b8      	str	r0, [r7, #24]
        break;
 8005772:	e00f      	b.n	8005794 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005774:	4b1d      	ldr	r3, [pc, #116]	; (80057ec <UART_SetConfig+0x4c4>)
 8005776:	61bb      	str	r3, [r7, #24]
        break;
 8005778:	e00c      	b.n	8005794 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800577a:	f7fd fa35 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 800577e:	61b8      	str	r0, [r7, #24]
        break;
 8005780:	e008      	b.n	8005794 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005786:	61bb      	str	r3, [r7, #24]
        break;
 8005788:	e004      	b.n	8005794 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	77bb      	strb	r3, [r7, #30]
        break;
 8005792:	bf00      	nop
    }

    if (pclk != 0U)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d018      	beq.n	80057cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	085a      	lsrs	r2, r3, #1
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	441a      	add	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b0f      	cmp	r3, #15
 80057b2:	d909      	bls.n	80057c8 <UART_SetConfig+0x4a0>
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ba:	d205      	bcs.n	80057c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
 80057c6:	e001      	b.n	80057cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3720      	adds	r7, #32
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40007c00 	.word	0x40007c00
 80057e8:	40023800 	.word	0x40023800
 80057ec:	00f42400 	.word	0x00f42400

080057f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00a      	beq.n	800581a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00a      	beq.n	800583c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01a      	beq.n	8005906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ee:	d10a      	bne.n	8005906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]
  }
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af02      	add	r7, sp, #8
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005944:	f7fb fdc0 	bl	80014c8 <HAL_GetTick>
 8005948:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d10e      	bne.n	8005976 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f81b 	bl	80059a2 <UART_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e011      	b.n	800599a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2220      	movs	r2, #32
 800597a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b09c      	sub	sp, #112	; 0x70
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	603b      	str	r3, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b2:	e0a7      	b.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ba:	f000 80a3 	beq.w	8005b04 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059be:	f7fb fd83 	bl	80014c8 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d302      	bcc.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d13f      	bne.n	8005a54 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059e8:	667b      	str	r3, [r7, #100]	; 0x64
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e6      	bne.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3308      	adds	r3, #8
 8005a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a26:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e5      	bne.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e068      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d050      	beq.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a70:	d148      	bne.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a9c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e6      	bne.n	8005a7c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	613b      	str	r3, [r7, #16]
   return(result);
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f023 0301 	bic.w	r3, r3, #1
 8005ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3308      	adds	r3, #8
 8005acc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ace:	623a      	str	r2, [r7, #32]
 8005ad0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad2:	69f9      	ldr	r1, [r7, #28]
 8005ad4:	6a3a      	ldr	r2, [r7, #32]
 8005ad6:	e841 2300 	strex	r3, r2, [r1]
 8005ada:	61bb      	str	r3, [r7, #24]
   return(result);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e5      	bne.n	8005aae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e010      	b.n	8005b26 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	f43f af48 	beq.w	80059b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3770      	adds	r7, #112	; 0x70
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b095      	sub	sp, #84	; 0x54
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	643b      	str	r3, [r7, #64]	; 0x40
 8005b56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e6      	bne.n	8005b36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3308      	adds	r3, #8
 8005b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e5      	bne.n	8005b68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d118      	bne.n	8005bd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0310 	bic.w	r3, r3, #16
 8005bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	e841 2300 	strex	r3, r2, [r1]
 8005bce:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bea:	bf00      	nop
 8005bec:	3754      	adds	r7, #84	; 0x54
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fb71 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b088      	sub	sp, #32
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	613b      	str	r3, [r7, #16]
   return(result);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7ff fb3d 	bl	80052e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6e:	bf00      	nop
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c78:	b084      	sub	sp, #16
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	f107 001c 	add.w	r0, r7, #28
 8005c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d120      	bne.n	8005cd2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <USB_CoreInit+0xac>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa96 	bl	80061f8 <USB_CoreReset>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	e010      	b.n	8005cf4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fa8a 	bl	80061f8 <USB_CoreReset>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d10b      	bne.n	8005d12 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f043 0206 	orr.w	r2, r3, #6
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d1e:	b004      	add	sp, #16
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	ffbdffbf 	.word	0xffbdffbf

08005d28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f023 0201 	bic.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d115      	bne.n	8005d98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f7fb fbb1 	bl	80014e0 <HAL_Delay>
      ms++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa29 	bl	80061dc <USB_GetMode>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d01e      	beq.n	8005dce <USB_SetCurrentMode+0x84>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b31      	cmp	r3, #49	; 0x31
 8005d94:	d9f0      	bls.n	8005d78 <USB_SetCurrentMode+0x2e>
 8005d96:	e01a      	b.n	8005dce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d115      	bne.n	8005dca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005daa:	2001      	movs	r0, #1
 8005dac:	f7fb fb98 	bl	80014e0 <HAL_Delay>
      ms++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa10 	bl	80061dc <USB_GetMode>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d005      	beq.n	8005dce <USB_SetCurrentMode+0x84>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b31      	cmp	r3, #49	; 0x31
 8005dc6:	d9f0      	bls.n	8005daa <USB_SetCurrentMode+0x60>
 8005dc8:	e001      	b.n	8005dce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e005      	b.n	8005dda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b32      	cmp	r3, #50	; 0x32
 8005dd2:	d101      	bne.n	8005dd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e000      	b.n	8005dda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005de4:	b084      	sub	sp, #16
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b086      	sub	sp, #24
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005df2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	e009      	b.n	8005e18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	3340      	adds	r3, #64	; 0x40
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	2200      	movs	r2, #0
 8005e10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	3301      	adds	r3, #1
 8005e16:	613b      	str	r3, [r7, #16]
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2b0e      	cmp	r3, #14
 8005e1c:	d9f2      	bls.n	8005e04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d11c      	bne.n	8005e5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	e005      	b.n	8005e6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e70:	461a      	mov	r2, r3
 8005e72:	2300      	movs	r3, #0
 8005e74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e84:	461a      	mov	r2, r3
 8005e86:	680b      	ldr	r3, [r1, #0]
 8005e88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10c      	bne.n	8005eaa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e96:	2100      	movs	r1, #0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f965 	bl	8006168 <USB_SetDevSpeed>
 8005e9e:	e008      	b.n	8005eb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f960 	bl	8006168 <USB_SetDevSpeed>
 8005ea8:	e003      	b.n	8005eb2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005eaa:	2103      	movs	r1, #3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f95b 	bl	8006168 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eb2:	2110      	movs	r1, #16
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8f3 	bl	80060a0 <USB_FlushTxFifo>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f91f 	bl	8006108 <USB_FlushRxFifo>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	461a      	mov	r2, r3
 8005edc:	2300      	movs	r3, #0
 8005ede:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	e043      	b.n	8005f86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f14:	d118      	bne.n	8005f48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	e013      	b.n	8005f5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e008      	b.n	8005f5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f54:	461a      	mov	r2, r3
 8005f56:	2300      	movs	r3, #0
 8005f58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	461a      	mov	r2, r3
 8005f68:	2300      	movs	r3, #0
 8005f6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3301      	adds	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d3b7      	bcc.n	8005efe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f8e:	2300      	movs	r3, #0
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	e043      	b.n	800601c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005faa:	d118      	bne.n	8005fde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10a      	bne.n	8005fc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	e013      	b.n	8005ff0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	e008      	b.n	8005ff0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	461a      	mov	r2, r3
 8005fec:	2300      	movs	r3, #0
 8005fee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	2300      	movs	r3, #0
 8006000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	461a      	mov	r2, r3
 8006010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006014:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3301      	adds	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	429a      	cmp	r2, r3
 8006022:	d3b7      	bcc.n	8005f94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006032:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006036:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006044:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f043 0210 	orr.w	r2, r3, #16
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <USB_DevInit+0x2b4>)
 800605e:	4313      	orrs	r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f043 0208 	orr.w	r2, r3, #8
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699a      	ldr	r2, [r3, #24]
 8006080:	4b06      	ldr	r3, [pc, #24]	; (800609c <USB_DevInit+0x2b8>)
 8006082:	4313      	orrs	r3, r2
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006088:	7dfb      	ldrb	r3, [r7, #23]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006094:	b004      	add	sp, #16
 8006096:	4770      	bx	lr
 8006098:	803c3800 	.word	0x803c3800
 800609c:	40000004 	.word	0x40000004

080060a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <USB_FlushTxFifo+0x64>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e01b      	b.n	80060f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	daf2      	bge.n	80060ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	019b      	lsls	r3, r3, #6
 80060d0:	f043 0220 	orr.w	r2, r3, #32
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	3301      	adds	r3, #1
 80060dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a08      	ldr	r2, [pc, #32]	; (8006104 <USB_FlushTxFifo+0x64>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e006      	b.n	80060f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d0f0      	beq.n	80060d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	00030d40 	.word	0x00030d40

08006108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <USB_FlushRxFifo+0x5c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e018      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	daf2      	bge.n	8006114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2210      	movs	r2, #16
 8006136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a08      	ldr	r2, [pc, #32]	; (8006164 <USB_FlushRxFifo+0x5c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d901      	bls.n	800614a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e006      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b10      	cmp	r3, #16
 8006154:	d0f0      	beq.n	8006138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	00030d40 	.word	0x00030d40

08006168 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3714      	adds	r7, #20
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b085      	sub	sp, #20
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061b4:	f023 0303 	bic.w	r3, r3, #3
 80061b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	f003 0301 	and.w	r3, r3, #1
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a13      	ldr	r2, [pc, #76]	; (800625c <USB_CoreReset+0x64>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d901      	bls.n	8006216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e01b      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	daf2      	bge.n	8006204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f043 0201 	orr.w	r2, r3, #1
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3301      	adds	r3, #1
 8006232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a09      	ldr	r2, [pc, #36]	; (800625c <USB_CoreReset+0x64>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e006      	b.n	800624e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d0f0      	beq.n	800622e <USB_CoreReset+0x36>

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	00030d40 	.word	0x00030d40

08006260 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800626e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006272:	2b84      	cmp	r3, #132	; 0x84
 8006274:	d005      	beq.n	8006282 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006276:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	3303      	adds	r3, #3
 8006280:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006282:	68fb      	ldr	r3, [r7, #12]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006294:	f000 fede 	bl	8007054 <vTaskStartScheduler>
  
  return osOK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	bd80      	pop	{r7, pc}

0800629e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800629e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a0:	b089      	sub	sp, #36	; 0x24
 80062a2:	af04      	add	r7, sp, #16
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d020      	beq.n	80062f2 <osThreadCreate+0x54>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01c      	beq.n	80062f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685c      	ldr	r4, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691e      	ldr	r6, [r3, #16]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff ffc8 	bl	8006260 <makeFreeRtosPriority>
 80062d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062da:	9202      	str	r2, [sp, #8]
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	9100      	str	r1, [sp, #0]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	4632      	mov	r2, r6
 80062e4:	4629      	mov	r1, r5
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 fce2 	bl	8006cb0 <xTaskCreateStatic>
 80062ec:	4603      	mov	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]
 80062f0:	e01c      	b.n	800632c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685c      	ldr	r4, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff ffaa 	bl	8006260 <makeFreeRtosPriority>
 800630c:	4602      	mov	r2, r0
 800630e:	f107 030c 	add.w	r3, r7, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	9200      	str	r2, [sp, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	4632      	mov	r2, r6
 800631a:	4629      	mov	r1, r5
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fd2a 	bl	8006d76 <xTaskCreate>
 8006322:	4603      	mov	r3, r0
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800632c:	68fb      	ldr	r3, [r7, #12]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006336 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <osDelay+0x16>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	e000      	b.n	800634e <osDelay+0x18>
 800634c:	2301      	movs	r3, #1
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fe4a 	bl	8006fe8 <vTaskDelay>
  
  return osOK;
 8006354:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800635e:	b590      	push	{r4, r7, lr}
 8006360:	b085      	sub	sp, #20
 8006362:	af02      	add	r7, sp, #8
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d011      	beq.n	8006394 <osMessageCreate+0x36>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00d      	beq.n	8006394 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2400      	movs	r4, #0
 800638a:	9400      	str	r4, [sp, #0]
 800638c:	f000 f92e 	bl	80065ec <xQueueGenericCreateStatic>
 8006390:	4603      	mov	r3, r0
 8006392:	e008      	b.n	80063a6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	4619      	mov	r1, r3
 80063a0:	f000 f9a6 	bl	80066f0 <xQueueGenericCreate>
 80063a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}

080063ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f103 0208 	add.w	r2, r3, #8
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f04f 32ff 	mov.w	r2, #4294967295
 80063c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f103 0208 	add.w	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f103 0208 	add.w	r2, r3, #8
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006466:	d103      	bne.n	8006470 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e00c      	b.n	800648a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3308      	adds	r3, #8
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	e002      	b.n	800647e <vListInsert+0x2e>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	429a      	cmp	r2, r3
 8006488:	d2f6      	bcs.n	8006478 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064c2:	b480      	push	{r7}
 80064c4:	b085      	sub	sp, #20
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	6892      	ldr	r2, [r2, #8]
 80064d8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	6852      	ldr	r2, [r2, #4]
 80064e2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d103      	bne.n	80064f6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006530:	b672      	cpsid	i
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	b662      	cpsie	i
 8006540:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006546:	f001 fbb1 	bl	8007cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	441a      	add	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	3b01      	subs	r3, #1
 8006578:	68f9      	ldr	r1, [r7, #12]
 800657a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	441a      	add	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	22ff      	movs	r2, #255	; 0xff
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	22ff      	movs	r2, #255	; 0xff
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d114      	bne.n	80065c6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01a      	beq.n	80065da <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	3310      	adds	r3, #16
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 ffa1 	bl	80074f0 <xTaskRemoveFromEventList>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065b4:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <xQueueGenericReset+0xd0>)
 80065b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	f3bf 8f6f 	isb	sy
 80065c4:	e009      	b.n	80065da <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3310      	adds	r3, #16
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff feef 	bl	80063ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3324      	adds	r3, #36	; 0x24
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff feea 	bl	80063ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80065da:	f001 fb9b 	bl	8007d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80065de:	2301      	movs	r3, #1
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10c      	bne.n	800661a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	b672      	cpsid	i
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	b662      	cpsie	i
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10c      	bne.n	800663a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006636:	bf00      	nop
 8006638:	e7fe      	b.n	8006638 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <xQueueGenericCreateStatic+0x5a>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <xQueueGenericCreateStatic+0x5e>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <xQueueGenericCreateStatic+0x60>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	b672      	cpsid	i
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	b662      	cpsie	i
 8006664:	623b      	str	r3, [r7, #32]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <xQueueGenericCreateStatic+0x8a>
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <xQueueGenericCreateStatic+0x8e>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <xQueueGenericCreateStatic+0x90>
 800667a:	2300      	movs	r3, #0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	61fb      	str	r3, [r7, #28]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800669a:	2348      	movs	r3, #72	; 0x48
 800669c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2b48      	cmp	r3, #72	; 0x48
 80066a2:	d00c      	beq.n	80066be <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	b672      	cpsid	i
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	b662      	cpsie	i
 80066b8:	61bb      	str	r3, [r7, #24]
}
 80066ba:	bf00      	nop
 80066bc:	e7fe      	b.n	80066bc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f847 	bl	8006774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3730      	adds	r7, #48	; 0x30
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08a      	sub	sp, #40	; 0x28
 80066f4:	af02      	add	r7, sp, #8
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4613      	mov	r3, r2
 80066fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10c      	bne.n	800671e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	b672      	cpsid	i
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	b662      	cpsie	i
 8006718:	613b      	str	r3, [r7, #16]
}
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	e004      	b.n	8006734 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3348      	adds	r3, #72	; 0x48
 8006738:	4618      	mov	r0, r3
 800673a:	f001 fbe3 	bl	8007f04 <pvPortMalloc>
 800673e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d011      	beq.n	800676a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	3348      	adds	r3, #72	; 0x48
 800674e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006758:	79fa      	ldrb	r2, [r7, #7]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f805 	bl	8006774 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800676a:	69bb      	ldr	r3, [r7, #24]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e002      	b.n	8006796 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067a2:	2101      	movs	r1, #1
 80067a4:	69b8      	ldr	r0, [r7, #24]
 80067a6:	f7ff feb7 	bl	8006518 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067aa:	bf00      	nop
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b08e      	sub	sp, #56	; 0x38
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
 80067be:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10c      	bne.n	80067e4 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ce:	b672      	cpsid	i
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	b662      	cpsie	i
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <xQueueGenericSendFromISR+0x40>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <xQueueGenericSendFromISR+0x44>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <xQueueGenericSendFromISR+0x46>
 80067f6:	2300      	movs	r3, #0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10c      	bne.n	8006816 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	b672      	cpsid	i
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	b662      	cpsie	i
 8006810:	623b      	str	r3, [r7, #32]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d103      	bne.n	8006824 <xQueueGenericSendFromISR+0x72>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006820:	2b01      	cmp	r3, #1
 8006822:	d101      	bne.n	8006828 <xQueueGenericSendFromISR+0x76>
 8006824:	2301      	movs	r3, #1
 8006826:	e000      	b.n	800682a <xQueueGenericSendFromISR+0x78>
 8006828:	2300      	movs	r3, #0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	b672      	cpsid	i
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	b662      	cpsie	i
 8006842:	61fb      	str	r3, [r7, #28]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006848:	f001 fb18 	bl	8007e7c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800684c:	f3ef 8211 	mrs	r2, BASEPRI
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	61ba      	str	r2, [r7, #24]
 8006866:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006868:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800686a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006874:	429a      	cmp	r2, r3
 8006876:	d302      	bcc.n	800687e <xQueueGenericSendFromISR+0xcc>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2b02      	cmp	r3, #2
 800687c:	d12c      	bne.n	80068d8 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688e:	f000 f917 	bl	8006ac0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006892:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d112      	bne.n	80068c2 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d016      	beq.n	80068d2 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	3324      	adds	r3, #36	; 0x24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe21 	bl	80074f0 <xTaskRemoveFromEventList>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00e      	beq.n	80068d2 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e007      	b.n	80068d2 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068c6:	3301      	adds	r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	b25a      	sxtb	r2, r3
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80068d2:	2301      	movs	r3, #1
 80068d4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80068d6:	e001      	b.n	80068dc <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3738      	adds	r7, #56	; 0x38
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	; 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006900:	2300      	movs	r3, #0
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10c      	bne.n	8006928 <xQueueReceive+0x34>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	b672      	cpsid	i
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	b662      	cpsie	i
 8006922:	623b      	str	r3, [r7, #32]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <xQueueReceive+0x42>
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueReceive+0x46>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueReceive+0x48>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10c      	bne.n	800695a <xQueueReceive+0x66>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	b672      	cpsid	i
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	b662      	cpsie	i
 8006954:	61fb      	str	r3, [r7, #28]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695a:	f000 ff8d 	bl	8007878 <xTaskGetSchedulerState>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <xQueueReceive+0x76>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <xQueueReceive+0x7a>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueReceive+0x7c>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <xQueueReceive+0x9a>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	61bb      	str	r3, [r7, #24]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800698e:	f001 f98d 	bl	8007cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	2b00      	cmp	r3, #0
 800699c:	d01f      	beq.n	80069de <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069a2:	f000 f8f7 	bl	8006b94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a8:	1e5a      	subs	r2, r3, #1
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00f      	beq.n	80069d6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	3310      	adds	r3, #16
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fd98 	bl	80074f0 <xTaskRemoveFromEventList>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069c6:	4b3d      	ldr	r3, [pc, #244]	; (8006abc <xQueueReceive+0x1c8>)
 80069c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069d6:	f001 f99d 	bl	8007d14 <vPortExitCritical>
				return pdPASS;
 80069da:	2301      	movs	r3, #1
 80069dc:	e069      	b.n	8006ab2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069e4:	f001 f996 	bl	8007d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e062      	b.n	8006ab2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069f2:	f107 0310 	add.w	r3, r7, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fdde 	bl	80075b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069fc:	2301      	movs	r3, #1
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a00:	f001 f988 	bl	8007d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a04:	f000 fb8a 	bl	800711c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a08:	f001 f950 	bl	8007cac <vPortEnterCritical>
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a12:	b25b      	sxtb	r3, r3
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a18:	d103      	bne.n	8006a22 <xQueueReceive+0x12e>
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a28:	b25b      	sxtb	r3, r3
 8006a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a2e:	d103      	bne.n	8006a38 <xQueueReceive+0x144>
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a38:	f001 f96c 	bl	8007d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a3c:	1d3a      	adds	r2, r7, #4
 8006a3e:	f107 0310 	add.w	r3, r7, #16
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fdcd 	bl	80075e4 <xTaskCheckForTimeOut>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d123      	bne.n	8006a98 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a52:	f000 f917 	bl	8006c84 <prvIsQueueEmpty>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d017      	beq.n	8006a8c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	4611      	mov	r1, r2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fd1d 	bl	80074a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a6c:	f000 f8b8 	bl	8006be0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a70:	f000 fb62 	bl	8007138 <xTaskResumeAll>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d189      	bne.n	800698e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006a7a:	4b10      	ldr	r3, [pc, #64]	; (8006abc <xQueueReceive+0x1c8>)
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	f3bf 8f6f 	isb	sy
 8006a8a:	e780      	b.n	800698e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8e:	f000 f8a7 	bl	8006be0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a92:	f000 fb51 	bl	8007138 <xTaskResumeAll>
 8006a96:	e77a      	b.n	800698e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9a:	f000 f8a1 	bl	8006be0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a9e:	f000 fb4b 	bl	8007138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa4:	f000 f8ee 	bl	8006c84 <prvIsQueueEmpty>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f43f af6f 	beq.w	800698e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3730      	adds	r7, #48	; 0x30
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10d      	bne.n	8006afa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d14d      	bne.n	8006b82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fee2 	bl	80078b4 <xTaskPriorityDisinherit>
 8006af0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	609a      	str	r2, [r3, #8]
 8006af8:	e043      	b.n	8006b82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d119      	bne.n	8006b34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6858      	ldr	r0, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	f001 fc0a 	bl	8008324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d32b      	bcc.n	8006b82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	605a      	str	r2, [r3, #4]
 8006b32:	e026      	b.n	8006b82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68d8      	ldr	r0, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	f001 fbf0 	bl	8008324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	425b      	negs	r3, r3
 8006b4e:	441a      	add	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d207      	bcs.n	8006b70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b68:	425b      	negs	r3, r3
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d105      	bne.n	8006b82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b8a:	697b      	ldr	r3, [r7, #20]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	441a      	add	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68da      	ldr	r2, [r3, #12]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d303      	bcc.n	8006bc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68d9      	ldr	r1, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	6838      	ldr	r0, [r7, #0]
 8006bd4:	f001 fba6 	bl	8008324 <memcpy>
	}
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006be8:	f001 f860 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bf4:	e011      	b.n	8006c1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d012      	beq.n	8006c24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3324      	adds	r3, #36	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 fc74 	bl	80074f0 <xTaskRemoveFromEventList>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c0e:	f000 fd4f 	bl	80076b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	dce9      	bgt.n	8006bf6 <prvUnlockQueue+0x16>
 8006c22:	e000      	b.n	8006c26 <prvUnlockQueue+0x46>
					break;
 8006c24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	22ff      	movs	r2, #255	; 0xff
 8006c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c2e:	f001 f871 	bl	8007d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c32:	f001 f83b 	bl	8007cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c3e:	e011      	b.n	8006c64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d012      	beq.n	8006c6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3310      	adds	r3, #16
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fc4f 	bl	80074f0 <xTaskRemoveFromEventList>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c58:	f000 fd2a 	bl	80076b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dce9      	bgt.n	8006c40 <prvUnlockQueue+0x60>
 8006c6c:	e000      	b.n	8006c70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	22ff      	movs	r2, #255	; 0xff
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c78:	f001 f84c 	bl	8007d14 <vPortExitCritical>
}
 8006c7c:	bf00      	nop
 8006c7e:	3710      	adds	r7, #16
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c8c:	f001 f80e 	bl	8007cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e001      	b.n	8006ca2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ca2:	f001 f837 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08e      	sub	sp, #56	; 0x38
 8006cb4:	af04      	add	r7, sp, #16
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
 8006cbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10c      	bne.n	8006cde <xTaskCreateStatic+0x2e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	b672      	cpsid	i
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	b662      	cpsie	i
 8006cd8:	623b      	str	r3, [r7, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10c      	bne.n	8006cfe <xTaskCreateStatic+0x4e>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	b672      	cpsid	i
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	b662      	cpsie	i
 8006cf8:	61fb      	str	r3, [r7, #28]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cfe:	2354      	movs	r3, #84	; 0x54
 8006d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	2b54      	cmp	r3, #84	; 0x54
 8006d06:	d00c      	beq.n	8006d22 <xTaskCreateStatic+0x72>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	b672      	cpsid	i
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	b662      	cpsie	i
 8006d1c:	61bb      	str	r3, [r7, #24]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01e      	beq.n	8006d68 <xTaskCreateStatic+0xb8>
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01b      	beq.n	8006d68 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d42:	2300      	movs	r3, #0
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	9301      	str	r3, [sp, #4]
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 f850 	bl	8006e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d62:	f000 f8d7 	bl	8006f14 <prvAddNewTaskToReadyList>
 8006d66:	e001      	b.n	8006d6c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d6c:	697b      	ldr	r3, [r7, #20]
	}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3728      	adds	r7, #40	; 0x28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b08c      	sub	sp, #48	; 0x30
 8006d7a:	af04      	add	r7, sp, #16
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f001 f8ba 	bl	8007f04 <pvPortMalloc>
 8006d90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00e      	beq.n	8006db6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d98:	2054      	movs	r0, #84	; 0x54
 8006d9a:	f001 f8b3 	bl	8007f04 <pvPortMalloc>
 8006d9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	631a      	str	r2, [r3, #48]	; 0x30
 8006dac:	e005      	b.n	8006dba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dae:	6978      	ldr	r0, [r7, #20]
 8006db0:	f001 f972 	bl	8008098 <vPortFree>
 8006db4:	e001      	b.n	8006dba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006db6:	2300      	movs	r3, #0
 8006db8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d017      	beq.n	8006df0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dc8:	88fa      	ldrh	r2, [r7, #6]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	9302      	str	r3, [sp, #8]
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f80e 	bl	8006e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006de4:	69f8      	ldr	r0, [r7, #28]
 8006de6:	f000 f895 	bl	8006f14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dea:	2301      	movs	r3, #1
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e002      	b.n	8006df6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006df6:	69bb      	ldr	r3, [r7, #24]
	}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006e18:	440b      	add	r3, r1
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f023 0307 	bic.w	r3, r3, #7
 8006e26:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e36:	b672      	cpsid	i
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	b662      	cpsie	i
 8006e46:	617b      	str	r3, [r7, #20]
}
 8006e48:	bf00      	nop
 8006e4a:	e7fe      	b.n	8006e4a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01f      	beq.n	8006e92 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	e012      	b.n	8006e7e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	7819      	ldrb	r1, [r3, #0]
 8006e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	3334      	adds	r3, #52	; 0x34
 8006e68:	460a      	mov	r2, r1
 8006e6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d006      	beq.n	8006e86 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b0f      	cmp	r3, #15
 8006e82:	d9e9      	bls.n	8006e58 <prvInitialiseNewTask+0x58>
 8006e84:	e000      	b.n	8006e88 <prvInitialiseNewTask+0x88>
			{
				break;
 8006e86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e90:	e003      	b.n	8006e9a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d901      	bls.n	8006ea4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ea0:	2306      	movs	r3, #6
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fa97 	bl	80063ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	3318      	adds	r3, #24
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fa92 	bl	80063ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ece:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	f1c3 0207 	rsb	r2, r3, #7
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ede:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	68f9      	ldr	r1, [r7, #12]
 8006ef2:	69b8      	ldr	r0, [r7, #24]
 8006ef4:	f000 fdce 	bl	8007a94 <pxPortInitialiseStack>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f0a:	bf00      	nop
 8006f0c:	3720      	adds	r7, #32
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f1c:	f000 fec6 	bl	8007cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f20:	4b2a      	ldr	r3, [pc, #168]	; (8006fcc <prvAddNewTaskToReadyList+0xb8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3301      	adds	r3, #1
 8006f26:	4a29      	ldr	r2, [pc, #164]	; (8006fcc <prvAddNewTaskToReadyList+0xb8>)
 8006f28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f2a:	4b29      	ldr	r3, [pc, #164]	; (8006fd0 <prvAddNewTaskToReadyList+0xbc>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f32:	4a27      	ldr	r2, [pc, #156]	; (8006fd0 <prvAddNewTaskToReadyList+0xbc>)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f38:	4b24      	ldr	r3, [pc, #144]	; (8006fcc <prvAddNewTaskToReadyList+0xb8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d110      	bne.n	8006f62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f40:	f000 fbda 	bl	80076f8 <prvInitialiseTaskLists>
 8006f44:	e00d      	b.n	8006f62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f46:	4b23      	ldr	r3, [pc, #140]	; (8006fd4 <prvAddNewTaskToReadyList+0xc0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f4e:	4b20      	ldr	r3, [pc, #128]	; (8006fd0 <prvAddNewTaskToReadyList+0xbc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d802      	bhi.n	8006f62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f5c:	4a1c      	ldr	r2, [pc, #112]	; (8006fd0 <prvAddNewTaskToReadyList+0xbc>)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <prvAddNewTaskToReadyList+0xc4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <prvAddNewTaskToReadyList+0xc4>)
 8006f6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	2201      	movs	r2, #1
 8006f72:	409a      	lsls	r2, r3
 8006f74:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <prvAddNewTaskToReadyList+0xc8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <prvAddNewTaskToReadyList+0xc8>)
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <prvAddNewTaskToReadyList+0xcc>)
 8006f8c:	441a      	add	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3304      	adds	r3, #4
 8006f92:	4619      	mov	r1, r3
 8006f94:	4610      	mov	r0, r2
 8006f96:	f7ff fa37 	bl	8006408 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f9a:	f000 febb 	bl	8007d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <prvAddNewTaskToReadyList+0xc0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00e      	beq.n	8006fc4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <prvAddNewTaskToReadyList+0xbc>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d207      	bcs.n	8006fc4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <prvAddNewTaskToReadyList+0xd0>)
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000c40 	.word	0x20000c40
 8006fd0:	20000b40 	.word	0x20000b40
 8006fd4:	20000c4c 	.word	0x20000c4c
 8006fd8:	20000c5c 	.word	0x20000c5c
 8006fdc:	20000c48 	.word	0x20000c48
 8006fe0:	20000b44 	.word	0x20000b44
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d019      	beq.n	800702e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ffa:	4b14      	ldr	r3, [pc, #80]	; (800704c <vTaskDelay+0x64>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <vTaskDelay+0x34>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	b672      	cpsid	i
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	b662      	cpsie	i
 8007016:	60bb      	str	r3, [r7, #8]
}
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800701c:	f000 f87e 	bl	800711c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fcd0 	bl	80079c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007028:	f000 f886 	bl	8007138 <xTaskResumeAll>
 800702c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d107      	bne.n	8007044 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <vTaskDelay+0x68>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000c68 	.word	0x20000c68
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007062:	463a      	mov	r2, r7
 8007064:	1d39      	adds	r1, r7, #4
 8007066:	f107 0308 	add.w	r3, r7, #8
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 fa4e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	2300      	movs	r3, #0
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	460a      	mov	r2, r1
 8007082:	4920      	ldr	r1, [pc, #128]	; (8007104 <vTaskStartScheduler+0xb0>)
 8007084:	4820      	ldr	r0, [pc, #128]	; (8007108 <vTaskStartScheduler+0xb4>)
 8007086:	f7ff fe13 	bl	8006cb0 <xTaskCreateStatic>
 800708a:	4603      	mov	r3, r0
 800708c:	4a1f      	ldr	r2, [pc, #124]	; (800710c <vTaskStartScheduler+0xb8>)
 800708e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007090:	4b1e      	ldr	r3, [pc, #120]	; (800710c <vTaskStartScheduler+0xb8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e001      	b.n	80070a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d118      	bne.n	80070da <vTaskStartScheduler+0x86>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	613b      	str	r3, [r7, #16]
}
 80070be:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070c0:	4b13      	ldr	r3, [pc, #76]	; (8007110 <vTaskStartScheduler+0xbc>)
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070c8:	4b12      	ldr	r3, [pc, #72]	; (8007114 <vTaskStartScheduler+0xc0>)
 80070ca:	2201      	movs	r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <vTaskStartScheduler+0xc4>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070d4:	f000 fd6c 	bl	8007bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070d8:	e010      	b.n	80070fc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d10c      	bne.n	80070fc <vTaskStartScheduler+0xa8>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	60fb      	str	r3, [r7, #12]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vTaskStartScheduler+0xa6>
}
 80070fc:	bf00      	nop
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	080083b4 	.word	0x080083b4
 8007108:	080076c9 	.word	0x080076c9
 800710c:	20000c64 	.word	0x20000c64
 8007110:	20000c60 	.word	0x20000c60
 8007114:	20000c4c 	.word	0x20000c4c
 8007118:	20000c44 	.word	0x20000c44

0800711c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <vTaskSuspendAll+0x18>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3301      	adds	r3, #1
 8007126:	4a03      	ldr	r2, [pc, #12]	; (8007134 <vTaskSuspendAll+0x18>)
 8007128:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20000c68 	.word	0x20000c68

08007138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007146:	4b42      	ldr	r3, [pc, #264]	; (8007250 <xTaskResumeAll+0x118>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10c      	bne.n	8007168 <xTaskResumeAll+0x30>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	b672      	cpsid	i
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	b662      	cpsie	i
 8007162:	603b      	str	r3, [r7, #0]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007168:	f000 fda0 	bl	8007cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800716c:	4b38      	ldr	r3, [pc, #224]	; (8007250 <xTaskResumeAll+0x118>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3b01      	subs	r3, #1
 8007172:	4a37      	ldr	r2, [pc, #220]	; (8007250 <xTaskResumeAll+0x118>)
 8007174:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007176:	4b36      	ldr	r3, [pc, #216]	; (8007250 <xTaskResumeAll+0x118>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d161      	bne.n	8007242 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800717e:	4b35      	ldr	r3, [pc, #212]	; (8007254 <xTaskResumeAll+0x11c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d05d      	beq.n	8007242 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007186:	e02e      	b.n	80071e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007188:	4b33      	ldr	r3, [pc, #204]	; (8007258 <xTaskResumeAll+0x120>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3318      	adds	r3, #24
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff f994 	bl	80064c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3304      	adds	r3, #4
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff f98f 	bl	80064c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	4b2b      	ldr	r3, [pc, #172]	; (800725c <xTaskResumeAll+0x124>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	4a2a      	ldr	r2, [pc, #168]	; (800725c <xTaskResumeAll+0x124>)
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4a27      	ldr	r2, [pc, #156]	; (8007260 <xTaskResumeAll+0x128>)
 80071c4:	441a      	add	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3304      	adds	r3, #4
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7ff f91b 	bl	8006408 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d6:	4b23      	ldr	r3, [pc, #140]	; (8007264 <xTaskResumeAll+0x12c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	429a      	cmp	r2, r3
 80071de:	d302      	bcc.n	80071e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <xTaskResumeAll+0x130>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071e6:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <xTaskResumeAll+0x120>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1cc      	bne.n	8007188 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071f4:	f000 fb20 	bl	8007838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071f8:	4b1c      	ldr	r3, [pc, #112]	; (800726c <xTaskResumeAll+0x134>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d010      	beq.n	8007226 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007204:	f000 f836 	bl	8007274 <xTaskIncrementTick>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800720e:	4b16      	ldr	r3, [pc, #88]	; (8007268 <xTaskResumeAll+0x130>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f1      	bne.n	8007204 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <xTaskResumeAll+0x134>)
 8007222:	2200      	movs	r2, #0
 8007224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <xTaskResumeAll+0x130>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007232:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <xTaskResumeAll+0x138>)
 8007234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007242:	f000 fd67 	bl	8007d14 <vPortExitCritical>

	return xAlreadyYielded;
 8007246:	68bb      	ldr	r3, [r7, #8]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000c68 	.word	0x20000c68
 8007254:	20000c40 	.word	0x20000c40
 8007258:	20000c00 	.word	0x20000c00
 800725c:	20000c48 	.word	0x20000c48
 8007260:	20000b44 	.word	0x20000b44
 8007264:	20000b40 	.word	0x20000b40
 8007268:	20000c54 	.word	0x20000c54
 800726c:	20000c50 	.word	0x20000c50
 8007270:	e000ed04 	.word	0xe000ed04

08007274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800727e:	4b4f      	ldr	r3, [pc, #316]	; (80073bc <xTaskIncrementTick+0x148>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 808a 	bne.w	800739c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007288:	4b4d      	ldr	r3, [pc, #308]	; (80073c0 <xTaskIncrementTick+0x14c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007290:	4a4b      	ldr	r2, [pc, #300]	; (80073c0 <xTaskIncrementTick+0x14c>)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d122      	bne.n	80072e2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800729c:	4b49      	ldr	r3, [pc, #292]	; (80073c4 <xTaskIncrementTick+0x150>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00c      	beq.n	80072c0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	b672      	cpsid	i
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	b662      	cpsie	i
 80072ba:	603b      	str	r3, [r7, #0]
}
 80072bc:	bf00      	nop
 80072be:	e7fe      	b.n	80072be <xTaskIncrementTick+0x4a>
 80072c0:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <xTaskIncrementTick+0x150>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	4b40      	ldr	r3, [pc, #256]	; (80073c8 <xTaskIncrementTick+0x154>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a3e      	ldr	r2, [pc, #248]	; (80073c4 <xTaskIncrementTick+0x150>)
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4a3e      	ldr	r2, [pc, #248]	; (80073c8 <xTaskIncrementTick+0x154>)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	4b3d      	ldr	r3, [pc, #244]	; (80073cc <xTaskIncrementTick+0x158>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3301      	adds	r3, #1
 80072da:	4a3c      	ldr	r2, [pc, #240]	; (80073cc <xTaskIncrementTick+0x158>)
 80072dc:	6013      	str	r3, [r2, #0]
 80072de:	f000 faab 	bl	8007838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072e2:	4b3b      	ldr	r3, [pc, #236]	; (80073d0 <xTaskIncrementTick+0x15c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d348      	bcc.n	800737e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ec:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <xTaskIncrementTick+0x150>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d104      	bne.n	8007300 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <xTaskIncrementTick+0x15c>)
 80072f8:	f04f 32ff 	mov.w	r2, #4294967295
 80072fc:	601a      	str	r2, [r3, #0]
					break;
 80072fe:	e03e      	b.n	800737e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007300:	4b30      	ldr	r3, [pc, #192]	; (80073c4 <xTaskIncrementTick+0x150>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d203      	bcs.n	8007320 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007318:	4a2d      	ldr	r2, [pc, #180]	; (80073d0 <xTaskIncrementTick+0x15c>)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800731e:	e02e      	b.n	800737e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3304      	adds	r3, #4
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff f8cc 	bl	80064c2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	3318      	adds	r3, #24
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff f8c3 	bl	80064c2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	2201      	movs	r2, #1
 8007342:	409a      	lsls	r2, r3
 8007344:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <xTaskIncrementTick+0x160>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4313      	orrs	r3, r2
 800734a:	4a22      	ldr	r2, [pc, #136]	; (80073d4 <xTaskIncrementTick+0x160>)
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <xTaskIncrementTick+0x164>)
 800735c:	441a      	add	r2, r3
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7ff f84f 	bl	8006408 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <xTaskIncrementTick+0x168>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	429a      	cmp	r2, r3
 8007376:	d3b9      	bcc.n	80072ec <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007378:	2301      	movs	r3, #1
 800737a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800737c:	e7b6      	b.n	80072ec <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <xTaskIncrementTick+0x168>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4914      	ldr	r1, [pc, #80]	; (80073d8 <xTaskIncrementTick+0x164>)
 8007386:	4613      	mov	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d907      	bls.n	80073a6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007396:	2301      	movs	r3, #1
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	e004      	b.n	80073a6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800739c:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xTaskIncrementTick+0x16c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	4a0f      	ldr	r2, [pc, #60]	; (80073e0 <xTaskIncrementTick+0x16c>)
 80073a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <xTaskIncrementTick+0x170>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80073ae:	2301      	movs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000c68 	.word	0x20000c68
 80073c0:	20000c44 	.word	0x20000c44
 80073c4:	20000bf8 	.word	0x20000bf8
 80073c8:	20000bfc 	.word	0x20000bfc
 80073cc:	20000c58 	.word	0x20000c58
 80073d0:	20000c60 	.word	0x20000c60
 80073d4:	20000c48 	.word	0x20000c48
 80073d8:	20000b44 	.word	0x20000b44
 80073dc:	20000b40 	.word	0x20000b40
 80073e0:	20000c50 	.word	0x20000c50
 80073e4:	20000c54 	.word	0x20000c54

080073e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ee:	4b28      	ldr	r3, [pc, #160]	; (8007490 <vTaskSwitchContext+0xa8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073f6:	4b27      	ldr	r3, [pc, #156]	; (8007494 <vTaskSwitchContext+0xac>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073fc:	e041      	b.n	8007482 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80073fe:	4b25      	ldr	r3, [pc, #148]	; (8007494 <vTaskSwitchContext+0xac>)
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <vTaskSwitchContext+0xb0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	fab3 f383 	clz	r3, r3
 8007410:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007412:	7afb      	ldrb	r3, [r7, #11]
 8007414:	f1c3 031f 	rsb	r3, r3, #31
 8007418:	617b      	str	r3, [r7, #20]
 800741a:	4920      	ldr	r1, [pc, #128]	; (800749c <vTaskSwitchContext+0xb4>)
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <vTaskSwitchContext+0x60>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007432:	b672      	cpsid	i
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	b662      	cpsie	i
 8007442:	607b      	str	r3, [r7, #4]
}
 8007444:	bf00      	nop
 8007446:	e7fe      	b.n	8007446 <vTaskSwitchContext+0x5e>
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <vTaskSwitchContext+0xb4>)
 8007454:	4413      	add	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	3308      	adds	r3, #8
 800746a:	429a      	cmp	r2, r3
 800746c:	d104      	bne.n	8007478 <vTaskSwitchContext+0x90>
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	605a      	str	r2, [r3, #4]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <vTaskSwitchContext+0xb8>)
 8007480:	6013      	str	r3, [r2, #0]
}
 8007482:	bf00      	nop
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000c68 	.word	0x20000c68
 8007494:	20000c54 	.word	0x20000c54
 8007498:	20000c48 	.word	0x20000c48
 800749c:	20000b44 	.word	0x20000b44
 80074a0:	20000b40 	.word	0x20000b40

080074a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10c      	bne.n	80074ce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	b672      	cpsid	i
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	b662      	cpsie	i
 80074c8:	60fb      	str	r3, [r7, #12]
}
 80074ca:	bf00      	nop
 80074cc:	e7fe      	b.n	80074cc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <vTaskPlaceOnEventList+0x48>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3318      	adds	r3, #24
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fe ffba 	bl	8006450 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074dc:	2101      	movs	r1, #1
 80074de:	6838      	ldr	r0, [r7, #0]
 80074e0:	f000 fa72 	bl	80079c8 <prvAddCurrentTaskToDelayedList>
}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	20000b40 	.word	0x20000b40

080074f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10c      	bne.n	8007520 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	b672      	cpsid	i
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	b662      	cpsie	i
 800751a:	60fb      	str	r3, [r7, #12]
}
 800751c:	bf00      	nop
 800751e:	e7fe      	b.n	800751e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3318      	adds	r3, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe ffcc 	bl	80064c2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800752a:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <xTaskRemoveFromEventList+0xb0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d11c      	bne.n	800756c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe ffc3 	bl	80064c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	2201      	movs	r2, #1
 8007542:	409a      	lsls	r2, r3
 8007544:	4b17      	ldr	r3, [pc, #92]	; (80075a4 <xTaskRemoveFromEventList+0xb4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4313      	orrs	r3, r2
 800754a:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <xTaskRemoveFromEventList+0xb4>)
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	4613      	mov	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <xTaskRemoveFromEventList+0xb8>)
 800755c:	441a      	add	r2, r3
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3304      	adds	r3, #4
 8007562:	4619      	mov	r1, r3
 8007564:	4610      	mov	r0, r2
 8007566:	f7fe ff4f 	bl	8006408 <vListInsertEnd>
 800756a:	e005      	b.n	8007578 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	3318      	adds	r3, #24
 8007570:	4619      	mov	r1, r3
 8007572:	480e      	ldr	r0, [pc, #56]	; (80075ac <xTaskRemoveFromEventList+0xbc>)
 8007574:	f7fe ff48 	bl	8006408 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757c:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <xTaskRemoveFromEventList+0xc0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	429a      	cmp	r2, r3
 8007584:	d905      	bls.n	8007592 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007586:	2301      	movs	r3, #1
 8007588:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <xTaskRemoveFromEventList+0xc4>)
 800758c:	2201      	movs	r2, #1
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	e001      	b.n	8007596 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007596:	697b      	ldr	r3, [r7, #20]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000c68 	.word	0x20000c68
 80075a4:	20000c48 	.word	0x20000c48
 80075a8:	20000b44 	.word	0x20000b44
 80075ac:	20000c00 	.word	0x20000c00
 80075b0:	20000b40 	.word	0x20000b40
 80075b4:	20000c54 	.word	0x20000c54

080075b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vTaskInternalSetTimeOutState+0x24>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <vTaskInternalSetTimeOutState+0x28>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000c58 	.word	0x20000c58
 80075e0:	20000c44 	.word	0x20000c44

080075e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	b672      	cpsid	i
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	b662      	cpsie	i
 8007608:	613b      	str	r3, [r7, #16]
}
 800760a:	bf00      	nop
 800760c:	e7fe      	b.n	800760c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10c      	bne.n	800762e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	b672      	cpsid	i
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	b662      	cpsie	i
 8007628:	60fb      	str	r3, [r7, #12]
}
 800762a:	bf00      	nop
 800762c:	e7fe      	b.n	800762c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800762e:	f000 fb3d 	bl	8007cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <xTaskCheckForTimeOut+0xc4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800764a:	d102      	bne.n	8007652 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800764c:	2300      	movs	r3, #0
 800764e:	61fb      	str	r3, [r7, #28]
 8007650:	e023      	b.n	800769a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b15      	ldr	r3, [pc, #84]	; (80076ac <xTaskCheckForTimeOut+0xc8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d007      	beq.n	800766e <xTaskCheckForTimeOut+0x8a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	429a      	cmp	r2, r3
 8007666:	d302      	bcc.n	800766e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	e015      	b.n	800769a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	429a      	cmp	r2, r3
 8007676:	d20b      	bcs.n	8007690 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff97 	bl	80075b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800768a:	2300      	movs	r3, #0
 800768c:	61fb      	str	r3, [r7, #28]
 800768e:	e004      	b.n	800769a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800769a:	f000 fb3b 	bl	8007d14 <vPortExitCritical>

	return xReturn;
 800769e:	69fb      	ldr	r3, [r7, #28]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3720      	adds	r7, #32
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000c44 	.word	0x20000c44
 80076ac:	20000c58 	.word	0x20000c58

080076b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <vTaskMissedYield+0x14>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	20000c54 	.word	0x20000c54

080076c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076d0:	f000 f852 	bl	8007778 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <prvIdleTask+0x28>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d9f9      	bls.n	80076d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80076dc:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <prvIdleTask+0x2c>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076ec:	e7f0      	b.n	80076d0 <prvIdleTask+0x8>
 80076ee:	bf00      	nop
 80076f0:	20000b44 	.word	0x20000b44
 80076f4:	e000ed04 	.word	0xe000ed04

080076f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]
 8007702:	e00c      	b.n	800771e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4613      	mov	r3, r2
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	4413      	add	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4a12      	ldr	r2, [pc, #72]	; (8007758 <prvInitialiseTaskLists+0x60>)
 8007710:	4413      	add	r3, r2
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fe4b 	bl	80063ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3301      	adds	r3, #1
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b06      	cmp	r3, #6
 8007722:	d9ef      	bls.n	8007704 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007724:	480d      	ldr	r0, [pc, #52]	; (800775c <prvInitialiseTaskLists+0x64>)
 8007726:	f7fe fe42 	bl	80063ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800772a:	480d      	ldr	r0, [pc, #52]	; (8007760 <prvInitialiseTaskLists+0x68>)
 800772c:	f7fe fe3f 	bl	80063ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007730:	480c      	ldr	r0, [pc, #48]	; (8007764 <prvInitialiseTaskLists+0x6c>)
 8007732:	f7fe fe3c 	bl	80063ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007736:	480c      	ldr	r0, [pc, #48]	; (8007768 <prvInitialiseTaskLists+0x70>)
 8007738:	f7fe fe39 	bl	80063ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800773c:	480b      	ldr	r0, [pc, #44]	; (800776c <prvInitialiseTaskLists+0x74>)
 800773e:	f7fe fe36 	bl	80063ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <prvInitialiseTaskLists+0x78>)
 8007744:	4a05      	ldr	r2, [pc, #20]	; (800775c <prvInitialiseTaskLists+0x64>)
 8007746:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvInitialiseTaskLists+0x7c>)
 800774a:	4a05      	ldr	r2, [pc, #20]	; (8007760 <prvInitialiseTaskLists+0x68>)
 800774c:	601a      	str	r2, [r3, #0]
}
 800774e:	bf00      	nop
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000b44 	.word	0x20000b44
 800775c:	20000bd0 	.word	0x20000bd0
 8007760:	20000be4 	.word	0x20000be4
 8007764:	20000c00 	.word	0x20000c00
 8007768:	20000c14 	.word	0x20000c14
 800776c:	20000c2c 	.word	0x20000c2c
 8007770:	20000bf8 	.word	0x20000bf8
 8007774:	20000bfc 	.word	0x20000bfc

08007778 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800777e:	e019      	b.n	80077b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007780:	f000 fa94 	bl	8007cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <prvCheckTasksWaitingTermination+0x50>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fe96 	bl	80064c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <prvCheckTasksWaitingTermination+0x54>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3b01      	subs	r3, #1
 800779c:	4a0b      	ldr	r2, [pc, #44]	; (80077cc <prvCheckTasksWaitingTermination+0x54>)
 800779e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <prvCheckTasksWaitingTermination+0x58>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3b01      	subs	r3, #1
 80077a6:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <prvCheckTasksWaitingTermination+0x58>)
 80077a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80077aa:	f000 fab3 	bl	8007d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f810 	bl	80077d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <prvCheckTasksWaitingTermination+0x58>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e1      	bne.n	8007780 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077bc:	bf00      	nop
 80077be:	bf00      	nop
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000c14 	.word	0x20000c14
 80077cc:	20000c40 	.word	0x20000c40
 80077d0:	20000c28 	.word	0x20000c28

080077d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 fc54 	bl	8008098 <vPortFree>
				vPortFree( pxTCB );
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc51 	bl	8008098 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077f6:	e01a      	b.n	800782e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d103      	bne.n	800780a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fc48 	bl	8008098 <vPortFree>
	}
 8007808:	e011      	b.n	800782e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007810:	2b02      	cmp	r3, #2
 8007812:	d00c      	beq.n	800782e <prvDeleteTCB+0x5a>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	b672      	cpsid	i
 800781a:	f383 8811 	msr	BASEPRI, r3
 800781e:	f3bf 8f6f 	isb	sy
 8007822:	f3bf 8f4f 	dsb	sy
 8007826:	b662      	cpsie	i
 8007828:	60fb      	str	r3, [r7, #12]
}
 800782a:	bf00      	nop
 800782c:	e7fe      	b.n	800782c <prvDeleteTCB+0x58>
	}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <prvResetNextTaskUnblockTime+0x38>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d104      	bne.n	8007852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvResetNextTaskUnblockTime+0x3c>)
 800784a:	f04f 32ff 	mov.w	r2, #4294967295
 800784e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007850:	e008      	b.n	8007864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <prvResetNextTaskUnblockTime+0x38>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <prvResetNextTaskUnblockTime+0x3c>)
 8007862:	6013      	str	r3, [r2, #0]
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20000bf8 	.word	0x20000bf8
 8007874:	20000c60 	.word	0x20000c60

08007878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <xTaskGetSchedulerState+0x34>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007886:	2301      	movs	r3, #1
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	e008      	b.n	800789e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <xTaskGetSchedulerState+0x38>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007894:	2302      	movs	r3, #2
 8007896:	607b      	str	r3, [r7, #4]
 8007898:	e001      	b.n	800789e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800789a:	2300      	movs	r3, #0
 800789c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800789e:	687b      	ldr	r3, [r7, #4]
	}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	20000c4c 	.word	0x20000c4c
 80078b0:	20000c68 	.word	0x20000c68

080078b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078c0:	2300      	movs	r3, #0
 80078c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d072      	beq.n	80079b0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ca:	4b3c      	ldr	r3, [pc, #240]	; (80079bc <xTaskPriorityDisinherit+0x108>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d00c      	beq.n	80078ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	b672      	cpsid	i
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	b662      	cpsie	i
 80078e8:	60fb      	str	r3, [r7, #12]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10c      	bne.n	8007910 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	b672      	cpsid	i
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	b662      	cpsie	i
 800790a:	60bb      	str	r3, [r7, #8]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007914:	1e5a      	subs	r2, r3, #1
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	429a      	cmp	r2, r3
 8007924:	d044      	beq.n	80079b0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800792a:	2b00      	cmp	r3, #0
 800792c:	d140      	bne.n	80079b0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	3304      	adds	r3, #4
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fdc5 	bl	80064c2 <uxListRemove>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d115      	bne.n	800796a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007942:	491f      	ldr	r1, [pc, #124]	; (80079c0 <xTaskPriorityDisinherit+0x10c>)
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <xTaskPriorityDisinherit+0xb6>
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	2201      	movs	r2, #1
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <xTaskPriorityDisinherit+0x110>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4013      	ands	r3, r2
 8007966:	4a17      	ldr	r2, [pc, #92]	; (80079c4 <xTaskPriorityDisinherit+0x110>)
 8007968:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	f1c3 0207 	rsb	r2, r3, #7
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	2201      	movs	r2, #1
 8007984:	409a      	lsls	r2, r3
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <xTaskPriorityDisinherit+0x110>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4313      	orrs	r3, r2
 800798c:	4a0d      	ldr	r2, [pc, #52]	; (80079c4 <xTaskPriorityDisinherit+0x110>)
 800798e:	6013      	str	r3, [r2, #0]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4a08      	ldr	r2, [pc, #32]	; (80079c0 <xTaskPriorityDisinherit+0x10c>)
 800799e:	441a      	add	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	3304      	adds	r3, #4
 80079a4:	4619      	mov	r1, r3
 80079a6:	4610      	mov	r0, r2
 80079a8:	f7fe fd2e 	bl	8006408 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079b0:	697b      	ldr	r3, [r7, #20]
	}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000b40 	.word	0x20000b40
 80079c0:	20000b44 	.word	0x20000b44
 80079c4:	20000c48 	.word	0x20000c48

080079c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079d2:	4b29      	ldr	r3, [pc, #164]	; (8007a78 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3304      	adds	r3, #4
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fd6f 	bl	80064c2 <uxListRemove>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079ea:	4b24      	ldr	r3, [pc, #144]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f0:	2201      	movs	r2, #1
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43da      	mvns	r2, r3
 80079f8:	4b21      	ldr	r3, [pc, #132]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4013      	ands	r3, r2
 80079fe:	4a20      	ldr	r2, [pc, #128]	; (8007a80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d10a      	bne.n	8007a20 <prvAddCurrentTaskToDelayedList+0x58>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d007      	beq.n	8007a20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	481a      	ldr	r0, [pc, #104]	; (8007a84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a1a:	f7fe fcf5 	bl	8006408 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a1e:	e026      	b.n	8007a6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4413      	add	r3, r2
 8007a26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a28:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d209      	bcs.n	8007a4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe fd03 	bl	8006450 <vListInsert>
}
 8007a4a:	e010      	b.n	8007a6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	4b0a      	ldr	r3, [pc, #40]	; (8007a7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe fcf9 	bl	8006450 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a5e:	4b0c      	ldr	r3, [pc, #48]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d202      	bcs.n	8007a6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a68:	4a09      	ldr	r2, [pc, #36]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	6013      	str	r3, [r2, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000c44 	.word	0x20000c44
 8007a7c:	20000b40 	.word	0x20000b40
 8007a80:	20000c48 	.word	0x20000c48
 8007a84:	20000c2c 	.word	0x20000c2c
 8007a88:	20000bfc 	.word	0x20000bfc
 8007a8c:	20000bf8 	.word	0x20000bf8
 8007a90:	20000c60 	.word	0x20000c60

08007a94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3b04      	subs	r3, #4
 8007aa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007aac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3b04      	subs	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f023 0201 	bic.w	r2, r3, #1
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3b04      	subs	r3, #4
 8007ac2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ac4:	4a0c      	ldr	r2, [pc, #48]	; (8007af8 <pxPortInitialiseStack+0x64>)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	3b14      	subs	r3, #20
 8007ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3b04      	subs	r3, #4
 8007ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f06f 0202 	mvn.w	r2, #2
 8007ae2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3b20      	subs	r3, #32
 8007ae8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aea:	68fb      	ldr	r3, [r7, #12]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	08007afd 	.word	0x08007afd

08007afc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <prvTaskExitError+0x5c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b0e:	d00c      	beq.n	8007b2a <prvTaskExitError+0x2e>
	__asm volatile
 8007b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b14:	b672      	cpsid	i
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	b662      	cpsie	i
 8007b24:	60fb      	str	r3, [r7, #12]
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <prvTaskExitError+0x2c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	b672      	cpsid	i
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	b662      	cpsie	i
 8007b3e:	60bb      	str	r3, [r7, #8]
}
 8007b40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b42:	bf00      	nop
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0fc      	beq.n	8007b44 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b4a:	bf00      	nop
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	20000014 	.word	0x20000014
 8007b5c:	00000000 	.word	0x00000000

08007b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b60:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <pxCurrentTCBConst2>)
 8007b62:	6819      	ldr	r1, [r3, #0]
 8007b64:	6808      	ldr	r0, [r1, #0]
 8007b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6a:	f380 8809 	msr	PSP, r0
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8811 	msr	BASEPRI, r0
 8007b7a:	4770      	bx	lr
 8007b7c:	f3af 8000 	nop.w

08007b80 <pxCurrentTCBConst2>:
 8007b80:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop

08007b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b88:	4808      	ldr	r0, [pc, #32]	; (8007bac <prvPortStartFirstTask+0x24>)
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f380 8808 	msr	MSP, r0
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8814 	msr	CONTROL, r0
 8007b9a:	b662      	cpsie	i
 8007b9c:	b661      	cpsie	f
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	df00      	svc	0
 8007ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007baa:	bf00      	nop
 8007bac:	e000ed08 	.word	0xe000ed08

08007bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bb6:	4b37      	ldr	r3, [pc, #220]	; (8007c94 <xPortStartScheduler+0xe4>)
 8007bb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	22ff      	movs	r2, #255	; 0xff
 8007bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	4b2f      	ldr	r3, [pc, #188]	; (8007c98 <xPortStartScheduler+0xe8>)
 8007bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bde:	4b2f      	ldr	r3, [pc, #188]	; (8007c9c <xPortStartScheduler+0xec>)
 8007be0:	2207      	movs	r2, #7
 8007be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007be4:	e009      	b.n	8007bfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007be6:	4b2d      	ldr	r3, [pc, #180]	; (8007c9c <xPortStartScheduler+0xec>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	4a2b      	ldr	r2, [pc, #172]	; (8007c9c <xPortStartScheduler+0xec>)
 8007bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bf0:	78fb      	ldrb	r3, [r7, #3]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	005b      	lsls	r3, r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d0ef      	beq.n	8007be6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c06:	4b25      	ldr	r3, [pc, #148]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f1c3 0307 	rsb	r3, r3, #7
 8007c0e:	2b04      	cmp	r3, #4
 8007c10:	d00c      	beq.n	8007c2c <xPortStartScheduler+0x7c>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	b672      	cpsid	i
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	b662      	cpsie	i
 8007c26:	60bb      	str	r3, [r7, #8]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	021b      	lsls	r3, r3, #8
 8007c32:	4a1a      	ldr	r2, [pc, #104]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c34:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c36:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c3e:	4a17      	ldr	r2, [pc, #92]	; (8007c9c <xPortStartScheduler+0xec>)
 8007c40:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c54:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c56:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <xPortStartScheduler+0xf0>)
 8007c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c60:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c62:	f000 f8dd 	bl	8007e20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xPortStartScheduler+0xf4>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c6c:	f000 f8fc 	bl	8007e68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c70:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <xPortStartScheduler+0xf8>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a0c      	ldr	r2, [pc, #48]	; (8007ca8 <xPortStartScheduler+0xf8>)
 8007c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c7a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c7c:	f7ff ff84 	bl	8007b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c80:	f7ff fbb2 	bl	80073e8 <vTaskSwitchContext>
	prvTaskExitError();
 8007c84:	f7ff ff3a 	bl	8007afc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	e000e400 	.word	0xe000e400
 8007c98:	20000c6c 	.word	0x20000c6c
 8007c9c:	20000c70 	.word	0x20000c70
 8007ca0:	e000ed20 	.word	0xe000ed20
 8007ca4:	20000014 	.word	0x20000014
 8007ca8:	e000ef34 	.word	0xe000ef34

08007cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	607b      	str	r3, [r7, #4]
}
 8007cc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <vPortEnterCritical+0x60>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	4a0e      	ldr	r2, [pc, #56]	; (8007d0c <vPortEnterCritical+0x60>)
 8007cd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cd4:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <vPortEnterCritical+0x60>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d111      	bne.n	8007d00 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <vPortEnterCritical+0x64>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00c      	beq.n	8007d00 <vPortEnterCritical+0x54>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	b672      	cpsid	i
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	b662      	cpsie	i
 8007cfa:	603b      	str	r3, [r7, #0]
}
 8007cfc:	bf00      	nop
 8007cfe:	e7fe      	b.n	8007cfe <vPortEnterCritical+0x52>
	}
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	20000014 	.word	0x20000014
 8007d10:	e000ed04 	.word	0xe000ed04

08007d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d1a:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <vPortExitCritical+0x54>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10c      	bne.n	8007d3c <vPortExitCritical+0x28>
	__asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d26:	b672      	cpsid	i
 8007d28:	f383 8811 	msr	BASEPRI, r3
 8007d2c:	f3bf 8f6f 	isb	sy
 8007d30:	f3bf 8f4f 	dsb	sy
 8007d34:	b662      	cpsie	i
 8007d36:	607b      	str	r3, [r7, #4]
}
 8007d38:	bf00      	nop
 8007d3a:	e7fe      	b.n	8007d3a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <vPortExitCritical+0x54>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	4a09      	ldr	r2, [pc, #36]	; (8007d68 <vPortExitCritical+0x54>)
 8007d44:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <vPortExitCritical+0x54>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d105      	bne.n	8007d5a <vPortExitCritical+0x46>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	f383 8811 	msr	BASEPRI, r3
}
 8007d58:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20000014 	.word	0x20000014
 8007d6c:	00000000 	.word	0x00000000

08007d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d70:	f3ef 8009 	mrs	r0, PSP
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	4b15      	ldr	r3, [pc, #84]	; (8007dd0 <pxCurrentTCBConst>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	f01e 0f10 	tst.w	lr, #16
 8007d80:	bf08      	it	eq
 8007d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6010      	str	r0, [r2, #0]
 8007d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d94:	b672      	cpsid	i
 8007d96:	f380 8811 	msr	BASEPRI, r0
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	b662      	cpsie	i
 8007da4:	f7ff fb20 	bl	80073e8 <vTaskSwitchContext>
 8007da8:	f04f 0000 	mov.w	r0, #0
 8007dac:	f380 8811 	msr	BASEPRI, r0
 8007db0:	bc09      	pop	{r0, r3}
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	6808      	ldr	r0, [r1, #0]
 8007db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dba:	f01e 0f10 	tst.w	lr, #16
 8007dbe:	bf08      	it	eq
 8007dc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007dc4:	f380 8809 	msr	PSP, r0
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop

08007dd0 <pxCurrentTCBConst>:
 8007dd0:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop

08007dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	b672      	cpsid	i
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	b662      	cpsie	i
 8007df2:	607b      	str	r3, [r7, #4]
}
 8007df4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007df6:	f7ff fa3d 	bl	8007274 <xTaskIncrementTick>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e00:	4b06      	ldr	r3, [pc, #24]	; (8007e1c <SysTick_Handler+0x44>)
 8007e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	f383 8811 	msr	BASEPRI, r3
}
 8007e12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e14:	bf00      	nop
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e24:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <vPortSetupTimerInterrupt+0x34>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <vPortSetupTimerInterrupt+0x38>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <vPortSetupTimerInterrupt+0x3c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a0a      	ldr	r2, [pc, #40]	; (8007e60 <vPortSetupTimerInterrupt+0x40>)
 8007e36:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3a:	099b      	lsrs	r3, r3, #6
 8007e3c:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <vPortSetupTimerInterrupt+0x44>)
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <vPortSetupTimerInterrupt+0x34>)
 8007e44:	2207      	movs	r2, #7
 8007e46:	601a      	str	r2, [r3, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	e000e010 	.word	0xe000e010
 8007e58:	e000e018 	.word	0xe000e018
 8007e5c:	20000008 	.word	0x20000008
 8007e60:	10624dd3 	.word	0x10624dd3
 8007e64:	e000e014 	.word	0xe000e014

08007e68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e78 <vPortEnableVFP+0x10>
 8007e6c:	6801      	ldr	r1, [r0, #0]
 8007e6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e72:	6001      	str	r1, [r0, #0]
 8007e74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e76:	bf00      	nop
 8007e78:	e000ed88 	.word	0xe000ed88

08007e7c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e82:	f3ef 8305 	mrs	r3, IPSR
 8007e86:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b0f      	cmp	r3, #15
 8007e8c:	d916      	bls.n	8007ebc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e8e:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <vPortValidateInterruptPriority+0x78>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <vPortValidateInterruptPriority+0x7c>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	7afa      	ldrb	r2, [r7, #11]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d20c      	bcs.n	8007ebc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	b672      	cpsid	i
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	b662      	cpsie	i
 8007eb6:	607b      	str	r3, [r7, #4]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ebc:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <vPortValidateInterruptPriority+0x80>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007ec4:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <vPortValidateInterruptPriority+0x84>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d90c      	bls.n	8007ee6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	b672      	cpsid	i
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	b662      	cpsie	i
 8007ee0:	603b      	str	r3, [r7, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	e7fe      	b.n	8007ee4 <vPortValidateInterruptPriority+0x68>
	}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e000e3f0 	.word	0xe000e3f0
 8007ef8:	20000c6c 	.word	0x20000c6c
 8007efc:	e000ed0c 	.word	0xe000ed0c
 8007f00:	20000c70 	.word	0x20000c70

08007f04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08a      	sub	sp, #40	; 0x28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f10:	f7ff f904 	bl	800711c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f14:	4b5b      	ldr	r3, [pc, #364]	; (8008084 <pvPortMalloc+0x180>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f1c:	f000 f91a 	bl	8008154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f20:	4b59      	ldr	r3, [pc, #356]	; (8008088 <pvPortMalloc+0x184>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f040 8092 	bne.w	8008052 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01f      	beq.n	8007f74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007f34:	2208      	movs	r2, #8
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4413      	add	r3, r2
 8007f3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d016      	beq.n	8007f74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f023 0307 	bic.w	r3, r3, #7
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00c      	beq.n	8007f74 <pvPortMalloc+0x70>
	__asm volatile
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	b672      	cpsid	i
 8007f60:	f383 8811 	msr	BASEPRI, r3
 8007f64:	f3bf 8f6f 	isb	sy
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	b662      	cpsie	i
 8007f6e:	617b      	str	r3, [r7, #20]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d06b      	beq.n	8008052 <pvPortMalloc+0x14e>
 8007f7a:	4b44      	ldr	r3, [pc, #272]	; (800808c <pvPortMalloc+0x188>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d866      	bhi.n	8008052 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f84:	4b42      	ldr	r3, [pc, #264]	; (8008090 <pvPortMalloc+0x18c>)
 8007f86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f88:	4b41      	ldr	r3, [pc, #260]	; (8008090 <pvPortMalloc+0x18c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f8e:	e004      	b.n	8007f9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d903      	bls.n	8007fac <pvPortMalloc+0xa8>
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1f1      	bne.n	8007f90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007fac:	4b35      	ldr	r3, [pc, #212]	; (8008084 <pvPortMalloc+0x180>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d04d      	beq.n	8008052 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2208      	movs	r2, #8
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	1ad2      	subs	r2, r2, r3
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d921      	bls.n	800801c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00c      	beq.n	8008004 <pvPortMalloc+0x100>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fee:	b672      	cpsid	i
 8007ff0:	f383 8811 	msr	BASEPRI, r3
 8007ff4:	f3bf 8f6f 	isb	sy
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	b662      	cpsie	i
 8007ffe:	613b      	str	r3, [r7, #16]
}
 8008000:	bf00      	nop
 8008002:	e7fe      	b.n	8008002 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008016:	69b8      	ldr	r0, [r7, #24]
 8008018:	f000 f8fe 	bl	8008218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800801c:	4b1b      	ldr	r3, [pc, #108]	; (800808c <pvPortMalloc+0x188>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	4a19      	ldr	r2, [pc, #100]	; (800808c <pvPortMalloc+0x188>)
 8008028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800802a:	4b18      	ldr	r3, [pc, #96]	; (800808c <pvPortMalloc+0x188>)
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	4b19      	ldr	r3, [pc, #100]	; (8008094 <pvPortMalloc+0x190>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d203      	bcs.n	800803e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008036:	4b15      	ldr	r3, [pc, #84]	; (800808c <pvPortMalloc+0x188>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a16      	ldr	r2, [pc, #88]	; (8008094 <pvPortMalloc+0x190>)
 800803c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <pvPortMalloc+0x184>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	431a      	orrs	r2, r3
 8008048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008052:	f7ff f871 	bl	8007138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <pvPortMalloc+0x176>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	b672      	cpsid	i
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	b662      	cpsie	i
 8008074:	60fb      	str	r3, [r7, #12]
}
 8008076:	bf00      	nop
 8008078:	e7fe      	b.n	8008078 <pvPortMalloc+0x174>
	return pvReturn;
 800807a:	69fb      	ldr	r3, [r7, #28]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3728      	adds	r7, #40	; 0x28
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	2000487c 	.word	0x2000487c
 8008088:	20004888 	.word	0x20004888
 800808c:	20004880 	.word	0x20004880
 8008090:	20004874 	.word	0x20004874
 8008094:	20004884 	.word	0x20004884

08008098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d04c      	beq.n	8008144 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80080aa:	2308      	movs	r3, #8
 80080ac:	425b      	negs	r3, r3
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4b23      	ldr	r3, [pc, #140]	; (800814c <vPortFree+0xb4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10c      	bne.n	80080e0 <vPortFree+0x48>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	b672      	cpsid	i
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	b662      	cpsie	i
 80080da:	60fb      	str	r3, [r7, #12]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00c      	beq.n	8008102 <vPortFree+0x6a>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	b672      	cpsid	i
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	b662      	cpsie	i
 80080fc:	60bb      	str	r3, [r7, #8]
}
 80080fe:	bf00      	nop
 8008100:	e7fe      	b.n	8008100 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <vPortFree+0xb4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d115      	bne.n	8008144 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	4b0b      	ldr	r3, [pc, #44]	; (800814c <vPortFree+0xb4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	43db      	mvns	r3, r3
 8008122:	401a      	ands	r2, r3
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008128:	f7fe fff8 	bl	800711c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	4b07      	ldr	r3, [pc, #28]	; (8008150 <vPortFree+0xb8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4413      	add	r3, r2
 8008136:	4a06      	ldr	r2, [pc, #24]	; (8008150 <vPortFree+0xb8>)
 8008138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800813a:	6938      	ldr	r0, [r7, #16]
 800813c:	f000 f86c 	bl	8008218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008140:	f7fe fffa 	bl	8007138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008144:	bf00      	nop
 8008146:	3718      	adds	r7, #24
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	20004888 	.word	0x20004888
 8008150:	20004880 	.word	0x20004880

08008154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800815a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800815e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008160:	4b27      	ldr	r3, [pc, #156]	; (8008200 <prvHeapInit+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f003 0307 	and.w	r3, r3, #7
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00c      	beq.n	8008188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	4a1f      	ldr	r2, [pc, #124]	; (8008200 <prvHeapInit+0xac>)
 8008184:	4413      	add	r3, r2
 8008186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800818c:	4a1d      	ldr	r2, [pc, #116]	; (8008204 <prvHeapInit+0xb0>)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008192:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <prvHeapInit+0xb0>)
 8008194:	2200      	movs	r2, #0
 8008196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80081a0:	2208      	movs	r2, #8
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1a9b      	subs	r3, r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <prvHeapInit+0xb4>)
 80081b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081b6:	4b14      	ldr	r3, [pc, #80]	; (8008208 <prvHeapInit+0xb4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2200      	movs	r2, #0
 80081bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081be:	4b12      	ldr	r3, [pc, #72]	; (8008208 <prvHeapInit+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvHeapInit+0xb4>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <prvHeapInit+0xb8>)
 80081e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a09      	ldr	r2, [pc, #36]	; (8008210 <prvHeapInit+0xbc>)
 80081ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ec:	4b09      	ldr	r3, [pc, #36]	; (8008214 <prvHeapInit+0xc0>)
 80081ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	20000c74 	.word	0x20000c74
 8008204:	20004874 	.word	0x20004874
 8008208:	2000487c 	.word	0x2000487c
 800820c:	20004884 	.word	0x20004884
 8008210:	20004880 	.word	0x20004880
 8008214:	20004888 	.word	0x20004888

08008218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008218:	b480      	push	{r7}
 800821a:	b085      	sub	sp, #20
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008220:	4b28      	ldr	r3, [pc, #160]	; (80082c4 <prvInsertBlockIntoFreeList+0xac>)
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e002      	b.n	800822c <prvInsertBlockIntoFreeList+0x14>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	429a      	cmp	r2, r3
 8008234:	d8f7      	bhi.n	8008226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	429a      	cmp	r2, r3
 8008246:	d108      	bne.n	800825a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	441a      	add	r2, r3
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	441a      	add	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d118      	bne.n	80082a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681a      	ldr	r2, [r3, #0]
 8008272:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00d      	beq.n	8008296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	441a      	add	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	e008      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008296:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e003      	b.n	80082a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d002      	beq.n	80082b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20004874 	.word	0x20004874
 80082c8:	2000487c 	.word	0x2000487c

080082cc <memset>:
 80082cc:	4402      	add	r2, r0
 80082ce:	4603      	mov	r3, r0
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d100      	bne.n	80082d6 <memset+0xa>
 80082d4:	4770      	bx	lr
 80082d6:	f803 1b01 	strb.w	r1, [r3], #1
 80082da:	e7f9      	b.n	80082d0 <memset+0x4>

080082dc <__libc_init_array>:
 80082dc:	b570      	push	{r4, r5, r6, lr}
 80082de:	4d0d      	ldr	r5, [pc, #52]	; (8008314 <__libc_init_array+0x38>)
 80082e0:	4c0d      	ldr	r4, [pc, #52]	; (8008318 <__libc_init_array+0x3c>)
 80082e2:	1b64      	subs	r4, r4, r5
 80082e4:	10a4      	asrs	r4, r4, #2
 80082e6:	2600      	movs	r6, #0
 80082e8:	42a6      	cmp	r6, r4
 80082ea:	d109      	bne.n	8008300 <__libc_init_array+0x24>
 80082ec:	4d0b      	ldr	r5, [pc, #44]	; (800831c <__libc_init_array+0x40>)
 80082ee:	4c0c      	ldr	r4, [pc, #48]	; (8008320 <__libc_init_array+0x44>)
 80082f0:	f000 f826 	bl	8008340 <_init>
 80082f4:	1b64      	subs	r4, r4, r5
 80082f6:	10a4      	asrs	r4, r4, #2
 80082f8:	2600      	movs	r6, #0
 80082fa:	42a6      	cmp	r6, r4
 80082fc:	d105      	bne.n	800830a <__libc_init_array+0x2e>
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	f855 3b04 	ldr.w	r3, [r5], #4
 8008304:	4798      	blx	r3
 8008306:	3601      	adds	r6, #1
 8008308:	e7ee      	b.n	80082e8 <__libc_init_array+0xc>
 800830a:	f855 3b04 	ldr.w	r3, [r5], #4
 800830e:	4798      	blx	r3
 8008310:	3601      	adds	r6, #1
 8008312:	e7f2      	b.n	80082fa <__libc_init_array+0x1e>
 8008314:	080083dc 	.word	0x080083dc
 8008318:	080083dc 	.word	0x080083dc
 800831c:	080083dc 	.word	0x080083dc
 8008320:	080083e0 	.word	0x080083e0

08008324 <memcpy>:
 8008324:	440a      	add	r2, r1
 8008326:	4291      	cmp	r1, r2
 8008328:	f100 33ff 	add.w	r3, r0, #4294967295
 800832c:	d100      	bne.n	8008330 <memcpy+0xc>
 800832e:	4770      	bx	lr
 8008330:	b510      	push	{r4, lr}
 8008332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800833a:	4291      	cmp	r1, r2
 800833c:	d1f9      	bne.n	8008332 <memcpy+0xe>
 800833e:	bd10      	pop	{r4, pc}

08008340 <_init>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr

0800834c <_fini>:
 800834c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800834e:	bf00      	nop
 8008350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008352:	bc08      	pop	{r3}
 8008354:	469e      	mov	lr, r3
 8008356:	4770      	bx	lr
