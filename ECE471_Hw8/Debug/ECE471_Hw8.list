
ECE471_Hw8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008148  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008394  08008394  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800839c  0800839c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083a0  080083a0  000183a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080083a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000018  080083bc  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b8  0800845c  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004734  20000158  080084fc  00020158  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000488c  080084fc  0002488c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001dcf3  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e8a  00000000  00000000  0003debe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001890  00000000  00000000  00041d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001323  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029993  00000000  00000000  000448fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d3d7  00000000  00000000  0006e28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010150d  00000000  00000000  0008b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006870  00000000  00000000  0018cb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  001933e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000158 	.word	0x20000158
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008300 	.word	0x08008300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000015c 	.word	0x2000015c
 800020c:	08008300 	.word	0x08008300

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000174 	.word	0x20000174
 800053c:	200001c8 	.word	0x200001c8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 ff96 	bl	8001476 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f865 	bl	8000618 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa51 	bl	80009f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f8c9 	bl	80006e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9ef 	bl	8000938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 fa1d 	bl	8000998 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800055e:	f000 f911 	bl	8000784 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000562:	f000 f987 	bl	8000874 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0xb4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0220 	orr.w	r2, r2, #32
 8000574:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000576:	2108      	movs	r1, #8
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <main+0xb8>)
 800057a:	f003 f9a3 	bl	80038c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <main+0xbc>)
 8000582:	f003 f99f 	bl	80038c4 <HAL_TIM_PWM_Start>
/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PwmDataBuffer */
  osMessageQDef(PwmDataBuffer, 16, uint16_t);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0xc0>)
 8000588:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PwmDataBufferHandle = osMessageCreate(osMessageQ(PwmDataBuffer), NULL);
 8000592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f005 fec0 	bl	800631e <osMessageCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xc4>)
 80005a2:	6013      	str	r3, [r2, #0]
/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xc8>)
 80005a6:	f107 041c 	add.w	r4, r7, #28
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 fe4d 	bl	800625e <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xcc>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SetPwm */
  osThreadDef(SetPwm, SetPwmTask, osPriorityHigh, 0, 128);
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xd0>)
 80005cc:	463c      	mov	r4, r7
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SetPwmHandle = osThreadCreate(osThread(SetPwm), NULL);
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 fe3c 	bl	800625e <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0xd4>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f005 fe30 	bl	8006250 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xb0>
 80005f2:	bf00      	nop
 80005f4:	20000548 	.word	0x20000548
 80005f8:	200004b0 	.word	0x200004b0
 80005fc:	200004fc 	.word	0x200004fc
 8000600:	08008318 	.word	0x08008318
 8000604:	20000ae0 	.word	0x20000ae0
 8000608:	08008334 	.word	0x08008334
 800060c:	20000ad8 	.word	0x20000ad8
 8000610:	08008358 	.word	0x08008358
 8000614:	20000adc 	.word	0x20000adc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 fe30 	bl	800828c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f001 ff14 	bl	8002468 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fef3 	bl	8002488 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fb79 	bl	8000d9e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f981 	bl	80029d0 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 fb63 	bl	8000d9e <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */
  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ETH_Init+0x84>)
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_ETH_Init+0x88>)
 80006f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ETH_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ETH_Init+0x8c>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ETH_Init+0x8c>)
 8000700:	22e1      	movs	r2, #225	; 0xe1
 8000702:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ETH_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_ETH_Init+0x84>)
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_ETH_Init+0x8c>)
 800071a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ETH_Init+0x84>)
 800071e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000722:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ETH_Init+0x84>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_ETH_Init+0x90>)
 8000728:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_ETH_Init+0x84>)
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_ETH_Init+0x94>)
 800072e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_ETH_Init+0x84>)
 8000732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000736:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_ETH_Init+0x84>)
 800073a:	f001 f861 	bl	8001800 <HAL_ETH_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fb2b 	bl	8000d9e <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000748:	2238      	movs	r2, #56	; 0x38
 800074a:	2100      	movs	r1, #0
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_ETH_Init+0x98>)
 800074e:	f007 fd9d 	bl	800828c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_ETH_Init+0x98>)
 8000754:	2221      	movs	r2, #33	; 0x21
 8000756:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_ETH_Init+0x98>)
 800075a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800075e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_ETH_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */
  /* USER CODE END ETH_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000400 	.word	0x20000400
 8000770:	40028000 	.word	0x40028000
 8000774:	20000ae8 	.word	0x20000ae8
 8000778:	200000b8 	.word	0x200000b8
 800077c:	20000018 	.word	0x20000018
 8000780:	200003c8 	.word	0x200003c8

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM3_Init+0xe8>)
 80007b8:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_TIM3_Init+0xec>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_TIM3_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM3_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM3_Init+0xe8>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007dc:	4823      	ldr	r0, [pc, #140]	; (800086c <MX_TIM3_Init+0xe8>)
 80007de:	f002 ff3f 	bl	8003660 <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007e8:	f000 fad9 	bl	8000d9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <MX_TIM3_Init+0xe8>)
 80007fa:	f003 fb91 	bl	8003f20 <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000804:	f000 facb 	bl	8000d9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM3_Init+0xe8>)
 800080a:	f002 fff9 	bl	8003800 <HAL_TIM_PWM_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 fac3 	bl	8000d9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_TIM3_Init+0xe8>)
 8000828:	f004 f82a 	bl	8004880 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 fab4 	bl	8000d9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	2208      	movs	r2, #8
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM3_Init+0xe8>)
 800084e:	f003 fa53 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000858:	f000 faa1 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM3_Init+0xe8>)
 800085e:	f000 fbb7 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004b0 	.word	0x200004b0
 8000870:	40000400 	.word	0x40000400

08000874 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_TIM12_Init+0xbc>)
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_TIM12_Init+0xc0>)
 800089e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008c2:	f002 fecd 	bl	8003660 <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fa67 	bl	8000d9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008de:	f003 fb1f 	bl	8003f20 <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80008e8:	f000 fa59 	bl	8000d9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ee:	f002 ff87 	bl	8003800 <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 fa51 	bl	8000d9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000914:	f003 f9f0 	bl	8003cf8 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800091e:	f000 fa3e 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000924:	f000 fb54 	bl	8000fd0 <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200004fc 	.word	0x200004fc
 8000934:	40001800 	.word	0x40001800

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_USART3_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800097c:	f004 f82c 	bl	80049d8 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 fa0a 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000548 	.word	0x20000548
 8000994:	40004800 	.word	0x40004800

08000998 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2206      	movs	r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2201      	movs	r2, #1
 80009c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	f001 fbfb 	bl	80021d6 <HAL_PCD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f9da 	bl	8000d9e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200005d0 	.word	0x200005d0

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000aa0:	f001 fb80 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000aaa:	f001 fb7b 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_GPIO_Init+0x13c>)
 8000ac6:	f001 f9c1 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000ae2:	f001 f9b3 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000afa:	f001 f9a7 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000b16:	f001 f999 	bl	8001e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800

08000b34 <setPWM>:
//	}
}

static int max = 65535;
//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]


		switch(value){	//set the duty cycle
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	f200 808e 	bhi.w	8000c68 <setPWM+0x134>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <setPWM+0x20>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b87 	.word	0x08000b87
 8000b5c:	08000b9b 	.word	0x08000b9b
 8000b60:	08000bb1 	.word	0x08000bb1
 8000b64:	08000bcb 	.word	0x08000bcb
 8000b68:	08000be1 	.word	0x08000be1
 8000b6c:	08000bfb 	.word	0x08000bfb
 8000b70:	08000c17 	.word	0x08000c17
 8000b74:	08000c31 	.word	0x08000c31
 8000b78:	08000c47 	.word	0x08000c47
 8000b7c:	08000c61 	.word	0x08000c61
			case 0:
				dutyCycle =0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
				break;
 8000b84:	e072      	b.n	8000c6c <setPWM+0x138>
			case 1:
				dutyCycle =(max/10);
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <setPWM+0x160>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <setPWM+0x164>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	60fb      	str	r3, [r7, #12]
				break;
 8000b98:	e068      	b.n	8000c6c <setPWM+0x138>
			case 2:
				dutyCycle =2*(max/10);
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <setPWM+0x160>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <setPWM+0x164>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
				break;
 8000bae:	e05d      	b.n	8000c6c <setPWM+0x138>
			case 3:
				dutyCycle =3*(max/10);
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <setPWM+0x160>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <setPWM+0x164>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1092      	asrs	r2, r2, #2
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
				break;
 8000bc8:	e050      	b.n	8000c6c <setPWM+0x138>
			case 4:
				dutyCycle =4*(max/10);
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <setPWM+0x160>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <setPWM+0x164>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	17db      	asrs	r3, r3, #31
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
				break;
 8000bde:	e045      	b.n	8000c6c <setPWM+0x138>
			case 5:
				dutyCycle =5*(max/10);
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <setPWM+0x160>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <setPWM+0x164>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1092      	asrs	r2, r2, #2
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
				break;
 8000bf8:	e038      	b.n	8000c6c <setPWM+0x138>
			case 6:
				dutyCycle =6*(max/10);
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <setPWM+0x160>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <setPWM+0x164>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1092      	asrs	r2, r2, #2
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
				break;
 8000c14:	e02a      	b.n	8000c6c <setPWM+0x138>
			case 7:
				dutyCycle =7*(max/10);
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <setPWM+0x160>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <setPWM+0x164>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1092      	asrs	r2, r2, #2
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
				break;
 8000c2e:	e01d      	b.n	8000c6c <setPWM+0x138>
			case 8:
				dutyCycle =8*(max/10);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <setPWM+0x160>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <setPWM+0x164>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1092      	asrs	r2, r2, #2
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	60fb      	str	r3, [r7, #12]
				break;
 8000c44:	e012      	b.n	8000c6c <setPWM+0x138>
			case 9:
				dutyCycle =9*(max/10);
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <setPWM+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <setPWM+0x164>)
 8000c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c50:	1092      	asrs	r2, r2, #2
 8000c52:	17db      	asrs	r3, r3, #31
 8000c54:	1ad2      	subs	r2, r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
				break;
 8000c5e:	e005      	b.n	8000c6c <setPWM+0x138>
			case 10:
				dutyCycle = max;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <setPWM+0x160>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
				break;
 8000c66:	e001      	b.n	8000c6c <setPWM+0x138>
			default:
				dutyCycle = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
		}


	if(led == green){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <setPWM+0x146>
        TIM3->CCR3 = dutyCycle;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <setPWM+0x168>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	63d3      	str	r3, [r2, #60]	; 0x3c
	}
	else if (led == red){
        TIM12->CCR1 = dutyCycle;
	}
}
 8000c78:	e005      	b.n	8000c86 <setPWM+0x152>
	else if (led == red){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <setPWM+0x152>
        TIM12->CCR1 = dutyCycle;
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <setPWM+0x16c>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000004 	.word	0x20000004
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40001800 	.word	0x40001800

08000ca4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

/* Infinite loop */
for(;;)
{
osDelay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f005 fb22 	bl	80062f6 <osDelay>
 8000cb2:	e7fb      	b.n	8000cac <StartDefaultTask+0x8>

08000cb4 <SetPwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetPwmTask */
void SetPwmTask(void const * argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	 //retrieve the data from the queue PwmDataBufferHandle
//	 enum led green = green;
//	 enum led red = red;
	 BaseType_t status;
	 uint8_t receivedData;
	 status = xQueueReceive(PwmDataBufferHandle, &receivedData, portMAX_DELAY);
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <SetPwmTask+0xbc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f107 010b 	add.w	r1, r7, #11
 8000cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 fdf3 	bl	80068b4 <xQueueReceive>
 8000cce:	60f8      	str	r0, [r7, #12]
	 if(status == pdPASS){	//if the queue is recieved succesfully
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d142      	bne.n	8000d5c <SetPwmTask+0xa8>
		// setLed(receivedData);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //green
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	4826      	ldr	r0, [pc, #152]	; (8000d74 <SetPwmTask+0xc0>)
 8000cdc:	f001 fa62 	bl	80021a4 <HAL_GPIO_WritePin>

		 if(receivedData=='r'){	//red
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	2b72      	cmp	r3, #114	; 0x72
 8000ce4:	d113      	bne.n	8000d0e <SetPwmTask+0x5a>
			 for(int i=10;i>=0;i--){
 8000ce6:	230a      	movs	r3, #10
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	e00c      	b.n	8000d06 <SetPwmTask+0x52>
				 setPWM(redLed,i);
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <SetPwmTask+0xc4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	6979      	ldr	r1, [r7, #20]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff1e 	bl	8000b34 <setPWM>
				 osDelay(500);
 8000cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cfc:	f005 fafb 	bl	80062f6 <osDelay>
			 for(int i=10;i>=0;i--){
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	daef      	bge.n	8000cec <SetPwmTask+0x38>
 8000d0c:	e02b      	b.n	8000d66 <SetPwmTask+0xb2>
			 }
		 }

		 else if (receivedData=='g'){
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	2b67      	cmp	r3, #103	; 0x67
 8000d12:	d113      	bne.n	8000d3c <SetPwmTask+0x88>
			 for(int i=10;i>=0;i--){	//cycle through all states of pwm
 8000d14:	230a      	movs	r3, #10
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	e00c      	b.n	8000d34 <SetPwmTask+0x80>
				 setPWM(greenLed,i);
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <SetPwmTask+0xc8>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	6939      	ldr	r1, [r7, #16]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff07 	bl	8000b34 <setPWM>
				 osDelay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f005 fae4 	bl	80062f6 <osDelay>
			 for(int i=10;i>=0;i--){	//cycle through all states of pwm
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	daef      	bge.n	8000d1a <SetPwmTask+0x66>
 8000d3a:	e014      	b.n	8000d66 <SetPwmTask+0xb2>
			}
		 }
		 else if (receivedData =='c'){
 8000d3c:	7afb      	ldrb	r3, [r7, #11]
 8000d3e:	2b63      	cmp	r3, #99	; 0x63
 8000d40:	d111      	bne.n	8000d66 <SetPwmTask+0xb2>
			 setPWM(greenLed,0);
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <SetPwmTask+0xc8>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fef3 	bl	8000b34 <setPWM>
			 setPWM(redLed,0);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <SetPwmTask+0xc4>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff feed 	bl	8000b34 <setPWM>
 8000d5a:	e004      	b.n	8000d66 <SetPwmTask+0xb2>
		 }
		 //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
	 }
	 else{	//if the queue is not recieved
		// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //green
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	4804      	ldr	r0, [pc, #16]	; (8000d74 <SetPwmTask+0xc0>)
 8000d62:	f001 fa1f 	bl	80021a4 <HAL_GPIO_WritePin>
	 }
osDelay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f005 fac5 	bl	80062f6 <osDelay>
{
 8000d6c:	e7a6      	b.n	8000cbc <SetPwmTask+0x8>
 8000d6e:	bf00      	nop
 8000d70:	20000ae0 	.word	0x20000ae0
 8000d74:	40020400 	.word	0x40020400
 8000d78:	20000ae4 	.word	0x20000ae4
 8000d7c:	20000000 	.word	0x20000000

08000d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d90:	d101      	bne.n	8000d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d92:	f000 fb7d 	bl	8001490 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da2:	b672      	cpsid	i
}
 8000da4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8000da6:	e7fe      	b.n	8000da6 <Error_Handler+0x8>

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a10      	ldr	r2, [pc, #64]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	210f      	movs	r1, #15
 8000de2:	f06f 0001 	mvn.w	r0, #1
 8000de6:	f000 fc4f 	bl	8001688 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08e      	sub	sp, #56	; 0x38
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a4e      	ldr	r2, [pc, #312]	; (8000f50 <HAL_ETH_MspInit+0x158>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f040 8096 	bne.w	8000f48 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000e1c:	4b4d      	ldr	r3, [pc, #308]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	4b47      	ldr	r3, [pc, #284]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a46      	ldr	r2, [pc, #280]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e40:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a40      	ldr	r2, [pc, #256]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e64:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a34      	ldr	r2, [pc, #208]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b2c      	ldr	r3, [pc, #176]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a28      	ldr	r2, [pc, #160]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <HAL_ETH_MspInit+0x15c>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ec4:	2332      	movs	r3, #50	; 0x32
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	481e      	ldr	r0, [pc, #120]	; (8000f58 <HAL_ETH_MspInit+0x160>)
 8000ee0:	f000 ffb4 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ee4:	2386      	movs	r3, #134	; 0x86
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef4:	230b      	movs	r3, #11
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4817      	ldr	r0, [pc, #92]	; (8000f5c <HAL_ETH_MspInit+0x164>)
 8000f00:	f000 ffa4 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <HAL_ETH_MspInit+0x168>)
 8000f22:	f000 ff93 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_ETH_MspInit+0x16c>)
 8000f44:	f000 ff82 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40028000 	.word	0x40028000
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <HAL_TIM_Base_MspInit+0x5c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10c      	bne.n	8000f94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a12      	ldr	r2, [pc, #72]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8000f92:	e010      	b.n	8000fb6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_TIM_Base_MspInit+0x64>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <HAL_TIM_Base_MspInit+0x60>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40000400 	.word	0x40000400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40001800 	.word	0x40001800

08000fd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a22      	ldr	r2, [pc, #136]	; (8001078 <HAL_TIM_MspPostInit+0xa8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d11c      	bne.n	800102c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800101a:	2302      	movs	r3, #2
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	4816      	ldr	r0, [pc, #88]	; (8001080 <HAL_TIM_MspPostInit+0xb0>)
 8001026:	f000 ff11 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800102a:	e021      	b.n	8001070 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_TIM_MspPostInit+0xb4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d11c      	bne.n	8001070 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_TIM_MspPostInit+0xac>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800104e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001060:	2309      	movs	r3, #9
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_TIM_MspPostInit+0xb0>)
 800106c:	f000 feee 	bl	8001e4c <HAL_GPIO_Init>
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40000400 	.word	0x40000400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400
 8001084:	40001800 	.word	0x40001800

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0aa      	sub	sp, #168	; 0xa8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2284      	movs	r2, #132	; 0x84
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f007 f8ef 	bl	800828c <memset>
  if(huart->Instance==USART3)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a26      	ldr	r2, [pc, #152]	; (800114c <HAL_UART_MspInit+0xc4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d144      	bne.n	8001142 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010be:	2300      	movs	r3, #0
 80010c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	4618      	mov	r0, r3
 80010c8:	f001 feda 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010d2:	f7ff fe64 	bl	8000d9e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0xc8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0308 	and.w	r3, r3, #8
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001120:	2307      	movs	r3, #7
 8001122:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800112a:	4619      	mov	r1, r3
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <HAL_UART_MspInit+0xcc>)
 800112e:	f000 fe8d 	bl	8001e4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2105      	movs	r1, #5
 8001136:	2027      	movs	r0, #39	; 0x27
 8001138:	f000 faa6 	bl	8001688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113c:	2027      	movs	r0, #39	; 0x27
 800113e:	f000 fabf 	bl	80016c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	37a8      	adds	r7, #168	; 0xa8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40004800 	.word	0x40004800
 8001150:	40023800 	.word	0x40023800
 8001154:	40020c00 	.word	0x40020c00

08001158 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	; 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	2284      	movs	r2, #132	; 0x84
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f007 f887 	bl	800828c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001186:	d159      	bne.n	800123c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800118c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fe71 	bl	8002e80 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011a4:	f7ff fdfb 	bl	8000d9e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_PCD_MspInit+0xec>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a25      	ldr	r2, [pc, #148]	; (8001244 <HAL_PCD_MspInit+0xec>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_PCD_MspInit+0xec>)
 80011b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011c0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011da:	230a      	movs	r3, #10
 80011dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4818      	ldr	r0, [pc, #96]	; (8001248 <HAL_PCD_MspInit+0xf0>)
 80011e8:	f000 fe30 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	4619      	mov	r1, r3
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <HAL_PCD_MspInit+0xf0>)
 8001208:	f000 fe20 	bl	8001e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_PCD_MspInit+0xec>)
 800120e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <HAL_PCD_MspInit+0xec>)
 8001212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001216:	6353      	str	r3, [r2, #52]	; 0x34
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_PCD_MspInit+0xec>)
 800121a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_PCD_MspInit+0xec>)
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <HAL_PCD_MspInit+0xec>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6453      	str	r3, [r2, #68]	; 0x44
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <HAL_PCD_MspInit+0xec>)
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	37b0      	adds	r7, #176	; 0xb0
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <HAL_InitTick+0xe4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a33      	ldr	r2, [pc, #204]	; (8001330 <HAL_InitTick+0xe4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <HAL_InitTick+0xe4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001274:	f107 0210 	add.w	r2, r7, #16
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fdcc 	bl	8002e1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128a:	2b00      	cmp	r3, #0
 800128c:	d103      	bne.n	8001296 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800128e:	f001 fd9d 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8001292:	6378      	str	r0, [r7, #52]	; 0x34
 8001294:	e004      	b.n	80012a0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001296:	f001 fd99 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 800129a:	4603      	mov	r3, r0
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a2:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_InitTick+0xe8>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3b01      	subs	r3, #1
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_InitTick+0xec>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_InitTick+0xec>)
 80012b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012bc:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_InitTick+0xec>)
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_InitTick+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_InitTick+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_InitTick+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80012d6:	4818      	ldr	r0, [pc, #96]	; (8001338 <HAL_InitTick+0xec>)
 80012d8:	f002 f9c2 	bl	8003660 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11b      	bne.n	8001322 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <HAL_InitTick+0xec>)
 80012ec:	f002 fa10 	bl	8003710 <HAL_TIM_Base_Start_IT>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d111      	bne.n	8001322 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012fe:	201c      	movs	r0, #28
 8001300:	f000 f9de 	bl	80016c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d808      	bhi.n	800131c <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800130a:	2200      	movs	r2, #0
 800130c:	6879      	ldr	r1, [r7, #4]
 800130e:	201c      	movs	r0, #28
 8001310:	f000 f9ba 	bl	8001688 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_InitTick+0xf0>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e002      	b.n	8001322 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001322:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001326:	4618      	mov	r0, r3
 8001328:	3738      	adds	r7, #56	; 0x38
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	431bde83 	.word	0x431bde83
 8001338:	20000af0 	.word	0x20000af0
 800133c:	2000000c 	.word	0x2000000c

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <NMI_Handler+0x4>

08001346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler+0x4>

0800134c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler+0x4>

08001352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <BusFault_Handler+0x4>

08001358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <UsageFault_Handler+0x4>

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM2_IRQHandler+0x10>)
 8001372:	f002 fba1 	bl	8003ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000af0 	.word	0x20000af0

08001380 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		BaseType_t xSchedulerChanged = pdFALSE;
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
		uint8_t buffer;
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, &buffer, 1, 0);
 800138a:	1df9      	adds	r1, r7, #7
 800138c:	2300      	movs	r3, #0
 800138e:	2201      	movs	r2, #1
 8001390:	4817      	ldr	r0, [pc, #92]	; (80013f0 <USART3_IRQHandler+0x70>)
 8001392:	f003 fbf2 	bl	8004b7a <HAL_UART_Receive>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]

		if (HAL_OK == status) {	//if uart has been recieved
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10f      	bne.n	80013c0 <USART3_IRQHandler+0x40>
		   //send the data from uart to the queue
		    xQueueSendFromISR(PwmDataBufferHandle, &buffer, &xSchedulerChanged);
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <USART3_IRQHandler+0x74>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	f107 0208 	add.w	r2, r7, #8
 80013a8:	1df9      	adds	r1, r7, #7
 80013aa:	2300      	movs	r3, #0
 80013ac:	f005 f9e1 	bl	8006772 <xQueueGenericSendFromISR>
		    HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
 80013b0:	1df9      	adds	r1, r7, #7
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	2201      	movs	r2, #1
 80013b8:	480d      	ldr	r0, [pc, #52]	; (80013f0 <USART3_IRQHandler+0x70>)
 80013ba:	f003 fb5b 	bl	8004a74 <HAL_UART_Transmit>
 80013be:	e005      	b.n	80013cc <USART3_IRQHandler+0x4c>
		    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		}
		else {
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <USART3_IRQHandler+0x78>)
 80013c8:	f000 feec 	bl	80021a4 <HAL_GPIO_WritePin>

		}

		portYIELD_FROM_ISR(xSchedulerChanged);
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <USART3_IRQHandler+0x62>
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <USART3_IRQHandler+0x7c>)
 80013d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	f3bf 8f4f 	dsb	sy
 80013de:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <USART3_IRQHandler+0x70>)
 80013e4:	f003 fc8e 	bl	8004d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000548 	.word	0x20000548
 80013f4:	20000ae0 	.word	0x20000ae0
 80013f8:	40020400 	.word	0x40020400
 80013fc:	e000ed04 	.word	0xe000ed04

08001400 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001404:	4b06      	ldr	r3, [pc, #24]	; (8001420 <SystemInit+0x20>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <SystemInit+0x20>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142a:	490e      	ldr	r1, [pc, #56]	; (8001464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001440:	4c0b      	ldr	r4, [pc, #44]	; (8001470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144e:	f7ff ffd7 	bl	8001400 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f006 ff23 	bl	800829c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f873 	bl	8000540 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001468:	080083a4 	.word	0x080083a4
  ldr r2, =_sbss
 800146c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001470:	2000488c 	.word	0x2000488c

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>

08001476 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f8f9 	bl	8001672 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001480:	200f      	movs	r0, #15
 8001482:	f7ff fee3 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001486:	f7ff fc8f 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000010 	.word	0x20000010
 80014b4:	20000b3c 	.word	0x20000b3c

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000b3c 	.word	0x20000b3c

080014d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000010 	.word	0x20000010

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <__NVIC_SetPriorityGrouping+0x40>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 8001542:	4313      	orrs	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <__NVIC_SetPriorityGrouping+0x40>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	05fa0000 	.word	0x05fa0000

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff4c 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800169a:	f7ff ff61 	bl	8001560 <__NVIC_GetPriorityGrouping>
 800169e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	68b9      	ldr	r1, [r7, #8]
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f7ff ffb1 	bl	800160c <NVIC_EncodePriority>
 80016aa:	4602      	mov	r2, r0
 80016ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff80 	bl	80015b8 <__NVIC_SetPriority>
}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff54 	bl	800157c <__NVIC_EnableIRQ>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016ea:	f7ff fee5 	bl	80014b8 <HAL_GetTick>
 80016ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e052      	b.n	80017b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0216 	bic.w	r2, r2, #22
 800171c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_DMA_Abort+0x62>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	e013      	b.n	8001788 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001760:	f7ff feaa 	bl	80014b8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b05      	cmp	r3, #5
 800176c:	d90c      	bls.n	8001788 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2203      	movs	r2, #3
 8001778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e015      	b.n	80017b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1e4      	bne.n	8001760 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	223f      	movs	r2, #63	; 0x3f
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d004      	beq.n	80017da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2280      	movs	r2, #128	; 0x80
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00c      	b.n	80017f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06a      	b.n	80018e8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001818:	2b00      	cmp	r3, #0
 800181a:	d106      	bne.n	800182a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2223      	movs	r2, #35	; 0x23
 8001820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fae7 	bl	8000df8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_ETH_Init+0xf0>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_ETH_Init+0xf0>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_ETH_Init+0xf0>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_ETH_Init+0xf4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4a2b      	ldr	r2, [pc, #172]	; (80018f4 <HAL_ETH_Init+0xf4>)
 8001848:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800184c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_ETH_Init+0xf4>)
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4927      	ldr	r1, [pc, #156]	; (80018f4 <HAL_ETH_Init+0xf4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_ETH_Init+0xf4>)
 800185e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001876:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001878:	f7ff fe1e 	bl	80014b8 <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800187e:	e011      	b.n	80018a4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001880:	f7ff fe1a 	bl	80014b8 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800188e:	d909      	bls.n	80018a4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2204      	movs	r2, #4
 8001894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	22e0      	movs	r2, #224	; 0xe0
 800189c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e021      	b.n	80018e8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1e4      	bne.n	8001880 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f958 	bl	8001b6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f9ff 	bl	8001cc0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 fa55 	bl	8001d72 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	461a      	mov	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f9bd 	bl	8001c50 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2210      	movs	r2, #16
 80018e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800

080018f8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <ETH_SetMACConfig+0x15c>)
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	7c1b      	ldrb	r3, [r3, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <ETH_SetMACConfig+0x28>
 800191a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800191e:	e000      	b.n	8001922 <ETH_SetMACConfig+0x2a>
 8001920:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	7c5b      	ldrb	r3, [r3, #17]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <ETH_SetMACConfig+0x38>
 800192a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800192e:	e000      	b.n	8001932 <ETH_SetMACConfig+0x3a>
 8001930:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001932:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001938:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	7fdb      	ldrb	r3, [r3, #31]
 800193e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001940:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001946:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	7f92      	ldrb	r2, [r2, #30]
 800194c:	2a00      	cmp	r2, #0
 800194e:	d102      	bne.n	8001956 <ETH_SetMACConfig+0x5e>
 8001950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001954:	e000      	b.n	8001958 <ETH_SetMACConfig+0x60>
 8001956:	2200      	movs	r2, #0
                        macconf->Speed |
 8001958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	7f1b      	ldrb	r3, [r3, #28]
 800195e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001960:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001966:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800196e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001976:	2a00      	cmp	r2, #0
 8001978:	d102      	bne.n	8001980 <ETH_SetMACConfig+0x88>
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	e000      	b.n	8001982 <ETH_SetMACConfig+0x8a>
 8001980:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001982:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7bdb      	ldrb	r3, [r3, #15]
 8001988:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800198a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001990:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001998:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800199a:	4313      	orrs	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fd8c 	bl	80014d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019d6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019de:	2a00      	cmp	r2, #0
 80019e0:	d101      	bne.n	80019e6 <ETH_SetMACConfig+0xee>
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	e000      	b.n	80019e8 <ETH_SetMACConfig+0xf0>
 80019e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019e8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80019ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80019f6:	2a01      	cmp	r2, #1
 80019f8:	d101      	bne.n	80019fe <ETH_SetMACConfig+0x106>
 80019fa:	2208      	movs	r2, #8
 80019fc:	e000      	b.n	8001a00 <ETH_SetMACConfig+0x108>
 80019fe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001a00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001a08:	2a01      	cmp	r2, #1
 8001a0a:	d101      	bne.n	8001a10 <ETH_SetMACConfig+0x118>
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	e000      	b.n	8001a12 <ETH_SetMACConfig+0x11a>
 8001a10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001a12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001a1a:	2a01      	cmp	r2, #1
 8001a1c:	d101      	bne.n	8001a22 <ETH_SetMACConfig+0x12a>
 8001a1e:	2202      	movs	r2, #2
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0x12c>
 8001a22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a24:	4313      	orrs	r3, r2
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fd47 	bl	80014d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	619a      	str	r2, [r3, #24]
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	ff20810f 	.word	0xff20810f

08001a58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <ETH_SetDMAConfig+0x110>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	7b1b      	ldrb	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <ETH_SetDMAConfig+0x2c>
 8001a7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a82:	e000      	b.n	8001a86 <ETH_SetDMAConfig+0x2e>
 8001a84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	7b5b      	ldrb	r3, [r3, #13]
 8001a8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	7f52      	ldrb	r2, [r2, #29]
 8001a92:	2a00      	cmp	r2, #0
 8001a94:	d102      	bne.n	8001a9c <ETH_SetDMAConfig+0x44>
 8001a96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a9a:	e000      	b.n	8001a9e <ETH_SetDMAConfig+0x46>
 8001a9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	7b9b      	ldrb	r3, [r3, #14]
 8001aa4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001aa6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001aac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	7f1b      	ldrb	r3, [r3, #28]
 8001ab2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ab4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	7f9b      	ldrb	r3, [r3, #30]
 8001aba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001abc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ac2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001acc:	4313      	orrs	r3, r2
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001adc:	461a      	mov	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fcee 	bl	80014d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	461a      	mov	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	791b      	ldrb	r3, [r3, #4]
 8001b06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001b12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001b18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001b22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001b2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001b30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fcbf 	bl	80014d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f8de3f23 	.word	0xf8de3f23

08001b6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a6      	sub	sp, #152	; 0x98
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001be0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be4:	4619      	mov	r1, r3
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fe86 	bl	80018f8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001bec:	2301      	movs	r3, #1
 8001bee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c20:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c2c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ff08 	bl	8001a58 <ETH_SetDMAConfig>
}
 8001c48:	bf00      	nop
 8001c4a:	3798      	adds	r7, #152	; 0x98
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3305      	adds	r3, #5
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	3204      	adds	r2, #4
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <ETH_MACAddressConfig+0x68>)
 8001c72:	4413      	add	r3, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3303      	adds	r3, #3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	061a      	lsls	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3302      	adds	r3, #2
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	4313      	orrs	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <ETH_MACAddressConfig+0x6c>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	6013      	str	r3, [r2, #0]
}
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40028040 	.word	0x40028040
 8001cbc:	40028044 	.word	0x40028044

08001cc0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e03e      	b.n	8001d4c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68d9      	ldr	r1, [r3, #12]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	3206      	adds	r2, #6
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d80c      	bhi.n	8001d30 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	e004      	b.n	8001d3a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9bd      	bls.n	8001cce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d64:	611a      	str	r2, [r3, #16]
}
 8001d66:	bf00      	nop
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b085      	sub	sp, #20
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e046      	b.n	8001e0e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6919      	ldr	r1, [r3, #16]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2200      	movs	r2, #0
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dbc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001dc4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	3212      	adds	r2, #18
 8001dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d80c      	bhi.n	8001dfe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	461a      	mov	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	e004      	b.n	8001e08 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d9b5      	bls.n	8001d80 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3e:	60da      	str	r2, [r3, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	e175      	b.n	8002158 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	f040 8164 	bne.w	8002152 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d005      	beq.n	8001ea2 <HAL_GPIO_Init+0x56>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d130      	bne.n	8001f04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed8:	2201      	movs	r2, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	091b      	lsrs	r3, r3, #4
 8001eee:	f003 0201 	and.w	r2, r3, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d017      	beq.n	8001f40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d123      	bne.n	8001f94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	08da      	lsrs	r2, r3, #3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3208      	adds	r2, #8
 8001f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	08da      	lsrs	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	3208      	adds	r2, #8
 8001f8e:	69b9      	ldr	r1, [r7, #24]
 8001f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f000 80be 	beq.w	8002152 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <HAL_GPIO_Init+0x324>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001fee:	4a61      	ldr	r2, [pc, #388]	; (8002174 <HAL_GPIO_Init+0x328>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_Init+0x32c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d037      	beq.n	800208a <HAL_GPIO_Init+0x23e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_GPIO_Init+0x330>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_GPIO_Init+0x23a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_Init+0x334>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02b      	beq.n	8002082 <HAL_GPIO_Init+0x236>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a55      	ldr	r2, [pc, #340]	; (8002184 <HAL_GPIO_Init+0x338>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x232>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a54      	ldr	r2, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x33c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x22e>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a53      	ldr	r2, [pc, #332]	; (800218c <HAL_GPIO_Init+0x340>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x22a>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x344>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x226>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a51      	ldr	r2, [pc, #324]	; (8002194 <HAL_GPIO_Init+0x348>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x222>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a50      	ldr	r2, [pc, #320]	; (8002198 <HAL_GPIO_Init+0x34c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x21e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4f      	ldr	r2, [pc, #316]	; (800219c <HAL_GPIO_Init+0x350>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x21a>
 8002062:	2309      	movs	r3, #9
 8002064:	e012      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002066:	230a      	movs	r3, #10
 8002068:	e010      	b.n	800208c <HAL_GPIO_Init+0x240>
 800206a:	2308      	movs	r3, #8
 800206c:	e00e      	b.n	800208c <HAL_GPIO_Init+0x240>
 800206e:	2307      	movs	r3, #7
 8002070:	e00c      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002072:	2306      	movs	r3, #6
 8002074:	e00a      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002076:	2305      	movs	r3, #5
 8002078:	e008      	b.n	800208c <HAL_GPIO_Init+0x240>
 800207a:	2304      	movs	r3, #4
 800207c:	e006      	b.n	800208c <HAL_GPIO_Init+0x240>
 800207e:	2303      	movs	r3, #3
 8002080:	e004      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002082:	2302      	movs	r3, #2
 8002084:	e002      	b.n	800208c <HAL_GPIO_Init+0x240>
 8002086:	2301      	movs	r3, #1
 8002088:	e000      	b.n	800208c <HAL_GPIO_Init+0x240>
 800208a:	2300      	movs	r3, #0
 800208c:	69fa      	ldr	r2, [r7, #28]
 800208e:	f002 0203 	and.w	r2, r2, #3
 8002092:	0092      	lsls	r2, r2, #2
 8002094:	4093      	lsls	r3, r2
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800209c:	4935      	ldr	r1, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x328>)
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <HAL_GPIO_Init+0x354>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_GPIO_Init+0x354>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002122:	4a1f      	ldr	r2, [pc, #124]	; (80021a0 <HAL_GPIO_Init+0x354>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_GPIO_Init+0x354>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214c:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_GPIO_Init+0x354>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3301      	adds	r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	f67f ae86 	bls.w	8001e6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3724      	adds	r7, #36	; 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800
 8002174:	40013800 	.word	0x40013800
 8002178:	40020000 	.word	0x40020000
 800217c:	40020400 	.word	0x40020400
 8002180:	40020800 	.word	0x40020800
 8002184:	40020c00 	.word	0x40020c00
 8002188:	40021000 	.word	0x40021000
 800218c:	40021400 	.word	0x40021400
 8002190:	40021800 	.word	0x40021800
 8002194:	40021c00 	.word	0x40021c00
 8002198:	40022000 	.word	0x40022000
 800219c:	40022400 	.word	0x40022400
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d8:	b08f      	sub	sp, #60	; 0x3c
 80021da:	af0a      	add	r7, sp, #40	; 0x28
 80021dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e116      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe ffa8 	bl	8001158 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fd5e 	bl	8005ce8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	687e      	ldr	r6, [r7, #4]
 8002234:	466d      	mov	r5, sp
 8002236:	f106 0410 	add.w	r4, r6, #16
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002246:	e885 0003 	stmia.w	r5, {r0, r1}
 800224a:	1d33      	adds	r3, r6, #4
 800224c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f003 fcf2 	bl	8005c38 <USB_CoreInit>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0d7      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fd4c 	bl	8005d0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e04a      	b.n	800230e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	333d      	adds	r3, #61	; 0x3d
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b298      	uxth	r0, r3
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	4602      	mov	r2, r0
 80022b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3340      	adds	r3, #64	; 0x40
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3348      	adds	r3, #72	; 0x48
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334c      	adds	r3, #76	; 0x4c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3af      	bcc.n	8002278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e044      	b.n	80023a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3301      	adds	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3b5      	bcc.n	800231e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	687e      	ldr	r6, [r7, #4]
 80023ba:	466d      	mov	r5, sp
 80023bc:	f106 0410 	add.w	r4, r6, #16
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d0:	1d33      	adds	r3, r6, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f003 fce5 	bl	8005da4 <USB_DevInit>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e014      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f80b 	bl	8002420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fea3 	bl	800615a <USB_DevDisconnect>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_PCDEx_ActivateLPM+0x44>)
 8002450:	4313      	orrs	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	10000003 	.word	0x10000003

08002468 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40007000 	.word	0x40007000

08002488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e291      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b96      	ldr	r3, [pc, #600]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b8:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
 80024c4:	4b90      	ldr	r3, [pc, #576]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b8d      	ldr	r3, [pc, #564]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x130>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e26b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x7a>
 80024f4:	4b84      	ldr	r3, [pc, #528]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a83      	ldr	r2, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x9c>
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7e      	ldr	r2, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7b      	ldr	r2, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xc0>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ffa6 	bl	80014b8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe ffa2 	bl	80014b8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e21f      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe8>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ff92 	bl	80014b8 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe ff8e 	bl	80014b8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e20b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x110>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1df      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	493d      	ldr	r1, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e040      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a38      	ldr	r2, [pc, #224]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe ff44 	bl	80014b8 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe ff40 	bl	80014b8 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1bd      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe ff20 	bl	80014b8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe ff1c 	bl	80014b8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e199      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d038      	beq.n	8002718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe fefd 	bl	80014b8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe fef9 	bl	80014b8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e176      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x23a>
 80026e0:	e01a      	b.n	8002718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fee3 	bl	80014b8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fedf 	bl	80014b8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d903      	bls.n	800270c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e15c      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
 8002708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a4 	beq.w	800286e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a87      	ldr	r2, [pc, #540]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800275a:	4b7f      	ldr	r3, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7e      	ldr	r2, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe fea7 	bl	80014b8 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fea3 	bl	80014b8 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e120      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b75      	ldr	r3, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x31a>
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x33c>
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a66      	ldr	r2, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x35e>
 80027cc:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a60      	ldr	r2, [pc, #384]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a5a      	ldr	r2, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a57      	ldr	r2, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fe57 	bl	80014b8 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fe53 	bl	80014b8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ce      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x386>
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fe41 	bl	80014b8 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fe3d 	bl	80014b8 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80a4 	beq.w	80029c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d06b      	beq.n	800295c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d149      	bne.n	8002920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fe0e 	bl	80014b8 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fe0a 	bl	80014b8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fdde 	bl	80014b8 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fdda 	bl	80014b8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e057      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x478>
 800291e:	e04f      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fdc4 	bl	80014b8 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fdc0 	bl	80014b8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e03d      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x4ac>
 8002952:	e035      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x544>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fcf8 	bl	80014b8 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fcf4 	bl	80014b8 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1cc>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fb62 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	0800837c 	.word	0x0800837c
 8002ba0:	20000008 	.word	0x20000008
 8002ba4:	2000000c 	.word	0x2000000c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b094      	sub	sp, #80	; 0x50
 8002bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc0:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	f200 80e1 	bhi.w	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e0db      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be0:	e0db      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be6:	e0d8      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	2200      	movs	r2, #0
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
 8002c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	6139      	str	r1, [r7, #16]
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4651      	mov	r1, sl
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4651      	mov	r1, sl
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c60:	4659      	mov	r1, fp
 8002c62:	eb63 0901 	sbc.w	r9, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c7a:	4690      	mov	r8, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb18 0303 	adds.w	r3, r8, r3
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb49 0303 	adc.w	r3, r9, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	024b      	lsls	r3, r1, #9
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	024a      	lsls	r2, r1, #9
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb8:	f7fd faaa 	bl	8000210 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	e058      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cfe:	4649      	mov	r1, r9
 8002d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d18:	ebb2 040a 	subs.w	r4, r2, sl
 8002d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	00eb      	lsls	r3, r5, #3
 8002d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	eb45 0303 	adc.w	r3, r5, r3
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d4e:	4629      	mov	r1, r5
 8002d50:	028b      	lsls	r3, r1, #10
 8002d52:	4621      	mov	r1, r4
 8002d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d58:	4621      	mov	r1, r4
 8002d5a:	028a      	lsls	r2, r1, #10
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d62:	2200      	movs	r2, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	61fa      	str	r2, [r7, #28]
 8002d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6c:	f7fd fa50 	bl	8000210 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3750      	adds	r7, #80	; 0x50
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000008 	.word	0x20000008

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	0800838c 	.word	0x0800838c

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	0800838c 	.word	0x0800838c

08002e1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	220f      	movs	r2, #15
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0203 	and.w	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RCC_GetClockConfig+0x5c>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e50:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_GetClockConfig+0x5c>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	08db      	lsrs	r3, r3, #3
 8002e56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCC_GetClockConfig+0x60>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	601a      	str	r2, [r3, #0]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40023c00 	.word	0x40023c00

08002e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea8:	4b69      	ldr	r3, [pc, #420]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eb2:	6093      	str	r3, [r2, #8]
 8002eb4:	4b66      	ldr	r3, [pc, #408]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	4964      	ldr	r1, [pc, #400]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d017      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eda:	4b5d      	ldr	r3, [pc, #372]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	4959      	ldr	r1, [pc, #356]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d017      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f16:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	494a      	ldr	r1, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 808b 	beq.w	800307a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	4a39      	ldr	r2, [pc, #228]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f70:	4b37      	ldr	r3, [pc, #220]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f88:	f7fe fa96 	bl	80014b8 <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f90:	f7fe fa92 	bl	80014b8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e357      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002fa2:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d035      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d02e      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fcc:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a1d      	ldr	r2, [pc, #116]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fe2:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d114      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe fa5a 	bl	80014b8 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fa56 	bl	80014b8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e319      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ee      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003036:	d111      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003046:	400b      	ands	r3, r1
 8003048:	4901      	ldr	r1, [pc, #4]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
 800304e:	e00b      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003050:	40023800 	.word	0x40023800
 8003054:	40007000 	.word	0x40007000
 8003058:	0ffffcff 	.word	0x0ffffcff
 800305c:	4baa      	ldr	r3, [pc, #680]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4aa9      	ldr	r2, [pc, #676]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003062:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	4ba7      	ldr	r3, [pc, #668]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800306a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	49a4      	ldr	r1, [pc, #656]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003076:	4313      	orrs	r3, r2
 8003078:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d010      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003086:	4ba0      	ldr	r3, [pc, #640]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800308c:	4a9e      	ldr	r2, [pc, #632]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003096:	4b9c      	ldr	r3, [pc, #624]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003098:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	4999      	ldr	r1, [pc, #612]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030b4:	4b94      	ldr	r3, [pc, #592]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c2:	4991      	ldr	r1, [pc, #580]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030d6:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e4:	4988      	ldr	r1, [pc, #544]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030f8:	4b83      	ldr	r3, [pc, #524]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003106:	4980      	ldr	r1, [pc, #512]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800311a:	4b7b      	ldr	r3, [pc, #492]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4977      	ldr	r1, [pc, #476]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313c:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f023 0203 	bic.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	496f      	ldr	r1, [pc, #444]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800315e:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f023 020c 	bic.w	r2, r3, #12
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800316c:	4966      	ldr	r1, [pc, #408]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003180:	4b61      	ldr	r3, [pc, #388]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003186:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	495e      	ldr	r1, [pc, #376]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80031a2:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	4955      	ldr	r1, [pc, #340]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d2:	494d      	ldr	r1, [pc, #308]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031e6:	4b48      	ldr	r3, [pc, #288]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	4944      	ldr	r1, [pc, #272]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00a      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003208:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	493c      	ldr	r1, [pc, #240]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800322a:	4b37      	ldr	r3, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	4933      	ldr	r1, [pc, #204]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323a:	4313      	orrs	r3, r2
 800323c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800324c:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800325a:	492b      	ldr	r1, [pc, #172]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d011      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800326e:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327c:	4922      	ldr	r1, [pc, #136]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003288:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800328c:	d101      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800328e:	2301      	movs	r3, #1
 8003290:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800329e:	2301      	movs	r3, #1
 80032a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ae:	4b16      	ldr	r3, [pc, #88]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	4912      	ldr	r1, [pc, #72]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032d0:	4b0d      	ldr	r3, [pc, #52]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e0:	4909      	ldr	r1, [pc, #36]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d006      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 80d9 	beq.w	80034ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a01      	ldr	r2, [pc, #4]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003308:	40023800 	.word	0x40023800
 800330c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330e:	f7fe f8d3 	bl	80014b8 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003316:	f7fe f8cf 	bl	80014b8 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b64      	cmp	r3, #100	; 0x64
 8003322:	d901      	bls.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e194      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003328:	4b6c      	ldr	r3, [pc, #432]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d021      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003344:	2b00      	cmp	r3, #0
 8003346:	d11d      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003348:	4b64      	ldr	r3, [pc, #400]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335c:	0e1b      	lsrs	r3, r3, #24
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	019a      	lsls	r2, r3, #6
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	041b      	lsls	r3, r3, #16
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	071b      	lsls	r3, r3, #28
 800337c:	4957      	ldr	r1, [pc, #348]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d004      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02e      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ae:	d129      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b6:	0c1b      	lsrs	r3, r3, #16
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c4:	0f1b      	lsrs	r3, r3, #28
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	019a      	lsls	r2, r3, #6
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	431a      	orrs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	071b      	lsls	r3, r3, #28
 80033e4:	493d      	ldr	r1, [pc, #244]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f2:	f023 021f 	bic.w	r2, r3, #31
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	3b01      	subs	r3, #1
 80033fc:	4937      	ldr	r1, [pc, #220]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003416:	0e1b      	lsrs	r3, r3, #24
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003424:	0f1b      	lsrs	r3, r3, #28
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	019a      	lsls	r2, r3, #6
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	061b      	lsls	r3, r3, #24
 800343e:	431a      	orrs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	071b      	lsls	r3, r3, #28
 8003444:	4925      	ldr	r1, [pc, #148]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d011      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	019a      	lsls	r2, r3, #6
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	041b      	lsls	r3, r3, #16
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	061b      	lsls	r3, r3, #24
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	071b      	lsls	r3, r3, #28
 8003474:	4919      	ldr	r1, [pc, #100]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800347c:	4b17      	ldr	r3, [pc, #92]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a16      	ldr	r2, [pc, #88]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003488:	f7fe f816 	bl	80014b8 <HAL_GetTick>
 800348c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003490:	f7fe f812 	bl	80014b8 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0d7      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	f040 80cd 	bne.w	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c2:	f7fd fff9 	bl	80014b8 <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034ca:	f7fd fff5 	bl	80014b8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b64      	cmp	r3, #100	; 0x64
 80034d6:	d903      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0ba      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ec:	d0ed      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02e      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12a      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4944      	ldr	r1, [pc, #272]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003552:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	493d      	ldr	r1, [pc, #244]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003580:	d11d      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	0f1b      	lsrs	r3, r3, #28
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	019a      	lsls	r2, r3, #6
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	4929      	ldr	r1, [pc, #164]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d028      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	0e1b      	lsrs	r3, r3, #24
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	019a      	lsls	r2, r3, #6
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	071b      	lsls	r3, r3, #28
 80035fe:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4911      	ldr	r1, [pc, #68]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fd ff46 	bl	80014b8 <HAL_GetTick>
 800362c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003630:	f7fd ff42 	bl	80014b8 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e007      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364e:	d1ef      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fc6e 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fd30 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e054      	b.n	80037d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_Base_Start_IT+0xdc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d115      	bne.n	80037bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_TIM_Base_Start_IT+0xec>)
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d015      	beq.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d011      	beq.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e008      	b.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40010400 	.word	0x40010400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40001800 	.word	0x40001800
 80037fc:	00010007 	.word	0x00010007

08003800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e049      	b.n	80038a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f841 	bl	80038ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f000 fc60 	bl	8004104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_TIM_PWM_Start+0x24>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e03c      	b.n	8003962 <HAL_TIM_PWM_Start+0x9e>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d109      	bne.n	8003902 <HAL_TIM_PWM_Start+0x3e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	bf14      	ite	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	2300      	moveq	r3, #0
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e02f      	b.n	8003962 <HAL_TIM_PWM_Start+0x9e>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d109      	bne.n	800391c <HAL_TIM_PWM_Start+0x58>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b01      	cmp	r3, #1
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e022      	b.n	8003962 <HAL_TIM_PWM_Start+0x9e>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d109      	bne.n	8003936 <HAL_TIM_PWM_Start+0x72>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b01      	cmp	r3, #1
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e015      	b.n	8003962 <HAL_TIM_PWM_Start+0x9e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b10      	cmp	r3, #16
 800393a:	d109      	bne.n	8003950 <HAL_TIM_PWM_Start+0x8c>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b01      	cmp	r3, #1
 8003946:	bf14      	ite	ne
 8003948:	2301      	movne	r3, #1
 800394a:	2300      	moveq	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e008      	b.n	8003962 <HAL_TIM_PWM_Start+0x9e>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e092      	b.n	8003a90 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d104      	bne.n	800397a <HAL_TIM_PWM_Start+0xb6>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003978:	e023      	b.n	80039c2 <HAL_TIM_PWM_Start+0xfe>
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0xc6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	e01b      	b.n	80039c2 <HAL_TIM_PWM_Start+0xfe>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0xd6>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	e013      	b.n	80039c2 <HAL_TIM_PWM_Start+0xfe>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0xe6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a8:	e00b      	b.n	80039c2 <HAL_TIM_PWM_Start+0xfe>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xf6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b8:	e003      	b.n	80039c2 <HAL_TIM_PWM_Start+0xfe>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 ff32 	bl	8004834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a30      	ldr	r2, [pc, #192]	; (8003a98 <HAL_TIM_PWM_Start+0x1d4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_TIM_PWM_Start+0x120>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a2f      	ldr	r2, [pc, #188]	; (8003a9c <HAL_TIM_PWM_Start+0x1d8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_TIM_PWM_Start+0x124>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_TIM_PWM_Start+0x126>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d007      	beq.n	80039fe <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <HAL_TIM_PWM_Start+0x1d4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d01d      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_TIM_PWM_Start+0x1dc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_TIM_PWM_Start+0x1e0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1f      	ldr	r2, [pc, #124]	; (8003aa8 <HAL_TIM_PWM_Start+0x1e4>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a19      	ldr	r2, [pc, #100]	; (8003a9c <HAL_TIM_PWM_Start+0x1d8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	; (8003aac <HAL_TIM_PWM_Start+0x1e8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIM_PWM_Start+0x18a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	; (8003ab0 <HAL_TIM_PWM_Start+0x1ec>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d115      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_TIM_PWM_Start+0x1f0>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b06      	cmp	r3, #6
 8003a5e:	d015      	beq.n	8003a8c <HAL_TIM_PWM_Start+0x1c8>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a66:	d011      	beq.n	8003a8c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e008      	b.n	8003a8c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e000      	b.n	8003a8e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	40010400 	.word	0x40010400
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40001800 	.word	0x40001800
 8003ab4:	00010007 	.word	0x00010007

08003ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0202 	mvn.w	r2, #2
 8003ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fae4 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fad6 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fae7 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0204 	mvn.w	r2, #4
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 faba 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 faac 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fabd 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0208 	mvn.w	r2, #8
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa90 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa82 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fa93 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b10      	cmp	r3, #16
 8003bc8:	d122      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d11b      	bne.n	8003c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2208      	movs	r2, #8
 8003be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 fa66 	bl	80040c8 <HAL_TIM_IC_CaptureCallback>
 8003bfc:	e005      	b.n	8003c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fa58 	bl	80040b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fa69 	bl	80040dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10e      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d107      	bne.n	8003c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0201 	mvn.w	r2, #1
 8003c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd f8a2 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d10e      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d107      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fea4 	bl	80049b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c76:	d10e      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fe97 	bl	80049c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d107      	bne.n	8003cc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa17 	bl	80040f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f06f 0220 	mvn.w	r2, #32
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fe57 	bl	800499c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0ff      	b.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b14      	cmp	r3, #20
 8003d22:	f200 80f0 	bhi.w	8003f06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d26:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2c:	08003d81 	.word	0x08003d81
 8003d30:	08003f07 	.word	0x08003f07
 8003d34:	08003f07 	.word	0x08003f07
 8003d38:	08003f07 	.word	0x08003f07
 8003d3c:	08003dc1 	.word	0x08003dc1
 8003d40:	08003f07 	.word	0x08003f07
 8003d44:	08003f07 	.word	0x08003f07
 8003d48:	08003f07 	.word	0x08003f07
 8003d4c:	08003e03 	.word	0x08003e03
 8003d50:	08003f07 	.word	0x08003f07
 8003d54:	08003f07 	.word	0x08003f07
 8003d58:	08003f07 	.word	0x08003f07
 8003d5c:	08003e43 	.word	0x08003e43
 8003d60:	08003f07 	.word	0x08003f07
 8003d64:	08003f07 	.word	0x08003f07
 8003d68:	08003f07 	.word	0x08003f07
 8003d6c:	08003e85 	.word	0x08003e85
 8003d70:	08003f07 	.word	0x08003f07
 8003d74:	08003f07 	.word	0x08003f07
 8003d78:	08003f07 	.word	0x08003f07
 8003d7c:	08003ec5 	.word	0x08003ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fa5c 	bl	8004244 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f042 0208 	orr.w	r2, r2, #8
 8003d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 0204 	bic.w	r2, r2, #4
 8003daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6999      	ldr	r1, [r3, #24]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	619a      	str	r2, [r3, #24]
      break;
 8003dbe:	e0a5      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68b9      	ldr	r1, [r7, #8]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 faae 	bl	8004328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6999      	ldr	r1, [r3, #24]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	021a      	lsls	r2, r3, #8
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]
      break;
 8003e00:	e084      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fb05 	bl	8004418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0208 	orr.w	r2, r2, #8
 8003e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0204 	bic.w	r2, r2, #4
 8003e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69d9      	ldr	r1, [r3, #28]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	61da      	str	r2, [r3, #28]
      break;
 8003e40:	e064      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fb5b 	bl	8004504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69da      	ldr	r2, [r3, #28]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	021a      	lsls	r2, r3, #8
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	61da      	str	r2, [r3, #28]
      break;
 8003e82:	e043      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb92 	bl	80045b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ec2:	e023      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fbc4 	bl	8004658 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f04:	e002      	b.n	8003f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop

08003f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIM_ConfigClockSource+0x1c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e0b4      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x186>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_TIM_ConfigClockSource+0x190>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f74:	d03e      	beq.n	8003ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	f200 8087 	bhi.w	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	f000 8086 	beq.w	8004092 <HAL_TIM_ConfigClockSource+0x172>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d87f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b70      	cmp	r3, #112	; 0x70
 8003f8e:	d01a      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f90:	2b70      	cmp	r3, #112	; 0x70
 8003f92:	d87b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d050      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x11a>
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d877      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d03c      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xfa>
 8003fa0:	2b50      	cmp	r3, #80	; 0x50
 8003fa2:	d873      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d058      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x13a>
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d86f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d064      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b30      	cmp	r3, #48	; 0x30
 8003fb2:	d86b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d060      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d867      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d05a      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc4:	e062      	b.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fd6:	f000 fc0d 	bl	80047f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
      break;
 8003ff2:	e04f      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004004:	f000 fbf6 	bl	80047f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004016:	609a      	str	r2, [r3, #8]
      break;
 8004018:	e03c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fb6a 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2150      	movs	r1, #80	; 0x50
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fbc3 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8004038:	e02c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fb89 	bl	800475e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2160      	movs	r1, #96	; 0x60
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fbb3 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8004058:	e01c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fb4a 	bl	8004700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fba3 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 8004078:	e00c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fb9a 	bl	80047be <TIM_ITRx_SetConfig>
      break;
 800408a:	e003      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e000      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	fffeff88 	.word	0xfffeff88

080040b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a40      	ldr	r2, [pc, #256]	; (8004218 <TIM_Base_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d00f      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3d      	ldr	r2, [pc, #244]	; (800421c <TIM_Base_SetConfig+0x118>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00b      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d007      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <TIM_Base_SetConfig+0x120>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3a      	ldr	r2, [pc, #232]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d108      	bne.n	8004156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <TIM_Base_SetConfig+0x114>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d02b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004164:	d027      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a2c      	ldr	r2, [pc, #176]	; (800421c <TIM_Base_SetConfig+0x118>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d023      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a2b      	ldr	r2, [pc, #172]	; (8004220 <TIM_Base_SetConfig+0x11c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a2a      	ldr	r2, [pc, #168]	; (8004224 <TIM_Base_SetConfig+0x120>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a29      	ldr	r2, [pc, #164]	; (8004228 <TIM_Base_SetConfig+0x124>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d017      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_Base_SetConfig+0x128>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_Base_SetConfig+0x12c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00f      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <TIM_Base_SetConfig+0x130>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <TIM_Base_SetConfig+0x134>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a24      	ldr	r2, [pc, #144]	; (800423c <TIM_Base_SetConfig+0x138>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a23      	ldr	r2, [pc, #140]	; (8004240 <TIM_Base_SetConfig+0x13c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <TIM_Base_SetConfig+0x114>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0xf8>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <TIM_Base_SetConfig+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40010400 	.word	0x40010400
 800422c:	40014000 	.word	0x40014000
 8004230:	40014400 	.word	0x40014400
 8004234:	40014800 	.word	0x40014800
 8004238:	40001800 	.word	0x40001800
 800423c:	40001c00 	.word	0x40001c00
 8004240:	40002000 	.word	0x40002000

08004244 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4b2b      	ldr	r3, [pc, #172]	; (800431c <TIM_OC1_SetConfig+0xd8>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f023 0302 	bic.w	r3, r3, #2
 800428c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a21      	ldr	r2, [pc, #132]	; (8004320 <TIM_OC1_SetConfig+0xdc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC1_SetConfig+0x64>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a20      	ldr	r2, [pc, #128]	; (8004324 <TIM_OC1_SetConfig+0xe0>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d10c      	bne.n	80042c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0308 	bic.w	r3, r3, #8
 80042ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a16      	ldr	r2, [pc, #88]	; (8004320 <TIM_OC1_SetConfig+0xdc>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_OC1_SetConfig+0x8e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a15      	ldr	r2, [pc, #84]	; (8004324 <TIM_OC1_SetConfig+0xe0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d111      	bne.n	80042f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	621a      	str	r2, [r3, #32]
}
 8004310:	bf00      	nop
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	fffeff8f 	.word	0xfffeff8f
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400

08004328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0210 	bic.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	4b2e      	ldr	r3, [pc, #184]	; (800440c <TIM_OC2_SetConfig+0xe4>)
 8004354:	4013      	ands	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0320 	bic.w	r3, r3, #32
 8004372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <TIM_OC2_SetConfig+0xe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_OC2_SetConfig+0x68>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a22      	ldr	r2, [pc, #136]	; (8004414 <TIM_OC2_SetConfig+0xec>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10d      	bne.n	80043ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_OC2_SetConfig+0xe8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC2_SetConfig+0x94>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a17      	ldr	r2, [pc, #92]	; (8004414 <TIM_OC2_SetConfig+0xec>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d113      	bne.n	80043e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	feff8fff 	.word	0xfeff8fff
 8004410:	40010000 	.word	0x40010000
 8004414:	40010400 	.word	0x40010400

08004418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <TIM_OC3_SetConfig+0xe0>)
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0303 	bic.w	r3, r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <TIM_OC3_SetConfig+0xe4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <TIM_OC3_SetConfig+0x66>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a21      	ldr	r2, [pc, #132]	; (8004500 <TIM_OC3_SetConfig+0xe8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10d      	bne.n	800449a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a17      	ldr	r2, [pc, #92]	; (80044fc <TIM_OC3_SetConfig+0xe4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_OC3_SetConfig+0x92>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a16      	ldr	r2, [pc, #88]	; (8004500 <TIM_OC3_SetConfig+0xe8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d113      	bne.n	80044d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	fffeff8f 	.word	0xfffeff8f
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400

08004504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <TIM_OC4_SetConfig+0xa4>)
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800454e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <TIM_OC4_SetConfig+0xa8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_OC4_SetConfig+0x68>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <TIM_OC4_SetConfig+0xac>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d109      	bne.n	8004580 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	019b      	lsls	r3, r3, #6
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	feff8fff 	.word	0xfeff8fff
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40010400 	.word	0x40010400

080045b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <TIM_OC5_SetConfig+0x98>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80045f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a12      	ldr	r2, [pc, #72]	; (8004650 <TIM_OC5_SetConfig+0x9c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_OC5_SetConfig+0x5e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <TIM_OC5_SetConfig+0xa0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d109      	bne.n	8004626 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004618:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	621a      	str	r2, [r3, #32]
}
 8004640:	bf00      	nop
 8004642:	371c      	adds	r7, #28
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	fffeff8f 	.word	0xfffeff8f
 8004650:	40010000 	.word	0x40010000
 8004654:	40010400 	.word	0x40010400

08004658 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4b1c      	ldr	r3, [pc, #112]	; (80046f4 <TIM_OC6_SetConfig+0x9c>)
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800469a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	051b      	lsls	r3, r3, #20
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <TIM_OC6_SetConfig+0xa0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d003      	beq.n	80046b8 <TIM_OC6_SetConfig+0x60>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <TIM_OC6_SetConfig+0xa4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d109      	bne.n	80046cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	feff8fff 	.word	0xfeff8fff
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40010400 	.word	0x40010400

08004700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800472a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 030a 	bic.w	r3, r3, #10
 800473c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475e:	b480      	push	{r7}
 8004760:	b087      	sub	sp, #28
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0210 	bic.w	r2, r3, #16
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	031b      	lsls	r3, r3, #12
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4313      	orrs	r3, r2
 8004792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800479a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	609a      	str	r2, [r3, #8]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800480e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	021a      	lsls	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	609a      	str	r2, [r3, #8]
}
 8004828:	bf00      	nop
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2201      	movs	r2, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a1a      	ldr	r2, [r3, #32]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	43db      	mvns	r3, r3
 8004856:	401a      	ands	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	f003 031f 	and.w	r3, r3, #31
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	431a      	orrs	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004894:	2302      	movs	r3, #2
 8004896:	e06d      	b.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a30      	ldr	r2, [pc, #192]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2f      	ldr	r2, [pc, #188]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a20      	ldr	r2, [pc, #128]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d01d      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1c      	ldr	r2, [pc, #112]	; (800498c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1a      	ldr	r2, [pc, #104]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a15      	ldr	r2, [pc, #84]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d10c      	bne.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800494e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	4313      	orrs	r3, r2
 8004958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400
 8004988:	40000400 	.word	0x40000400
 800498c:	40000800 	.word	0x40000800
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40014000 	.word	0x40014000
 8004998:	40001800 	.word	0x40001800

0800499c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e040      	b.n	8004a6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc fb44 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0201 	bic.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fc66 	bl	80052e8 <UART_SetConfig>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e022      	b.n	8004a6c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 febe 	bl	80057b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689a      	ldr	r2, [r3, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f042 0201 	orr.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 ff45 	bl	80058f4 <UART_CheckIdleState>
 8004a6a:	4603      	mov	r3, r0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08a      	sub	sp, #40	; 0x28
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d171      	bne.n	8004b70 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_UART_Transmit+0x24>
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e06a      	b.n	8004b72 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2221      	movs	r2, #33	; 0x21
 8004aa8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aaa:	f7fc fd05 	bl	80014b8 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	88fa      	ldrh	r2, [r7, #6]
 8004ab4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	88fa      	ldrh	r2, [r7, #6]
 8004abc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac8:	d108      	bne.n	8004adc <HAL_UART_Transmit+0x68>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d104      	bne.n	8004adc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e003      	b.n	8004ae4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ae4:	e02c      	b.n	8004b40 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 ff36 	bl	8005962 <UART_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e038      	b.n	8004b72 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	3302      	adds	r3, #2
 8004b1a:	61bb      	str	r3, [r7, #24]
 8004b1c:	e007      	b.n	8004b2e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1cc      	bne.n	8004ae6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2200      	movs	r2, #0
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 ff03 	bl	8005962 <UART_WaitOnFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e005      	b.n	8004b72 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b08a      	sub	sp, #40	; 0x28
 8004b7e:	af02      	add	r7, sp, #8
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 80b1 	bne.w	8004cf8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_UART_Receive+0x28>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e0a9      	b.n	8004cfa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2222      	movs	r2, #34	; 0x22
 8004bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bbc:	f7fc fc7c 	bl	80014b8 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	88fa      	ldrh	r2, [r7, #6]
 8004bce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d10e      	bne.n	8004bfa <HAL_UART_Receive+0x80>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_UART_Receive+0x76>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004bea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bee:	e02d      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf8:	e028      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_UART_Receive+0xa4>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d104      	bne.n	8004c14 <HAL_UART_Receive+0x9a>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c12:	e01b      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	227f      	movs	r2, #127	; 0x7f
 8004c18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c1c:	e016      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c26:	d10d      	bne.n	8004c44 <HAL_UART_Receive+0xca>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d104      	bne.n	8004c3a <HAL_UART_Receive+0xc0>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	227f      	movs	r2, #127	; 0x7f
 8004c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c38:	e008      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	223f      	movs	r2, #63	; 0x3f
 8004c3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c42:	e003      	b.n	8004c4c <HAL_UART_Receive+0xd2>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c52:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d108      	bne.n	8004c70 <HAL_UART_Receive+0xf6>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e003      	b.n	8004c78 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c78:	e032      	b.n	8004ce0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	2120      	movs	r1, #32
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fe6c 	bl	8005962 <UART_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e032      	b.n	8004cfa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	8a7b      	ldrh	r3, [r7, #18]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	3302      	adds	r3, #2
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	e00c      	b.n	8004cce <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	8a7b      	ldrh	r3, [r7, #18]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1c6      	bne.n	8004c7a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e000      	b.n	8004cfa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
  }
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0ba      	sub	sp, #232	; 0xe8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d32:	4013      	ands	r3, r2
 8004d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d115      	bne.n	8004d6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00f      	beq.n	8004d6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8297 	beq.w	8005290 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
      }
      return;
 8004d6a:	e291      	b.n	8005290 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8117 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d86:	4b85      	ldr	r3, [pc, #532]	; (8004f9c <HAL_UART_IRQHandler+0x298>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 810a 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xbc>
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_UART_IRQHandler+0xec>
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_UART_IRQHandler+0x11c>
 8004dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e52:	f043 0208 	orr.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_UART_IRQHandler+0x18a>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 81fd 	beq.w	8005294 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04f      	beq.n	8004f86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fe01 	bl	8005aee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d141      	bne.n	8004f7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3308      	adds	r3, #8
 8004f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1d9      	bne.n	8004efa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <HAL_UART_IRQHandler+0x29c>)
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fc fc2e 	bl	80017bc <HAL_DMA_Abort_IT>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d017      	beq.n	8004f96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	e00f      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9a0 	bl	80052bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00b      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f99c 	bl	80052bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e007      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f998 	bl	80052bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f94:	e17e      	b.n	8005294 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f96:	bf00      	nop
    return;
 8004f98:	e17c      	b.n	8005294 <HAL_UART_IRQHandler+0x590>
 8004f9a:	bf00      	nop
 8004f9c:	04000120 	.word	0x04000120
 8004fa0:	08005bb7 	.word	0x08005bb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 814c 	bne.w	8005246 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8145 	beq.w	8005246 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 813e 	beq.w	8005246 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2210      	movs	r2, #16
 8004fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	f040 80b6 	bne.w	800514e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8150 	beq.w	8005298 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005002:	429a      	cmp	r2, r3
 8005004:	f080 8148 	bcs.w	8005298 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501c:	f000 8086 	beq.w	800512c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800504a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800504e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1da      	bne.n	8005020 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800507a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3308      	adds	r3, #8
 800508a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800508e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e1      	bne.n	800506a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3308      	adds	r3, #8
 80050ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e3      	bne.n	80050a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fc:	f023 0310 	bic.w	r3, r3, #16
 8005100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005110:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005114:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800511c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e4      	bne.n	80050ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	4618      	mov	r0, r3
 8005128:	f7fc fad8 	bl	80016dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800513e:	b29b      	uxth	r3, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	b29b      	uxth	r3, r3
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8c2 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800514c:	e0a4      	b.n	8005298 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515a:	b29b      	uxth	r3, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 8096 	beq.w	800529c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8091 	beq.w	800529c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800518e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800519c:	647b      	str	r3, [r7, #68]	; 0x44
 800519e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e4      	bne.n	800517a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	623b      	str	r3, [r7, #32]
   return(result);
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051d4:	633a      	str	r2, [r7, #48]	; 0x30
 80051d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	60fb      	str	r3, [r7, #12]
   return(result);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0310 	bic.w	r3, r3, #16
 8005210:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	69fa      	ldr	r2, [r7, #28]
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	617b      	str	r3, [r7, #20]
   return(result);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e4      	bne.n	80051fc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f846 	bl	80052d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005244:	e02a      	b.n	800529c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005262:	2b00      	cmp	r3, #0
 8005264:	d01c      	beq.n	80052a0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
    }
    return;
 800526e:	e017      	b.n	80052a0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <HAL_UART_IRQHandler+0x59e>
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 fcaa 	bl	8005be2 <UART_EndTransmit_IT>
    return;
 800528e:	e008      	b.n	80052a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8005290:	bf00      	nop
 8005292:	e006      	b.n	80052a2 <HAL_UART_IRQHandler+0x59e>
    return;
 8005294:	bf00      	nop
 8005296:	e004      	b.n	80052a2 <HAL_UART_IRQHandler+0x59e>
      return;
 8005298:	bf00      	nop
 800529a:	e002      	b.n	80052a2 <HAL_UART_IRQHandler+0x59e>
      return;
 800529c:	bf00      	nop
 800529e:	e000      	b.n	80052a2 <HAL_UART_IRQHandler+0x59e>
    return;
 80052a0:	bf00      	nop
  }

}
 80052a2:	37e8      	adds	r7, #232	; 0xe8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4ba6      	ldr	r3, [pc, #664]	; (80055ac <UART_SetConfig+0x2c4>)
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6812      	ldr	r2, [r2, #0]
 800531a:	6979      	ldr	r1, [r7, #20]
 800531c:	430b      	orrs	r3, r1
 800531e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a94      	ldr	r2, [pc, #592]	; (80055b0 <UART_SetConfig+0x2c8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d120      	bne.n	80053a6 <UART_SetConfig+0xbe>
 8005364:	4b93      	ldr	r3, [pc, #588]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b03      	cmp	r3, #3
 8005370:	d816      	bhi.n	80053a0 <UART_SetConfig+0xb8>
 8005372:	a201      	add	r2, pc, #4	; (adr r2, 8005378 <UART_SetConfig+0x90>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	08005389 	.word	0x08005389
 800537c:	08005395 	.word	0x08005395
 8005380:	0800538f 	.word	0x0800538f
 8005384:	0800539b 	.word	0x0800539b
 8005388:	2301      	movs	r3, #1
 800538a:	77fb      	strb	r3, [r7, #31]
 800538c:	e150      	b.n	8005630 <UART_SetConfig+0x348>
 800538e:	2302      	movs	r3, #2
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e14d      	b.n	8005630 <UART_SetConfig+0x348>
 8005394:	2304      	movs	r3, #4
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e14a      	b.n	8005630 <UART_SetConfig+0x348>
 800539a:	2308      	movs	r3, #8
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e147      	b.n	8005630 <UART_SetConfig+0x348>
 80053a0:	2310      	movs	r3, #16
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e144      	b.n	8005630 <UART_SetConfig+0x348>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a83      	ldr	r2, [pc, #524]	; (80055b8 <UART_SetConfig+0x2d0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d132      	bne.n	8005416 <UART_SetConfig+0x12e>
 80053b0:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <UART_SetConfig+0x2cc>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d828      	bhi.n	8005410 <UART_SetConfig+0x128>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0xdc>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	08005411 	.word	0x08005411
 80053cc:	08005411 	.word	0x08005411
 80053d0:	08005411 	.word	0x08005411
 80053d4:	08005405 	.word	0x08005405
 80053d8:	08005411 	.word	0x08005411
 80053dc:	08005411 	.word	0x08005411
 80053e0:	08005411 	.word	0x08005411
 80053e4:	080053ff 	.word	0x080053ff
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005411 	.word	0x08005411
 80053f4:	0800540b 	.word	0x0800540b
 80053f8:	2300      	movs	r3, #0
 80053fa:	77fb      	strb	r3, [r7, #31]
 80053fc:	e118      	b.n	8005630 <UART_SetConfig+0x348>
 80053fe:	2302      	movs	r3, #2
 8005400:	77fb      	strb	r3, [r7, #31]
 8005402:	e115      	b.n	8005630 <UART_SetConfig+0x348>
 8005404:	2304      	movs	r3, #4
 8005406:	77fb      	strb	r3, [r7, #31]
 8005408:	e112      	b.n	8005630 <UART_SetConfig+0x348>
 800540a:	2308      	movs	r3, #8
 800540c:	77fb      	strb	r3, [r7, #31]
 800540e:	e10f      	b.n	8005630 <UART_SetConfig+0x348>
 8005410:	2310      	movs	r3, #16
 8005412:	77fb      	strb	r3, [r7, #31]
 8005414:	e10c      	b.n	8005630 <UART_SetConfig+0x348>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a68      	ldr	r2, [pc, #416]	; (80055bc <UART_SetConfig+0x2d4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d120      	bne.n	8005462 <UART_SetConfig+0x17a>
 8005420:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800542a:	2b30      	cmp	r3, #48	; 0x30
 800542c:	d013      	beq.n	8005456 <UART_SetConfig+0x16e>
 800542e:	2b30      	cmp	r3, #48	; 0x30
 8005430:	d814      	bhi.n	800545c <UART_SetConfig+0x174>
 8005432:	2b20      	cmp	r3, #32
 8005434:	d009      	beq.n	800544a <UART_SetConfig+0x162>
 8005436:	2b20      	cmp	r3, #32
 8005438:	d810      	bhi.n	800545c <UART_SetConfig+0x174>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d002      	beq.n	8005444 <UART_SetConfig+0x15c>
 800543e:	2b10      	cmp	r3, #16
 8005440:	d006      	beq.n	8005450 <UART_SetConfig+0x168>
 8005442:	e00b      	b.n	800545c <UART_SetConfig+0x174>
 8005444:	2300      	movs	r3, #0
 8005446:	77fb      	strb	r3, [r7, #31]
 8005448:	e0f2      	b.n	8005630 <UART_SetConfig+0x348>
 800544a:	2302      	movs	r3, #2
 800544c:	77fb      	strb	r3, [r7, #31]
 800544e:	e0ef      	b.n	8005630 <UART_SetConfig+0x348>
 8005450:	2304      	movs	r3, #4
 8005452:	77fb      	strb	r3, [r7, #31]
 8005454:	e0ec      	b.n	8005630 <UART_SetConfig+0x348>
 8005456:	2308      	movs	r3, #8
 8005458:	77fb      	strb	r3, [r7, #31]
 800545a:	e0e9      	b.n	8005630 <UART_SetConfig+0x348>
 800545c:	2310      	movs	r3, #16
 800545e:	77fb      	strb	r3, [r7, #31]
 8005460:	e0e6      	b.n	8005630 <UART_SetConfig+0x348>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <UART_SetConfig+0x2d8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d120      	bne.n	80054ae <UART_SetConfig+0x1c6>
 800546c:	4b51      	ldr	r3, [pc, #324]	; (80055b4 <UART_SetConfig+0x2cc>)
 800546e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005476:	2bc0      	cmp	r3, #192	; 0xc0
 8005478:	d013      	beq.n	80054a2 <UART_SetConfig+0x1ba>
 800547a:	2bc0      	cmp	r3, #192	; 0xc0
 800547c:	d814      	bhi.n	80054a8 <UART_SetConfig+0x1c0>
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d009      	beq.n	8005496 <UART_SetConfig+0x1ae>
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d810      	bhi.n	80054a8 <UART_SetConfig+0x1c0>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <UART_SetConfig+0x1a8>
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d006      	beq.n	800549c <UART_SetConfig+0x1b4>
 800548e:	e00b      	b.n	80054a8 <UART_SetConfig+0x1c0>
 8005490:	2300      	movs	r3, #0
 8005492:	77fb      	strb	r3, [r7, #31]
 8005494:	e0cc      	b.n	8005630 <UART_SetConfig+0x348>
 8005496:	2302      	movs	r3, #2
 8005498:	77fb      	strb	r3, [r7, #31]
 800549a:	e0c9      	b.n	8005630 <UART_SetConfig+0x348>
 800549c:	2304      	movs	r3, #4
 800549e:	77fb      	strb	r3, [r7, #31]
 80054a0:	e0c6      	b.n	8005630 <UART_SetConfig+0x348>
 80054a2:	2308      	movs	r3, #8
 80054a4:	77fb      	strb	r3, [r7, #31]
 80054a6:	e0c3      	b.n	8005630 <UART_SetConfig+0x348>
 80054a8:	2310      	movs	r3, #16
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e0c0      	b.n	8005630 <UART_SetConfig+0x348>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a44      	ldr	r2, [pc, #272]	; (80055c4 <UART_SetConfig+0x2dc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d125      	bne.n	8005504 <UART_SetConfig+0x21c>
 80054b8:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <UART_SetConfig+0x2cc>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c6:	d017      	beq.n	80054f8 <UART_SetConfig+0x210>
 80054c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054cc:	d817      	bhi.n	80054fe <UART_SetConfig+0x216>
 80054ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d2:	d00b      	beq.n	80054ec <UART_SetConfig+0x204>
 80054d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d8:	d811      	bhi.n	80054fe <UART_SetConfig+0x216>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <UART_SetConfig+0x1fe>
 80054de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e2:	d006      	beq.n	80054f2 <UART_SetConfig+0x20a>
 80054e4:	e00b      	b.n	80054fe <UART_SetConfig+0x216>
 80054e6:	2300      	movs	r3, #0
 80054e8:	77fb      	strb	r3, [r7, #31]
 80054ea:	e0a1      	b.n	8005630 <UART_SetConfig+0x348>
 80054ec:	2302      	movs	r3, #2
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e09e      	b.n	8005630 <UART_SetConfig+0x348>
 80054f2:	2304      	movs	r3, #4
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e09b      	b.n	8005630 <UART_SetConfig+0x348>
 80054f8:	2308      	movs	r3, #8
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e098      	b.n	8005630 <UART_SetConfig+0x348>
 80054fe:	2310      	movs	r3, #16
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e095      	b.n	8005630 <UART_SetConfig+0x348>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2f      	ldr	r2, [pc, #188]	; (80055c8 <UART_SetConfig+0x2e0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d125      	bne.n	800555a <UART_SetConfig+0x272>
 800550e:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005518:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800551c:	d017      	beq.n	800554e <UART_SetConfig+0x266>
 800551e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005522:	d817      	bhi.n	8005554 <UART_SetConfig+0x26c>
 8005524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005528:	d00b      	beq.n	8005542 <UART_SetConfig+0x25a>
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800552e:	d811      	bhi.n	8005554 <UART_SetConfig+0x26c>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <UART_SetConfig+0x254>
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d006      	beq.n	8005548 <UART_SetConfig+0x260>
 800553a:	e00b      	b.n	8005554 <UART_SetConfig+0x26c>
 800553c:	2301      	movs	r3, #1
 800553e:	77fb      	strb	r3, [r7, #31]
 8005540:	e076      	b.n	8005630 <UART_SetConfig+0x348>
 8005542:	2302      	movs	r3, #2
 8005544:	77fb      	strb	r3, [r7, #31]
 8005546:	e073      	b.n	8005630 <UART_SetConfig+0x348>
 8005548:	2304      	movs	r3, #4
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e070      	b.n	8005630 <UART_SetConfig+0x348>
 800554e:	2308      	movs	r3, #8
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e06d      	b.n	8005630 <UART_SetConfig+0x348>
 8005554:	2310      	movs	r3, #16
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e06a      	b.n	8005630 <UART_SetConfig+0x348>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1b      	ldr	r2, [pc, #108]	; (80055cc <UART_SetConfig+0x2e4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d138      	bne.n	80055d6 <UART_SetConfig+0x2ee>
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <UART_SetConfig+0x2cc>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800556e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005572:	d017      	beq.n	80055a4 <UART_SetConfig+0x2bc>
 8005574:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005578:	d82a      	bhi.n	80055d0 <UART_SetConfig+0x2e8>
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557e:	d00b      	beq.n	8005598 <UART_SetConfig+0x2b0>
 8005580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005584:	d824      	bhi.n	80055d0 <UART_SetConfig+0x2e8>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <UART_SetConfig+0x2aa>
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d006      	beq.n	800559e <UART_SetConfig+0x2b6>
 8005590:	e01e      	b.n	80055d0 <UART_SetConfig+0x2e8>
 8005592:	2300      	movs	r3, #0
 8005594:	77fb      	strb	r3, [r7, #31]
 8005596:	e04b      	b.n	8005630 <UART_SetConfig+0x348>
 8005598:	2302      	movs	r3, #2
 800559a:	77fb      	strb	r3, [r7, #31]
 800559c:	e048      	b.n	8005630 <UART_SetConfig+0x348>
 800559e:	2304      	movs	r3, #4
 80055a0:	77fb      	strb	r3, [r7, #31]
 80055a2:	e045      	b.n	8005630 <UART_SetConfig+0x348>
 80055a4:	2308      	movs	r3, #8
 80055a6:	77fb      	strb	r3, [r7, #31]
 80055a8:	e042      	b.n	8005630 <UART_SetConfig+0x348>
 80055aa:	bf00      	nop
 80055ac:	efff69f3 	.word	0xefff69f3
 80055b0:	40011000 	.word	0x40011000
 80055b4:	40023800 	.word	0x40023800
 80055b8:	40004400 	.word	0x40004400
 80055bc:	40004800 	.word	0x40004800
 80055c0:	40004c00 	.word	0x40004c00
 80055c4:	40005000 	.word	0x40005000
 80055c8:	40011400 	.word	0x40011400
 80055cc:	40007800 	.word	0x40007800
 80055d0:	2310      	movs	r3, #16
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e02c      	b.n	8005630 <UART_SetConfig+0x348>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a72      	ldr	r2, [pc, #456]	; (80057a4 <UART_SetConfig+0x4bc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d125      	bne.n	800562c <UART_SetConfig+0x344>
 80055e0:	4b71      	ldr	r3, [pc, #452]	; (80057a8 <UART_SetConfig+0x4c0>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80055ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055ee:	d017      	beq.n	8005620 <UART_SetConfig+0x338>
 80055f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055f4:	d817      	bhi.n	8005626 <UART_SetConfig+0x33e>
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	d00b      	beq.n	8005614 <UART_SetConfig+0x32c>
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	d811      	bhi.n	8005626 <UART_SetConfig+0x33e>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <UART_SetConfig+0x326>
 8005606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800560a:	d006      	beq.n	800561a <UART_SetConfig+0x332>
 800560c:	e00b      	b.n	8005626 <UART_SetConfig+0x33e>
 800560e:	2300      	movs	r3, #0
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e00d      	b.n	8005630 <UART_SetConfig+0x348>
 8005614:	2302      	movs	r3, #2
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e00a      	b.n	8005630 <UART_SetConfig+0x348>
 800561a:	2304      	movs	r3, #4
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e007      	b.n	8005630 <UART_SetConfig+0x348>
 8005620:	2308      	movs	r3, #8
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e004      	b.n	8005630 <UART_SetConfig+0x348>
 8005626:	2310      	movs	r3, #16
 8005628:	77fb      	strb	r3, [r7, #31]
 800562a:	e001      	b.n	8005630 <UART_SetConfig+0x348>
 800562c:	2310      	movs	r3, #16
 800562e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	d15b      	bne.n	80056f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800563a:	7ffb      	ldrb	r3, [r7, #31]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d828      	bhi.n	8005692 <UART_SetConfig+0x3aa>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x360>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fd fbae 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8005670:	61b8      	str	r0, [r7, #24]
        break;
 8005672:	e013      	b.n	800569c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fd fbbe 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8005678:	61b8      	str	r0, [r7, #24]
        break;
 800567a:	e00f      	b.n	800569c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b4b      	ldr	r3, [pc, #300]	; (80057ac <UART_SetConfig+0x4c4>)
 800567e:	61bb      	str	r3, [r7, #24]
        break;
 8005680:	e00c      	b.n	800569c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fd fa91 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8005686:	61b8      	str	r0, [r7, #24]
        break;
 8005688:	e008      	b.n	800569c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	61bb      	str	r3, [r7, #24]
        break;
 8005690:	e004      	b.n	800569c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	77bb      	strb	r3, [r7, #30]
        break;
 800569a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d074      	beq.n	800578c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	005a      	lsls	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d916      	bls.n	80056ec <UART_SetConfig+0x404>
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d212      	bcs.n	80056ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f023 030f 	bic.w	r3, r3, #15
 80056ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	b29a      	uxth	r2, r3
 80056dc:	89fb      	ldrh	r3, [r7, #14]
 80056de:	4313      	orrs	r3, r2
 80056e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	89fa      	ldrh	r2, [r7, #14]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	e04f      	b.n	800578c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	77bb      	strb	r3, [r7, #30]
 80056f0:	e04c      	b.n	800578c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f2:	7ffb      	ldrb	r3, [r7, #31]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d828      	bhi.n	800574a <UART_SetConfig+0x462>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x418>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	0800574b 	.word	0x0800574b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fd fb52 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8005728:	61b8      	str	r0, [r7, #24]
        break;
 800572a:	e013      	b.n	8005754 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fd fb62 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8005730:	61b8      	str	r0, [r7, #24]
        break;
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <UART_SetConfig+0x4c4>)
 8005736:	61bb      	str	r3, [r7, #24]
        break;
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fd fa35 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 800573e:	61b8      	str	r0, [r7, #24]
        break;
 8005740:	e008      	b.n	8005754 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	61bb      	str	r3, [r7, #24]
        break;
 8005748:	e004      	b.n	8005754 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	77bb      	strb	r3, [r7, #30]
        break;
 8005752:	bf00      	nop
    }

    if (pclk != 0U)
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d909      	bls.n	8005788 <UART_SetConfig+0x4a0>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d205      	bcs.n	8005788 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005798:	7fbb      	ldrb	r3, [r7, #30]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	40007c00 	.word	0x40007c00
 80057a8:	40023800 	.word	0x40023800
 80057ac:	00f42400 	.word	0x00f42400

080057b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	f003 0310 	and.w	r3, r3, #16
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	430a      	orrs	r2, r1
 8005860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01a      	beq.n	80058c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ae:	d10a      	bne.n	80058c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	605a      	str	r2, [r3, #4]
  }
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005904:	f7fb fdd8 	bl	80014b8 <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d10e      	bne.n	8005936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f81b 	bl	8005962 <UART_WaitOnFlagUntilTimeout>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e011      	b.n	800595a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b09c      	sub	sp, #112	; 0x70
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005972:	e0a7      	b.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597a:	f000 80a3 	beq.w	8005ac4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800597e:	f7fb fd9b 	bl	80014b8 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800598a:	429a      	cmp	r2, r3
 800598c:	d302      	bcc.n	8005994 <UART_WaitOnFlagUntilTimeout+0x32>
 800598e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005990:	2b00      	cmp	r3, #0
 8005992:	d13f      	bne.n	8005a14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	e853 3f00 	ldrex	r3, [r3]
 80059a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059a8:	667b      	str	r3, [r7, #100]	; 0x64
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059ba:	e841 2300 	strex	r3, r2, [r1]
 80059be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e6      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	663b      	str	r3, [r7, #96]	; 0x60
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3308      	adds	r3, #8
 80059e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1e5      	bne.n	80059c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e068      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d050      	beq.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a30:	d148      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e6      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3308      	adds	r3, #8
 8005a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f023 0301 	bic.w	r3, r3, #1
 8005a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a8e:	623a      	str	r2, [r7, #32]
 8005a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	69f9      	ldr	r1, [r7, #28]
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e010      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69da      	ldr	r2, [r3, #28]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4013      	ands	r3, r2
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bf0c      	ite	eq
 8005ad4:	2301      	moveq	r3, #1
 8005ad6:	2300      	movne	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	f43f af48 	beq.w	8005974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3770      	adds	r7, #112	; 0x70
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b095      	sub	sp, #84	; 0x54
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b14:	643b      	str	r3, [r7, #64]	; 0x40
 8005b16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e6      	bne.n	8005af6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	e853 3f00 	ldrex	r3, [r3]
 8005b36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b50:	e841 2300 	strex	r3, r2, [r1]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1e5      	bne.n	8005b28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d118      	bne.n	8005b96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f023 0310 	bic.w	r3, r3, #16
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6979      	ldr	r1, [r7, #20]
 8005b88:	69ba      	ldr	r2, [r7, #24]
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e6      	bne.n	8005b64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005baa:	bf00      	nop
 8005bac:	3754      	adds	r7, #84	; 0x54
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff fb71 	bl	80052bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b088      	sub	sp, #32
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	e853 3f00 	ldrex	r3, [r3]
 8005bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6979      	ldr	r1, [r7, #20]
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	e841 2300 	strex	r3, r2, [r1]
 8005c14:	613b      	str	r3, [r7, #16]
   return(result);
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1e6      	bne.n	8005bea <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fb3d 	bl	80052a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2e:	bf00      	nop
 8005c30:	3720      	adds	r7, #32
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c38:	b084      	sub	sp, #16
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	f107 001c 	add.w	r0, r7, #28
 8005c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d120      	bne.n	8005c92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	4b20      	ldr	r3, [pc, #128]	; (8005ce4 <USB_CoreInit+0xac>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d105      	bne.n	8005c86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fa96 	bl	80061b8 <USB_CoreReset>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
 8005c90:	e010      	b.n	8005cb4 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fa8a 	bl	80061b8 <USB_CoreReset>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10b      	bne.n	8005cd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f043 0206 	orr.w	r2, r3, #6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f043 0220 	orr.w	r2, r3, #32
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cde:	b004      	add	sp, #16
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	ffbdffbf 	.word	0xffbdffbf

08005ce8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f023 0201 	bic.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d115      	bne.n	8005d58 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f7fb fbc9 	bl	80014d0 <HAL_Delay>
      ms++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3301      	adds	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fa29 	bl	800619c <USB_GetMode>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d01e      	beq.n	8005d8e <USB_SetCurrentMode+0x84>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b31      	cmp	r3, #49	; 0x31
 8005d54:	d9f0      	bls.n	8005d38 <USB_SetCurrentMode+0x2e>
 8005d56:	e01a      	b.n	8005d8e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d115      	bne.n	8005d8a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f7fb fbb0 	bl	80014d0 <HAL_Delay>
      ms++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa10 	bl	800619c <USB_GetMode>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <USB_SetCurrentMode+0x84>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b31      	cmp	r3, #49	; 0x31
 8005d86:	d9f0      	bls.n	8005d6a <USB_SetCurrentMode+0x60>
 8005d88:	e001      	b.n	8005d8e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e005      	b.n	8005d9a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b32      	cmp	r3, #50	; 0x32
 8005d92:	d101      	bne.n	8005d98 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e000      	b.n	8005d9a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005da4:	b084      	sub	sp, #16
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b086      	sub	sp, #24
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	e009      	b.n	8005dd8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	3340      	adds	r3, #64	; 0x40
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b0e      	cmp	r3, #14
 8005ddc:	d9f2      	bls.n	8005dc4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11c      	bne.n	8005e1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	e005      	b.n	8005e2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	461a      	mov	r2, r3
 8005e46:	680b      	ldr	r3, [r1, #0]
 8005e48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10c      	bne.n	8005e6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d104      	bne.n	8005e60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e56:	2100      	movs	r1, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f965 	bl	8006128 <USB_SetDevSpeed>
 8005e5e:	e008      	b.n	8005e72 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e60:	2101      	movs	r1, #1
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f960 	bl	8006128 <USB_SetDevSpeed>
 8005e68:	e003      	b.n	8005e72 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f95b 	bl	8006128 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e72:	2110      	movs	r1, #16
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f8f3 	bl	8006060 <USB_FlushTxFifo>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f91f 	bl	80060c8 <USB_FlushRxFifo>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	e043      	b.n	8005f46 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	015a      	lsls	r2, r3, #5
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed4:	d118      	bne.n	8005f08 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	e013      	b.n	8005f1a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efe:	461a      	mov	r2, r3
 8005f00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e008      	b.n	8005f1a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	461a      	mov	r2, r3
 8005f16:	2300      	movs	r3, #0
 8005f18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	461a      	mov	r2, r3
 8005f28:	2300      	movs	r3, #0
 8005f2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	3301      	adds	r3, #1
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d3b7      	bcc.n	8005ebe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e043      	b.n	8005fdc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f6a:	d118      	bne.n	8005f9e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f84:	6013      	str	r3, [r2, #0]
 8005f86:	e013      	b.n	8005fb0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e008      	b.n	8005fb0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005faa:	461a      	mov	r2, r3
 8005fac:	2300      	movs	r3, #0
 8005fae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d3b7      	bcc.n	8005f54 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006004:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	2b00      	cmp	r3, #0
 800600a:	d105      	bne.n	8006018 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	f043 0210 	orr.w	r2, r3, #16
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <USB_DevInit+0x2b4>)
 800601e:	4313      	orrs	r3, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f043 0208 	orr.w	r2, r3, #8
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699a      	ldr	r2, [r3, #24]
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <USB_DevInit+0x2b8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006054:	b004      	add	sp, #16
 8006056:	4770      	bx	lr
 8006058:	803c3800 	.word	0x803c3800
 800605c:	40000004 	.word	0x40000004

08006060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	3301      	adds	r3, #1
 8006072:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4a13      	ldr	r2, [pc, #76]	; (80060c4 <USB_FlushTxFifo+0x64>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e01b      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	daf2      	bge.n	800606e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	019b      	lsls	r3, r3, #6
 8006090:	f043 0220 	orr.w	r2, r3, #32
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a08      	ldr	r2, [pc, #32]	; (80060c4 <USB_FlushTxFifo+0x64>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d901      	bls.n	80060aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d0f0      	beq.n	8006098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	00030d40 	.word	0x00030d40

080060c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	3301      	adds	r3, #1
 80060d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a11      	ldr	r2, [pc, #68]	; (8006124 <USB_FlushRxFifo+0x5c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e018      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	daf2      	bge.n	80060d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2210      	movs	r2, #16
 80060f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3301      	adds	r3, #1
 80060fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <USB_FlushRxFifo+0x5c>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e006      	b.n	8006118 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b10      	cmp	r3, #16
 8006114:	d0f0      	beq.n	80060f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	00030d40 	.word	0x00030d40

08006128 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	68f9      	ldr	r1, [r7, #12]
 8006144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006148:	4313      	orrs	r3, r2
 800614a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006174:	f023 0303 	bic.w	r3, r3, #3
 8006178:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006188:	f043 0302 	orr.w	r3, r3, #2
 800618c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <USB_CoreReset+0x64>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d901      	bls.n	80061d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e01b      	b.n	800620e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	daf2      	bge.n	80061c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f043 0201 	orr.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <USB_CoreReset+0x64>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d901      	bls.n	8006200 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e006      	b.n	800620e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b01      	cmp	r3, #1
 800620a:	d0f0      	beq.n	80061ee <USB_CoreReset+0x36>

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	00030d40 	.word	0x00030d40

08006220 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800622e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006232:	2b84      	cmp	r3, #132	; 0x84
 8006234:	d005      	beq.n	8006242 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006236:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	3303      	adds	r3, #3
 8006240:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006254:	f000 fede 	bl	8007014 <vTaskStartScheduler>
  
  return osOK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	bd80      	pop	{r7, pc}

0800625e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800625e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006260:	b089      	sub	sp, #36	; 0x24
 8006262:	af04      	add	r7, sp, #16
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <osThreadCreate+0x54>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01c      	beq.n	80062b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685c      	ldr	r4, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691e      	ldr	r6, [r3, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff ffc8 	bl	8006220 <makeFreeRtosPriority>
 8006290:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800629a:	9202      	str	r2, [sp, #8]
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	9100      	str	r1, [sp, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	4632      	mov	r2, r6
 80062a4:	4629      	mov	r1, r5
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 fce2 	bl	8006c70 <xTaskCreateStatic>
 80062ac:	4603      	mov	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e01c      	b.n	80062ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685c      	ldr	r4, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7ff ffaa 	bl	8006220 <makeFreeRtosPriority>
 80062cc:	4602      	mov	r2, r0
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	9200      	str	r2, [sp, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	4632      	mov	r2, r6
 80062da:	4629      	mov	r1, r5
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 fd2a 	bl	8006d36 <xTaskCreate>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d001      	beq.n	80062ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <osDelay+0x16>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	e000      	b.n	800630e <osDelay+0x18>
 800630c:	2301      	movs	r3, #1
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fe4a 	bl	8006fa8 <vTaskDelay>
  
  return osOK;
 8006314:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800631e:	b590      	push	{r4, r7, lr}
 8006320:	b085      	sub	sp, #20
 8006322:	af02      	add	r7, sp, #8
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d011      	beq.n	8006354 <osMessageCreate+0x36>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6859      	ldr	r1, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	2400      	movs	r4, #0
 800634a:	9400      	str	r4, [sp, #0]
 800634c:	f000 f92e 	bl	80065ac <xQueueGenericCreateStatic>
 8006350:	4603      	mov	r3, r0
 8006352:	e008      	b.n	8006366 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	4619      	mov	r1, r3
 8006360:	f000 f9a6 	bl	80066b0 <xQueueGenericCreate>
 8006364:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}

0800636e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f103 0208 	add.w	r2, r3, #8
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f04f 32ff 	mov.w	r2, #4294967295
 8006386:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f103 0208 	add.w	r2, r3, #8
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f103 0208 	add.w	r2, r3, #8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006426:	d103      	bne.n	8006430 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	e00c      	b.n	800644a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3308      	adds	r3, #8
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e002      	b.n	800643e <vListInsert+0x2e>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	429a      	cmp	r2, r3
 8006448:	d2f6      	bcs.n	8006438 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	601a      	str	r2, [r3, #0]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	6892      	ldr	r2, [r2, #8]
 8006498:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	6852      	ldr	r2, [r2, #4]
 80064a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d103      	bne.n	80064b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	1e5a      	subs	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
	...

080064d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10c      	bne.n	8006506 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f0:	b672      	cpsid	i
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	b662      	cpsie	i
 8006500:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006506:	f001 fbb1 	bl	8007c6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	441a      	add	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	3b01      	subs	r3, #1
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800653c:	fb01 f303 	mul.w	r3, r1, r3
 8006540:	441a      	add	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	22ff      	movs	r2, #255	; 0xff
 800654a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	22ff      	movs	r2, #255	; 0xff
 8006552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d114      	bne.n	8006586 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d01a      	beq.n	800659a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3310      	adds	r3, #16
 8006568:	4618      	mov	r0, r3
 800656a:	f000 ffa1 	bl	80074b0 <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d012      	beq.n	800659a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006574:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <xQueueGenericReset+0xd0>)
 8006576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	e009      	b.n	800659a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3310      	adds	r3, #16
 800658a:	4618      	mov	r0, r3
 800658c:	f7ff feef 	bl	800636e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3324      	adds	r3, #36	; 0x24
 8006594:	4618      	mov	r0, r3
 8006596:	f7ff feea 	bl	800636e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800659a:	f001 fb9b 	bl	8007cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800659e:	2301      	movs	r3, #1
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	e000ed04 	.word	0xe000ed04

080065ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08e      	sub	sp, #56	; 0x38
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
 80065b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	b672      	cpsid	i
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	b662      	cpsie	i
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10c      	bne.n	80065fa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	b672      	cpsid	i
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	b662      	cpsie	i
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <xQueueGenericCreateStatic+0x5a>
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <xQueueGenericCreateStatic+0x5e>
 8006606:	2301      	movs	r3, #1
 8006608:	e000      	b.n	800660c <xQueueGenericCreateStatic+0x60>
 800660a:	2300      	movs	r3, #0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10c      	bne.n	800662a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	b672      	cpsid	i
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	b662      	cpsie	i
 8006624:	623b      	str	r3, [r7, #32]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <xQueueGenericCreateStatic+0x8a>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <xQueueGenericCreateStatic+0x8e>
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <xQueueGenericCreateStatic+0x90>
 800663a:	2300      	movs	r3, #0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10c      	bne.n	800665a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	b672      	cpsid	i
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	b662      	cpsie	i
 8006654:	61fb      	str	r3, [r7, #28]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800665a:	2348      	movs	r3, #72	; 0x48
 800665c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2b48      	cmp	r3, #72	; 0x48
 8006662:	d00c      	beq.n	800667e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	b672      	cpsid	i
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	b662      	cpsie	i
 8006678:	61bb      	str	r3, [r7, #24]
}
 800667a:	bf00      	nop
 800667c:	e7fe      	b.n	800667c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800667e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00d      	beq.n	80066a6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006692:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	4613      	mov	r3, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f847 	bl	8006734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3730      	adds	r7, #48	; 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	; 0x28
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10c      	bne.n	80066de <xQueueGenericCreate+0x2e>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	b672      	cpsid	i
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	b662      	cpsie	i
 80066d8:	613b      	str	r3, [r7, #16]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e004      	b.n	80066f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	fb02 f303 	mul.w	r3, r2, r3
 80066f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	3348      	adds	r3, #72	; 0x48
 80066f8:	4618      	mov	r0, r3
 80066fa:	f001 fbe3 	bl	8007ec4 <pvPortMalloc>
 80066fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d011      	beq.n	800672a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	3348      	adds	r3, #72	; 0x48
 800670e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006718:	79fa      	ldrb	r2, [r7, #7]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	4613      	mov	r3, r2
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	68b9      	ldr	r1, [r7, #8]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 f805 	bl	8006734 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800672a:	69bb      	ldr	r3, [r7, #24]
	}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d103      	bne.n	8006750 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e002      	b.n	8006756 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006762:	2101      	movs	r1, #1
 8006764:	69b8      	ldr	r0, [r7, #24]
 8006766:	f7ff feb7 	bl	80064d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800676a:	bf00      	nop
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b08e      	sub	sp, #56	; 0x38
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10c      	bne.n	80067a4 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <xQueueGenericSendFromISR+0x40>
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <xQueueGenericSendFromISR+0x44>
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <xQueueGenericSendFromISR+0x46>
 80067b6:	2300      	movs	r3, #0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d10c      	bne.n	80067d6 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80067bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c0:	b672      	cpsid	i
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	b662      	cpsie	i
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d103      	bne.n	80067e4 <xQueueGenericSendFromISR+0x72>
 80067dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <xQueueGenericSendFromISR+0x76>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e000      	b.n	80067ea <xQueueGenericSendFromISR+0x78>
 80067e8:	2300      	movs	r3, #0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	b672      	cpsid	i
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	b662      	cpsie	i
 8006802:	61fb      	str	r3, [r7, #28]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006808:	f001 fb18 	bl	8007e3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800680c:	f3ef 8211 	mrs	r2, BASEPRI
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	b672      	cpsid	i
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	b662      	cpsie	i
 8006824:	61ba      	str	r2, [r7, #24]
 8006826:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006828:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	429a      	cmp	r2, r3
 8006836:	d302      	bcc.n	800683e <xQueueGenericSendFromISR+0xcc>
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d12c      	bne.n	8006898 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 f917 	bl	8006a80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006852:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d112      	bne.n	8006882 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d016      	beq.n	8006892 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	3324      	adds	r3, #36	; 0x24
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fe21 	bl	80074b0 <xTaskRemoveFromEventList>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	e007      	b.n	8006892 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006882:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006886:	3301      	adds	r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	b25a      	sxtb	r2, r3
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006892:	2301      	movs	r3, #1
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006896:	e001      	b.n	800689c <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006898:	2300      	movs	r3, #0
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3738      	adds	r7, #56	; 0x38
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	; 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10c      	bne.n	80068e8 <xQueueReceive+0x34>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	b672      	cpsid	i
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	b662      	cpsie	i
 80068e2:	623b      	str	r3, [r7, #32]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <xQueueReceive+0x42>
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <xQueueReceive+0x46>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <xQueueReceive+0x48>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10c      	bne.n	800691a <xQueueReceive+0x66>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	b672      	cpsid	i
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	b662      	cpsie	i
 8006914:	61fb      	str	r3, [r7, #28]
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800691a:	f000 ff8d 	bl	8007838 <xTaskGetSchedulerState>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <xQueueReceive+0x76>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <xQueueReceive+0x7a>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <xQueueReceive+0x7c>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10c      	bne.n	800694e <xQueueReceive+0x9a>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	b672      	cpsid	i
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	b662      	cpsie	i
 8006948:	61bb      	str	r3, [r7, #24]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800694e:	f001 f98d 	bl	8007c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01f      	beq.n	800699e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006962:	f000 f8f7 	bl	8006b54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1e5a      	subs	r2, r3, #1
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00f      	beq.n	8006996 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	3310      	adds	r3, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f000 fd98 	bl	80074b0 <xTaskRemoveFromEventList>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d007      	beq.n	8006996 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006986:	4b3d      	ldr	r3, [pc, #244]	; (8006a7c <xQueueReceive+0x1c8>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006996:	f001 f99d 	bl	8007cd4 <vPortExitCritical>
				return pdPASS;
 800699a:	2301      	movs	r3, #1
 800699c:	e069      	b.n	8006a72 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069a4:	f001 f996 	bl	8007cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e062      	b.n	8006a72 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069b2:	f107 0310 	add.w	r3, r7, #16
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fdde 	bl	8007578 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069bc:	2301      	movs	r3, #1
 80069be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069c0:	f001 f988 	bl	8007cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069c4:	f000 fb8a 	bl	80070dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069c8:	f001 f950 	bl	8007c6c <vPortEnterCritical>
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d8:	d103      	bne.n	80069e2 <xQueueReceive+0x12e>
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e8:	b25b      	sxtb	r3, r3
 80069ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ee:	d103      	bne.n	80069f8 <xQueueReceive+0x144>
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f8:	f001 f96c 	bl	8007cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069fc:	1d3a      	adds	r2, r7, #4
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	4611      	mov	r1, r2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 fdcd 	bl	80075a4 <xTaskCheckForTimeOut>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d123      	bne.n	8006a58 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a12:	f000 f917 	bl	8006c44 <prvIsQueueEmpty>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d017      	beq.n	8006a4c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1e:	3324      	adds	r3, #36	; 0x24
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	4611      	mov	r1, r2
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fd1d 	bl	8007464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2c:	f000 f8b8 	bl	8006ba0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a30:	f000 fb62 	bl	80070f8 <xTaskResumeAll>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d189      	bne.n	800694e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <xQueueReceive+0x1c8>)
 8006a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	e780      	b.n	800694e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4e:	f000 f8a7 	bl	8006ba0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a52:	f000 fb51 	bl	80070f8 <xTaskResumeAll>
 8006a56:	e77a      	b.n	800694e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a5a:	f000 f8a1 	bl	8006ba0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a5e:	f000 fb4b 	bl	80070f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a64:	f000 f8ee 	bl	8006c44 <prvIsQueueEmpty>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f43f af6f 	beq.w	800694e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3730      	adds	r7, #48	; 0x30
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10d      	bne.n	8006aba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d14d      	bne.n	8006b42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fee2 	bl	8007874 <xTaskPriorityDisinherit>
 8006ab0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	e043      	b.n	8006b42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d119      	bne.n	8006af4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6858      	ldr	r0, [r3, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	f001 fc0a 	bl	80082e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad8:	441a      	add	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d32b      	bcc.n	8006b42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	605a      	str	r2, [r3, #4]
 8006af2:	e026      	b.n	8006b42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	68d8      	ldr	r0, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	461a      	mov	r2, r3
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	f001 fbf0 	bl	80082e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	425b      	negs	r3, r3
 8006b0e:	441a      	add	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d207      	bcs.n	8006b30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b28:	425b      	negs	r3, r3
 8006b2a:	441a      	add	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d105      	bne.n	8006b42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006b4a:	697b      	ldr	r3, [r7, #20]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d018      	beq.n	8006b98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	441a      	add	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d303      	bcc.n	8006b88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68d9      	ldr	r1, [r3, #12]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	6838      	ldr	r0, [r7, #0]
 8006b94:	f001 fba6 	bl	80082e4 <memcpy>
	}
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ba8:	f001 f860 	bl	8007c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bb4:	e011      	b.n	8006bda <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d012      	beq.n	8006be4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3324      	adds	r3, #36	; 0x24
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fc74 	bl	80074b0 <xTaskRemoveFromEventList>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006bce:	f000 fd4f 	bl	8007670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dce9      	bgt.n	8006bb6 <prvUnlockQueue+0x16>
 8006be2:	e000      	b.n	8006be6 <prvUnlockQueue+0x46>
					break;
 8006be4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	22ff      	movs	r2, #255	; 0xff
 8006bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006bee:	f001 f871 	bl	8007cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bf2:	f001 f83b 	bl	8007c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bfc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bfe:	e011      	b.n	8006c24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fc4f 	bl	80074b0 <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006c18:	f000 fd2a 	bl	8007670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	dce9      	bgt.n	8006c00 <prvUnlockQueue+0x60>
 8006c2c:	e000      	b.n	8006c30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006c2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	22ff      	movs	r2, #255	; 0xff
 8006c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006c38:	f001 f84c 	bl	8007cd4 <vPortExitCritical>
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c4c:	f001 f80e 	bl	8007c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d102      	bne.n	8006c5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e001      	b.n	8006c62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c62:	f001 f837 	bl	8007cd4 <vPortExitCritical>

	return xReturn;
 8006c66:	68fb      	ldr	r3, [r7, #12]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08e      	sub	sp, #56	; 0x38
 8006c74:	af04      	add	r7, sp, #16
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10c      	bne.n	8006c9e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	b672      	cpsid	i
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	b662      	cpsie	i
 8006c98:	623b      	str	r3, [r7, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	e7fe      	b.n	8006c9c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10c      	bne.n	8006cbe <xTaskCreateStatic+0x4e>
	__asm volatile
 8006ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca8:	b672      	cpsid	i
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	b662      	cpsie	i
 8006cb8:	61fb      	str	r3, [r7, #28]
}
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006cbe:	2354      	movs	r3, #84	; 0x54
 8006cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b54      	cmp	r3, #84	; 0x54
 8006cc6:	d00c      	beq.n	8006ce2 <xTaskCreateStatic+0x72>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	b672      	cpsid	i
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	b662      	cpsie	i
 8006cdc:	61bb      	str	r3, [r7, #24]
}
 8006cde:	bf00      	nop
 8006ce0:	e7fe      	b.n	8006ce0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ce2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d01e      	beq.n	8006d28 <xTaskCreateStatic+0xb8>
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01b      	beq.n	8006d28 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d02:	2300      	movs	r3, #0
 8006d04:	9303      	str	r3, [sp, #12]
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	9302      	str	r3, [sp, #8]
 8006d0a:	f107 0314 	add.w	r3, r7, #20
 8006d0e:	9301      	str	r3, [sp, #4]
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	68b9      	ldr	r1, [r7, #8]
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f850 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d22:	f000 f8d7 	bl	8006ed4 <prvAddNewTaskToReadyList>
 8006d26:	e001      	b.n	8006d2c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d2c:	697b      	ldr	r3, [r7, #20]
	}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3728      	adds	r7, #40	; 0x28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b08c      	sub	sp, #48	; 0x30
 8006d3a:	af04      	add	r7, sp, #16
 8006d3c:	60f8      	str	r0, [r7, #12]
 8006d3e:	60b9      	str	r1, [r7, #8]
 8006d40:	603b      	str	r3, [r7, #0]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 f8ba 	bl	8007ec4 <pvPortMalloc>
 8006d50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00e      	beq.n	8006d76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d58:	2054      	movs	r0, #84	; 0x54
 8006d5a:	f001 f8b3 	bl	8007ec4 <pvPortMalloc>
 8006d5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d6c:	e005      	b.n	8006d7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f001 f972 	bl	8008058 <vPortFree>
 8006d74:	e001      	b.n	8006d7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	9302      	str	r3, [sp, #8]
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f80e 	bl	8006dc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006da4:	69f8      	ldr	r0, [r7, #28]
 8006da6:	f000 f895 	bl	8006ed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006daa:	2301      	movs	r3, #1
 8006dac:	61bb      	str	r3, [r7, #24]
 8006dae:	e002      	b.n	8006db6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006db0:	f04f 33ff 	mov.w	r3, #4294967295
 8006db4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006db6:	69bb      	ldr	r3, [r7, #24]
	}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006dd8:	440b      	add	r3, r1
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f023 0307 	bic.w	r3, r3, #7
 8006de6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	b672      	cpsid	i
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	b662      	cpsie	i
 8006e06:	617b      	str	r3, [r7, #20]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01f      	beq.n	8006e52 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
 8006e16:	e012      	b.n	8006e3e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	7819      	ldrb	r1, [r3, #0]
 8006e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	3334      	adds	r3, #52	; 0x34
 8006e28:	460a      	mov	r2, r1
 8006e2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d006      	beq.n	8006e46 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b0f      	cmp	r3, #15
 8006e42:	d9e9      	bls.n	8006e18 <prvInitialiseNewTask+0x58>
 8006e44:	e000      	b.n	8006e48 <prvInitialiseNewTask+0x88>
			{
				break;
 8006e46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e50:	e003      	b.n	8006e5a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	2b06      	cmp	r3, #6
 8006e5e:	d901      	bls.n	8006e64 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e60:	2306      	movs	r3, #6
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e6e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	2200      	movs	r2, #0
 8006e74:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	3304      	adds	r3, #4
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fa97 	bl	80063ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	3318      	adds	r3, #24
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fa92 	bl	80063ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	f1c3 0207 	rsb	r2, r3, #7
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006eae:	683a      	ldr	r2, [r7, #0]
 8006eb0:	68f9      	ldr	r1, [r7, #12]
 8006eb2:	69b8      	ldr	r0, [r7, #24]
 8006eb4:	f000 fdce 	bl	8007a54 <pxPortInitialiseStack>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eca:	bf00      	nop
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
	...

08006ed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006edc:	f000 fec6 	bl	8007c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ee0:	4b2a      	ldr	r3, [pc, #168]	; (8006f8c <prvAddNewTaskToReadyList+0xb8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a29      	ldr	r2, [pc, #164]	; (8006f8c <prvAddNewTaskToReadyList+0xb8>)
 8006ee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006eea:	4b29      	ldr	r3, [pc, #164]	; (8006f90 <prvAddNewTaskToReadyList+0xbc>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ef2:	4a27      	ldr	r2, [pc, #156]	; (8006f90 <prvAddNewTaskToReadyList+0xbc>)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ef8:	4b24      	ldr	r3, [pc, #144]	; (8006f8c <prvAddNewTaskToReadyList+0xb8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d110      	bne.n	8006f22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f00:	f000 fbda 	bl	80076b8 <prvInitialiseTaskLists>
 8006f04:	e00d      	b.n	8006f22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f06:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <prvAddNewTaskToReadyList+0xc0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d109      	bne.n	8006f22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f0e:	4b20      	ldr	r3, [pc, #128]	; (8006f90 <prvAddNewTaskToReadyList+0xbc>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d802      	bhi.n	8006f22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f1c:	4a1c      	ldr	r2, [pc, #112]	; (8006f90 <prvAddNewTaskToReadyList+0xbc>)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f22:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <prvAddNewTaskToReadyList+0xc4>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3301      	adds	r3, #1
 8006f28:	4a1b      	ldr	r2, [pc, #108]	; (8006f98 <prvAddNewTaskToReadyList+0xc4>)
 8006f2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	2201      	movs	r2, #1
 8006f32:	409a      	lsls	r2, r3
 8006f34:	4b19      	ldr	r3, [pc, #100]	; (8006f9c <prvAddNewTaskToReadyList+0xc8>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	4a18      	ldr	r2, [pc, #96]	; (8006f9c <prvAddNewTaskToReadyList+0xc8>)
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <prvAddNewTaskToReadyList+0xcc>)
 8006f4c:	441a      	add	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3304      	adds	r3, #4
 8006f52:	4619      	mov	r1, r3
 8006f54:	4610      	mov	r0, r2
 8006f56:	f7ff fa37 	bl	80063c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f5a:	f000 febb 	bl	8007cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <prvAddNewTaskToReadyList+0xc0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <prvAddNewTaskToReadyList+0xbc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d207      	bcs.n	8006f84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <prvAddNewTaskToReadyList+0xd0>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f84:	bf00      	nop
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000c40 	.word	0x20000c40
 8006f90:	20000b40 	.word	0x20000b40
 8006f94:	20000c4c 	.word	0x20000c4c
 8006f98:	20000c5c 	.word	0x20000c5c
 8006f9c:	20000c48 	.word	0x20000c48
 8006fa0:	20000b44 	.word	0x20000b44
 8006fa4:	e000ed04 	.word	0xe000ed04

08006fa8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d019      	beq.n	8006fee <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fba:	4b14      	ldr	r3, [pc, #80]	; (800700c <vTaskDelay+0x64>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00c      	beq.n	8006fdc <vTaskDelay+0x34>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	b672      	cpsid	i
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	b662      	cpsie	i
 8006fd6:	60bb      	str	r3, [r7, #8]
}
 8006fd8:	bf00      	nop
 8006fda:	e7fe      	b.n	8006fda <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006fdc:	f000 f87e 	bl	80070dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcd0 	bl	8007988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fe8:	f000 f886 	bl	80070f8 <xTaskResumeAll>
 8006fec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <vTaskDelay+0x68>)
 8006ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000c68 	.word	0x20000c68
 8007010:	e000ed04 	.word	0xe000ed04

08007014 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b08a      	sub	sp, #40	; 0x28
 8007018:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800701a:	2300      	movs	r3, #0
 800701c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007022:	463a      	mov	r2, r7
 8007024:	1d39      	adds	r1, r7, #4
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 fa6e 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	9202      	str	r2, [sp, #8]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	2300      	movs	r3, #0
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	460a      	mov	r2, r1
 8007042:	4920      	ldr	r1, [pc, #128]	; (80070c4 <vTaskStartScheduler+0xb0>)
 8007044:	4820      	ldr	r0, [pc, #128]	; (80070c8 <vTaskStartScheduler+0xb4>)
 8007046:	f7ff fe13 	bl	8006c70 <xTaskCreateStatic>
 800704a:	4603      	mov	r3, r0
 800704c:	4a1f      	ldr	r2, [pc, #124]	; (80070cc <vTaskStartScheduler+0xb8>)
 800704e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007050:	4b1e      	ldr	r3, [pc, #120]	; (80070cc <vTaskStartScheduler+0xb8>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e001      	b.n	8007062 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d118      	bne.n	800709a <vTaskStartScheduler+0x86>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	b672      	cpsid	i
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	b662      	cpsie	i
 800707c:	613b      	str	r3, [r7, #16]
}
 800707e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <vTaskStartScheduler+0xbc>)
 8007082:	f04f 32ff 	mov.w	r2, #4294967295
 8007086:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <vTaskStartScheduler+0xc0>)
 800708a:	2201      	movs	r2, #1
 800708c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <vTaskStartScheduler+0xc4>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007094:	f000 fd6c 	bl	8007b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007098:	e010      	b.n	80070bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d10c      	bne.n	80070bc <vTaskStartScheduler+0xa8>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	b672      	cpsid	i
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	b662      	cpsie	i
 80070b6:	60fb      	str	r3, [r7, #12]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <vTaskStartScheduler+0xa6>
}
 80070bc:	bf00      	nop
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	08008374 	.word	0x08008374
 80070c8:	08007689 	.word	0x08007689
 80070cc:	20000c64 	.word	0x20000c64
 80070d0:	20000c60 	.word	0x20000c60
 80070d4:	20000c4c 	.word	0x20000c4c
 80070d8:	20000c44 	.word	0x20000c44

080070dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070e0:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <vTaskSuspendAll+0x18>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a03      	ldr	r2, [pc, #12]	; (80070f4 <vTaskSuspendAll+0x18>)
 80070e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000c68 	.word	0x20000c68

080070f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007106:	4b42      	ldr	r3, [pc, #264]	; (8007210 <xTaskResumeAll+0x118>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10c      	bne.n	8007128 <xTaskResumeAll+0x30>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	b672      	cpsid	i
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	b662      	cpsie	i
 8007122:	603b      	str	r3, [r7, #0]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007128:	f000 fda0 	bl	8007c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800712c:	4b38      	ldr	r3, [pc, #224]	; (8007210 <xTaskResumeAll+0x118>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3b01      	subs	r3, #1
 8007132:	4a37      	ldr	r2, [pc, #220]	; (8007210 <xTaskResumeAll+0x118>)
 8007134:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007136:	4b36      	ldr	r3, [pc, #216]	; (8007210 <xTaskResumeAll+0x118>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d161      	bne.n	8007202 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800713e:	4b35      	ldr	r3, [pc, #212]	; (8007214 <xTaskResumeAll+0x11c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d05d      	beq.n	8007202 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007146:	e02e      	b.n	80071a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007148:	4b33      	ldr	r3, [pc, #204]	; (8007218 <xTaskResumeAll+0x120>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	3318      	adds	r3, #24
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff f994 	bl	8006482 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3304      	adds	r3, #4
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff f98f 	bl	8006482 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	2201      	movs	r2, #1
 800716a:	409a      	lsls	r2, r3
 800716c:	4b2b      	ldr	r3, [pc, #172]	; (800721c <xTaskResumeAll+0x124>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4313      	orrs	r3, r2
 8007172:	4a2a      	ldr	r2, [pc, #168]	; (800721c <xTaskResumeAll+0x124>)
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a27      	ldr	r2, [pc, #156]	; (8007220 <xTaskResumeAll+0x128>)
 8007184:	441a      	add	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3304      	adds	r3, #4
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7ff f91b 	bl	80063c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	4b23      	ldr	r3, [pc, #140]	; (8007224 <xTaskResumeAll+0x12c>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	429a      	cmp	r2, r3
 800719e:	d302      	bcc.n	80071a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80071a0:	4b21      	ldr	r3, [pc, #132]	; (8007228 <xTaskResumeAll+0x130>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071a6:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <xTaskResumeAll+0x120>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1cc      	bne.n	8007148 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071b4:	f000 fb20 	bl	80077f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071b8:	4b1c      	ldr	r3, [pc, #112]	; (800722c <xTaskResumeAll+0x134>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d010      	beq.n	80071e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071c4:	f000 f836 	bl	8007234 <xTaskIncrementTick>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80071ce:	4b16      	ldr	r3, [pc, #88]	; (8007228 <xTaskResumeAll+0x130>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f1      	bne.n	80071c4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80071e0:	4b12      	ldr	r3, [pc, #72]	; (800722c <xTaskResumeAll+0x134>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071e6:	4b10      	ldr	r3, [pc, #64]	; (8007228 <xTaskResumeAll+0x130>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071ee:	2301      	movs	r3, #1
 80071f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071f2:	4b0f      	ldr	r3, [pc, #60]	; (8007230 <xTaskResumeAll+0x138>)
 80071f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007202:	f000 fd67 	bl	8007cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8007206:	68bb      	ldr	r3, [r7, #8]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000c68 	.word	0x20000c68
 8007214:	20000c40 	.word	0x20000c40
 8007218:	20000c00 	.word	0x20000c00
 800721c:	20000c48 	.word	0x20000c48
 8007220:	20000b44 	.word	0x20000b44
 8007224:	20000b40 	.word	0x20000b40
 8007228:	20000c54 	.word	0x20000c54
 800722c:	20000c50 	.word	0x20000c50
 8007230:	e000ed04 	.word	0xe000ed04

08007234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800723e:	4b4f      	ldr	r3, [pc, #316]	; (800737c <xTaskIncrementTick+0x148>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	f040 808a 	bne.w	800735c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007248:	4b4d      	ldr	r3, [pc, #308]	; (8007380 <xTaskIncrementTick+0x14c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3301      	adds	r3, #1
 800724e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007250:	4a4b      	ldr	r2, [pc, #300]	; (8007380 <xTaskIncrementTick+0x14c>)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d122      	bne.n	80072a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800725c:	4b49      	ldr	r3, [pc, #292]	; (8007384 <xTaskIncrementTick+0x150>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00c      	beq.n	8007280 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726a:	b672      	cpsid	i
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	b662      	cpsie	i
 800727a:	603b      	str	r3, [r7, #0]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <xTaskIncrementTick+0x4a>
 8007280:	4b40      	ldr	r3, [pc, #256]	; (8007384 <xTaskIncrementTick+0x150>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	4b40      	ldr	r3, [pc, #256]	; (8007388 <xTaskIncrementTick+0x154>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a3e      	ldr	r2, [pc, #248]	; (8007384 <xTaskIncrementTick+0x150>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	4a3e      	ldr	r2, [pc, #248]	; (8007388 <xTaskIncrementTick+0x154>)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	4b3d      	ldr	r3, [pc, #244]	; (800738c <xTaskIncrementTick+0x158>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a3c      	ldr	r2, [pc, #240]	; (800738c <xTaskIncrementTick+0x158>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	f000 faab 	bl	80077f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072a2:	4b3b      	ldr	r3, [pc, #236]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d348      	bcc.n	800733e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072ac:	4b35      	ldr	r3, [pc, #212]	; (8007384 <xTaskIncrementTick+0x150>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b6:	4b36      	ldr	r3, [pc, #216]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	601a      	str	r2, [r3, #0]
					break;
 80072be:	e03e      	b.n	800733e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	4b30      	ldr	r3, [pc, #192]	; (8007384 <xTaskIncrementTick+0x150>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d203      	bcs.n	80072e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072d8:	4a2d      	ldr	r2, [pc, #180]	; (8007390 <xTaskIncrementTick+0x15c>)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072de:	e02e      	b.n	800733e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff f8cc 	bl	8006482 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	3318      	adds	r3, #24
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff f8c3 	bl	8006482 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007300:	2201      	movs	r2, #1
 8007302:	409a      	lsls	r2, r3
 8007304:	4b23      	ldr	r3, [pc, #140]	; (8007394 <xTaskIncrementTick+0x160>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	4a22      	ldr	r2, [pc, #136]	; (8007394 <xTaskIncrementTick+0x160>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4a1f      	ldr	r2, [pc, #124]	; (8007398 <xTaskIncrementTick+0x164>)
 800731c:	441a      	add	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3304      	adds	r3, #4
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f7ff f84f 	bl	80063c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732e:	4b1b      	ldr	r3, [pc, #108]	; (800739c <xTaskIncrementTick+0x168>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	429a      	cmp	r2, r3
 8007336:	d3b9      	bcc.n	80072ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733c:	e7b6      	b.n	80072ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800733e:	4b17      	ldr	r3, [pc, #92]	; (800739c <xTaskIncrementTick+0x168>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007344:	4914      	ldr	r1, [pc, #80]	; (8007398 <xTaskIncrementTick+0x164>)
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d907      	bls.n	8007366 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007356:	2301      	movs	r3, #1
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	e004      	b.n	8007366 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800735c:	4b10      	ldr	r3, [pc, #64]	; (80073a0 <xTaskIncrementTick+0x16c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	4a0f      	ldr	r2, [pc, #60]	; (80073a0 <xTaskIncrementTick+0x16c>)
 8007364:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007366:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <xTaskIncrementTick+0x170>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800736e:	2301      	movs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007372:	697b      	ldr	r3, [r7, #20]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000c68 	.word	0x20000c68
 8007380:	20000c44 	.word	0x20000c44
 8007384:	20000bf8 	.word	0x20000bf8
 8007388:	20000bfc 	.word	0x20000bfc
 800738c:	20000c58 	.word	0x20000c58
 8007390:	20000c60 	.word	0x20000c60
 8007394:	20000c48 	.word	0x20000c48
 8007398:	20000b44 	.word	0x20000b44
 800739c:	20000b40 	.word	0x20000b40
 80073a0:	20000c50 	.word	0x20000c50
 80073a4:	20000c54 	.word	0x20000c54

080073a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073ae:	4b28      	ldr	r3, [pc, #160]	; (8007450 <vTaskSwitchContext+0xa8>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073b6:	4b27      	ldr	r3, [pc, #156]	; (8007454 <vTaskSwitchContext+0xac>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073bc:	e041      	b.n	8007442 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80073be:	4b25      	ldr	r3, [pc, #148]	; (8007454 <vTaskSwitchContext+0xac>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <vTaskSwitchContext+0xb0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	fab3 f383 	clz	r3, r3
 80073d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80073d2:	7afb      	ldrb	r3, [r7, #11]
 80073d4:	f1c3 031f 	rsb	r3, r3, #31
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	4920      	ldr	r1, [pc, #128]	; (800745c <vTaskSwitchContext+0xb4>)
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10c      	bne.n	8007408 <vTaskSwitchContext+0x60>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f2:	b672      	cpsid	i
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	b662      	cpsie	i
 8007402:	607b      	str	r3, [r7, #4]
}
 8007404:	bf00      	nop
 8007406:	e7fe      	b.n	8007406 <vTaskSwitchContext+0x5e>
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4a12      	ldr	r2, [pc, #72]	; (800745c <vTaskSwitchContext+0xb4>)
 8007414:	4413      	add	r3, r2
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3308      	adds	r3, #8
 800742a:	429a      	cmp	r2, r3
 800742c:	d104      	bne.n	8007438 <vTaskSwitchContext+0x90>
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	4a08      	ldr	r2, [pc, #32]	; (8007460 <vTaskSwitchContext+0xb8>)
 8007440:	6013      	str	r3, [r2, #0]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000c68 	.word	0x20000c68
 8007454:	20000c54 	.word	0x20000c54
 8007458:	20000c48 	.word	0x20000c48
 800745c:	20000b44 	.word	0x20000b44
 8007460:	20000b40 	.word	0x20000b40

08007464 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10c      	bne.n	800748e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007478:	b672      	cpsid	i
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	b662      	cpsie	i
 8007488:	60fb      	str	r3, [r7, #12]
}
 800748a:	bf00      	nop
 800748c:	e7fe      	b.n	800748c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <vTaskPlaceOnEventList+0x48>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3318      	adds	r3, #24
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fe ffba 	bl	8006410 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800749c:	2101      	movs	r1, #1
 800749e:	6838      	ldr	r0, [r7, #0]
 80074a0:	f000 fa72 	bl	8007988 <prvAddCurrentTaskToDelayedList>
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20000b40 	.word	0x20000b40

080074b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10c      	bne.n	80074e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	b672      	cpsid	i
 80074cc:	f383 8811 	msr	BASEPRI, r3
 80074d0:	f3bf 8f6f 	isb	sy
 80074d4:	f3bf 8f4f 	dsb	sy
 80074d8:	b662      	cpsie	i
 80074da:	60fb      	str	r3, [r7, #12]
}
 80074dc:	bf00      	nop
 80074de:	e7fe      	b.n	80074de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	3318      	adds	r3, #24
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe ffcc 	bl	8006482 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ea:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <xTaskRemoveFromEventList+0xb0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11c      	bne.n	800752c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	3304      	adds	r3, #4
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe ffc3 	bl	8006482 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007500:	2201      	movs	r2, #1
 8007502:	409a      	lsls	r2, r3
 8007504:	4b17      	ldr	r3, [pc, #92]	; (8007564 <xTaskRemoveFromEventList+0xb4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4313      	orrs	r3, r2
 800750a:	4a16      	ldr	r2, [pc, #88]	; (8007564 <xTaskRemoveFromEventList+0xb4>)
 800750c:	6013      	str	r3, [r2, #0]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007512:	4613      	mov	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4a13      	ldr	r2, [pc, #76]	; (8007568 <xTaskRemoveFromEventList+0xb8>)
 800751c:	441a      	add	r2, r3
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	3304      	adds	r3, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4610      	mov	r0, r2
 8007526:	f7fe ff4f 	bl	80063c8 <vListInsertEnd>
 800752a:	e005      	b.n	8007538 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	3318      	adds	r3, #24
 8007530:	4619      	mov	r1, r3
 8007532:	480e      	ldr	r0, [pc, #56]	; (800756c <xTaskRemoveFromEventList+0xbc>)
 8007534:	f7fe ff48 	bl	80063c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4b0c      	ldr	r3, [pc, #48]	; (8007570 <xTaskRemoveFromEventList+0xc0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	429a      	cmp	r2, r3
 8007544:	d905      	bls.n	8007552 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007546:	2301      	movs	r3, #1
 8007548:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800754a:	4b0a      	ldr	r3, [pc, #40]	; (8007574 <xTaskRemoveFromEventList+0xc4>)
 800754c:	2201      	movs	r2, #1
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e001      	b.n	8007556 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	20000c68 	.word	0x20000c68
 8007564:	20000c48 	.word	0x20000c48
 8007568:	20000b44 	.word	0x20000b44
 800756c:	20000c00 	.word	0x20000c00
 8007570:	20000b40 	.word	0x20000b40
 8007574:	20000c54 	.word	0x20000c54

08007578 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007580:	4b06      	ldr	r3, [pc, #24]	; (800759c <vTaskInternalSetTimeOutState+0x24>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <vTaskInternalSetTimeOutState+0x28>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	605a      	str	r2, [r3, #4]
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000c58 	.word	0x20000c58
 80075a0:	20000c44 	.word	0x20000c44

080075a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b088      	sub	sp, #32
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d10c      	bne.n	80075ce <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b8:	b672      	cpsid	i
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	b662      	cpsie	i
 80075c8:	613b      	str	r3, [r7, #16]
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10c      	bne.n	80075ee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	b672      	cpsid	i
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	b662      	cpsie	i
 80075e8:	60fb      	str	r3, [r7, #12]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80075ee:	f000 fb3d 	bl	8007c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075f2:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <xTaskCheckForTimeOut+0xc4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d102      	bne.n	8007612 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	e023      	b.n	800765a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <xTaskCheckForTimeOut+0xc8>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d007      	beq.n	800762e <xTaskCheckForTimeOut+0x8a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	61fb      	str	r3, [r7, #28]
 800762c:	e015      	b.n	800765a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	429a      	cmp	r2, r3
 8007636:	d20b      	bcs.n	8007650 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff ff97 	bl	8007578 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	61fb      	str	r3, [r7, #28]
 800764e:	e004      	b.n	800765a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007656:	2301      	movs	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800765a:	f000 fb3b 	bl	8007cd4 <vPortExitCritical>

	return xReturn;
 800765e:	69fb      	ldr	r3, [r7, #28]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3720      	adds	r7, #32
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000c44 	.word	0x20000c44
 800766c:	20000c58 	.word	0x20000c58

08007670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007674:	4b03      	ldr	r3, [pc, #12]	; (8007684 <vTaskMissedYield+0x14>)
 8007676:	2201      	movs	r2, #1
 8007678:	601a      	str	r2, [r3, #0]
}
 800767a:	bf00      	nop
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	20000c54 	.word	0x20000c54

08007688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007690:	f000 f852 	bl	8007738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <prvIdleTask+0x28>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d9f9      	bls.n	8007690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800769c:	4b05      	ldr	r3, [pc, #20]	; (80076b4 <prvIdleTask+0x2c>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076ac:	e7f0      	b.n	8007690 <prvIdleTask+0x8>
 80076ae:	bf00      	nop
 80076b0:	20000b44 	.word	0x20000b44
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076be:	2300      	movs	r3, #0
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	e00c      	b.n	80076de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a12      	ldr	r2, [pc, #72]	; (8007718 <prvInitialiseTaskLists+0x60>)
 80076d0:	4413      	add	r3, r2
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fe fe4b 	bl	800636e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3301      	adds	r3, #1
 80076dc:	607b      	str	r3, [r7, #4]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b06      	cmp	r3, #6
 80076e2:	d9ef      	bls.n	80076c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076e4:	480d      	ldr	r0, [pc, #52]	; (800771c <prvInitialiseTaskLists+0x64>)
 80076e6:	f7fe fe42 	bl	800636e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076ea:	480d      	ldr	r0, [pc, #52]	; (8007720 <prvInitialiseTaskLists+0x68>)
 80076ec:	f7fe fe3f 	bl	800636e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076f0:	480c      	ldr	r0, [pc, #48]	; (8007724 <prvInitialiseTaskLists+0x6c>)
 80076f2:	f7fe fe3c 	bl	800636e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076f6:	480c      	ldr	r0, [pc, #48]	; (8007728 <prvInitialiseTaskLists+0x70>)
 80076f8:	f7fe fe39 	bl	800636e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076fc:	480b      	ldr	r0, [pc, #44]	; (800772c <prvInitialiseTaskLists+0x74>)
 80076fe:	f7fe fe36 	bl	800636e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <prvInitialiseTaskLists+0x78>)
 8007704:	4a05      	ldr	r2, [pc, #20]	; (800771c <prvInitialiseTaskLists+0x64>)
 8007706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007708:	4b0a      	ldr	r3, [pc, #40]	; (8007734 <prvInitialiseTaskLists+0x7c>)
 800770a:	4a05      	ldr	r2, [pc, #20]	; (8007720 <prvInitialiseTaskLists+0x68>)
 800770c:	601a      	str	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000b44 	.word	0x20000b44
 800771c:	20000bd0 	.word	0x20000bd0
 8007720:	20000be4 	.word	0x20000be4
 8007724:	20000c00 	.word	0x20000c00
 8007728:	20000c14 	.word	0x20000c14
 800772c:	20000c2c 	.word	0x20000c2c
 8007730:	20000bf8 	.word	0x20000bf8
 8007734:	20000bfc 	.word	0x20000bfc

08007738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800773e:	e019      	b.n	8007774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007740:	f000 fa94 	bl	8007c6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007744:	4b10      	ldr	r3, [pc, #64]	; (8007788 <prvCheckTasksWaitingTermination+0x50>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	3304      	adds	r3, #4
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe fe96 	bl	8006482 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007756:	4b0d      	ldr	r3, [pc, #52]	; (800778c <prvCheckTasksWaitingTermination+0x54>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	3b01      	subs	r3, #1
 800775c:	4a0b      	ldr	r2, [pc, #44]	; (800778c <prvCheckTasksWaitingTermination+0x54>)
 800775e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <prvCheckTasksWaitingTermination+0x58>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3b01      	subs	r3, #1
 8007766:	4a0a      	ldr	r2, [pc, #40]	; (8007790 <prvCheckTasksWaitingTermination+0x58>)
 8007768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800776a:	f000 fab3 	bl	8007cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f810 	bl	8007794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <prvCheckTasksWaitingTermination+0x58>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e1      	bne.n	8007740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000c14 	.word	0x20000c14
 800778c:	20000c40 	.word	0x20000c40
 8007790:	20000c28 	.word	0x20000c28

08007794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d108      	bne.n	80077b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 fc54 	bl	8008058 <vPortFree>
				vPortFree( pxTCB );
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc51 	bl	8008058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077b6:	e01a      	b.n	80077ee <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d103      	bne.n	80077ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fc48 	bl	8008058 <vPortFree>
	}
 80077c8:	e011      	b.n	80077ee <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d00c      	beq.n	80077ee <prvDeleteTCB+0x5a>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	b672      	cpsid	i
 80077da:	f383 8811 	msr	BASEPRI, r3
 80077de:	f3bf 8f6f 	isb	sy
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	b662      	cpsie	i
 80077e8:	60fb      	str	r3, [r7, #12]
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <prvDeleteTCB+0x58>
	}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fe:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <prvResetNextTaskUnblockTime+0x38>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <prvResetNextTaskUnblockTime+0x3c>)
 800780a:	f04f 32ff 	mov.w	r2, #4294967295
 800780e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007810:	e008      	b.n	8007824 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007812:	4b07      	ldr	r3, [pc, #28]	; (8007830 <prvResetNextTaskUnblockTime+0x38>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	4a04      	ldr	r2, [pc, #16]	; (8007834 <prvResetNextTaskUnblockTime+0x3c>)
 8007822:	6013      	str	r3, [r2, #0]
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	20000bf8 	.word	0x20000bf8
 8007834:	20000c60 	.word	0x20000c60

08007838 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800783e:	4b0b      	ldr	r3, [pc, #44]	; (800786c <xTaskGetSchedulerState+0x34>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007846:	2301      	movs	r3, #1
 8007848:	607b      	str	r3, [r7, #4]
 800784a:	e008      	b.n	800785e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800784c:	4b08      	ldr	r3, [pc, #32]	; (8007870 <xTaskGetSchedulerState+0x38>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007854:	2302      	movs	r3, #2
 8007856:	607b      	str	r3, [r7, #4]
 8007858:	e001      	b.n	800785e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800785a:	2300      	movs	r3, #0
 800785c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800785e:	687b      	ldr	r3, [r7, #4]
	}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	20000c4c 	.word	0x20000c4c
 8007870:	20000c68 	.word	0x20000c68

08007874 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d072      	beq.n	8007970 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800788a:	4b3c      	ldr	r3, [pc, #240]	; (800797c <xTaskPriorityDisinherit+0x108>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	429a      	cmp	r2, r3
 8007892:	d00c      	beq.n	80078ae <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	b672      	cpsid	i
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	b662      	cpsie	i
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10c      	bne.n	80078d0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	b672      	cpsid	i
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	b662      	cpsie	i
 80078ca:	60bb      	str	r3, [r7, #8]
}
 80078cc:	bf00      	nop
 80078ce:	e7fe      	b.n	80078ce <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d044      	beq.n	8007970 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d140      	bne.n	8007970 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fdc5 	bl	8006482 <uxListRemove>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d115      	bne.n	800792a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	491f      	ldr	r1, [pc, #124]	; (8007980 <xTaskPriorityDisinherit+0x10c>)
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xTaskPriorityDisinherit+0xb6>
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	2201      	movs	r2, #1
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	43da      	mvns	r2, r3
 8007920:	4b18      	ldr	r3, [pc, #96]	; (8007984 <xTaskPriorityDisinherit+0x110>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	4a17      	ldr	r2, [pc, #92]	; (8007984 <xTaskPriorityDisinherit+0x110>)
 8007928:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f1c3 0207 	rsb	r2, r3, #7
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	2201      	movs	r2, #1
 8007944:	409a      	lsls	r2, r3
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <xTaskPriorityDisinherit+0x110>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4313      	orrs	r3, r2
 800794c:	4a0d      	ldr	r2, [pc, #52]	; (8007984 <xTaskPriorityDisinherit+0x110>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4a08      	ldr	r2, [pc, #32]	; (8007980 <xTaskPriorityDisinherit+0x10c>)
 800795e:	441a      	add	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7fe fd2e 	bl	80063c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007970:	697b      	ldr	r3, [r7, #20]
	}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000b40 	.word	0x20000b40
 8007980:	20000b44 	.word	0x20000b44
 8007984:	20000c48 	.word	0x20000c48

08007988 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007992:	4b29      	ldr	r3, [pc, #164]	; (8007a38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007998:	4b28      	ldr	r3, [pc, #160]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3304      	adds	r3, #4
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fd6f 	bl	8006482 <uxListRemove>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d10b      	bne.n	80079c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079aa:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b0:	2201      	movs	r2, #1
 80079b2:	fa02 f303 	lsl.w	r3, r2, r3
 80079b6:	43da      	mvns	r2, r3
 80079b8:	4b21      	ldr	r3, [pc, #132]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4013      	ands	r3, r2
 80079be:	4a20      	ldr	r2, [pc, #128]	; (8007a40 <prvAddCurrentTaskToDelayedList+0xb8>)
 80079c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c8:	d10a      	bne.n	80079e0 <prvAddCurrentTaskToDelayedList+0x58>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079d0:	4b1a      	ldr	r3, [pc, #104]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4619      	mov	r1, r3
 80079d8:	481a      	ldr	r0, [pc, #104]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xbc>)
 80079da:	f7fe fcf5 	bl	80063c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079de:	e026      	b.n	8007a2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079e8:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d209      	bcs.n	8007a0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079f8:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xc0>)
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fe fd03 	bl	8006410 <vListInsert>
}
 8007a0a:	e010      	b.n	8007a2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a0c:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe fcf9 	bl	8006410 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a1e:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d202      	bcs.n	8007a2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6013      	str	r3, [r2, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000c44 	.word	0x20000c44
 8007a3c:	20000b40 	.word	0x20000b40
 8007a40:	20000c48 	.word	0x20000c48
 8007a44:	20000c2c 	.word	0x20000c2c
 8007a48:	20000bfc 	.word	0x20000bfc
 8007a4c:	20000bf8 	.word	0x20000bf8
 8007a50:	20000c60 	.word	0x20000c60

08007a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	3b04      	subs	r3, #4
 8007a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f023 0201 	bic.w	r2, r3, #1
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3b04      	subs	r3, #4
 8007a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a84:	4a0c      	ldr	r2, [pc, #48]	; (8007ab8 <pxPortInitialiseStack+0x64>)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b14      	subs	r3, #20
 8007a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b04      	subs	r3, #4
 8007a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f06f 0202 	mvn.w	r2, #2
 8007aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3b20      	subs	r3, #32
 8007aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr
 8007ab8:	08007abd 	.word	0x08007abd

08007abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <prvTaskExitError+0x5c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ace:	d00c      	beq.n	8007aea <prvTaskExitError+0x2e>
	__asm volatile
 8007ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad4:	b672      	cpsid	i
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	b662      	cpsie	i
 8007ae4:	60fb      	str	r3, [r7, #12]
}
 8007ae6:	bf00      	nop
 8007ae8:	e7fe      	b.n	8007ae8 <prvTaskExitError+0x2c>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	b672      	cpsid	i
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	b662      	cpsie	i
 8007afe:	60bb      	str	r3, [r7, #8]
}
 8007b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b02:	bf00      	nop
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0fc      	beq.n	8007b04 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b0a:	bf00      	nop
 8007b0c:	bf00      	nop
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20000014 	.word	0x20000014
 8007b1c:	00000000 	.word	0x00000000

08007b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <pxCurrentTCBConst2>)
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	6808      	ldr	r0, [r1, #0]
 8007b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2a:	f380 8809 	msr	PSP, r0
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	4770      	bx	lr
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst2>:
 8007b40:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b48:	4808      	ldr	r0, [pc, #32]	; (8007b6c <prvPortStartFirstTask+0x24>)
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f380 8808 	msr	MSP, r0
 8007b52:	f04f 0000 	mov.w	r0, #0
 8007b56:	f380 8814 	msr	CONTROL, r0
 8007b5a:	b662      	cpsie	i
 8007b5c:	b661      	cpsie	f
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	df00      	svc	0
 8007b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b6a:	bf00      	nop
 8007b6c:	e000ed08 	.word	0xe000ed08

08007b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b76:	4b37      	ldr	r3, [pc, #220]	; (8007c54 <xPortStartScheduler+0xe4>)
 8007b78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	4b2f      	ldr	r3, [pc, #188]	; (8007c58 <xPortStartScheduler+0xe8>)
 8007b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b9e:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <xPortStartScheduler+0xec>)
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ba4:	e009      	b.n	8007bba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007ba6:	4b2d      	ldr	r3, [pc, #180]	; (8007c5c <xPortStartScheduler+0xec>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	4a2b      	ldr	r2, [pc, #172]	; (8007c5c <xPortStartScheduler+0xec>)
 8007bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc2:	2b80      	cmp	r3, #128	; 0x80
 8007bc4:	d0ef      	beq.n	8007ba6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bc6:	4b25      	ldr	r3, [pc, #148]	; (8007c5c <xPortStartScheduler+0xec>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f1c3 0307 	rsb	r3, r3, #7
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d00c      	beq.n	8007bec <xPortStartScheduler+0x7c>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	b672      	cpsid	i
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	b662      	cpsie	i
 8007be6:	60bb      	str	r3, [r7, #8]
}
 8007be8:	bf00      	nop
 8007bea:	e7fe      	b.n	8007bea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bec:	4b1b      	ldr	r3, [pc, #108]	; (8007c5c <xPortStartScheduler+0xec>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	4a1a      	ldr	r2, [pc, #104]	; (8007c5c <xPortStartScheduler+0xec>)
 8007bf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <xPortStartScheduler+0xec>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bfe:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <xPortStartScheduler+0xec>)
 8007c00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c0a:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <xPortStartScheduler+0xf0>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a14      	ldr	r2, [pc, #80]	; (8007c60 <xPortStartScheduler+0xf0>)
 8007c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <xPortStartScheduler+0xf0>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <xPortStartScheduler+0xf0>)
 8007c1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c22:	f000 f8dd 	bl	8007de0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c26:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <xPortStartScheduler+0xf4>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c2c:	f000 f8fc 	bl	8007e28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c30:	4b0d      	ldr	r3, [pc, #52]	; (8007c68 <xPortStartScheduler+0xf8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <xPortStartScheduler+0xf8>)
 8007c36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c3c:	f7ff ff84 	bl	8007b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c40:	f7ff fbb2 	bl	80073a8 <vTaskSwitchContext>
	prvTaskExitError();
 8007c44:	f7ff ff3a 	bl	8007abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	e000e400 	.word	0xe000e400
 8007c58:	20000c6c 	.word	0x20000c6c
 8007c5c:	20000c70 	.word	0x20000c70
 8007c60:	e000ed20 	.word	0xe000ed20
 8007c64:	20000014 	.word	0x20000014
 8007c68:	e000ef34 	.word	0xe000ef34

08007c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	b672      	cpsid	i
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	b662      	cpsie	i
 8007c86:	607b      	str	r3, [r7, #4]
}
 8007c88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <vPortEnterCritical+0x60>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	4a0e      	ldr	r2, [pc, #56]	; (8007ccc <vPortEnterCritical+0x60>)
 8007c92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <vPortEnterCritical+0x60>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d111      	bne.n	8007cc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	; (8007cd0 <vPortEnterCritical+0x64>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <vPortEnterCritical+0x54>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	b672      	cpsid	i
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	b662      	cpsie	i
 8007cba:	603b      	str	r3, [r7, #0]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <vPortEnterCritical+0x52>
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20000014 	.word	0x20000014
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cda:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <vPortExitCritical+0x54>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10c      	bne.n	8007cfc <vPortExitCritical+0x28>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	b672      	cpsid	i
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	b662      	cpsie	i
 8007cf6:	607b      	str	r3, [r7, #4]
}
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <vPortExitCritical+0x54>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <vPortExitCritical+0x54>)
 8007d04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d06:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <vPortExitCritical+0x54>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <vPortExitCritical+0x46>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f383 8811 	msr	BASEPRI, r3
}
 8007d18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	20000014 	.word	0x20000014
 8007d2c:	00000000 	.word	0x00000000

08007d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d30:	f3ef 8009 	mrs	r0, PSP
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4b15      	ldr	r3, [pc, #84]	; (8007d90 <pxCurrentTCBConst>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	f01e 0f10 	tst.w	lr, #16
 8007d40:	bf08      	it	eq
 8007d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d54:	b672      	cpsid	i
 8007d56:	f380 8811 	msr	BASEPRI, r0
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	b662      	cpsie	i
 8007d64:	f7ff fb20 	bl	80073a8 <vTaskSwitchContext>
 8007d68:	f04f 0000 	mov.w	r0, #0
 8007d6c:	f380 8811 	msr	BASEPRI, r0
 8007d70:	bc09      	pop	{r0, r3}
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	6808      	ldr	r0, [r1, #0]
 8007d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	f01e 0f10 	tst.w	lr, #16
 8007d7e:	bf08      	it	eq
 8007d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d84:	f380 8809 	msr	PSP, r0
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <pxCurrentTCBConst>:
 8007d90:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	b672      	cpsid	i
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	b662      	cpsie	i
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007db6:	f7ff fa3d 	bl	8007234 <xTaskIncrementTick>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dc0:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <SysTick_Handler+0x44>)
 8007dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f383 8811 	msr	BASEPRI, r3
}
 8007dd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007de4:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <vPortSetupTimerInterrupt+0x34>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007dea:	4b0b      	ldr	r3, [pc, #44]	; (8007e18 <vPortSetupTimerInterrupt+0x38>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <vPortSetupTimerInterrupt+0x3c>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <vPortSetupTimerInterrupt+0x40>)
 8007df6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dfa:	099b      	lsrs	r3, r3, #6
 8007dfc:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <vPortSetupTimerInterrupt+0x44>)
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e02:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <vPortSetupTimerInterrupt+0x34>)
 8007e04:	2207      	movs	r2, #7
 8007e06:	601a      	str	r2, [r3, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	e000e010 	.word	0xe000e010
 8007e18:	e000e018 	.word	0xe000e018
 8007e1c:	20000008 	.word	0x20000008
 8007e20:	10624dd3 	.word	0x10624dd3
 8007e24:	e000e014 	.word	0xe000e014

08007e28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e38 <vPortEnableVFP+0x10>
 8007e2c:	6801      	ldr	r1, [r0, #0]
 8007e2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e32:	6001      	str	r1, [r0, #0]
 8007e34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e36:	bf00      	nop
 8007e38:	e000ed88 	.word	0xe000ed88

08007e3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e42:	f3ef 8305 	mrs	r3, IPSR
 8007e46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b0f      	cmp	r3, #15
 8007e4c:	d916      	bls.n	8007e7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e4e:	4a19      	ldr	r2, [pc, #100]	; (8007eb4 <vPortValidateInterruptPriority+0x78>)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e58:	4b17      	ldr	r3, [pc, #92]	; (8007eb8 <vPortValidateInterruptPriority+0x7c>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	7afa      	ldrb	r2, [r7, #11]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d20c      	bcs.n	8007e7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	b672      	cpsid	i
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	b662      	cpsie	i
 8007e76:	607b      	str	r3, [r7, #4]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e7c:	4b0f      	ldr	r3, [pc, #60]	; (8007ebc <vPortValidateInterruptPriority+0x80>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <vPortValidateInterruptPriority+0x84>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d90c      	bls.n	8007ea6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	b672      	cpsid	i
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	b662      	cpsie	i
 8007ea0:	603b      	str	r3, [r7, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	e7fe      	b.n	8007ea4 <vPortValidateInterruptPriority+0x68>
	}
 8007ea6:	bf00      	nop
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	e000e3f0 	.word	0xe000e3f0
 8007eb8:	20000c6c 	.word	0x20000c6c
 8007ebc:	e000ed0c 	.word	0xe000ed0c
 8007ec0:	20000c70 	.word	0x20000c70

08007ec4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ed0:	f7ff f904 	bl	80070dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ed4:	4b5b      	ldr	r3, [pc, #364]	; (8008044 <pvPortMalloc+0x180>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007edc:	f000 f91a 	bl	8008114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ee0:	4b59      	ldr	r3, [pc, #356]	; (8008048 <pvPortMalloc+0x184>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 8092 	bne.w	8008012 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d01f      	beq.n	8007f34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8007ef4:	2208      	movs	r2, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d016      	beq.n	8007f34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f023 0307 	bic.w	r3, r3, #7
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <pvPortMalloc+0x70>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	b672      	cpsid	i
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	b662      	cpsie	i
 8007f2e:	617b      	str	r3, [r7, #20]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d06b      	beq.n	8008012 <pvPortMalloc+0x14e>
 8007f3a:	4b44      	ldr	r3, [pc, #272]	; (800804c <pvPortMalloc+0x188>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d866      	bhi.n	8008012 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f44:	4b42      	ldr	r3, [pc, #264]	; (8008050 <pvPortMalloc+0x18c>)
 8007f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f48:	4b41      	ldr	r3, [pc, #260]	; (8008050 <pvPortMalloc+0x18c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f4e:	e004      	b.n	8007f5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d903      	bls.n	8007f6c <pvPortMalloc+0xa8>
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1f1      	bne.n	8007f50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f6c:	4b35      	ldr	r3, [pc, #212]	; (8008044 <pvPortMalloc+0x180>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d04d      	beq.n	8008012 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	4413      	add	r3, r2
 8007f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	1ad2      	subs	r2, r2, r3
 8007f90:	2308      	movs	r3, #8
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d921      	bls.n	8007fdc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00c      	beq.n	8007fc4 <pvPortMalloc+0x100>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fae:	b672      	cpsid	i
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	b662      	cpsie	i
 8007fbe:	613b      	str	r3, [r7, #16]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fd6:	69b8      	ldr	r0, [r7, #24]
 8007fd8:	f000 f8fe 	bl	80081d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <pvPortMalloc+0x188>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	4a19      	ldr	r2, [pc, #100]	; (800804c <pvPortMalloc+0x188>)
 8007fe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fea:	4b18      	ldr	r3, [pc, #96]	; (800804c <pvPortMalloc+0x188>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b19      	ldr	r3, [pc, #100]	; (8008054 <pvPortMalloc+0x190>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d203      	bcs.n	8007ffe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <pvPortMalloc+0x188>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a16      	ldr	r2, [pc, #88]	; (8008054 <pvPortMalloc+0x190>)
 8007ffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	4b11      	ldr	r3, [pc, #68]	; (8008048 <pvPortMalloc+0x184>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	431a      	orrs	r2, r3
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008012:	f7ff f871 	bl	80070f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00c      	beq.n	800803a <pvPortMalloc+0x176>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	b672      	cpsid	i
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	b662      	cpsie	i
 8008034:	60fb      	str	r3, [r7, #12]
}
 8008036:	bf00      	nop
 8008038:	e7fe      	b.n	8008038 <pvPortMalloc+0x174>
	return pvReturn;
 800803a:	69fb      	ldr	r3, [r7, #28]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3728      	adds	r7, #40	; 0x28
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	2000487c 	.word	0x2000487c
 8008048:	20004888 	.word	0x20004888
 800804c:	20004880 	.word	0x20004880
 8008050:	20004874 	.word	0x20004874
 8008054:	20004884 	.word	0x20004884

08008058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d04c      	beq.n	8008104 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800806a:	2308      	movs	r3, #8
 800806c:	425b      	negs	r3, r3
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4413      	add	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b23      	ldr	r3, [pc, #140]	; (800810c <vPortFree+0xb4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d10c      	bne.n	80080a0 <vPortFree+0x48>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	60fb      	str	r3, [r7, #12]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d00c      	beq.n	80080c2 <vPortFree+0x6a>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	b672      	cpsid	i
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	b662      	cpsie	i
 80080bc:	60bb      	str	r3, [r7, #8]
}
 80080be:	bf00      	nop
 80080c0:	e7fe      	b.n	80080c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	4b11      	ldr	r3, [pc, #68]	; (800810c <vPortFree+0xb4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4013      	ands	r3, r2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d019      	beq.n	8008104 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d115      	bne.n	8008104 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	4b0b      	ldr	r3, [pc, #44]	; (800810c <vPortFree+0xb4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	401a      	ands	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080e8:	f7fe fff8 	bl	80070dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	4b07      	ldr	r3, [pc, #28]	; (8008110 <vPortFree+0xb8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	4a06      	ldr	r2, [pc, #24]	; (8008110 <vPortFree+0xb8>)
 80080f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080fa:	6938      	ldr	r0, [r7, #16]
 80080fc:	f000 f86c 	bl	80081d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008100:	f7fe fffa 	bl	80070f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008104:	bf00      	nop
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20004888 	.word	0x20004888
 8008110:	20004880 	.word	0x20004880

08008114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800811a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800811e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008120:	4b27      	ldr	r3, [pc, #156]	; (80081c0 <prvHeapInit+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	3307      	adds	r3, #7
 8008132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0307 	bic.w	r3, r3, #7
 800813a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	4a1f      	ldr	r2, [pc, #124]	; (80081c0 <prvHeapInit+0xac>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800814c:	4a1d      	ldr	r2, [pc, #116]	; (80081c4 <prvHeapInit+0xb0>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008152:	4b1c      	ldr	r3, [pc, #112]	; (80081c4 <prvHeapInit+0xb0>)
 8008154:	2200      	movs	r2, #0
 8008156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008160:	2208      	movs	r2, #8
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1a9b      	subs	r3, r3, r2
 8008166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f023 0307 	bic.w	r3, r3, #7
 800816e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <prvHeapInit+0xb4>)
 8008174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <prvHeapInit+0xb4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvHeapInit+0xb4>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	1ad2      	subs	r2, r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvHeapInit+0xb4>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <prvHeapInit+0xb8>)
 80081a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <prvHeapInit+0xbc>)
 80081aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <prvHeapInit+0xc0>)
 80081ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081b2:	601a      	str	r2, [r3, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000c74 	.word	0x20000c74
 80081c4:	20004874 	.word	0x20004874
 80081c8:	2000487c 	.word	0x2000487c
 80081cc:	20004884 	.word	0x20004884
 80081d0:	20004880 	.word	0x20004880
 80081d4:	20004888 	.word	0x20004888

080081d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081e0:	4b28      	ldr	r3, [pc, #160]	; (8008284 <prvInsertBlockIntoFreeList+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e002      	b.n	80081ec <prvInsertBlockIntoFreeList+0x14>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d8f7      	bhi.n	80081e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	4413      	add	r3, r2
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	429a      	cmp	r2, r3
 8008206:	d108      	bne.n	800821a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d118      	bne.n	8008260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	429a      	cmp	r2, r3
 8008238:	d00d      	beq.n	8008256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	441a      	add	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e008      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008256:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <prvInsertBlockIntoFreeList+0xb0>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	e003      	b.n	8008268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d002      	beq.n	8008276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008276:	bf00      	nop
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	20004874 	.word	0x20004874
 8008288:	2000487c 	.word	0x2000487c

0800828c <memset>:
 800828c:	4402      	add	r2, r0
 800828e:	4603      	mov	r3, r0
 8008290:	4293      	cmp	r3, r2
 8008292:	d100      	bne.n	8008296 <memset+0xa>
 8008294:	4770      	bx	lr
 8008296:	f803 1b01 	strb.w	r1, [r3], #1
 800829a:	e7f9      	b.n	8008290 <memset+0x4>

0800829c <__libc_init_array>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	4d0d      	ldr	r5, [pc, #52]	; (80082d4 <__libc_init_array+0x38>)
 80082a0:	4c0d      	ldr	r4, [pc, #52]	; (80082d8 <__libc_init_array+0x3c>)
 80082a2:	1b64      	subs	r4, r4, r5
 80082a4:	10a4      	asrs	r4, r4, #2
 80082a6:	2600      	movs	r6, #0
 80082a8:	42a6      	cmp	r6, r4
 80082aa:	d109      	bne.n	80082c0 <__libc_init_array+0x24>
 80082ac:	4d0b      	ldr	r5, [pc, #44]	; (80082dc <__libc_init_array+0x40>)
 80082ae:	4c0c      	ldr	r4, [pc, #48]	; (80082e0 <__libc_init_array+0x44>)
 80082b0:	f000 f826 	bl	8008300 <_init>
 80082b4:	1b64      	subs	r4, r4, r5
 80082b6:	10a4      	asrs	r4, r4, #2
 80082b8:	2600      	movs	r6, #0
 80082ba:	42a6      	cmp	r6, r4
 80082bc:	d105      	bne.n	80082ca <__libc_init_array+0x2e>
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c4:	4798      	blx	r3
 80082c6:	3601      	adds	r6, #1
 80082c8:	e7ee      	b.n	80082a8 <__libc_init_array+0xc>
 80082ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ce:	4798      	blx	r3
 80082d0:	3601      	adds	r6, #1
 80082d2:	e7f2      	b.n	80082ba <__libc_init_array+0x1e>
 80082d4:	0800839c 	.word	0x0800839c
 80082d8:	0800839c 	.word	0x0800839c
 80082dc:	0800839c 	.word	0x0800839c
 80082e0:	080083a0 	.word	0x080083a0

080082e4 <memcpy>:
 80082e4:	440a      	add	r2, r1
 80082e6:	4291      	cmp	r1, r2
 80082e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ec:	d100      	bne.n	80082f0 <memcpy+0xc>
 80082ee:	4770      	bx	lr
 80082f0:	b510      	push	{r4, lr}
 80082f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082fa:	4291      	cmp	r1, r2
 80082fc:	d1f9      	bne.n	80082f2 <memcpy+0xe>
 80082fe:	bd10      	pop	{r4, pc}

08008300 <_init>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	bf00      	nop
 8008304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008306:	bc08      	pop	{r3}
 8008308:	469e      	mov	lr, r3
 800830a:	4770      	bx	lr

0800830c <_fini>:
 800830c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800830e:	bf00      	nop
 8008310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008312:	bc08      	pop	{r3}
 8008314:	469e      	mov	lr, r3
 8008316:	4770      	bx	lr
