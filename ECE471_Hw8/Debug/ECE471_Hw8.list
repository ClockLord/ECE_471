
ECE471_Hw8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007144  08007144  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800714c  0800714c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800714c  0800714c  0001714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08007164  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08007204  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004698  20000150  080072a4  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200047e8  080072a4  000247e8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001d56c  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003e0e  00000000  00000000  0003d72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001860  00000000  00000000  00041540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012fa  00000000  00000000  00042da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299ab  00000000  00000000  0004409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d157  00000000  00000000  0006da45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001014e5  00000000  00000000  0008ab9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006788  00000000  00000000  0018c084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0019280c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070b0 	.word	0x080070b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	080070b0 	.word	0x080070b0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fd4a 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f855 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f967 	bl	8000820 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f8b9 	bl	80006c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f905 	bl	8000764 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 f933 	bl	80007c4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <main+0x9c>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <main+0x9c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f042 0220 	orr.w	r2, r2, #32
 800056c:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PwmDataBuffer */
  osMessageQDef(PwmDataBuffer, 16, uint16_t);
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <main+0xa0>)
 8000570:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PwmDataBufferHandle = osMessageCreate(osMessageQ(PwmDataBuffer), NULL);
 800057a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f004 fda4 	bl	80050ce <osMessageCreate>
 8000586:	4603      	mov	r3, r0
 8000588:	4a16      	ldr	r2, [pc, #88]	; (80005e4 <main+0xa4>)
 800058a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <main+0xa8>)
 800058e:	f107 041c 	add.w	r4, r7, #28
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fd31 	bl	800500e <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0xac>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of SetPwm */
  osThreadDef(SetPwm, SetPwmTask, osPriorityHigh, 0, 128);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <main+0xb0>)
 80005b4:	463c      	mov	r4, r7
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SetPwmHandle = osThreadCreate(osThread(SetPwm), NULL);
 80005c4:	463b      	mov	r3, r7
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 fd20 	bl	800500e <osThreadCreate>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <main+0xb4>)
 80005d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d4:	f004 fd14 	bl	8005000 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <main+0x98>
 80005da:	bf00      	nop
 80005dc:	200004a8 	.word	0x200004a8
 80005e0:	080070c8 	.word	0x080070c8
 80005e4:	20000a40 	.word	0x20000a40
 80005e8:	080070e4 	.word	0x080070e4
 80005ec:	20000a38 	.word	0x20000a38
 80005f0:	08007108 	.word	0x08007108
 80005f4:	20000a3c 	.word	0x20000a3c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f006 fd18 	bl	800703c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fcd8 	bl	8001fd0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xc8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <SystemClock_Config+0xc8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <SystemClock_Config+0xc8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xcc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	4a20      	ldr	r2, [pc, #128]	; (80006c4 <SystemClock_Config+0xcc>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <SystemClock_Config+0xcc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fcb7 	bl	8001ff0 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f9cd 	bl	8000a26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2102      	movs	r1, #2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff45 	bl	8002538 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006b4:	f000 f9b7 	bl	8000a26 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ETH_Init+0x84>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_ETH_Init+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_ETH_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ETH_Init+0x8c>)
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e0:	22e1      	movs	r2, #225	; 0xe1
 80006e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ETH_Init+0x8c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_ETH_Init+0x8c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ETH_Init+0x84>)
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_ETH_Init+0x8c>)
 80006fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ETH_Init+0x84>)
 80006fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000702:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ETH_Init+0x84>)
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_ETH_Init+0x90>)
 8000708:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ETH_Init+0x84>)
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_ETH_Init+0x94>)
 800070e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ETH_Init+0x84>)
 8000712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000716:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x84>)
 800071a:	f000 fe25 	bl	8001368 <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 f97f 	bl	8000a26 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000728:	2238      	movs	r2, #56	; 0x38
 800072a:	2100      	movs	r1, #0
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_ETH_Init+0x98>)
 800072e:	f006 fc85 	bl	800703c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_ETH_Init+0x98>)
 8000734:	2221      	movs	r2, #33	; 0x21
 8000736:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_ETH_Init+0x98>)
 800073a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800073e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_ETH_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200003f8 	.word	0x200003f8
 8000750:	40028000 	.word	0x40028000
 8000754:	20000a44 	.word	0x20000a44
 8000758:	200000b0 	.word	0x200000b0
 800075c:	20000010 	.word	0x20000010
 8000760:	200003c0 	.word	0x200003c0

08000764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_USART3_UART_Init+0x5c>)
 800076c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART3_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART3_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART3_UART_Init+0x58>)
 80007a8:	f002 ffee 	bl	8003788 <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f938 	bl	8000a26 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200004a8 	.word	0x200004a8
 80007c0:	40004800 	.word	0x40004800

080007c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2206      	movs	r2, #6
 80007d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2202      	movs	r2, #2
 80007da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2202      	movs	r2, #2
 80007e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	f001 fa99 	bl	8001d3e <HAL_PCD_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f908 	bl	8000a26 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000530 	.word	0x20000530

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b47      	ldr	r3, [pc, #284]	; (8000954 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a46      	ldr	r2, [pc, #280]	; (8000954 <MX_GPIO_Init+0x134>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b44      	ldr	r3, [pc, #272]	; (8000954 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a40      	ldr	r2, [pc, #256]	; (8000954 <MX_GPIO_Init+0x134>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MX_GPIO_Init+0x134>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <MX_GPIO_Init+0x134>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <MX_GPIO_Init+0x134>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b35      	ldr	r3, [pc, #212]	; (8000954 <MX_GPIO_Init+0x134>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a34      	ldr	r2, [pc, #208]	; (8000954 <MX_GPIO_Init+0x134>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b32      	ldr	r3, [pc, #200]	; (8000954 <MX_GPIO_Init+0x134>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <MX_GPIO_Init+0x134>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a2e      	ldr	r2, [pc, #184]	; (8000954 <MX_GPIO_Init+0x134>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <MX_GPIO_Init+0x134>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_GPIO_Init+0x134>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a28      	ldr	r2, [pc, #160]	; (8000954 <MX_GPIO_Init+0x134>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008cc:	4822      	ldr	r0, [pc, #136]	; (8000958 <MX_GPIO_Init+0x138>)
 80008ce:	f001 fa1d 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4821      	ldr	r0, [pc, #132]	; (800095c <MX_GPIO_Init+0x13c>)
 80008d8:	f001 fa18 	bl	8001d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	481b      	ldr	r0, [pc, #108]	; (8000960 <MX_GPIO_Init+0x140>)
 80008f4:	f001 f85e 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_GPIO_Init+0x138>)
 8000912:	f001 f84f 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <MX_GPIO_Init+0x13c>)
 800092e:	f001 f841 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_GPIO_Init+0x13c>)
 8000946:	f001 f835 	bl	80019b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	; 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40020400 	.word	0x40020400
 800095c:	40021800 	.word	0x40021800
 8000960:	40020800 	.word	0x40020800

08000964 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f004 fb9a 	bl	80050a6 <osDelay>
 8000972:	e7fb      	b.n	800096c <StartDefaultTask+0x8>

08000974 <setLed>:
* @retval None
*/
/* USER CODE END Header_SetPwmTask */

//function sets/blinks led based on recieved data 1=blue led 2=green led
void setLed(uint8_t recievedData){
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]

	if(recievedData=='1'){
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b31      	cmp	r3, #49	; 0x31
 8000982:	d10a      	bne.n	800099a <setLed+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <setLed+0x48>)
 800098a:	f001 f9bf 	bl	8001d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2101      	movs	r1, #1
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <setLed+0x48>)
 8000994:	f001 f9ba 	bl	8001d0c <HAL_GPIO_WritePin>
//	else {
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
//		osDelay(500);
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
//	}
}
 8000998:	e00c      	b.n	80009b4 <setLed+0x40>
	else if (recievedData=='2'){
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b32      	cmp	r3, #50	; 0x32
 800099e:	d109      	bne.n	80009b4 <setLed+0x40>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <setLed+0x48>)
 80009a6:	f001 f9b1 	bl	8001d0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <setLed+0x48>)
 80009b0:	f001 f9ac 	bl	8001d0c <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40020400 	.word	0x40020400

080009c0 <SetPwmTask>:

void SetPwmTask(void const * argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  {
	  //retrieve the data from the queue PwmDataBufferHandle
	  BaseType_t status;
	  uint8_t receivedData;

	  status = xQueueReceive(PwmDataBufferHandle, &receivedData, portMAX_DELAY);
 80009c8:	4b0d      	ldr	r3, [pc, #52]	; (8000a00 <SetPwmTask+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f107 010b 	add.w	r1, r7, #11
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 fe45 	bl	8005664 <xQueueReceive>
 80009da:	60f8      	str	r0, [r7, #12]

	  if(status == pdPASS){	//if the queue is recieved succesfully
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d104      	bne.n	80009ec <SetPwmTask+0x2c>

		  setLed(receivedData);
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffc5 	bl	8000974 <setLed>
 80009ea:	e005      	b.n	80009f8 <SetPwmTask+0x38>
		  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green

	  }
	  else{	//if the queue is not recieved
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //green
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <SetPwmTask+0x44>)
 80009f4:	f001 f98a 	bl	8001d0c <HAL_GPIO_WritePin>
	  }



    osDelay(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f004 fb54 	bl	80050a6 <osDelay>
  {
 80009fe:	e7e3      	b.n	80009c8 <SetPwmTask+0x8>
 8000a00:	20000a40 	.word	0x20000a40
 8000a04:	40020400 	.word	0x40020400

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 faed 	bl	8000ff8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
}
 8000a2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <Error_Handler+0x8>

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a10      	ldr	r2, [pc, #64]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	210f      	movs	r1, #15
 8000a6a:	f06f 0001 	mvn.w	r0, #1
 8000a6e:	f000 fbbf 	bl	80011f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_ETH_MspInit+0x158>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	f040 8096 	bne.w	8000bd0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab8:	623b      	str	r3, [r7, #32]
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	4b47      	ldr	r3, [pc, #284]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a46      	ldr	r2, [pc, #280]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a40      	ldr	r2, [pc, #256]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ada:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae0:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aec:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	4a3a      	ldr	r2, [pc, #232]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000af2:	f043 0304 	orr.w	r3, r3, #4
 8000af6:	6313      	str	r3, [r2, #48]	; 0x30
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b32      	ldr	r3, [pc, #200]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b34:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b4c:	2332      	movs	r3, #50	; 0x32
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b5c:	230b      	movs	r3, #11
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	4619      	mov	r1, r3
 8000b66:	481e      	ldr	r0, [pc, #120]	; (8000be0 <HAL_ETH_MspInit+0x160>)
 8000b68:	f000 ff24 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b6c:	2386      	movs	r3, #134	; 0x86
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	4817      	ldr	r0, [pc, #92]	; (8000be4 <HAL_ETH_MspInit+0x164>)
 8000b88:	f000 ff14 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	480f      	ldr	r0, [pc, #60]	; (8000be8 <HAL_ETH_MspInit+0x168>)
 8000baa:	f000 ff03 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <HAL_ETH_MspInit+0x16c>)
 8000bcc:	f000 fef2 	bl	80019b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	; 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40028000 	.word	0x40028000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021800 	.word	0x40021800

08000bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0aa      	sub	sp, #168	; 0xa8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2284      	movs	r2, #132	; 0x84
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f006 fa13 	bl	800703c <memset>
  if(huart->Instance==USART3)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_UART_MspInit+0xc4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d144      	bne.n	8000caa <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 feda 	bl	80029e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff fef4 	bl	8000a26 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0xc8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000c92:	4619      	mov	r1, r3
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <HAL_UART_MspInit+0xcc>)
 8000c96:	f000 fe8d 	bl	80019b4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2027      	movs	r0, #39	; 0x27
 8000ca0:	f000 faa6 	bl	80011f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ca4:	2027      	movs	r0, #39	; 0x27
 8000ca6:	f000 fabf 	bl	8001228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	37a8      	adds	r7, #168	; 0xa8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004800 	.word	0x40004800
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0ac      	sub	sp, #176	; 0xb0
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0318 	add.w	r3, r7, #24
 8000cdc:	2284      	movs	r2, #132	; 0x84
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f006 f9ab 	bl	800703c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cee:	d159      	bne.n	8000da4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cf0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000cf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfc:	f107 0318 	add.w	r3, r7, #24
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fe71 	bl	80029e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000d0c:	f7ff fe8b 	bl	8000a26 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b26      	ldr	r3, [pc, #152]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d28:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d42:	230a      	movs	r3, #10
 8000d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4818      	ldr	r0, [pc, #96]	; (8000db0 <HAL_PCD_MspInit+0xf0>)
 8000d50:	f000 fe30 	bl	80019b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_PCD_MspInit+0xf0>)
 8000d70:	f000 fe20 	bl	80019b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7e:	6353      	str	r3, [r2, #52]	; 0x34
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	4a06      	ldr	r2, [pc, #24]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6453      	str	r3, [r2, #68]	; 0x44
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_PCD_MspInit+0xec>)
 8000d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	37b0      	adds	r7, #176	; 0xb0
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc4:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <HAL_InitTick+0xe4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	4a33      	ldr	r2, [pc, #204]	; (8000e98 <HAL_InitTick+0xe4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_InitTick+0xe4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ddc:	f107 0210 	add.w	r2, r7, #16
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4611      	mov	r1, r2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fdcc 	bl	8002984 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dec:	6a3b      	ldr	r3, [r7, #32]
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d103      	bne.n	8000dfe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000df6:	f001 fd9d 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8000dfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000dfc:	e004      	b.n	8000e08 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dfe:	f001 fd99 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8000e02:	4603      	mov	r3, r0
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0a:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_InitTick+0xe8>)
 8000e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e10:	0c9b      	lsrs	r3, r3, #18
 8000e12:	3b01      	subs	r3, #1
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e1e:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e20:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e24:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e2a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e38:	4b19      	ldr	r3, [pc, #100]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e3e:	4818      	ldr	r0, [pc, #96]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e40:	f002 f9c2 	bl	80031c8 <HAL_TIM_Base_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d11b      	bne.n	8000e8a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e52:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <HAL_InitTick+0xec>)
 8000e54:	f002 fa1a 	bl	800328c <HAL_TIM_Base_Start_IT>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d111      	bne.n	8000e8a <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e66:	201c      	movs	r0, #28
 8000e68:	f000 f9de 	bl	8001228 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b0f      	cmp	r3, #15
 8000e70:	d808      	bhi.n	8000e84 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e72:	2200      	movs	r2, #0
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 f9ba 	bl	80011f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a09      	ldr	r2, [pc, #36]	; (8000ea4 <HAL_InitTick+0xf0>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e002      	b.n	8000e8a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3738      	adds	r7, #56	; 0x38
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	20000a4c 	.word	0x20000a4c
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM2_IRQHandler+0x10>)
 8000eda:	f002 fa4f 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000a4c 	.word	0x20000a4c

08000ee8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		BaseType_t xSchedulerChanged = pdFALSE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
		uint8_t buffer;
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, &buffer, 1, 0);
 8000ef2:	1df9      	adds	r1, r7, #7
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <USART3_IRQHandler+0x70>)
 8000efa:	f002 fd16 	bl	800392a <HAL_UART_Receive>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

		if (HAL_OK == status) {	//if uart has been recieved
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10f      	bne.n	8000f28 <USART3_IRQHandler+0x40>
		   //send the data from uart to the queue
		    xQueueSendFromISR(PwmDataBufferHandle, &buffer, &xSchedulerChanged);
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <USART3_IRQHandler+0x74>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	1df9      	adds	r1, r7, #7
 8000f12:	2300      	movs	r3, #0
 8000f14:	f004 fb05 	bl	8005522 <xQueueGenericSendFromISR>
		    HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
 8000f18:	1df9      	adds	r1, r7, #7
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	2201      	movs	r2, #1
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <USART3_IRQHandler+0x70>)
 8000f22:	f002 fc7f 	bl	8003824 <HAL_UART_Transmit>
 8000f26:	e005      	b.n	8000f34 <USART3_IRQHandler+0x4c>
		    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
		}
		else {
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <USART3_IRQHandler+0x78>)
 8000f30:	f000 feec 	bl	8001d0c <HAL_GPIO_WritePin>

		}

		portYIELD_FROM_ISR(xSchedulerChanged);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d007      	beq.n	8000f4a <USART3_IRQHandler+0x62>
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <USART3_IRQHandler+0x7c>)
 8000f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	f3bf 8f4f 	dsb	sy
 8000f46:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <USART3_IRQHandler+0x70>)
 8000f4c:	f002 fdb2 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200004a8 	.word	0x200004a8
 8000f5c:	20000a40 	.word	0x20000a40
 8000f60:	40020400 	.word	0x40020400
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f90:	480d      	ldr	r0, [pc, #52]	; (8000fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f94:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fa8:	4c0b      	ldr	r4, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fb6:	f7ff ffd7 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fba:	f006 f847 	bl	800704c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fbe:	f7ff fabf 	bl	8000540 <main>
  bx  lr    
 8000fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fd0:	08007154 	.word	0x08007154
  ldr r2, =_sbss
 8000fd4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000fd8:	200047e8 	.word	0x200047e8

08000fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC_IRQHandler>

08000fde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 f8f9 	bl	80011da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f7ff fee3 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f7ff fd1f 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000a98 	.word	0x20000a98

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000a98 	.word	0x20000a98

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	05fa0000 	.word	0x05fa0000

080010c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	db0b      	blt.n	800110e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f003 021f 	and.w	r2, r3, #31
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <__NVIC_EnableIRQ+0x38>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	095b      	lsrs	r3, r3, #5
 8001104:	2001      	movs	r0, #1
 8001106:	fa00 f202 	lsl.w	r2, r0, r2
 800110a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000e100 	.word	0xe000e100

08001120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	2b00      	cmp	r3, #0
 8001132:	db0a      	blt.n	800114a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	b2da      	uxtb	r2, r3
 8001138:	490c      	ldr	r1, [pc, #48]	; (800116c <__NVIC_SetPriority+0x4c>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	0112      	lsls	r2, r2, #4
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	440b      	add	r3, r1
 8001144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001148:	e00a      	b.n	8001160 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4908      	ldr	r1, [pc, #32]	; (8001170 <__NVIC_SetPriority+0x50>)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	3b04      	subs	r3, #4
 8001158:	0112      	lsls	r2, r2, #4
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	440b      	add	r3, r1
 800115e:	761a      	strb	r2, [r3, #24]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f1c3 0307 	rsb	r3, r3, #7
 800118e:	2b04      	cmp	r3, #4
 8001190:	bf28      	it	cs
 8001192:	2304      	movcs	r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3304      	adds	r3, #4
 800119a:	2b06      	cmp	r3, #6
 800119c:	d902      	bls.n	80011a4 <NVIC_EncodePriority+0x30>
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3b03      	subs	r3, #3
 80011a2:	e000      	b.n	80011a6 <NVIC_EncodePriority+0x32>
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43da      	mvns	r2, r3
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	401a      	ands	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011bc:	f04f 31ff 	mov.w	r1, #4294967295
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa01 f303 	lsl.w	r3, r1, r3
 80011c6:	43d9      	mvns	r1, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	4313      	orrs	r3, r2
         );
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff4c 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001202:	f7ff ff61 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f7ff ffb1 	bl	8001174 <NVIC_EncodePriority>
 8001212:	4602      	mov	r2, r0
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff80 	bl	8001120 <__NVIC_SetPriority>
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff54 	bl	80010e4 <__NVIC_EnableIRQ>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001250:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001252:	f7ff fee5 	bl	8001020 <HAL_GetTick>
 8001256:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d008      	beq.n	8001276 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e052      	b.n	800131c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0216 	bic.w	r2, r2, #22
 8001284:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001294:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d103      	bne.n	80012a6 <HAL_DMA_Abort+0x62>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0208 	bic.w	r2, r2, #8
 80012b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c6:	e013      	b.n	80012f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c8:	f7ff feaa 	bl	8001020 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d90c      	bls.n	80012f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2220      	movs	r2, #32
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e015      	b.n	800131c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1e4      	bne.n	80012c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	223f      	movs	r2, #63	; 0x3f
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d004      	beq.n	8001342 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2280      	movs	r2, #128	; 0x80
 800133c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00c      	b.n	800135c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2205      	movs	r2, #5
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0201 	bic.w	r2, r2, #1
 8001358:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e06a      	b.n	8001450 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001380:	2b00      	cmp	r3, #0
 8001382:	d106      	bne.n	8001392 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2223      	movs	r2, #35	; 0x23
 8001388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fb77 	bl	8000a80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_ETH_Init+0xf0>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a30      	ldr	r2, [pc, #192]	; (8001458 <HAL_ETH_Init+0xf0>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <HAL_ETH_Init+0xf0>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013aa:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_ETH_Init+0xf4>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <HAL_ETH_Init+0xf4>)
 80013b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ETH_Init+0xf4>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	4927      	ldr	r1, [pc, #156]	; (800145c <HAL_ETH_Init+0xf4>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_ETH_Init+0xf4>)
 80013c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013e0:	f7ff fe1e 	bl	8001020 <HAL_GetTick>
 80013e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013e6:	e011      	b.n	800140c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013e8:	f7ff fe1a 	bl	8001020 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013f6:	d909      	bls.n	800140c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2204      	movs	r2, #4
 80013fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	22e0      	movs	r2, #224	; 0xe0
 8001404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e021      	b.n	8001450 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1e4      	bne.n	80013e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 f958 	bl	80016d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f9ff 	bl	8001828 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa55 	bl	80018da <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	461a      	mov	r2, r3
 8001436:	2100      	movs	r1, #0
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f9bd 	bl	80017b8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2210      	movs	r2, #16
 800144a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800

08001460 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4b51      	ldr	r3, [pc, #324]	; (80015bc <ETH_SetMACConfig+0x15c>)
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	7c1b      	ldrb	r3, [r3, #16]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <ETH_SetMACConfig+0x28>
 8001482:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001486:	e000      	b.n	800148a <ETH_SetMACConfig+0x2a>
 8001488:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7c5b      	ldrb	r3, [r3, #17]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <ETH_SetMACConfig+0x38>
 8001492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001496:	e000      	b.n	800149a <ETH_SetMACConfig+0x3a>
 8001498:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800149a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	7fdb      	ldrb	r3, [r3, #31]
 80014a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	7f92      	ldrb	r2, [r2, #30]
 80014b4:	2a00      	cmp	r2, #0
 80014b6:	d102      	bne.n	80014be <ETH_SetMACConfig+0x5e>
 80014b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014bc:	e000      	b.n	80014c0 <ETH_SetMACConfig+0x60>
 80014be:	2200      	movs	r2, #0
                        macconf->Speed |
 80014c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7f1b      	ldrb	r3, [r3, #28]
 80014c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d102      	bne.n	80014e8 <ETH_SetMACConfig+0x88>
 80014e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e6:	e000      	b.n	80014ea <ETH_SetMACConfig+0x8a>
 80014e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7bdb      	ldrb	r3, [r3, #15]
 80014f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80014f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001500:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001502:	4313      	orrs	r3, r2
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4313      	orrs	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fd8c 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001546:	2a00      	cmp	r2, #0
 8001548:	d101      	bne.n	800154e <ETH_SetMACConfig+0xee>
 800154a:	2280      	movs	r2, #128	; 0x80
 800154c:	e000      	b.n	8001550 <ETH_SetMACConfig+0xf0>
 800154e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001550:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001556:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800155e:	2a01      	cmp	r2, #1
 8001560:	d101      	bne.n	8001566 <ETH_SetMACConfig+0x106>
 8001562:	2208      	movs	r2, #8
 8001564:	e000      	b.n	8001568 <ETH_SetMACConfig+0x108>
 8001566:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001568:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001570:	2a01      	cmp	r2, #1
 8001572:	d101      	bne.n	8001578 <ETH_SetMACConfig+0x118>
 8001574:	2204      	movs	r2, #4
 8001576:	e000      	b.n	800157a <ETH_SetMACConfig+0x11a>
 8001578:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800157a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001582:	2a01      	cmp	r2, #1
 8001584:	d101      	bne.n	800158a <ETH_SetMACConfig+0x12a>
 8001586:	2202      	movs	r2, #2
 8001588:	e000      	b.n	800158c <ETH_SetMACConfig+0x12c>
 800158a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800158c:	4313      	orrs	r3, r2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fd47 	bl	8001038 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	ff20810f 	.word	0xff20810f

080015c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <ETH_SetDMAConfig+0x110>)
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	7b1b      	ldrb	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <ETH_SetDMAConfig+0x2c>
 80015e6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015ea:	e000      	b.n	80015ee <ETH_SetDMAConfig+0x2e>
 80015ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	7b5b      	ldrb	r3, [r3, #13]
 80015f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	7f52      	ldrb	r2, [r2, #29]
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d102      	bne.n	8001604 <ETH_SetDMAConfig+0x44>
 80015fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001602:	e000      	b.n	8001606 <ETH_SetDMAConfig+0x46>
 8001604:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001606:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b9b      	ldrb	r3, [r3, #14]
 800160c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800160e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001614:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7f1b      	ldrb	r3, [r3, #28]
 800161a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800161c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	7f9b      	ldrb	r3, [r3, #30]
 8001622:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001624:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800162a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001632:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001634:	4313      	orrs	r3, r2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	4313      	orrs	r3, r2
 800163a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	461a      	mov	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fcee 	bl	8001038 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	461a      	mov	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	791b      	ldrb	r3, [r3, #4]
 800166e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001674:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800167a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001680:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001688:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800168a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001692:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001698:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fcbf 	bl	8001038 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c2:	461a      	mov	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6013      	str	r3, [r2, #0]
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	f8de3f23 	.word	0xf8de3f23

080016d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0a6      	sub	sp, #152	; 0x98
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016dc:	2301      	movs	r3, #1
 80016de:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001710:	2300      	movs	r3, #0
 8001712:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800171a:	2300      	movs	r3, #0
 800171c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001736:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800173a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800173c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001740:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001748:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff fe86 	bl	8001460 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001754:	2301      	movs	r3, #1
 8001756:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001758:	2301      	movs	r3, #1
 800175a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001780:	2301      	movs	r3, #1
 8001782:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001788:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800178a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800178e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800179c:	2300      	movs	r3, #0
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017a4:	f107 0308 	add.w	r3, r7, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff08 	bl	80015c0 <ETH_SetDMAConfig>
}
 80017b0:	bf00      	nop
 80017b2:	3798      	adds	r7, #152	; 0x98
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3305      	adds	r3, #5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	021b      	lsls	r3, r3, #8
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	3204      	adds	r2, #4
 80017d0:	7812      	ldrb	r2, [r2, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <ETH_MACAddressConfig+0x68>)
 80017da:	4413      	add	r3, r2
 80017dc:	461a      	mov	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3303      	adds	r3, #3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	061a      	lsls	r2, r3, #24
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3302      	adds	r3, #2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	4313      	orrs	r3, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <ETH_MACAddressConfig+0x6c>)
 800180a:	4413      	add	r3, r2
 800180c:	461a      	mov	r2, r3
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	6013      	str	r3, [r2, #0]
}
 8001812:	bf00      	nop
 8001814:	371c      	adds	r7, #28
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40028040 	.word	0x40028040
 8001824:	40028044 	.word	0x40028044

08001828 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e03e      	b.n	80018b4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	3206      	adds	r2, #6
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d80c      	bhi.n	8001898 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	440b      	add	r3, r1
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	e004      	b.n	80018a2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3301      	adds	r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d9bd      	bls.n	8001836 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e046      	b.n	8001976 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6919      	ldr	r1, [r3, #16]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2200      	movs	r2, #0
 8001916:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001924:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800192c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	3212      	adds	r2, #18
 8001942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d80c      	bhi.n	8001966 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6919      	ldr	r1, [r3, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	461a      	mov	r2, r3
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	e004      	b.n	8001970 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	461a      	mov	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3301      	adds	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d9b5      	bls.n	80018e8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
 80019d2:	e175      	b.n	8001cc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019d4:	2201      	movs	r2, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8164 	bne.w	8001cba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d005      	beq.n	8001a0a <HAL_GPIO_Init+0x56>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d017      	beq.n	8001aa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d123      	bne.n	8001afc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	08da      	lsrs	r2, r3, #3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3208      	adds	r2, #8
 8001abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	691a      	ldr	r2, [r3, #16]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	08da      	lsrs	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3208      	adds	r2, #8
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0203 	and.w	r2, r3, #3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80be 	beq.w	8001cba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b56:	4a61      	ldr	r2, [pc, #388]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d037      	beq.n	8001bf2 <HAL_GPIO_Init+0x23e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a57      	ldr	r2, [pc, #348]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d031      	beq.n	8001bee <HAL_GPIO_Init+0x23a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_GPIO_Init+0x334>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02b      	beq.n	8001bea <HAL_GPIO_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a55      	ldr	r2, [pc, #340]	; (8001cec <HAL_GPIO_Init+0x338>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d025      	beq.n	8001be6 <HAL_GPIO_Init+0x232>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	; (8001cf0 <HAL_GPIO_Init+0x33c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a53      	ldr	r2, [pc, #332]	; (8001cf4 <HAL_GPIO_Init+0x340>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x22a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a52      	ldr	r2, [pc, #328]	; (8001cf8 <HAL_GPIO_Init+0x344>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a51      	ldr	r2, [pc, #324]	; (8001cfc <HAL_GPIO_Init+0x348>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a50      	ldr	r2, [pc, #320]	; (8001d00 <HAL_GPIO_Init+0x34c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <HAL_GPIO_Init+0x350>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x21a>
 8001bca:	2309      	movs	r3, #9
 8001bcc:	e012      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bce:	230a      	movs	r3, #10
 8001bd0:	e010      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x240>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a34      	ldr	r2, [pc, #208]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <HAL_GPIO_Init+0x354>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae86 	bls.w	80019d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022400 	.word	0x40022400
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d28:	e003      	b.n	8001d32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d2a:	887b      	ldrh	r3, [r7, #2]
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	619a      	str	r2, [r3, #24]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d40:	b08f      	sub	sp, #60	; 0x3c
 8001d42:	af0a      	add	r7, sp, #40	; 0x28
 8001d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e116      	b.n	8001f7e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe ffa8 	bl	8000cc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2203      	movs	r2, #3
 8001d74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fe82 	bl	8004a98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	687e      	ldr	r6, [r7, #4]
 8001d9c:	466d      	mov	r5, sp
 8001d9e:	f106 0410 	add.w	r4, r6, #16
 8001da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db2:	1d33      	adds	r3, r6, #4
 8001db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db6:	6838      	ldr	r0, [r7, #0]
 8001db8:	f002 fe16 	bl	80049e8 <USB_CoreInit>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0d7      	b.n	8001f7e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fe70 	bl	8004aba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	e04a      	b.n	8001e76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	333d      	adds	r3, #61	; 0x3d
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	333c      	adds	r3, #60	; 0x3c
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	b298      	uxth	r0, r3
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	3344      	adds	r3, #68	; 0x44
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3340      	adds	r3, #64	; 0x40
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	3348      	adds	r3, #72	; 0x48
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	334c      	adds	r3, #76	; 0x4c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	3354      	adds	r3, #84	; 0x54
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3af      	bcc.n	8001de0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e044      	b.n	8001f10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d3b5      	bcc.n	8001e86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	687e      	ldr	r6, [r7, #4]
 8001f22:	466d      	mov	r5, sp
 8001f24:	f106 0410 	add.w	r4, r6, #16
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f38:	1d33      	adds	r3, r6, #4
 8001f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3c:	6838      	ldr	r0, [r7, #0]
 8001f3e:	f002 fe09 	bl	8004b54 <USB_DevInit>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e014      	b.n	8001f7e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d102      	bne.n	8001f72 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f80b 	bl	8001f88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f002 ffc7 	bl	8004f0a <USB_DevDisconnect>

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_PCDEx_ActivateLPM+0x44>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	10000003 	.word	0x10000003

08001fd0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000

08001ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e291      	b.n	800252a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8087 	beq.w	8002122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002014:	4b96      	ldr	r3, [pc, #600]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b04      	cmp	r3, #4
 800201e:	d00c      	beq.n	800203a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d112      	bne.n	8002052 <HAL_RCC_OscConfig+0x62>
 800202c:	4b90      	ldr	r3, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002038:	d10b      	bne.n	8002052 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203a:	4b8d      	ldr	r3, [pc, #564]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d06c      	beq.n	8002120 <HAL_RCC_OscConfig+0x130>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d168      	bne.n	8002120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e26b      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x7a>
 800205c:	4b84      	ldr	r3, [pc, #528]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a83      	ldr	r2, [pc, #524]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e02e      	b.n	80020c8 <HAL_RCC_OscConfig+0xd8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10c      	bne.n	800208c <HAL_RCC_OscConfig+0x9c>
 8002072:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a7e      	ldr	r2, [pc, #504]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b7c      	ldr	r3, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a7b      	ldr	r2, [pc, #492]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e01d      	b.n	80020c8 <HAL_RCC_OscConfig+0xd8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0xc0>
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800209c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b73      	ldr	r3, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a72      	ldr	r2, [pc, #456]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0xd8>
 80020b0:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a6e      	ldr	r2, [pc, #440]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a6b      	ldr	r2, [pc, #428]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7fe ffa6 	bl	8001020 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7fe ffa2 	bl	8001020 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e21f      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b61      	ldr	r3, [pc, #388]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe8>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe ff92 	bl	8001020 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7fe ff8e 	bl	8001020 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e20b      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f0      	bne.n	8002100 <HAL_RCC_OscConfig+0x110>
 800211e:	e000      	b.n	8002122 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d069      	beq.n	8002202 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4b50      	ldr	r3, [pc, #320]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800213a:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	2b08      	cmp	r3, #8
 8002144:	d11c      	bne.n	8002180 <HAL_RCC_OscConfig+0x190>
 8002146:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d116      	bne.n	8002180 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x17a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1df      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800216a:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	493d      	ldr	r1, [pc, #244]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217e:	e040      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b39      	ldr	r3, [pc, #228]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a38      	ldr	r2, [pc, #224]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7fe ff44 	bl	8001020 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7fe ff40 	bl	8001020 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e1bd      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4929      	ldr	r1, [pc, #164]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a26      	ldr	r2, [pc, #152]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff20 	bl	8001020 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7fe ff1c 	bl	8001020 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e199      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d038      	beq.n	8002280 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d019      	beq.n	800224a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221a:	4a15      	ldr	r2, [pc, #84]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe fefd 	bl	8001020 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe fef9 	bl	8001020 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e176      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800223e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x23a>
 8002248:	e01a      	b.n	8002280 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_RCC_OscConfig+0x280>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe fee3 	bl	8001020 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe fedf 	bl	8001020 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d903      	bls.n	8002274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e15c      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
 8002270:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ee      	bne.n	800225e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a4 	beq.w	80023d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228e:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800229a:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80022a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6413      	str	r3, [r2, #64]	; 0x40
 80022a6:	4b85      	ldr	r3, [pc, #532]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b2:	2301      	movs	r3, #1
 80022b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b6:	4b82      	ldr	r3, [pc, #520]	; (80024c0 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022c2:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <HAL_RCC_OscConfig+0x4d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_RCC_OscConfig+0x4d0>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ce:	f7fe fea7 	bl	8001020 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d6:	f7fe fea3 	bl	8001020 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b64      	cmp	r3, #100	; 0x64
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e120      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e8:	4b75      	ldr	r3, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4d0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x31a>
 80022fc:	4b6f      	ldr	r3, [pc, #444]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002300:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6713      	str	r3, [r2, #112]	; 0x70
 8002308:	e02d      	b.n	8002366 <HAL_RCC_OscConfig+0x376>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x33c>
 8002312:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	4a69      	ldr	r2, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002318:	f023 0301 	bic.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	; 0x70
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002322:	4a66      	ldr	r2, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	6713      	str	r3, [r2, #112]	; 0x70
 800232a:	e01c      	b.n	8002366 <HAL_RCC_OscConfig+0x376>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d10c      	bne.n	800234e <HAL_RCC_OscConfig+0x35e>
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	4a60      	ldr	r2, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800233a:	f043 0304 	orr.w	r3, r3, #4
 800233e:	6713      	str	r3, [r2, #112]	; 0x70
 8002340:	4b5e      	ldr	r3, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	6713      	str	r3, [r2, #112]	; 0x70
 800234c:	e00b      	b.n	8002366 <HAL_RCC_OscConfig+0x376>
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002352:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	4b58      	ldr	r3, [pc, #352]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235e:	4a57      	ldr	r2, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d015      	beq.n	800239a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7fe fe57 	bl	8001020 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7fe fe53 	bl	8001020 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	; 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e0ce      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800238c:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ee      	beq.n	8002376 <HAL_RCC_OscConfig+0x386>
 8002398:	e014      	b.n	80023c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7fe fe41 	bl	8001020 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fe3d 	bl	8001020 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e0b8      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b8:	4b40      	ldr	r3, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ee      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d105      	bne.n	80023d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ca:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80a4 	beq.w	8002528 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d06b      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d149      	bne.n	8002488 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a30      	ldr	r2, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80023fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fe0e 	bl	8001020 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe fe0a 	bl	8001020 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e087      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	019b      	lsls	r3, r3, #6
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	3b01      	subs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	4313      	orrs	r3, r2
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800244e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002452:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fdde 	bl	8001020 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fdda 	bl	8001020 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e057      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x478>
 8002486:	e04f      	b.n	8002528 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fdc4 	bl	8001020 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fdc0 	bl	8001020 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e03d      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_OscConfig+0x4cc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x4ac>
 80024ba:	e035      	b.n	8002528 <HAL_RCC_OscConfig+0x538>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x544>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d028      	beq.n	8002524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d121      	bne.n	8002524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d11a      	bne.n	8002524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f4:	4013      	ands	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d111      	bne.n	8002524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	3b01      	subs	r3, #1
 800250e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d107      	bne.n	8002524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0d0      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d910      	bls.n	8002580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b67      	ldr	r3, [pc, #412]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f023 020f 	bic.w	r2, r3, #15
 8002566:	4965      	ldr	r1, [pc, #404]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256e:	4b63      	ldr	r3, [pc, #396]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d001      	beq.n	8002580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e0b8      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002598:	4b59      	ldr	r3, [pc, #356]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0308 	and.w	r3, r3, #8
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a52      	ldr	r2, [pc, #328]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	494d      	ldr	r1, [pc, #308]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d040      	beq.n	800265c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d107      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d115      	bne.n	800261a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e07f      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b41      	ldr	r3, [pc, #260]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e073      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e06b      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4936      	ldr	r1, [pc, #216]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800262c:	f7fe fcf8 	bl	8001020 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7fe fcf4 	bl	8001020 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e053      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d210      	bcs.n	800268c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b24      	ldr	r3, [pc, #144]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	4922      	ldr	r1, [pc, #136]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b20      	ldr	r3, [pc, #128]	; (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e032      	b.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4916      	ldr	r1, [pc, #88]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	490e      	ldr	r1, [pc, #56]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ca:	f000 f821 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80026ce:	4602      	mov	r2, r0
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	490a      	ldr	r1, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x1cc>)
 80026dc:	5ccb      	ldrb	r3, [r1, r3]
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	4a09      	ldr	r2, [pc, #36]	; (8002708 <HAL_RCC_ClockConfig+0x1d0>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_RCC_ClockConfig+0x1d4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fb62 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	0800712c 	.word	0x0800712c
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004

08002710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002714:	b094      	sub	sp, #80	; 0x50
 8002716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	647b      	str	r3, [r7, #68]	; 0x44
 800271c:	2300      	movs	r3, #0
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002728:	4b79      	ldr	r3, [pc, #484]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d00d      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x40>
 8002734:	2b08      	cmp	r3, #8
 8002736:	f200 80e1 	bhi.w	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x34>
 800273e:	2b04      	cmp	r3, #4
 8002740:	d003      	beq.n	800274a <HAL_RCC_GetSysClockFreq+0x3a>
 8002742:	e0db      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b73      	ldr	r3, [pc, #460]	; (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002748:	e0db      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <HAL_RCC_GetSysClockFreq+0x208>)
 800274c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274e:	e0d8      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d063      	beq.n	800282e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	099b      	lsrs	r3, r3, #6
 800276c:	2200      	movs	r2, #0
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002770:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	633b      	str	r3, [r7, #48]	; 0x30
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
 800277e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	f04f 0000 	mov.w	r0, #0
 800278a:	f04f 0100 	mov.w	r1, #0
 800278e:	0159      	lsls	r1, r3, #5
 8002790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002794:	0150      	lsls	r0, r2, #5
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4621      	mov	r1, r4
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	6139      	str	r1, [r7, #16]
 80027a0:	4629      	mov	r1, r5
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027b4:	4659      	mov	r1, fp
 80027b6:	018b      	lsls	r3, r1, #6
 80027b8:	4651      	mov	r1, sl
 80027ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027be:	4651      	mov	r1, sl
 80027c0:	018a      	lsls	r2, r1, #6
 80027c2:	4651      	mov	r1, sl
 80027c4:	ebb2 0801 	subs.w	r8, r2, r1
 80027c8:	4659      	mov	r1, fp
 80027ca:	eb63 0901 	sbc.w	r9, r3, r1
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e2:	4690      	mov	r8, r2
 80027e4:	4699      	mov	r9, r3
 80027e6:	4623      	mov	r3, r4
 80027e8:	eb18 0303 	adds.w	r3, r8, r3
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	462b      	mov	r3, r5
 80027f0:	eb49 0303 	adc.w	r3, r9, r3
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f04f 0300 	mov.w	r3, #0
 80027fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002802:	4629      	mov	r1, r5
 8002804:	024b      	lsls	r3, r1, #9
 8002806:	4621      	mov	r1, r4
 8002808:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800280c:	4621      	mov	r1, r4
 800280e:	024a      	lsls	r2, r1, #9
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
 800281a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002820:	f7fd fcf6 	bl	8000210 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800282c:	e058      	b.n	80028e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	099b      	lsrs	r3, r3, #6
 8002834:	2200      	movs	r2, #0
 8002836:	4618      	mov	r0, r3
 8002838:	4611      	mov	r1, r2
 800283a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800283e:	623b      	str	r3, [r7, #32]
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002848:	4642      	mov	r2, r8
 800284a:	464b      	mov	r3, r9
 800284c:	f04f 0000 	mov.w	r0, #0
 8002850:	f04f 0100 	mov.w	r1, #0
 8002854:	0159      	lsls	r1, r3, #5
 8002856:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285a:	0150      	lsls	r0, r2, #5
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4641      	mov	r1, r8
 8002862:	ebb2 0a01 	subs.w	sl, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb63 0b01 	sbc.w	fp, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002878:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800287c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002880:	ebb2 040a 	subs.w	r4, r2, sl
 8002884:	eb63 050b 	sbc.w	r5, r3, fp
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	00eb      	lsls	r3, r5, #3
 8002892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4643      	mov	r3, r8
 800289e:	18e3      	adds	r3, r4, r3
 80028a0:	603b      	str	r3, [r7, #0]
 80028a2:	464b      	mov	r3, r9
 80028a4:	eb45 0303 	adc.w	r3, r5, r3
 80028a8:	607b      	str	r3, [r7, #4]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028b6:	4629      	mov	r1, r5
 80028b8:	028b      	lsls	r3, r1, #10
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c0:	4621      	mov	r1, r4
 80028c2:	028a      	lsls	r2, r1, #10
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	61fa      	str	r2, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	f7fd fc9c 	bl	8000210 <__aeabi_uldivmod>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4613      	mov	r3, r2
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	0c1b      	lsrs	r3, r3, #16
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	3301      	adds	r3, #1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80028f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028fa:	e002      	b.n	8002902 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetSysClockFreq+0x204>)
 80028fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002904:	4618      	mov	r0, r3
 8002906:	3750      	adds	r7, #80	; 0x50
 8002908:	46bd      	mov	sp, r7
 800290a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	00f42400 	.word	0x00f42400
 8002918:	007a1200 	.word	0x007a1200

0800291c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_GetHCLKFreq+0x14>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002938:	f7ff fff0 	bl	800291c <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	0a9b      	lsrs	r3, r3, #10
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4903      	ldr	r1, [pc, #12]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40023800 	.word	0x40023800
 8002958:	0800713c 	.word	0x0800713c

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002960:	f7ff ffdc 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002964:	4602      	mov	r2, r0
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	4903      	ldr	r1, [pc, #12]	; (8002980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002972:	5ccb      	ldrb	r3, [r1, r3]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002978:	4618      	mov	r0, r3
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	0800713c 	.word	0x0800713c

08002984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	220f      	movs	r2, #15
 8002992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_GetClockConfig+0x5c>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	08db      	lsrs	r3, r3, #3
 80029be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_RCC_GetClockConfig+0x60>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 020f 	and.w	r2, r3, #15
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40023c00 	.word	0x40023c00

080029e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a10:	4b69      	ldr	r3, [pc, #420]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a68      	ldr	r2, [pc, #416]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a1a:	6093      	str	r3, [r2, #8]
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a24:	4964      	ldr	r1, [pc, #400]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d017      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a50:	4959      	ldr	r1, [pc, #356]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a60:	d101      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d017      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a7e:	4b4e      	ldr	r3, [pc, #312]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	494a      	ldr	r1, [pc, #296]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002aba:	2301      	movs	r3, #1
 8002abc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808b 	beq.w	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	4a39      	ldr	r2, [pc, #228]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe fa96 	bl	8001020 <HAL_GetTick>
 8002af4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fe fa92 	bl	8001020 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e357      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d035      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d02e      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4b1e      	ldr	r3, [pc, #120]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	4a1a      	ldr	r2, [pc, #104]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b5c:	4b16      	ldr	r3, [pc, #88]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d114      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fa5a 	bl	8001020 <HAL_GetTick>
 8002b6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b70:	f7fe fa56 	bl	8001020 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e319      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ee      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bae:	400b      	ands	r3, r1
 8002bb0:	4901      	ldr	r1, [pc, #4]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
 8002bc0:	0ffffcff 	.word	0x0ffffcff
 8002bc4:	4baa      	ldr	r3, [pc, #680]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4aa9      	ldr	r2, [pc, #676]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bce:	6093      	str	r3, [r2, #8]
 8002bd0:	4ba7      	ldr	r3, [pc, #668]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bdc:	49a4      	ldr	r1, [pc, #656]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bee:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf4:	4a9e      	ldr	r2, [pc, #632]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bfe:	4b9c      	ldr	r3, [pc, #624]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	4999      	ldr	r1, [pc, #612]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c1c:	4b94      	ldr	r3, [pc, #592]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2a:	4991      	ldr	r1, [pc, #580]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c3e:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	4988      	ldr	r1, [pc, #544]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c60:	4b83      	ldr	r3, [pc, #524]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6e:	4980      	ldr	r1, [pc, #512]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c82:	4b7b      	ldr	r3, [pc, #492]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4977      	ldr	r1, [pc, #476]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca4:	4b72      	ldr	r3, [pc, #456]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f023 0203 	bic.w	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	496f      	ldr	r1, [pc, #444]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f023 020c 	bic.w	r2, r3, #12
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd4:	4966      	ldr	r1, [pc, #408]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ce8:	4b61      	ldr	r3, [pc, #388]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	495e      	ldr	r1, [pc, #376]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d0a:	4b59      	ldr	r3, [pc, #356]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d18:	4955      	ldr	r1, [pc, #340]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d2c:	4b50      	ldr	r3, [pc, #320]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	494d      	ldr	r1, [pc, #308]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d4e:	4b48      	ldr	r3, [pc, #288]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4944      	ldr	r1, [pc, #272]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	493c      	ldr	r1, [pc, #240]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da0:	4933      	ldr	r1, [pc, #204]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc2:	492b      	ldr	r1, [pc, #172]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ddc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de4:	4922      	ldr	r1, [pc, #136]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df4:	d101      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e06:	2301      	movs	r3, #1
 8002e08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	4912      	ldr	r1, [pc, #72]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00b      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e48:	4909      	ldr	r1, [pc, #36]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d006      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80d9 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a01      	ldr	r2, [pc, #4]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e6e:	e001      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e70:	40023800 	.word	0x40023800
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e76:	f7fe f8d3 	bl	8001020 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7e:	f7fe f8cf 	bl	8001020 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e194      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e90:	4b6c      	ldr	r3, [pc, #432]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d021      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11d      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eb0:	4b64      	ldr	r3, [pc, #400]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ebe:	4b61      	ldr	r3, [pc, #388]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec4:	0e1b      	lsrs	r3, r3, #24
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	019a      	lsls	r2, r3, #6
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	061b      	lsls	r3, r3, #24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	071b      	lsls	r3, r3, #28
 8002ee4:	4957      	ldr	r1, [pc, #348]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f16:	d129      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f18:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1e:	0c1b      	lsrs	r3, r3, #16
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2c:	0f1b      	lsrs	r3, r3, #28
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	019a      	lsls	r2, r3, #6
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	071b      	lsls	r3, r3, #28
 8002f4c:	493d      	ldr	r1, [pc, #244]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5a:	f023 021f 	bic.w	r2, r3, #31
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4937      	ldr	r1, [pc, #220]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f78:	4b32      	ldr	r3, [pc, #200]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f7e:	0e1b      	lsrs	r3, r3, #24
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f86:	4b2f      	ldr	r3, [pc, #188]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f8c:	0f1b      	lsrs	r3, r3, #28
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	019a      	lsls	r2, r3, #6
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	061b      	lsls	r3, r3, #24
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	071b      	lsls	r3, r3, #28
 8002fac:	4925      	ldr	r1, [pc, #148]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d011      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	019a      	lsls	r2, r3, #6
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	041b      	lsls	r3, r3, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	4919      	ldr	r1, [pc, #100]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe f816 	bl	8001020 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ff8:	f7fe f812 	bl	8001020 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0d7      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	f040 80cd 	bne.w	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a08      	ldr	r2, [pc, #32]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fd fff9 	bl	8001020 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003030:	e00a      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003032:	f7fd fff5 	bl	8001020 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d903      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0ba      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003044:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003048:	4b5e      	ldr	r3, [pc, #376]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d0ed      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d12a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800307e:	4b51      	ldr	r3, [pc, #324]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800308c:	4b4d      	ldr	r3, [pc, #308]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	0f1b      	lsrs	r3, r3, #28
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	019a      	lsls	r2, r3, #6
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	041b      	lsls	r3, r3, #16
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	061b      	lsls	r3, r3, #24
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	071b      	lsls	r3, r3, #28
 80030b2:	4944      	ldr	r1, [pc, #272]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030ba:	4b42      	ldr	r3, [pc, #264]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	493d      	ldr	r1, [pc, #244]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d022      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030e8:	d11d      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ea:	4b36      	ldr	r3, [pc, #216]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	0e1b      	lsrs	r3, r3, #24
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030f8:	4b32      	ldr	r3, [pc, #200]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	0f1b      	lsrs	r3, r3, #28
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	019a      	lsls	r2, r3, #6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	431a      	orrs	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	071b      	lsls	r3, r3, #28
 800311e:	4929      	ldr	r1, [pc, #164]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d028      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003132:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003138:	0e1b      	lsrs	r3, r3, #24
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003140:	4b20      	ldr	r3, [pc, #128]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	0c1b      	lsrs	r3, r3, #16
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	019a      	lsls	r2, r3, #6
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	041b      	lsls	r3, r3, #16
 8003158:	431a      	orrs	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	4917      	ldr	r1, [pc, #92]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800316e:	4b15      	ldr	r3, [pc, #84]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4911      	ldr	r1, [pc, #68]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0e      	ldr	r2, [pc, #56]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003190:	f7fd ff46 	bl	8001020 <HAL_GetTick>
 8003194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003198:	f7fd ff42 	bl	8001020 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e007      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b6:	d1ef      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e049      	b.n	800326e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f841 	bl	8003276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f000 fa00 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e054      	b.n	800334e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_TIM_Base_Start_IT+0xd0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d022      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d01d      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <HAL_TIM_Base_Start_IT+0xd4>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d018      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_TIM_Base_Start_IT+0xd8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a1f      	ldr	r2, [pc, #124]	; (8003368 <HAL_TIM_Base_Start_IT+0xdc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00e      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <HAL_TIM_Base_Start_IT+0xe0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d009      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_TIM_Base_Start_IT+0xe4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x80>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_Base_Start_IT+0xe8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d115      	bne.n	8003338 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_TIM_Base_Start_IT+0xec>)
 8003314:	4013      	ands	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d015      	beq.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003324:	d011      	beq.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003336:	e008      	b.n	800334a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0201 	orr.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e000      	b.n	800334c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40010000 	.word	0x40010000
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800
 8003368:	40000c00 	.word	0x40000c00
 800336c:	40010400 	.word	0x40010400
 8003370:	40014000 	.word	0x40014000
 8003374:	40001800 	.word	0x40001800
 8003378:	00010007 	.word	0x00010007

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b02      	cmp	r3, #2
 8003390:	d122      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b02      	cmp	r3, #2
 800339e:	d11b      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f06f 0202 	mvn.w	r2, #2
 80033a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f905 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80033c4:	e005      	b.n	80033d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f8f7 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f908 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d122      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0204 	mvn.w	r2, #4
 80033fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f8db 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 8003418:	e005      	b.n	8003426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8cd 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f8de 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d122      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b08      	cmp	r3, #8
 8003446:	d11b      	bne.n	8003480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0208 	mvn.w	r2, #8
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8b1 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8a3 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8b4 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0210 	mvn.w	r2, #16
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2208      	movs	r2, #8
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f887 	bl	80035ce <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f879 	bl	80035ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f88a 	bl	80035e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0201 	mvn.w	r2, #1
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd fa84 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350a:	2b80      	cmp	r3, #128	; 0x80
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b80      	cmp	r3, #128	; 0x80
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f91a 	bl	8003760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f90d 	bl	8003774 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d10e      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d107      	bne.n	8003586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f838 	bl	80035f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b20      	cmp	r3, #32
 8003592:	d10e      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f06f 0220 	mvn.w	r2, #32
 80035aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f8cd 	bl	800374c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a40      	ldr	r2, [pc, #256]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d013      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00f      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00b      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a3c      	ldr	r2, [pc, #240]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a3b      	ldr	r2, [pc, #236]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d003      	beq.n	800364c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a3a      	ldr	r2, [pc, #232]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d108      	bne.n	800365e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <TIM_Base_SetConfig+0x114>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366c:	d027      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <TIM_Base_SetConfig+0x118>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d023      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <TIM_Base_SetConfig+0x11c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <TIM_Base_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a29      	ldr	r2, [pc, #164]	; (8003730 <TIM_Base_SetConfig+0x124>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <TIM_Base_SetConfig+0x128>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a27      	ldr	r2, [pc, #156]	; (8003738 <TIM_Base_SetConfig+0x12c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <TIM_Base_SetConfig+0x130>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <TIM_Base_SetConfig+0x134>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <TIM_Base_SetConfig+0x138>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a23      	ldr	r2, [pc, #140]	; (8003748 <TIM_Base_SetConfig+0x13c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <TIM_Base_SetConfig+0x114>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d003      	beq.n	8003704 <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <TIM_Base_SetConfig+0x124>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d103      	bne.n	800370c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	615a      	str	r2, [r3, #20]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40010000 	.word	0x40010000
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00
 8003730:	40010400 	.word	0x40010400
 8003734:	40014000 	.word	0x40014000
 8003738:	40014400 	.word	0x40014400
 800373c:	40014800 	.word	0x40014800
 8003740:	40001800 	.word	0x40001800
 8003744:	40001c00 	.word	0x40001c00
 8003748:	40002000 	.word	0x40002000

0800374c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e040      	b.n	800381c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fa20 	bl	8000bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2224      	movs	r2, #36	; 0x24
 80037b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fc66 	bl	8004098 <UART_SetConfig>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e022      	b.n	800381c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 febe 	bl	8004560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 ff45 	bl	80046a4 <UART_CheckIdleState>
 800381a:	4603      	mov	r3, r0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003838:	2b20      	cmp	r3, #32
 800383a:	d171      	bne.n	8003920 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <HAL_UART_Transmit+0x24>
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e06a      	b.n	8003922 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800385a:	f7fd fbe1 	bl	8001020 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d108      	bne.n	800388c <HAL_UART_Transmit+0x68>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	e003      	b.n	8003894 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003894:	e02c      	b.n	80038f0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 ff36 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e038      	b.n	8003922 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3302      	adds	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e007      	b.n	80038de <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1cc      	bne.n	8003896 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 ff03 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e005      	b.n	8003922 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af02      	add	r7, sp, #8
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	603b      	str	r3, [r7, #0]
 8003936:	4613      	mov	r3, r2
 8003938:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	2b20      	cmp	r3, #32
 8003942:	f040 80b1 	bne.w	8003aa8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Receive+0x28>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0a9      	b.n	8003aaa <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2222      	movs	r2, #34	; 0x22
 8003962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396c:	f7fd fb58 	bl	8001020 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	88fa      	ldrh	r2, [r7, #6]
 800397e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d10e      	bne.n	80039aa <HAL_UART_Receive+0x80>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_UART_Receive+0x76>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800399a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800399e:	e02d      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039a8:	e028      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_UART_Receive+0xa4>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d104      	bne.n	80039c4 <HAL_UART_Receive+0x9a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	22ff      	movs	r2, #255	; 0xff
 80039be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039c2:	e01b      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	227f      	movs	r2, #127	; 0x7f
 80039c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039cc:	e016      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d6:	d10d      	bne.n	80039f4 <HAL_UART_Receive+0xca>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_UART_Receive+0xc0>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	227f      	movs	r2, #127	; 0x7f
 80039e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039e8:	e008      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	223f      	movs	r2, #63	; 0x3f
 80039ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039f2:	e003      	b.n	80039fc <HAL_UART_Receive+0xd2>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d108      	bne.n	8003a20 <HAL_UART_Receive+0xf6>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e003      	b.n	8003a28 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003a28:	e032      	b.n	8003a90 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2200      	movs	r2, #0
 8003a32:	2120      	movs	r1, #32
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fe6c 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e032      	b.n	8003aaa <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	8a7b      	ldrh	r3, [r7, #18]
 8003a54:	4013      	ands	r3, r2
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	3302      	adds	r3, #2
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	e00c      	b.n	8003a7e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	8a7b      	ldrh	r3, [r7, #18]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	4013      	ands	r3, r2
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1c6      	bne.n	8003a2a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b0ba      	sub	sp, #232	; 0xe8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8297 	beq.w	8004040 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
      }
      return;
 8003b1a:	e291      	b.n	8004040 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8117 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003b36:	4b85      	ldr	r3, [pc, #532]	; (8003d4c <HAL_UART_IRQHandler+0x298>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 810a 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 81fd 	beq.w	8004044 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04f      	beq.n	8003d36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fe01 	bl	800489e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d141      	bne.n	8003d2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003cda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d9      	bne.n	8003caa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <HAL_UART_IRQHandler+0x29c>)
 8003d04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fb0a 	bl	8001324 <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00f      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9a0 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00b      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f99c 	bl	800406c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e007      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f998 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d44:	e17e      	b.n	8004044 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d46:	bf00      	nop
    return;
 8003d48:	e17c      	b.n	8004044 <HAL_UART_IRQHandler+0x590>
 8003d4a:	bf00      	nop
 8003d4c:	04000120 	.word	0x04000120
 8003d50:	08004967 	.word	0x08004967

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 814c 	bne.w	8003ff6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8145 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 813e 	beq.w	8003ff6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2210      	movs	r2, #16
 8003d80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	f040 80b6 	bne.w	8003efe <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8150 	beq.w	8004048 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003db2:	429a      	cmp	r2, r3
 8003db4:	f080 8148 	bcs.w	8004048 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ddc:	e853 3f00 	ldrex	r3, [r3]
 8003de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1da      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3308      	adds	r3, #8
 8003e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e1      	bne.n	8003e1a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	3308      	adds	r3, #8
 8003e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e82:	e841 2300 	strex	r3, r2, [r1]
 8003e86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1e3      	bne.n	8003e56 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea4:	e853 3f00 	ldrex	r3, [r3]
 8003ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eac:	f023 0310 	bic.w	r3, r3, #16
 8003eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ec0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e4      	bne.n	8003e9c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd f9b4 	bl	8001244 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8c2 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efc:	e0a4      	b.n	8004048 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8096 	beq.w	800404c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003f20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8091 	beq.w	800404c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e4      	bne.n	8003f2a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	3308      	adds	r3, #8
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f84:	633a      	str	r2, [r7, #48]	; 0x30
 8003f86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8c:	e841 2300 	strex	r3, r2, [r1]
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e3      	bne.n	8003f60 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0310 	bic.w	r3, r3, #16
 8003fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	617b      	str	r3, [r7, #20]
   return(result);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e4      	bne.n	8003fac <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f846 	bl	8004080 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff4:	e02a      	b.n	800404c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00e      	beq.n	8004020 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d008      	beq.n	8004020 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
    }
    return;
 800401e:	e017      	b.n	8004050 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d012      	beq.n	8004052 <HAL_UART_IRQHandler+0x59e>
 800402c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00c      	beq.n	8004052 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fcaa 	bl	8004992 <UART_EndTransmit_IT>
    return;
 800403e:	e008      	b.n	8004052 <HAL_UART_IRQHandler+0x59e>
      return;
 8004040:	bf00      	nop
 8004042:	e006      	b.n	8004052 <HAL_UART_IRQHandler+0x59e>
    return;
 8004044:	bf00      	nop
 8004046:	e004      	b.n	8004052 <HAL_UART_IRQHandler+0x59e>
      return;
 8004048:	bf00      	nop
 800404a:	e002      	b.n	8004052 <HAL_UART_IRQHandler+0x59e>
      return;
 800404c:	bf00      	nop
 800404e:	e000      	b.n	8004052 <HAL_UART_IRQHandler+0x59e>
    return;
 8004050:	bf00      	nop
  }

}
 8004052:	37e8      	adds	r7, #232	; 0xe8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004074:	bf00      	nop
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4ba6      	ldr	r3, [pc, #664]	; (800435c <UART_SetConfig+0x2c4>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	430a      	orrs	r2, r1
 8004108:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a94      	ldr	r2, [pc, #592]	; (8004360 <UART_SetConfig+0x2c8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d120      	bne.n	8004156 <UART_SetConfig+0xbe>
 8004114:	4b93      	ldr	r3, [pc, #588]	; (8004364 <UART_SetConfig+0x2cc>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	2b03      	cmp	r3, #3
 8004120:	d816      	bhi.n	8004150 <UART_SetConfig+0xb8>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x90>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	08004145 	.word	0x08004145
 8004130:	0800413f 	.word	0x0800413f
 8004134:	0800414b 	.word	0x0800414b
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e150      	b.n	80043e0 <UART_SetConfig+0x348>
 800413e:	2302      	movs	r3, #2
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e14d      	b.n	80043e0 <UART_SetConfig+0x348>
 8004144:	2304      	movs	r3, #4
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e14a      	b.n	80043e0 <UART_SetConfig+0x348>
 800414a:	2308      	movs	r3, #8
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e147      	b.n	80043e0 <UART_SetConfig+0x348>
 8004150:	2310      	movs	r3, #16
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	e144      	b.n	80043e0 <UART_SetConfig+0x348>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a83      	ldr	r2, [pc, #524]	; (8004368 <UART_SetConfig+0x2d0>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d132      	bne.n	80041c6 <UART_SetConfig+0x12e>
 8004160:	4b80      	ldr	r3, [pc, #512]	; (8004364 <UART_SetConfig+0x2cc>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b0c      	cmp	r3, #12
 800416c:	d828      	bhi.n	80041c0 <UART_SetConfig+0x128>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0xdc>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	080041a9 	.word	0x080041a9
 8004178:	080041c1 	.word	0x080041c1
 800417c:	080041c1 	.word	0x080041c1
 8004180:	080041c1 	.word	0x080041c1
 8004184:	080041b5 	.word	0x080041b5
 8004188:	080041c1 	.word	0x080041c1
 800418c:	080041c1 	.word	0x080041c1
 8004190:	080041c1 	.word	0x080041c1
 8004194:	080041af 	.word	0x080041af
 8004198:	080041c1 	.word	0x080041c1
 800419c:	080041c1 	.word	0x080041c1
 80041a0:	080041c1 	.word	0x080041c1
 80041a4:	080041bb 	.word	0x080041bb
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
 80041ac:	e118      	b.n	80043e0 <UART_SetConfig+0x348>
 80041ae:	2302      	movs	r3, #2
 80041b0:	77fb      	strb	r3, [r7, #31]
 80041b2:	e115      	b.n	80043e0 <UART_SetConfig+0x348>
 80041b4:	2304      	movs	r3, #4
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e112      	b.n	80043e0 <UART_SetConfig+0x348>
 80041ba:	2308      	movs	r3, #8
 80041bc:	77fb      	strb	r3, [r7, #31]
 80041be:	e10f      	b.n	80043e0 <UART_SetConfig+0x348>
 80041c0:	2310      	movs	r3, #16
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e10c      	b.n	80043e0 <UART_SetConfig+0x348>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a68      	ldr	r2, [pc, #416]	; (800436c <UART_SetConfig+0x2d4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d120      	bne.n	8004212 <UART_SetConfig+0x17a>
 80041d0:	4b64      	ldr	r3, [pc, #400]	; (8004364 <UART_SetConfig+0x2cc>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041da:	2b30      	cmp	r3, #48	; 0x30
 80041dc:	d013      	beq.n	8004206 <UART_SetConfig+0x16e>
 80041de:	2b30      	cmp	r3, #48	; 0x30
 80041e0:	d814      	bhi.n	800420c <UART_SetConfig+0x174>
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d009      	beq.n	80041fa <UART_SetConfig+0x162>
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d810      	bhi.n	800420c <UART_SetConfig+0x174>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <UART_SetConfig+0x15c>
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d006      	beq.n	8004200 <UART_SetConfig+0x168>
 80041f2:	e00b      	b.n	800420c <UART_SetConfig+0x174>
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e0f2      	b.n	80043e0 <UART_SetConfig+0x348>
 80041fa:	2302      	movs	r3, #2
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e0ef      	b.n	80043e0 <UART_SetConfig+0x348>
 8004200:	2304      	movs	r3, #4
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e0ec      	b.n	80043e0 <UART_SetConfig+0x348>
 8004206:	2308      	movs	r3, #8
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e0e9      	b.n	80043e0 <UART_SetConfig+0x348>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e0e6      	b.n	80043e0 <UART_SetConfig+0x348>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a56      	ldr	r2, [pc, #344]	; (8004370 <UART_SetConfig+0x2d8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d120      	bne.n	800425e <UART_SetConfig+0x1c6>
 800421c:	4b51      	ldr	r3, [pc, #324]	; (8004364 <UART_SetConfig+0x2cc>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004226:	2bc0      	cmp	r3, #192	; 0xc0
 8004228:	d013      	beq.n	8004252 <UART_SetConfig+0x1ba>
 800422a:	2bc0      	cmp	r3, #192	; 0xc0
 800422c:	d814      	bhi.n	8004258 <UART_SetConfig+0x1c0>
 800422e:	2b80      	cmp	r3, #128	; 0x80
 8004230:	d009      	beq.n	8004246 <UART_SetConfig+0x1ae>
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d810      	bhi.n	8004258 <UART_SetConfig+0x1c0>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <UART_SetConfig+0x1a8>
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d006      	beq.n	800424c <UART_SetConfig+0x1b4>
 800423e:	e00b      	b.n	8004258 <UART_SetConfig+0x1c0>
 8004240:	2300      	movs	r3, #0
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e0cc      	b.n	80043e0 <UART_SetConfig+0x348>
 8004246:	2302      	movs	r3, #2
 8004248:	77fb      	strb	r3, [r7, #31]
 800424a:	e0c9      	b.n	80043e0 <UART_SetConfig+0x348>
 800424c:	2304      	movs	r3, #4
 800424e:	77fb      	strb	r3, [r7, #31]
 8004250:	e0c6      	b.n	80043e0 <UART_SetConfig+0x348>
 8004252:	2308      	movs	r3, #8
 8004254:	77fb      	strb	r3, [r7, #31]
 8004256:	e0c3      	b.n	80043e0 <UART_SetConfig+0x348>
 8004258:	2310      	movs	r3, #16
 800425a:	77fb      	strb	r3, [r7, #31]
 800425c:	e0c0      	b.n	80043e0 <UART_SetConfig+0x348>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a44      	ldr	r2, [pc, #272]	; (8004374 <UART_SetConfig+0x2dc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d125      	bne.n	80042b4 <UART_SetConfig+0x21c>
 8004268:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <UART_SetConfig+0x2cc>)
 800426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d017      	beq.n	80042a8 <UART_SetConfig+0x210>
 8004278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427c:	d817      	bhi.n	80042ae <UART_SetConfig+0x216>
 800427e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004282:	d00b      	beq.n	800429c <UART_SetConfig+0x204>
 8004284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004288:	d811      	bhi.n	80042ae <UART_SetConfig+0x216>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <UART_SetConfig+0x1fe>
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d006      	beq.n	80042a2 <UART_SetConfig+0x20a>
 8004294:	e00b      	b.n	80042ae <UART_SetConfig+0x216>
 8004296:	2300      	movs	r3, #0
 8004298:	77fb      	strb	r3, [r7, #31]
 800429a:	e0a1      	b.n	80043e0 <UART_SetConfig+0x348>
 800429c:	2302      	movs	r3, #2
 800429e:	77fb      	strb	r3, [r7, #31]
 80042a0:	e09e      	b.n	80043e0 <UART_SetConfig+0x348>
 80042a2:	2304      	movs	r3, #4
 80042a4:	77fb      	strb	r3, [r7, #31]
 80042a6:	e09b      	b.n	80043e0 <UART_SetConfig+0x348>
 80042a8:	2308      	movs	r3, #8
 80042aa:	77fb      	strb	r3, [r7, #31]
 80042ac:	e098      	b.n	80043e0 <UART_SetConfig+0x348>
 80042ae:	2310      	movs	r3, #16
 80042b0:	77fb      	strb	r3, [r7, #31]
 80042b2:	e095      	b.n	80043e0 <UART_SetConfig+0x348>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a2f      	ldr	r2, [pc, #188]	; (8004378 <UART_SetConfig+0x2e0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d125      	bne.n	800430a <UART_SetConfig+0x272>
 80042be:	4b29      	ldr	r3, [pc, #164]	; (8004364 <UART_SetConfig+0x2cc>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042cc:	d017      	beq.n	80042fe <UART_SetConfig+0x266>
 80042ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d2:	d817      	bhi.n	8004304 <UART_SetConfig+0x26c>
 80042d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d8:	d00b      	beq.n	80042f2 <UART_SetConfig+0x25a>
 80042da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042de:	d811      	bhi.n	8004304 <UART_SetConfig+0x26c>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <UART_SetConfig+0x254>
 80042e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e8:	d006      	beq.n	80042f8 <UART_SetConfig+0x260>
 80042ea:	e00b      	b.n	8004304 <UART_SetConfig+0x26c>
 80042ec:	2301      	movs	r3, #1
 80042ee:	77fb      	strb	r3, [r7, #31]
 80042f0:	e076      	b.n	80043e0 <UART_SetConfig+0x348>
 80042f2:	2302      	movs	r3, #2
 80042f4:	77fb      	strb	r3, [r7, #31]
 80042f6:	e073      	b.n	80043e0 <UART_SetConfig+0x348>
 80042f8:	2304      	movs	r3, #4
 80042fa:	77fb      	strb	r3, [r7, #31]
 80042fc:	e070      	b.n	80043e0 <UART_SetConfig+0x348>
 80042fe:	2308      	movs	r3, #8
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e06d      	b.n	80043e0 <UART_SetConfig+0x348>
 8004304:	2310      	movs	r3, #16
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e06a      	b.n	80043e0 <UART_SetConfig+0x348>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <UART_SetConfig+0x2e4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d138      	bne.n	8004386 <UART_SetConfig+0x2ee>
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <UART_SetConfig+0x2cc>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800431e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004322:	d017      	beq.n	8004354 <UART_SetConfig+0x2bc>
 8004324:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004328:	d82a      	bhi.n	8004380 <UART_SetConfig+0x2e8>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432e:	d00b      	beq.n	8004348 <UART_SetConfig+0x2b0>
 8004330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004334:	d824      	bhi.n	8004380 <UART_SetConfig+0x2e8>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <UART_SetConfig+0x2aa>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433e:	d006      	beq.n	800434e <UART_SetConfig+0x2b6>
 8004340:	e01e      	b.n	8004380 <UART_SetConfig+0x2e8>
 8004342:	2300      	movs	r3, #0
 8004344:	77fb      	strb	r3, [r7, #31]
 8004346:	e04b      	b.n	80043e0 <UART_SetConfig+0x348>
 8004348:	2302      	movs	r3, #2
 800434a:	77fb      	strb	r3, [r7, #31]
 800434c:	e048      	b.n	80043e0 <UART_SetConfig+0x348>
 800434e:	2304      	movs	r3, #4
 8004350:	77fb      	strb	r3, [r7, #31]
 8004352:	e045      	b.n	80043e0 <UART_SetConfig+0x348>
 8004354:	2308      	movs	r3, #8
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e042      	b.n	80043e0 <UART_SetConfig+0x348>
 800435a:	bf00      	nop
 800435c:	efff69f3 	.word	0xefff69f3
 8004360:	40011000 	.word	0x40011000
 8004364:	40023800 	.word	0x40023800
 8004368:	40004400 	.word	0x40004400
 800436c:	40004800 	.word	0x40004800
 8004370:	40004c00 	.word	0x40004c00
 8004374:	40005000 	.word	0x40005000
 8004378:	40011400 	.word	0x40011400
 800437c:	40007800 	.word	0x40007800
 8004380:	2310      	movs	r3, #16
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e02c      	b.n	80043e0 <UART_SetConfig+0x348>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <UART_SetConfig+0x4bc>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d125      	bne.n	80043dc <UART_SetConfig+0x344>
 8004390:	4b71      	ldr	r3, [pc, #452]	; (8004558 <UART_SetConfig+0x4c0>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004396:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800439a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800439e:	d017      	beq.n	80043d0 <UART_SetConfig+0x338>
 80043a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043a4:	d817      	bhi.n	80043d6 <UART_SetConfig+0x33e>
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043aa:	d00b      	beq.n	80043c4 <UART_SetConfig+0x32c>
 80043ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b0:	d811      	bhi.n	80043d6 <UART_SetConfig+0x33e>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <UART_SetConfig+0x326>
 80043b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ba:	d006      	beq.n	80043ca <UART_SetConfig+0x332>
 80043bc:	e00b      	b.n	80043d6 <UART_SetConfig+0x33e>
 80043be:	2300      	movs	r3, #0
 80043c0:	77fb      	strb	r3, [r7, #31]
 80043c2:	e00d      	b.n	80043e0 <UART_SetConfig+0x348>
 80043c4:	2302      	movs	r3, #2
 80043c6:	77fb      	strb	r3, [r7, #31]
 80043c8:	e00a      	b.n	80043e0 <UART_SetConfig+0x348>
 80043ca:	2304      	movs	r3, #4
 80043cc:	77fb      	strb	r3, [r7, #31]
 80043ce:	e007      	b.n	80043e0 <UART_SetConfig+0x348>
 80043d0:	2308      	movs	r3, #8
 80043d2:	77fb      	strb	r3, [r7, #31]
 80043d4:	e004      	b.n	80043e0 <UART_SetConfig+0x348>
 80043d6:	2310      	movs	r3, #16
 80043d8:	77fb      	strb	r3, [r7, #31]
 80043da:	e001      	b.n	80043e0 <UART_SetConfig+0x348>
 80043dc:	2310      	movs	r3, #16
 80043de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	d15b      	bne.n	80044a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d828      	bhi.n	8004442 <UART_SetConfig+0x3aa>
 80043f0:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x360>)
 80043f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f6:	bf00      	nop
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004443 	.word	0x08004443
 8004408:	08004433 	.word	0x08004433
 800440c:	08004443 	.word	0x08004443
 8004410:	08004443 	.word	0x08004443
 8004414:	08004443 	.word	0x08004443
 8004418:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441c:	f7fe fa8a 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e013      	b.n	800444c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fa9a 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e00f      	b.n	800444c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b4b      	ldr	r3, [pc, #300]	; (800455c <UART_SetConfig+0x4c4>)
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e00c      	b.n	800444c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe f96d 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 8004436:	61b8      	str	r0, [r7, #24]
        break;
 8004438:	e008      	b.n	800444c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	61bb      	str	r3, [r7, #24]
        break;
 8004440:	e004      	b.n	800444c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	77bb      	strb	r3, [r7, #30]
        break;
 800444a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d074      	beq.n	800453c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	005a      	lsls	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	085b      	lsrs	r3, r3, #1
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b0f      	cmp	r3, #15
 800446c:	d916      	bls.n	800449c <UART_SetConfig+0x404>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d212      	bcs.n	800449c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	b29b      	uxth	r3, r3
 800447a:	f023 030f 	bic.w	r3, r3, #15
 800447e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	b29b      	uxth	r3, r3
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	b29a      	uxth	r2, r3
 800448c:	89fb      	ldrh	r3, [r7, #14]
 800448e:	4313      	orrs	r3, r2
 8004490:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	89fa      	ldrh	r2, [r7, #14]
 8004498:	60da      	str	r2, [r3, #12]
 800449a:	e04f      	b.n	800453c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	77bb      	strb	r3, [r7, #30]
 80044a0:	e04c      	b.n	800453c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a2:	7ffb      	ldrb	r3, [r7, #31]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d828      	bhi.n	80044fa <UART_SetConfig+0x462>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x418>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044fb 	.word	0x080044fb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fa2e 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80044d8:	61b8      	str	r0, [r7, #24]
        break;
 80044da:	e013      	b.n	8004504 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe fa3e 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 80044e0:	61b8      	str	r0, [r7, #24]
        break;
 80044e2:	e00f      	b.n	8004504 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <UART_SetConfig+0x4c4>)
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e00c      	b.n	8004504 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe f911 	bl	8002710 <HAL_RCC_GetSysClockFreq>
 80044ee:	61b8      	str	r0, [r7, #24]
        break;
 80044f0:	e008      	b.n	8004504 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	61bb      	str	r3, [r7, #24]
        break;
 80044f8:	e004      	b.n	8004504 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	77bb      	strb	r3, [r7, #30]
        break;
 8004502:	bf00      	nop
    }

    if (pclk != 0U)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d018      	beq.n	800453c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085a      	lsrs	r2, r3, #1
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	441a      	add	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	fbb2 f3f3 	udiv	r3, r2, r3
 800451c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d909      	bls.n	8004538 <UART_SetConfig+0x4a0>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452a:	d205      	bcs.n	8004538 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e001      	b.n	800453c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004548:	7fbb      	ldrb	r3, [r7, #30]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	40007c00 	.word	0x40007c00
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400

08004560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01a      	beq.n	8004676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800465e:	d10a      	bne.n	8004676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	605a      	str	r2, [r3, #4]
  }
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b4:	f7fc fcb4 	bl	8001020 <HAL_GetTick>
 80046b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0308 	and.w	r3, r3, #8
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d10e      	bne.n	80046e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f81b 	bl	8004712 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e011      	b.n	800470a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b09c      	sub	sp, #112	; 0x70
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4613      	mov	r3, r2
 8004720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004722:	e0a7      	b.n	8004874 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	f000 80a3 	beq.w	8004874 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fc fc77 	bl	8001020 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <UART_WaitOnFlagUntilTimeout+0x32>
 800473e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004740:	2b00      	cmp	r3, #0
 8004742:	d13f      	bne.n	80047c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004758:	667b      	str	r3, [r7, #100]	; 0x64
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004764:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800476a:	e841 2300 	strex	r3, r2, [r1]
 800476e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1e6      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3308      	adds	r3, #8
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	663b      	str	r3, [r7, #96]	; 0x60
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3308      	adds	r3, #8
 8004794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004796:	64ba      	str	r2, [r7, #72]	; 0x48
 8004798:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800479c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e5      	bne.n	8004776 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2220      	movs	r2, #32
 80047ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e068      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d050      	beq.n	8004874 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e0:	d148      	bne.n	8004874 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	e853 3f00 	ldrex	r3, [r3]
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e6      	bne.n	80047ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	613b      	str	r3, [r7, #16]
   return(result);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	66bb      	str	r3, [r7, #104]	; 0x68
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3308      	adds	r3, #8
 800483c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800483e:	623a      	str	r2, [r7, #32]
 8004840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	69f9      	ldr	r1, [r7, #28]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	61bb      	str	r3, [r7, #24]
   return(result);
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e5      	bne.n	800481e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e010      	b.n	8004896 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	429a      	cmp	r2, r3
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	461a      	mov	r2, r3
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	429a      	cmp	r2, r3
 8004890:	f43f af48 	beq.w	8004724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3770      	adds	r7, #112	; 0x70
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800489e:	b480      	push	{r7}
 80048a0:	b095      	sub	sp, #84	; 0x54
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	643b      	str	r3, [r7, #64]	; 0x40
 80048c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	2b01      	cmp	r3, #1
 8004912:	d118      	bne.n	8004946 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	60bb      	str	r3, [r7, #8]
   return(result);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f023 0310 	bic.w	r3, r3, #16
 8004928:	647b      	str	r3, [r7, #68]	; 0x44
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004932:	61bb      	str	r3, [r7, #24]
 8004934:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	613b      	str	r3, [r7, #16]
   return(result);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e6      	bne.n	8004914 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	669a      	str	r2, [r3, #104]	; 0x68
}
 800495a:	bf00      	nop
 800495c:	3754      	adds	r7, #84	; 0x54
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fb71 	bl	800406c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b088      	sub	sp, #32
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	613b      	str	r3, [r7, #16]
   return(result);
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff fb3d 	bl	8004058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049de:	bf00      	nop
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e8:	b084      	sub	sp, #16
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	f107 001c 	add.w	r0, r7, #28
 80049f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d120      	bne.n	8004a42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <USB_CoreInit+0xac>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa96 	bl	8004f68 <USB_CoreReset>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	e010      	b.n	8004a64 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa8a 	bl	8004f68 <USB_CoreReset>
 8004a54:	4603      	mov	r3, r0
 8004a56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10b      	bne.n	8004a82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f043 0206 	orr.w	r2, r3, #6
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a8e:	b004      	add	sp, #16
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	ffbdffbf 	.word	0xffbdffbf

08004a98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 0201 	bic.w	r2, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d115      	bne.n	8004b08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f7fc faa5 	bl	8001038 <HAL_Delay>
      ms++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa29 	bl	8004f4c <USB_GetMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d01e      	beq.n	8004b3e <USB_SetCurrentMode+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b31      	cmp	r3, #49	; 0x31
 8004b04:	d9f0      	bls.n	8004ae8 <USB_SetCurrentMode+0x2e>
 8004b06:	e01a      	b.n	8004b3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d115      	bne.n	8004b3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	f7fc fa8c 	bl	8001038 <HAL_Delay>
      ms++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa10 	bl	8004f4c <USB_GetMode>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <USB_SetCurrentMode+0x84>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b31      	cmp	r3, #49	; 0x31
 8004b36:	d9f0      	bls.n	8004b1a <USB_SetCurrentMode+0x60>
 8004b38:	e001      	b.n	8004b3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e005      	b.n	8004b4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b32      	cmp	r3, #50	; 0x32
 8004b42:	d101      	bne.n	8004b48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e000      	b.n	8004b4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b54:	b084      	sub	sp, #16
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e009      	b.n	8004b88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3340      	adds	r3, #64	; 0x40
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3301      	adds	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	2b0e      	cmp	r3, #14
 8004b8c:	d9f2      	bls.n	8004b74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11c      	bne.n	8004bce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba2:	f043 0302 	orr.w	r3, r3, #2
 8004ba6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e005      	b.n	8004bda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004be0:	461a      	mov	r2, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	4619      	mov	r1, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	680b      	ldr	r3, [r1, #0]
 8004bf8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10c      	bne.n	8004c1a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c06:	2100      	movs	r1, #0
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f965 	bl	8004ed8 <USB_SetDevSpeed>
 8004c0e:	e008      	b.n	8004c22 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c10:	2101      	movs	r1, #1
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f960 	bl	8004ed8 <USB_SetDevSpeed>
 8004c18:	e003      	b.n	8004c22 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f95b 	bl	8004ed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c22:	2110      	movs	r1, #16
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f8f3 	bl	8004e10 <USB_FlushTxFifo>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f91f 	bl	8004e78 <USB_FlushRxFifo>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	461a      	mov	r2, r3
 8004c58:	2300      	movs	r3, #0
 8004c5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c62:	461a      	mov	r2, r3
 8004c64:	2300      	movs	r3, #0
 8004c66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	e043      	b.n	8004cf6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d118      	bne.n	8004cb8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10a      	bne.n	8004ca2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c9e:	6013      	str	r3, [r2, #0]
 8004ca0:	e013      	b.n	8004cca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	e008      	b.n	8004cca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2300      	movs	r3, #0
 8004cda:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3b7      	bcc.n	8004c6e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cfe:	2300      	movs	r3, #0
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e043      	b.n	8004d8c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d1a:	d118      	bne.n	8004d4e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e013      	b.n	8004d60 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	461a      	mov	r2, r3
 8004d46:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e008      	b.n	8004d60 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d3b7      	bcc.n	8004d04 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004db4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f043 0210 	orr.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <USB_DevInit+0x2b4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f043 0208 	orr.w	r2, r3, #8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <USB_DevInit+0x2b8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e04:	b004      	add	sp, #16
 8004e06:	4770      	bx	lr
 8004e08:	803c3800 	.word	0x803c3800
 8004e0c:	40000004 	.word	0x40000004

08004e10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <USB_FlushTxFifo+0x64>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e01b      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	daf2      	bge.n	8004e1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	019b      	lsls	r3, r3, #6
 8004e40:	f043 0220 	orr.w	r2, r3, #32
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a08      	ldr	r2, [pc, #32]	; (8004e74 <USB_FlushTxFifo+0x64>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e006      	b.n	8004e68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d0f0      	beq.n	8004e48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	00030d40 	.word	0x00030d40

08004e78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <USB_FlushRxFifo+0x5c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e018      	b.n	8004ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	daf2      	bge.n	8004e84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a08      	ldr	r2, [pc, #32]	; (8004ed4 <USB_FlushRxFifo+0x5c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e006      	b.n	8004ec8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d0f0      	beq.n	8004ea8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	00030d40 	.word	0x00030d40

08004ed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b085      	sub	sp, #20
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f24:	f023 0303 	bic.w	r3, r3, #3
 8004f28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0301 	and.w	r3, r3, #1
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <USB_CoreReset+0x64>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d901      	bls.n	8004f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e01b      	b.n	8004fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	daf2      	bge.n	8004f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4a09      	ldr	r2, [pc, #36]	; (8004fcc <USB_CoreReset+0x64>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e006      	b.n	8004fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d0f0      	beq.n	8004f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	00030d40 	.word	0x00030d40

08004fd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fe2:	2b84      	cmp	r3, #132	; 0x84
 8004fe4:	d005      	beq.n	8004ff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4413      	add	r3, r2
 8004fee:	3303      	adds	r3, #3
 8004ff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005004:	f000 fede 	bl	8005dc4 <vTaskStartScheduler>
  
  return osOK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	bd80      	pop	{r7, pc}

0800500e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800500e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005010:	b089      	sub	sp, #36	; 0x24
 8005012:	af04      	add	r7, sp, #16
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d020      	beq.n	8005062 <osThreadCreate+0x54>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01c      	beq.n	8005062 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685c      	ldr	r4, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691e      	ldr	r6, [r3, #16]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff ffc8 	bl	8004fd0 <makeFreeRtosPriority>
 8005040:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800504a:	9202      	str	r2, [sp, #8]
 800504c:	9301      	str	r3, [sp, #4]
 800504e:	9100      	str	r1, [sp, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4632      	mov	r2, r6
 8005054:	4629      	mov	r1, r5
 8005056:	4620      	mov	r0, r4
 8005058:	f000 fce2 	bl	8005a20 <xTaskCreateStatic>
 800505c:	4603      	mov	r3, r0
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	e01c      	b.n	800509c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685c      	ldr	r4, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800506e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ffaa 	bl	8004fd0 <makeFreeRtosPriority>
 800507c:	4602      	mov	r2, r0
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	9200      	str	r2, [sp, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	4632      	mov	r2, r6
 800508a:	4629      	mov	r1, r5
 800508c:	4620      	mov	r0, r4
 800508e:	f000 fd2a 	bl	8005ae6 <xTaskCreate>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <osDelay+0x16>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e000      	b.n	80050be <osDelay+0x18>
 80050bc:	2301      	movs	r3, #1
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fe4a 	bl	8005d58 <vTaskDelay>
  
  return osOK;
 80050c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80050ce:	b590      	push	{r4, r7, lr}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af02      	add	r7, sp, #8
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d011      	beq.n	8005104 <osMessageCreate+0x36>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2400      	movs	r4, #0
 80050fa:	9400      	str	r4, [sp, #0]
 80050fc:	f000 f92e 	bl	800535c <xQueueGenericCreateStatic>
 8005100:	4603      	mov	r3, r0
 8005102:	e008      	b.n	8005116 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	4619      	mov	r1, r3
 8005110:	f000 f9a6 	bl	8005460 <xQueueGenericCreate>
 8005114:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}

0800511e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800511e:	b480      	push	{r7}
 8005120:	b083      	sub	sp, #12
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f103 0208 	add.w	r2, r3, #8
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f04f 32ff 	mov.w	r2, #4294967295
 8005136:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f103 0208 	add.w	r2, r3, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f103 0208 	add.w	r2, r3, #8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d103      	bne.n	80051e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	e00c      	b.n	80051fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3308      	adds	r3, #8
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e002      	b.n	80051ee <vListInsert+0x2e>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	60fb      	str	r3, [r7, #12]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d2f6      	bcs.n	80051e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	6892      	ldr	r2, [r2, #8]
 8005248:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6852      	ldr	r2, [r2, #4]
 8005252:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d103      	bne.n	8005266 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	1e5a      	subs	r2, r3, #1
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10c      	bne.n	80052b6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	b672      	cpsid	i
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	b662      	cpsie	i
 80052b0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80052b6:	f001 fbb1 	bl	8006a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	441a      	add	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	3b01      	subs	r3, #1
 80052e8:	68f9      	ldr	r1, [r7, #12]
 80052ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	22ff      	movs	r2, #255	; 0xff
 80052fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	22ff      	movs	r2, #255	; 0xff
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d114      	bne.n	8005336 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01a      	beq.n	800534a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3310      	adds	r3, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f000 ffa1 	bl	8006260 <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d012      	beq.n	800534a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005324:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <xQueueGenericReset+0xd0>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e009      	b.n	800534a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3310      	adds	r3, #16
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff feef 	bl	800511e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3324      	adds	r3, #36	; 0x24
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff feea 	bl	800511e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800534a:	f001 fb9b 	bl	8006a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800534e:	2301      	movs	r3, #1
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08e      	sub	sp, #56	; 0x38
 8005360:	af02      	add	r7, sp, #8
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	b672      	cpsid	i
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	b662      	cpsie	i
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10c      	bne.n	80053aa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	b672      	cpsid	i
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	b662      	cpsie	i
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <xQueueGenericCreateStatic+0x5a>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <xQueueGenericCreateStatic+0x5e>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <xQueueGenericCreateStatic+0x60>
 80053ba:	2300      	movs	r3, #0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10c      	bne.n	80053da <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c4:	b672      	cpsid	i
 80053c6:	f383 8811 	msr	BASEPRI, r3
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	b662      	cpsie	i
 80053d4:	623b      	str	r3, [r7, #32]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <xQueueGenericCreateStatic+0x8a>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <xQueueGenericCreateStatic+0x8e>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <xQueueGenericCreateStatic+0x90>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10c      	bne.n	800540a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	b672      	cpsid	i
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	b662      	cpsie	i
 8005404:	61fb      	str	r3, [r7, #28]
}
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800540a:	2348      	movs	r3, #72	; 0x48
 800540c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b48      	cmp	r3, #72	; 0x48
 8005412:	d00c      	beq.n	800542e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	b672      	cpsid	i
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	b662      	cpsie	i
 8005428:	61bb      	str	r3, [r7, #24]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800542e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00d      	beq.n	8005456 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005442:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	4613      	mov	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f847 	bl	80054e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005458:	4618      	mov	r0, r3
 800545a:	3730      	adds	r7, #48	; 0x30
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	; 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	b672      	cpsid	i
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	b662      	cpsie	i
 8005488:	613b      	str	r3, [r7, #16]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e004      	b.n	80054a4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	fb02 f303 	mul.w	r3, r2, r3
 80054a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3348      	adds	r3, #72	; 0x48
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fbe3 	bl	8006c74 <pvPortMalloc>
 80054ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d011      	beq.n	80054da <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	3348      	adds	r3, #72	; 0x48
 80054be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054c8:	79fa      	ldrb	r2, [r7, #7]
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f805 	bl	80054e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80054da:	69bb      	ldr	r3, [r7, #24]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	e002      	b.n	8005506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005512:	2101      	movs	r1, #1
 8005514:	69b8      	ldr	r0, [r7, #24]
 8005516:	f7ff feb7 	bl	8005288 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800551a:	bf00      	nop
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08e      	sub	sp, #56	; 0x38
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	b672      	cpsid	i
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	b662      	cpsie	i
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <xQueueGenericSendFromISR+0x40>
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <xQueueGenericSendFromISR+0x44>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <xQueueGenericSendFromISR+0x46>
 8005566:	2300      	movs	r3, #0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10c      	bne.n	8005586 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	b672      	cpsid	i
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	b662      	cpsie	i
 8005580:	623b      	str	r3, [r7, #32]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d103      	bne.n	8005594 <xQueueGenericSendFromISR+0x72>
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <xQueueGenericSendFromISR+0x76>
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <xQueueGenericSendFromISR+0x78>
 8005598:	2300      	movs	r3, #0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10c      	bne.n	80055b8 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800559e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a2:	b672      	cpsid	i
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	b662      	cpsie	i
 80055b2:	61fb      	str	r3, [r7, #28]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b8:	f001 fb18 	bl	8006bec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055bc:	f3ef 8211 	mrs	r2, BASEPRI
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	b672      	cpsid	i
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	b662      	cpsie	i
 80055d4:	61ba      	str	r2, [r7, #24]
 80055d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d302      	bcc.n	80055ee <xQueueGenericSendFromISR+0xcc>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d12c      	bne.n	8005648 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	68b9      	ldr	r1, [r7, #8]
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 f917 	bl	8005830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005602:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560a:	d112      	bne.n	8005632 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d016      	beq.n	8005642 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	3324      	adds	r3, #36	; 0x24
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fe21 	bl	8006260 <xTaskRemoveFromEventList>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00b      	beq.n	8005642 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e007      	b.n	8005642 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005636:	3301      	adds	r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	b25a      	sxtb	r2, r3
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005642:	2301      	movs	r3, #1
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005646:	e001      	b.n	800564c <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005648:	2300      	movs	r3, #0
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005656:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800565a:	4618      	mov	r0, r3
 800565c:	3738      	adds	r7, #56	; 0x38
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	; 0x30
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10c      	bne.n	8005698 <xQueueReceive+0x34>
	__asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005682:	b672      	cpsid	i
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	b662      	cpsie	i
 8005692:	623b      	str	r3, [r7, #32]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueReceive+0x42>
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueReceive+0x46>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueReceive+0x48>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10c      	bne.n	80056ca <xQueueReceive+0x66>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	b672      	cpsid	i
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	b662      	cpsie	i
 80056c4:	61fb      	str	r3, [r7, #28]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ca:	f000 ff8d 	bl	80065e8 <xTaskGetSchedulerState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <xQueueReceive+0x76>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <xQueueReceive+0x7a>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <xQueueReceive+0x7c>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10c      	bne.n	80056fe <xQueueReceive+0x9a>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	b672      	cpsid	i
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	b662      	cpsie	i
 80056f8:	61bb      	str	r3, [r7, #24]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056fe:	f001 f98d 	bl	8006a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01f      	beq.n	800574e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005712:	f000 f8f7 	bl	8005904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	3310      	adds	r3, #16
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fd98 	bl	8006260 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <xQueueReceive+0x1c8>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005746:	f001 f99d 	bl	8006a84 <vPortExitCritical>
				return pdPASS;
 800574a:	2301      	movs	r3, #1
 800574c:	e069      	b.n	8005822 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005754:	f001 f996 	bl	8006a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005758:	2300      	movs	r3, #0
 800575a:	e062      	b.n	8005822 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005762:	f107 0310 	add.w	r3, r7, #16
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fdde 	bl	8006328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005770:	f001 f988 	bl	8006a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005774:	f000 fb8a 	bl	8005e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005778:	f001 f950 	bl	8006a1c <vPortEnterCritical>
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005782:	b25b      	sxtb	r3, r3
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <xQueueReceive+0x12e>
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005798:	b25b      	sxtb	r3, r3
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d103      	bne.n	80057a8 <xQueueReceive+0x144>
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a8:	f001 f96c 	bl	8006a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ac:	1d3a      	adds	r2, r7, #4
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fdcd 	bl	8006354 <xTaskCheckForTimeOut>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d123      	bne.n	8005808 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c2:	f000 f917 	bl	80059f4 <prvIsQueueEmpty>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	3324      	adds	r3, #36	; 0x24
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd1d 	bl	8006214 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057dc:	f000 f8b8 	bl	8005950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057e0:	f000 fb62 	bl	8005ea8 <xTaskResumeAll>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d189      	bne.n	80056fe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80057ea:	4b10      	ldr	r3, [pc, #64]	; (800582c <xQueueReceive+0x1c8>)
 80057ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	e780      	b.n	80056fe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fe:	f000 f8a7 	bl	8005950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005802:	f000 fb51 	bl	8005ea8 <xTaskResumeAll>
 8005806:	e77a      	b.n	80056fe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f000 f8a1 	bl	8005950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580e:	f000 fb4b 	bl	8005ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005814:	f000 f8ee 	bl	80059f4 <prvIsQueueEmpty>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	f43f af6f 	beq.w	80056fe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005820:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005822:	4618      	mov	r0, r3
 8005824:	3730      	adds	r7, #48	; 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d14d      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 fee2 	bl	8006624 <xTaskPriorityDisinherit>
 8005860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	609a      	str	r2, [r3, #8]
 8005868:	e043      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d119      	bne.n	80058a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6858      	ldr	r0, [r3, #4]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	f001 fc0a 	bl	8007094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	429a      	cmp	r2, r3
 8005898:	d32b      	bcc.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	e026      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68d8      	ldr	r0, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	461a      	mov	r2, r3
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	f001 fbf0 	bl	8007094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	425b      	negs	r3, r3
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d207      	bcs.n	80058e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	425b      	negs	r3, r3
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d105      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	441a      	add	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d303      	bcc.n	8005938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68d9      	ldr	r1, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	461a      	mov	r2, r3
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f001 fba6 	bl	8007094 <memcpy>
	}
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005958:	f001 f860 	bl	8006a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005964:	e011      	b.n	800598a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3324      	adds	r3, #36	; 0x24
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fc74 	bl	8006260 <xTaskRemoveFromEventList>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800597e:	f000 fd4f 	bl	8006420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	3b01      	subs	r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800598a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	dce9      	bgt.n	8005966 <prvUnlockQueue+0x16>
 8005992:	e000      	b.n	8005996 <prvUnlockQueue+0x46>
					break;
 8005994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800599e:	f001 f871 	bl	8006a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059a2:	f001 f83b 	bl	8006a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ae:	e011      	b.n	80059d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d012      	beq.n	80059de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3310      	adds	r3, #16
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fc4f 	bl	8006260 <xTaskRemoveFromEventList>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059c8:	f000 fd2a 	bl	8006420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dce9      	bgt.n	80059b0 <prvUnlockQueue+0x60>
 80059dc:	e000      	b.n	80059e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059e8:	f001 f84c 	bl	8006a84 <vPortExitCritical>
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059fc:	f001 f80e 	bl	8006a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e001      	b.n	8005a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a12:	f001 f837 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af04      	add	r7, sp, #16
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10c      	bne.n	8005a4e <xTaskCreateStatic+0x2e>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	b672      	cpsid	i
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	b662      	cpsie	i
 8005a48:	623b      	str	r3, [r7, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10c      	bne.n	8005a6e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	b672      	cpsid	i
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	b662      	cpsie	i
 8005a68:	61fb      	str	r3, [r7, #28]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a6e:	2354      	movs	r3, #84	; 0x54
 8005a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	2b54      	cmp	r3, #84	; 0x54
 8005a76:	d00c      	beq.n	8005a92 <xTaskCreateStatic+0x72>
	__asm volatile
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	b672      	cpsid	i
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	b662      	cpsie	i
 8005a8c:	61bb      	str	r3, [r7, #24]
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01e      	beq.n	8005ad8 <xTaskCreateStatic+0xb8>
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01b      	beq.n	8005ad8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aa8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9303      	str	r3, [sp, #12]
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	9302      	str	r3, [sp, #8]
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f850 	bl	8005b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ad2:	f000 f8d7 	bl	8005c84 <prvAddNewTaskToReadyList>
 8005ad6:	e001      	b.n	8005adc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005adc:	697b      	ldr	r3, [r7, #20]
	}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b08c      	sub	sp, #48	; 0x30
 8005aea:	af04      	add	r7, sp, #16
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005af6:	88fb      	ldrh	r3, [r7, #6]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f001 f8ba 	bl	8006c74 <pvPortMalloc>
 8005b00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b08:	2054      	movs	r0, #84	; 0x54
 8005b0a:	f001 f8b3 	bl	8006c74 <pvPortMalloc>
 8005b0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b1c:	e005      	b.n	8005b2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f001 f972 	bl	8006e08 <vPortFree>
 8005b24:	e001      	b.n	8005b2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d017      	beq.n	8005b60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9303      	str	r3, [sp, #12]
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	9302      	str	r3, [sp, #8]
 8005b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f80e 	bl	8005b70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b54:	69f8      	ldr	r0, [r7, #28]
 8005b56:	f000 f895 	bl	8005c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	61bb      	str	r3, [r7, #24]
 8005b5e:	e002      	b.n	8005b66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295
 8005b64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b66:	69bb      	ldr	r3, [r7, #24]
	}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
 8005b7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005b88:	440b      	add	r3, r1
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	b672      	cpsid	i
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	b662      	cpsie	i
 8005bb6:	617b      	str	r3, [r7, #20]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01f      	beq.n	8005c02 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e012      	b.n	8005bee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	7819      	ldrb	r1, [r3, #0]
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	3334      	adds	r3, #52	; 0x34
 8005bd8:	460a      	mov	r2, r1
 8005bda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	4413      	add	r3, r2
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d006      	beq.n	8005bf6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	2b0f      	cmp	r3, #15
 8005bf2:	d9e9      	bls.n	8005bc8 <prvInitialiseNewTask+0x58>
 8005bf4:	e000      	b.n	8005bf8 <prvInitialiseNewTask+0x88>
			{
				break;
 8005bf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c00:	e003      	b.n	8005c0a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	2b06      	cmp	r3, #6
 8005c0e:	d901      	bls.n	8005c14 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c10:	2306      	movs	r3, #6
 8005c12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	2200      	movs	r2, #0
 8005c24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	3304      	adds	r3, #4
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fa97 	bl	800515e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	3318      	adds	r3, #24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fa92 	bl	800515e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	f1c3 0207 	rsb	r2, r3, #7
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	2200      	movs	r2, #0
 8005c54:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	69b8      	ldr	r0, [r7, #24]
 8005c64:	f000 fdce 	bl	8006804 <pxPortInitialiseStack>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c8c:	f000 fec6 	bl	8006a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <prvAddNewTaskToReadyList+0xb8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a29      	ldr	r2, [pc, #164]	; (8005d3c <prvAddNewTaskToReadyList+0xb8>)
 8005c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c9a:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <prvAddNewTaskToReadyList+0xbc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ca2:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <prvAddNewTaskToReadyList+0xbc>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ca8:	4b24      	ldr	r3, [pc, #144]	; (8005d3c <prvAddNewTaskToReadyList+0xb8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d110      	bne.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cb0:	f000 fbda 	bl	8006468 <prvInitialiseTaskLists>
 8005cb4:	e00d      	b.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cb6:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <prvAddNewTaskToReadyList+0xc0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <prvAddNewTaskToReadyList+0xbc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d802      	bhi.n	8005cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ccc:	4a1c      	ldr	r2, [pc, #112]	; (8005d40 <prvAddNewTaskToReadyList+0xbc>)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <prvAddNewTaskToReadyList+0xc4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a1b      	ldr	r2, [pc, #108]	; (8005d48 <prvAddNewTaskToReadyList+0xc4>)
 8005cda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	409a      	lsls	r2, r3
 8005ce4:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	4a18      	ldr	r2, [pc, #96]	; (8005d4c <prvAddNewTaskToReadyList+0xc8>)
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <prvAddNewTaskToReadyList+0xcc>)
 8005cfc:	441a      	add	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7ff fa37 	bl	8005178 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 febb 	bl	8006a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	; (8005d44 <prvAddNewTaskToReadyList+0xc0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00e      	beq.n	8005d34 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d16:	4b0a      	ldr	r3, [pc, #40]	; (8005d40 <prvAddNewTaskToReadyList+0xbc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d207      	bcs.n	8005d34 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <prvAddNewTaskToReadyList+0xd0>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d34:	bf00      	nop
 8005d36:	3708      	adds	r7, #8
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000b9c 	.word	0x20000b9c
 8005d40:	20000a9c 	.word	0x20000a9c
 8005d44:	20000ba8 	.word	0x20000ba8
 8005d48:	20000bb8 	.word	0x20000bb8
 8005d4c:	20000ba4 	.word	0x20000ba4
 8005d50:	20000aa0 	.word	0x20000aa0
 8005d54:	e000ed04 	.word	0xe000ed04

08005d58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d019      	beq.n	8005d9e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <vTaskDelay+0x64>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00c      	beq.n	8005d8c <vTaskDelay+0x34>
	__asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d76:	b672      	cpsid	i
 8005d78:	f383 8811 	msr	BASEPRI, r3
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f3bf 8f4f 	dsb	sy
 8005d84:	b662      	cpsie	i
 8005d86:	60bb      	str	r3, [r7, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	e7fe      	b.n	8005d8a <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005d8c:	f000 f87e 	bl	8005e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d90:	2100      	movs	r1, #0
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fcd0 	bl	8006738 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d98:	f000 f886 	bl	8005ea8 <xTaskResumeAll>
 8005d9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005da4:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <vTaskDelay+0x68>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000bc4 	.word	0x20000bc4
 8005dc0:	e000ed04 	.word	0xe000ed04

08005dc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08a      	sub	sp, #40	; 0x28
 8005dc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dd2:	463a      	mov	r2, r7
 8005dd4:	1d39      	adds	r1, r7, #4
 8005dd6:	f107 0308 	add.w	r3, r7, #8
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fa fb96 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	9202      	str	r2, [sp, #8]
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2300      	movs	r3, #0
 8005df0:	460a      	mov	r2, r1
 8005df2:	4920      	ldr	r1, [pc, #128]	; (8005e74 <vTaskStartScheduler+0xb0>)
 8005df4:	4820      	ldr	r0, [pc, #128]	; (8005e78 <vTaskStartScheduler+0xb4>)
 8005df6:	f7ff fe13 	bl	8005a20 <xTaskCreateStatic>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <vTaskStartScheduler+0xb8>)
 8005dfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <vTaskStartScheduler+0xb8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e001      	b.n	8005e12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d118      	bne.n	8005e4a <vTaskStartScheduler+0x86>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	b672      	cpsid	i
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	b662      	cpsie	i
 8005e2c:	613b      	str	r3, [r7, #16]
}
 8005e2e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e30:	4b13      	ldr	r3, [pc, #76]	; (8005e80 <vTaskStartScheduler+0xbc>)
 8005e32:	f04f 32ff 	mov.w	r2, #4294967295
 8005e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <vTaskStartScheduler+0xc0>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <vTaskStartScheduler+0xc4>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e44:	f000 fd6c 	bl	8006920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e48:	e010      	b.n	8005e6c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d10c      	bne.n	8005e6c <vTaskStartScheduler+0xa8>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	b672      	cpsid	i
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	b662      	cpsie	i
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <vTaskStartScheduler+0xa6>
}
 8005e6c:	bf00      	nop
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08007124 	.word	0x08007124
 8005e78:	08006439 	.word	0x08006439
 8005e7c:	20000bc0 	.word	0x20000bc0
 8005e80:	20000bbc 	.word	0x20000bbc
 8005e84:	20000ba8 	.word	0x20000ba8
 8005e88:	20000ba0 	.word	0x20000ba0

08005e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <vTaskSuspendAll+0x18>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a03      	ldr	r2, [pc, #12]	; (8005ea4 <vTaskSuspendAll+0x18>)
 8005e98:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e9a:	bf00      	nop
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	20000bc4 	.word	0x20000bc4

08005ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005eb6:	4b42      	ldr	r3, [pc, #264]	; (8005fc0 <xTaskResumeAll+0x118>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10c      	bne.n	8005ed8 <xTaskResumeAll+0x30>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	b672      	cpsid	i
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	b662      	cpsie	i
 8005ed2:	603b      	str	r3, [r7, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ed8:	f000 fda0 	bl	8006a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005edc:	4b38      	ldr	r3, [pc, #224]	; (8005fc0 <xTaskResumeAll+0x118>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	4a37      	ldr	r2, [pc, #220]	; (8005fc0 <xTaskResumeAll+0x118>)
 8005ee4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee6:	4b36      	ldr	r3, [pc, #216]	; (8005fc0 <xTaskResumeAll+0x118>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d161      	bne.n	8005fb2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005eee:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <xTaskResumeAll+0x11c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d05d      	beq.n	8005fb2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ef6:	e02e      	b.n	8005f56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <xTaskResumeAll+0x120>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3318      	adds	r3, #24
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff f994 	bl	8005232 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f98f 	bl	8005232 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f18:	2201      	movs	r2, #1
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <xTaskResumeAll+0x124>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	4a2a      	ldr	r2, [pc, #168]	; (8005fcc <xTaskResumeAll+0x124>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4a27      	ldr	r2, [pc, #156]	; (8005fd0 <xTaskResumeAll+0x128>)
 8005f34:	441a      	add	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7ff f91b 	bl	8005178 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f46:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <xTaskResumeAll+0x12c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d302      	bcc.n	8005f56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <xTaskResumeAll+0x130>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f56:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <xTaskResumeAll+0x120>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1cc      	bne.n	8005ef8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f64:	f000 fb20 	bl	80065a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f68:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <xTaskResumeAll+0x134>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d010      	beq.n	8005f96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f74:	f000 f836 	bl	8005fe4 <xTaskIncrementTick>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f7e:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <xTaskResumeAll+0x130>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f1      	bne.n	8005f74 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <xTaskResumeAll+0x134>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <xTaskResumeAll+0x130>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	; (8005fe0 <xTaskResumeAll+0x138>)
 8005fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fb2:	f000 fd67 	bl	8006a84 <vPortExitCritical>

	return xAlreadyYielded;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000bc4 	.word	0x20000bc4
 8005fc4:	20000b9c 	.word	0x20000b9c
 8005fc8:	20000b5c 	.word	0x20000b5c
 8005fcc:	20000ba4 	.word	0x20000ba4
 8005fd0:	20000aa0 	.word	0x20000aa0
 8005fd4:	20000a9c 	.word	0x20000a9c
 8005fd8:	20000bb0 	.word	0x20000bb0
 8005fdc:	20000bac 	.word	0x20000bac
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fee:	4b4f      	ldr	r3, [pc, #316]	; (800612c <xTaskIncrementTick+0x148>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 808a 	bne.w	800610c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ff8:	4b4d      	ldr	r3, [pc, #308]	; (8006130 <xTaskIncrementTick+0x14c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006000:	4a4b      	ldr	r2, [pc, #300]	; (8006130 <xTaskIncrementTick+0x14c>)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d122      	bne.n	8006052 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800600c:	4b49      	ldr	r3, [pc, #292]	; (8006134 <xTaskIncrementTick+0x150>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <xTaskIncrementTick+0x4c>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	b672      	cpsid	i
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	b662      	cpsie	i
 800602a:	603b      	str	r3, [r7, #0]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <xTaskIncrementTick+0x4a>
 8006030:	4b40      	ldr	r3, [pc, #256]	; (8006134 <xTaskIncrementTick+0x150>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	4b40      	ldr	r3, [pc, #256]	; (8006138 <xTaskIncrementTick+0x154>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a3e      	ldr	r2, [pc, #248]	; (8006134 <xTaskIncrementTick+0x150>)
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	4a3e      	ldr	r2, [pc, #248]	; (8006138 <xTaskIncrementTick+0x154>)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	4b3d      	ldr	r3, [pc, #244]	; (800613c <xTaskIncrementTick+0x158>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3301      	adds	r3, #1
 800604a:	4a3c      	ldr	r2, [pc, #240]	; (800613c <xTaskIncrementTick+0x158>)
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	f000 faab 	bl	80065a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <xTaskIncrementTick+0x15c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	429a      	cmp	r2, r3
 800605a:	d348      	bcc.n	80060ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800605c:	4b35      	ldr	r3, [pc, #212]	; (8006134 <xTaskIncrementTick+0x150>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006066:	4b36      	ldr	r3, [pc, #216]	; (8006140 <xTaskIncrementTick+0x15c>)
 8006068:	f04f 32ff 	mov.w	r2, #4294967295
 800606c:	601a      	str	r2, [r3, #0]
					break;
 800606e:	e03e      	b.n	80060ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <xTaskIncrementTick+0x150>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d203      	bcs.n	8006090 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006088:	4a2d      	ldr	r2, [pc, #180]	; (8006140 <xTaskIncrementTick+0x15c>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800608e:	e02e      	b.n	80060ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	3304      	adds	r3, #4
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff f8cc 	bl	8005232 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d004      	beq.n	80060ac <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	3318      	adds	r3, #24
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff f8c3 	bl	8005232 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	2201      	movs	r2, #1
 80060b2:	409a      	lsls	r2, r3
 80060b4:	4b23      	ldr	r3, [pc, #140]	; (8006144 <xTaskIncrementTick+0x160>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	4a22      	ldr	r2, [pc, #136]	; (8006144 <xTaskIncrementTick+0x160>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <xTaskIncrementTick+0x164>)
 80060cc:	441a      	add	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f7ff f84f 	bl	8005178 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4b1b      	ldr	r3, [pc, #108]	; (800614c <xTaskIncrementTick+0x168>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d3b9      	bcc.n	800605c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060ec:	e7b6      	b.n	800605c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060ee:	4b17      	ldr	r3, [pc, #92]	; (800614c <xTaskIncrementTick+0x168>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4914      	ldr	r1, [pc, #80]	; (8006148 <xTaskIncrementTick+0x164>)
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	440b      	add	r3, r1
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d907      	bls.n	8006116 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8006106:	2301      	movs	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e004      	b.n	8006116 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800610c:	4b10      	ldr	r3, [pc, #64]	; (8006150 <xTaskIncrementTick+0x16c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	4a0f      	ldr	r2, [pc, #60]	; (8006150 <xTaskIncrementTick+0x16c>)
 8006114:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <xTaskIncrementTick+0x170>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006122:	697b      	ldr	r3, [r7, #20]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000bc4 	.word	0x20000bc4
 8006130:	20000ba0 	.word	0x20000ba0
 8006134:	20000b54 	.word	0x20000b54
 8006138:	20000b58 	.word	0x20000b58
 800613c:	20000bb4 	.word	0x20000bb4
 8006140:	20000bbc 	.word	0x20000bbc
 8006144:	20000ba4 	.word	0x20000ba4
 8006148:	20000aa0 	.word	0x20000aa0
 800614c:	20000a9c 	.word	0x20000a9c
 8006150:	20000bac 	.word	0x20000bac
 8006154:	20000bb0 	.word	0x20000bb0

08006158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800615e:	4b28      	ldr	r3, [pc, #160]	; (8006200 <vTaskSwitchContext+0xa8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006166:	4b27      	ldr	r3, [pc, #156]	; (8006204 <vTaskSwitchContext+0xac>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800616c:	e041      	b.n	80061f2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800616e:	4b25      	ldr	r3, [pc, #148]	; (8006204 <vTaskSwitchContext+0xac>)
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <vTaskSwitchContext+0xb0>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	fab3 f383 	clz	r3, r3
 8006180:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006182:	7afb      	ldrb	r3, [r7, #11]
 8006184:	f1c3 031f 	rsb	r3, r3, #31
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	4920      	ldr	r1, [pc, #128]	; (800620c <vTaskSwitchContext+0xb4>)
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10c      	bne.n	80061b8 <vTaskSwitchContext+0x60>
	__asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	b672      	cpsid	i
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	b662      	cpsie	i
 80061b2:	607b      	str	r3, [r7, #4]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <vTaskSwitchContext+0x5e>
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <vTaskSwitchContext+0xb4>)
 80061c4:	4413      	add	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3308      	adds	r3, #8
 80061da:	429a      	cmp	r2, r3
 80061dc:	d104      	bne.n	80061e8 <vTaskSwitchContext+0x90>
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	4a08      	ldr	r2, [pc, #32]	; (8006210 <vTaskSwitchContext+0xb8>)
 80061f0:	6013      	str	r3, [r2, #0]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20000bc4 	.word	0x20000bc4
 8006204:	20000bb0 	.word	0x20000bb0
 8006208:	20000ba4 	.word	0x20000ba4
 800620c:	20000aa0 	.word	0x20000aa0
 8006210:	20000a9c 	.word	0x20000a9c

08006214 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10c      	bne.n	800623e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	b672      	cpsid	i
 800622a:	f383 8811 	msr	BASEPRI, r3
 800622e:	f3bf 8f6f 	isb	sy
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	b662      	cpsie	i
 8006238:	60fb      	str	r3, [r7, #12]
}
 800623a:	bf00      	nop
 800623c:	e7fe      	b.n	800623c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800623e:	4b07      	ldr	r3, [pc, #28]	; (800625c <vTaskPlaceOnEventList+0x48>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3318      	adds	r3, #24
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fe ffba 	bl	80051c0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800624c:	2101      	movs	r1, #1
 800624e:	6838      	ldr	r0, [r7, #0]
 8006250:	f000 fa72 	bl	8006738 <prvAddCurrentTaskToDelayedList>
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	20000a9c 	.word	0x20000a9c

08006260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	b672      	cpsid	i
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	b662      	cpsie	i
 800628a:	60fb      	str	r3, [r7, #12]
}
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	3318      	adds	r3, #24
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe ffcc 	bl	8005232 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629a:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <xTaskRemoveFromEventList+0xb0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11c      	bne.n	80062dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe ffc3 	bl	8005232 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	4b17      	ldr	r3, [pc, #92]	; (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	4a16      	ldr	r2, [pc, #88]	; (8006314 <xTaskRemoveFromEventList+0xb4>)
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4a13      	ldr	r2, [pc, #76]	; (8006318 <xTaskRemoveFromEventList+0xb8>)
 80062cc:	441a      	add	r2, r3
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fe ff4f 	bl	8005178 <vListInsertEnd>
 80062da:	e005      	b.n	80062e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	3318      	adds	r3, #24
 80062e0:	4619      	mov	r1, r3
 80062e2:	480e      	ldr	r0, [pc, #56]	; (800631c <xTaskRemoveFromEventList+0xbc>)
 80062e4:	f7fe ff48 	bl	8005178 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <xTaskRemoveFromEventList+0xc0>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d905      	bls.n	8006302 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062f6:	2301      	movs	r3, #1
 80062f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <xTaskRemoveFromEventList+0xc4>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	e001      	b.n	8006306 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006306:	697b      	ldr	r3, [r7, #20]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	20000bc4 	.word	0x20000bc4
 8006314:	20000ba4 	.word	0x20000ba4
 8006318:	20000aa0 	.word	0x20000aa0
 800631c:	20000b5c 	.word	0x20000b5c
 8006320:	20000a9c 	.word	0x20000a9c
 8006324:	20000bb0 	.word	0x20000bb0

08006328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006330:	4b06      	ldr	r3, [pc, #24]	; (800634c <vTaskInternalSetTimeOutState+0x24>)
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006338:	4b05      	ldr	r3, [pc, #20]	; (8006350 <vTaskInternalSetTimeOutState+0x28>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20000bb4 	.word	0x20000bb4
 8006350:	20000ba0 	.word	0x20000ba0

08006354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10c      	bne.n	800637e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006368:	b672      	cpsid	i
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	b662      	cpsie	i
 8006378:	613b      	str	r3, [r7, #16]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10c      	bne.n	800639e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	60fb      	str	r3, [r7, #12]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800639e:	f000 fb3d 	bl	8006a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <xTaskCheckForTimeOut+0xc4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d102      	bne.n	80063c2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e023      	b.n	800640a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <xTaskCheckForTimeOut+0xc8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d007      	beq.n	80063de <xTaskCheckForTimeOut+0x8a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d302      	bcc.n	80063de <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063d8:	2301      	movs	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e015      	b.n	800640a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d20b      	bcs.n	8006400 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1ad2      	subs	r2, r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7ff ff97 	bl	8006328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	e004      	b.n	800640a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800640a:	f000 fb3b 	bl	8006a84 <vPortExitCritical>

	return xReturn;
 800640e:	69fb      	ldr	r3, [r7, #28]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3720      	adds	r7, #32
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000ba0 	.word	0x20000ba0
 800641c:	20000bb4 	.word	0x20000bb4

08006420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <vTaskMissedYield+0x14>)
 8006426:	2201      	movs	r2, #1
 8006428:	601a      	str	r2, [r3, #0]
}
 800642a:	bf00      	nop
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000bb0 	.word	0x20000bb0

08006438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006440:	f000 f852 	bl	80064e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006444:	4b06      	ldr	r3, [pc, #24]	; (8006460 <prvIdleTask+0x28>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d9f9      	bls.n	8006440 <prvIdleTask+0x8>
			{
				taskYIELD();
 800644c:	4b05      	ldr	r3, [pc, #20]	; (8006464 <prvIdleTask+0x2c>)
 800644e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800645c:	e7f0      	b.n	8006440 <prvIdleTask+0x8>
 800645e:	bf00      	nop
 8006460:	20000aa0 	.word	0x20000aa0
 8006464:	e000ed04 	.word	0xe000ed04

08006468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800646e:	2300      	movs	r3, #0
 8006470:	607b      	str	r3, [r7, #4]
 8006472:	e00c      	b.n	800648e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <prvInitialiseTaskLists+0x60>)
 8006480:	4413      	add	r3, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fe4b 	bl	800511e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	3301      	adds	r3, #1
 800648c:	607b      	str	r3, [r7, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b06      	cmp	r3, #6
 8006492:	d9ef      	bls.n	8006474 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006494:	480d      	ldr	r0, [pc, #52]	; (80064cc <prvInitialiseTaskLists+0x64>)
 8006496:	f7fe fe42 	bl	800511e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800649a:	480d      	ldr	r0, [pc, #52]	; (80064d0 <prvInitialiseTaskLists+0x68>)
 800649c:	f7fe fe3f 	bl	800511e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064a0:	480c      	ldr	r0, [pc, #48]	; (80064d4 <prvInitialiseTaskLists+0x6c>)
 80064a2:	f7fe fe3c 	bl	800511e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064a6:	480c      	ldr	r0, [pc, #48]	; (80064d8 <prvInitialiseTaskLists+0x70>)
 80064a8:	f7fe fe39 	bl	800511e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064ac:	480b      	ldr	r0, [pc, #44]	; (80064dc <prvInitialiseTaskLists+0x74>)
 80064ae:	f7fe fe36 	bl	800511e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064b2:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <prvInitialiseTaskLists+0x78>)
 80064b4:	4a05      	ldr	r2, [pc, #20]	; (80064cc <prvInitialiseTaskLists+0x64>)
 80064b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <prvInitialiseTaskLists+0x7c>)
 80064ba:	4a05      	ldr	r2, [pc, #20]	; (80064d0 <prvInitialiseTaskLists+0x68>)
 80064bc:	601a      	str	r2, [r3, #0]
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000aa0 	.word	0x20000aa0
 80064cc:	20000b2c 	.word	0x20000b2c
 80064d0:	20000b40 	.word	0x20000b40
 80064d4:	20000b5c 	.word	0x20000b5c
 80064d8:	20000b70 	.word	0x20000b70
 80064dc:	20000b88 	.word	0x20000b88
 80064e0:	20000b54 	.word	0x20000b54
 80064e4:	20000b58 	.word	0x20000b58

080064e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ee:	e019      	b.n	8006524 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064f0:	f000 fa94 	bl	8006a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f4:	4b10      	ldr	r3, [pc, #64]	; (8006538 <prvCheckTasksWaitingTermination+0x50>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fe96 	bl	8005232 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006506:	4b0d      	ldr	r3, [pc, #52]	; (800653c <prvCheckTasksWaitingTermination+0x54>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3b01      	subs	r3, #1
 800650c:	4a0b      	ldr	r2, [pc, #44]	; (800653c <prvCheckTasksWaitingTermination+0x54>)
 800650e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <prvCheckTasksWaitingTermination+0x58>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3b01      	subs	r3, #1
 8006516:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <prvCheckTasksWaitingTermination+0x58>)
 8006518:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800651a:	f000 fab3 	bl	8006a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f810 	bl	8006544 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <prvCheckTasksWaitingTermination+0x58>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e1      	bne.n	80064f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000b70 	.word	0x20000b70
 800653c:	20000b9c 	.word	0x20000b9c
 8006540:	20000b84 	.word	0x20000b84

08006544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006552:	2b00      	cmp	r3, #0
 8006554:	d108      	bne.n	8006568 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fc54 	bl	8006e08 <vPortFree>
				vPortFree( pxTCB );
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fc51 	bl	8006e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006566:	e01a      	b.n	800659e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800656e:	2b01      	cmp	r3, #1
 8006570:	d103      	bne.n	800657a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fc48 	bl	8006e08 <vPortFree>
	}
 8006578:	e011      	b.n	800659e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006580:	2b02      	cmp	r3, #2
 8006582:	d00c      	beq.n	800659e <prvDeleteTCB+0x5a>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	60fb      	str	r3, [r7, #12]
}
 800659a:	bf00      	nop
 800659c:	e7fe      	b.n	800659c <prvDeleteTCB+0x58>
	}
 800659e:	bf00      	nop
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
	...

080065a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <prvResetNextTaskUnblockTime+0x38>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <prvResetNextTaskUnblockTime+0x3c>)
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065c0:	e008      	b.n	80065d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c2:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <prvResetNextTaskUnblockTime+0x38>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a04      	ldr	r2, [pc, #16]	; (80065e4 <prvResetNextTaskUnblockTime+0x3c>)
 80065d2:	6013      	str	r3, [r2, #0]
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	20000b54 	.word	0x20000b54
 80065e4:	20000bbc 	.word	0x20000bbc

080065e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <xTaskGetSchedulerState+0x34>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065f6:	2301      	movs	r3, #1
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	e008      	b.n	800660e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065fc:	4b08      	ldr	r3, [pc, #32]	; (8006620 <xTaskGetSchedulerState+0x38>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006604:	2302      	movs	r3, #2
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	e001      	b.n	800660e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800660a:	2300      	movs	r3, #0
 800660c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800660e:	687b      	ldr	r3, [r7, #4]
	}
 8006610:	4618      	mov	r0, r3
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	20000ba8 	.word	0x20000ba8
 8006620:	20000bc4 	.word	0x20000bc4

08006624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d072      	beq.n	8006720 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800663a:	4b3c      	ldr	r3, [pc, #240]	; (800672c <xTaskPriorityDisinherit+0x108>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	429a      	cmp	r2, r3
 8006642:	d00c      	beq.n	800665e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	60fb      	str	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	b672      	cpsid	i
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	b662      	cpsie	i
 800667a:	60bb      	str	r3, [r7, #8]
}
 800667c:	bf00      	nop
 800667e:	e7fe      	b.n	800667e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006684:	1e5a      	subs	r2, r3, #1
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	429a      	cmp	r2, r3
 8006694:	d044      	beq.n	8006720 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	2b00      	cmp	r3, #0
 800669c:	d140      	bne.n	8006720 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3304      	adds	r3, #4
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fdc5 	bl	8005232 <uxListRemove>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d115      	bne.n	80066da <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b2:	491f      	ldr	r1, [pc, #124]	; (8006730 <xTaskPriorityDisinherit+0x10c>)
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xTaskPriorityDisinherit+0xb6>
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2201      	movs	r2, #1
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43da      	mvns	r2, r3
 80066d0:	4b18      	ldr	r3, [pc, #96]	; (8006734 <xTaskPriorityDisinherit+0x110>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4013      	ands	r3, r2
 80066d6:	4a17      	ldr	r2, [pc, #92]	; (8006734 <xTaskPriorityDisinherit+0x110>)
 80066d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e6:	f1c3 0207 	rsb	r2, r3, #7
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f2:	2201      	movs	r2, #1
 80066f4:	409a      	lsls	r2, r3
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <xTaskPriorityDisinherit+0x110>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	4a0d      	ldr	r2, [pc, #52]	; (8006734 <xTaskPriorityDisinherit+0x110>)
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <xTaskPriorityDisinherit+0x10c>)
 800670e:	441a      	add	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fe fd2e 	bl	8005178 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800671c:	2301      	movs	r3, #1
 800671e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006720:	697b      	ldr	r3, [r7, #20]
	}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000a9c 	.word	0x20000a9c
 8006730:	20000aa0 	.word	0x20000aa0
 8006734:	20000ba4 	.word	0x20000ba4

08006738 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006748:	4b28      	ldr	r3, [pc, #160]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3304      	adds	r3, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fd6f 	bl	8005232 <uxListRemove>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800675a:	4b24      	ldr	r3, [pc, #144]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	2201      	movs	r2, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	43da      	mvns	r2, r3
 8006768:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4013      	ands	r3, r2
 800676e:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006770:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006778:	d10a      	bne.n	8006790 <prvAddCurrentTaskToDelayedList+0x58>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3304      	adds	r3, #4
 8006786:	4619      	mov	r1, r3
 8006788:	481a      	ldr	r0, [pc, #104]	; (80067f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800678a:	f7fe fcf5 	bl	8005178 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800678e:	e026      	b.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006798:	4b14      	ldr	r3, [pc, #80]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d209      	bcs.n	80067bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a8:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7fe fd03 	bl	80051c0 <vListInsert>
}
 80067ba:	e010      	b.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067bc:	4b0f      	ldr	r3, [pc, #60]	; (80067fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe fcf9 	bl	80051c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067ce:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d202      	bcs.n	80067de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <prvAddCurrentTaskToDelayedList+0xc8>)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6013      	str	r3, [r2, #0]
}
 80067de:	bf00      	nop
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000ba0 	.word	0x20000ba0
 80067ec:	20000a9c 	.word	0x20000a9c
 80067f0:	20000ba4 	.word	0x20000ba4
 80067f4:	20000b88 	.word	0x20000b88
 80067f8:	20000b58 	.word	0x20000b58
 80067fc:	20000b54 	.word	0x20000b54
 8006800:	20000bbc 	.word	0x20000bbc

08006804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3b04      	subs	r3, #4
 8006814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800681c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3b04      	subs	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3b04      	subs	r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006834:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <pxPortInitialiseStack+0x64>)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3b14      	subs	r3, #20
 800683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b04      	subs	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f06f 0202 	mvn.w	r2, #2
 8006852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3b20      	subs	r3, #32
 8006858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800685a:	68fb      	ldr	r3, [r7, #12]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	0800686d 	.word	0x0800686d

0800686c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006876:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <prvTaskExitError+0x5c>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687e:	d00c      	beq.n	800689a <prvTaskExitError+0x2e>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	b672      	cpsid	i
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	b662      	cpsie	i
 8006894:	60fb      	str	r3, [r7, #12]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <prvTaskExitError+0x2c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	b672      	cpsid	i
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	b662      	cpsie	i
 80068ae:	60bb      	str	r3, [r7, #8]
}
 80068b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068b2:	bf00      	nop
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0fc      	beq.n	80068b4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	2000000c 	.word	0x2000000c
 80068cc:	00000000 	.word	0x00000000

080068d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <pxCurrentTCBConst2>)
 80068d2:	6819      	ldr	r1, [r3, #0]
 80068d4:	6808      	ldr	r0, [r1, #0]
 80068d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	f380 8809 	msr	PSP, r0
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f04f 0000 	mov.w	r0, #0
 80068e6:	f380 8811 	msr	BASEPRI, r0
 80068ea:	4770      	bx	lr
 80068ec:	f3af 8000 	nop.w

080068f0 <pxCurrentTCBConst2>:
 80068f0:	20000a9c 	.word	0x20000a9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop

080068f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80068f8:	4808      	ldr	r0, [pc, #32]	; (800691c <prvPortStartFirstTask+0x24>)
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	6800      	ldr	r0, [r0, #0]
 80068fe:	f380 8808 	msr	MSP, r0
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f380 8814 	msr	CONTROL, r0
 800690a:	b662      	cpsie	i
 800690c:	b661      	cpsie	f
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	df00      	svc	0
 8006918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800691a:	bf00      	nop
 800691c:	e000ed08 	.word	0xe000ed08

08006920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006926:	4b37      	ldr	r3, [pc, #220]	; (8006a04 <xPortStartScheduler+0xe4>)
 8006928:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006948:	b2da      	uxtb	r2, r3
 800694a:	4b2f      	ldr	r3, [pc, #188]	; (8006a08 <xPortStartScheduler+0xe8>)
 800694c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800694e:	4b2f      	ldr	r3, [pc, #188]	; (8006a0c <xPortStartScheduler+0xec>)
 8006950:	2207      	movs	r2, #7
 8006952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006954:	e009      	b.n	800696a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006956:	4b2d      	ldr	r3, [pc, #180]	; (8006a0c <xPortStartScheduler+0xec>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3b01      	subs	r3, #1
 800695c:	4a2b      	ldr	r2, [pc, #172]	; (8006a0c <xPortStartScheduler+0xec>)
 800695e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d0ef      	beq.n	8006956 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006976:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <xPortStartScheduler+0xec>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f1c3 0307 	rsb	r3, r3, #7
 800697e:	2b04      	cmp	r3, #4
 8006980:	d00c      	beq.n	800699c <xPortStartScheduler+0x7c>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	b672      	cpsid	i
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	b662      	cpsie	i
 8006996:	60bb      	str	r3, [r7, #8]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800699c:	4b1b      	ldr	r3, [pc, #108]	; (8006a0c <xPortStartScheduler+0xec>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	4a1a      	ldr	r2, [pc, #104]	; (8006a0c <xPortStartScheduler+0xec>)
 80069a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069a6:	4b19      	ldr	r3, [pc, #100]	; (8006a0c <xPortStartScheduler+0xec>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069ae:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <xPortStartScheduler+0xec>)
 80069b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069ba:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <xPortStartScheduler+0xf0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a14      	ldr	r2, [pc, #80]	; (8006a10 <xPortStartScheduler+0xf0>)
 80069c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <xPortStartScheduler+0xf0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <xPortStartScheduler+0xf0>)
 80069cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069d2:	f000 f8dd 	bl	8006b90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <xPortStartScheduler+0xf4>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069dc:	f000 f8fc 	bl	8006bd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069e0:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <xPortStartScheduler+0xf8>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <xPortStartScheduler+0xf8>)
 80069e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80069ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ec:	f7ff ff84 	bl	80068f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069f0:	f7ff fbb2 	bl	8006158 <vTaskSwitchContext>
	prvTaskExitError();
 80069f4:	f7ff ff3a 	bl	800686c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000e400 	.word	0xe000e400
 8006a08:	20000bc8 	.word	0x20000bc8
 8006a0c:	20000bcc 	.word	0x20000bcc
 8006a10:	e000ed20 	.word	0xe000ed20
 8006a14:	2000000c 	.word	0x2000000c
 8006a18:	e000ef34 	.word	0xe000ef34

08006a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	b672      	cpsid	i
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	b662      	cpsie	i
 8006a36:	607b      	str	r3, [r7, #4]
}
 8006a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a3a:	4b10      	ldr	r3, [pc, #64]	; (8006a7c <vPortEnterCritical+0x60>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	4a0e      	ldr	r2, [pc, #56]	; (8006a7c <vPortEnterCritical+0x60>)
 8006a42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a44:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <vPortEnterCritical+0x60>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d111      	bne.n	8006a70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <vPortEnterCritical+0x64>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00c      	beq.n	8006a70 <vPortEnterCritical+0x54>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	b672      	cpsid	i
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	b662      	cpsie	i
 8006a6a:	603b      	str	r3, [r7, #0]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vPortEnterCritical+0x52>
	}
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	2000000c 	.word	0x2000000c
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a8a:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <vPortExitCritical+0x54>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10c      	bne.n	8006aac <vPortExitCritical+0x28>
	__asm volatile
 8006a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a96:	b672      	cpsid	i
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	b662      	cpsie	i
 8006aa6:	607b      	str	r3, [r7, #4]
}
 8006aa8:	bf00      	nop
 8006aaa:	e7fe      	b.n	8006aaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006aac:	4b0a      	ldr	r3, [pc, #40]	; (8006ad8 <vPortExitCritical+0x54>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <vPortExitCritical+0x54>)
 8006ab4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ab6:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <vPortExitCritical+0x54>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <vPortExitCritical+0x46>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
}
 8006ac8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000000c 	.word	0x2000000c
 8006adc:	00000000 	.word	0x00000000

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	f01e 0f10 	tst.w	lr, #16
 8006af0:	bf08      	it	eq
 8006af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afa:	6010      	str	r0, [r2, #0]
 8006afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b04:	b672      	cpsid	i
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	b662      	cpsie	i
 8006b14:	f7ff fb20 	bl	8006158 <vTaskSwitchContext>
 8006b18:	f04f 0000 	mov.w	r0, #0
 8006b1c:	f380 8811 	msr	BASEPRI, r0
 8006b20:	bc09      	pop	{r0, r3}
 8006b22:	6819      	ldr	r1, [r3, #0]
 8006b24:	6808      	ldr	r0, [r1, #0]
 8006b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2a:	f01e 0f10 	tst.w	lr, #16
 8006b2e:	bf08      	it	eq
 8006b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b34:	f380 8809 	msr	PSP, r0
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop

08006b40 <pxCurrentTCBConst>:
 8006b40:	20000a9c 	.word	0x20000a9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b44:	bf00      	nop
 8006b46:	bf00      	nop

08006b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	607b      	str	r3, [r7, #4]
}
 8006b64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b66:	f7ff fa3d 	bl	8005fe4 <xTaskIncrementTick>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <SysTick_Handler+0x44>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	2300      	movs	r3, #0
 8006b7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f383 8811 	msr	BASEPRI, r3
}
 8006b82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <vPortSetupTimerInterrupt+0x34>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b9a:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <vPortSetupTimerInterrupt+0x38>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ba0:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <vPortSetupTimerInterrupt+0x3c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <vPortSetupTimerInterrupt+0x40>)
 8006ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8006baa:	099b      	lsrs	r3, r3, #6
 8006bac:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <vPortSetupTimerInterrupt+0x44>)
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006bb2:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <vPortSetupTimerInterrupt+0x34>)
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	601a      	str	r2, [r3, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	e000e010 	.word	0xe000e010
 8006bc8:	e000e018 	.word	0xe000e018
 8006bcc:	20000000 	.word	0x20000000
 8006bd0:	10624dd3 	.word	0x10624dd3
 8006bd4:	e000e014 	.word	0xe000e014

08006bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006be8 <vPortEnableVFP+0x10>
 8006bdc:	6801      	ldr	r1, [r0, #0]
 8006bde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006be2:	6001      	str	r1, [r0, #0]
 8006be4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006be6:	bf00      	nop
 8006be8:	e000ed88 	.word	0xe000ed88

08006bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bf2:	f3ef 8305 	mrs	r3, IPSR
 8006bf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b0f      	cmp	r3, #15
 8006bfc:	d916      	bls.n	8006c2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bfe:	4a19      	ldr	r2, [pc, #100]	; (8006c64 <vPortValidateInterruptPriority+0x78>)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c08:	4b17      	ldr	r3, [pc, #92]	; (8006c68 <vPortValidateInterruptPriority+0x7c>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	7afa      	ldrb	r2, [r7, #11]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d20c      	bcs.n	8006c2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c16:	b672      	cpsid	i
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	b662      	cpsie	i
 8006c26:	607b      	str	r3, [r7, #4]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <vPortValidateInterruptPriority+0x80>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c34:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <vPortValidateInterruptPriority+0x84>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d90c      	bls.n	8006c56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	b672      	cpsid	i
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	b662      	cpsie	i
 8006c50:	603b      	str	r3, [r7, #0]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <vPortValidateInterruptPriority+0x68>
	}
 8006c56:	bf00      	nop
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	e000e3f0 	.word	0xe000e3f0
 8006c68:	20000bc8 	.word	0x20000bc8
 8006c6c:	e000ed0c 	.word	0xe000ed0c
 8006c70:	20000bcc 	.word	0x20000bcc

08006c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c80:	f7ff f904 	bl	8005e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c84:	4b5b      	ldr	r3, [pc, #364]	; (8006df4 <pvPortMalloc+0x180>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c8c:	f000 f91a 	bl	8006ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c90:	4b59      	ldr	r3, [pc, #356]	; (8006df8 <pvPortMalloc+0x184>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 8092 	bne.w	8006dc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01f      	beq.n	8006ce4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4413      	add	r3, r2
 8006caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d016      	beq.n	8006ce4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f023 0307 	bic.w	r3, r3, #7
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <pvPortMalloc+0x70>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	b672      	cpsid	i
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	b662      	cpsie	i
 8006cde:	617b      	str	r3, [r7, #20]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d06b      	beq.n	8006dc2 <pvPortMalloc+0x14e>
 8006cea:	4b44      	ldr	r3, [pc, #272]	; (8006dfc <pvPortMalloc+0x188>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d866      	bhi.n	8006dc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cf4:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <pvPortMalloc+0x18c>)
 8006cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cf8:	4b41      	ldr	r3, [pc, #260]	; (8006e00 <pvPortMalloc+0x18c>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cfe:	e004      	b.n	8006d0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <pvPortMalloc+0xa8>
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f1      	bne.n	8006d00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d1c:	4b35      	ldr	r3, [pc, #212]	; (8006df4 <pvPortMalloc+0x180>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d04d      	beq.n	8006dc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	4413      	add	r3, r2
 8006d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	1ad2      	subs	r2, r2, r3
 8006d40:	2308      	movs	r3, #8
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d921      	bls.n	8006d8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00c      	beq.n	8006d74 <pvPortMalloc+0x100>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	b672      	cpsid	i
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	b662      	cpsie	i
 8006d6e:	613b      	str	r3, [r7, #16]
}
 8006d70:	bf00      	nop
 8006d72:	e7fe      	b.n	8006d72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d86:	69b8      	ldr	r0, [r7, #24]
 8006d88:	f000 f8fe 	bl	8006f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <pvPortMalloc+0x188>)
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	4a19      	ldr	r2, [pc, #100]	; (8006dfc <pvPortMalloc+0x188>)
 8006d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d9a:	4b18      	ldr	r3, [pc, #96]	; (8006dfc <pvPortMalloc+0x188>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <pvPortMalloc+0x190>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d203      	bcs.n	8006dae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <pvPortMalloc+0x188>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a16      	ldr	r2, [pc, #88]	; (8006e04 <pvPortMalloc+0x190>)
 8006dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <pvPortMalloc+0x184>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006dc2:	f7ff f871 	bl	8005ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <pvPortMalloc+0x176>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	b672      	cpsid	i
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	b662      	cpsie	i
 8006de4:	60fb      	str	r3, [r7, #12]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <pvPortMalloc+0x174>
	return pvReturn;
 8006dea:	69fb      	ldr	r3, [r7, #28]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3728      	adds	r7, #40	; 0x28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	200047d8 	.word	0x200047d8
 8006df8:	200047e4 	.word	0x200047e4
 8006dfc:	200047dc 	.word	0x200047dc
 8006e00:	200047d0 	.word	0x200047d0
 8006e04:	200047e0 	.word	0x200047e0

08006e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d04c      	beq.n	8006eb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e1a:	2308      	movs	r3, #8
 8006e1c:	425b      	negs	r3, r3
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4413      	add	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	4b23      	ldr	r3, [pc, #140]	; (8006ebc <vPortFree+0xb4>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10c      	bne.n	8006e50 <vPortFree+0x48>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	b672      	cpsid	i
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	b662      	cpsie	i
 8006e4a:	60fb      	str	r3, [r7, #12]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00c      	beq.n	8006e72 <vPortFree+0x6a>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	60bb      	str	r3, [r7, #8]
}
 8006e6e:	bf00      	nop
 8006e70:	e7fe      	b.n	8006e70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	4b11      	ldr	r3, [pc, #68]	; (8006ebc <vPortFree+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d115      	bne.n	8006eb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <vPortFree+0xb4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	401a      	ands	r2, r3
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e98:	f7fe fff8 	bl	8005e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <vPortFree+0xb8>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	4a06      	ldr	r2, [pc, #24]	; (8006ec0 <vPortFree+0xb8>)
 8006ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f000 f86c 	bl	8006f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006eb0:	f7fe fffa 	bl	8005ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006eb4:	bf00      	nop
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	200047e4 	.word	0x200047e4
 8006ec0:	200047dc 	.word	0x200047dc

08006ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ed0:	4b27      	ldr	r3, [pc, #156]	; (8006f70 <prvHeapInit+0xac>)
 8006ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3307      	adds	r3, #7
 8006ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	4a1f      	ldr	r2, [pc, #124]	; (8006f70 <prvHeapInit+0xac>)
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006efc:	4a1d      	ldr	r2, [pc, #116]	; (8006f74 <prvHeapInit+0xb0>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f02:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <prvHeapInit+0xb0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f10:	2208      	movs	r2, #8
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a15      	ldr	r2, [pc, #84]	; (8006f78 <prvHeapInit+0xb4>)
 8006f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f26:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <prvHeapInit+0xb4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvHeapInit+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvHeapInit+0xb4>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <prvHeapInit+0xb8>)
 8006f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <prvHeapInit+0xbc>)
 8006f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <prvHeapInit+0xc0>)
 8006f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	20000bd0 	.word	0x20000bd0
 8006f74:	200047d0 	.word	0x200047d0
 8006f78:	200047d8 	.word	0x200047d8
 8006f7c:	200047e0 	.word	0x200047e0
 8006f80:	200047dc 	.word	0x200047dc
 8006f84:	200047e4 	.word	0x200047e4

08006f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f90:	4b28      	ldr	r3, [pc, #160]	; (8007034 <prvInsertBlockIntoFreeList+0xac>)
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	e002      	b.n	8006f9c <prvInsertBlockIntoFreeList+0x14>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60fb      	str	r3, [r7, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d8f7      	bhi.n	8006f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d108      	bne.n	8006fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	441a      	add	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d118      	bne.n	8007010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d00d      	beq.n	8007006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e008      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <prvInsertBlockIntoFreeList+0xb0>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e003      	b.n	8007018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d002      	beq.n	8007026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	200047d0 	.word	0x200047d0
 8007038:	200047d8 	.word	0x200047d8

0800703c <memset>:
 800703c:	4402      	add	r2, r0
 800703e:	4603      	mov	r3, r0
 8007040:	4293      	cmp	r3, r2
 8007042:	d100      	bne.n	8007046 <memset+0xa>
 8007044:	4770      	bx	lr
 8007046:	f803 1b01 	strb.w	r1, [r3], #1
 800704a:	e7f9      	b.n	8007040 <memset+0x4>

0800704c <__libc_init_array>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4d0d      	ldr	r5, [pc, #52]	; (8007084 <__libc_init_array+0x38>)
 8007050:	4c0d      	ldr	r4, [pc, #52]	; (8007088 <__libc_init_array+0x3c>)
 8007052:	1b64      	subs	r4, r4, r5
 8007054:	10a4      	asrs	r4, r4, #2
 8007056:	2600      	movs	r6, #0
 8007058:	42a6      	cmp	r6, r4
 800705a:	d109      	bne.n	8007070 <__libc_init_array+0x24>
 800705c:	4d0b      	ldr	r5, [pc, #44]	; (800708c <__libc_init_array+0x40>)
 800705e:	4c0c      	ldr	r4, [pc, #48]	; (8007090 <__libc_init_array+0x44>)
 8007060:	f000 f826 	bl	80070b0 <_init>
 8007064:	1b64      	subs	r4, r4, r5
 8007066:	10a4      	asrs	r4, r4, #2
 8007068:	2600      	movs	r6, #0
 800706a:	42a6      	cmp	r6, r4
 800706c:	d105      	bne.n	800707a <__libc_init_array+0x2e>
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	f855 3b04 	ldr.w	r3, [r5], #4
 8007074:	4798      	blx	r3
 8007076:	3601      	adds	r6, #1
 8007078:	e7ee      	b.n	8007058 <__libc_init_array+0xc>
 800707a:	f855 3b04 	ldr.w	r3, [r5], #4
 800707e:	4798      	blx	r3
 8007080:	3601      	adds	r6, #1
 8007082:	e7f2      	b.n	800706a <__libc_init_array+0x1e>
 8007084:	0800714c 	.word	0x0800714c
 8007088:	0800714c 	.word	0x0800714c
 800708c:	0800714c 	.word	0x0800714c
 8007090:	08007150 	.word	0x08007150

08007094 <memcpy>:
 8007094:	440a      	add	r2, r1
 8007096:	4291      	cmp	r1, r2
 8007098:	f100 33ff 	add.w	r3, r0, #4294967295
 800709c:	d100      	bne.n	80070a0 <memcpy+0xc>
 800709e:	4770      	bx	lr
 80070a0:	b510      	push	{r4, lr}
 80070a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070aa:	4291      	cmp	r1, r2
 80070ac:	d1f9      	bne.n	80070a2 <memcpy+0xe>
 80070ae:	bd10      	pop	{r4, pc}

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
