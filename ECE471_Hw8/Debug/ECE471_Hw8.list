
ECE471_Hw8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008338  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008584  08008584  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008584  08008584  00018584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800858c  0800858c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008590  08008590  00018590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000018  080085ac  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b8  0800864c  000200b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004734  20000158  080086ec  00020158  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000488c  080086ec  0002488c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001dc84  00000000  00000000  000201cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003ea3  00000000  00000000  0003de4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000018a0  00000000  00000000  00041cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000132e  00000000  00000000  00043598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000299d9  00000000  00000000  000448c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001d457  00000000  00000000  0006e29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00101571  00000000  00000000  0008b6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000068a8  00000000  00000000  0018cc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00193510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000158 	.word	0x20000158
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084f0 	.word	0x080084f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000015c 	.word	0x2000015c
 800020c:	080084f0 	.word	0x080084f0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000174 	.word	0x20000174
 800053c:	200001c8 	.word	0x200001c8

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b092      	sub	sp, #72	; 0x48
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f001 f874 	bl	8001632 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f865 	bl	8000618 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa51 	bl	80009f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f8c9 	bl	80006e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f9ef 	bl	8000938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 fa1d 	bl	8000998 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800055e:	f000 f911 	bl	8000784 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000562:	f000 f987 	bl	8000874 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000566:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0xb4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <main+0xb4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 0220 	orr.w	r2, r2, #32
 8000574:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000576:	2108      	movs	r1, #8
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <main+0xb8>)
 800057a:	f003 fa99 	bl	8003ab0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800057e:	2100      	movs	r1, #0
 8000580:	481e      	ldr	r0, [pc, #120]	; (80005fc <main+0xbc>)
 8000582:	f003 fa95 	bl	8003ab0 <HAL_TIM_PWM_Start>
/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of PwmDataBuffer */
  osMessageQDef(PwmDataBuffer, 16, uint16_t);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0xc0>)
 8000588:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  PwmDataBufferHandle = osMessageCreate(osMessageQ(PwmDataBuffer), NULL);
 8000592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f005 ffb6 	bl	800650a <osMessageCreate>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a18      	ldr	r2, [pc, #96]	; (8000604 <main+0xc4>)
 80005a2:	6013      	str	r3, [r2, #0]
/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005a4:	4b18      	ldr	r3, [pc, #96]	; (8000608 <main+0xc8>)
 80005a6:	f107 041c 	add.w	r4, r7, #28
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	f107 031c 	add.w	r3, r7, #28
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 ff43 	bl	800644a <osThreadCreate>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0xcc>)
 80005c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of SetPwm */
  osThreadDef(SetPwm, SetPwmTask, osPriorityHigh, 0, 128);
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <main+0xd0>)
 80005cc:	463c      	mov	r4, r7
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SetPwmHandle = osThreadCreate(osThread(SetPwm), NULL);
 80005dc:	463b      	mov	r3, r7
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f005 ff32 	bl	800644a <osThreadCreate>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0xd4>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f005 ff26 	bl	800643c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0xb0>
 80005f2:	bf00      	nop
 80005f4:	20000548 	.word	0x20000548
 80005f8:	200004b0 	.word	0x200004b0
 80005fc:	200004fc 	.word	0x200004fc
 8000600:	08008508 	.word	0x08008508
 8000604:	20000ae0 	.word	0x20000ae0
 8000608:	08008524 	.word	0x08008524
 800060c:	20000ad8 	.word	0x20000ad8
 8000610:	08008548 	.word	0x08008548
 8000614:	20000adc 	.word	0x20000adc

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	; 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f007 ff28 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800063c:	f002 f80a 	bl	8002654 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <SystemClock_Config+0xc8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xcc>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <SystemClock_Config+0xcc>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000688:	2304      	movs	r3, #4
 800068a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800068c:	2348      	movs	r3, #72	; 0x48
 800068e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000690:	2302      	movs	r3, #2
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000694:	2303      	movs	r3, #3
 8000696:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	4618      	mov	r0, r3
 800069e:	f001 ffe9 	bl	8002674 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a8:	f000 fc5f 	bl	8000f6a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2102      	movs	r1, #2
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fa77 	bl	8002bbc <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006d4:	f000 fc49 	bl	8000f6a <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	; 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */
  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_ETH_Init+0x84>)
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_ETH_Init+0x88>)
 80006f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_ETH_Init+0x8c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ETH_Init+0x8c>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_ETH_Init+0x8c>)
 8000700:	22e1      	movs	r2, #225	; 0xe1
 8000702:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ETH_Init+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_ETH_Init+0x8c>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_ETH_Init+0x8c>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_ETH_Init+0x84>)
 8000718:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_ETH_Init+0x8c>)
 800071a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800071c:	4b13      	ldr	r3, [pc, #76]	; (800076c <MX_ETH_Init+0x84>)
 800071e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000722:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_ETH_Init+0x84>)
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <MX_ETH_Init+0x90>)
 8000728:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_ETH_Init+0x84>)
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_ETH_Init+0x94>)
 800072e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_ETH_Init+0x84>)
 8000732:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000736:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_ETH_Init+0x84>)
 800073a:	f001 f93f 	bl	80019bc <HAL_ETH_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fc11 	bl	8000f6a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000748:	2238      	movs	r2, #56	; 0x38
 800074a:	2100      	movs	r1, #0
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <MX_ETH_Init+0x98>)
 800074e:	f007 fe95 	bl	800847c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_ETH_Init+0x98>)
 8000754:	2221      	movs	r2, #33	; 0x21
 8000756:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_ETH_Init+0x98>)
 800075a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800075e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_ETH_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */
  /* USER CODE END ETH_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000400 	.word	0x20000400
 8000770:	40028000 	.word	0x40028000
 8000774:	20000ae8 	.word	0x20000ae8
 8000778:	200000b8 	.word	0x200000b8
 800077c:	20000018 	.word	0x20000018
 8000780:	200003c8 	.word	0x200003c8

08000784 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
 80007b2:	615a      	str	r2, [r3, #20]
 80007b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b6:	4b2d      	ldr	r3, [pc, #180]	; (800086c <MX_TIM3_Init+0xe8>)
 80007b8:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_TIM3_Init+0xec>)
 80007ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_TIM3_Init+0xe8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <MX_TIM3_Init+0xe8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_TIM3_Init+0xe8>)
 80007ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <MX_TIM3_Init+0xe8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007dc:	4823      	ldr	r0, [pc, #140]	; (800086c <MX_TIM3_Init+0xe8>)
 80007de:	f003 f835 	bl	800384c <HAL_TIM_Base_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80007e8:	f000 fbbf 	bl	8000f6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <MX_TIM3_Init+0xe8>)
 80007fa:	f003 fc87 	bl	800410c <HAL_TIM_ConfigClockSource>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000804:	f000 fbb1 	bl	8000f6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000808:	4818      	ldr	r0, [pc, #96]	; (800086c <MX_TIM3_Init+0xe8>)
 800080a:	f003 f8ef 	bl	80039ec <HAL_TIM_PWM_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000814:	f000 fba9 	bl	8000f6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4811      	ldr	r0, [pc, #68]	; (800086c <MX_TIM3_Init+0xe8>)
 8000828:	f004 f920 	bl	8004a6c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000832:	f000 fb9a 	bl	8000f6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	2208      	movs	r2, #8
 800084a:	4619      	mov	r1, r3
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <MX_TIM3_Init+0xe8>)
 800084e:	f003 fb49 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000858:	f000 fb87 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <MX_TIM3_Init+0xe8>)
 800085e:	f000 fc9d 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	200004b0 	.word	0x200004b0
 8000870:	40000400 	.word	0x40000400

08000874 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]
 8000896:	615a      	str	r2, [r3, #20]
 8000898:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800089a:	4b25      	ldr	r3, [pc, #148]	; (8000930 <MX_TIM12_Init+0xbc>)
 800089c:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_TIM12_Init+0xc0>)
 800089e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80008ac:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80008c0:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008c2:	f002 ffc3 	bl	800384c <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fb4d 	bl	8000f6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	4619      	mov	r1, r3
 80008dc:	4814      	ldr	r0, [pc, #80]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008de:	f003 fc15 	bl	800410c <HAL_TIM_ConfigClockSource>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80008e8:	f000 fb3f 	bl	8000f6a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80008ec:	4810      	ldr	r0, [pc, #64]	; (8000930 <MX_TIM12_Init+0xbc>)
 80008ee:	f003 f87d 	bl	80039ec <HAL_TIM_PWM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 fb37 	bl	8000f6a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	; 0x60
 80008fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000914:	f003 fae6 	bl	8003ee4 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800091e:	f000 fb24 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM12_Init+0xbc>)
 8000924:	f000 fc3a 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200004fc 	.word	0x200004fc
 8000934:	40001800 	.word	0x40001800

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 0 */
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */
  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_USART3_UART_Init+0x5c>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000944:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART3_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART3_UART_Init+0x58>)
 800097c:	f004 f922 	bl	8004bc4 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000986:	f000 faf0 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000548 	.word	0x20000548
 8000994:	40004800 	.word	0x40004800

08000998 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_OTG_FS_Init 0 */
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */
  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2206      	movs	r2, #6
 80009a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2201      	movs	r2, #1
 80009c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	f001 fcf1 	bl	80023c2 <HAL_PCD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 fac0 	bl	8000f6a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */
  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200005d0 	.word	0x200005d0

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	4b46      	ldr	r3, [pc, #280]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a45      	ldr	r2, [pc, #276]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a22:	4b40      	ldr	r3, [pc, #256]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	4b34      	ldr	r3, [pc, #208]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b31      	ldr	r3, [pc, #196]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a27      	ldr	r2, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4822      	ldr	r0, [pc, #136]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000aa0:	f001 fc76 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4820      	ldr	r0, [pc, #128]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000aaa:	f001 fc71 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	481a      	ldr	r0, [pc, #104]	; (8000b30 <MX_GPIO_Init+0x13c>)
 8000ac6:	f001 fa9f 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4811      	ldr	r0, [pc, #68]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000ae2:	f001 fa91 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ae6:	2380      	movs	r3, #128	; 0x80
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000afa:	f001 fa85 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afe:	2380      	movs	r3, #128	; 0x80
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_GPIO_Init+0x138>)
 8000b16:	f001 fa77 	bl	8002008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	40020400 	.word	0x40020400
 8000b30:	40020800 	.word	0x40020800

08000b34 <setPWM>:
	}
}


//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]

		switch(value){	//set the duty cycle
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	f200 808e 	bhi.w	8000c68 <setPWM+0x134>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <setPWM+0x20>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b81 	.word	0x08000b81
 8000b58:	08000b87 	.word	0x08000b87
 8000b5c:	08000b9b 	.word	0x08000b9b
 8000b60:	08000bb1 	.word	0x08000bb1
 8000b64:	08000bcb 	.word	0x08000bcb
 8000b68:	08000be1 	.word	0x08000be1
 8000b6c:	08000bfb 	.word	0x08000bfb
 8000b70:	08000c17 	.word	0x08000c17
 8000b74:	08000c31 	.word	0x08000c31
 8000b78:	08000c47 	.word	0x08000c47
 8000b7c:	08000c61 	.word	0x08000c61
			case 0:
				dutyCycle =0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
				break;
 8000b84:	e072      	b.n	8000c6c <setPWM+0x138>
			case 1:
				dutyCycle =(max/10);
 8000b86:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <setPWM+0x160>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a43      	ldr	r2, [pc, #268]	; (8000c98 <setPWM+0x164>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	60fb      	str	r3, [r7, #12]
				break;
 8000b98:	e068      	b.n	8000c6c <setPWM+0x138>
			case 2:
				dutyCycle =2*(max/10);
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <setPWM+0x160>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	; (8000c98 <setPWM+0x164>)
 8000ba0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba4:	1092      	asrs	r2, r2, #2
 8000ba6:	17db      	asrs	r3, r3, #31
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	60fb      	str	r3, [r7, #12]
				break;
 8000bae:	e05d      	b.n	8000c6c <setPWM+0x138>
			case 3:
				dutyCycle =3*(max/10);
 8000bb0:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <setPWM+0x160>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a38      	ldr	r2, [pc, #224]	; (8000c98 <setPWM+0x164>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1092      	asrs	r2, r2, #2
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad2      	subs	r2, r2, r3
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
				break;
 8000bc8:	e050      	b.n	8000c6c <setPWM+0x138>
			case 4:
				dutyCycle =4*(max/10);
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <setPWM+0x160>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a32      	ldr	r2, [pc, #200]	; (8000c98 <setPWM+0x164>)
 8000bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd4:	1092      	asrs	r2, r2, #2
 8000bd6:	17db      	asrs	r3, r3, #31
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
				break;
 8000bde:	e045      	b.n	8000c6c <setPWM+0x138>
			case 5:
				dutyCycle =5*(max/10);
 8000be0:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <setPWM+0x160>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2c      	ldr	r2, [pc, #176]	; (8000c98 <setPWM+0x164>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1092      	asrs	r2, r2, #2
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
				break;
 8000bf8:	e038      	b.n	8000c6c <setPWM+0x138>
			case 6:
				dutyCycle =6*(max/10);
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <setPWM+0x160>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a26      	ldr	r2, [pc, #152]	; (8000c98 <setPWM+0x164>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1092      	asrs	r2, r2, #2
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
				break;
 8000c14:	e02a      	b.n	8000c6c <setPWM+0x138>
			case 7:
				dutyCycle =7*(max/10);
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <setPWM+0x160>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1f      	ldr	r2, [pc, #124]	; (8000c98 <setPWM+0x164>)
 8000c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c20:	1092      	asrs	r2, r2, #2
 8000c22:	17db      	asrs	r3, r3, #31
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
				break;
 8000c2e:	e01d      	b.n	8000c6c <setPWM+0x138>
			case 8:
				dutyCycle =8*(max/10);
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <setPWM+0x160>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <setPWM+0x164>)
 8000c36:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3a:	1092      	asrs	r2, r2, #2
 8000c3c:	17db      	asrs	r3, r3, #31
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	60fb      	str	r3, [r7, #12]
				break;
 8000c44:	e012      	b.n	8000c6c <setPWM+0x138>
			case 9:
				dutyCycle =9*(max/10);
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <setPWM+0x160>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <setPWM+0x164>)
 8000c4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c50:	1092      	asrs	r2, r2, #2
 8000c52:	17db      	asrs	r3, r3, #31
 8000c54:	1ad2      	subs	r2, r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
				break;
 8000c5e:	e005      	b.n	8000c6c <setPWM+0x138>
			case 10:
				dutyCycle = max;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <setPWM+0x160>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
				break;
 8000c66:	e001      	b.n	8000c6c <setPWM+0x138>
			default:
				dutyCycle = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
		}

		if(led == green){
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <setPWM+0x146>
			TIM3->CCR3 = dutyCycle;
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <setPWM+0x168>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		else if (led == red){
			TIM12->CCR1 = dutyCycle;
		}
}
 8000c78:	e005      	b.n	8000c86 <setPWM+0x152>
		else if (led == red){
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <setPWM+0x152>
			TIM12->CCR1 = dutyCycle;
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <setPWM+0x16c>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000004 	.word	0x20000004
 8000c98:	66666667 	.word	0x66666667
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40001800 	.word	0x40001800

08000ca4 <killSwitch>:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		}

}

void killSwitch(){	//implement killSwitch functionality
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

	 if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	4808      	ldr	r0, [pc, #32]	; (8000cd0 <killSwitch+0x2c>)
 8000cae:	f001 fb57 	bl	8002360 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d108      	bne.n	8000cca <killSwitch+0x26>

		 TIM3->CCR3 = 0;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <killSwitch+0x30>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	63da      	str	r2, [r3, #60]	; 0x3c
		 TIM12->CCR1 = 0;
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <killSwitch+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
		 osDelay(200);	//debouncing delay
 8000cc4:	20c8      	movs	r0, #200	; 0xc8
 8000cc6:	f005 fc0c 	bl	80064e2 <osDelay>

	 }
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40000400 	.word	0x40000400
 8000cd8:	40001800 	.word	0x40001800

08000cdc <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

/* Infinite loop */
	for(;;)
	{
		killSwitch();
 8000ce4:	f7ff ffde 	bl	8000ca4 <killSwitch>
 8000ce8:	e7fc      	b.n	8000ce4 <StartDefaultTask+0x8>
	...

08000cec <SetPwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SetPwmTask */
void SetPwmTask(void const * argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	{

		 BaseType_t status;
		 uint8_t a,b,c,d;

		 status = xQueueReceive(PwmDataBufferHandle, &a, portMAX_DELAY);
 8000cf4:	4b90      	ldr	r3, [pc, #576]	; (8000f38 <SetPwmTask+0x24c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f107 0111 	add.w	r1, r7, #17
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	4618      	mov	r0, r3
 8000d02:	f005 fecd 	bl	8006aa0 <xQueueReceive>
 8000d06:	6178      	str	r0, [r7, #20]

			 if(status == pdPASS){	//if the queue is recieved succesfully
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d1f2      	bne.n	8000cf4 <SetPwmTask+0x8>

				//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);



				 if(a==255){	//if the data is 255 start the readin
 8000d0e:	7c7b      	ldrb	r3, [r7, #17]
 8000d10:	2bff      	cmp	r3, #255	; 0xff
 8000d12:	d1ef      	bne.n	8000cf4 <SetPwmTask+0x8>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2180      	movs	r1, #128	; 0x80
 8000d18:	4888      	ldr	r0, [pc, #544]	; (8000f3c <SetPwmTask+0x250>)
 8000d1a:	f001 fb39 	bl	8002390 <HAL_GPIO_WritePin>
					osDelay(50);
 8000d1e:	2032      	movs	r0, #50	; 0x32
 8000d20:	f005 fbdf 	bl	80064e2 <osDelay>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	4884      	ldr	r0, [pc, #528]	; (8000f3c <SetPwmTask+0x250>)
 8000d2a:	f001 fb31 	bl	8002390 <HAL_GPIO_WritePin>
					xQueueReceive(PwmDataBufferHandle, &b, portMAX_DELAY);
 8000d2e:	4b82      	ldr	r3, [pc, #520]	; (8000f38 <SetPwmTask+0x24c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f107 0110 	add.w	r1, r7, #16
 8000d36:	f04f 32ff 	mov.w	r2, #4294967295
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f005 feb0 	bl	8006aa0 <xQueueReceive>
					xQueueReceive(PwmDataBufferHandle, &c, portMAX_DELAY);
 8000d40:	4b7d      	ldr	r3, [pc, #500]	; (8000f38 <SetPwmTask+0x24c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f107 010f 	add.w	r1, r7, #15
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f005 fea7 	bl	8006aa0 <xQueueReceive>
					xQueueReceive(PwmDataBufferHandle, &d, portMAX_DELAY);
 8000d52:	4b79      	ldr	r3, [pc, #484]	; (8000f38 <SetPwmTask+0x24c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f107 010e 	add.w	r1, r7, #14
 8000d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f005 fe9e 	bl	8006aa0 <xQueueReceive>

					uint8_t green_pwm = (b >> 4) & 0x0F; // Extract the upper 4 bits
 8000d64:	7c3b      	ldrb	r3, [r7, #16]
 8000d66:	091b      	lsrs	r3, r3, #4
 8000d68:	74fb      	strb	r3, [r7, #19]
					uint8_t red_pwm = b & 0x0F;
 8000d6a:	7c3b      	ldrb	r3, [r7, #16]
 8000d6c:	f003 030f 	and.w	r3, r3, #15
 8000d70:	74bb      	strb	r3, [r7, #18]

					//if((a^b^c^d) == 0){
						switch(c){
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <SetPwmTask+0x98>
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d107      	bne.n	8000d8c <SetPwmTask+0xa0>

							case 2:
								active=true;
 8000d7c:	4b70      	ldr	r3, [pc, #448]	; (8000f40 <SetPwmTask+0x254>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
								break;
 8000d82:	e003      	b.n	8000d8c <SetPwmTask+0xa0>

							case 1:
								active=false;
 8000d84:	4b6e      	ldr	r3, [pc, #440]	; (8000f40 <SetPwmTask+0x254>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
								break;
 8000d8a:	bf00      	nop

						}

				//	if(active == true){

						switch (green_pwm) {
 8000d8c:	7cfb      	ldrb	r3, [r7, #19]
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d865      	bhi.n	8000e5e <SetPwmTask+0x172>
 8000d92:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <SetPwmTask+0xac>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000dc5 	.word	0x08000dc5
 8000d9c:	08000dd3 	.word	0x08000dd3
 8000da0:	08000de1 	.word	0x08000de1
 8000da4:	08000def 	.word	0x08000def
 8000da8:	08000dfd 	.word	0x08000dfd
 8000dac:	08000e0b 	.word	0x08000e0b
 8000db0:	08000e19 	.word	0x08000e19
 8000db4:	08000e27 	.word	0x08000e27
 8000db8:	08000e35 	.word	0x08000e35
 8000dbc:	08000e43 	.word	0x08000e43
 8000dc0:	08000e51 	.word	0x08000e51
				    case 0:
				        setPWM(greenLed, 10);  // Green PWM = 0%
 8000dc4:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <SetPwmTask+0x258>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	210a      	movs	r1, #10
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff feb2 	bl	8000b34 <setPWM>
				        break;
 8000dd0:	e045      	b.n	8000e5e <SetPwmTask+0x172>
				    case 1:
				        setPWM(greenLed, 1); // Green PWM = 10%
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <SetPwmTask+0x258>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff feab 	bl	8000b34 <setPWM>
				        break;
 8000dde:	e03e      	b.n	8000e5e <SetPwmTask+0x172>
				    case 2:
				        setPWM(greenLed, 2); // Green PWM = 20%
 8000de0:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <SetPwmTask+0x258>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fea4 	bl	8000b34 <setPWM>
				        break;
 8000dec:	e037      	b.n	8000e5e <SetPwmTask+0x172>
				    case 3:
				        setPWM(greenLed, 3); // Green PWM = 30%
 8000dee:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <SetPwmTask+0x258>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2103      	movs	r1, #3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe9d 	bl	8000b34 <setPWM>
				        break;
 8000dfa:	e030      	b.n	8000e5e <SetPwmTask+0x172>
				    case 4:
				        setPWM(greenLed, 4); // Green PWM = 40%
 8000dfc:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <SetPwmTask+0x258>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2104      	movs	r1, #4
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fe96 	bl	8000b34 <setPWM>
				        break;
 8000e08:	e029      	b.n	8000e5e <SetPwmTask+0x172>
				    case 5:
				        setPWM(greenLed, 5); // Green PWM = 50%
 8000e0a:	4b4e      	ldr	r3, [pc, #312]	; (8000f44 <SetPwmTask+0x258>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2105      	movs	r1, #5
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe8f 	bl	8000b34 <setPWM>
				        break;
 8000e16:	e022      	b.n	8000e5e <SetPwmTask+0x172>
				    case 6:
				        setPWM(greenLed, 6); // Green PWM = 60%
 8000e18:	4b4a      	ldr	r3, [pc, #296]	; (8000f44 <SetPwmTask+0x258>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2106      	movs	r1, #6
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe88 	bl	8000b34 <setPWM>
				        break;
 8000e24:	e01b      	b.n	8000e5e <SetPwmTask+0x172>
				    case 7:
				        setPWM(greenLed, 7); // Green PWM = 70%
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <SetPwmTask+0x258>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2107      	movs	r1, #7
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fe81 	bl	8000b34 <setPWM>
				        break;
 8000e32:	e014      	b.n	8000e5e <SetPwmTask+0x172>
				    case 8:
				        setPWM(greenLed, 8); // Green PWM = 80%
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <SetPwmTask+0x258>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2108      	movs	r1, #8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fe7a 	bl	8000b34 <setPWM>
				        break;
 8000e40:	e00d      	b.n	8000e5e <SetPwmTask+0x172>
				    case 9:
				        setPWM(greenLed, 9); // Green PWM = 90%
 8000e42:	4b40      	ldr	r3, [pc, #256]	; (8000f44 <SetPwmTask+0x258>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2109      	movs	r1, #9
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fe73 	bl	8000b34 <setPWM>
				        break;
 8000e4e:	e006      	b.n	8000e5e <SetPwmTask+0x172>
				    case 10:
				        setPWM(greenLed, 10); // Green PWM = 100%
 8000e50:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <SetPwmTask+0x258>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	210a      	movs	r1, #10
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fe6c 	bl	8000b34 <setPWM>
				        break;
 8000e5c:	bf00      	nop
				}

				switch (red_pwm) {
 8000e5e:	7cbb      	ldrb	r3, [r7, #18]
 8000e60:	2b0a      	cmp	r3, #10
 8000e62:	f63f af47 	bhi.w	8000cf4 <SetPwmTask+0x8>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <SetPwmTask+0x180>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e99 	.word	0x08000e99
 8000e70:	08000ea7 	.word	0x08000ea7
 8000e74:	08000eb5 	.word	0x08000eb5
 8000e78:	08000ec3 	.word	0x08000ec3
 8000e7c:	08000ed1 	.word	0x08000ed1
 8000e80:	08000edf 	.word	0x08000edf
 8000e84:	08000eed 	.word	0x08000eed
 8000e88:	08000efb 	.word	0x08000efb
 8000e8c:	08000f09 	.word	0x08000f09
 8000e90:	08000f17 	.word	0x08000f17
 8000e94:	08000f25 	.word	0x08000f25
					case 0:
						setPWM(redLed, 10);  // Green PWM = 0%
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <SetPwmTask+0x25c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	210a      	movs	r1, #10
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe48 	bl	8000b34 <setPWM>
						break;
 8000ea4:	e046      	b.n	8000f34 <SetPwmTask+0x248>
					case 1:
						setPWM(redLed, 1); // Green PWM = 10%
 8000ea6:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <SetPwmTask+0x25c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe41 	bl	8000b34 <setPWM>
						break;
 8000eb2:	e03f      	b.n	8000f34 <SetPwmTask+0x248>
					case 2:
						setPWM(redLed, 2); // Green PWM = 20%
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <SetPwmTask+0x25c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe3a 	bl	8000b34 <setPWM>
						break;
 8000ec0:	e038      	b.n	8000f34 <SetPwmTask+0x248>
					case 3:
						setPWM(redLed, 3); // Green PWM = 30%
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <SetPwmTask+0x25c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe33 	bl	8000b34 <setPWM>
						break;
 8000ece:	e031      	b.n	8000f34 <SetPwmTask+0x248>
					case 4:
						setPWM(redLed, 4); // Green PWM = 40%
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <SetPwmTask+0x25c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fe2c 	bl	8000b34 <setPWM>
						break;
 8000edc:	e02a      	b.n	8000f34 <SetPwmTask+0x248>
					case 5:
						setPWM(redLed, 5); // Green PWM = 50%
 8000ede:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <SetPwmTask+0x25c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fe25 	bl	8000b34 <setPWM>
						break;
 8000eea:	e023      	b.n	8000f34 <SetPwmTask+0x248>
					case 6:
						setPWM(redLed, 6); // Green PWM = 60%
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <SetPwmTask+0x25c>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2106      	movs	r1, #6
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff fe1e 	bl	8000b34 <setPWM>
						break;
 8000ef8:	e01c      	b.n	8000f34 <SetPwmTask+0x248>
					case 7:
						setPWM(redLed, 7); // Green PWM = 70%
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <SetPwmTask+0x25c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2107      	movs	r1, #7
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe17 	bl	8000b34 <setPWM>
						break;
 8000f06:	e015      	b.n	8000f34 <SetPwmTask+0x248>
					case 8:
						setPWM(redLed, 8); // Green PWM = 80%
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <SetPwmTask+0x25c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe10 	bl	8000b34 <setPWM>
						break;
 8000f14:	e00e      	b.n	8000f34 <SetPwmTask+0x248>
					case 9:
						setPWM(redLed, 9); // Green PWM = 90%
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <SetPwmTask+0x25c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2109      	movs	r1, #9
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fe09 	bl	8000b34 <setPWM>
						break;
 8000f22:	e007      	b.n	8000f34 <SetPwmTask+0x248>
					case 10:
						setPWM(redLed, 10); // Green PWM = 100%
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SetPwmTask+0x25c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	210a      	movs	r1, #10
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fe02 	bl	8000b34 <setPWM>
						break;
 8000f30:	bf00      	nop
 8000f32:	e6df      	b.n	8000cf4 <SetPwmTask+0x8>
	{
 8000f34:	e6de      	b.n	8000cf4 <SetPwmTask+0x8>
 8000f36:	bf00      	nop
 8000f38:	20000ae0 	.word	0x20000ae0
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	20000ae5 	.word	0x20000ae5
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000ae4 	.word	0x20000ae4

08000f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5e:	f000 fb75 	bl	800164c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6e:	b672      	cpsid	i
}
 8000f70:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8000f72:	e7fe      	b.n	8000f72 <Error_Handler+0x8>

08000f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f000 fc47 	bl	8001844 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a4e      	ldr	r2, [pc, #312]	; (800111c <HAL_ETH_MspInit+0x158>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	f040 8096 	bne.w	8001114 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000fe8:	4b4d      	ldr	r3, [pc, #308]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a4c      	ldr	r2, [pc, #304]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	623b      	str	r3, [r7, #32]
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a46      	ldr	r2, [pc, #280]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001006:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b44      	ldr	r3, [pc, #272]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800101e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001022:	6313      	str	r3, [r2, #48]	; 0x30
 8001024:	4b3e      	ldr	r3, [pc, #248]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001030:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	4a3a      	ldr	r2, [pc, #232]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001036:	f043 0304 	orr.w	r3, r3, #4
 800103a:	6313      	str	r3, [r2, #48]	; 0x30
 800103c:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a34      	ldr	r2, [pc, #208]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	4a28      	ldr	r2, [pc, #160]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 800107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001082:	6313      	str	r3, [r2, #48]	; 0x30
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <HAL_ETH_MspInit+0x15c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001090:	2332      	movs	r3, #50	; 0x32
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010a0:	230b      	movs	r3, #11
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	481e      	ldr	r0, [pc, #120]	; (8001124 <HAL_ETH_MspInit+0x160>)
 80010ac:	f000 ffac 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010b0:	2386      	movs	r3, #134	; 0x86
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010c0:	230b      	movs	r3, #11
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4817      	ldr	r0, [pc, #92]	; (8001128 <HAL_ETH_MspInit+0x164>)
 80010cc:	f000 ff9c 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	480f      	ldr	r0, [pc, #60]	; (800112c <HAL_ETH_MspInit+0x168>)
 80010ee:	f000 ff8b 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001104:	230b      	movs	r3, #11
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <HAL_ETH_MspInit+0x16c>)
 8001110:	f000 ff7a 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3738      	adds	r7, #56	; 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40028000 	.word	0x40028000
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40021800 	.word	0x40021800

08001134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <HAL_TIM_Base_MspInit+0x5c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10c      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800115e:	e010      	b.n	8001182 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <HAL_TIM_Base_MspInit+0x64>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10b      	bne.n	8001182 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800116a:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_TIM_Base_MspInit+0x60>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40000400 	.word	0x40000400
 8001194:	40023800 	.word	0x40023800
 8001198:	40001800 	.word	0x40001800

0800119c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	; 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a22      	ldr	r2, [pc, #136]	; (8001244 <HAL_TIM_MspPostInit+0xa8>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11c      	bne.n	80011f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a21      	ldr	r2, [pc, #132]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80011e6:	2302      	movs	r3, #2
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4619      	mov	r1, r3
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <HAL_TIM_MspPostInit+0xb0>)
 80011f2:	f000 ff09 	bl	8002008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80011f6:	e021      	b.n	800123c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <HAL_TIM_MspPostInit+0xb4>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d11c      	bne.n	800123c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_TIM_MspPostInit+0xac>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800121a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800122c:	2309      	movs	r3, #9
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <HAL_TIM_MspPostInit+0xb0>)
 8001238:	f000 fee6 	bl	8002008 <HAL_GPIO_Init>
}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40000400 	.word	0x40000400
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	40001800 	.word	0x40001800

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0aa      	sub	sp, #168	; 0xa8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2284      	movs	r2, #132	; 0x84
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f007 f901 	bl	800847c <memset>
  if(huart->Instance==USART3)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a26      	ldr	r2, [pc, #152]	; (8001318 <HAL_UART_MspInit+0xc4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d144      	bne.n	800130e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001288:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800128a:	2300      	movs	r3, #0
 800128c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4618      	mov	r0, r3
 8001294:	f001 feea 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800129e:	f7ff fe64 	bl	8000f6a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a1d      	ldr	r2, [pc, #116]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_UART_MspInit+0xc8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ec:	2307      	movs	r3, #7
 80012ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012f6:	4619      	mov	r1, r3
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <HAL_UART_MspInit+0xcc>)
 80012fa:	f000 fe85 	bl	8002008 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	2027      	movs	r0, #39	; 0x27
 8001304:	f000 fa9e 	bl	8001844 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001308:	2027      	movs	r0, #39	; 0x27
 800130a:	f000 fab7 	bl	800187c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	37a8      	adds	r7, #168	; 0xa8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40004800 	.word	0x40004800
 800131c:	40023800 	.word	0x40023800
 8001320:	40020c00 	.word	0x40020c00

08001324 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ac      	sub	sp, #176	; 0xb0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0318 	add.w	r3, r7, #24
 8001340:	2284      	movs	r2, #132	; 0x84
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f007 f899 	bl	800847c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001352:	d159      	bne.n	8001408 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001358:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4618      	mov	r0, r3
 8001366:	f001 fe81 	bl	800306c <HAL_RCCEx_PeriphCLKConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001370:	f7ff fdfb 	bl	8000f6a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <HAL_PCD_MspInit+0xec>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <HAL_PCD_MspInit+0xec>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800138c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013a6:	230a      	movs	r3, #10
 80013a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b0:	4619      	mov	r1, r3
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013b4:	f000 fe28 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <HAL_PCD_MspInit+0xf0>)
 80013d4:	f000 fe18 	bl	8002008 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e2:	6353      	str	r3, [r2, #52]	; 0x34
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4a06      	ldr	r2, [pc, #24]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fa:	6453      	str	r3, [r2, #68]	; 0x44
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_PCD_MspInit+0xec>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	37b0      	adds	r7, #176	; 0xb0
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_InitTick+0xe4>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a33      	ldr	r2, [pc, #204]	; (80014fc <HAL_InitTick+0xe4>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_InitTick+0xe4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fddc 	bl	8003008 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	2b00      	cmp	r3, #0
 8001458:	d103      	bne.n	8001462 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800145a:	f001 fdad 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800145e:	6378      	str	r0, [r7, #52]	; 0x34
 8001460:	e004      	b.n	800146c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001462:	f001 fda9 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8001466:	4603      	mov	r3, r0
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146e:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_InitTick+0xe8>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	0c9b      	lsrs	r3, r3, #18
 8001476:	3b01      	subs	r3, #1
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_InitTick+0xec>)
 800147c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001480:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_InitTick+0xec>)
 8001484:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001488:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_InitTick+0xec>)
 800148c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_InitTick+0xec>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_InitTick+0xec>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_InitTick+0xec>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80014a2:	4818      	ldr	r0, [pc, #96]	; (8001504 <HAL_InitTick+0xec>)
 80014a4:	f002 f9d2 	bl	800384c <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d11b      	bne.n	80014ee <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80014b6:	4813      	ldr	r0, [pc, #76]	; (8001504 <HAL_InitTick+0xec>)
 80014b8:	f002 fa20 	bl	80038fc <HAL_TIM_Base_Start_IT>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d111      	bne.n	80014ee <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014ca:	201c      	movs	r0, #28
 80014cc:	f000 f9d6 	bl	800187c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d808      	bhi.n	80014e8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80014d6:	2200      	movs	r2, #0
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 f9b2 	bl	8001844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_InitTick+0xf0>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e002      	b.n	80014ee <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3738      	adds	r7, #56	; 0x38
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	431bde83 	.word	0x431bde83
 8001504:	20000af0 	.word	0x20000af0
 8001508:	2000000c 	.word	0x2000000c

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <TIM2_IRQHandler+0x10>)
 800153e:	f002 fbb1 	bl	8003ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000af0 	.word	0x20000af0

0800154c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
		BaseType_t xSchedulerChanged = pdFALSE;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
		uint8_t buffer;
		HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, &buffer, 1, 0);
 8001556:	1df9      	adds	r1, r7, #7
 8001558:	2300      	movs	r3, #0
 800155a:	2201      	movs	r2, #1
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <USART3_IRQHandler+0x64>)
 800155e:	f003 fc02 	bl	8004d66 <HAL_UART_Receive>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]

		if (HAL_OK == status) {	//if uart has been recieved
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10e      	bne.n	800158a <USART3_IRQHandler+0x3e>

		    xQueueSendFromISR(PwmDataBufferHandle, &buffer, &xSchedulerChanged);
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <USART3_IRQHandler+0x68>)
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	f107 0208 	add.w	r2, r7, #8
 8001574:	1df9      	adds	r1, r7, #7
 8001576:	2300      	movs	r3, #0
 8001578:	f005 f9f1 	bl	800695e <xQueueGenericSendFromISR>
		    HAL_UART_Transmit(&huart3, &buffer, 1, HAL_MAX_DELAY);
 800157c:	1df9      	adds	r1, r7, #7
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	2201      	movs	r2, #1
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <USART3_IRQHandler+0x64>)
 8001586:	f003 fb6b 	bl	8004c60 <HAL_UART_Transmit>
			//for debugging purposes
		}



		portYIELD_FROM_ISR(xSchedulerChanged);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d007      	beq.n	80015a0 <USART3_IRQHandler+0x54>
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <USART3_IRQHandler+0x6c>)
 8001592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	f3bf 8f6f 	isb	sy
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <USART3_IRQHandler+0x64>)
 80015a2:	f003 fca5 	bl	8004ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000548 	.word	0x20000548
 80015b4:	20000ae0 	.word	0x20000ae0
 80015b8:	e000ed04 	.word	0xe000ed04

080015bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e8:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015fc:	4c0b      	ldr	r4, [pc, #44]	; (800162c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160a:	f7ff ffd7 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f006 ff3d 	bl	800848c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7fe ff95 	bl	8000540 <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001618:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800161c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001620:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001624:	08008594 	.word	0x08008594
  ldr r2, =_sbss
 8001628:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800162c:	2000488c 	.word	0x2000488c

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>

08001632 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001636:	2003      	movs	r0, #3
 8001638:	f000 f8f9 	bl	800182e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163c:	200f      	movs	r0, #15
 800163e:	f7ff feeb 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001642:	f7ff fc97 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000010 	.word	0x20000010
 8001670:	20000b3c 	.word	0x20000b3c

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000b3c 	.word	0x20000b3c

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000010 	.word	0x20000010

080016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f0:	4013      	ands	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <__NVIC_SetPriorityGrouping+0x44>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x40>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00
 8001718:	05fa0000 	.word	0x05fa0000

0800171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <__NVIC_GetPriorityGrouping+0x18>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	0a1b      	lsrs	r3, r3, #8
 8001726:	f003 0307 	and.w	r3, r3, #7
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	2b00      	cmp	r3, #0
 8001748:	db0b      	blt.n	8001762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	f003 021f 	and.w	r2, r3, #31
 8001750:	4907      	ldr	r1, [pc, #28]	; (8001770 <__NVIC_EnableIRQ+0x38>)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	2001      	movs	r0, #1
 800175a:	fa00 f202 	lsl.w	r2, r0, r2
 800175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e100 	.word	0xe000e100

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff ff4c 	bl	80016d4 <__NVIC_SetPriorityGrouping>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001856:	f7ff ff61 	bl	800171c <__NVIC_GetPriorityGrouping>
 800185a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	6978      	ldr	r0, [r7, #20]
 8001862:	f7ff ffb1 	bl	80017c8 <NVIC_EncodePriority>
 8001866:	4602      	mov	r2, r0
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff80 	bl	8001774 <__NVIC_SetPriority>
}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff54 	bl	8001738 <__NVIC_EnableIRQ>
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a6:	f7ff fee5 	bl	8001674 <HAL_GetTick>
 80018aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d008      	beq.n	80018ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2280      	movs	r2, #128	; 0x80
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e052      	b.n	8001970 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0216 	bic.w	r2, r2, #22
 80018d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <HAL_DMA_Abort+0x62>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d007      	beq.n	800190a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0208 	bic.w	r2, r2, #8
 8001908:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191a:	e013      	b.n	8001944 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191c:	f7ff feaa 	bl	8001674 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b05      	cmp	r3, #5
 8001928:	d90c      	bls.n	8001944 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2220      	movs	r2, #32
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e015      	b.n	8001970 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1e4      	bne.n	800191c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	223f      	movs	r2, #63	; 0x3f
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d004      	beq.n	8001996 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00c      	b.n	80019b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2205      	movs	r2, #5
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e06a      	b.n	8001aa4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d106      	bne.n	80019e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2223      	movs	r2, #35	; 0x23
 80019dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff faef 	bl	8000fc4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_ETH_Init+0xf0>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a30      	ldr	r2, [pc, #192]	; (8001aac <HAL_ETH_Init+0xf0>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b2e      	ldr	r3, [pc, #184]	; (8001aac <HAL_ETH_Init+0xf0>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019fe:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_ETH_Init+0xf4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <HAL_ETH_Init+0xf4>)
 8001a04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_ETH_Init+0xf4>)
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4927      	ldr	r1, [pc, #156]	; (8001ab0 <HAL_ETH_Init+0xf4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_ETH_Init+0xf4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a34:	f7ff fe1e 	bl	8001674 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a3a:	e011      	b.n	8001a60 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a3c:	f7ff fe1a 	bl	8001674 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a4a:	d909      	bls.n	8001a60 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	22e0      	movs	r2, #224	; 0xe0
 8001a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e021      	b.n	8001aa4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e4      	bne.n	8001a3c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f958 	bl	8001d28 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f9ff 	bl	8001e7c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fa55 	bl	8001f2e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f9bd 	bl	8001e0c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40013800 	.word	0x40013800

08001ab4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4b51      	ldr	r3, [pc, #324]	; (8001c10 <ETH_SetMACConfig+0x15c>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7c1b      	ldrb	r3, [r3, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d102      	bne.n	8001adc <ETH_SetMACConfig+0x28>
 8001ad6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ada:	e000      	b.n	8001ade <ETH_SetMACConfig+0x2a>
 8001adc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	7c5b      	ldrb	r3, [r3, #17]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <ETH_SetMACConfig+0x38>
 8001ae6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aea:	e000      	b.n	8001aee <ETH_SetMACConfig+0x3a>
 8001aec:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001af4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	7fdb      	ldrb	r3, [r3, #31]
 8001afa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001afc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	7f92      	ldrb	r2, [r2, #30]
 8001b08:	2a00      	cmp	r2, #0
 8001b0a:	d102      	bne.n	8001b12 <ETH_SetMACConfig+0x5e>
 8001b0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b10:	e000      	b.n	8001b14 <ETH_SetMACConfig+0x60>
 8001b12:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
 8001b1a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b1c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b22:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	791b      	ldrb	r3, [r3, #4]
 8001b28:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	d102      	bne.n	8001b3c <ETH_SetMACConfig+0x88>
 8001b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3a:	e000      	b.n	8001b3e <ETH_SetMACConfig+0x8a>
 8001b3c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b3e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7bdb      	ldrb	r3, [r3, #15]
 8001b44:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b46:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b54:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b56:	4313      	orrs	r3, r2
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b6e:	2001      	movs	r0, #1
 8001b70:	f7ff fd8c 	bl	800168c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d101      	bne.n	8001ba2 <ETH_SetMACConfig+0xee>
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	e000      	b.n	8001ba4 <ETH_SetMACConfig+0xf0>
 8001ba2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ba4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001baa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001bb2:	2a01      	cmp	r2, #1
 8001bb4:	d101      	bne.n	8001bba <ETH_SetMACConfig+0x106>
 8001bb6:	2208      	movs	r2, #8
 8001bb8:	e000      	b.n	8001bbc <ETH_SetMACConfig+0x108>
 8001bba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001bbc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001bc4:	2a01      	cmp	r2, #1
 8001bc6:	d101      	bne.n	8001bcc <ETH_SetMACConfig+0x118>
 8001bc8:	2204      	movs	r2, #4
 8001bca:	e000      	b.n	8001bce <ETH_SetMACConfig+0x11a>
 8001bcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001bd6:	2a01      	cmp	r2, #1
 8001bd8:	d101      	bne.n	8001bde <ETH_SetMACConfig+0x12a>
 8001bda:	2202      	movs	r2, #2
 8001bdc:	e000      	b.n	8001be0 <ETH_SetMACConfig+0x12c>
 8001bde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f7ff fd47 	bl	800168c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	ff20810f 	.word	0xff20810f

08001c14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <ETH_SetDMAConfig+0x110>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	7b1b      	ldrb	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <ETH_SetDMAConfig+0x2c>
 8001c3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c3e:	e000      	b.n	8001c42 <ETH_SetDMAConfig+0x2e>
 8001c40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	7b5b      	ldrb	r3, [r3, #13]
 8001c46:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c48:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	7f52      	ldrb	r2, [r2, #29]
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d102      	bne.n	8001c58 <ETH_SetDMAConfig+0x44>
 8001c52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c56:	e000      	b.n	8001c5a <ETH_SetDMAConfig+0x46>
 8001c58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c5a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	7b9b      	ldrb	r3, [r3, #14]
 8001c60:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c62:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c68:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	7f1b      	ldrb	r3, [r3, #28]
 8001c6e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c70:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	7f9b      	ldrb	r3, [r3, #30]
 8001c76:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c78:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c7e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c86:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fcee 	bl	800168c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb8:	461a      	mov	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	791b      	ldrb	r3, [r3, #4]
 8001cc2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cc8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001cce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cd4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cdc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001cde:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ce6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cf6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cfa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f7ff fcbf 	bl	800168c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	f8de3f23 	.word	0xf8de3f23

08001d28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0a6      	sub	sp, #152	; 0x98
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d64:	2300      	movs	r3, #0
 8001d66:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d94:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fe86 	bl	8001ab4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ddc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001dde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001de2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ff08 	bl	8001c14 <ETH_SetDMAConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3798      	adds	r7, #152	; 0x98
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3305      	adds	r3, #5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	3204      	adds	r2, #4
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <ETH_MACAddressConfig+0x68>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3303      	adds	r3, #3
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	061a      	lsls	r2, r3, #24
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3302      	adds	r3, #2
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	4313      	orrs	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	7812      	ldrb	r2, [r2, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <ETH_MACAddressConfig+0x6c>)
 8001e5e:	4413      	add	r3, r2
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	6013      	str	r3, [r2, #0]
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40028040 	.word	0x40028040
 8001e78:	40028044 	.word	0x40028044

08001e7c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e03e      	b.n	8001f08 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68d9      	ldr	r1, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4613      	mov	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4413      	add	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	440b      	add	r3, r1
 8001e9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	3206      	adds	r2, #6
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d80c      	bhi.n	8001eec <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	e004      	b.n	8001ef6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d9bd      	bls.n	8001e8a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	611a      	str	r2, [r3, #16]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e046      	b.n	8001fca <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6919      	ldr	r1, [r3, #16]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2200      	movs	r2, #0
 8001f58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f78:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f80:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	3212      	adds	r2, #18
 8001f96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d80c      	bhi.n	8001fba <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6919      	ldr	r1, [r3, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	440b      	add	r3, r1
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	e004      	b.n	8001fc4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d9b5      	bls.n	8001f3c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691a      	ldr	r2, [r3, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e175      	b.n	8002314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8164 	bne.w	800230e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x56>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80be 	beq.w	800230e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_GPIO_Init+0x324>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a65      	ldr	r2, [pc, #404]	; (800232c <HAL_GPIO_Init+0x324>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_GPIO_Init+0x324>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021aa:	4a61      	ldr	r2, [pc, #388]	; (8002330 <HAL_GPIO_Init+0x328>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x32c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d037      	beq.n	8002246 <HAL_GPIO_Init+0x23e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a57      	ldr	r2, [pc, #348]	; (8002338 <HAL_GPIO_Init+0x330>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d031      	beq.n	8002242 <HAL_GPIO_Init+0x23a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_GPIO_Init+0x334>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <HAL_GPIO_Init+0x236>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_GPIO_Init+0x338>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d025      	beq.n	800223a <HAL_GPIO_Init+0x232>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x33c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x22e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a53      	ldr	r2, [pc, #332]	; (8002348 <HAL_GPIO_Init+0x340>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x22a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x344>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x226>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x348>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x222>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x34c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x21e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x350>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x21a>
 800221e:	2309      	movs	r3, #9
 8002220:	e012      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002222:	230a      	movs	r3, #10
 8002224:	e010      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002226:	2308      	movs	r3, #8
 8002228:	e00e      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800222a:	2307      	movs	r3, #7
 800222c:	e00c      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800222e:	2306      	movs	r3, #6
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002232:	2305      	movs	r3, #5
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x328>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_GPIO_Init+0x354>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_GPIO_Init+0x354>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_GPIO_Init+0x354>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_GPIO_Init+0x354>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <HAL_GPIO_Init+0x354>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_GPIO_Init+0x354>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_GPIO_Init+0x354>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_GPIO_Init+0x354>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f ae86 	bls.w	8002028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40021400 	.word	0x40021400
 800234c:	40021800 	.word	0x40021800
 8002350:	40021c00 	.word	0x40021c00
 8002354:	40022000 	.word	0x40022000
 8002358:	40022400 	.word	0x40022400
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c4:	b08f      	sub	sp, #60	; 0x3c
 80023c6:	af0a      	add	r7, sp, #40	; 0x28
 80023c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e116      	b.n	8002602 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe ff98 	bl	8001324 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2203      	movs	r2, #3
 80023f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fd5e 	bl	8005ed4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	687e      	ldr	r6, [r7, #4]
 8002420:	466d      	mov	r5, sp
 8002422:	f106 0410 	add.w	r4, r6, #16
 8002426:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002428:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002432:	e885 0003 	stmia.w	r5, {r0, r1}
 8002436:	1d33      	adds	r3, r6, #4
 8002438:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243a:	6838      	ldr	r0, [r7, #0]
 800243c:	f003 fcf2 	bl	8005e24 <USB_CoreInit>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0d7      	b.n	8002602 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd4c 	bl	8005ef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e04a      	b.n	80024fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	333d      	adds	r3, #61	; 0x3d
 8002474:	2201      	movs	r2, #1
 8002476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	333c      	adds	r3, #60	; 0x3c
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800248c:	7bfa      	ldrb	r2, [r7, #15]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	b298      	uxth	r0, r3
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3344      	adds	r3, #68	; 0x44
 80024a0:	4602      	mov	r2, r0
 80024a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3340      	adds	r3, #64	; 0x40
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3348      	adds	r3, #72	; 0x48
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334c      	adds	r3, #76	; 0x4c
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3354      	adds	r3, #84	; 0x54
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	d3af      	bcc.n	8002464 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e044      	b.n	8002594 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	3301      	adds	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3b5      	bcc.n	800250a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	687e      	ldr	r6, [r7, #4]
 80025a6:	466d      	mov	r5, sp
 80025a8:	f106 0410 	add.w	r4, r6, #16
 80025ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80025bc:	1d33      	adds	r3, r6, #4
 80025be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c0:	6838      	ldr	r0, [r7, #0]
 80025c2:	f003 fce5 	bl	8005f90 <USB_DevInit>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e014      	b.n	8002602 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d102      	bne.n	80025f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f80b 	bl	800260c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fea3 	bl	8006346 <USB_DevDisconnect>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800260c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_PCDEx_ActivateLPM+0x44>)
 800263c:	4313      	orrs	r3, r2
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	10000003 	.word	0x10000003

08002654 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000

08002674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800267c:	2300      	movs	r3, #0
 800267e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e291      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8087 	beq.w	80027a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002698:	4b96      	ldr	r3, [pc, #600]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d00c      	beq.n	80026be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a4:	4b93      	ldr	r3, [pc, #588]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d112      	bne.n	80026d6 <HAL_RCC_OscConfig+0x62>
 80026b0:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d10b      	bne.n	80026d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026be:	4b8d      	ldr	r3, [pc, #564]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d06c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x130>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d168      	bne.n	80027a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e26b      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x7a>
 80026e0:	4b84      	ldr	r3, [pc, #528]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a83      	ldr	r2, [pc, #524]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	e02e      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0x9c>
 80026f6:	4b7f      	ldr	r3, [pc, #508]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7e      	ldr	r2, [pc, #504]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80026fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b7c      	ldr	r3, [pc, #496]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7b      	ldr	r2, [pc, #492]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e01d      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0xc0>
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a72      	ldr	r2, [pc, #456]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800272c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0xd8>
 8002734:	4b6f      	ldr	r3, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a6e      	ldr	r2, [pc, #440]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a6b      	ldr	r2, [pc, #428]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800274a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d013      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe ff8e 	bl	8001674 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800275c:	f7fe ff8a 	bl	8001674 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e21f      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b61      	ldr	r3, [pc, #388]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e014      	b.n	80027a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe ff7a 	bl	8001674 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe ff76 	bl	8001674 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e20b      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002796:	4b57      	ldr	r3, [pc, #348]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x110>
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d069      	beq.n	8002886 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027b2:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 030c 	and.w	r3, r3, #12
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d11c      	bne.n	8002804 <HAL_RCC_OscConfig+0x190>
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d116      	bne.n	8002804 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_RCC_OscConfig+0x17a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d001      	beq.n	80027ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e1df      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	493d      	ldr	r1, [pc, #244]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002802:	e040      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d023      	beq.n	8002854 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7fe ff2c 	bl	8001674 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002820:	f7fe ff28 	bl	8001674 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e1bd      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4929      	ldr	r1, [pc, #164]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
 8002852:	e018      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a26      	ldr	r2, [pc, #152]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe ff08 	bl	8001674 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002868:	f7fe ff04 	bl	8001674 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e199      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	4b1e      	ldr	r3, [pc, #120]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d038      	beq.n	8002904 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d019      	beq.n	80028ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 800289c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a6:	f7fe fee5 	bl	8001674 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ae:	f7fe fee1 	bl	8001674 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e176      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x23a>
 80028cc:	e01a      	b.n	8002904 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80028d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d2:	4a08      	ldr	r2, [pc, #32]	; (80028f4 <HAL_RCC_OscConfig+0x280>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fecb 	bl	8001674 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e00a      	b.n	80028f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fec7 	bl	8001674 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d903      	bls.n	80028f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e15c      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
 80028f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1ee      	bne.n	80028e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a4 	beq.w	8002a5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002912:	4b8b      	ldr	r3, [pc, #556]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10d      	bne.n	800293a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	4a87      	ldr	r2, [pc, #540]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	6413      	str	r3, [r2, #64]	; 0x40
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	2301      	movs	r3, #1
 8002938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293a:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002946:	4b7f      	ldr	r3, [pc, #508]	; (8002b44 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7e      	ldr	r2, [pc, #504]	; (8002b44 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe fe8f 	bl	8001674 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe fe8b 	bl	8001674 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	; 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e120      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296c:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d106      	bne.n	800298e <HAL_RCC_OscConfig+0x31a>
 8002980:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	e02d      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x33c>
 8002996:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299a:	4a69      	ldr	r2, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
 80029a2:	4b67      	ldr	r3, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	4a66      	ldr	r2, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	; 0x70
 80029ae:	e01c      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b05      	cmp	r3, #5
 80029b6:	d10c      	bne.n	80029d2 <HAL_RCC_OscConfig+0x35e>
 80029b8:	4b61      	ldr	r3, [pc, #388]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029be:	f043 0304 	orr.w	r3, r3, #4
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	4b5e      	ldr	r3, [pc, #376]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c8:	4a5d      	ldr	r2, [pc, #372]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70
 80029d0:	e00b      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d6:	4a5a      	ldr	r2, [pc, #360]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	; 0x70
 80029de:	4b58      	ldr	r3, [pc, #352]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	f023 0304 	bic.w	r3, r3, #4
 80029e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d015      	beq.n	8002a1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fe3f 	bl	8001674 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fe3b 	bl	8001674 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e0ce      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a10:	4b4b      	ldr	r3, [pc, #300]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ee      	beq.n	80029fa <HAL_RCC_OscConfig+0x386>
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fe29 	bl	8001674 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fe25 	bl	8001674 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0b8      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3c:	4b40      	ldr	r3, [pc, #256]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ee      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b3c      	ldr	r3, [pc, #240]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a3b      	ldr	r2, [pc, #236]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 80a4 	beq.w	8002bac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a64:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d06b      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d149      	bne.n	8002b0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a30      	ldr	r2, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fdf6 	bl	8001674 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fdf2 	bl	8001674 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e087      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ad6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fdc6 	bl	8001674 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fdc2 	bl	8001674 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e057      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x478>
 8002b0a:	e04f      	b.n	8002bac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fdac 	bl	8001674 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fda8 	bl	8001674 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e03d      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	4b03      	ldr	r3, [pc, #12]	; (8002b40 <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4ac>
 8002b3e:	e035      	b.n	8002bac <HAL_RCC_OscConfig+0x538>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x544>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d121      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11a      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	3b01      	subs	r3, #1
 8002b92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d0      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	4965      	ldr	r1, [pc, #404]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b8      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	494d      	ldr	r1, [pc, #308]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d040      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e073      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4936      	ldr	r1, [pc, #216]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fce0 	bl	8001674 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fe fcdc 	bl	8001674 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e053      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d210      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	4922      	ldr	r1, [pc, #136]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4916      	ldr	r1, [pc, #88]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f821 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d52:	4602      	mov	r2, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	490a      	ldr	r1, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x1cc>)
 8002d60:	5ccb      	ldrb	r3, [r1, r3]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1d0>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1d4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fe fb52 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023c00 	.word	0x40023c00
 8002d84:	40023800 	.word	0x40023800
 8002d88:	0800856c 	.word	0x0800856c
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d98:	b094      	sub	sp, #80	; 0x50
 8002d9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002da0:	2300      	movs	r3, #0
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da4:	2300      	movs	r3, #0
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dac:	4b79      	ldr	r3, [pc, #484]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d00d      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	f200 80e1 	bhi.w	8002f80 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d003      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc6:	e0db      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc8:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dcc:	e0db      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dce:	4b73      	ldr	r3, [pc, #460]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x208>)
 8002dd0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dd2:	e0d8      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd4:	4b6f      	ldr	r3, [pc, #444]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ddc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dde:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dea:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	2200      	movs	r2, #0
 8002df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
 8002e02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e06:	4622      	mov	r2, r4
 8002e08:	462b      	mov	r3, r5
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	0159      	lsls	r1, r3, #5
 8002e14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e18:	0150      	lsls	r0, r2, #5
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4621      	mov	r1, r4
 8002e20:	1a51      	subs	r1, r2, r1
 8002e22:	6139      	str	r1, [r7, #16]
 8002e24:	4629      	mov	r1, r5
 8002e26:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e38:	4659      	mov	r1, fp
 8002e3a:	018b      	lsls	r3, r1, #6
 8002e3c:	4651      	mov	r1, sl
 8002e3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e42:	4651      	mov	r1, sl
 8002e44:	018a      	lsls	r2, r1, #6
 8002e46:	4651      	mov	r1, sl
 8002e48:	ebb2 0801 	subs.w	r8, r2, r1
 8002e4c:	4659      	mov	r1, fp
 8002e4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e66:	4690      	mov	r8, r2
 8002e68:	4699      	mov	r9, r3
 8002e6a:	4623      	mov	r3, r4
 8002e6c:	eb18 0303 	adds.w	r3, r8, r3
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	462b      	mov	r3, r5
 8002e74:	eb49 0303 	adc.w	r3, r9, r3
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e86:	4629      	mov	r1, r5
 8002e88:	024b      	lsls	r3, r1, #9
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e90:	4621      	mov	r1, r4
 8002e92:	024a      	lsls	r2, r1, #9
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ea0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea4:	f7fd f9b4 	bl	8000210 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4613      	mov	r3, r2
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb0:	e058      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb2:	4b38      	ldr	r3, [pc, #224]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ecc:	4642      	mov	r2, r8
 8002ece:	464b      	mov	r3, r9
 8002ed0:	f04f 0000 	mov.w	r0, #0
 8002ed4:	f04f 0100 	mov.w	r1, #0
 8002ed8:	0159      	lsls	r1, r3, #5
 8002eda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ede:	0150      	lsls	r0, r2, #5
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4641      	mov	r1, r8
 8002ee6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002eea:	4649      	mov	r1, r9
 8002eec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002efc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f04:	ebb2 040a 	subs.w	r4, r2, sl
 8002f08:	eb63 050b 	sbc.w	r5, r3, fp
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	00eb      	lsls	r3, r5, #3
 8002f16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f1a:	00e2      	lsls	r2, r4, #3
 8002f1c:	4614      	mov	r4, r2
 8002f1e:	461d      	mov	r5, r3
 8002f20:	4643      	mov	r3, r8
 8002f22:	18e3      	adds	r3, r4, r3
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	464b      	mov	r3, r9
 8002f28:	eb45 0303 	adc.w	r3, r5, r3
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	028b      	lsls	r3, r1, #10
 8002f3e:	4621      	mov	r1, r4
 8002f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f44:	4621      	mov	r1, r4
 8002f46:	028a      	lsls	r2, r1, #10
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	61fa      	str	r2, [r7, #28]
 8002f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f58:	f7fd f95a 	bl	8000210 <__aeabi_uldivmod>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4613      	mov	r3, r2
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f7e:	e002      	b.n	8002f86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3750      	adds	r7, #80	; 0x50
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	00f42400 	.word	0x00f42400
 8002f9c:	007a1200 	.word	0x007a1200

08002fa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000008 	.word	0x20000008

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fbc:	f7ff fff0 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	0a9b      	lsrs	r3, r3, #10
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4903      	ldr	r1, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	0800857c 	.word	0x0800857c

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe4:	f7ff ffdc 	bl	8002fa0 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0b5b      	lsrs	r3, r3, #13
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4903      	ldr	r1, [pc, #12]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40023800 	.word	0x40023800
 8003004:	0800857c 	.word	0x0800857c

08003008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	220f      	movs	r2, #15
 8003016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003018:	4b12      	ldr	r3, [pc, #72]	; (8003064 <HAL_RCC_GetClockConfig+0x5c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RCC_GetClockConfig+0x5c>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_RCC_GetClockConfig+0x5c>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_GetClockConfig+0x5c>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_RCC_GetClockConfig+0x60>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	40023c00 	.word	0x40023c00

0800306c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d012      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003094:	4b69      	ldr	r3, [pc, #420]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a68      	ldr	r2, [pc, #416]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800309e:	6093      	str	r3, [r2, #8]
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a8:	4964      	ldr	r1, [pc, #400]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d017      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c6:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	4959      	ldr	r1, [pc, #356]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030e4:	d101      	bne.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d017      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003102:	4b4e      	ldr	r3, [pc, #312]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003108:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	494a      	ldr	r1, [pc, #296]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003120:	d101      	bne.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003122:	2301      	movs	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800312e:	2301      	movs	r3, #1
 8003130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800313e:	2301      	movs	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 808b 	beq.w	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a39      	ldr	r2, [pc, #228]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
 800315c:	4b37      	ldr	r3, [pc, #220]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a34      	ldr	r2, [pc, #208]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe fa7e 	bl	8001674 <HAL_GetTick>
 8003178:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe fa7a 	bl	8001674 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	; 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e357      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800318e:	4b2c      	ldr	r3, [pc, #176]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800319a:	4b28      	ldr	r3, [pc, #160]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d035      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d02e      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031b8:	4b20      	ldr	r3, [pc, #128]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031c2:	4b1e      	ldr	r3, [pc, #120]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a1d      	ldr	r2, [pc, #116]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031ce:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d114      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fa42 	bl	8001674 <HAL_GetTick>
 80031f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe fa3e 	bl	8001674 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e319      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0ee      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003222:	d111      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003232:	400b      	ands	r3, r1
 8003234:	4901      	ldr	r1, [pc, #4]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
 800323a:	e00b      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800323c:	40023800 	.word	0x40023800
 8003240:	40007000 	.word	0x40007000
 8003244:	0ffffcff 	.word	0x0ffffcff
 8003248:	4baa      	ldr	r3, [pc, #680]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4aa9      	ldr	r2, [pc, #676]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003252:	6093      	str	r3, [r2, #8]
 8003254:	4ba7      	ldr	r3, [pc, #668]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	49a4      	ldr	r1, [pc, #656]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003262:	4313      	orrs	r3, r2
 8003264:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003272:	4ba0      	ldr	r3, [pc, #640]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003278:	4a9e      	ldr	r2, [pc, #632]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800327e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003282:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003284:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	4999      	ldr	r1, [pc, #612]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032a0:	4b94      	ldr	r3, [pc, #592]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ae:	4991      	ldr	r1, [pc, #580]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032c2:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d0:	4988      	ldr	r1, [pc, #544]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	4980      	ldr	r1, [pc, #512]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003306:	4b7b      	ldr	r3, [pc, #492]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4977      	ldr	r1, [pc, #476]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003328:	4b72      	ldr	r3, [pc, #456]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	496f      	ldr	r1, [pc, #444]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800334a:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003350:	f023 020c 	bic.w	r2, r3, #12
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	4966      	ldr	r1, [pc, #408]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336c:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337a:	495e      	ldr	r1, [pc, #376]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800338e:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339c:	4955      	ldr	r1, [pc, #340]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033b0:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	494d      	ldr	r1, [pc, #308]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033d2:	4b48      	ldr	r3, [pc, #288]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	4944      	ldr	r1, [pc, #272]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80033f4:	4b3f      	ldr	r3, [pc, #252]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003402:	493c      	ldr	r1, [pc, #240]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003424:	4933      	ldr	r1, [pc, #204]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003438:	4b2e      	ldr	r3, [pc, #184]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003446:	492b      	ldr	r1, [pc, #172]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d011      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003468:	4922      	ldr	r1, [pc, #136]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	4912      	ldr	r1, [pc, #72]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034cc:	4909      	ldr	r1, [pc, #36]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d006      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80d9 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a01      	ldr	r2, [pc, #4]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f2:	e001      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80034f4:	40023800 	.word	0x40023800
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fe f8bb 	bl	8001674 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003502:	f7fe f8b7 	bl	8001674 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e194      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003514:	4b6c      	ldr	r3, [pc, #432]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d021      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11d      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003542:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003548:	0e1b      	lsrs	r3, r3, #24
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	019a      	lsls	r2, r3, #6
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	071b      	lsls	r3, r3, #28
 8003568:	4957      	ldr	r1, [pc, #348]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003584:	d00a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800358e:	2b00      	cmp	r3, #0
 8003590:	d02e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800359a:	d129      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800359c:	4b4a      	ldr	r3, [pc, #296]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a2:	0c1b      	lsrs	r3, r3, #16
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b0:	0f1b      	lsrs	r3, r3, #28
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	019a      	lsls	r2, r3, #6
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	041b      	lsls	r3, r3, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	431a      	orrs	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	071b      	lsls	r3, r3, #28
 80035d0:	493d      	ldr	r1, [pc, #244]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035d8:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035de:	f023 021f 	bic.w	r2, r3, #31
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	3b01      	subs	r3, #1
 80035e8:	4937      	ldr	r1, [pc, #220]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01d      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003602:	0e1b      	lsrs	r3, r3, #24
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003610:	0f1b      	lsrs	r3, r3, #28
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	019a      	lsls	r2, r3, #6
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	061b      	lsls	r3, r3, #24
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	071b      	lsls	r3, r3, #28
 8003630:	4925      	ldr	r1, [pc, #148]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d011      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	019a      	lsls	r2, r3, #6
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	071b      	lsls	r3, r3, #28
 8003660:	4919      	ldr	r1, [pc, #100]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003668:	4b17      	ldr	r3, [pc, #92]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd fffe 	bl	8001674 <HAL_GetTick>
 8003678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800367c:	f7fd fffa 	bl	8001674 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0d7      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b01      	cmp	r3, #1
 800369e:	f040 80cd 	bne.w	800383c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ae:	f7fd ffe1 	bl	8001674 <HAL_GetTick>
 80036b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036b4:	e00a      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036b6:	f7fd ffdd 	bl	8001674 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d903      	bls.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e0ba      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036cc:	4b5e      	ldr	r3, [pc, #376]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d8:	d0ed      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d009      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d02e      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d12a      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003716:	0f1b      	lsrs	r3, r3, #28
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	019a      	lsls	r2, r3, #6
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	071b      	lsls	r3, r3, #28
 8003736:	4944      	ldr	r1, [pc, #272]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800373e:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	493d      	ldr	r1, [pc, #244]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800376c:	d11d      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	0e1b      	lsrs	r3, r3, #24
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	0f1b      	lsrs	r3, r3, #28
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	019a      	lsls	r2, r3, #6
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	061b      	lsls	r3, r3, #24
 800379c:	431a      	orrs	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	4929      	ldr	r1, [pc, #164]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	0e1b      	lsrs	r3, r3, #24
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037c4:	4b20      	ldr	r3, [pc, #128]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	019a      	lsls	r2, r3, #6
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	041b      	lsls	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	071b      	lsls	r3, r3, #28
 80037ea:	4917      	ldr	r1, [pc, #92]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003800:	4911      	ldr	r1, [pc, #68]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800380e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003814:	f7fd ff2e 	bl	8001674 <HAL_GetTick>
 8003818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800381a:	e008      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800381c:	f7fd ff2a 	bl	8001674 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e007      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800382e:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800383a:	d1ef      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3720      	adds	r7, #32
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e049      	b.n	80038f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd fc5e 	bl	8001134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fd30 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
	...

080038fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d001      	beq.n	8003914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e054      	b.n	80039be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a26      	ldr	r2, [pc, #152]	; (80039cc <HAL_TIM_Base_Start_IT+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d022      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393e:	d01d      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d018      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a21      	ldr	r2, [pc, #132]	; (80039d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1e      	ldr	r2, [pc, #120]	; (80039dc <HAL_TIM_Base_Start_IT+0xe0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1c      	ldr	r2, [pc, #112]	; (80039e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x80>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d115      	bne.n	80039a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_TIM_Base_Start_IT+0xec>)
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b06      	cmp	r3, #6
 800398c:	d015      	beq.n	80039ba <HAL_TIM_Base_Start_IT+0xbe>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d011      	beq.n	80039ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e008      	b.n	80039ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e000      	b.n	80039bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40010400 	.word	0x40010400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40001800 	.word	0x40001800
 80039e8:	00010007 	.word	0x00010007

080039ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e049      	b.n	8003a92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f841 	bl	8003a9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f000 fc60 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d109      	bne.n	8003ad4 <HAL_TIM_PWM_Start+0x24>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e03c      	b.n	8003b4e <HAL_TIM_PWM_Start+0x9e>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d109      	bne.n	8003aee <HAL_TIM_PWM_Start+0x3e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e02f      	b.n	8003b4e <HAL_TIM_PWM_Start+0x9e>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d109      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x58>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e022      	b.n	8003b4e <HAL_TIM_PWM_Start+0x9e>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2b0c      	cmp	r3, #12
 8003b0c:	d109      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x72>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	bf14      	ite	ne
 8003b1a:	2301      	movne	r3, #1
 8003b1c:	2300      	moveq	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e015      	b.n	8003b4e <HAL_TIM_PWM_Start+0x9e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d109      	bne.n	8003b3c <HAL_TIM_PWM_Start+0x8c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	e008      	b.n	8003b4e <HAL_TIM_PWM_Start+0x9e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e092      	b.n	8003c7c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xb6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b64:	e023      	b.n	8003bae <HAL_TIM_PWM_Start+0xfe>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0xc6>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b74:	e01b      	b.n	8003bae <HAL_TIM_PWM_Start+0xfe>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d104      	bne.n	8003b86 <HAL_TIM_PWM_Start+0xd6>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b84:	e013      	b.n	8003bae <HAL_TIM_PWM_Start+0xfe>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d104      	bne.n	8003b96 <HAL_TIM_PWM_Start+0xe6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b94:	e00b      	b.n	8003bae <HAL_TIM_PWM_Start+0xfe>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0xf6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba4:	e003      	b.n	8003bae <HAL_TIM_PWM_Start+0xfe>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 ff32 	bl	8004a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a30      	ldr	r2, [pc, #192]	; (8003c84 <HAL_TIM_PWM_Start+0x1d4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIM_PWM_Start+0x120>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a2f      	ldr	r2, [pc, #188]	; (8003c88 <HAL_TIM_PWM_Start+0x1d8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_PWM_Start+0x124>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_TIM_PWM_Start+0x126>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <HAL_TIM_PWM_Start+0x1d4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfc:	d01d      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_TIM_PWM_Start+0x1dc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_TIM_PWM_Start+0x1e0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_TIM_PWM_Start+0x1e4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a19      	ldr	r2, [pc, #100]	; (8003c88 <HAL_TIM_PWM_Start+0x1d8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1b      	ldr	r2, [pc, #108]	; (8003c98 <HAL_TIM_PWM_Start+0x1e8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_TIM_PWM_Start+0x18a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_TIM_PWM_Start+0x1ec>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d115      	bne.n	8003c66 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <HAL_TIM_PWM_Start+0x1f0>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d015      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x1c8>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c52:	d011      	beq.n	8003c78 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	e008      	b.n	8003c78 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0201 	orr.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e000      	b.n	8003c7a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40010400 	.word	0x40010400
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800
 8003ca0:	00010007 	.word	0x00010007

08003ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0202 	mvn.w	r2, #2
 8003cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fae4 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fad6 	bl	80042a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fae7 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0204 	mvn.w	r2, #4
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 faba 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 faac 	bl	80042a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fabd 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d122      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d11b      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0208 	mvn.w	r2, #8
 8003d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fa90 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003d94:	e005      	b.n	8003da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fa82 	bl	80042a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 fa93 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d122      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d11b      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0210 	mvn.w	r2, #16
 8003dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa66 	bl	80042b4 <HAL_TIM_IC_CaptureCallback>
 8003de8:	e005      	b.n	8003df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa58 	bl	80042a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa69 	bl	80042c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0201 	mvn.w	r2, #1
 8003e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd f892 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d107      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 fea4 	bl	8004b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e62:	d10e      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b80      	cmp	r3, #128	; 0x80
 8003e70:	d107      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fe97 	bl	8004bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d10e      	bne.n	8003eae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d107      	bne.n	8003eae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa17 	bl	80042dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d10e      	bne.n	8003eda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0320 	and.w	r3, r3, #32
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d107      	bne.n	8003eda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f06f 0220 	mvn.w	r2, #32
 8003ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fe57 	bl	8004b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0ff      	b.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b14      	cmp	r3, #20
 8003f0e:	f200 80f0 	bhi.w	80040f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003f12:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	080040f3 	.word	0x080040f3
 8003f20:	080040f3 	.word	0x080040f3
 8003f24:	080040f3 	.word	0x080040f3
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	080040f3 	.word	0x080040f3
 8003f30:	080040f3 	.word	0x080040f3
 8003f34:	080040f3 	.word	0x080040f3
 8003f38:	08003fef 	.word	0x08003fef
 8003f3c:	080040f3 	.word	0x080040f3
 8003f40:	080040f3 	.word	0x080040f3
 8003f44:	080040f3 	.word	0x080040f3
 8003f48:	0800402f 	.word	0x0800402f
 8003f4c:	080040f3 	.word	0x080040f3
 8003f50:	080040f3 	.word	0x080040f3
 8003f54:	080040f3 	.word	0x080040f3
 8003f58:	08004071 	.word	0x08004071
 8003f5c:	080040f3 	.word	0x080040f3
 8003f60:	080040f3 	.word	0x080040f3
 8003f64:	080040f3 	.word	0x080040f3
 8003f68:	080040b1 	.word	0x080040b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fa5c 	bl	8004430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0208 	orr.w	r2, r2, #8
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	619a      	str	r2, [r3, #24]
      break;
 8003faa:	e0a5      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 faae 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6999      	ldr	r1, [r3, #24]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	021a      	lsls	r2, r3, #8
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      break;
 8003fec:	e084      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fb05 	bl	8004604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f042 0208 	orr.w	r2, r2, #8
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0204 	bic.w	r2, r2, #4
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
      break;
 800402c:	e064      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fb5b 	bl	80046f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	69d9      	ldr	r1, [r3, #28]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	021a      	lsls	r2, r3, #8
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	61da      	str	r2, [r3, #28]
      break;
 800406e:	e043      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fb92 	bl	80047a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0208 	orr.w	r2, r2, #8
 800408a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0204 	bic.w	r2, r2, #4
 800409a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ae:	e023      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fbc4 	bl	8004844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	021a      	lsls	r2, r3, #8
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004100:	7dfb      	ldrb	r3, [r7, #23]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop

0800410c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_TIM_ConfigClockSource+0x1c>
 8004124:	2302      	movs	r3, #2
 8004126:	e0b4      	b.n	8004292 <HAL_TIM_ConfigClockSource+0x186>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	4b56      	ldr	r3, [pc, #344]	; (800429c <HAL_TIM_ConfigClockSource+0x190>)
 8004144:	4013      	ands	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800414e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004160:	d03e      	beq.n	80041e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	f200 8087 	bhi.w	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	f000 8086 	beq.w	800427e <HAL_TIM_ConfigClockSource+0x172>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d87f      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 8004178:	2b70      	cmp	r3, #112	; 0x70
 800417a:	d01a      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0xa6>
 800417c:	2b70      	cmp	r3, #112	; 0x70
 800417e:	d87b      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 8004180:	2b60      	cmp	r3, #96	; 0x60
 8004182:	d050      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x11a>
 8004184:	2b60      	cmp	r3, #96	; 0x60
 8004186:	d877      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 8004188:	2b50      	cmp	r3, #80	; 0x50
 800418a:	d03c      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0xfa>
 800418c:	2b50      	cmp	r3, #80	; 0x50
 800418e:	d873      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 8004190:	2b40      	cmp	r3, #64	; 0x40
 8004192:	d058      	beq.n	8004246 <HAL_TIM_ConfigClockSource+0x13a>
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d86f      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 8004198:	2b30      	cmp	r3, #48	; 0x30
 800419a:	d064      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x15a>
 800419c:	2b30      	cmp	r3, #48	; 0x30
 800419e:	d86b      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d060      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x15a>
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d867      	bhi.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d05c      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x15a>
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d05a      	beq.n	8004266 <HAL_TIM_ConfigClockSource+0x15a>
 80041b0:	e062      	b.n	8004278 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041c2:	f000 fc0d 	bl	80049e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	609a      	str	r2, [r3, #8]
      break;
 80041de:	e04f      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	f000 fbf6 	bl	80049e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004202:	609a      	str	r2, [r3, #8]
      break;
 8004204:	e03c      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	461a      	mov	r2, r3
 8004214:	f000 fb6a 	bl	80048ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2150      	movs	r1, #80	; 0x50
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fbc3 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004224:	e02c      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004232:	461a      	mov	r2, r3
 8004234:	f000 fb89 	bl	800494a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2160      	movs	r1, #96	; 0x60
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fbb3 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004244:	e01c      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004252:	461a      	mov	r2, r3
 8004254:	f000 fb4a 	bl	80048ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2140      	movs	r1, #64	; 0x40
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fba3 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004264:	e00c      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f000 fb9a 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 8004276:	e003      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
      break;
 800427c:	e000      	b.n	8004280 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800427e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	fffeff88 	.word	0xfffeff88

080042a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a40      	ldr	r2, [pc, #256]	; (8004404 <TIM_Base_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d00f      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3d      	ldr	r2, [pc, #244]	; (8004408 <TIM_Base_SetConfig+0x118>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00b      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <TIM_Base_SetConfig+0x11c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <TIM_Base_SetConfig+0x120>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a3a      	ldr	r2, [pc, #232]	; (8004414 <TIM_Base_SetConfig+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2f      	ldr	r2, [pc, #188]	; (8004404 <TIM_Base_SetConfig+0x114>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d02b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d027      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2c      	ldr	r2, [pc, #176]	; (8004408 <TIM_Base_SetConfig+0x118>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d023      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2b      	ldr	r2, [pc, #172]	; (800440c <TIM_Base_SetConfig+0x11c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2a      	ldr	r2, [pc, #168]	; (8004410 <TIM_Base_SetConfig+0x120>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a29      	ldr	r2, [pc, #164]	; (8004414 <TIM_Base_SetConfig+0x124>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a28      	ldr	r2, [pc, #160]	; (8004418 <TIM_Base_SetConfig+0x128>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a27      	ldr	r2, [pc, #156]	; (800441c <TIM_Base_SetConfig+0x12c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a26      	ldr	r2, [pc, #152]	; (8004420 <TIM_Base_SetConfig+0x130>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a25      	ldr	r2, [pc, #148]	; (8004424 <TIM_Base_SetConfig+0x134>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a24      	ldr	r2, [pc, #144]	; (8004428 <TIM_Base_SetConfig+0x138>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a23      	ldr	r2, [pc, #140]	; (800442c <TIM_Base_SetConfig+0x13c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a0a      	ldr	r2, [pc, #40]	; (8004404 <TIM_Base_SetConfig+0x114>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0xf8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <TIM_Base_SetConfig+0x124>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	615a      	str	r2, [r3, #20]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800
 8004424:	40001800 	.word	0x40001800
 8004428:	40001c00 	.word	0x40001c00
 800442c:	40002000 	.word	0x40002000

08004430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f023 0201 	bic.w	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4b2b      	ldr	r3, [pc, #172]	; (8004508 <TIM_OC1_SetConfig+0xd8>)
 800445c:	4013      	ands	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f023 0302 	bic.w	r3, r3, #2
 8004478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <TIM_OC1_SetConfig+0xdc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_OC1_SetConfig+0x64>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a20      	ldr	r2, [pc, #128]	; (8004510 <TIM_OC1_SetConfig+0xe0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d10c      	bne.n	80044ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 0308 	bic.w	r3, r3, #8
 800449a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a16      	ldr	r2, [pc, #88]	; (800450c <TIM_OC1_SetConfig+0xdc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d003      	beq.n	80044be <TIM_OC1_SetConfig+0x8e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a15      	ldr	r2, [pc, #84]	; (8004510 <TIM_OC1_SetConfig+0xe0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	621a      	str	r2, [r3, #32]
}
 80044fc:	bf00      	nop
 80044fe:	371c      	adds	r7, #28
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	fffeff8f 	.word	0xfffeff8f
 800450c:	40010000 	.word	0x40010000
 8004510:	40010400 	.word	0x40010400

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <TIM_OC2_SetConfig+0xe4>)
 8004540:	4013      	ands	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a23      	ldr	r2, [pc, #140]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_OC2_SetConfig+0x68>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a22      	ldr	r2, [pc, #136]	; (8004600 <TIM_OC2_SetConfig+0xec>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d10d      	bne.n	8004598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a18      	ldr	r2, [pc, #96]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC2_SetConfig+0x94>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a17      	ldr	r2, [pc, #92]	; (8004600 <TIM_OC2_SetConfig+0xec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d113      	bne.n	80045d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	feff8fff 	.word	0xfeff8fff
 80045fc:	40010000 	.word	0x40010000
 8004600:	40010400 	.word	0x40010400

08004604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <TIM_OC3_SetConfig+0xe0>)
 8004630:	4013      	ands	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <TIM_OC3_SetConfig+0xe4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_OC3_SetConfig+0x66>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a21      	ldr	r2, [pc, #132]	; (80046ec <TIM_OC3_SetConfig+0xe8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10d      	bne.n	8004686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <TIM_OC3_SetConfig+0xe4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d003      	beq.n	8004696 <TIM_OC3_SetConfig+0x92>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <TIM_OC3_SetConfig+0xe8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d113      	bne.n	80046be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	fffeff8f 	.word	0xfffeff8f
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40010400 	.word	0x40010400

080046f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4b1e      	ldr	r3, [pc, #120]	; (8004794 <TIM_OC4_SetConfig+0xa4>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800473a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	031b      	lsls	r3, r3, #12
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <TIM_OC4_SetConfig+0xa8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d003      	beq.n	8004758 <TIM_OC4_SetConfig+0x68>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a12      	ldr	r2, [pc, #72]	; (800479c <TIM_OC4_SetConfig+0xac>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d109      	bne.n	800476c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800475e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	019b      	lsls	r3, r3, #6
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	feff8fff 	.word	0xfeff8fff
 8004798:	40010000 	.word	0x40010000
 800479c:	40010400 	.word	0x40010400

080047a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <TIM_OC5_SetConfig+0x98>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a12      	ldr	r2, [pc, #72]	; (800483c <TIM_OC5_SetConfig+0x9c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d003      	beq.n	80047fe <TIM_OC5_SetConfig+0x5e>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a11      	ldr	r2, [pc, #68]	; (8004840 <TIM_OC5_SetConfig+0xa0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d109      	bne.n	8004812 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	fffeff8f 	.word	0xfffeff8f
 800483c:	40010000 	.word	0x40010000
 8004840:	40010400 	.word	0x40010400

08004844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4b1c      	ldr	r3, [pc, #112]	; (80048e0 <TIM_OC6_SetConfig+0x9c>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	021b      	lsls	r3, r3, #8
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	051b      	lsls	r3, r3, #20
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <TIM_OC6_SetConfig+0xa0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC6_SetConfig+0x60>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <TIM_OC6_SetConfig+0xa4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d109      	bne.n	80048b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	feff8fff 	.word	0xfeff8fff
 80048e4:	40010000 	.word	0x40010000
 80048e8:	40010400 	.word	0x40010400

080048ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0201 	bic.w	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 030a 	bic.w	r3, r3, #10
 8004928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0210 	bic.w	r2, r3, #16
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	031b      	lsls	r3, r3, #12
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f043 0307 	orr.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	2201      	movs	r2, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a1a      	ldr	r2, [r3, #32]
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f003 031f 	and.w	r3, r3, #31
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	fa01 f303 	lsl.w	r3, r1, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e06d      	b.n	8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a30      	ldr	r2, [pc, #192]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2f      	ldr	r2, [pc, #188]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a20      	ldr	r2, [pc, #128]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d022      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d01d      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d018      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d013      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1a      	ldr	r2, [pc, #104]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00e      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a15      	ldr	r2, [pc, #84]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d009      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a16      	ldr	r2, [pc, #88]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d004      	beq.n	8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d10c      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40010400 	.word	0x40010400
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800
 8004b7c:	40000c00 	.word	0x40000c00
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40001800 	.word	0x40001800

08004b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bb8:	bf00      	nop
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e040      	b.n	8004c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fb34 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fc66 	bl	80054d4 <UART_SetConfig>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e022      	b.n	8004c58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 febe 	bl	800599c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 ff45 	bl	8005ae0 <UART_CheckIdleState>
 8004c56:	4603      	mov	r3, r0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d171      	bne.n	8004d5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_UART_Transmit+0x24>
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e06a      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2221      	movs	r2, #33	; 0x21
 8004c94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c96:	f7fc fced 	bl	8001674 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	88fa      	ldrh	r2, [r7, #6]
 8004ca0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Transmit+0x68>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cd0:	e02c      	b.n	8004d2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2180      	movs	r1, #128	; 0x80
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 ff36 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e038      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	3302      	adds	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
 8004d08:	e007      	b.n	8004d1a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	3301      	adds	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1cc      	bne.n	8004cd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 ff03 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e005      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2220      	movs	r2, #32
 8004d56:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	e000      	b.n	8004d5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
  }
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b08a      	sub	sp, #40	; 0x28
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	f040 80b1 	bne.w	8004ee4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Receive+0x28>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e0a9      	b.n	8004ee6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2222      	movs	r2, #34	; 0x22
 8004d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da8:	f7fc fc64 	bl	8001674 <HAL_GetTick>
 8004dac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	88fa      	ldrh	r2, [r7, #6]
 8004db2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	88fa      	ldrh	r2, [r7, #6]
 8004dba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	d10e      	bne.n	8004de6 <HAL_UART_Receive+0x80>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_UART_Receive+0x76>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004dd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dda:	e02d      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	22ff      	movs	r2, #255	; 0xff
 8004de0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004de4:	e028      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10d      	bne.n	8004e0a <HAL_UART_Receive+0xa4>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_Receive+0x9a>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	22ff      	movs	r2, #255	; 0xff
 8004dfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004dfe:	e01b      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	227f      	movs	r2, #127	; 0x7f
 8004e04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e08:	e016      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e12:	d10d      	bne.n	8004e30 <HAL_UART_Receive+0xca>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d104      	bne.n	8004e26 <HAL_UART_Receive+0xc0>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	227f      	movs	r2, #127	; 0x7f
 8004e20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e24:	e008      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	223f      	movs	r2, #63	; 0x3f
 8004e2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e2e:	e003      	b.n	8004e38 <HAL_UART_Receive+0xd2>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e3e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e48:	d108      	bne.n	8004e5c <HAL_UART_Receive+0xf6>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e003      	b.n	8004e64 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004e64:	e032      	b.n	8004ecc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2120      	movs	r1, #32
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fe6c 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e032      	b.n	8004ee6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	8a7b      	ldrh	r3, [r7, #18]
 8004e90:	4013      	ands	r3, r2
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	e00c      	b.n	8004eba <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4013      	ands	r3, r2
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1c6      	bne.n	8004e66 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b0ba      	sub	sp, #232	; 0xe8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f1e:	4013      	ands	r3, r2
 8004f20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d115      	bne.n	8004f58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 8297 	beq.w	800547c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	4798      	blx	r3
      }
      return;
 8004f56:	e291      	b.n	800547c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 8117 	beq.w	8005190 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004f62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f72:	4b85      	ldr	r3, [pc, #532]	; (8005188 <HAL_UART_IRQHandler+0x298>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 810a 	beq.w	8005190 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_UART_IRQHandler+0xbc>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa2:	f043 0201 	orr.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d011      	beq.n	8004fdc <HAL_UART_IRQHandler+0xec>
 8004fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe0:	f003 0304 	and.w	r3, r3, #4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d011      	beq.n	800500c <HAL_UART_IRQHandler+0x11c>
 8004fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005002:	f043 0202 	orr.w	r2, r3, #2
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800500c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d017      	beq.n	8005048 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005028:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2208      	movs	r2, #8
 8005036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800503e:	f043 0208 	orr.w	r2, r3, #8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005050:	2b00      	cmp	r3, #0
 8005052:	d012      	beq.n	800507a <HAL_UART_IRQHandler+0x18a>
 8005054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 81fd 	beq.w	8005480 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00d      	beq.n	80050ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d04f      	beq.n	8005172 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fe01 	bl	8005cda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d141      	bne.n	800516a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800511e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800512a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005136:	2b00      	cmp	r3, #0
 8005138:	d013      	beq.n	8005162 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <HAL_UART_IRQHandler+0x29c>)
 8005140:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005146:	4618      	mov	r0, r3
 8005148:	f7fc fc16 	bl	8001978 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d017      	beq.n	8005182 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005160:	e00f      	b.n	8005182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f9a0 	bl	80054a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005168:	e00b      	b.n	8005182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f99c 	bl	80054a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005170:	e007      	b.n	8005182 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f998 	bl	80054a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005180:	e17e      	b.n	8005480 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005182:	bf00      	nop
    return;
 8005184:	e17c      	b.n	8005480 <HAL_UART_IRQHandler+0x590>
 8005186:	bf00      	nop
 8005188:	04000120 	.word	0x04000120
 800518c:	08005da3 	.word	0x08005da3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005194:	2b01      	cmp	r3, #1
 8005196:	f040 814c 	bne.w	8005432 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 8145 	beq.w	8005432 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 813e 	beq.w	8005432 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2210      	movs	r2, #16
 80051bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b40      	cmp	r3, #64	; 0x40
 80051ca:	f040 80b6 	bne.w	800533a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8150 	beq.w	8005484 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ee:	429a      	cmp	r2, r3
 80051f0:	f080 8148 	bcs.w	8005484 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	f000 8086 	beq.w	8005318 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005228:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	461a      	mov	r2, r3
 8005232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800523a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800524e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1da      	bne.n	800520c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3308      	adds	r3, #8
 8005276:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800527a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800527e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005282:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800528c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e1      	bne.n	8005256 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3308      	adds	r3, #8
 8005298:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800529c:	e853 3f00 	ldrex	r3, [r3]
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	3308      	adds	r3, #8
 80052b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e3      	bne.n	8005292 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e0:	e853 3f00 	ldrex	r3, [r3]
 80052e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e8:	f023 0310 	bic.w	r3, r3, #16
 80052ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80052fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e4      	bne.n	80052d8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	4618      	mov	r0, r3
 8005314:	f7fc fac0 	bl	8001898 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800532a:	b29b      	uxth	r3, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8c2 	bl	80054bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005338:	e0a4      	b.n	8005484 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005346:	b29b      	uxth	r3, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8096 	beq.w	8005488 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800535c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8091 	beq.w	8005488 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800537a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005388:	647b      	str	r3, [r7, #68]	; 0x44
 800538a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800538e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e4      	bne.n	8005366 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	623b      	str	r3, [r7, #32]
   return(result);
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	f023 0301 	bic.w	r3, r3, #1
 80053b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053c0:	633a      	str	r2, [r7, #48]	; 0x30
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e3      	bne.n	800539c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f023 0310 	bic.w	r3, r3, #16
 80053fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	461a      	mov	r2, r3
 8005406:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	69b9      	ldr	r1, [r7, #24]
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	617b      	str	r3, [r7, #20]
   return(result);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e4      	bne.n	80053e8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005428:	4619      	mov	r1, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f846 	bl	80054bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005430:	e02a      	b.n	8005488 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	4798      	blx	r3
    }
    return;
 800545a:	e017      	b.n	800548c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <HAL_UART_IRQHandler+0x59e>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00c      	beq.n	800548e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fcaa 	bl	8005dce <UART_EndTransmit_IT>
    return;
 800547a:	e008      	b.n	800548e <HAL_UART_IRQHandler+0x59e>
      return;
 800547c:	bf00      	nop
 800547e:	e006      	b.n	800548e <HAL_UART_IRQHandler+0x59e>
    return;
 8005480:	bf00      	nop
 8005482:	e004      	b.n	800548e <HAL_UART_IRQHandler+0x59e>
      return;
 8005484:	bf00      	nop
 8005486:	e002      	b.n	800548e <HAL_UART_IRQHandler+0x59e>
      return;
 8005488:	bf00      	nop
 800548a:	e000      	b.n	800548e <HAL_UART_IRQHandler+0x59e>
    return;
 800548c:	bf00      	nop
  }

}
 800548e:	37e8      	adds	r7, #232	; 0xe8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4ba6      	ldr	r3, [pc, #664]	; (8005798 <UART_SetConfig+0x2c4>)
 8005500:	4013      	ands	r3, r2
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	430b      	orrs	r3, r1
 800550a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a94      	ldr	r2, [pc, #592]	; (800579c <UART_SetConfig+0x2c8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d120      	bne.n	8005592 <UART_SetConfig+0xbe>
 8005550:	4b93      	ldr	r3, [pc, #588]	; (80057a0 <UART_SetConfig+0x2cc>)
 8005552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b03      	cmp	r3, #3
 800555c:	d816      	bhi.n	800558c <UART_SetConfig+0xb8>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x90>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005575 	.word	0x08005575
 8005568:	08005581 	.word	0x08005581
 800556c:	0800557b 	.word	0x0800557b
 8005570:	08005587 	.word	0x08005587
 8005574:	2301      	movs	r3, #1
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e150      	b.n	800581c <UART_SetConfig+0x348>
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
 800557e:	e14d      	b.n	800581c <UART_SetConfig+0x348>
 8005580:	2304      	movs	r3, #4
 8005582:	77fb      	strb	r3, [r7, #31]
 8005584:	e14a      	b.n	800581c <UART_SetConfig+0x348>
 8005586:	2308      	movs	r3, #8
 8005588:	77fb      	strb	r3, [r7, #31]
 800558a:	e147      	b.n	800581c <UART_SetConfig+0x348>
 800558c:	2310      	movs	r3, #16
 800558e:	77fb      	strb	r3, [r7, #31]
 8005590:	e144      	b.n	800581c <UART_SetConfig+0x348>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a83      	ldr	r2, [pc, #524]	; (80057a4 <UART_SetConfig+0x2d0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d132      	bne.n	8005602 <UART_SetConfig+0x12e>
 800559c:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <UART_SetConfig+0x2cc>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d828      	bhi.n	80055fc <UART_SetConfig+0x128>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0xdc>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055e5 	.word	0x080055e5
 80055b4:	080055fd 	.word	0x080055fd
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	080055fd 	.word	0x080055fd
 80055c0:	080055f1 	.word	0x080055f1
 80055c4:	080055fd 	.word	0x080055fd
 80055c8:	080055fd 	.word	0x080055fd
 80055cc:	080055fd 	.word	0x080055fd
 80055d0:	080055eb 	.word	0x080055eb
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	080055fd 	.word	0x080055fd
 80055e0:	080055f7 	.word	0x080055f7
 80055e4:	2300      	movs	r3, #0
 80055e6:	77fb      	strb	r3, [r7, #31]
 80055e8:	e118      	b.n	800581c <UART_SetConfig+0x348>
 80055ea:	2302      	movs	r3, #2
 80055ec:	77fb      	strb	r3, [r7, #31]
 80055ee:	e115      	b.n	800581c <UART_SetConfig+0x348>
 80055f0:	2304      	movs	r3, #4
 80055f2:	77fb      	strb	r3, [r7, #31]
 80055f4:	e112      	b.n	800581c <UART_SetConfig+0x348>
 80055f6:	2308      	movs	r3, #8
 80055f8:	77fb      	strb	r3, [r7, #31]
 80055fa:	e10f      	b.n	800581c <UART_SetConfig+0x348>
 80055fc:	2310      	movs	r3, #16
 80055fe:	77fb      	strb	r3, [r7, #31]
 8005600:	e10c      	b.n	800581c <UART_SetConfig+0x348>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <UART_SetConfig+0x2d4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d120      	bne.n	800564e <UART_SetConfig+0x17a>
 800560c:	4b64      	ldr	r3, [pc, #400]	; (80057a0 <UART_SetConfig+0x2cc>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005616:	2b30      	cmp	r3, #48	; 0x30
 8005618:	d013      	beq.n	8005642 <UART_SetConfig+0x16e>
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d814      	bhi.n	8005648 <UART_SetConfig+0x174>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d009      	beq.n	8005636 <UART_SetConfig+0x162>
 8005622:	2b20      	cmp	r3, #32
 8005624:	d810      	bhi.n	8005648 <UART_SetConfig+0x174>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <UART_SetConfig+0x15c>
 800562a:	2b10      	cmp	r3, #16
 800562c:	d006      	beq.n	800563c <UART_SetConfig+0x168>
 800562e:	e00b      	b.n	8005648 <UART_SetConfig+0x174>
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
 8005634:	e0f2      	b.n	800581c <UART_SetConfig+0x348>
 8005636:	2302      	movs	r3, #2
 8005638:	77fb      	strb	r3, [r7, #31]
 800563a:	e0ef      	b.n	800581c <UART_SetConfig+0x348>
 800563c:	2304      	movs	r3, #4
 800563e:	77fb      	strb	r3, [r7, #31]
 8005640:	e0ec      	b.n	800581c <UART_SetConfig+0x348>
 8005642:	2308      	movs	r3, #8
 8005644:	77fb      	strb	r3, [r7, #31]
 8005646:	e0e9      	b.n	800581c <UART_SetConfig+0x348>
 8005648:	2310      	movs	r3, #16
 800564a:	77fb      	strb	r3, [r7, #31]
 800564c:	e0e6      	b.n	800581c <UART_SetConfig+0x348>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a56      	ldr	r2, [pc, #344]	; (80057ac <UART_SetConfig+0x2d8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d120      	bne.n	800569a <UART_SetConfig+0x1c6>
 8005658:	4b51      	ldr	r3, [pc, #324]	; (80057a0 <UART_SetConfig+0x2cc>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005662:	2bc0      	cmp	r3, #192	; 0xc0
 8005664:	d013      	beq.n	800568e <UART_SetConfig+0x1ba>
 8005666:	2bc0      	cmp	r3, #192	; 0xc0
 8005668:	d814      	bhi.n	8005694 <UART_SetConfig+0x1c0>
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d009      	beq.n	8005682 <UART_SetConfig+0x1ae>
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	d810      	bhi.n	8005694 <UART_SetConfig+0x1c0>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <UART_SetConfig+0x1a8>
 8005676:	2b40      	cmp	r3, #64	; 0x40
 8005678:	d006      	beq.n	8005688 <UART_SetConfig+0x1b4>
 800567a:	e00b      	b.n	8005694 <UART_SetConfig+0x1c0>
 800567c:	2300      	movs	r3, #0
 800567e:	77fb      	strb	r3, [r7, #31]
 8005680:	e0cc      	b.n	800581c <UART_SetConfig+0x348>
 8005682:	2302      	movs	r3, #2
 8005684:	77fb      	strb	r3, [r7, #31]
 8005686:	e0c9      	b.n	800581c <UART_SetConfig+0x348>
 8005688:	2304      	movs	r3, #4
 800568a:	77fb      	strb	r3, [r7, #31]
 800568c:	e0c6      	b.n	800581c <UART_SetConfig+0x348>
 800568e:	2308      	movs	r3, #8
 8005690:	77fb      	strb	r3, [r7, #31]
 8005692:	e0c3      	b.n	800581c <UART_SetConfig+0x348>
 8005694:	2310      	movs	r3, #16
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e0c0      	b.n	800581c <UART_SetConfig+0x348>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a44      	ldr	r2, [pc, #272]	; (80057b0 <UART_SetConfig+0x2dc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d125      	bne.n	80056f0 <UART_SetConfig+0x21c>
 80056a4:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <UART_SetConfig+0x2cc>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b2:	d017      	beq.n	80056e4 <UART_SetConfig+0x210>
 80056b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b8:	d817      	bhi.n	80056ea <UART_SetConfig+0x216>
 80056ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056be:	d00b      	beq.n	80056d8 <UART_SetConfig+0x204>
 80056c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c4:	d811      	bhi.n	80056ea <UART_SetConfig+0x216>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <UART_SetConfig+0x1fe>
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d006      	beq.n	80056de <UART_SetConfig+0x20a>
 80056d0:	e00b      	b.n	80056ea <UART_SetConfig+0x216>
 80056d2:	2300      	movs	r3, #0
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e0a1      	b.n	800581c <UART_SetConfig+0x348>
 80056d8:	2302      	movs	r3, #2
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e09e      	b.n	800581c <UART_SetConfig+0x348>
 80056de:	2304      	movs	r3, #4
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e09b      	b.n	800581c <UART_SetConfig+0x348>
 80056e4:	2308      	movs	r3, #8
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e098      	b.n	800581c <UART_SetConfig+0x348>
 80056ea:	2310      	movs	r3, #16
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e095      	b.n	800581c <UART_SetConfig+0x348>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2f      	ldr	r2, [pc, #188]	; (80057b4 <UART_SetConfig+0x2e0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d125      	bne.n	8005746 <UART_SetConfig+0x272>
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <UART_SetConfig+0x2cc>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005708:	d017      	beq.n	800573a <UART_SetConfig+0x266>
 800570a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800570e:	d817      	bhi.n	8005740 <UART_SetConfig+0x26c>
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005714:	d00b      	beq.n	800572e <UART_SetConfig+0x25a>
 8005716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800571a:	d811      	bhi.n	8005740 <UART_SetConfig+0x26c>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <UART_SetConfig+0x254>
 8005720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005724:	d006      	beq.n	8005734 <UART_SetConfig+0x260>
 8005726:	e00b      	b.n	8005740 <UART_SetConfig+0x26c>
 8005728:	2301      	movs	r3, #1
 800572a:	77fb      	strb	r3, [r7, #31]
 800572c:	e076      	b.n	800581c <UART_SetConfig+0x348>
 800572e:	2302      	movs	r3, #2
 8005730:	77fb      	strb	r3, [r7, #31]
 8005732:	e073      	b.n	800581c <UART_SetConfig+0x348>
 8005734:	2304      	movs	r3, #4
 8005736:	77fb      	strb	r3, [r7, #31]
 8005738:	e070      	b.n	800581c <UART_SetConfig+0x348>
 800573a:	2308      	movs	r3, #8
 800573c:	77fb      	strb	r3, [r7, #31]
 800573e:	e06d      	b.n	800581c <UART_SetConfig+0x348>
 8005740:	2310      	movs	r3, #16
 8005742:	77fb      	strb	r3, [r7, #31]
 8005744:	e06a      	b.n	800581c <UART_SetConfig+0x348>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1b      	ldr	r2, [pc, #108]	; (80057b8 <UART_SetConfig+0x2e4>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d138      	bne.n	80057c2 <UART_SetConfig+0x2ee>
 8005750:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <UART_SetConfig+0x2cc>)
 8005752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005756:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800575a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800575e:	d017      	beq.n	8005790 <UART_SetConfig+0x2bc>
 8005760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005764:	d82a      	bhi.n	80057bc <UART_SetConfig+0x2e8>
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	d00b      	beq.n	8005784 <UART_SetConfig+0x2b0>
 800576c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005770:	d824      	bhi.n	80057bc <UART_SetConfig+0x2e8>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <UART_SetConfig+0x2aa>
 8005776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800577a:	d006      	beq.n	800578a <UART_SetConfig+0x2b6>
 800577c:	e01e      	b.n	80057bc <UART_SetConfig+0x2e8>
 800577e:	2300      	movs	r3, #0
 8005780:	77fb      	strb	r3, [r7, #31]
 8005782:	e04b      	b.n	800581c <UART_SetConfig+0x348>
 8005784:	2302      	movs	r3, #2
 8005786:	77fb      	strb	r3, [r7, #31]
 8005788:	e048      	b.n	800581c <UART_SetConfig+0x348>
 800578a:	2304      	movs	r3, #4
 800578c:	77fb      	strb	r3, [r7, #31]
 800578e:	e045      	b.n	800581c <UART_SetConfig+0x348>
 8005790:	2308      	movs	r3, #8
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e042      	b.n	800581c <UART_SetConfig+0x348>
 8005796:	bf00      	nop
 8005798:	efff69f3 	.word	0xefff69f3
 800579c:	40011000 	.word	0x40011000
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40004400 	.word	0x40004400
 80057a8:	40004800 	.word	0x40004800
 80057ac:	40004c00 	.word	0x40004c00
 80057b0:	40005000 	.word	0x40005000
 80057b4:	40011400 	.word	0x40011400
 80057b8:	40007800 	.word	0x40007800
 80057bc:	2310      	movs	r3, #16
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e02c      	b.n	800581c <UART_SetConfig+0x348>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a72      	ldr	r2, [pc, #456]	; (8005990 <UART_SetConfig+0x4bc>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d125      	bne.n	8005818 <UART_SetConfig+0x344>
 80057cc:	4b71      	ldr	r3, [pc, #452]	; (8005994 <UART_SetConfig+0x4c0>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057da:	d017      	beq.n	800580c <UART_SetConfig+0x338>
 80057dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057e0:	d817      	bhi.n	8005812 <UART_SetConfig+0x33e>
 80057e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057e6:	d00b      	beq.n	8005800 <UART_SetConfig+0x32c>
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ec:	d811      	bhi.n	8005812 <UART_SetConfig+0x33e>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <UART_SetConfig+0x326>
 80057f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057f6:	d006      	beq.n	8005806 <UART_SetConfig+0x332>
 80057f8:	e00b      	b.n	8005812 <UART_SetConfig+0x33e>
 80057fa:	2300      	movs	r3, #0
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e00d      	b.n	800581c <UART_SetConfig+0x348>
 8005800:	2302      	movs	r3, #2
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e00a      	b.n	800581c <UART_SetConfig+0x348>
 8005806:	2304      	movs	r3, #4
 8005808:	77fb      	strb	r3, [r7, #31]
 800580a:	e007      	b.n	800581c <UART_SetConfig+0x348>
 800580c:	2308      	movs	r3, #8
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e004      	b.n	800581c <UART_SetConfig+0x348>
 8005812:	2310      	movs	r3, #16
 8005814:	77fb      	strb	r3, [r7, #31]
 8005816:	e001      	b.n	800581c <UART_SetConfig+0x348>
 8005818:	2310      	movs	r3, #16
 800581a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005824:	d15b      	bne.n	80058de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005826:	7ffb      	ldrb	r3, [r7, #31]
 8005828:	2b08      	cmp	r3, #8
 800582a:	d828      	bhi.n	800587e <UART_SetConfig+0x3aa>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x360>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005859 	.word	0x08005859
 8005838:	08005861 	.word	0x08005861
 800583c:	08005869 	.word	0x08005869
 8005840:	0800587f 	.word	0x0800587f
 8005844:	0800586f 	.word	0x0800586f
 8005848:	0800587f 	.word	0x0800587f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	0800587f 	.word	0x0800587f
 8005854:	08005877 	.word	0x08005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fd fbae 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 800585c:	61b8      	str	r0, [r7, #24]
        break;
 800585e:	e013      	b.n	8005888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fd fbbe 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8005864:	61b8      	str	r0, [r7, #24]
        break;
 8005866:	e00f      	b.n	8005888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005868:	4b4b      	ldr	r3, [pc, #300]	; (8005998 <UART_SetConfig+0x4c4>)
 800586a:	61bb      	str	r3, [r7, #24]
        break;
 800586c:	e00c      	b.n	8005888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800586e:	f7fd fa91 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8005872:	61b8      	str	r0, [r7, #24]
        break;
 8005874:	e008      	b.n	8005888 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800587a:	61bb      	str	r3, [r7, #24]
        break;
 800587c:	e004      	b.n	8005888 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	77bb      	strb	r3, [r7, #30]
        break;
 8005886:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d074      	beq.n	8005978 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	005a      	lsls	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	441a      	add	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d916      	bls.n	80058d8 <UART_SetConfig+0x404>
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b0:	d212      	bcs.n	80058d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f023 030f 	bic.w	r3, r3, #15
 80058ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	89fb      	ldrh	r3, [r7, #14]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	89fa      	ldrh	r2, [r7, #14]
 80058d4:	60da      	str	r2, [r3, #12]
 80058d6:	e04f      	b.n	8005978 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	77bb      	strb	r3, [r7, #30]
 80058dc:	e04c      	b.n	8005978 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058de:	7ffb      	ldrb	r3, [r7, #31]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d828      	bhi.n	8005936 <UART_SetConfig+0x462>
 80058e4:	a201      	add	r2, pc, #4	; (adr r2, 80058ec <UART_SetConfig+0x418>)
 80058e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ea:	bf00      	nop
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005919 	.word	0x08005919
 80058f4:	08005921 	.word	0x08005921
 80058f8:	08005937 	.word	0x08005937
 80058fc:	08005927 	.word	0x08005927
 8005900:	08005937 	.word	0x08005937
 8005904:	08005937 	.word	0x08005937
 8005908:	08005937 	.word	0x08005937
 800590c:	0800592f 	.word	0x0800592f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fd fb52 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8005914:	61b8      	str	r0, [r7, #24]
        break;
 8005916:	e013      	b.n	8005940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005918:	f7fd fb62 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 800591c:	61b8      	str	r0, [r7, #24]
        break;
 800591e:	e00f      	b.n	8005940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005920:	4b1d      	ldr	r3, [pc, #116]	; (8005998 <UART_SetConfig+0x4c4>)
 8005922:	61bb      	str	r3, [r7, #24]
        break;
 8005924:	e00c      	b.n	8005940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005926:	f7fd fa35 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 800592a:	61b8      	str	r0, [r7, #24]
        break;
 800592c:	e008      	b.n	8005940 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800592e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005932:	61bb      	str	r3, [r7, #24]
        break;
 8005934:	e004      	b.n	8005940 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	77bb      	strb	r3, [r7, #30]
        break;
 800593e:	bf00      	nop
    }

    if (pclk != 0U)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d018      	beq.n	8005978 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	085a      	lsrs	r2, r3, #1
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	441a      	add	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	fbb2 f3f3 	udiv	r3, r2, r3
 8005958:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d909      	bls.n	8005974 <UART_SetConfig+0x4a0>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005966:	d205      	bcs.n	8005974 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e001      	b.n	8005978 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005984:	7fbb      	ldrb	r3, [r7, #30]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	40007c00 	.word	0x40007c00
 8005994:	40023800 	.word	0x40023800
 8005998:	00f42400 	.word	0x00f42400

0800599c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0308 	and.w	r3, r3, #8
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01a      	beq.n	8005ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a9a:	d10a      	bne.n	8005ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00a      	beq.n	8005ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	605a      	str	r2, [r3, #4]
  }
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005af0:	f7fb fdc0 	bl	8001674 <HAL_GetTick>
 8005af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d10e      	bne.n	8005b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f81b 	bl	8005b4e <UART_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e011      	b.n	8005b46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b09c      	sub	sp, #112	; 0x70
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	603b      	str	r3, [r7, #0]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	e0a7      	b.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	f000 80a3 	beq.w	8005cb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fb fd83 	bl	8001674 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d13f      	bne.n	8005c00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b94:	667b      	str	r3, [r7, #100]	; 0x64
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ba0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e6      	bne.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	663b      	str	r3, [r7, #96]	; 0x60
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1e5      	bne.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e068      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d050      	beq.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d148      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c46:	637b      	str	r3, [r7, #52]	; 0x34
 8005c48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f023 0301 	bic.w	r3, r3, #1
 8005c70:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3308      	adds	r3, #8
 8005c78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c7a:	623a      	str	r2, [r7, #32]
 8005c7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7e:	69f9      	ldr	r1, [r7, #28]
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1e5      	bne.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e010      	b.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4013      	ands	r3, r2
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	f43f af48 	beq.w	8005b60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3770      	adds	r7, #112	; 0x70
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b095      	sub	sp, #84	; 0x54
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cea:	e853 3f00 	ldrex	r3, [r3]
 8005cee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d00:	643b      	str	r3, [r7, #64]	; 0x40
 8005d02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d08:	e841 2300 	strex	r3, r2, [r1]
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e6      	bne.n	8005ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3308      	adds	r3, #8
 8005d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e5      	bne.n	8005d14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d118      	bne.n	8005d82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	647b      	str	r3, [r7, #68]	; 0x44
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6e:	61bb      	str	r3, [r7, #24]
 8005d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d96:	bf00      	nop
 8005d98:	3754      	adds	r7, #84	; 0x54
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff fb71 	bl	80054a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b088      	sub	sp, #32
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dea:	61fb      	str	r3, [r7, #28]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	461a      	mov	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df8:	6979      	ldr	r1, [r7, #20]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	e841 2300 	strex	r3, r2, [r1]
 8005e00:	613b      	str	r3, [r7, #16]
   return(result);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e6      	bne.n	8005dd6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fb3d 	bl	8005494 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1a:	bf00      	nop
 8005e1c:	3720      	adds	r7, #32
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e24:	b084      	sub	sp, #16
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	f107 001c 	add.w	r0, r7, #28
 8005e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d120      	bne.n	8005e7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <USB_CoreInit+0xac>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d105      	bne.n	8005e72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa96 	bl	80063a4 <USB_CoreReset>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	73fb      	strb	r3, [r7, #15]
 8005e7c:	e010      	b.n	8005ea0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa8a 	bl	80063a4 <USB_CoreReset>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10b      	bne.n	8005ebe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f043 0206 	orr.w	r2, r3, #6
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f043 0220 	orr.w	r2, r3, #32
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eca:	b004      	add	sp, #16
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	ffbdffbf 	.word	0xffbdffbf

08005ed4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f023 0201 	bic.w	r2, r3, #1
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f12:	78fb      	ldrb	r3, [r7, #3]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d115      	bne.n	8005f44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f24:	2001      	movs	r0, #1
 8005f26:	f7fb fbb1 	bl	800168c <HAL_Delay>
      ms++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa29 	bl	8006388 <USB_GetMode>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d01e      	beq.n	8005f7a <USB_SetCurrentMode+0x84>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b31      	cmp	r3, #49	; 0x31
 8005f40:	d9f0      	bls.n	8005f24 <USB_SetCurrentMode+0x2e>
 8005f42:	e01a      	b.n	8005f7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d115      	bne.n	8005f76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f56:	2001      	movs	r0, #1
 8005f58:	f7fb fb98 	bl	800168c <HAL_Delay>
      ms++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fa10 	bl	8006388 <USB_GetMode>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <USB_SetCurrentMode+0x84>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b31      	cmp	r3, #49	; 0x31
 8005f72:	d9f0      	bls.n	8005f56 <USB_SetCurrentMode+0x60>
 8005f74:	e001      	b.n	8005f7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e005      	b.n	8005f86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b32      	cmp	r3, #50	; 0x32
 8005f7e:	d101      	bne.n	8005f84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f90:	b084      	sub	sp, #16
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b086      	sub	sp, #24
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e009      	b.n	8005fc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	3340      	adds	r3, #64	; 0x40
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b0e      	cmp	r3, #14
 8005fc8:	d9f2      	bls.n	8005fb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d11c      	bne.n	800600a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fde:	f043 0302 	orr.w	r3, r3, #2
 8005fe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e005      	b.n	8006016 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800601c:	461a      	mov	r2, r3
 800601e:	2300      	movs	r3, #0
 8006020:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	4619      	mov	r1, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	461a      	mov	r2, r3
 8006032:	680b      	ldr	r3, [r1, #0]
 8006034:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10c      	bne.n	8006056 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d104      	bne.n	800604c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006042:	2100      	movs	r1, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f965 	bl	8006314 <USB_SetDevSpeed>
 800604a:	e008      	b.n	800605e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800604c:	2101      	movs	r1, #1
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f960 	bl	8006314 <USB_SetDevSpeed>
 8006054:	e003      	b.n	800605e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006056:	2103      	movs	r1, #3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f95b 	bl	8006314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800605e:	2110      	movs	r1, #16
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f8f3 	bl	800624c <USB_FlushTxFifo>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f91f 	bl	80062b4 <USB_FlushRxFifo>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	461a      	mov	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	461a      	mov	r2, r3
 8006094:	2300      	movs	r3, #0
 8006096:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	461a      	mov	r2, r3
 80060a0:	2300      	movs	r3, #0
 80060a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	e043      	b.n	8006132 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c0:	d118      	bne.n	80060f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	461a      	mov	r2, r3
 80060d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e013      	b.n	8006106 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ea:	461a      	mov	r2, r3
 80060ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e008      	b.n	8006106 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006112:	461a      	mov	r2, r3
 8006114:	2300      	movs	r3, #0
 8006116:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	461a      	mov	r2, r3
 8006126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800612a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3301      	adds	r3, #1
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d3b7      	bcc.n	80060aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800613a:	2300      	movs	r3, #0
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	e043      	b.n	80061c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006156:	d118      	bne.n	800618a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	461a      	mov	r2, r3
 800616c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e013      	b.n	800619c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	e008      	b.n	800619c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006196:	461a      	mov	r2, r3
 8006198:	2300      	movs	r3, #0
 800619a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	461a      	mov	r2, r3
 80061bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3301      	adds	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d3b7      	bcc.n	8006140 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f043 0210 	orr.w	r2, r3, #16
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <USB_DevInit+0x2b4>)
 800620a:	4313      	orrs	r3, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	f043 0208 	orr.w	r2, r3, #8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d105      	bne.n	8006234 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699a      	ldr	r2, [r3, #24]
 800622c:	4b06      	ldr	r3, [pc, #24]	; (8006248 <USB_DevInit+0x2b8>)
 800622e:	4313      	orrs	r3, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006240:	b004      	add	sp, #16
 8006242:	4770      	bx	lr
 8006244:	803c3800 	.word	0x803c3800
 8006248:	40000004 	.word	0x40000004

0800624c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a13      	ldr	r2, [pc, #76]	; (80062b0 <USB_FlushTxFifo+0x64>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e01b      	b.n	80062a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	daf2      	bge.n	800625a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	019b      	lsls	r3, r3, #6
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <USB_FlushTxFifo+0x64>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e006      	b.n	80062a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b20      	cmp	r3, #32
 80062a0:	d0f0      	beq.n	8006284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	00030d40 	.word	0x00030d40

080062b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3301      	adds	r3, #1
 80062c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4a11      	ldr	r2, [pc, #68]	; (8006310 <USB_FlushRxFifo+0x5c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d901      	bls.n	80062d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e018      	b.n	8006304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	daf2      	bge.n	80062c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2210      	movs	r2, #16
 80062e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <USB_FlushRxFifo+0x5c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e006      	b.n	8006304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d0f0      	beq.n	80062e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3714      	adds	r7, #20
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	00030d40 	.word	0x00030d40

08006314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	68f9      	ldr	r1, [r7, #12]
 8006330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006334:	4313      	orrs	r3, r2
 8006336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006360:	f023 0303 	bic.w	r3, r3, #3
 8006364:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	f003 0301 	and.w	r3, r3, #1
}
 8006398:	4618      	mov	r0, r3
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	3301      	adds	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4a13      	ldr	r2, [pc, #76]	; (8006408 <USB_CoreReset+0x64>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e01b      	b.n	80063fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	daf2      	bge.n	80063b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4a09      	ldr	r2, [pc, #36]	; (8006408 <USB_CoreReset+0x64>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d901      	bls.n	80063ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e006      	b.n	80063fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d0f0      	beq.n	80063da <USB_CoreReset+0x36>

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	00030d40 	.word	0x00030d40

0800640c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800641a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800641e:	2b84      	cmp	r3, #132	; 0x84
 8006420:	d005      	beq.n	800642e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006422:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4413      	add	r3, r2
 800642a:	3303      	adds	r3, #3
 800642c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006440:	f000 fede 	bl	8007200 <vTaskStartScheduler>
  
  return osOK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	bd80      	pop	{r7, pc}

0800644a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800644a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800644c:	b089      	sub	sp, #36	; 0x24
 800644e:	af04      	add	r7, sp, #16
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d020      	beq.n	800649e <osThreadCreate+0x54>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d01c      	beq.n	800649e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685c      	ldr	r4, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691e      	ldr	r6, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ffc8 	bl	800640c <makeFreeRtosPriority>
 800647c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006486:	9202      	str	r2, [sp, #8]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9100      	str	r1, [sp, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4632      	mov	r2, r6
 8006490:	4629      	mov	r1, r5
 8006492:	4620      	mov	r0, r4
 8006494:	f000 fce2 	bl	8006e5c <xTaskCreateStatic>
 8006498:	4603      	mov	r3, r0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e01c      	b.n	80064d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685c      	ldr	r4, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ffaa 	bl	800640c <makeFreeRtosPriority>
 80064b8:	4602      	mov	r2, r0
 80064ba:	f107 030c 	add.w	r3, r7, #12
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	9200      	str	r2, [sp, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	4632      	mov	r2, r6
 80064c6:	4629      	mov	r1, r5
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fd2a 	bl	8006f22 <xTaskCreate>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d001      	beq.n	80064d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	e000      	b.n	80064da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80064d8:	68fb      	ldr	r3, [r7, #12]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080064e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <osDelay+0x16>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	e000      	b.n	80064fa <osDelay+0x18>
 80064f8:	2301      	movs	r3, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fe4a 	bl	8007194 <vTaskDelay>
  
  return osOK;
 8006500:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800650a:	b590      	push	{r4, r7, lr}
 800650c:	b085      	sub	sp, #20
 800650e:	af02      	add	r7, sp, #8
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <osMessageCreate+0x36>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6859      	ldr	r1, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2400      	movs	r4, #0
 8006536:	9400      	str	r4, [sp, #0]
 8006538:	f000 f92e 	bl	8006798 <xQueueGenericCreateStatic>
 800653c:	4603      	mov	r3, r0
 800653e:	e008      	b.n	8006552 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	4619      	mov	r1, r3
 800654c:	f000 f9a6 	bl	800689c <xQueueGenericCreate>
 8006550:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	bd90      	pop	{r4, r7, pc}

0800655a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f103 0208 	add.w	r2, r3, #8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f04f 32ff 	mov.w	r2, #4294967295
 8006572:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f103 0208 	add.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f103 0208 	add.w	r2, r3, #8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800658e:	bf00      	nop
 8006590:	370c      	adds	r7, #12
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689a      	ldr	r2, [r3, #8]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	601a      	str	r2, [r3, #0]
}
 80065f0:	bf00      	nop
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d103      	bne.n	800661c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e00c      	b.n	8006636 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3308      	adds	r3, #8
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e002      	b.n	800662a <vListInsert+0x2e>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	60fb      	str	r3, [r7, #12]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	429a      	cmp	r2, r3
 8006634:	d2f6      	bcs.n	8006624 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
}
 8006662:	bf00      	nop
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800666e:	b480      	push	{r7}
 8006670:	b085      	sub	sp, #20
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6892      	ldr	r2, [r2, #8]
 8006684:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6852      	ldr	r2, [r2, #4]
 800668e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d103      	bne.n	80066a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689a      	ldr	r2, [r3, #8]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10c      	bne.n	80066f2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80066f2:	f001 fbb3 	bl	8007e5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	3b01      	subs	r3, #1
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006728:	fb01 f303 	mul.w	r3, r1, r3
 800672c:	441a      	add	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	22ff      	movs	r2, #255	; 0xff
 800673e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d114      	bne.n	8006772 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01a      	beq.n	8006786 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	3310      	adds	r3, #16
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ffa1 	bl	800769c <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d012      	beq.n	8006786 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006760:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <xQueueGenericReset+0xd0>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	e009      	b.n	8006786 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3310      	adds	r3, #16
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff feef 	bl	800655a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3324      	adds	r3, #36	; 0x24
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff feea 	bl	800655a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006786:	f001 fb9d 	bl	8007ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800678a:	2301      	movs	r3, #1
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08e      	sub	sp, #56	; 0x38
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80067ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b0:	b672      	cpsid	i
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	b662      	cpsie	i
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	b672      	cpsid	i
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	b662      	cpsie	i
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <xQueueGenericCreateStatic+0x5a>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <xQueueGenericCreateStatic+0x5e>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e000      	b.n	80067f8 <xQueueGenericCreateStatic+0x60>
 80067f6:	2300      	movs	r3, #0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10c      	bne.n	8006816 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	b672      	cpsid	i
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	b662      	cpsie	i
 8006810:	623b      	str	r3, [r7, #32]
}
 8006812:	bf00      	nop
 8006814:	e7fe      	b.n	8006814 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <xQueueGenericCreateStatic+0x8a>
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <xQueueGenericCreateStatic+0x8e>
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <xQueueGenericCreateStatic+0x90>
 8006826:	2300      	movs	r3, #0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10c      	bne.n	8006846 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	b672      	cpsid	i
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	b662      	cpsie	i
 8006840:	61fb      	str	r3, [r7, #28]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006846:	2348      	movs	r3, #72	; 0x48
 8006848:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b48      	cmp	r3, #72	; 0x48
 800684e:	d00c      	beq.n	800686a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	b672      	cpsid	i
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	b662      	cpsie	i
 8006864:	61bb      	str	r3, [r7, #24]
}
 8006866:	bf00      	nop
 8006868:	e7fe      	b.n	8006868 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800686a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00d      	beq.n	8006892 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800687e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f847 	bl	8006920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006894:	4618      	mov	r0, r3
 8006896:	3730      	adds	r7, #48	; 0x30
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10c      	bne.n	80068ca <xQueueGenericCreate+0x2e>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b4:	b672      	cpsid	i
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	b662      	cpsie	i
 80068c4:	613b      	str	r3, [r7, #16]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d102      	bne.n	80068d6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e004      	b.n	80068e0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	3348      	adds	r3, #72	; 0x48
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fbe5 	bl	80080b4 <pvPortMalloc>
 80068ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d011      	beq.n	8006916 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	3348      	adds	r3, #72	; 0x48
 80068fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006904:	79fa      	ldrb	r2, [r7, #7]
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	4613      	mov	r3, r2
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f805 	bl	8006920 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006916:	69bb      	ldr	r3, [r7, #24]
	}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	e002      	b.n	8006942 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800694e:	2101      	movs	r1, #1
 8006950:	69b8      	ldr	r0, [r7, #24]
 8006952:	f7ff feb7 	bl	80066c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b08e      	sub	sp, #56	; 0x38
 8006962:	af00      	add	r7, sp, #0
 8006964:	60f8      	str	r0, [r7, #12]
 8006966:	60b9      	str	r1, [r7, #8]
 8006968:	607a      	str	r2, [r7, #4]
 800696a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10c      	bne.n	8006990 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	b672      	cpsid	i
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	b662      	cpsie	i
 800698a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800698c:	bf00      	nop
 800698e:	e7fe      	b.n	800698e <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d103      	bne.n	800699e <xQueueGenericSendFromISR+0x40>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <xQueueGenericSendFromISR+0x44>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <xQueueGenericSendFromISR+0x46>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10c      	bne.n	80069c2 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	b672      	cpsid	i
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	b662      	cpsie	i
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d103      	bne.n	80069d0 <xQueueGenericSendFromISR+0x72>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <xQueueGenericSendFromISR+0x76>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <xQueueGenericSendFromISR+0x78>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10c      	bne.n	80069f4 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	b672      	cpsid	i
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	b662      	cpsie	i
 80069ee:	61fb      	str	r3, [r7, #28]
}
 80069f0:	bf00      	nop
 80069f2:	e7fe      	b.n	80069f2 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f4:	f001 fb1a 	bl	800802c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069f8:	f3ef 8211 	mrs	r2, BASEPRI
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	b672      	cpsid	i
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	b662      	cpsie	i
 8006a10:	61ba      	str	r2, [r7, #24]
 8006a12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d302      	bcc.n	8006a2a <xQueueGenericSendFromISR+0xcc>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d12c      	bne.n	8006a84 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a3a:	f000 f917 	bl	8006c6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d112      	bne.n	8006a6e <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	3324      	adds	r3, #36	; 0x24
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fe21 	bl	800769c <xTaskRemoveFromEventList>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00e      	beq.n	8006a7e <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	e007      	b.n	8006a7e <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	b25a      	sxtb	r2, r3
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a82:	e001      	b.n	8006a88 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a84:	2300      	movs	r3, #0
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a92:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3738      	adds	r7, #56	; 0x38
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08c      	sub	sp, #48	; 0x30
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10c      	bne.n	8006ad4 <xQueueReceive+0x34>
	__asm volatile
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	b672      	cpsid	i
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	b662      	cpsie	i
 8006ace:	623b      	str	r3, [r7, #32]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <xQueueReceive+0x42>
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <xQueueReceive+0x46>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <xQueueReceive+0x48>
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10c      	bne.n	8006b06 <xQueueReceive+0x66>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	b672      	cpsid	i
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	b662      	cpsie	i
 8006b00:	61fb      	str	r3, [r7, #28]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b06:	f000 ff8d 	bl	8007a24 <xTaskGetSchedulerState>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <xQueueReceive+0x76>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <xQueueReceive+0x7a>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueReceive+0x7c>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10c      	bne.n	8006b3a <xQueueReceive+0x9a>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	b672      	cpsid	i
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	b662      	cpsie	i
 8006b34:	61bb      	str	r3, [r7, #24]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b3a:	f001 f98f 	bl	8007e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01f      	beq.n	8006b8a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4e:	f000 f8f7 	bl	8006d40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1e5a      	subs	r2, r3, #1
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00f      	beq.n	8006b82 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	3310      	adds	r3, #16
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fd98 	bl	800769c <xTaskRemoveFromEventList>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d007      	beq.n	8006b82 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b72:	4b3d      	ldr	r3, [pc, #244]	; (8006c68 <xQueueReceive+0x1c8>)
 8006b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b82:	f001 f99f 	bl	8007ec4 <vPortExitCritical>
				return pdPASS;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e069      	b.n	8006c5e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b90:	f001 f998 	bl	8007ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e062      	b.n	8006c5e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9e:	f107 0310 	add.w	r3, r7, #16
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fdde 	bl	8007764 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bac:	f001 f98a 	bl	8007ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb0:	f000 fb8a 	bl	80072c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb4:	f001 f952 	bl	8007e5c <vPortEnterCritical>
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d103      	bne.n	8006bce <xQueueReceive+0x12e>
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d103      	bne.n	8006be4 <xQueueReceive+0x144>
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be4:	f001 f96e 	bl	8007ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be8:	1d3a      	adds	r2, r7, #4
 8006bea:	f107 0310 	add.w	r3, r7, #16
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fdcd 	bl	8007790 <xTaskCheckForTimeOut>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d123      	bne.n	8006c44 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f000 f917 	bl	8006e30 <prvIsQueueEmpty>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d017      	beq.n	8006c38 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fd1d 	bl	8007650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c18:	f000 f8b8 	bl	8006d8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c1c:	f000 fb62 	bl	80072e4 <xTaskResumeAll>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d189      	bne.n	8006b3a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <xQueueReceive+0x1c8>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	e780      	b.n	8006b3a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3a:	f000 f8a7 	bl	8006d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c3e:	f000 fb51 	bl	80072e4 <xTaskResumeAll>
 8006c42:	e77a      	b.n	8006b3a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c46:	f000 f8a1 	bl	8006d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c4a:	f000 fb4b 	bl	80072e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c50:	f000 f8ee 	bl	8006e30 <prvIsQueueEmpty>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f43f af6f 	beq.w	8006b3a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3730      	adds	r7, #48	; 0x30
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10d      	bne.n	8006ca6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d14d      	bne.n	8006d2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fee2 	bl	8007a60 <xTaskPriorityDisinherit>
 8006c9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	e043      	b.n	8006d2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d119      	bne.n	8006ce0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6858      	ldr	r0, [r3, #4]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	f001 fc0c 	bl	80084d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc4:	441a      	add	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d32b      	bcc.n	8006d2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e026      	b.n	8006d2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	68d8      	ldr	r0, [r3, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68b9      	ldr	r1, [r7, #8]
 8006cec:	f001 fbf2 	bl	80084d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	425b      	negs	r3, r3
 8006cfa:	441a      	add	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d207      	bcs.n	8006d1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	425b      	negs	r3, r3
 8006d16:	441a      	add	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d105      	bne.n	8006d2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d36:	697b      	ldr	r3, [r7, #20]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d018      	beq.n	8006d84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	441a      	add	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d303      	bcc.n	8006d74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68d9      	ldr	r1, [r3, #12]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6838      	ldr	r0, [r7, #0]
 8006d80:	f001 fba8 	bl	80084d4 <memcpy>
	}
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006d94:	f001 f862 	bl	8007e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006da0:	e011      	b.n	8006dc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d012      	beq.n	8006dd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	3324      	adds	r3, #36	; 0x24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fc74 	bl	800769c <xTaskRemoveFromEventList>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dba:	f000 fd4f 	bl	800785c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	dce9      	bgt.n	8006da2 <prvUnlockQueue+0x16>
 8006dce:	e000      	b.n	8006dd2 <prvUnlockQueue+0x46>
					break;
 8006dd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	22ff      	movs	r2, #255	; 0xff
 8006dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dda:	f001 f873 	bl	8007ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006dde:	f001 f83d 	bl	8007e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006de8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006dea:	e011      	b.n	8006e10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d012      	beq.n	8006e1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3310      	adds	r3, #16
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fc4f 	bl	800769c <xTaskRemoveFromEventList>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e04:	f000 fd2a 	bl	800785c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dce9      	bgt.n	8006dec <prvUnlockQueue+0x60>
 8006e18:	e000      	b.n	8006e1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	22ff      	movs	r2, #255	; 0xff
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e24:	f001 f84e 	bl	8007ec4 <vPortExitCritical>
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e38:	f001 f810 	bl	8007e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d102      	bne.n	8006e4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	e001      	b.n	8006e4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e4e:	f001 f839 	bl	8007ec4 <vPortExitCritical>

	return xReturn;
 8006e52:	68fb      	ldr	r3, [r7, #12]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08e      	sub	sp, #56	; 0x38
 8006e60:	af04      	add	r7, sp, #16
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10c      	bne.n	8006e8a <xTaskCreateStatic+0x2e>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	b672      	cpsid	i
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	b662      	cpsie	i
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10c      	bne.n	8006eaa <xTaskCreateStatic+0x4e>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	b672      	cpsid	i
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	b662      	cpsie	i
 8006ea4:	61fb      	str	r3, [r7, #28]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006eaa:	2354      	movs	r3, #84	; 0x54
 8006eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b54      	cmp	r3, #84	; 0x54
 8006eb2:	d00c      	beq.n	8006ece <xTaskCreateStatic+0x72>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	61bb      	str	r3, [r7, #24]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ece:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01e      	beq.n	8006f14 <xTaskCreateStatic+0xb8>
 8006ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d01b      	beq.n	8006f14 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ee4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006eee:	2300      	movs	r3, #0
 8006ef0:	9303      	str	r3, [sp, #12]
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	f107 0314 	add.w	r3, r7, #20
 8006efa:	9301      	str	r3, [sp, #4]
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f850 	bl	8006fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0e:	f000 f8d7 	bl	80070c0 <prvAddNewTaskToReadyList>
 8006f12:	e001      	b.n	8006f18 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f18:	697b      	ldr	r3, [r7, #20]
	}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3728      	adds	r7, #40	; 0x28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b08c      	sub	sp, #48	; 0x30
 8006f26:	af04      	add	r7, sp, #16
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f32:	88fb      	ldrh	r3, [r7, #6]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f8bc 	bl	80080b4 <pvPortMalloc>
 8006f3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00e      	beq.n	8006f62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f44:	2054      	movs	r0, #84	; 0x54
 8006f46:	f001 f8b5 	bl	80080b4 <pvPortMalloc>
 8006f4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
 8006f58:	e005      	b.n	8006f66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	f001 f974 	bl	8008248 <vPortFree>
 8006f60:	e001      	b.n	8006f66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	2300      	movs	r3, #0
 8006f78:	9303      	str	r3, [sp, #12]
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	9302      	str	r3, [sp, #8]
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f80e 	bl	8006fac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f90:	69f8      	ldr	r0, [r7, #28]
 8006f92:	f000 f895 	bl	80070c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f96:	2301      	movs	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	e002      	b.n	8006fa2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3720      	adds	r7, #32
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
 8006fb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006fc4:	440b      	add	r3, r1
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f023 0307 	bic.w	r3, r3, #7
 8006fd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	b672      	cpsid	i
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	b662      	cpsie	i
 8006ff2:	617b      	str	r3, [r7, #20]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01f      	beq.n	800703e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
 8007002:	e012      	b.n	800702a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	4413      	add	r3, r2
 800700a:	7819      	ldrb	r1, [r3, #0]
 800700c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	3334      	adds	r3, #52	; 0x34
 8007014:	460a      	mov	r2, r1
 8007016:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4413      	add	r3, r2
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d006      	beq.n	8007032 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	3301      	adds	r3, #1
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	2b0f      	cmp	r3, #15
 800702e:	d9e9      	bls.n	8007004 <prvInitialiseNewTask+0x58>
 8007030:	e000      	b.n	8007034 <prvInitialiseNewTask+0x88>
			{
				break;
 8007032:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800703c:	e003      	b.n	8007046 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007048:	2b06      	cmp	r3, #6
 800704a:	d901      	bls.n	8007050 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800704c:	2306      	movs	r3, #6
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007054:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705e:	2200      	movs	r2, #0
 8007060:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	3304      	adds	r3, #4
 8007066:	4618      	mov	r0, r3
 8007068:	f7ff fa97 	bl	800659a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706e:	3318      	adds	r3, #24
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fa92 	bl	800659a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800707a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	f1c3 0207 	rsb	r2, r3, #7
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	2200      	movs	r2, #0
 8007090:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	68f9      	ldr	r1, [r7, #12]
 800709e:	69b8      	ldr	r0, [r7, #24]
 80070a0:	f000 fdce 	bl	8007c40 <pxPortInitialiseStack>
 80070a4:	4602      	mov	r2, r0
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b6:	bf00      	nop
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070c8:	f000 fec8 	bl	8007e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070cc:	4b2a      	ldr	r3, [pc, #168]	; (8007178 <prvAddNewTaskToReadyList+0xb8>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3301      	adds	r3, #1
 80070d2:	4a29      	ldr	r2, [pc, #164]	; (8007178 <prvAddNewTaskToReadyList+0xb8>)
 80070d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070d6:	4b29      	ldr	r3, [pc, #164]	; (800717c <prvAddNewTaskToReadyList+0xbc>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070de:	4a27      	ldr	r2, [pc, #156]	; (800717c <prvAddNewTaskToReadyList+0xbc>)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80070e4:	4b24      	ldr	r3, [pc, #144]	; (8007178 <prvAddNewTaskToReadyList+0xb8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d110      	bne.n	800710e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80070ec:	f000 fbda 	bl	80078a4 <prvInitialiseTaskLists>
 80070f0:	e00d      	b.n	800710e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80070f2:	4b23      	ldr	r3, [pc, #140]	; (8007180 <prvAddNewTaskToReadyList+0xc0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d109      	bne.n	800710e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <prvAddNewTaskToReadyList+0xbc>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d802      	bhi.n	800710e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007108:	4a1c      	ldr	r2, [pc, #112]	; (800717c <prvAddNewTaskToReadyList+0xbc>)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800710e:	4b1d      	ldr	r3, [pc, #116]	; (8007184 <prvAddNewTaskToReadyList+0xc4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <prvAddNewTaskToReadyList+0xc4>)
 8007116:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	4b19      	ldr	r3, [pc, #100]	; (8007188 <prvAddNewTaskToReadyList+0xc8>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <prvAddNewTaskToReadyList+0xc8>)
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4a15      	ldr	r2, [pc, #84]	; (800718c <prvAddNewTaskToReadyList+0xcc>)
 8007138:	441a      	add	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f7ff fa37 	bl	80065b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007146:	f000 febd 	bl	8007ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800714a:	4b0d      	ldr	r3, [pc, #52]	; (8007180 <prvAddNewTaskToReadyList+0xc0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00e      	beq.n	8007170 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <prvAddNewTaskToReadyList+0xbc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	429a      	cmp	r2, r3
 800715e:	d207      	bcs.n	8007170 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007160:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <prvAddNewTaskToReadyList+0xd0>)
 8007162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000c40 	.word	0x20000c40
 800717c:	20000b40 	.word	0x20000b40
 8007180:	20000c4c 	.word	0x20000c4c
 8007184:	20000c5c 	.word	0x20000c5c
 8007188:	20000c48 	.word	0x20000c48
 800718c:	20000b44 	.word	0x20000b44
 8007190:	e000ed04 	.word	0xe000ed04

08007194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d019      	beq.n	80071da <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071a6:	4b14      	ldr	r3, [pc, #80]	; (80071f8 <vTaskDelay+0x64>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00c      	beq.n	80071c8 <vTaskDelay+0x34>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	b672      	cpsid	i
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	b662      	cpsie	i
 80071c2:	60bb      	str	r3, [r7, #8]
}
 80071c4:	bf00      	nop
 80071c6:	e7fe      	b.n	80071c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80071c8:	f000 f87e 	bl	80072c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80071cc:	2100      	movs	r1, #0
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fcd0 	bl	8007b74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80071d4:	f000 f886 	bl	80072e4 <xTaskResumeAll>
 80071d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d107      	bne.n	80071f0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80071e0:	4b06      	ldr	r3, [pc, #24]	; (80071fc <vTaskDelay+0x68>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000c68 	.word	0x20000c68
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800720e:	463a      	mov	r2, r7
 8007210:	1d39      	adds	r1, r7, #4
 8007212:	f107 0308 	add.w	r3, r7, #8
 8007216:	4618      	mov	r0, r3
 8007218:	f7f9 f978 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	9202      	str	r2, [sp, #8]
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	2300      	movs	r3, #0
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	2300      	movs	r3, #0
 800722c:	460a      	mov	r2, r1
 800722e:	4920      	ldr	r1, [pc, #128]	; (80072b0 <vTaskStartScheduler+0xb0>)
 8007230:	4820      	ldr	r0, [pc, #128]	; (80072b4 <vTaskStartScheduler+0xb4>)
 8007232:	f7ff fe13 	bl	8006e5c <xTaskCreateStatic>
 8007236:	4603      	mov	r3, r0
 8007238:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <vTaskStartScheduler+0xb8>)
 800723a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800723c:	4b1e      	ldr	r3, [pc, #120]	; (80072b8 <vTaskStartScheduler+0xb8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e001      	b.n	800724e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800724a:	2300      	movs	r3, #0
 800724c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d118      	bne.n	8007286 <vTaskStartScheduler+0x86>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	613b      	str	r3, [r7, #16]
}
 800726a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800726c:	4b13      	ldr	r3, [pc, #76]	; (80072bc <vTaskStartScheduler+0xbc>)
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007274:	4b12      	ldr	r3, [pc, #72]	; (80072c0 <vTaskStartScheduler+0xc0>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800727a:	4b12      	ldr	r3, [pc, #72]	; (80072c4 <vTaskStartScheduler+0xc4>)
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007280:	f000 fd6e 	bl	8007d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007284:	e010      	b.n	80072a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d10c      	bne.n	80072a8 <vTaskStartScheduler+0xa8>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	b672      	cpsid	i
 8007294:	f383 8811 	msr	BASEPRI, r3
 8007298:	f3bf 8f6f 	isb	sy
 800729c:	f3bf 8f4f 	dsb	sy
 80072a0:	b662      	cpsie	i
 80072a2:	60fb      	str	r3, [r7, #12]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <vTaskStartScheduler+0xa6>
}
 80072a8:	bf00      	nop
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	08008564 	.word	0x08008564
 80072b4:	08007875 	.word	0x08007875
 80072b8:	20000c64 	.word	0x20000c64
 80072bc:	20000c60 	.word	0x20000c60
 80072c0:	20000c4c 	.word	0x20000c4c
 80072c4:	20000c44 	.word	0x20000c44

080072c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <vTaskSuspendAll+0x18>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a03      	ldr	r2, [pc, #12]	; (80072e0 <vTaskSuspendAll+0x18>)
 80072d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	20000c68 	.word	0x20000c68

080072e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072f2:	4b42      	ldr	r3, [pc, #264]	; (80073fc <xTaskResumeAll+0x118>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <xTaskResumeAll+0x30>
	__asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fe:	b672      	cpsid	i
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	b662      	cpsie	i
 800730e:	603b      	str	r3, [r7, #0]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007314:	f000 fda2 	bl	8007e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007318:	4b38      	ldr	r3, [pc, #224]	; (80073fc <xTaskResumeAll+0x118>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3b01      	subs	r3, #1
 800731e:	4a37      	ldr	r2, [pc, #220]	; (80073fc <xTaskResumeAll+0x118>)
 8007320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007322:	4b36      	ldr	r3, [pc, #216]	; (80073fc <xTaskResumeAll+0x118>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d161      	bne.n	80073ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800732a:	4b35      	ldr	r3, [pc, #212]	; (8007400 <xTaskResumeAll+0x11c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d05d      	beq.n	80073ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007332:	e02e      	b.n	8007392 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007334:	4b33      	ldr	r3, [pc, #204]	; (8007404 <xTaskResumeAll+0x120>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f994 	bl	800666e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	3304      	adds	r3, #4
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff f98f 	bl	800666e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	2201      	movs	r2, #1
 8007356:	409a      	lsls	r2, r3
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <xTaskResumeAll+0x124>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4313      	orrs	r3, r2
 800735e:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <xTaskResumeAll+0x124>)
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4a27      	ldr	r2, [pc, #156]	; (800740c <xTaskResumeAll+0x128>)
 8007370:	441a      	add	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3304      	adds	r3, #4
 8007376:	4619      	mov	r1, r3
 8007378:	4610      	mov	r0, r2
 800737a:	f7ff f91b 	bl	80065b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007382:	4b23      	ldr	r3, [pc, #140]	; (8007410 <xTaskResumeAll+0x12c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d302      	bcc.n	8007392 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800738c:	4b21      	ldr	r3, [pc, #132]	; (8007414 <xTaskResumeAll+0x130>)
 800738e:	2201      	movs	r2, #1
 8007390:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <xTaskResumeAll+0x120>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1cc      	bne.n	8007334 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073a0:	f000 fb20 	bl	80079e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80073a4:	4b1c      	ldr	r3, [pc, #112]	; (8007418 <xTaskResumeAll+0x134>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073b0:	f000 f836 	bl	8007420 <xTaskIncrementTick>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073ba:	4b16      	ldr	r3, [pc, #88]	; (8007414 <xTaskResumeAll+0x130>)
 80073bc:	2201      	movs	r2, #1
 80073be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1f1      	bne.n	80073b0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <xTaskResumeAll+0x134>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <xTaskResumeAll+0x130>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073da:	2301      	movs	r3, #1
 80073dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073de:	4b0f      	ldr	r3, [pc, #60]	; (800741c <xTaskResumeAll+0x138>)
 80073e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ee:	f000 fd69 	bl	8007ec4 <vPortExitCritical>

	return xAlreadyYielded;
 80073f2:	68bb      	ldr	r3, [r7, #8]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000c68 	.word	0x20000c68
 8007400:	20000c40 	.word	0x20000c40
 8007404:	20000c00 	.word	0x20000c00
 8007408:	20000c48 	.word	0x20000c48
 800740c:	20000b44 	.word	0x20000b44
 8007410:	20000b40 	.word	0x20000b40
 8007414:	20000c54 	.word	0x20000c54
 8007418:	20000c50 	.word	0x20000c50
 800741c:	e000ed04 	.word	0xe000ed04

08007420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800742a:	4b4f      	ldr	r3, [pc, #316]	; (8007568 <xTaskIncrementTick+0x148>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 808a 	bne.w	8007548 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007434:	4b4d      	ldr	r3, [pc, #308]	; (800756c <xTaskIncrementTick+0x14c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	3301      	adds	r3, #1
 800743a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800743c:	4a4b      	ldr	r2, [pc, #300]	; (800756c <xTaskIncrementTick+0x14c>)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d122      	bne.n	800748e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007448:	4b49      	ldr	r3, [pc, #292]	; (8007570 <xTaskIncrementTick+0x150>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00c      	beq.n	800746c <xTaskIncrementTick+0x4c>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	b672      	cpsid	i
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	b662      	cpsie	i
 8007466:	603b      	str	r3, [r7, #0]
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xTaskIncrementTick+0x4a>
 800746c:	4b40      	ldr	r3, [pc, #256]	; (8007570 <xTaskIncrementTick+0x150>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	4b40      	ldr	r3, [pc, #256]	; (8007574 <xTaskIncrementTick+0x154>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a3e      	ldr	r2, [pc, #248]	; (8007570 <xTaskIncrementTick+0x150>)
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4a3e      	ldr	r2, [pc, #248]	; (8007574 <xTaskIncrementTick+0x154>)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6013      	str	r3, [r2, #0]
 8007480:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <xTaskIncrementTick+0x158>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	4a3c      	ldr	r2, [pc, #240]	; (8007578 <xTaskIncrementTick+0x158>)
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	f000 faab 	bl	80079e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800748e:	4b3b      	ldr	r3, [pc, #236]	; (800757c <xTaskIncrementTick+0x15c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	429a      	cmp	r2, r3
 8007496:	d348      	bcc.n	800752a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007498:	4b35      	ldr	r3, [pc, #212]	; (8007570 <xTaskIncrementTick+0x150>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a2:	4b36      	ldr	r3, [pc, #216]	; (800757c <xTaskIncrementTick+0x15c>)
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295
 80074a8:	601a      	str	r2, [r3, #0]
					break;
 80074aa:	e03e      	b.n	800752a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ac:	4b30      	ldr	r3, [pc, #192]	; (8007570 <xTaskIncrementTick+0x150>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d203      	bcs.n	80074cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074c4:	4a2d      	ldr	r2, [pc, #180]	; (800757c <xTaskIncrementTick+0x15c>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074ca:	e02e      	b.n	800752a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	3304      	adds	r3, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7ff f8cc 	bl	800666e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d004      	beq.n	80074e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3318      	adds	r3, #24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff f8c3 	bl	800666e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	4b23      	ldr	r3, [pc, #140]	; (8007580 <xTaskIncrementTick+0x160>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	4a22      	ldr	r2, [pc, #136]	; (8007580 <xTaskIncrementTick+0x160>)
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4a1f      	ldr	r2, [pc, #124]	; (8007584 <xTaskIncrementTick+0x164>)
 8007508:	441a      	add	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f7ff f84f 	bl	80065b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <xTaskIncrementTick+0x168>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	429a      	cmp	r2, r3
 8007522:	d3b9      	bcc.n	8007498 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007528:	e7b6      	b.n	8007498 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <xTaskIncrementTick+0x168>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007530:	4914      	ldr	r1, [pc, #80]	; (8007584 <xTaskIncrementTick+0x164>)
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	440b      	add	r3, r1
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d907      	bls.n	8007552 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007542:	2301      	movs	r3, #1
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e004      	b.n	8007552 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <xTaskIncrementTick+0x16c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a0f      	ldr	r2, [pc, #60]	; (800758c <xTaskIncrementTick+0x16c>)
 8007550:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007552:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <xTaskIncrementTick+0x170>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800755a:	2301      	movs	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800755e:	697b      	ldr	r3, [r7, #20]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3718      	adds	r7, #24
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	20000c68 	.word	0x20000c68
 800756c:	20000c44 	.word	0x20000c44
 8007570:	20000bf8 	.word	0x20000bf8
 8007574:	20000bfc 	.word	0x20000bfc
 8007578:	20000c58 	.word	0x20000c58
 800757c:	20000c60 	.word	0x20000c60
 8007580:	20000c48 	.word	0x20000c48
 8007584:	20000b44 	.word	0x20000b44
 8007588:	20000b40 	.word	0x20000b40
 800758c:	20000c50 	.word	0x20000c50
 8007590:	20000c54 	.word	0x20000c54

08007594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800759a:	4b28      	ldr	r3, [pc, #160]	; (800763c <vTaskSwitchContext+0xa8>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075a2:	4b27      	ldr	r3, [pc, #156]	; (8007640 <vTaskSwitchContext+0xac>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075a8:	e041      	b.n	800762e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80075aa:	4b25      	ldr	r3, [pc, #148]	; (8007640 <vTaskSwitchContext+0xac>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075b0:	4b24      	ldr	r3, [pc, #144]	; (8007644 <vTaskSwitchContext+0xb0>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	fab3 f383 	clz	r3, r3
 80075bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	f1c3 031f 	rsb	r3, r3, #31
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	4920      	ldr	r1, [pc, #128]	; (8007648 <vTaskSwitchContext+0xb4>)
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10c      	bne.n	80075f4 <vTaskSwitchContext+0x60>
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	b672      	cpsid	i
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	b662      	cpsie	i
 80075ee:	607b      	str	r3, [r7, #4]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <vTaskSwitchContext+0x5e>
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4613      	mov	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <vTaskSwitchContext+0xb4>)
 8007600:	4413      	add	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	685a      	ldr	r2, [r3, #4]
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	3308      	adds	r3, #8
 8007616:	429a      	cmp	r2, r3
 8007618:	d104      	bne.n	8007624 <vTaskSwitchContext+0x90>
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	605a      	str	r2, [r3, #4]
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	4a08      	ldr	r2, [pc, #32]	; (800764c <vTaskSwitchContext+0xb8>)
 800762c:	6013      	str	r3, [r2, #0]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000c68 	.word	0x20000c68
 8007640:	20000c54 	.word	0x20000c54
 8007644:	20000c48 	.word	0x20000c48
 8007648:	20000b44 	.word	0x20000b44
 800764c:	20000b40 	.word	0x20000b40

08007650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10c      	bne.n	800767a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	b672      	cpsid	i
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	b662      	cpsie	i
 8007674:	60fb      	str	r3, [r7, #12]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800767a:	4b07      	ldr	r3, [pc, #28]	; (8007698 <vTaskPlaceOnEventList+0x48>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3318      	adds	r3, #24
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fe ffba 	bl	80065fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007688:	2101      	movs	r1, #1
 800768a:	6838      	ldr	r0, [r7, #0]
 800768c:	f000 fa72 	bl	8007b74 <prvAddCurrentTaskToDelayedList>
}
 8007690:	bf00      	nop
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	20000b40 	.word	0x20000b40

0800769c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10c      	bne.n	80076cc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	b672      	cpsid	i
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	b662      	cpsie	i
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	3318      	adds	r3, #24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe ffcc 	bl	800666e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076d6:	4b1d      	ldr	r3, [pc, #116]	; (800774c <xTaskRemoveFromEventList+0xb0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d11c      	bne.n	8007718 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe ffc3 	bl	800666e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	2201      	movs	r2, #1
 80076ee:	409a      	lsls	r2, r3
 80076f0:	4b17      	ldr	r3, [pc, #92]	; (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	4a16      	ldr	r2, [pc, #88]	; (8007750 <xTaskRemoveFromEventList+0xb4>)
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <xTaskRemoveFromEventList+0xb8>)
 8007708:	441a      	add	r2, r3
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fe ff4f 	bl	80065b4 <vListInsertEnd>
 8007716:	e005      	b.n	8007724 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	3318      	adds	r3, #24
 800771c:	4619      	mov	r1, r3
 800771e:	480e      	ldr	r0, [pc, #56]	; (8007758 <xTaskRemoveFromEventList+0xbc>)
 8007720:	f7fe ff48 	bl	80065b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007728:	4b0c      	ldr	r3, [pc, #48]	; (800775c <xTaskRemoveFromEventList+0xc0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772e:	429a      	cmp	r2, r3
 8007730:	d905      	bls.n	800773e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <xTaskRemoveFromEventList+0xc4>)
 8007738:	2201      	movs	r2, #1
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	e001      	b.n	8007742 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007742:	697b      	ldr	r3, [r7, #20]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3718      	adds	r7, #24
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20000c68 	.word	0x20000c68
 8007750:	20000c48 	.word	0x20000c48
 8007754:	20000b44 	.word	0x20000b44
 8007758:	20000c00 	.word	0x20000c00
 800775c:	20000b40 	.word	0x20000b40
 8007760:	20000c54 	.word	0x20000c54

08007764 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800776c:	4b06      	ldr	r3, [pc, #24]	; (8007788 <vTaskInternalSetTimeOutState+0x24>)
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <vTaskInternalSetTimeOutState+0x28>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	605a      	str	r2, [r3, #4]
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000c58 	.word	0x20000c58
 800778c:	20000c44 	.word	0x20000c44

08007790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10c      	bne.n	80077ba <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	613b      	str	r3, [r7, #16]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10c      	bne.n	80077da <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	b672      	cpsid	i
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	b662      	cpsie	i
 80077d4:	60fb      	str	r3, [r7, #12]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80077da:	f000 fb3f 	bl	8007e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077de:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <xTaskCheckForTimeOut+0xc4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f6:	d102      	bne.n	80077fe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	61fb      	str	r3, [r7, #28]
 80077fc:	e023      	b.n	8007846 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <xTaskCheckForTimeOut+0xc8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	429a      	cmp	r2, r3
 8007808:	d007      	beq.n	800781a <xTaskCheckForTimeOut+0x8a>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007814:	2301      	movs	r3, #1
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e015      	b.n	8007846 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	429a      	cmp	r2, r3
 8007822:	d20b      	bcs.n	800783c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f7ff ff97 	bl	8007764 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007836:	2300      	movs	r3, #0
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	e004      	b.n	8007846 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007842:	2301      	movs	r3, #1
 8007844:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007846:	f000 fb3d 	bl	8007ec4 <vPortExitCritical>

	return xReturn;
 800784a:	69fb      	ldr	r3, [r7, #28]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20000c44 	.word	0x20000c44
 8007858:	20000c58 	.word	0x20000c58

0800785c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007860:	4b03      	ldr	r3, [pc, #12]	; (8007870 <vTaskMissedYield+0x14>)
 8007862:	2201      	movs	r2, #1
 8007864:	601a      	str	r2, [r3, #0]
}
 8007866:	bf00      	nop
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	20000c54 	.word	0x20000c54

08007874 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800787c:	f000 f852 	bl	8007924 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <prvIdleTask+0x28>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d9f9      	bls.n	800787c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <prvIdleTask+0x2c>)
 800788a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007898:	e7f0      	b.n	800787c <prvIdleTask+0x8>
 800789a:	bf00      	nop
 800789c:	20000b44 	.word	0x20000b44
 80078a0:	e000ed04 	.word	0xe000ed04

080078a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e00c      	b.n	80078ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a12      	ldr	r2, [pc, #72]	; (8007904 <prvInitialiseTaskLists+0x60>)
 80078bc:	4413      	add	r3, r2
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fe4b 	bl	800655a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3301      	adds	r3, #1
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b06      	cmp	r3, #6
 80078ce:	d9ef      	bls.n	80078b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078d0:	480d      	ldr	r0, [pc, #52]	; (8007908 <prvInitialiseTaskLists+0x64>)
 80078d2:	f7fe fe42 	bl	800655a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078d6:	480d      	ldr	r0, [pc, #52]	; (800790c <prvInitialiseTaskLists+0x68>)
 80078d8:	f7fe fe3f 	bl	800655a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078dc:	480c      	ldr	r0, [pc, #48]	; (8007910 <prvInitialiseTaskLists+0x6c>)
 80078de:	f7fe fe3c 	bl	800655a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078e2:	480c      	ldr	r0, [pc, #48]	; (8007914 <prvInitialiseTaskLists+0x70>)
 80078e4:	f7fe fe39 	bl	800655a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078e8:	480b      	ldr	r0, [pc, #44]	; (8007918 <prvInitialiseTaskLists+0x74>)
 80078ea:	f7fe fe36 	bl	800655a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <prvInitialiseTaskLists+0x78>)
 80078f0:	4a05      	ldr	r2, [pc, #20]	; (8007908 <prvInitialiseTaskLists+0x64>)
 80078f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <prvInitialiseTaskLists+0x7c>)
 80078f6:	4a05      	ldr	r2, [pc, #20]	; (800790c <prvInitialiseTaskLists+0x68>)
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000b44 	.word	0x20000b44
 8007908:	20000bd0 	.word	0x20000bd0
 800790c:	20000be4 	.word	0x20000be4
 8007910:	20000c00 	.word	0x20000c00
 8007914:	20000c14 	.word	0x20000c14
 8007918:	20000c2c 	.word	0x20000c2c
 800791c:	20000bf8 	.word	0x20000bf8
 8007920:	20000bfc 	.word	0x20000bfc

08007924 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800792a:	e019      	b.n	8007960 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800792c:	f000 fa96 	bl	8007e5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007930:	4b10      	ldr	r3, [pc, #64]	; (8007974 <prvCheckTasksWaitingTermination+0x50>)
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fe96 	bl	800666e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007942:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <prvCheckTasksWaitingTermination+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3b01      	subs	r3, #1
 8007948:	4a0b      	ldr	r2, [pc, #44]	; (8007978 <prvCheckTasksWaitingTermination+0x54>)
 800794a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3b01      	subs	r3, #1
 8007952:	4a0a      	ldr	r2, [pc, #40]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 8007954:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007956:	f000 fab5 	bl	8007ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f810 	bl	8007980 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <prvCheckTasksWaitingTermination+0x58>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1e1      	bne.n	800792c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000c14 	.word	0x20000c14
 8007978:	20000c40 	.word	0x20000c40
 800797c:	20000c28 	.word	0x20000c28

08007980 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fc56 	bl	8008248 <vPortFree>
				vPortFree( pxTCB );
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fc53 	bl	8008248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079a2:	e01a      	b.n	80079da <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d103      	bne.n	80079b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fc4a 	bl	8008248 <vPortFree>
	}
 80079b4:	e011      	b.n	80079da <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d00c      	beq.n	80079da <prvDeleteTCB+0x5a>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	b672      	cpsid	i
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	b662      	cpsie	i
 80079d4:	60fb      	str	r3, [r7, #12]
}
 80079d6:	bf00      	nop
 80079d8:	e7fe      	b.n	80079d8 <prvDeleteTCB+0x58>
	}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <prvResetNextTaskUnblockTime+0x38>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079f4:	4b0a      	ldr	r3, [pc, #40]	; (8007a20 <prvResetNextTaskUnblockTime+0x3c>)
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295
 80079fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079fc:	e008      	b.n	8007a10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079fe:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <prvResetNextTaskUnblockTime+0x38>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4a04      	ldr	r2, [pc, #16]	; (8007a20 <prvResetNextTaskUnblockTime+0x3c>)
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000bf8 	.word	0x20000bf8
 8007a20:	20000c60 	.word	0x20000c60

08007a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a2a:	4b0b      	ldr	r3, [pc, #44]	; (8007a58 <xTaskGetSchedulerState+0x34>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a32:	2301      	movs	r3, #1
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	e008      	b.n	8007a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a38:	4b08      	ldr	r3, [pc, #32]	; (8007a5c <xTaskGetSchedulerState+0x38>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a40:	2302      	movs	r3, #2
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e001      	b.n	8007a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a4a:	687b      	ldr	r3, [r7, #4]
	}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	20000c4c 	.word	0x20000c4c
 8007a5c:	20000c68 	.word	0x20000c68

08007a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d072      	beq.n	8007b5c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a76:	4b3c      	ldr	r3, [pc, #240]	; (8007b68 <xTaskPriorityDisinherit+0x108>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d00c      	beq.n	8007a9a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	b672      	cpsid	i
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	b662      	cpsie	i
 8007a94:	60fb      	str	r3, [r7, #12]
}
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10c      	bne.n	8007abc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	b672      	cpsid	i
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	b662      	cpsie	i
 8007ab6:	60bb      	str	r3, [r7, #8]
}
 8007ab8:	bf00      	nop
 8007aba:	e7fe      	b.n	8007aba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac0:	1e5a      	subs	r2, r3, #1
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d044      	beq.n	8007b5c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d140      	bne.n	8007b5c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fe fdc5 	bl	800666e <uxListRemove>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d115      	bne.n	8007b16 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aee:	491f      	ldr	r1, [pc, #124]	; (8007b6c <xTaskPriorityDisinherit+0x10c>)
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <xTaskPriorityDisinherit+0xb6>
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	2201      	movs	r2, #1
 8007b06:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <xTaskPriorityDisinherit+0x110>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4013      	ands	r3, r2
 8007b12:	4a17      	ldr	r2, [pc, #92]	; (8007b70 <xTaskPriorityDisinherit+0x110>)
 8007b14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	f1c3 0207 	rsb	r2, r3, #7
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	2201      	movs	r2, #1
 8007b30:	409a      	lsls	r2, r3
 8007b32:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <xTaskPriorityDisinherit+0x110>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	4a0d      	ldr	r2, [pc, #52]	; (8007b70 <xTaskPriorityDisinherit+0x110>)
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <xTaskPriorityDisinherit+0x10c>)
 8007b4a:	441a      	add	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3304      	adds	r3, #4
 8007b50:	4619      	mov	r1, r3
 8007b52:	4610      	mov	r0, r2
 8007b54:	f7fe fd2e 	bl	80065b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b5c:	697b      	ldr	r3, [r7, #20]
	}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000b40 	.word	0x20000b40
 8007b6c:	20000b44 	.word	0x20000b44
 8007b70:	20000c48 	.word	0x20000c48

08007b74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b7e:	4b29      	ldr	r3, [pc, #164]	; (8007c24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fd6f 	bl	800666e <uxListRemove>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007b96:	4b24      	ldr	r3, [pc, #144]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	4b21      	ldr	r3, [pc, #132]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4013      	ands	r3, r2
 8007baa:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007bac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d10a      	bne.n	8007bcc <prvAddCurrentTaskToDelayedList+0x58>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d007      	beq.n	8007bcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bbc:	4b1a      	ldr	r3, [pc, #104]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	481a      	ldr	r0, [pc, #104]	; (8007c30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007bc6:	f7fe fcf5 	bl	80065b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bca:	e026      	b.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d209      	bcs.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	4b0f      	ldr	r3, [pc, #60]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3304      	adds	r3, #4
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f7fe fd03 	bl	80065fc <vListInsert>
}
 8007bf6:	e010      	b.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bf8:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fe fcf9 	bl	80065fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d202      	bcs.n	8007c1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c14:	4a09      	ldr	r2, [pc, #36]	; (8007c3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	6013      	str	r3, [r2, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	bf00      	nop
 8007c24:	20000c44 	.word	0x20000c44
 8007c28:	20000b40 	.word	0x20000b40
 8007c2c:	20000c48 	.word	0x20000c48
 8007c30:	20000c2c 	.word	0x20000c2c
 8007c34:	20000bfc 	.word	0x20000bfc
 8007c38:	20000bf8 	.word	0x20000bf8
 8007c3c:	20000c60 	.word	0x20000c60

08007c40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	3b04      	subs	r3, #4
 8007c50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3b04      	subs	r3, #4
 8007c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f023 0201 	bic.w	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3b04      	subs	r3, #4
 8007c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c70:	4a0c      	ldr	r2, [pc, #48]	; (8007ca4 <pxPortInitialiseStack+0x64>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b14      	subs	r3, #20
 8007c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f06f 0202 	mvn.w	r2, #2
 8007c8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3b20      	subs	r3, #32
 8007c94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c96:	68fb      	ldr	r3, [r7, #12]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	08007ca9 	.word	0x08007ca9

08007ca8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cb2:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <prvTaskExitError+0x5c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d00c      	beq.n	8007cd6 <prvTaskExitError+0x2e>
	__asm volatile
 8007cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc0:	b672      	cpsid	i
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	b662      	cpsie	i
 8007cd0:	60fb      	str	r3, [r7, #12]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <prvTaskExitError+0x2c>
	__asm volatile
 8007cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cda:	b672      	cpsid	i
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	b662      	cpsie	i
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cee:	bf00      	nop
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0fc      	beq.n	8007cf0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007cf6:	bf00      	nop
 8007cf8:	bf00      	nop
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	20000014 	.word	0x20000014
	...

08007d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <pxCurrentTCBConst2>)
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	f380 8809 	msr	PSP, r0
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	4770      	bx	lr
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst2>:
 8007d30:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d38:	4808      	ldr	r0, [pc, #32]	; (8007d5c <prvPortStartFirstTask+0x24>)
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f380 8808 	msr	MSP, r0
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8814 	msr	CONTROL, r0
 8007d4a:	b662      	cpsie	i
 8007d4c:	b661      	cpsie	f
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	df00      	svc	0
 8007d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d5a:	bf00      	nop
 8007d5c:	e000ed08 	.word	0xe000ed08

08007d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d66:	4b37      	ldr	r3, [pc, #220]	; (8007e44 <xPortStartScheduler+0xe4>)
 8007d68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	22ff      	movs	r2, #255	; 0xff
 8007d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d80:	78fb      	ldrb	r3, [r7, #3]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	4b2f      	ldr	r3, [pc, #188]	; (8007e48 <xPortStartScheduler+0xe8>)
 8007d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d8e:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <xPortStartScheduler+0xec>)
 8007d90:	2207      	movs	r2, #7
 8007d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d94:	e009      	b.n	8007daa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d96:	4b2d      	ldr	r3, [pc, #180]	; (8007e4c <xPortStartScheduler+0xec>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	4a2b      	ldr	r2, [pc, #172]	; (8007e4c <xPortStartScheduler+0xec>)
 8007d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007da0:	78fb      	ldrb	r3, [r7, #3]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007db2:	2b80      	cmp	r3, #128	; 0x80
 8007db4:	d0ef      	beq.n	8007d96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007db6:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <xPortStartScheduler+0xec>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1c3 0307 	rsb	r3, r3, #7
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d00c      	beq.n	8007ddc <xPortStartScheduler+0x7c>
	__asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	b672      	cpsid	i
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	b662      	cpsie	i
 8007dd6:	60bb      	str	r3, [r7, #8]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ddc:	4b1b      	ldr	r3, [pc, #108]	; (8007e4c <xPortStartScheduler+0xec>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	4a1a      	ldr	r2, [pc, #104]	; (8007e4c <xPortStartScheduler+0xec>)
 8007de4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007de6:	4b19      	ldr	r3, [pc, #100]	; (8007e4c <xPortStartScheduler+0xec>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dee:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <xPortStartScheduler+0xec>)
 8007df0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <xPortStartScheduler+0xf0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <xPortStartScheduler+0xf0>)
 8007e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <xPortStartScheduler+0xf0>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a11      	ldr	r2, [pc, #68]	; (8007e50 <xPortStartScheduler+0xf0>)
 8007e0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e12:	f000 f8dd 	bl	8007fd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <xPortStartScheduler+0xf4>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e1c:	f000 f8fc 	bl	8008018 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e20:	4b0d      	ldr	r3, [pc, #52]	; (8007e58 <xPortStartScheduler+0xf8>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a0c      	ldr	r2, [pc, #48]	; (8007e58 <xPortStartScheduler+0xf8>)
 8007e26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e2c:	f7ff ff84 	bl	8007d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e30:	f7ff fbb0 	bl	8007594 <vTaskSwitchContext>
	prvTaskExitError();
 8007e34:	f7ff ff38 	bl	8007ca8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	e000e400 	.word	0xe000e400
 8007e48:	20000c6c 	.word	0x20000c6c
 8007e4c:	20000c70 	.word	0x20000c70
 8007e50:	e000ed20 	.word	0xe000ed20
 8007e54:	20000014 	.word	0x20000014
 8007e58:	e000ef34 	.word	0xe000ef34

08007e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	b672      	cpsid	i
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	b662      	cpsie	i
 8007e76:	607b      	str	r3, [r7, #4]
}
 8007e78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e7a:	4b10      	ldr	r3, [pc, #64]	; (8007ebc <vPortEnterCritical+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	4a0e      	ldr	r2, [pc, #56]	; (8007ebc <vPortEnterCritical+0x60>)
 8007e82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e84:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <vPortEnterCritical+0x60>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d111      	bne.n	8007eb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e8c:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <vPortEnterCritical+0x64>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00c      	beq.n	8007eb0 <vPortEnterCritical+0x54>
	__asm volatile
 8007e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9a:	b672      	cpsid	i
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	b662      	cpsie	i
 8007eaa:	603b      	str	r3, [r7, #0]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <vPortEnterCritical+0x52>
	}
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	20000014 	.word	0x20000014
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007eca:	4b13      	ldr	r3, [pc, #76]	; (8007f18 <vPortExitCritical+0x54>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10c      	bne.n	8007eec <vPortExitCritical+0x28>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	b672      	cpsid	i
 8007ed8:	f383 8811 	msr	BASEPRI, r3
 8007edc:	f3bf 8f6f 	isb	sy
 8007ee0:	f3bf 8f4f 	dsb	sy
 8007ee4:	b662      	cpsie	i
 8007ee6:	607b      	str	r3, [r7, #4]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	; (8007f18 <vPortExitCritical+0x54>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <vPortExitCritical+0x54>)
 8007ef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ef6:	4b08      	ldr	r3, [pc, #32]	; (8007f18 <vPortExitCritical+0x54>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d105      	bne.n	8007f0a <vPortExitCritical+0x46>
 8007efe:	2300      	movs	r3, #0
 8007f00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	f383 8811 	msr	BASEPRI, r3
}
 8007f08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f0a:	bf00      	nop
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	20000014 	.word	0x20000014
 8007f1c:	00000000 	.word	0x00000000

08007f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f20:	f3ef 8009 	mrs	r0, PSP
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	4b15      	ldr	r3, [pc, #84]	; (8007f80 <pxCurrentTCBConst>)
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	f01e 0f10 	tst.w	lr, #16
 8007f30:	bf08      	it	eq
 8007f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	6010      	str	r0, [r2, #0]
 8007f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007f44:	b672      	cpsid	i
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	b662      	cpsie	i
 8007f54:	f7ff fb1e 	bl	8007594 <vTaskSwitchContext>
 8007f58:	f04f 0000 	mov.w	r0, #0
 8007f5c:	f380 8811 	msr	BASEPRI, r0
 8007f60:	bc09      	pop	{r0, r3}
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f01e 0f10 	tst.w	lr, #16
 8007f6e:	bf08      	it	eq
 8007f70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f74:	f380 8809 	msr	PSP, r0
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop

08007f80 <pxCurrentTCBConst>:
 8007f80:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	607b      	str	r3, [r7, #4]
}
 8007fa4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007fa6:	f7ff fa3b 	bl	8007420 <xTaskIncrementTick>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007fb0:	4b06      	ldr	r3, [pc, #24]	; (8007fcc <SysTick_Handler+0x44>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f383 8811 	msr	BASEPRI, r3
}
 8007fc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	e000ed04 	.word	0xe000ed04

08007fd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <vPortSetupTimerInterrupt+0x34>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fda:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <vPortSetupTimerInterrupt+0x38>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <vPortSetupTimerInterrupt+0x3c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a0a      	ldr	r2, [pc, #40]	; (8008010 <vPortSetupTimerInterrupt+0x40>)
 8007fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fea:	099b      	lsrs	r3, r3, #6
 8007fec:	4a09      	ldr	r2, [pc, #36]	; (8008014 <vPortSetupTimerInterrupt+0x44>)
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <vPortSetupTimerInterrupt+0x34>)
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	601a      	str	r2, [r3, #0]
}
 8007ff8:	bf00      	nop
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	e000e010 	.word	0xe000e010
 8008008:	e000e018 	.word	0xe000e018
 800800c:	20000008 	.word	0x20000008
 8008010:	10624dd3 	.word	0x10624dd3
 8008014:	e000e014 	.word	0xe000e014

08008018 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008018:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008028 <vPortEnableVFP+0x10>
 800801c:	6801      	ldr	r1, [r0, #0]
 800801e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008022:	6001      	str	r1, [r0, #0]
 8008024:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008026:	bf00      	nop
 8008028:	e000ed88 	.word	0xe000ed88

0800802c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008032:	f3ef 8305 	mrs	r3, IPSR
 8008036:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b0f      	cmp	r3, #15
 800803c:	d916      	bls.n	800806c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800803e:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <vPortValidateInterruptPriority+0x78>)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008048:	4b17      	ldr	r3, [pc, #92]	; (80080a8 <vPortValidateInterruptPriority+0x7c>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	7afa      	ldrb	r2, [r7, #11]
 800804e:	429a      	cmp	r2, r3
 8008050:	d20c      	bcs.n	800806c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	b672      	cpsid	i
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	b662      	cpsie	i
 8008066:	607b      	str	r3, [r7, #4]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800806c:	4b0f      	ldr	r3, [pc, #60]	; (80080ac <vPortValidateInterruptPriority+0x80>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008074:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <vPortValidateInterruptPriority+0x84>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d90c      	bls.n	8008096 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	b672      	cpsid	i
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	b662      	cpsie	i
 8008090:	603b      	str	r3, [r7, #0]
}
 8008092:	bf00      	nop
 8008094:	e7fe      	b.n	8008094 <vPortValidateInterruptPriority+0x68>
	}
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	e000e3f0 	.word	0xe000e3f0
 80080a8:	20000c6c 	.word	0x20000c6c
 80080ac:	e000ed0c 	.word	0xe000ed0c
 80080b0:	20000c70 	.word	0x20000c70

080080b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080bc:	2300      	movs	r3, #0
 80080be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080c0:	f7ff f902 	bl	80072c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080c4:	4b5b      	ldr	r3, [pc, #364]	; (8008234 <pvPortMalloc+0x180>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d101      	bne.n	80080d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080cc:	f000 f91a 	bl	8008304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080d0:	4b59      	ldr	r3, [pc, #356]	; (8008238 <pvPortMalloc+0x184>)
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 8092 	bne.w	8008202 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01f      	beq.n	8008124 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80080e4:	2208      	movs	r2, #8
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4413      	add	r3, r2
 80080ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f003 0307 	and.w	r3, r3, #7
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d016      	beq.n	8008124 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	3308      	adds	r3, #8
 80080fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <pvPortMalloc+0x70>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	b672      	cpsid	i
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	b662      	cpsie	i
 800811e:	617b      	str	r3, [r7, #20]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d06b      	beq.n	8008202 <pvPortMalloc+0x14e>
 800812a:	4b44      	ldr	r3, [pc, #272]	; (800823c <pvPortMalloc+0x188>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d866      	bhi.n	8008202 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008134:	4b42      	ldr	r3, [pc, #264]	; (8008240 <pvPortMalloc+0x18c>)
 8008136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008138:	4b41      	ldr	r3, [pc, #260]	; (8008240 <pvPortMalloc+0x18c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800813e:	e004      	b.n	800814a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	429a      	cmp	r2, r3
 8008152:	d903      	bls.n	800815c <pvPortMalloc+0xa8>
 8008154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f1      	bne.n	8008140 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800815c:	4b35      	ldr	r3, [pc, #212]	; (8008234 <pvPortMalloc+0x180>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008162:	429a      	cmp	r2, r3
 8008164:	d04d      	beq.n	8008202 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008166:	6a3b      	ldr	r3, [r7, #32]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2208      	movs	r2, #8
 800816c:	4413      	add	r3, r2
 800816e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	2308      	movs	r3, #8
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	429a      	cmp	r2, r3
 8008186:	d921      	bls.n	80081cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4413      	add	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00c      	beq.n	80081b4 <pvPortMalloc+0x100>
	__asm volatile
 800819a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819e:	b672      	cpsid	i
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	b662      	cpsie	i
 80081ae:	613b      	str	r3, [r7, #16]
}
 80081b0:	bf00      	nop
 80081b2:	e7fe      	b.n	80081b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f000 f8fe 	bl	80083c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081cc:	4b1b      	ldr	r3, [pc, #108]	; (800823c <pvPortMalloc+0x188>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	4a19      	ldr	r2, [pc, #100]	; (800823c <pvPortMalloc+0x188>)
 80081d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081da:	4b18      	ldr	r3, [pc, #96]	; (800823c <pvPortMalloc+0x188>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b19      	ldr	r3, [pc, #100]	; (8008244 <pvPortMalloc+0x190>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d203      	bcs.n	80081ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081e6:	4b15      	ldr	r3, [pc, #84]	; (800823c <pvPortMalloc+0x188>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a16      	ldr	r2, [pc, #88]	; (8008244 <pvPortMalloc+0x190>)
 80081ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	4b11      	ldr	r3, [pc, #68]	; (8008238 <pvPortMalloc+0x184>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008202:	f7ff f86f 	bl	80072e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f003 0307 	and.w	r3, r3, #7
 800820c:	2b00      	cmp	r3, #0
 800820e:	d00c      	beq.n	800822a <pvPortMalloc+0x176>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	b672      	cpsid	i
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	b662      	cpsie	i
 8008224:	60fb      	str	r3, [r7, #12]
}
 8008226:	bf00      	nop
 8008228:	e7fe      	b.n	8008228 <pvPortMalloc+0x174>
	return pvReturn;
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3728      	adds	r7, #40	; 0x28
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	2000487c 	.word	0x2000487c
 8008238:	20004888 	.word	0x20004888
 800823c:	20004880 	.word	0x20004880
 8008240:	20004874 	.word	0x20004874
 8008244:	20004884 	.word	0x20004884

08008248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d04c      	beq.n	80082f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800825a:	2308      	movs	r3, #8
 800825c:	425b      	negs	r3, r3
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4413      	add	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	4b23      	ldr	r3, [pc, #140]	; (80082fc <vPortFree+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10c      	bne.n	8008290 <vPortFree+0x48>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	b672      	cpsid	i
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	b662      	cpsie	i
 800828a:	60fb      	str	r3, [r7, #12]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00c      	beq.n	80082b2 <vPortFree+0x6a>
	__asm volatile
 8008298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829c:	b672      	cpsid	i
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	b662      	cpsie	i
 80082ac:	60bb      	str	r3, [r7, #8]
}
 80082ae:	bf00      	nop
 80082b0:	e7fe      	b.n	80082b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	685a      	ldr	r2, [r3, #4]
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <vPortFree+0xb4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d019      	beq.n	80082f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d115      	bne.n	80082f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	4b0b      	ldr	r3, [pc, #44]	; (80082fc <vPortFree+0xb4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	401a      	ands	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d8:	f7fe fff6 	bl	80072c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	685a      	ldr	r2, [r3, #4]
 80082e0:	4b07      	ldr	r3, [pc, #28]	; (8008300 <vPortFree+0xb8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4413      	add	r3, r2
 80082e6:	4a06      	ldr	r2, [pc, #24]	; (8008300 <vPortFree+0xb8>)
 80082e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f000 f86c 	bl	80083c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80082f0:	f7fe fff8 	bl	80072e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f4:	bf00      	nop
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20004888 	.word	0x20004888
 8008300:	20004880 	.word	0x20004880

08008304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800830a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800830e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <prvHeapInit+0xac>)
 8008312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3307      	adds	r3, #7
 8008322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0307 	bic.w	r3, r3, #7
 800832a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <prvHeapInit+0xac>)
 8008334:	4413      	add	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800833c:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <prvHeapInit+0xb0>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008342:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <prvHeapInit+0xb0>)
 8008344:	2200      	movs	r2, #0
 8008346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	4413      	add	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008350:	2208      	movs	r2, #8
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0307 	bic.w	r3, r3, #7
 800835e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4a15      	ldr	r2, [pc, #84]	; (80083b8 <prvHeapInit+0xb4>)
 8008364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008366:	4b14      	ldr	r3, [pc, #80]	; (80083b8 <prvHeapInit+0xb4>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2200      	movs	r2, #0
 800836c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <prvHeapInit+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <prvHeapInit+0xb4>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4a0a      	ldr	r2, [pc, #40]	; (80083bc <prvHeapInit+0xb8>)
 8008392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <prvHeapInit+0xbc>)
 800839a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <prvHeapInit+0xc0>)
 800839e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000c74 	.word	0x20000c74
 80083b4:	20004874 	.word	0x20004874
 80083b8:	2000487c 	.word	0x2000487c
 80083bc:	20004884 	.word	0x20004884
 80083c0:	20004880 	.word	0x20004880
 80083c4:	20004888 	.word	0x20004888

080083c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <prvInsertBlockIntoFreeList+0xac>)
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e002      	b.n	80083dc <prvInsertBlockIntoFreeList+0x14>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d8f7      	bhi.n	80083d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d108      	bne.n	800840a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	441a      	add	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	441a      	add	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	429a      	cmp	r2, r3
 800841c:	d118      	bne.n	8008450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4b15      	ldr	r3, [pc, #84]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d00d      	beq.n	8008446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685a      	ldr	r2, [r3, #4]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	441a      	add	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e008      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008446:	4b0c      	ldr	r3, [pc, #48]	; (8008478 <prvInsertBlockIntoFreeList+0xb0>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e003      	b.n	8008458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d002      	beq.n	8008466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008466:	bf00      	nop
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20004874 	.word	0x20004874
 8008478:	2000487c 	.word	0x2000487c

0800847c <memset>:
 800847c:	4402      	add	r2, r0
 800847e:	4603      	mov	r3, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <__libc_init_array>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4d0d      	ldr	r5, [pc, #52]	; (80084c4 <__libc_init_array+0x38>)
 8008490:	4c0d      	ldr	r4, [pc, #52]	; (80084c8 <__libc_init_array+0x3c>)
 8008492:	1b64      	subs	r4, r4, r5
 8008494:	10a4      	asrs	r4, r4, #2
 8008496:	2600      	movs	r6, #0
 8008498:	42a6      	cmp	r6, r4
 800849a:	d109      	bne.n	80084b0 <__libc_init_array+0x24>
 800849c:	4d0b      	ldr	r5, [pc, #44]	; (80084cc <__libc_init_array+0x40>)
 800849e:	4c0c      	ldr	r4, [pc, #48]	; (80084d0 <__libc_init_array+0x44>)
 80084a0:	f000 f826 	bl	80084f0 <_init>
 80084a4:	1b64      	subs	r4, r4, r5
 80084a6:	10a4      	asrs	r4, r4, #2
 80084a8:	2600      	movs	r6, #0
 80084aa:	42a6      	cmp	r6, r4
 80084ac:	d105      	bne.n	80084ba <__libc_init_array+0x2e>
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b4:	4798      	blx	r3
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7ee      	b.n	8008498 <__libc_init_array+0xc>
 80084ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80084be:	4798      	blx	r3
 80084c0:	3601      	adds	r6, #1
 80084c2:	e7f2      	b.n	80084aa <__libc_init_array+0x1e>
 80084c4:	0800858c 	.word	0x0800858c
 80084c8:	0800858c 	.word	0x0800858c
 80084cc:	0800858c 	.word	0x0800858c
 80084d0:	08008590 	.word	0x08008590

080084d4 <memcpy>:
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	4770      	bx	lr
 80084e0:	b510      	push	{r4, lr}
 80084e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ea:	4291      	cmp	r1, r2
 80084ec:	d1f9      	bne.n	80084e2 <memcpy+0xe>
 80084ee:	bd10      	pop	{r4, pc}

080084f0 <_init>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr

080084fc <_fini>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	bf00      	nop
 8008500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008502:	bc08      	pop	{r3}
 8008504:	469e      	mov	lr, r3
 8008506:	4770      	bx	lr
