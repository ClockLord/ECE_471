
ECE471_Hw5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca4  08006ca4  00016ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cac  08006cac  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cac  08006cac  00016cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000010  08006cc4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000b0  08006d64  000200b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000046b0  20000150  08006e04  00020150  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004800  08006e04  00024800  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001c8a9  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003b11  00000000  00000000  0003ca6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017e0  00000000  00000000  00040580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001295  00000000  00000000  00041d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002960b  00000000  00000000  00042ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001be11  00000000  00000000  0006c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001012e7  00000000  00000000  00088411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006570  00000000  00000000  001896f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0018fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000150 	.word	0x20000150
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b70 	.word	0x08006b70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000154 	.word	0x20000154
 800020c:	08006b70 	.word	0x08006b70

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000016c 	.word	0x2000016c
 800053c:	200001c0 	.word	0x200001c0

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b5b0      	push	{r4, r5, r7, lr}
 8000542:	b0b2      	sub	sp, #200	; 0xc8
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fd98 	bl	800107a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8b9 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f9cb 	bl	80008e8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000552:	f000 f91d 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000556:	f000 f969 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055a:	f000 f997 	bl	800088c <MX_USB_OTG_FS_PCD_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Switch */
  osMessageQDef(Switch, 5, uint8_t);
 800055e:	4b48      	ldr	r3, [pc, #288]	; (8000680 <main+0x140>)
 8000560:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SwitchHandle = osMessageCreate(osMessageQ(Switch), NULL);
 800056a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f004 f8b4 	bl	80046de <osMessageCreate>
 8000576:	4603      	mov	r3, r0
 8000578:	4a42      	ldr	r2, [pc, #264]	; (8000684 <main+0x144>)
 800057a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Throttle */
  osMessageQDef(Throttle, 5, uint16_t);
 800057c:	4b42      	ldr	r3, [pc, #264]	; (8000688 <main+0x148>)
 800057e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ThrottleHandle = osMessageCreate(osMessageQ(Throttle), NULL);
 8000588:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f8a5 	bl	80046de <osMessageCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a3d      	ldr	r2, [pc, #244]	; (800068c <main+0x14c>)
 8000598:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <main+0x150>)
 800059c:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f832 	bl	800461e <osThreadCreate>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a35      	ldr	r2, [pc, #212]	; (8000694 <main+0x154>)
 80005be:	6013      	str	r3, [r2, #0]

  /* definition and creation of alive */
  osThreadDef(alive, alive_init, osPriorityBelowNormal, 0, 128);
 80005c0:	4b35      	ldr	r3, [pc, #212]	; (8000698 <main+0x158>)
 80005c2:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  aliveHandle = osThreadCreate(osThread(alive), NULL);
 80005d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f81f 	bl	800461e <osThreadCreate>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a2e      	ldr	r2, [pc, #184]	; (800069c <main+0x15c>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of button */
  osThreadDef(button, button_init, osPriorityNormal, 0, 128);
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x160>)
 80005e8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonHandle = osThreadCreate(osThread(button), NULL);
 80005fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f004 f80c 	bl	800461e <osThreadCreate>
 8000606:	4603      	mov	r3, r0
 8000608:	4a26      	ldr	r2, [pc, #152]	; (80006a4 <main+0x164>)
 800060a:	6013      	str	r3, [r2, #0]

  /* definition and creation of light */
  osThreadDef(light, light_init, osPriorityAboveNormal, 0, 128);
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <main+0x168>)
 800060e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lightHandle = osThreadCreate(osThread(light), NULL);
 8000620:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fff9 	bl	800461e <osThreadCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <main+0x16c>)
 8000630:	6013      	str	r3, [r2, #0]

  /* definition and creation of analog */
  osThreadDef(analog, analog_init, osPriorityAboveNormal, 0, 128);
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <main+0x170>)
 8000634:	f107 041c 	add.w	r4, r7, #28
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  analogHandle = osThreadCreate(osThread(analog), NULL);
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f003 ffe6 	bl	800461e <osThreadCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <main+0x174>)
 8000656:	6013      	str	r3, [r2, #0]

  /* definition and creation of control */
  osThreadDef(control, control_init, osPriorityHigh, 0, 128);
 8000658:	4b17      	ldr	r3, [pc, #92]	; (80006b8 <main+0x178>)
 800065a:	463c      	mov	r4, r7
 800065c:	461d      	mov	r5, r3
 800065e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000660:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000662:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000666:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlHandle = osThreadCreate(osThread(control), NULL);
 800066a:	463b      	mov	r3, r7
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 ffd5 	bl	800461e <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <main+0x17c>)
 8000678:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800067a:	f003 ffc9 	bl	8004610 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067e:	e7fe      	b.n	800067e <main+0x13e>
 8000680:	08006b88 	.word	0x08006b88
 8000684:	20000a50 	.word	0x20000a50
 8000688:	08006b98 	.word	0x08006b98
 800068c:	20000a54 	.word	0x20000a54
 8000690:	08006bb4 	.word	0x08006bb4
 8000694:	20000a38 	.word	0x20000a38
 8000698:	08006bd8 	.word	0x08006bd8
 800069c:	20000a3c 	.word	0x20000a3c
 80006a0:	08006bfc 	.word	0x08006bfc
 80006a4:	20000a40 	.word	0x20000a40
 80006a8:	08006c20 	.word	0x08006c20
 80006ac:	20000a44 	.word	0x20000a44
 80006b0:	08006c44 	.word	0x08006c44
 80006b4:	20000a48 	.word	0x20000a48
 80006b8:	08006c68 	.word	0x08006c68
 80006bc:	20000a4c 	.word	0x20000a4c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fa14 	bl	8006afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e4:	f001 fc48 	bl	8001f78 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemClock_Config+0xc8>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <SystemClock_Config+0xc8>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <SystemClock_Config+0xcc>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <SystemClock_Config+0xcc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000720:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000730:	2304      	movs	r3, #4
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000734:	2348      	movs	r3, #72	; 0x48
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800073c:	2303      	movs	r3, #3
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fc27 	bl	8001f98 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 fa08 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2102      	movs	r1, #2
 8000770:	4618      	mov	r0, r3
 8000772:	f001 feb5 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800077c:	f000 f9f2 	bl	8000b64 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3750      	adds	r7, #80	; 0x50
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ETH_Init+0x84>)
 8000796:	4a20      	ldr	r2, [pc, #128]	; (8000818 <MX_ETH_Init+0x88>)
 8000798:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <MX_ETH_Init+0x8c>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_ETH_Init+0x8c>)
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_ETH_Init+0x8c>)
 80007a8:	22e1      	movs	r2, #225	; 0xe1
 80007aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_ETH_Init+0x8c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_ETH_Init+0x8c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_ETH_Init+0x8c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ETH_Init+0x84>)
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_ETH_Init+0x8c>)
 80007c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ETH_Init+0x84>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ETH_Init+0x84>)
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <MX_ETH_Init+0x90>)
 80007d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ETH_Init+0x84>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_ETH_Init+0x94>)
 80007d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ETH_Init+0x84>)
 80007da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <MX_ETH_Init+0x84>)
 80007e2:	f000 fd7d 	bl	80012e0 <HAL_ETH_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007ec:	f000 f9ba 	bl	8000b64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007f0:	2238      	movs	r2, #56	; 0x38
 80007f2:	2100      	movs	r1, #0
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_ETH_Init+0x98>)
 80007f6:	f006 f981 	bl	8006afc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_ETH_Init+0x98>)
 80007fc:	2221      	movs	r2, #33	; 0x21
 80007fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_ETH_Init+0x98>)
 8000802:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000806:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_ETH_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200003f8 	.word	0x200003f8
 8000818:	40028000 	.word	0x40028000
 800081c:	20000a5c 	.word	0x20000a5c
 8000820:	200000b0 	.word	0x200000b0
 8000824:	20000010 	.word	0x20000010
 8000828:	200003c0 	.word	0x200003c0

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_USART3_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART3_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART3_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART3_UART_Init+0x58>)
 8000870:	f002 ff5e 	bl	8003730 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f973 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200004a8 	.word	0x200004a8
 8000888:	40004800 	.word	0x40004800

0800088c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000896:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2206      	movs	r2, #6
 800089c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2202      	movs	r2, #2
 80008ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	f001 fa09 	bl	8001ce6 <HAL_PCD_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f943 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000530 	.word	0x20000530

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08c      	sub	sp, #48	; 0x30
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fe:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a46      	ldr	r2, [pc, #280]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b44      	ldr	r3, [pc, #272]	; (8000a1c <MX_GPIO_Init+0x134>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	4b41      	ldr	r3, [pc, #260]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a40      	ldr	r2, [pc, #256]	; (8000a1c <MX_GPIO_Init+0x134>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a3a      	ldr	r2, [pc, #232]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <MX_GPIO_Init+0x134>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <MX_GPIO_Init+0x134>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a2e      	ldr	r2, [pc, #184]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000964:	f043 0308 	orr.w	r3, r3, #8
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_GPIO_Init+0x134>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0308 	and.w	r3, r3, #8
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a28      	ldr	r2, [pc, #160]	; (8000a1c <MX_GPIO_Init+0x134>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_GPIO_Init+0x134>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f244 0181 	movw	r1, #16513	; 0x4081
 8000994:	4822      	ldr	r0, [pc, #136]	; (8000a20 <MX_GPIO_Init+0x138>)
 8000996:	f001 f98d 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2140      	movs	r1, #64	; 0x40
 800099e:	4821      	ldr	r0, [pc, #132]	; (8000a24 <MX_GPIO_Init+0x13c>)
 80009a0:	f001 f988 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	481b      	ldr	r0, [pc, #108]	; (8000a28 <MX_GPIO_Init+0x140>)
 80009bc:	f000 ffb6 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_GPIO_Init+0x138>)
 80009da:	f000 ffa7 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <MX_GPIO_Init+0x13c>)
 80009f6:	f000 ff99 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_GPIO_Init+0x13c>)
 8000a0e:	f000 ff8d 	bl	800192c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800

08000a2c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f003 fe3e 	bl	80046b6 <osDelay>
 8000a3a:	e7fb      	b.n	8000a34 <StartDefaultTask+0x8>

08000a3c <alive_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_alive_init */
void alive_init(void const * argument)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;) //1000 = 1 sec
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <alive_init+0x34>)
 8000a4c:	f001 f932 	bl	8001cb4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a54:	f003 fe2f 	bl	80046b6 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //red
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5e:	4804      	ldr	r0, [pc, #16]	; (8000a70 <alive_init+0x34>)
 8000a60:	f001 f928 	bl	8001cb4 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000a64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a68:	f003 fe25 	bl	80046b6 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //red
 8000a6c:	e7ea      	b.n	8000a44 <alive_init+0x8>
 8000a6e:	bf00      	nop
 8000a70:	40020400 	.word	0x40020400

08000a74 <button_init>:
*/
/* USER CODE END Header_button_init */

static bool Toggle = false;
void button_init(void const * argument)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN button_init */
  /* Infinite loop */
  for(;;)
  {
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <button_init+0x44>)
 8000a82:	f001 f8ff 	bl	8001c84 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d103      	bne.n	8000a94 <button_init+0x20>
		Toggle = true;
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <button_init+0x48>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <button_init+0x26>

	}
	else{
		Toggle = false;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <button_init+0x48>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	}
	osStatus status = osMessagePut(SwitchHandle, Toggle, osWaitForever);
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <button_init+0x4c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <button_init+0x48>)
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 fe41 	bl	8004730 <osMessagePut>
 8000aae:	60f8      	str	r0, [r7, #12]
    osDelay(10);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f003 fe00 	bl	80046b6 <osDelay>
  {
 8000ab6:	e7e1      	b.n	8000a7c <button_init+0x8>
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	20000a58 	.word	0x20000a58
 8000ac0:	20000a50 	.word	0x20000a50

08000ac4 <light_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_light_init */
void light_init(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN light_init */
  /* Infinite loop */
  for(;;)
  {
	osEvent messageEvent = osMessageGet(SwitchHandle, osWaitForever);
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <light_init+0x50>)
 8000ace:	6819      	ldr	r1, [r3, #0]
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f003 fe69 	bl	80047b0 <osMessageGet>
	Toggle = (bool)messageEvent.value.p;
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bf14      	ite	ne
 8000ae4:	2301      	movne	r3, #1
 8000ae6:	2300      	moveq	r3, #0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <light_init+0x54>)
 8000aec:	701a      	strb	r2, [r3, #0]

	if(Toggle){
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <light_init+0x54>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <light_init+0x3e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //green
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	4808      	ldr	r0, [pc, #32]	; (8000b1c <light_init+0x58>)
 8000afc:	f001 f8da 	bl	8001cb4 <HAL_GPIO_WritePin>
 8000b00:	e004      	b.n	8000b0c <light_init+0x48>


	}
	else{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //green
 8000b02:	2200      	movs	r2, #0
 8000b04:	2101      	movs	r1, #1
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <light_init+0x58>)
 8000b08:	f001 f8d4 	bl	8001cb4 <HAL_GPIO_WritePin>

	}

    osDelay(1);
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f003 fdd2 	bl	80046b6 <osDelay>
  {
 8000b12:	e7db      	b.n	8000acc <light_init+0x8>
 8000b14:	20000a50 	.word	0x20000a50
 8000b18:	20000a58 	.word	0x20000a58
 8000b1c:	40020400 	.word	0x40020400

08000b20 <analog_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_analog_init */
void analog_init(void const * argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN analog_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f003 fdc4 	bl	80046b6 <osDelay>
 8000b2e:	e7fb      	b.n	8000b28 <analog_init+0x8>

08000b30 <control_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_control_init */
void control_init(void const * argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN control_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f003 fdbc 	bl	80046b6 <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <control_init+0x8>

08000b40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b52:	f000 fa9f 	bl	8001094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40010000 	.word	0x40010000

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	210f      	movs	r1, #15
 8000baa:	f06f 0001 	mvn.w	r0, #1
 8000bae:	f000 fb6d 	bl	800128c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a4e      	ldr	r2, [pc, #312]	; (8000d18 <HAL_ETH_MspInit+0x158>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	f040 8096 	bne.w	8000d10 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000be4:	4b4d      	ldr	r3, [pc, #308]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	4a4c      	ldr	r2, [pc, #304]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000bea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bee:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf8:	623b      	str	r3, [r7, #32]
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a46      	ldr	r2, [pc, #280]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b3e      	ldr	r3, [pc, #248]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	4a3a      	ldr	r2, [pc, #232]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
 8000c38:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	4b35      	ldr	r3, [pc, #212]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a34      	ldr	r2, [pc, #208]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c62:	f043 0302 	orr.w	r3, r3, #2
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <HAL_ETH_MspInit+0x15c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c8c:	2332      	movs	r3, #50	; 0x32
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	481e      	ldr	r0, [pc, #120]	; (8000d20 <HAL_ETH_MspInit+0x160>)
 8000ca8:	f000 fe40 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cac:	2386      	movs	r3, #134	; 0x86
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4817      	ldr	r0, [pc, #92]	; (8000d24 <HAL_ETH_MspInit+0x164>)
 8000cc8:	f000 fe30 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cde:	230b      	movs	r3, #11
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480f      	ldr	r0, [pc, #60]	; (8000d28 <HAL_ETH_MspInit+0x168>)
 8000cea:	f000 fe1f 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4808      	ldr	r0, [pc, #32]	; (8000d2c <HAL_ETH_MspInit+0x16c>)
 8000d0c:	f000 fe0e 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3738      	adds	r7, #56	; 0x38
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40028000 	.word	0x40028000
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400
 8000d2c:	40021800 	.word	0x40021800

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0aa      	sub	sp, #168	; 0xa8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2284      	movs	r2, #132	; 0x84
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f005 fed3 	bl	8006afc <memset>
  if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a22      	ldr	r2, [pc, #136]	; (8000de4 <HAL_UART_MspInit+0xb4>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13c      	bne.n	8000dda <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fe0e 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff fef3 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_UART_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0308 	and.w	r3, r3, #8
 8000daa:	60bb      	str	r3, [r7, #8]
 8000dac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_UART_MspInit+0xbc>)
 8000dd6:	f000 fda9 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	37a8      	adds	r7, #168	; 0xa8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004800 	.word	0x40004800
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020c00 	.word	0x40020c00

08000df0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ac      	sub	sp, #176	; 0xb0
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	2284      	movs	r2, #132	; 0x84
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 fe73 	bl	8006afc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e1e:	d159      	bne.n	8000ed4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fdad 	bl	8002990 <HAL_RCCEx_PeriphCLKConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e3c:	f7ff fe92 	bl	8000b64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b26      	ldr	r3, [pc, #152]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a25      	ldr	r2, [pc, #148]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e58:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e72:	230a      	movs	r3, #10
 8000e74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4818      	ldr	r0, [pc, #96]	; (8000ee0 <HAL_PCD_MspInit+0xf0>)
 8000e80:	f000 fd54 	bl	800192c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4810      	ldr	r0, [pc, #64]	; (8000ee0 <HAL_PCD_MspInit+0xf0>)
 8000ea0:	f000 fd44 	bl	800192c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eae:	6353      	str	r3, [r2, #52]	; 0x34
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <HAL_PCD_MspInit+0xec>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	37b0      	adds	r7, #176	; 0xb0
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	; (8000fb0 <HAL_InitTick+0xcc>)
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef8:	4a2d      	ldr	r2, [pc, #180]	; (8000fb0 <HAL_InitTick+0xcc>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6453      	str	r3, [r2, #68]	; 0x44
 8000f00:	4b2b      	ldr	r3, [pc, #172]	; (8000fb0 <HAL_InitTick+0xcc>)
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fd08 	bl	800292c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f1c:	f001 fcf2 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8000f20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f24:	4a23      	ldr	r2, [pc, #140]	; (8000fb4 <HAL_InitTick+0xd0>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f30:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f32:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <HAL_InitTick+0xd8>)
 8000f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f36:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f3e:	4a1e      	ldr	r2, [pc, #120]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f56:	4818      	ldr	r0, [pc, #96]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f58:	f002 f90a 	bl	8003170 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11b      	bne.n	8000fa2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <HAL_InitTick+0xd4>)
 8000f6c:	f002 f962 	bl	8003234 <HAL_TIM_Base_Start_IT>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d111      	bne.n	8000fa2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f7e:	2019      	movs	r0, #25
 8000f80:	f000 f9a0 	bl	80012c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	d808      	bhi.n	8000f9c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f000 f97c 	bl	800128c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f94:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_InitTick+0xdc>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e002      	b.n	8000fa2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3730      	adds	r7, #48	; 0x30
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	20000a64 	.word	0x20000a64
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ff6:	f002 f995 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000a64 	.word	0x20000a64

08001004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102e:	490e      	ldr	r1, [pc, #56]	; (8001068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001044:	4c0b      	ldr	r4, [pc, #44]	; (8001074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001052:	f7ff ffd7 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001056:	f005 fd59 	bl	8006b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105a:	f7ff fa71 	bl	8000540 <main>
  bx  lr    
 800105e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001060:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800106c:	08006cb4 	.word	0x08006cb4
  ldr r2, =_sbss
 8001070:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001074:	20004800 	.word	0x20004800

08001078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC_IRQHandler>

0800107a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107e:	2003      	movs	r0, #3
 8001080:	f000 f8f9 	bl	8001276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001084:	200f      	movs	r0, #15
 8001086:	f7ff ff2d 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108a:	f7ff fd71 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000ab0 	.word	0x20000ab0

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000ab0 	.word	0x20000ab0

080010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010dc:	f7ff ffee 	bl	80010bc <HAL_GetTick>
 80010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d005      	beq.n	80010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_Delay+0x44>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4413      	add	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fa:	bf00      	nop
 80010fc:	f7ff ffde 	bl	80010bc <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8f7      	bhi.n	80010fc <HAL_Delay+0x28>
  {
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	4313      	orrs	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x40>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00
 8001160:	05fa0000 	.word	0x05fa0000

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff4c 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129e:	f7ff ff61 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f7ff ffb1 	bl	8001210 <NVIC_EncodePriority>
 80012ae:	4602      	mov	r2, r0
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff80 	bl	80011bc <__NVIC_SetPriority>
}
 80012bc:	bf00      	nop
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff54 	bl	8001180 <__NVIC_EnableIRQ>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e06a      	b.n	80013c8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2223      	movs	r2, #35	; 0x23
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fc5b 	bl	8000bc0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <HAL_ETH_Init+0xf0>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a30      	ldr	r2, [pc, #192]	; (80013d0 <HAL_ETH_Init+0xf0>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_ETH_Init+0xf0>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	4a2b      	ldr	r2, [pc, #172]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001328:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800132c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800132e:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4927      	ldr	r1, [pc, #156]	; (80013d4 <HAL_ETH_Init+0xf4>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800133c:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <HAL_ETH_Init+0xf4>)
 800133e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001356:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001358:	f7ff feb0 	bl	80010bc <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800135e:	e011      	b.n	8001384 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001360:	f7ff feac 	bl	80010bc <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800136e:	d909      	bls.n	8001384 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2204      	movs	r2, #4
 8001374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	22e0      	movs	r2, #224	; 0xe0
 800137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e021      	b.n	80013c8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1e4      	bne.n	8001360 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f958 	bl	800164c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f9ff 	bl	80017a0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 fa55 	bl	8001852 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f9bd 	bl	8001730 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2210      	movs	r2, #16
 80013c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40013800 	.word	0x40013800

080013d8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4b51      	ldr	r3, [pc, #324]	; (8001534 <ETH_SetMACConfig+0x15c>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	7c1b      	ldrb	r3, [r3, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d102      	bne.n	8001400 <ETH_SetMACConfig+0x28>
 80013fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013fe:	e000      	b.n	8001402 <ETH_SetMACConfig+0x2a>
 8001400:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	7c5b      	ldrb	r3, [r3, #17]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <ETH_SetMACConfig+0x38>
 800140a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800140e:	e000      	b.n	8001412 <ETH_SetMACConfig+0x3a>
 8001410:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001412:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7fdb      	ldrb	r3, [r3, #31]
 800141e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001420:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001426:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	7f92      	ldrb	r2, [r2, #30]
 800142c:	2a00      	cmp	r2, #0
 800142e:	d102      	bne.n	8001436 <ETH_SetMACConfig+0x5e>
 8001430:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001434:	e000      	b.n	8001438 <ETH_SetMACConfig+0x60>
 8001436:	2200      	movs	r2, #0
                        macconf->Speed |
 8001438:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	7f1b      	ldrb	r3, [r3, #28]
 800143e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001440:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	791b      	ldrb	r3, [r3, #4]
 800144c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800144e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001456:	2a00      	cmp	r2, #0
 8001458:	d102      	bne.n	8001460 <ETH_SetMACConfig+0x88>
 800145a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145e:	e000      	b.n	8001462 <ETH_SetMACConfig+0x8a>
 8001460:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001462:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	7bdb      	ldrb	r3, [r3, #15]
 8001468:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800146a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001470:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001478:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800147a:	4313      	orrs	r3, r2
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001492:	2001      	movs	r0, #1
 8001494:	f7ff fe1e 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014ae:	4013      	ands	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d101      	bne.n	80014c6 <ETH_SetMACConfig+0xee>
 80014c2:	2280      	movs	r2, #128	; 0x80
 80014c4:	e000      	b.n	80014c8 <ETH_SetMACConfig+0xf0>
 80014c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014d6:	2a01      	cmp	r2, #1
 80014d8:	d101      	bne.n	80014de <ETH_SetMACConfig+0x106>
 80014da:	2208      	movs	r2, #8
 80014dc:	e000      	b.n	80014e0 <ETH_SetMACConfig+0x108>
 80014de:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014e0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d101      	bne.n	80014f0 <ETH_SetMACConfig+0x118>
 80014ec:	2204      	movs	r2, #4
 80014ee:	e000      	b.n	80014f2 <ETH_SetMACConfig+0x11a>
 80014f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014fa:	2a01      	cmp	r2, #1
 80014fc:	d101      	bne.n	8001502 <ETH_SetMACConfig+0x12a>
 80014fe:	2202      	movs	r2, #2
 8001500:	e000      	b.n	8001504 <ETH_SetMACConfig+0x12c>
 8001502:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001504:	4313      	orrs	r3, r2
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800151c:	2001      	movs	r0, #1
 800151e:	f7ff fdd9 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	ff20810f 	.word	0xff20810f

08001538 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <ETH_SetDMAConfig+0x110>)
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7b1b      	ldrb	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <ETH_SetDMAConfig+0x2c>
 800155e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001562:	e000      	b.n	8001566 <ETH_SetDMAConfig+0x2e>
 8001564:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	7b5b      	ldrb	r3, [r3, #13]
 800156a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800156c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	7f52      	ldrb	r2, [r2, #29]
 8001572:	2a00      	cmp	r2, #0
 8001574:	d102      	bne.n	800157c <ETH_SetDMAConfig+0x44>
 8001576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800157a:	e000      	b.n	800157e <ETH_SetDMAConfig+0x46>
 800157c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800157e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	7b9b      	ldrb	r3, [r3, #14]
 8001584:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001586:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800158c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7f1b      	ldrb	r3, [r3, #28]
 8001592:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001594:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	7f9b      	ldrb	r3, [r3, #30]
 800159a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800159c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80015a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015aa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015ac:	4313      	orrs	r3, r2
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015bc:	461a      	mov	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff fd80 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	791b      	ldrb	r3, [r3, #4]
 80015e6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ec:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015f2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001600:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001602:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800160a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001610:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800161a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800161e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800162c:	2001      	movs	r0, #1
 800162e:	f7ff fd51 	bl	80010d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	f8de3f23 	.word	0xf8de3f23

0800164c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0a6      	sub	sp, #152	; 0x98
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001654:	2301      	movs	r3, #1
 8001656:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001660:	2300      	movs	r3, #0
 8001662:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001676:	2301      	movs	r3, #1
 8001678:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001688:	2300      	movs	r3, #0
 800168a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001692:	2300      	movs	r3, #0
 8001694:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800169c:	2300      	movs	r3, #0
 800169e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016b2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016c4:	4619      	mov	r1, r3
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fe86 	bl	80013d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016da:	2301      	movs	r3, #1
 80016dc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016ee:	2300      	movs	r3, #0
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001706:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800170c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800170e:	2301      	movs	r3, #1
 8001710:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001714:	2300      	movs	r3, #0
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800171c:	f107 0308 	add.w	r3, r7, #8
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff08 	bl	8001538 <ETH_SetDMAConfig>
}
 8001728:	bf00      	nop
 800172a:	3798      	adds	r7, #152	; 0x98
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001730:	b480      	push	{r7}
 8001732:	b087      	sub	sp, #28
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3305      	adds	r3, #5
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	3204      	adds	r2, #4
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <ETH_MACAddressConfig+0x68>)
 8001752:	4413      	add	r3, r2
 8001754:	461a      	mov	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3303      	adds	r3, #3
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	061a      	lsls	r2, r3, #24
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3302      	adds	r3, #2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	041b      	lsls	r3, r3, #16
 800176a:	431a      	orrs	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4313      	orrs	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <ETH_MACAddressConfig+0x6c>)
 8001782:	4413      	add	r3, r2
 8001784:	461a      	mov	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40028040 	.word	0x40028040
 800179c:	40028044 	.word	0x40028044

080017a0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e03e      	b.n	800182c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68d9      	ldr	r1, [r3, #12]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	3206      	adds	r2, #6
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d80c      	bhi.n	8001810 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	440b      	add	r3, r1
 8001808:	461a      	mov	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	e004      	b.n	800181a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	461a      	mov	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3301      	adds	r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d9bd      	bls.n	80017ae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001844:	611a      	str	r2, [r3, #16]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	e046      	b.n	80018ee <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6919      	ldr	r1, [r3, #16]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800189c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80018a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	3212      	adds	r2, #18
 80018ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d80c      	bhi.n	80018de <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6919      	ldr	r1, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	461a      	mov	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	e004      	b.n	80018e8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d9b5      	bls.n	8001860 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691a      	ldr	r2, [r3, #16]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800191e:	60da      	str	r2, [r3, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e175      	b.n	8001c38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800194c:	2201      	movs	r2, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	f040 8164 	bne.w	8001c32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d005      	beq.n	8001982 <HAL_GPIO_Init+0x56>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d130      	bne.n	80019e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	f003 0201 	and.w	r2, r3, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d017      	beq.n	8001a20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d123      	bne.n	8001a74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	08da      	lsrs	r2, r3, #3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3208      	adds	r2, #8
 8001a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	220f      	movs	r2, #15
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	08da      	lsrs	r2, r3, #3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3208      	adds	r2, #8
 8001a6e:	69b9      	ldr	r1, [r7, #24]
 8001a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0203 	and.w	r2, r3, #3
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80be 	beq.w	8001c32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a65      	ldr	r2, [pc, #404]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b63      	ldr	r3, [pc, #396]	; (8001c50 <HAL_GPIO_Init+0x324>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ace:	4a61      	ldr	r2, [pc, #388]	; (8001c54 <HAL_GPIO_Init+0x328>)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_GPIO_Init+0x32c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d037      	beq.n	8001b6a <HAL_GPIO_Init+0x23e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a57      	ldr	r2, [pc, #348]	; (8001c5c <HAL_GPIO_Init+0x330>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d031      	beq.n	8001b66 <HAL_GPIO_Init+0x23a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a56      	ldr	r2, [pc, #344]	; (8001c60 <HAL_GPIO_Init+0x334>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d02b      	beq.n	8001b62 <HAL_GPIO_Init+0x236>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a55      	ldr	r2, [pc, #340]	; (8001c64 <HAL_GPIO_Init+0x338>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d025      	beq.n	8001b5e <HAL_GPIO_Init+0x232>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a54      	ldr	r2, [pc, #336]	; (8001c68 <HAL_GPIO_Init+0x33c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01f      	beq.n	8001b5a <HAL_GPIO_Init+0x22e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a53      	ldr	r2, [pc, #332]	; (8001c6c <HAL_GPIO_Init+0x340>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d019      	beq.n	8001b56 <HAL_GPIO_Init+0x22a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a52      	ldr	r2, [pc, #328]	; (8001c70 <HAL_GPIO_Init+0x344>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d013      	beq.n	8001b52 <HAL_GPIO_Init+0x226>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <HAL_GPIO_Init+0x348>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <HAL_GPIO_Init+0x222>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a50      	ldr	r2, [pc, #320]	; (8001c78 <HAL_GPIO_Init+0x34c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d007      	beq.n	8001b4a <HAL_GPIO_Init+0x21e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a4f      	ldr	r2, [pc, #316]	; (8001c7c <HAL_GPIO_Init+0x350>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d101      	bne.n	8001b46 <HAL_GPIO_Init+0x21a>
 8001b42:	2309      	movs	r3, #9
 8001b44:	e012      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b46:	230a      	movs	r3, #10
 8001b48:	e010      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b4a:	2308      	movs	r3, #8
 8001b4c:	e00e      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e00c      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b52:	2306      	movs	r3, #6
 8001b54:	e00a      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b56:	2305      	movs	r3, #5
 8001b58:	e008      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e004      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e002      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_GPIO_Init+0x240>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	f002 0203 	and.w	r2, r2, #3
 8001b72:	0092      	lsls	r2, r2, #2
 8001b74:	4093      	lsls	r3, r2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b7c:	4935      	ldr	r1, [pc, #212]	; (8001c54 <HAL_GPIO_Init+0x328>)
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	089b      	lsrs	r3, r3, #2
 8001b82:	3302      	adds	r3, #2
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bae:	4a34      	ldr	r2, [pc, #208]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb4:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bde:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c02:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4013      	ands	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <HAL_GPIO_Init+0x354>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b0f      	cmp	r3, #15
 8001c3c:	f67f ae86 	bls.w	800194c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	bf00      	nop
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40013800 	.word	0x40013800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020c00 	.word	0x40020c00
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40021400 	.word	0x40021400
 8001c70:	40021800 	.word	0x40021800
 8001c74:	40021c00 	.word	0x40021c00
 8001c78:	40022000 	.word	0x40022000
 8001c7c:	40022400 	.word	0x40022400
 8001c80:	40013c00 	.word	0x40013c00

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e001      	b.n	8001ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce8:	b08f      	sub	sp, #60	; 0x3c
 8001cea:	af0a      	add	r7, sp, #40	; 0x28
 8001cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e116      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f86c 	bl	8000df0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 f9a4 	bl	8004084 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	687e      	ldr	r6, [r7, #4]
 8001d44:	466d      	mov	r5, sp
 8001d46:	f106 0410 	add.w	r4, r6, #16
 8001d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d56:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5a:	1d33      	adds	r3, r6, #4
 8001d5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d5e:	6838      	ldr	r0, [r7, #0]
 8001d60:	f002 f938 	bl	8003fd4 <USB_CoreInit>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0d7      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 f992 	bl	80040a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e04a      	b.n	8001e1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	333d      	adds	r3, #61	; 0x3d
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	333c      	adds	r3, #60	; 0x3c
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	b298      	uxth	r0, r3
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3344      	adds	r3, #68	; 0x44
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3340      	adds	r3, #64	; 0x40
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	3348      	adds	r3, #72	; 0x48
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	334c      	adds	r3, #76	; 0x4c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3354      	adds	r3, #84	; 0x54
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	73fb      	strb	r3, [r7, #15]
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d3af      	bcc.n	8001d88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	e044      	b.n	8001eb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	440b      	add	r3, r1
 8001e94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e9c:	7bfa      	ldrb	r2, [r7, #15]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3b5      	bcc.n	8001e2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	603b      	str	r3, [r7, #0]
 8001ec8:	687e      	ldr	r6, [r7, #4]
 8001eca:	466d      	mov	r5, sp
 8001ecc:	f106 0410 	add.w	r4, r6, #16
 8001ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee0:	1d33      	adds	r3, r6, #4
 8001ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee4:	6838      	ldr	r0, [r7, #0]
 8001ee6:	f002 f92b 	bl	8004140 <USB_DevInit>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e014      	b.n	8001f26 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d102      	bne.n	8001f1a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f80b 	bl	8001f30 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fae9 	bl	80044f6 <USB_DevDisconnect>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	10000003 	.word	0x10000003

08001f78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	6013      	str	r3, [r2, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e291      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8087 	beq.w	80020ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fbc:	4b96      	ldr	r3, [pc, #600]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d00c      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc8:	4b93      	ldr	r3, [pc, #588]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d112      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62>
 8001fd4:	4b90      	ldr	r3, [pc, #576]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe0:	d10b      	bne.n	8001ffa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d06c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x130>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d168      	bne.n	80020c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e26b      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x7a>
 8002004:	4b84      	ldr	r3, [pc, #528]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a83      	ldr	r2, [pc, #524]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	e02e      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x9c>
 800201a:	4b7f      	ldr	r3, [pc, #508]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7e      	ldr	r2, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b7c      	ldr	r3, [pc, #496]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800202c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0xc0>
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b73      	ldr	r3, [pc, #460]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a72      	ldr	r2, [pc, #456]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0xd8>
 8002058:	4b6f      	ldr	r3, [pc, #444]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6b      	ldr	r2, [pc, #428]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d013      	beq.n	80020a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f820 	bl	80010bc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f81c 	bl	80010bc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e21f      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0xe8>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f80c 	bl	80010bc <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f808 	bl	80010bc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e20b      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	4b57      	ldr	r3, [pc, #348]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x110>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d069      	beq.n	80021aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020d6:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020e2:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d11c      	bne.n	8002128 <HAL_RCC_OscConfig+0x190>
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x17a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e1df      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	493d      	ldr	r1, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	e040      	b.n	80021aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a38      	ldr	r2, [pc, #224]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe ffbe 	bl	80010bc <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7fe ffba 	bl	80010bc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1bd      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4929      	ldr	r1, [pc, #164]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 800217e:	f023 0301 	bic.w	r3, r3, #1
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ff9a 	bl	80010bc <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7fe ff96 	bl	80010bc <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e199      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d038      	beq.n	8002228 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7fe ff77 	bl	80010bc <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7fe ff73 	bl	80010bc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e176      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x23a>
 80021f0:	e01a      	b.n	8002228 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe ff5d 	bl	80010bc <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002206:	f7fe ff59 	bl	80010bc <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d903      	bls.n	800221c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e15c      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
 8002218:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4b91      	ldr	r3, [pc, #580]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a4 	beq.w	800237e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10d      	bne.n	800225e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a87      	ldr	r2, [pc, #540]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b85      	ldr	r3, [pc, #532]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225a:	2301      	movs	r3, #1
 800225c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225e:	4b82      	ldr	r3, [pc, #520]	; (8002468 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800226a:	4b7f      	ldr	r3, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7e      	ldr	r2, [pc, #504]	; (8002468 <HAL_RCC_OscConfig+0x4d0>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002276:	f7fe ff21 	bl	80010bc <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227e:	f7fe ff1d 	bl	80010bc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b64      	cmp	r3, #100	; 0x64
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e120      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002290:	4b75      	ldr	r3, [pc, #468]	; (8002468 <HAL_RCC_OscConfig+0x4d0>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x31a>
 80022a4:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6713      	str	r3, [r2, #112]	; 0x70
 80022b0:	e02d      	b.n	800230e <HAL_RCC_OscConfig+0x376>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x33c>
 80022ba:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a66      	ldr	r2, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
 80022d2:	e01c      	b.n	800230e <HAL_RCC_OscConfig+0x376>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b05      	cmp	r3, #5
 80022da:	d10c      	bne.n	80022f6 <HAL_RCC_OscConfig+0x35e>
 80022dc:	4b61      	ldr	r3, [pc, #388]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e0:	4a60      	ldr	r2, [pc, #384]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6713      	str	r3, [r2, #112]	; 0x70
 80022e8:	4b5e      	ldr	r3, [pc, #376]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ec:	4a5d      	ldr	r2, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6713      	str	r3, [r2, #112]	; 0x70
 80022f4:	e00b      	b.n	800230e <HAL_RCC_OscConfig+0x376>
 80022f6:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6713      	str	r3, [r2, #112]	; 0x70
 8002302:	4b58      	ldr	r3, [pc, #352]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a57      	ldr	r2, [pc, #348]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	f023 0304 	bic.w	r3, r3, #4
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d015      	beq.n	8002342 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fed1 	bl	80010bc <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fecd 	bl	80010bc <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e0ce      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ee      	beq.n	800231e <HAL_RCC_OscConfig+0x386>
 8002340:	e014      	b.n	800236c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7fe febb 	bl	80010bc <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7fe feb7 	bl	80010bc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0b8      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002360:	4b40      	ldr	r3, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1ee      	bne.n	800234a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d105      	bne.n	800237e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002372:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a3b      	ldr	r2, [pc, #236]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80a4 	beq.w	80024d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002388:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d06b      	beq.n	800246c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d149      	bne.n	8002430 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a30      	ldr	r2, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe88 	bl	80010bc <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fe84 	bl	80010bc <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e087      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	085b      	lsrs	r3, r3, #1
 80023e6:	3b01      	subs	r3, #1
 80023e8:	041b      	lsls	r3, r3, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	4313      	orrs	r3, r2
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023fc:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fe58 	bl	80010bc <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fe54 	bl	80010bc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e057      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x478>
 800242e:	e04f      	b.n	80024d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe3e 	bl	80010bc <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fe3a 	bl	80010bc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e03d      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002456:	4b03      	ldr	r3, [pc, #12]	; (8002464 <HAL_RCC_OscConfig+0x4cc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x4ac>
 8002462:	e035      	b.n	80024d0 <HAL_RCC_OscConfig+0x538>
 8002464:	40023800 	.word	0x40023800
 8002468:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x544>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d028      	beq.n	80024cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d121      	bne.n	80024cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800249c:	4013      	ands	r3, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d111      	bne.n	80024cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	085b      	lsrs	r3, r3, #1
 80024b4:	3b01      	subs	r3, #1
 80024b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0d0      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d910      	bls.n	8002528 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b67      	ldr	r3, [pc, #412]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 020f 	bic.w	r2, r3, #15
 800250e:	4965      	ldr	r1, [pc, #404]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0b8      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002540:	4b59      	ldr	r3, [pc, #356]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002546:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800254a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002558:	4b53      	ldr	r3, [pc, #332]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	494d      	ldr	r1, [pc, #308]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d040      	beq.n	8002604 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d115      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07f      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e073      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3d      	ldr	r3, [pc, #244]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e06b      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4936      	ldr	r1, [pc, #216]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fd72 	bl	80010bc <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fe fd6e 	bl	80010bc <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e053      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b27      	ldr	r3, [pc, #156]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d210      	bcs.n	8002634 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 020f 	bic.w	r2, r3, #15
 800261a:	4922      	ldr	r1, [pc, #136]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e032      	b.n	800269a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4916      	ldr	r1, [pc, #88]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002672:	f000 f821 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490a      	ldr	r1, [pc, #40]	; (80026ac <HAL_RCC_ClockConfig+0x1cc>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	fa22 f303 	lsr.w	r3, r2, r3
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_RCC_ClockConfig+0x1d0>)
 800268c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fc26 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	40023800 	.word	0x40023800
 80026ac:	08006c8c 	.word	0x08006c8c
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004

080026b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026bc:	b094      	sub	sp, #80	; 0x50
 80026be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	647b      	str	r3, [r7, #68]	; 0x44
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c8:	2300      	movs	r3, #0
 80026ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d0:	4b79      	ldr	r3, [pc, #484]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d00d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x40>
 80026dc:	2b08      	cmp	r3, #8
 80026de:	f200 80e1 	bhi.w	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0x34>
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ea:	e0db      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ec:	4b73      	ldr	r3, [pc, #460]	; (80028bc <HAL_RCC_GetSysClockFreq+0x204>)
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f0:	e0db      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026f2:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80026f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026f6:	e0d8      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026f8:	4b6f      	ldr	r3, [pc, #444]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002702:	4b6d      	ldr	r3, [pc, #436]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	099b      	lsrs	r3, r3, #6
 8002714:	2200      	movs	r2, #0
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
 8002718:	63fa      	str	r2, [r7, #60]	; 0x3c
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
 8002726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800272a:	4622      	mov	r2, r4
 800272c:	462b      	mov	r3, r5
 800272e:	f04f 0000 	mov.w	r0, #0
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	0159      	lsls	r1, r3, #5
 8002738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273c:	0150      	lsls	r0, r2, #5
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4621      	mov	r1, r4
 8002744:	1a51      	subs	r1, r2, r1
 8002746:	6139      	str	r1, [r7, #16]
 8002748:	4629      	mov	r1, r5
 800274a:	eb63 0301 	sbc.w	r3, r3, r1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800275c:	4659      	mov	r1, fp
 800275e:	018b      	lsls	r3, r1, #6
 8002760:	4651      	mov	r1, sl
 8002762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002766:	4651      	mov	r1, sl
 8002768:	018a      	lsls	r2, r1, #6
 800276a:	4651      	mov	r1, sl
 800276c:	ebb2 0801 	subs.w	r8, r2, r1
 8002770:	4659      	mov	r1, fp
 8002772:	eb63 0901 	sbc.w	r9, r3, r1
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	f04f 0300 	mov.w	r3, #0
 800277e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800278a:	4690      	mov	r8, r2
 800278c:	4699      	mov	r9, r3
 800278e:	4623      	mov	r3, r4
 8002790:	eb18 0303 	adds.w	r3, r8, r3
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	462b      	mov	r3, r5
 8002798:	eb49 0303 	adc.w	r3, r9, r3
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027aa:	4629      	mov	r1, r5
 80027ac:	024b      	lsls	r3, r1, #9
 80027ae:	4621      	mov	r1, r4
 80027b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027b4:	4621      	mov	r1, r4
 80027b6:	024a      	lsls	r2, r1, #9
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027be:	2200      	movs	r2, #0
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027c8:	f7fd fd22 	bl	8000210 <__aeabi_uldivmod>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4613      	mov	r3, r2
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027d4:	e058      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b38      	ldr	r3, [pc, #224]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	4611      	mov	r1, r2
 80027e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
 80027ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027f0:	4642      	mov	r2, r8
 80027f2:	464b      	mov	r3, r9
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002802:	0150      	lsls	r0, r2, #5
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4641      	mov	r1, r8
 800280a:	ebb2 0a01 	subs.w	sl, r2, r1
 800280e:	4649      	mov	r1, r9
 8002810:	eb63 0b01 	sbc.w	fp, r3, r1
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002828:	ebb2 040a 	subs.w	r4, r2, sl
 800282c:	eb63 050b 	sbc.w	r5, r3, fp
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	00eb      	lsls	r3, r5, #3
 800283a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800283e:	00e2      	lsls	r2, r4, #3
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4643      	mov	r3, r8
 8002846:	18e3      	adds	r3, r4, r3
 8002848:	603b      	str	r3, [r7, #0]
 800284a:	464b      	mov	r3, r9
 800284c:	eb45 0303 	adc.w	r3, r5, r3
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800285e:	4629      	mov	r1, r5
 8002860:	028b      	lsls	r3, r1, #10
 8002862:	4621      	mov	r1, r4
 8002864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002868:	4621      	mov	r1, r4
 800286a:	028a      	lsls	r2, r1, #10
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002872:	2200      	movs	r2, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	61fa      	str	r2, [r7, #28]
 8002878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287c:	f7fd fcc8 	bl	8000210 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4613      	mov	r3, r2
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	0c1b      	lsrs	r3, r3, #16
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002898:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800289a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028a2:	e002      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetSysClockFreq+0x204>)
 80028a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3750      	adds	r7, #80	; 0x50
 80028b0:	46bd      	mov	sp, r7
 80028b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028b6:	bf00      	nop
 80028b8:	40023800 	.word	0x40023800
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	007a1200 	.word	0x007a1200

080028c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ca:	681b      	ldr	r3, [r3, #0]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028e0:	f7ff fff0 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0a9b      	lsrs	r3, r3, #10
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	08006c9c 	.word	0x08006c9c

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002908:	f7ff ffdc 	bl	80028c4 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0b5b      	lsrs	r3, r3, #13
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4903      	ldr	r1, [pc, #12]	; (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40023800 	.word	0x40023800
 8002928:	08006c9c 	.word	0x08006c9c

0800292c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	220f      	movs	r2, #15
 800293a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0203 	and.w	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_RCC_GetClockConfig+0x5c>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCC_GetClockConfig+0x60>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 020f 	and.w	r2, r3, #15
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	601a      	str	r2, [r3, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40023c00 	.word	0x40023c00

08002990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029b8:	4b69      	ldr	r3, [pc, #420]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a68      	ldr	r2, [pc, #416]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c2:	6093      	str	r3, [r2, #8]
 80029c4:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	4964      	ldr	r1, [pc, #400]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ea:	4b5d      	ldr	r3, [pc, #372]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	4959      	ldr	r1, [pc, #356]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a08:	d101      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d017      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a26:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	494a      	ldr	r1, [pc, #296]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a44:	d101      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a46:	2301      	movs	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 808b 	beq.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	4a39      	ldr	r2, [pc, #228]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a80:	4b37      	ldr	r3, [pc, #220]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe fb10 	bl	80010bc <HAL_GetTick>
 8002a9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa0:	f7fe fb0c 	bl	80010bc <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	; 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e357      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ab2:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002abe:	4b28      	ldr	r3, [pc, #160]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d035      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d02e      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002afe:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d114      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fad4 	bl	80010bc <HAL_GetTick>
 8002b14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fad0 	bl	80010bc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e319      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b46:	d111      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b56:	400b      	ands	r3, r1
 8002b58:	4901      	ldr	r1, [pc, #4]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
 8002b5e:	e00b      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40007000 	.word	0x40007000
 8002b68:	0ffffcff 	.word	0x0ffffcff
 8002b6c:	4baa      	ldr	r3, [pc, #680]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4aa9      	ldr	r2, [pc, #676]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b76:	6093      	str	r3, [r2, #8]
 8002b78:	4ba7      	ldr	r3, [pc, #668]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	49a4      	ldr	r1, [pc, #656]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b96:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b9c:	4a9e      	ldr	r2, [pc, #632]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ba6:	4b9c      	ldr	r3, [pc, #624]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ba8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	4999      	ldr	r1, [pc, #612]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc4:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd2:	4991      	ldr	r1, [pc, #580]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be6:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bf4:	4988      	ldr	r1, [pc, #544]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c08:	4b83      	ldr	r3, [pc, #524]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c16:	4980      	ldr	r1, [pc, #512]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4977      	ldr	r1, [pc, #476]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c4c:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	496f      	ldr	r1, [pc, #444]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	f023 020c 	bic.w	r2, r3, #12
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7c:	4966      	ldr	r1, [pc, #408]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	495e      	ldr	r1, [pc, #376]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cb2:	4b59      	ldr	r3, [pc, #356]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc0:	4955      	ldr	r1, [pc, #340]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cd4:	4b50      	ldr	r3, [pc, #320]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	494d      	ldr	r1, [pc, #308]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cf6:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	4944      	ldr	r1, [pc, #272]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d18:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	493c      	ldr	r1, [pc, #240]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d48:	4933      	ldr	r1, [pc, #204]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d6a:	492b      	ldr	r1, [pc, #172]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8c:	4922      	ldr	r1, [pc, #136]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	4912      	ldr	r1, [pc, #72]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00b      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df0:	4909      	ldr	r1, [pc, #36]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d006      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80d9 	beq.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a01      	ldr	r2, [pc, #4]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e16:	e001      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e1e:	f7fe f94d 	bl	80010bc <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e26:	f7fe f949 	bl	80010bc <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b64      	cmp	r3, #100	; 0x64
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e194      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e38:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d1f0      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d021      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d11d      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e58:	4b64      	ldr	r3, [pc, #400]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e66:	4b61      	ldr	r3, [pc, #388]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	019a      	lsls	r2, r3, #6
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	061b      	lsls	r3, r3, #24
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	071b      	lsls	r3, r3, #28
 8002e8c:	4957      	ldr	r1, [pc, #348]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02e      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ebe:	d129      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ece:	4b47      	ldr	r3, [pc, #284]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ed4:	0f1b      	lsrs	r3, r3, #28
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	019a      	lsls	r2, r3, #6
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	493d      	ldr	r1, [pc, #244]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f02:	f023 021f 	bic.w	r2, r3, #31
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	4937      	ldr	r1, [pc, #220]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01d      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	0e1b      	lsrs	r3, r3, #24
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f34:	0f1b      	lsrs	r3, r3, #28
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	019a      	lsls	r2, r3, #6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	071b      	lsls	r3, r3, #28
 8002f54:	4925      	ldr	r1, [pc, #148]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d011      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	019a      	lsls	r2, r3, #6
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	061b      	lsls	r3, r3, #24
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	071b      	lsls	r3, r3, #28
 8002f84:	4919      	ldr	r1, [pc, #100]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a16      	ldr	r2, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe f890 	bl	80010bc <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fa0:	f7fe f88c 	bl	80010bc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e0d7      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 80cd 	bne.w	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a08      	ldr	r2, [pc, #32]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe f873 	bl	80010bc <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fda:	f7fe f86f 	bl	80010bc <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d903      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0ba      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002fec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ff0:	4b5e      	ldr	r3, [pc, #376]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d0ed      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d009      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02e      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d12a      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003026:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003034:	4b4d      	ldr	r3, [pc, #308]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	0f1b      	lsrs	r3, r3, #28
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	019a      	lsls	r2, r3, #6
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	431a      	orrs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	431a      	orrs	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	071b      	lsls	r3, r3, #28
 800305a:	4944      	ldr	r1, [pc, #272]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003062:	4b42      	ldr	r3, [pc, #264]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	493d      	ldr	r1, [pc, #244]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d022      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003090:	d11d      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	0e1b      	lsrs	r3, r3, #24
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	0f1b      	lsrs	r3, r3, #28
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	019a      	lsls	r2, r3, #6
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	061b      	lsls	r3, r3, #24
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	071b      	lsls	r3, r3, #28
 80030c6:	4929      	ldr	r1, [pc, #164]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	0e1b      	lsrs	r3, r3, #24
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030e8:	4b20      	ldr	r3, [pc, #128]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	0c1b      	lsrs	r3, r3, #16
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	019a      	lsls	r2, r3, #6
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	071b      	lsls	r3, r3, #28
 800310e:	4917      	ldr	r1, [pc, #92]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003116:	4b15      	ldr	r3, [pc, #84]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	4911      	ldr	r1, [pc, #68]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800312c:	4b0f      	ldr	r3, [pc, #60]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0e      	ldr	r2, [pc, #56]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fd ffc0 	bl	80010bc <HAL_GetTick>
 800313c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003140:	f7fd ffbc 	bl	80010bc <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e007      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800315a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315e:	d1ef      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40023800 	.word	0x40023800

08003170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e049      	b.n	8003216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f841 	bl	800321e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2202      	movs	r2, #2
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3304      	adds	r3, #4
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f000 fa00 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e054      	b.n	80032f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_TIM_Base_Start_IT+0xd0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d022      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003276:	d01d      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a22      	ldr	r2, [pc, #136]	; (8003308 <HAL_TIM_Base_Start_IT+0xd4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d018      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_Base_Start_IT+0xd8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d013      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <HAL_TIM_Base_Start_IT+0xdc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00e      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_TIM_Base_Start_IT+0xe0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d009      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	; (8003318 <HAL_TIM_Base_Start_IT+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_TIM_Base_Start_IT+0xe8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d115      	bne.n	80032e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_TIM_Base_Start_IT+0xec>)
 80032bc:	4013      	ands	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d015      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d011      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	e008      	b.n	80032f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e000      	b.n	80032f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40010000 	.word	0x40010000
 8003308:	40000400 	.word	0x40000400
 800330c:	40000800 	.word	0x40000800
 8003310:	40000c00 	.word	0x40000c00
 8003314:	40010400 	.word	0x40010400
 8003318:	40014000 	.word	0x40014000
 800331c:	40001800 	.word	0x40001800
 8003320:	00010007 	.word	0x00010007

08003324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d122      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d11b      	bne.n	8003380 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0202 	mvn.w	r2, #2
 8003350:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f003 0303 	and.w	r3, r3, #3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f905 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
 800336c:	e005      	b.n	800337a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f8f7 	bl	8003562 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f908 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	2b04      	cmp	r3, #4
 800338c:	d122      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11b      	bne.n	80033d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f06f 0204 	mvn.w	r2, #4
 80033a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8db 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
 80033c0:	e005      	b.n	80033ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8cd 	bl	8003562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8de 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d122      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0208 	mvn.w	r2, #8
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2204      	movs	r2, #4
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f8b1 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f8a3 	bl	8003562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f8b4 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d122      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d11b      	bne.n	800347c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f887 	bl	8003576 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f879 	bl	8003562 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f88a 	bl	800358a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d10e      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d107      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0201 	mvn.w	r2, #1
 80034a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd fb4c 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b80      	cmp	r3, #128	; 0x80
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f91a 	bl	8003708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e2:	d10e      	bne.n	8003502 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d107      	bne.n	8003502 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f90d 	bl	800371c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d10e      	bne.n	800352e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d107      	bne.n	800352e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f838 	bl	800359e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b20      	cmp	r3, #32
 800353a:	d10e      	bne.n	800355a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	d107      	bne.n	800355a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f06f 0220 	mvn.w	r2, #32
 8003552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f8cd 	bl	80036f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d00f      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3d      	ldr	r2, [pc, #244]	; (80036cc <TIM_Base_SetConfig+0x118>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3c      	ldr	r2, [pc, #240]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02b      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d027      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2c      	ldr	r2, [pc, #176]	; (80036cc <TIM_Base_SetConfig+0x118>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d023      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d01f      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01b      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d017      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <TIM_Base_SetConfig+0x128>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d013      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <TIM_Base_SetConfig+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00f      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <TIM_Base_SetConfig+0x130>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00b      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <TIM_Base_SetConfig+0x134>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d007      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <TIM_Base_SetConfig+0x138>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d003      	beq.n	8003666 <TIM_Base_SetConfig+0xb2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a23      	ldr	r2, [pc, #140]	; (80036f0 <TIM_Base_SetConfig+0x13c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d108      	bne.n	8003678 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40010000 	.word	0x40010000
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40010400 	.word	0x40010400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800
 80036e8:	40001800 	.word	0x40001800
 80036ec:	40001c00 	.word	0x40001c00
 80036f0:	40002000 	.word	0x40002000

080036f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e040      	b.n	80037c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd faec 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2224      	movs	r2, #36	; 0x24
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f82c 	bl	80037cc <UART_SetConfig>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa84 	bl	8003c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb0b 	bl	8003dd8 <UART_CheckIdleState>
 80037c2:	4603      	mov	r3, r0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4ba6      	ldr	r3, [pc, #664]	; (8003a90 <UART_SetConfig+0x2c4>)
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a94      	ldr	r2, [pc, #592]	; (8003a94 <UART_SetConfig+0x2c8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d120      	bne.n	800388a <UART_SetConfig+0xbe>
 8003848:	4b93      	ldr	r3, [pc, #588]	; (8003a98 <UART_SetConfig+0x2cc>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b03      	cmp	r3, #3
 8003854:	d816      	bhi.n	8003884 <UART_SetConfig+0xb8>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <UART_SetConfig+0x90>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	0800386d 	.word	0x0800386d
 8003860:	08003879 	.word	0x08003879
 8003864:	08003873 	.word	0x08003873
 8003868:	0800387f 	.word	0x0800387f
 800386c:	2301      	movs	r3, #1
 800386e:	77fb      	strb	r3, [r7, #31]
 8003870:	e150      	b.n	8003b14 <UART_SetConfig+0x348>
 8003872:	2302      	movs	r3, #2
 8003874:	77fb      	strb	r3, [r7, #31]
 8003876:	e14d      	b.n	8003b14 <UART_SetConfig+0x348>
 8003878:	2304      	movs	r3, #4
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e14a      	b.n	8003b14 <UART_SetConfig+0x348>
 800387e:	2308      	movs	r3, #8
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e147      	b.n	8003b14 <UART_SetConfig+0x348>
 8003884:	2310      	movs	r3, #16
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e144      	b.n	8003b14 <UART_SetConfig+0x348>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a83      	ldr	r2, [pc, #524]	; (8003a9c <UART_SetConfig+0x2d0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d132      	bne.n	80038fa <UART_SetConfig+0x12e>
 8003894:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <UART_SetConfig+0x2cc>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d828      	bhi.n	80038f4 <UART_SetConfig+0x128>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0xdc>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038f5 	.word	0x080038f5
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038e3 	.word	0x080038e3
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	080038f5 	.word	0x080038f5
 80038d8:	080038ef 	.word	0x080038ef
 80038dc:	2300      	movs	r3, #0
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e118      	b.n	8003b14 <UART_SetConfig+0x348>
 80038e2:	2302      	movs	r3, #2
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e115      	b.n	8003b14 <UART_SetConfig+0x348>
 80038e8:	2304      	movs	r3, #4
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e112      	b.n	8003b14 <UART_SetConfig+0x348>
 80038ee:	2308      	movs	r3, #8
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e10f      	b.n	8003b14 <UART_SetConfig+0x348>
 80038f4:	2310      	movs	r3, #16
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e10c      	b.n	8003b14 <UART_SetConfig+0x348>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a68      	ldr	r2, [pc, #416]	; (8003aa0 <UART_SetConfig+0x2d4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d120      	bne.n	8003946 <UART_SetConfig+0x17a>
 8003904:	4b64      	ldr	r3, [pc, #400]	; (8003a98 <UART_SetConfig+0x2cc>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800390e:	2b30      	cmp	r3, #48	; 0x30
 8003910:	d013      	beq.n	800393a <UART_SetConfig+0x16e>
 8003912:	2b30      	cmp	r3, #48	; 0x30
 8003914:	d814      	bhi.n	8003940 <UART_SetConfig+0x174>
 8003916:	2b20      	cmp	r3, #32
 8003918:	d009      	beq.n	800392e <UART_SetConfig+0x162>
 800391a:	2b20      	cmp	r3, #32
 800391c:	d810      	bhi.n	8003940 <UART_SetConfig+0x174>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <UART_SetConfig+0x15c>
 8003922:	2b10      	cmp	r3, #16
 8003924:	d006      	beq.n	8003934 <UART_SetConfig+0x168>
 8003926:	e00b      	b.n	8003940 <UART_SetConfig+0x174>
 8003928:	2300      	movs	r3, #0
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e0f2      	b.n	8003b14 <UART_SetConfig+0x348>
 800392e:	2302      	movs	r3, #2
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e0ef      	b.n	8003b14 <UART_SetConfig+0x348>
 8003934:	2304      	movs	r3, #4
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e0ec      	b.n	8003b14 <UART_SetConfig+0x348>
 800393a:	2308      	movs	r3, #8
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e0e9      	b.n	8003b14 <UART_SetConfig+0x348>
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e0e6      	b.n	8003b14 <UART_SetConfig+0x348>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	; (8003aa4 <UART_SetConfig+0x2d8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d120      	bne.n	8003992 <UART_SetConfig+0x1c6>
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <UART_SetConfig+0x2cc>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800395a:	2bc0      	cmp	r3, #192	; 0xc0
 800395c:	d013      	beq.n	8003986 <UART_SetConfig+0x1ba>
 800395e:	2bc0      	cmp	r3, #192	; 0xc0
 8003960:	d814      	bhi.n	800398c <UART_SetConfig+0x1c0>
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d009      	beq.n	800397a <UART_SetConfig+0x1ae>
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	d810      	bhi.n	800398c <UART_SetConfig+0x1c0>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <UART_SetConfig+0x1a8>
 800396e:	2b40      	cmp	r3, #64	; 0x40
 8003970:	d006      	beq.n	8003980 <UART_SetConfig+0x1b4>
 8003972:	e00b      	b.n	800398c <UART_SetConfig+0x1c0>
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e0cc      	b.n	8003b14 <UART_SetConfig+0x348>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e0c9      	b.n	8003b14 <UART_SetConfig+0x348>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e0c6      	b.n	8003b14 <UART_SetConfig+0x348>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e0c3      	b.n	8003b14 <UART_SetConfig+0x348>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e0c0      	b.n	8003b14 <UART_SetConfig+0x348>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a44      	ldr	r2, [pc, #272]	; (8003aa8 <UART_SetConfig+0x2dc>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d125      	bne.n	80039e8 <UART_SetConfig+0x21c>
 800399c:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <UART_SetConfig+0x2cc>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039aa:	d017      	beq.n	80039dc <UART_SetConfig+0x210>
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b0:	d817      	bhi.n	80039e2 <UART_SetConfig+0x216>
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b6:	d00b      	beq.n	80039d0 <UART_SetConfig+0x204>
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039bc:	d811      	bhi.n	80039e2 <UART_SetConfig+0x216>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <UART_SetConfig+0x1fe>
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039c6:	d006      	beq.n	80039d6 <UART_SetConfig+0x20a>
 80039c8:	e00b      	b.n	80039e2 <UART_SetConfig+0x216>
 80039ca:	2300      	movs	r3, #0
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e0a1      	b.n	8003b14 <UART_SetConfig+0x348>
 80039d0:	2302      	movs	r3, #2
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e09e      	b.n	8003b14 <UART_SetConfig+0x348>
 80039d6:	2304      	movs	r3, #4
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e09b      	b.n	8003b14 <UART_SetConfig+0x348>
 80039dc:	2308      	movs	r3, #8
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e098      	b.n	8003b14 <UART_SetConfig+0x348>
 80039e2:	2310      	movs	r3, #16
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e095      	b.n	8003b14 <UART_SetConfig+0x348>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <UART_SetConfig+0x2e0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d125      	bne.n	8003a3e <UART_SetConfig+0x272>
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <UART_SetConfig+0x2cc>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a00:	d017      	beq.n	8003a32 <UART_SetConfig+0x266>
 8003a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a06:	d817      	bhi.n	8003a38 <UART_SetConfig+0x26c>
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d00b      	beq.n	8003a26 <UART_SetConfig+0x25a>
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d811      	bhi.n	8003a38 <UART_SetConfig+0x26c>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <UART_SetConfig+0x254>
 8003a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a1c:	d006      	beq.n	8003a2c <UART_SetConfig+0x260>
 8003a1e:	e00b      	b.n	8003a38 <UART_SetConfig+0x26c>
 8003a20:	2301      	movs	r3, #1
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e076      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a26:	2302      	movs	r3, #2
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e073      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e070      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a32:	2308      	movs	r3, #8
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e06d      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a38:	2310      	movs	r3, #16
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e06a      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <UART_SetConfig+0x2e4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d138      	bne.n	8003aba <UART_SetConfig+0x2ee>
 8003a48:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <UART_SetConfig+0x2cc>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a56:	d017      	beq.n	8003a88 <UART_SetConfig+0x2bc>
 8003a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5c:	d82a      	bhi.n	8003ab4 <UART_SetConfig+0x2e8>
 8003a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a62:	d00b      	beq.n	8003a7c <UART_SetConfig+0x2b0>
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a68:	d824      	bhi.n	8003ab4 <UART_SetConfig+0x2e8>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <UART_SetConfig+0x2aa>
 8003a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a72:	d006      	beq.n	8003a82 <UART_SetConfig+0x2b6>
 8003a74:	e01e      	b.n	8003ab4 <UART_SetConfig+0x2e8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e04b      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e048      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a82:	2304      	movs	r3, #4
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e045      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a88:	2308      	movs	r3, #8
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	e042      	b.n	8003b14 <UART_SetConfig+0x348>
 8003a8e:	bf00      	nop
 8003a90:	efff69f3 	.word	0xefff69f3
 8003a94:	40011000 	.word	0x40011000
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40004400 	.word	0x40004400
 8003aa0:	40004800 	.word	0x40004800
 8003aa4:	40004c00 	.word	0x40004c00
 8003aa8:	40005000 	.word	0x40005000
 8003aac:	40011400 	.word	0x40011400
 8003ab0:	40007800 	.word	0x40007800
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e02c      	b.n	8003b14 <UART_SetConfig+0x348>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a72      	ldr	r2, [pc, #456]	; (8003c88 <UART_SetConfig+0x4bc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d125      	bne.n	8003b10 <UART_SetConfig+0x344>
 8003ac4:	4b71      	ldr	r3, [pc, #452]	; (8003c8c <UART_SetConfig+0x4c0>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ace:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ad2:	d017      	beq.n	8003b04 <UART_SetConfig+0x338>
 8003ad4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ad8:	d817      	bhi.n	8003b0a <UART_SetConfig+0x33e>
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	d00b      	beq.n	8003af8 <UART_SetConfig+0x32c>
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d811      	bhi.n	8003b0a <UART_SetConfig+0x33e>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <UART_SetConfig+0x326>
 8003aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aee:	d006      	beq.n	8003afe <UART_SetConfig+0x332>
 8003af0:	e00b      	b.n	8003b0a <UART_SetConfig+0x33e>
 8003af2:	2300      	movs	r3, #0
 8003af4:	77fb      	strb	r3, [r7, #31]
 8003af6:	e00d      	b.n	8003b14 <UART_SetConfig+0x348>
 8003af8:	2302      	movs	r3, #2
 8003afa:	77fb      	strb	r3, [r7, #31]
 8003afc:	e00a      	b.n	8003b14 <UART_SetConfig+0x348>
 8003afe:	2304      	movs	r3, #4
 8003b00:	77fb      	strb	r3, [r7, #31]
 8003b02:	e007      	b.n	8003b14 <UART_SetConfig+0x348>
 8003b04:	2308      	movs	r3, #8
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e004      	b.n	8003b14 <UART_SetConfig+0x348>
 8003b0a:	2310      	movs	r3, #16
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e001      	b.n	8003b14 <UART_SetConfig+0x348>
 8003b10:	2310      	movs	r3, #16
 8003b12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d15b      	bne.n	8003bd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d828      	bhi.n	8003b76 <UART_SetConfig+0x3aa>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <UART_SetConfig+0x360>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b51 	.word	0x08003b51
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b61 	.word	0x08003b61
 8003b38:	08003b77 	.word	0x08003b77
 8003b3c:	08003b67 	.word	0x08003b67
 8003b40:	08003b77 	.word	0x08003b77
 8003b44:	08003b77 	.word	0x08003b77
 8003b48:	08003b77 	.word	0x08003b77
 8003b4c:	08003b6f 	.word	0x08003b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe fec4 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003b54:	61b8      	str	r0, [r7, #24]
        break;
 8003b56:	e013      	b.n	8003b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b58:	f7fe fed4 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8003b5c:	61b8      	str	r0, [r7, #24]
        break;
 8003b5e:	e00f      	b.n	8003b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <UART_SetConfig+0x4c4>)
 8003b62:	61bb      	str	r3, [r7, #24]
        break;
 8003b64:	e00c      	b.n	8003b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b66:	f7fe fda7 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8003b6a:	61b8      	str	r0, [r7, #24]
        break;
 8003b6c:	e008      	b.n	8003b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e004      	b.n	8003b80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d074      	beq.n	8003c70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	005a      	lsls	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	d916      	bls.n	8003bd0 <UART_SetConfig+0x404>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d212      	bcs.n	8003bd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	f023 030f 	bic.w	r3, r3, #15
 8003bb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	89fb      	ldrh	r3, [r7, #14]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	89fa      	ldrh	r2, [r7, #14]
 8003bcc:	60da      	str	r2, [r3, #12]
 8003bce:	e04f      	b.n	8003c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	77bb      	strb	r3, [r7, #30]
 8003bd4:	e04c      	b.n	8003c70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bd6:	7ffb      	ldrb	r3, [r7, #31]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d828      	bhi.n	8003c2e <UART_SetConfig+0x462>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x418>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7fe fe68 	bl	80028dc <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61b8      	str	r0, [r7, #24]
        break;
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fe78 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8003c14:	61b8      	str	r0, [r7, #24]
        break;
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <UART_SetConfig+0x4c4>)
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7fe fd4b 	bl	80026b8 <HAL_RCC_GetSysClockFreq>
 8003c22:	61b8      	str	r0, [r7, #24]
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e004      	b.n	8003c38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	77bb      	strb	r3, [r7, #30]
        break;
 8003c36:	bf00      	nop
    }

    if (pclk != 0U)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	085a      	lsrs	r2, r3, #1
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	441a      	add	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b0f      	cmp	r3, #15
 8003c56:	d909      	bls.n	8003c6c <UART_SetConfig+0x4a0>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5e:	d205      	bcs.n	8003c6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e001      	b.n	8003c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40007c00 	.word	0x40007c00
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	00f42400 	.word	0x00f42400

08003c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	f003 0310 	and.w	r3, r3, #16
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01a      	beq.n	8003daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d10a      	bne.n	8003daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de8:	f7fd f968 	bl	80010bc <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d10e      	bne.n	8003e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f81b 	bl	8003e46 <UART_WaitOnFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e011      	b.n	8003e3e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b09c      	sub	sp, #112	; 0x70
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e56:	e0a7      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5e:	f000 80a3 	beq.w	8003fa8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fd f92b 	bl	80010bc <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d302      	bcc.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x32>
 8003e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d13f      	bne.n	8003ef8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e98:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e6      	bne.n	8003e78 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	663b      	str	r3, [r7, #96]	; 0x60
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e068      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d050      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f14:	d148      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f1e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3308      	adds	r3, #8
 8003f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f72:	623a      	str	r2, [r7, #32]
 8003f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e010      	b.n	8003fca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	f43f af48 	beq.w	8003e58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3770      	adds	r7, #112	; 0x70
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b084      	sub	sp, #16
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	f107 001c 	add.w	r0, r7, #28
 8003fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d120      	bne.n	800402e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <USB_CoreInit+0xac>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004012:	2b01      	cmp	r3, #1
 8004014:	d105      	bne.n	8004022 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fa96 	bl	8004554 <USB_CoreReset>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]
 800402c:	e010      	b.n	8004050 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa8a 	bl	8004554 <USB_CoreReset>
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	2b01      	cmp	r3, #1
 8004054:	d10b      	bne.n	800406e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f043 0206 	orr.w	r2, r3, #6
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f043 0220 	orr.w	r2, r3, #32
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800407a:	b004      	add	sp, #16
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	ffbdffbf 	.word	0xffbdffbf

08004084 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f023 0201 	bic.w	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040c2:	78fb      	ldrb	r3, [r7, #3]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d115      	bne.n	80040f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040d4:	2001      	movs	r0, #1
 80040d6:	f7fc fffd 	bl	80010d4 <HAL_Delay>
      ms++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3301      	adds	r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa29 	bl	8004538 <USB_GetMode>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d01e      	beq.n	800412a <USB_SetCurrentMode+0x84>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b31      	cmp	r3, #49	; 0x31
 80040f0:	d9f0      	bls.n	80040d4 <USB_SetCurrentMode+0x2e>
 80040f2:	e01a      	b.n	800412a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d115      	bne.n	8004126 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004106:	2001      	movs	r0, #1
 8004108:	f7fc ffe4 	bl	80010d4 <HAL_Delay>
      ms++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa10 	bl	8004538 <USB_GetMode>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <USB_SetCurrentMode+0x84>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b31      	cmp	r3, #49	; 0x31
 8004122:	d9f0      	bls.n	8004106 <USB_SetCurrentMode+0x60>
 8004124:	e001      	b.n	800412a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e005      	b.n	8004136 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2b32      	cmp	r3, #50	; 0x32
 800412e:	d101      	bne.n	8004134 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004140:	b084      	sub	sp, #16
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800414e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	e009      	b.n	8004174 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3340      	adds	r3, #64	; 0x40
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	2200      	movs	r2, #0
 800416c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3301      	adds	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b0e      	cmp	r3, #14
 8004178:	d9f2      	bls.n	8004160 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11c      	bne.n	80041ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418e:	f043 0302 	orr.w	r3, r3, #2
 8004192:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e005      	b.n	80041c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041cc:	461a      	mov	r2, r3
 80041ce:	2300      	movs	r3, #0
 80041d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d8:	4619      	mov	r1, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e0:	461a      	mov	r2, r3
 80041e2:	680b      	ldr	r3, [r1, #0]
 80041e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10c      	bne.n	8004206 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041f2:	2100      	movs	r1, #0
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f965 	bl	80044c4 <USB_SetDevSpeed>
 80041fa:	e008      	b.n	800420e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041fc:	2101      	movs	r1, #1
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f960 	bl	80044c4 <USB_SetDevSpeed>
 8004204:	e003      	b.n	800420e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004206:	2103      	movs	r1, #3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f95b 	bl	80044c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800420e:	2110      	movs	r1, #16
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f8f3 	bl	80043fc <USB_FlushTxFifo>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f91f 	bl	8004464 <USB_FlushRxFifo>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	461a      	mov	r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	461a      	mov	r2, r3
 8004244:	2300      	movs	r3, #0
 8004246:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004254:	2300      	movs	r3, #0
 8004256:	613b      	str	r3, [r7, #16]
 8004258:	e043      	b.n	80042e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800426c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004270:	d118      	bne.n	80042a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	461a      	mov	r2, r3
 8004286:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e013      	b.n	80042b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429a:	461a      	mov	r2, r3
 800429c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e008      	b.n	80042b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	3301      	adds	r3, #1
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b7      	bcc.n	800425a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	e043      	b.n	8004378 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004306:	d118      	bne.n	800433a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	461a      	mov	r2, r3
 800431c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e013      	b.n	800434c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e008      	b.n	800434c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4413      	add	r3, r2
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436a:	461a      	mov	r2, r3
 800436c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3301      	adds	r3, #1
 8004376:	613b      	str	r3, [r7, #16]
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d3b7      	bcc.n	80042f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004392:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	f043 0210 	orr.w	r2, r3, #16
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699a      	ldr	r2, [r3, #24]
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <USB_DevInit+0x2b4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f043 0208 	orr.w	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699a      	ldr	r2, [r3, #24]
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <USB_DevInit+0x2b8>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f0:	b004      	add	sp, #16
 80043f2:	4770      	bx	lr
 80043f4:	803c3800 	.word	0x803c3800
 80043f8:	40000004 	.word	0x40000004

080043fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a13      	ldr	r2, [pc, #76]	; (8004460 <USB_FlushTxFifo+0x64>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e01b      	b.n	8004454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	daf2      	bge.n	800440a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	019b      	lsls	r3, r3, #6
 800442c:	f043 0220 	orr.w	r2, r3, #32
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a08      	ldr	r2, [pc, #32]	; (8004460 <USB_FlushTxFifo+0x64>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d901      	bls.n	8004446 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e006      	b.n	8004454 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d0f0      	beq.n	8004434 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	00030d40 	.word	0x00030d40

08004464 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a11      	ldr	r2, [pc, #68]	; (80044c0 <USB_FlushRxFifo+0x5c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e018      	b.n	80044b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	daf2      	bge.n	8004470 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2210      	movs	r2, #16
 8004492:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <USB_FlushRxFifo+0x5c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e006      	b.n	80044b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b10      	cmp	r3, #16
 80044b0:	d0f0      	beq.n	8004494 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	00030d40 	.word	0x00030d40

080044c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004510:	f023 0303 	bic.w	r3, r3, #3
 8004514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3301      	adds	r3, #1
 8004564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <USB_CoreReset+0x64>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e01b      	b.n	80045aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	daf2      	bge.n	8004560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f043 0201 	orr.w	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3301      	adds	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <USB_CoreReset+0x64>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d901      	bls.n	800459c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e006      	b.n	80045aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d0f0      	beq.n	800458a <USB_CoreReset+0x36>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	00030d40 	.word	0x00030d40

080045bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80045ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045ce:	2b84      	cmp	r3, #132	; 0x84
 80045d0:	d005      	beq.n	80045de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80045d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	3303      	adds	r3, #3
 80045dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80045de:	68fb      	ldr	r3, [r7, #12]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f2:	f3ef 8305 	mrs	r3, IPSR
 80045f6:	607b      	str	r3, [r7, #4]
  return(result);
 80045f8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004614:	f001 f936 	bl	8005884 <vTaskStartScheduler>
  
  return osOK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}

0800461e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800461e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004620:	b089      	sub	sp, #36	; 0x24
 8004622:	af04      	add	r7, sp, #16
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <osThreadCreate+0x54>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01c      	beq.n	8004672 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685c      	ldr	r4, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691e      	ldr	r6, [r3, #16]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffb6 	bl	80045bc <makeFreeRtosPriority>
 8004650:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800465a:	9202      	str	r2, [sp, #8]
 800465c:	9301      	str	r3, [sp, #4]
 800465e:	9100      	str	r1, [sp, #0]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	4632      	mov	r2, r6
 8004664:	4629      	mov	r1, r5
 8004666:	4620      	mov	r0, r4
 8004668:	f000 ff3a 	bl	80054e0 <xTaskCreateStatic>
 800466c:	4603      	mov	r3, r0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e01c      	b.n	80046ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685c      	ldr	r4, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ff98 	bl	80045bc <makeFreeRtosPriority>
 800468c:	4602      	mov	r2, r0
 800468e:	f107 030c 	add.w	r3, r7, #12
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	9200      	str	r2, [sp, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	4632      	mov	r2, r6
 800469a:	4629      	mov	r1, r5
 800469c:	4620      	mov	r0, r4
 800469e:	f000 ff82 	bl	80055a6 <xTaskCreate>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d001      	beq.n	80046ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046ac:	68fb      	ldr	r3, [r7, #12]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <osDelay+0x16>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	e000      	b.n	80046ce <osDelay+0x18>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f8a2 	bl	8005818 <vTaskDelay>
  
  return osOK;
 80046d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80046de:	b590      	push	{r4, r7, lr}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af02      	add	r7, sp, #8
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d011      	beq.n	8004714 <osMessageCreate+0x36>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00d      	beq.n	8004714 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2400      	movs	r4, #0
 800470a:	9400      	str	r4, [sp, #0]
 800470c:	f000 f9e2 	bl	8004ad4 <xQueueGenericCreateStatic>
 8004710:	4603      	mov	r3, r0
 8004712:	e008      	b.n	8004726 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	4619      	mov	r1, r3
 8004720:	f000 fa5a 	bl	8004bd8 <xQueueGenericCreate>
 8004724:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	bd90      	pop	{r4, r7, pc}
	...

08004730 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <osMessagePut+0x1e>
    ticks = 1;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800474e:	f7ff ff4d 	bl	80045ec <inHandlerMode>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d018      	beq.n	800478a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004758:	f107 0210 	add.w	r2, r7, #16
 800475c:	f107 0108 	add.w	r1, r7, #8
 8004760:	2300      	movs	r3, #0
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fba0 	bl	8004ea8 <xQueueGenericSendFromISR>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d001      	beq.n	8004772 <osMessagePut+0x42>
      return osErrorOS;
 800476e:	23ff      	movs	r3, #255	; 0xff
 8004770:	e018      	b.n	80047a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d014      	beq.n	80047a2 <osMessagePut+0x72>
 8004778:	4b0c      	ldr	r3, [pc, #48]	; (80047ac <osMessagePut+0x7c>)
 800477a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	e00b      	b.n	80047a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800478a:	f107 0108 	add.w	r1, r7, #8
 800478e:	2300      	movs	r3, #0
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa82 	bl	8004c9c <xQueueGenericSend>
 8004798:	4603      	mov	r3, r0
 800479a:	2b01      	cmp	r3, #1
 800479c:	d001      	beq.n	80047a2 <osMessagePut+0x72>
      return osErrorOS;
 800479e:	23ff      	movs	r3, #255	; 0xff
 80047a0:	e000      	b.n	80047a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	e000ed04 	.word	0xe000ed04

080047b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b08b      	sub	sp, #44	; 0x2c
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80047ca:	2380      	movs	r3, #128	; 0x80
 80047cc:	617b      	str	r3, [r7, #20]
    return event;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	461c      	mov	r4, r3
 80047d2:	f107 0314 	add.w	r3, r7, #20
 80047d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80047da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80047de:	e054      	b.n	800488a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ee:	d103      	bne.n	80047f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80047f0:	f04f 33ff 	mov.w	r3, #4294967295
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
 80047f6:	e009      	b.n	800480c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <osMessageGet+0x5c>
      ticks = 1;
 8004808:	2301      	movs	r3, #1
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800480c:	f7ff feee 	bl	80045ec <inHandlerMode>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01c      	beq.n	8004850 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004816:	f107 0220 	add.w	r2, r7, #32
 800481a:	f107 0314 	add.w	r3, r7, #20
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	68b8      	ldr	r0, [r7, #8]
 8004824:	f000 fcc6 	bl	80051b4 <xQueueReceiveFromISR>
 8004828:	4603      	mov	r3, r0
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800482e:	2310      	movs	r3, #16
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	e001      	b.n	8004838 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d01d      	beq.n	800487a <osMessageGet+0xca>
 800483e:	4b15      	ldr	r3, [pc, #84]	; (8004894 <osMessageGet+0xe4>)
 8004840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	e014      	b.n	800487a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004850:	f107 0314 	add.w	r3, r7, #20
 8004854:	3304      	adds	r3, #4
 8004856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004858:	4619      	mov	r1, r3
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f000 fbc4 	bl	8004fe8 <xQueueReceive>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004866:	2310      	movs	r3, #16
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e006      	b.n	800487a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <osMessageGet+0xc6>
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <osMessageGet+0xc8>
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	461c      	mov	r4, r3
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004886:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	372c      	adds	r7, #44	; 0x2c
 800488e:	46bd      	mov	sp, r7
 8004890:	bd90      	pop	{r4, r7, pc}
 8004892:	bf00      	nop
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f103 0208 	add.w	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f103 0208 	add.w	r2, r3, #8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f103 0208 	add.w	r2, r3, #8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	601a      	str	r2, [r3, #0]
}
 800492e:	bf00      	nop
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004950:	d103      	bne.n	800495a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e00c      	b.n	8004974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3308      	adds	r3, #8
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	e002      	b.n	8004968 <vListInsert+0x2e>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	429a      	cmp	r2, r3
 8004972:	d2f6      	bcs.n	8004962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6892      	ldr	r2, [r2, #8]
 80049c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6852      	ldr	r2, [r2, #4]
 80049cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d103      	bne.n	80049e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	1e5a      	subs	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	b672      	cpsid	i
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	b662      	cpsie	i
 8004a28:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004a2e:	f001 fd55 	bl	80064dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a3e:	fb01 f303 	mul.w	r3, r1, r3
 8004a42:	441a      	add	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	441a      	add	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	22ff      	movs	r2, #255	; 0xff
 8004a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d114      	bne.n	8004aae <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01a      	beq.n	8004ac2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	3310      	adds	r3, #16
 8004a90:	4618      	mov	r0, r3
 8004a92:	f001 f945 	bl	8005d20 <xTaskRemoveFromEventList>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <xQueueGenericReset+0xd0>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	e009      	b.n	8004ac2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3310      	adds	r3, #16
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fef0 	bl	8004898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3324      	adds	r3, #36	; 0x24
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff feeb 	bl	8004898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ac2:	f001 fd3f 	bl	8006544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	e000ed04 	.word	0xe000ed04

08004ad4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08e      	sub	sp, #56	; 0x38
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aec:	b672      	cpsid	i
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	b662      	cpsie	i
 8004afc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10c      	bne.n	8004b22 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	b672      	cpsid	i
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	b662      	cpsie	i
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b1e:	bf00      	nop
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <xQueueGenericCreateStatic+0x5a>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <xQueueGenericCreateStatic+0x5e>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueGenericCreateStatic+0x60>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10c      	bne.n	8004b52 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	b672      	cpsid	i
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	b662      	cpsie	i
 8004b4c:	623b      	str	r3, [r7, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <xQueueGenericCreateStatic+0x8a>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <xQueueGenericCreateStatic+0x8e>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <xQueueGenericCreateStatic+0x90>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10c      	bne.n	8004b82 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	b672      	cpsid	i
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	b662      	cpsie	i
 8004b7c:	61fb      	str	r3, [r7, #28]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b82:	2348      	movs	r3, #72	; 0x48
 8004b84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	2b48      	cmp	r3, #72	; 0x48
 8004b8a:	d00c      	beq.n	8004ba6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	b672      	cpsid	i
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	b662      	cpsie	i
 8004ba0:	61bb      	str	r3, [r7, #24]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ba6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00d      	beq.n	8004bce <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f847 	bl	8004c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3730      	adds	r7, #48	; 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	4613      	mov	r3, r2
 8004be4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10c      	bne.n	8004c06 <xQueueGenericCreate+0x2e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	b672      	cpsid	i
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	b662      	cpsie	i
 8004c00:	613b      	str	r3, [r7, #16]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d102      	bne.n	8004c12 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
 8004c10:	e004      	b.n	8004c1c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	3348      	adds	r3, #72	; 0x48
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fd87 	bl	8006734 <pvPortMalloc>
 8004c26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d011      	beq.n	8004c52 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3348      	adds	r3, #72	; 0x48
 8004c36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c40:	79fa      	ldrb	r2, [r7, #7]
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4613      	mov	r3, r2
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f805 	bl	8004c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c52:	69bb      	ldr	r3, [r7, #24]
	}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d103      	bne.n	8004c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	69b8      	ldr	r0, [r7, #24]
 8004c8e:	f7ff feb7 	bl	8004a00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <xQueueGenericSend+0x36>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	b672      	cpsid	i
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	b662      	cpsie	i
 8004ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cce:	bf00      	nop
 8004cd0:	e7fe      	b.n	8004cd0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d103      	bne.n	8004ce0 <xQueueGenericSend+0x44>
 8004cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSend+0x48>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <xQueueGenericSend+0x4a>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10c      	bne.n	8004d04 <xQueueGenericSend+0x68>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	b672      	cpsid	i
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	b662      	cpsie	i
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSend+0x76>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSend+0x7a>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSend+0x7c>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <xQueueGenericSend+0x9a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	b672      	cpsid	i
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	b662      	cpsie	i
 8004d30:	623b      	str	r3, [r7, #32]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d36:	f001 f9b7 	bl	80060a8 <xTaskGetSchedulerState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <xQueueGenericSend+0xaa>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <xQueueGenericSend+0xae>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <xQueueGenericSend+0xb0>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <xQueueGenericSend+0xce>
	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	b672      	cpsid	i
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	b662      	cpsie	i
 8004d64:	61fb      	str	r3, [r7, #28]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d6a:	f001 fbb7 	bl	80064dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <xQueueGenericSend+0xe4>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d129      	bne.n	8004dd4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d86:	f000 fa9b 	bl	80052c0 <prvCopyDataToQueue>
 8004d8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	3324      	adds	r3, #36	; 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 ffc1 	bl	8005d20 <xTaskRemoveFromEventList>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d013      	beq.n	8004dcc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004da4:	4b3f      	ldr	r3, [pc, #252]	; (8004ea4 <xQueueGenericSend+0x208>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	e00a      	b.n	8004dcc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d007      	beq.n	8004dcc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004dbc:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <xQueueGenericSend+0x208>)
 8004dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004dcc:	f001 fbba 	bl	8006544 <vPortExitCritical>
				return pdPASS;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e063      	b.n	8004e9c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dda:	f001 fbb3 	bl	8006544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e05c      	b.n	8004e9c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fffb 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004df6:	f001 fba5 	bl	8006544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dfa:	f000 fda7 	bl	800594c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dfe:	f001 fb6d 	bl	80064dc <vPortEnterCritical>
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e08:	b25b      	sxtb	r3, r3
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d103      	bne.n	8004e18 <xQueueGenericSend+0x17c>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d103      	bne.n	8004e2e <xQueueGenericSend+0x192>
 8004e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e2e:	f001 fb89 	bl	8006544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e32:	1d3a      	adds	r2, r7, #4
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ffea 	bl	8005e14 <xTaskCheckForTimeOut>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d124      	bne.n	8004e90 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e48:	f000 fb32 	bl	80054b0 <prvIsQueueFull>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	3310      	adds	r3, #16
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	4611      	mov	r1, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 ff3a 	bl	8005cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e62:	f000 fabd 	bl	80053e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e66:	f000 fd7f 	bl	8005968 <xTaskResumeAll>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f47f af7c 	bne.w	8004d6a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <xQueueGenericSend+0x208>)
 8004e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	e772      	b.n	8004d6a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 faab 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e8a:	f000 fd6d 	bl	8005968 <xTaskResumeAll>
 8004e8e:	e76c      	b.n	8004d6a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e92:	f000 faa5 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e96:	f000 fd67 	bl	8005968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3738      	adds	r7, #56	; 0x38
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	e000ed04 	.word	0xe000ed04

08004ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08e      	sub	sp, #56	; 0x38
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	b672      	cpsid	i
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	b662      	cpsie	i
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ed6:	bf00      	nop
 8004ed8:	e7fe      	b.n	8004ed8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <xQueueGenericSendFromISR+0x40>
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <xQueueGenericSendFromISR+0x44>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <xQueueGenericSendFromISR+0x46>
 8004eec:	2300      	movs	r3, #0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	b672      	cpsid	i
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	b662      	cpsie	i
 8004f06:	623b      	str	r3, [r7, #32]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d103      	bne.n	8004f1a <xQueueGenericSendFromISR+0x72>
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <xQueueGenericSendFromISR+0x76>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <xQueueGenericSendFromISR+0x78>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10c      	bne.n	8004f3e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	b672      	cpsid	i
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	b662      	cpsie	i
 8004f38:	61fb      	str	r3, [r7, #28]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f3e:	f001 fbb5 	bl	80066ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f42:	f3ef 8211 	mrs	r2, BASEPRI
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	b672      	cpsid	i
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	b662      	cpsie	i
 8004f5a:	61ba      	str	r2, [r7, #24]
 8004f5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <xQueueGenericSendFromISR+0xcc>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d12c      	bne.n	8004fce <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f84:	f000 f99c 	bl	80052c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d112      	bne.n	8004fb8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d016      	beq.n	8004fc8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	3324      	adds	r3, #36	; 0x24
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 febe 	bl	8005d20 <xTaskRemoveFromEventList>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00b      	beq.n	8004fc8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e007      	b.n	8004fc8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	b25a      	sxtb	r2, r3
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004fcc:	e001      	b.n	8004fd2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3738      	adds	r7, #56	; 0x38
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10c      	bne.n	800501c <xQueueReceive+0x34>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	b672      	cpsid	i
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	b662      	cpsie	i
 8005016:	623b      	str	r3, [r7, #32]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <xQueueReceive+0x42>
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueReceive+0x46>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueReceive+0x48>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10c      	bne.n	800504e <xQueueReceive+0x66>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	b672      	cpsid	i
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	b662      	cpsie	i
 8005048:	61fb      	str	r3, [r7, #28]
}
 800504a:	bf00      	nop
 800504c:	e7fe      	b.n	800504c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800504e:	f001 f82b 	bl	80060a8 <xTaskGetSchedulerState>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <xQueueReceive+0x76>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <xQueueReceive+0x7a>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <xQueueReceive+0x7c>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10c      	bne.n	8005082 <xQueueReceive+0x9a>
	__asm volatile
 8005068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506c:	b672      	cpsid	i
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	b662      	cpsie	i
 800507c:	61bb      	str	r3, [r7, #24]
}
 800507e:	bf00      	nop
 8005080:	e7fe      	b.n	8005080 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005082:	f001 fa2b 	bl	80064dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800508c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01f      	beq.n	80050d2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005096:	f000 f97d 	bl	8005394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	1e5a      	subs	r2, r3, #1
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00f      	beq.n	80050ca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	3310      	adds	r3, #16
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fe36 	bl	8005d20 <xTaskRemoveFromEventList>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <xQueueReceive+0x1c8>)
 80050bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ca:	f001 fa3b 	bl	8006544 <vPortExitCritical>
				return pdPASS;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e069      	b.n	80051a6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050d8:	f001 fa34 	bl	8006544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050dc:	2300      	movs	r3, #0
 80050de:	e062      	b.n	80051a6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050e6:	f107 0310 	add.w	r3, r7, #16
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fe7c 	bl	8005de8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050f4:	f001 fa26 	bl	8006544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050f8:	f000 fc28 	bl	800594c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050fc:	f001 f9ee 	bl	80064dc <vPortEnterCritical>
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005106:	b25b      	sxtb	r3, r3
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d103      	bne.n	8005116 <xQueueReceive+0x12e>
 800510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511c:	b25b      	sxtb	r3, r3
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d103      	bne.n	800512c <xQueueReceive+0x144>
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800512c:	f001 fa0a 	bl	8006544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005130:	1d3a      	adds	r2, r7, #4
 8005132:	f107 0310 	add.w	r3, r7, #16
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fe6b 	bl	8005e14 <xTaskCheckForTimeOut>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d123      	bne.n	800518c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005146:	f000 f99d 	bl	8005484 <prvIsQueueEmpty>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	3324      	adds	r3, #36	; 0x24
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4611      	mov	r1, r2
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fdbb 	bl	8005cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800515e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005160:	f000 f93e 	bl	80053e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005164:	f000 fc00 	bl	8005968 <xTaskResumeAll>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d189      	bne.n	8005082 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <xQueueReceive+0x1c8>)
 8005170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	e780      	b.n	8005082 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005182:	f000 f92d 	bl	80053e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005186:	f000 fbef 	bl	8005968 <xTaskResumeAll>
 800518a:	e77a      	b.n	8005082 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800518c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800518e:	f000 f927 	bl	80053e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005192:	f000 fbe9 	bl	8005968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005198:	f000 f974 	bl	8005484 <prvIsQueueEmpty>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f43f af6f 	beq.w	8005082 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80051a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3730      	adds	r7, #48	; 0x30
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	e000ed04 	.word	0xe000ed04

080051b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b08e      	sub	sp, #56	; 0x38
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10c      	bne.n	80051e4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	b672      	cpsid	i
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	b662      	cpsie	i
 80051de:	623b      	str	r3, [r7, #32]
}
 80051e0:	bf00      	nop
 80051e2:	e7fe      	b.n	80051e2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <xQueueReceiveFromISR+0x3e>
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xQueueReceiveFromISR+0x42>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueReceiveFromISR+0x44>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10c      	bne.n	8005216 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	b672      	cpsid	i
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	b662      	cpsie	i
 8005210:	61fb      	str	r3, [r7, #28]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005216:	f001 fa49 	bl	80066ac <vPortValidateInterruptPriority>
	__asm volatile
 800521a:	f3ef 8211 	mrs	r2, BASEPRI
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	b672      	cpsid	i
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	b662      	cpsie	i
 8005232:	61ba      	str	r2, [r7, #24]
 8005234:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005236:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02f      	beq.n	80052a6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005254:	f000 f89e 	bl	8005394 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d112      	bne.n	8005290 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d016      	beq.n	80052a0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	3310      	adds	r3, #16
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fd52 	bl	8005d20 <xTaskRemoveFromEventList>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00e      	beq.n	80052a0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e007      	b.n	80052a0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005294:	3301      	adds	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	b25a      	sxtb	r2, r3
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34
 80052a4:	e001      	b.n	80052aa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	637b      	str	r3, [r7, #52]	; 0x34
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f383 8811 	msr	BASEPRI, r3
}
 80052b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3738      	adds	r7, #56	; 0x38
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10d      	bne.n	80052fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d14d      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fefa 	bl	80060e4 <xTaskPriorityDisinherit>
 80052f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	e043      	b.n	8005382 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d119      	bne.n	8005334 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6858      	ldr	r0, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	461a      	mov	r2, r3
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	f001 fc22 	bl	8006b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d32b      	bcc.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]
 8005332:	e026      	b.n	8005382 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68d8      	ldr	r0, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	461a      	mov	r2, r3
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	f001 fc08 	bl	8006b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	425b      	negs	r3, r3
 800534e:	441a      	add	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d207      	bcs.n	8005370 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	425b      	negs	r3, r3
 800536a:	441a      	add	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d105      	bne.n	8005382 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d018      	beq.n	80053d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	441a      	add	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d303      	bcc.n	80053c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68d9      	ldr	r1, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	461a      	mov	r2, r3
 80053d2:	6838      	ldr	r0, [r7, #0]
 80053d4:	f001 fbbe 	bl	8006b54 <memcpy>
	}
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053e8:	f001 f878 	bl	80064dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053f4:	e011      	b.n	800541a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d012      	beq.n	8005424 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3324      	adds	r3, #36	; 0x24
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fc8c 	bl	8005d20 <xTaskRemoveFromEventList>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800540e:	f000 fd67 	bl	8005ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	3b01      	subs	r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800541a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	dce9      	bgt.n	80053f6 <prvUnlockQueue+0x16>
 8005422:	e000      	b.n	8005426 <prvUnlockQueue+0x46>
					break;
 8005424:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	22ff      	movs	r2, #255	; 0xff
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800542e:	f001 f889 	bl	8006544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005432:	f001 f853 	bl	80064dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800543c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800543e:	e011      	b.n	8005464 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f000 fc67 	bl	8005d20 <xTaskRemoveFromEventList>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005458:	f000 fd42 	bl	8005ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	3b01      	subs	r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dce9      	bgt.n	8005440 <prvUnlockQueue+0x60>
 800546c:	e000      	b.n	8005470 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800546e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005478:	f001 f864 	bl	8006544 <vPortExitCritical>
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800548c:	f001 f826 	bl	80064dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005494:	2b00      	cmp	r3, #0
 8005496:	d102      	bne.n	800549e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f001 f84f 	bl	8006544 <vPortExitCritical>

	return xReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b8:	f001 f810 	bl	80064dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d102      	bne.n	80054ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e001      	b.n	80054d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054d2:	f001 f837 	bl	8006544 <vPortExitCritical>

	return xReturn;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af04      	add	r7, sp, #16
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <xTaskCreateStatic+0x2e>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	b672      	cpsid	i
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	b662      	cpsie	i
 8005508:	623b      	str	r3, [r7, #32]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10c      	bne.n	800552e <xTaskCreateStatic+0x4e>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005518:	b672      	cpsid	i
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	b662      	cpsie	i
 8005528:	61fb      	str	r3, [r7, #28]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800552e:	2354      	movs	r3, #84	; 0x54
 8005530:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b54      	cmp	r3, #84	; 0x54
 8005536:	d00c      	beq.n	8005552 <xTaskCreateStatic+0x72>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	b672      	cpsid	i
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	b662      	cpsie	i
 800554c:	61bb      	str	r3, [r7, #24]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005552:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01e      	beq.n	8005598 <xTaskCreateStatic+0xb8>
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01b      	beq.n	8005598 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005568:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2202      	movs	r2, #2
 800556e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005572:	2300      	movs	r3, #0
 8005574:	9303      	str	r3, [sp, #12]
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	9302      	str	r3, [sp, #8]
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f850 	bl	8005630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005592:	f000 f8d7 	bl	8005744 <prvAddNewTaskToReadyList>
 8005596:	e001      	b.n	800559c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800559c:	697b      	ldr	r3, [r7, #20]
	}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08c      	sub	sp, #48	; 0x30
 80055aa:	af04      	add	r7, sp, #16
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	603b      	str	r3, [r7, #0]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f8ba 	bl	8006734 <pvPortMalloc>
 80055c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00e      	beq.n	80055e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055c8:	2054      	movs	r0, #84	; 0x54
 80055ca:	f001 f8b3 	bl	8006734 <pvPortMalloc>
 80055ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
 80055dc:	e005      	b.n	80055ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055de:	6978      	ldr	r0, [r7, #20]
 80055e0:	f001 f972 	bl	80068c8 <vPortFree>
 80055e4:	e001      	b.n	80055ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d017      	beq.n	8005620 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055f8:	88fa      	ldrh	r2, [r7, #6]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9303      	str	r3, [sp, #12]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	9302      	str	r3, [sp, #8]
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f80e 	bl	8005630 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005614:	69f8      	ldr	r0, [r7, #28]
 8005616:	f000 f895 	bl	8005744 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800561a:	2301      	movs	r3, #1
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	e002      	b.n	8005626 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005620:	f04f 33ff 	mov.w	r3, #4294967295
 8005624:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005626:	69bb      	ldr	r3, [r7, #24]
	}
 8005628:	4618      	mov	r0, r3
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005648:	440b      	add	r3, r1
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f023 0307 	bic.w	r3, r3, #7
 8005656:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00c      	beq.n	800567c <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	b672      	cpsid	i
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	b662      	cpsie	i
 8005676:	617b      	str	r3, [r7, #20]
}
 8005678:	bf00      	nop
 800567a:	e7fe      	b.n	800567a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d01f      	beq.n	80056c2 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005682:	2300      	movs	r3, #0
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	e012      	b.n	80056ae <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	7819      	ldrb	r1, [r3, #0]
 8005690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	3334      	adds	r3, #52	; 0x34
 8005698:	460a      	mov	r2, r1
 800569a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d006      	beq.n	80056b6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	d9e9      	bls.n	8005688 <prvInitialiseNewTask+0x58>
 80056b4:	e000      	b.n	80056b8 <prvInitialiseNewTask+0x88>
			{
				break;
 80056b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c0:	e003      	b.n	80056ca <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	2b06      	cmp	r3, #6
 80056ce:	d901      	bls.n	80056d4 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056d0:	2306      	movs	r3, #6
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	2200      	movs	r2, #0
 80056e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e8:	3304      	adds	r3, #4
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff f8f4 	bl	80048d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	3318      	adds	r3, #24
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff f8ef 	bl	80048d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	f1c3 0207 	rsb	r2, r3, #7
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	2200      	movs	r2, #0
 8005714:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	68f9      	ldr	r1, [r7, #12]
 8005722:	69b8      	ldr	r0, [r7, #24]
 8005724:	f000 fdce 	bl	80062c4 <pxPortInitialiseStack>
 8005728:	4602      	mov	r2, r0
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800574c:	f000 fec6 	bl	80064dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005750:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <prvAddNewTaskToReadyList+0xb8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <prvAddNewTaskToReadyList+0xb8>)
 8005758:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800575a:	4b29      	ldr	r3, [pc, #164]	; (8005800 <prvAddNewTaskToReadyList+0xbc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005762:	4a27      	ldr	r2, [pc, #156]	; (8005800 <prvAddNewTaskToReadyList+0xbc>)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <prvAddNewTaskToReadyList+0xb8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d110      	bne.n	8005792 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005770:	f000 fbda 	bl	8005f28 <prvInitialiseTaskLists>
 8005774:	e00d      	b.n	8005792 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <prvAddNewTaskToReadyList+0xc0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d109      	bne.n	8005792 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800577e:	4b20      	ldr	r3, [pc, #128]	; (8005800 <prvAddNewTaskToReadyList+0xbc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	429a      	cmp	r2, r3
 800578a:	d802      	bhi.n	8005792 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <prvAddNewTaskToReadyList+0xbc>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <prvAddNewTaskToReadyList+0xc4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <prvAddNewTaskToReadyList+0xc4>)
 800579a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	2201      	movs	r2, #1
 80057a2:	409a      	lsls	r2, r3
 80057a4:	4b19      	ldr	r3, [pc, #100]	; (800580c <prvAddNewTaskToReadyList+0xc8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	4a18      	ldr	r2, [pc, #96]	; (800580c <prvAddNewTaskToReadyList+0xc8>)
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	4a15      	ldr	r2, [pc, #84]	; (8005810 <prvAddNewTaskToReadyList+0xcc>)
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f7ff f894 	bl	80048f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057ca:	f000 febb 	bl	8006544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057ce:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <prvAddNewTaskToReadyList+0xc0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00e      	beq.n	80057f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvAddNewTaskToReadyList+0xbc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d207      	bcs.n	80057f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057e4:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <prvAddNewTaskToReadyList+0xd0>)
 80057e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	f3bf 8f4f 	dsb	sy
 80057f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000bb4 	.word	0x20000bb4
 8005800:	20000ab4 	.word	0x20000ab4
 8005804:	20000bc0 	.word	0x20000bc0
 8005808:	20000bd0 	.word	0x20000bd0
 800580c:	20000bbc 	.word	0x20000bbc
 8005810:	20000ab8 	.word	0x20000ab8
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d019      	beq.n	800585e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800582a:	4b14      	ldr	r3, [pc, #80]	; (800587c <vTaskDelay+0x64>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <vTaskDelay+0x34>
	__asm volatile
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	b672      	cpsid	i
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	b662      	cpsie	i
 8005846:	60bb      	str	r3, [r7, #8]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800584c:	f000 f87e 	bl	800594c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005850:	2100      	movs	r1, #0
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fcd0 	bl	80061f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005858:	f000 f886 	bl	8005968 <xTaskResumeAll>
 800585c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d107      	bne.n	8005874 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <vTaskDelay+0x68>)
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000bdc 	.word	0x20000bdc
 8005880:	e000ed04 	.word	0xe000ed04

08005884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	; 0x28
 8005888:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005892:	463a      	mov	r2, r7
 8005894:	1d39      	adds	r1, r7, #4
 8005896:	f107 0308 	add.w	r3, r7, #8
 800589a:	4618      	mov	r0, r3
 800589c:	f7fa fe36 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	9202      	str	r2, [sp, #8]
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	2300      	movs	r3, #0
 80058b0:	460a      	mov	r2, r1
 80058b2:	4920      	ldr	r1, [pc, #128]	; (8005934 <vTaskStartScheduler+0xb0>)
 80058b4:	4820      	ldr	r0, [pc, #128]	; (8005938 <vTaskStartScheduler+0xb4>)
 80058b6:	f7ff fe13 	bl	80054e0 <xTaskCreateStatic>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4a1f      	ldr	r2, [pc, #124]	; (800593c <vTaskStartScheduler+0xb8>)
 80058be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c0:	4b1e      	ldr	r3, [pc, #120]	; (800593c <vTaskStartScheduler+0xb8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e001      	b.n	80058d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d118      	bne.n	800590a <vTaskStartScheduler+0x86>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	b672      	cpsid	i
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	b662      	cpsie	i
 80058ec:	613b      	str	r3, [r7, #16]
}
 80058ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058f0:	4b13      	ldr	r3, [pc, #76]	; (8005940 <vTaskStartScheduler+0xbc>)
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295
 80058f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <vTaskStartScheduler+0xc0>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <vTaskStartScheduler+0xc4>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005904:	f000 fd6c 	bl	80063e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005908:	e010      	b.n	800592c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d10c      	bne.n	800592c <vTaskStartScheduler+0xa8>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	b672      	cpsid	i
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	b662      	cpsie	i
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <vTaskStartScheduler+0xa6>
}
 800592c:	bf00      	nop
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	08006c84 	.word	0x08006c84
 8005938:	08005ef9 	.word	0x08005ef9
 800593c:	20000bd8 	.word	0x20000bd8
 8005940:	20000bd4 	.word	0x20000bd4
 8005944:	20000bc0 	.word	0x20000bc0
 8005948:	20000bb8 	.word	0x20000bb8

0800594c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800594c:	b480      	push	{r7}
 800594e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <vTaskSuspendAll+0x18>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	4a03      	ldr	r2, [pc, #12]	; (8005964 <vTaskSuspendAll+0x18>)
 8005958:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800595a:	bf00      	nop
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	20000bdc 	.word	0x20000bdc

08005968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <xTaskResumeAll+0x118>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10c      	bne.n	8005998 <xTaskResumeAll+0x30>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	b672      	cpsid	i
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	b662      	cpsie	i
 8005992:	603b      	str	r3, [r7, #0]
}
 8005994:	bf00      	nop
 8005996:	e7fe      	b.n	8005996 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005998:	f000 fda0 	bl	80064dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800599c:	4b38      	ldr	r3, [pc, #224]	; (8005a80 <xTaskResumeAll+0x118>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	4a37      	ldr	r2, [pc, #220]	; (8005a80 <xTaskResumeAll+0x118>)
 80059a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <xTaskResumeAll+0x118>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d161      	bne.n	8005a72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059ae:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <xTaskResumeAll+0x11c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d05d      	beq.n	8005a72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059b6:	e02e      	b.n	8005a16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b8:	4b33      	ldr	r3, [pc, #204]	; (8005a88 <xTaskResumeAll+0x120>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3318      	adds	r3, #24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fe fff1 	bl	80049ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fe ffec 	bl	80049ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	2201      	movs	r2, #1
 80059da:	409a      	lsls	r2, r3
 80059dc:	4b2b      	ldr	r3, [pc, #172]	; (8005a8c <xTaskResumeAll+0x124>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <xTaskResumeAll+0x124>)
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4a27      	ldr	r2, [pc, #156]	; (8005a90 <xTaskResumeAll+0x128>)
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7fe ff78 	bl	80048f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a06:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <xTaskResumeAll+0x12c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005a10:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <xTaskResumeAll+0x130>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <xTaskResumeAll+0x120>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1cc      	bne.n	80059b8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a24:	f000 fb20 	bl	8006068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <xTaskResumeAll+0x134>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d010      	beq.n	8005a56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a34:	f000 f836 	bl	8005aa4 <xTaskIncrementTick>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005a3e:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <xTaskResumeAll+0x130>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1f1      	bne.n	8005a34 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005a50:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <xTaskResumeAll+0x134>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a56:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <xTaskResumeAll+0x130>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a62:	4b0f      	ldr	r3, [pc, #60]	; (8005aa0 <xTaskResumeAll+0x138>)
 8005a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a72:	f000 fd67 	bl	8006544 <vPortExitCritical>

	return xAlreadyYielded;
 8005a76:	68bb      	ldr	r3, [r7, #8]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20000bdc 	.word	0x20000bdc
 8005a84:	20000bb4 	.word	0x20000bb4
 8005a88:	20000b74 	.word	0x20000b74
 8005a8c:	20000bbc 	.word	0x20000bbc
 8005a90:	20000ab8 	.word	0x20000ab8
 8005a94:	20000ab4 	.word	0x20000ab4
 8005a98:	20000bc8 	.word	0x20000bc8
 8005a9c:	20000bc4 	.word	0x20000bc4
 8005aa0:	e000ed04 	.word	0xe000ed04

08005aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aae:	4b4f      	ldr	r3, [pc, #316]	; (8005bec <xTaskIncrementTick+0x148>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 808a 	bne.w	8005bcc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <xTaskIncrementTick+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac0:	4a4b      	ldr	r2, [pc, #300]	; (8005bf0 <xTaskIncrementTick+0x14c>)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d122      	bne.n	8005b12 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005acc:	4b49      	ldr	r3, [pc, #292]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ada:	b672      	cpsid	i
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	b662      	cpsie	i
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskIncrementTick+0x4a>
 8005af0:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <xTaskIncrementTick+0x154>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4a3e      	ldr	r2, [pc, #248]	; (8005bf8 <xTaskIncrementTick+0x154>)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <xTaskIncrementTick+0x158>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <xTaskIncrementTick+0x158>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	f000 faab 	bl	8006068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d348      	bcc.n	8005bae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1c:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	601a      	str	r2, [r3, #0]
					break;
 8005b2e:	e03e      	b.n	8005bae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b30:	4b30      	ldr	r3, [pc, #192]	; (8005bf4 <xTaskIncrementTick+0x150>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d203      	bcs.n	8005b50 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b48:	4a2d      	ldr	r2, [pc, #180]	; (8005c00 <xTaskIncrementTick+0x15c>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b4e:	e02e      	b.n	8005bae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe ff29 	bl	80049ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3318      	adds	r3, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe ff20 	bl	80049ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <xTaskIncrementTick+0x160>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <xTaskIncrementTick+0x160>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe feac 	bl	80048f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d3b9      	bcc.n	8005b1c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bac:	e7b6      	b.n	8005b1c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <xTaskIncrementTick+0x168>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4914      	ldr	r1, [pc, #80]	; (8005c08 <xTaskIncrementTick+0x164>)
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d907      	bls.n	8005bd6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e004      	b.n	8005bd6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005bcc:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <xTaskIncrementTick+0x16c>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <xTaskIncrementTick+0x16c>)
 8005bd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <xTaskIncrementTick+0x170>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000bdc 	.word	0x20000bdc
 8005bf0:	20000bb8 	.word	0x20000bb8
 8005bf4:	20000b6c 	.word	0x20000b6c
 8005bf8:	20000b70 	.word	0x20000b70
 8005bfc:	20000bcc 	.word	0x20000bcc
 8005c00:	20000bd4 	.word	0x20000bd4
 8005c04:	20000bbc 	.word	0x20000bbc
 8005c08:	20000ab8 	.word	0x20000ab8
 8005c0c:	20000ab4 	.word	0x20000ab4
 8005c10:	20000bc4 	.word	0x20000bc4
 8005c14:	20000bc8 	.word	0x20000bc8

08005c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c1e:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <vTaskSwitchContext+0xa8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c26:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <vTaskSwitchContext+0xac>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c2c:	e041      	b.n	8005cb2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <vTaskSwitchContext+0xac>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <vTaskSwitchContext+0xb0>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	fab3 f383 	clz	r3, r3
 8005c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	f1c3 031f 	rsb	r3, r3, #31
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	4920      	ldr	r1, [pc, #128]	; (8005ccc <vTaskSwitchContext+0xb4>)
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10c      	bne.n	8005c78 <vTaskSwitchContext+0x60>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	b672      	cpsid	i
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	b662      	cpsie	i
 8005c72:	607b      	str	r3, [r7, #4]
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <vTaskSwitchContext+0x5e>
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a12      	ldr	r2, [pc, #72]	; (8005ccc <vTaskSwitchContext+0xb4>)
 8005c84:	4413      	add	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d104      	bne.n	8005ca8 <vTaskSwitchContext+0x90>
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <vTaskSwitchContext+0xb8>)
 8005cb0:	6013      	str	r3, [r2, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	371c      	adds	r7, #28
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	20000bdc 	.word	0x20000bdc
 8005cc4:	20000bc8 	.word	0x20000bc8
 8005cc8:	20000bbc 	.word	0x20000bbc
 8005ccc:	20000ab8 	.word	0x20000ab8
 8005cd0:	20000ab4 	.word	0x20000ab4

08005cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10c      	bne.n	8005cfe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	b672      	cpsid	i
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	b662      	cpsie	i
 8005cf8:	60fb      	str	r3, [r7, #12]
}
 8005cfa:	bf00      	nop
 8005cfc:	e7fe      	b.n	8005cfc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <vTaskPlaceOnEventList+0x48>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe fe17 	bl	800493a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	6838      	ldr	r0, [r7, #0]
 8005d10:	f000 fa72 	bl	80061f8 <prvAddCurrentTaskToDelayedList>
}
 8005d14:	bf00      	nop
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000ab4 	.word	0x20000ab4

08005d20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10c      	bne.n	8005d50 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	b672      	cpsid	i
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	b662      	cpsie	i
 8005d4a:	60fb      	str	r3, [r7, #12]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	3318      	adds	r3, #24
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe fe29 	bl	80049ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <xTaskRemoveFromEventList+0xb0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d11c      	bne.n	8005d9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	3304      	adds	r3, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fe20 	bl	80049ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	2201      	movs	r2, #1
 8005d72:	409a      	lsls	r2, r3
 8005d74:	4b17      	ldr	r3, [pc, #92]	; (8005dd4 <xTaskRemoveFromEventList+0xb4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <xTaskRemoveFromEventList+0xb4>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <xTaskRemoveFromEventList+0xb8>)
 8005d8c:	441a      	add	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3304      	adds	r3, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	f7fe fdac 	bl	80048f2 <vListInsertEnd>
 8005d9a:	e005      	b.n	8005da8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	3318      	adds	r3, #24
 8005da0:	4619      	mov	r1, r3
 8005da2:	480e      	ldr	r0, [pc, #56]	; (8005ddc <xTaskRemoveFromEventList+0xbc>)
 8005da4:	f7fe fda5 	bl	80048f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dac:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <xTaskRemoveFromEventList+0xc0>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d905      	bls.n	8005dc2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005db6:	2301      	movs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dba:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <xTaskRemoveFromEventList+0xc4>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e001      	b.n	8005dc6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dc6:	697b      	ldr	r3, [r7, #20]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20000bdc 	.word	0x20000bdc
 8005dd4:	20000bbc 	.word	0x20000bbc
 8005dd8:	20000ab8 	.word	0x20000ab8
 8005ddc:	20000b74 	.word	0x20000b74
 8005de0:	20000ab4 	.word	0x20000ab4
 8005de4:	20000bc8 	.word	0x20000bc8

08005de8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005df0:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <vTaskInternalSetTimeOutState+0x24>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005df8:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <vTaskInternalSetTimeOutState+0x28>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000bcc 	.word	0x20000bcc
 8005e10:	20000bb8 	.word	0x20000bb8

08005e14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10c      	bne.n	8005e3e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	b672      	cpsid	i
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	b662      	cpsie	i
 8005e38:	613b      	str	r3, [r7, #16]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10c      	bne.n	8005e5e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	b672      	cpsid	i
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	b662      	cpsie	i
 8005e58:	60fb      	str	r3, [r7, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	e7fe      	b.n	8005e5c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8005e5e:	f000 fb3d 	bl	80064dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e62:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <xTaskCheckForTimeOut+0xc4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d102      	bne.n	8005e82 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	e023      	b.n	8005eca <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <xTaskCheckForTimeOut+0xc8>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d007      	beq.n	8005e9e <xTaskCheckForTimeOut+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d302      	bcc.n	8005e9e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e015      	b.n	8005eca <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d20b      	bcs.n	8005ec0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff ff97 	bl	8005de8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
 8005ebe:	e004      	b.n	8005eca <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eca:	f000 fb3b 	bl	8006544 <vPortExitCritical>

	return xReturn;
 8005ece:	69fb      	ldr	r3, [r7, #28]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3720      	adds	r7, #32
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000bb8 	.word	0x20000bb8
 8005edc:	20000bcc 	.word	0x20000bcc

08005ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <vTaskMissedYield+0x14>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
}
 8005eea:	bf00      	nop
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000bc8 	.word	0x20000bc8

08005ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005f00:	f000 f852 	bl	8005fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <prvIdleTask+0x28>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d9f9      	bls.n	8005f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <prvIdleTask+0x2c>)
 8005f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	f3bf 8f4f 	dsb	sy
 8005f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f1c:	e7f0      	b.n	8005f00 <prvIdleTask+0x8>
 8005f1e:	bf00      	nop
 8005f20:	20000ab8 	.word	0x20000ab8
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f2e:	2300      	movs	r3, #0
 8005f30:	607b      	str	r3, [r7, #4]
 8005f32:	e00c      	b.n	8005f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4a12      	ldr	r2, [pc, #72]	; (8005f88 <prvInitialiseTaskLists+0x60>)
 8005f40:	4413      	add	r3, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fca8 	bl	8004898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b06      	cmp	r3, #6
 8005f52:	d9ef      	bls.n	8005f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f54:	480d      	ldr	r0, [pc, #52]	; (8005f8c <prvInitialiseTaskLists+0x64>)
 8005f56:	f7fe fc9f 	bl	8004898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f5a:	480d      	ldr	r0, [pc, #52]	; (8005f90 <prvInitialiseTaskLists+0x68>)
 8005f5c:	f7fe fc9c 	bl	8004898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f60:	480c      	ldr	r0, [pc, #48]	; (8005f94 <prvInitialiseTaskLists+0x6c>)
 8005f62:	f7fe fc99 	bl	8004898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f66:	480c      	ldr	r0, [pc, #48]	; (8005f98 <prvInitialiseTaskLists+0x70>)
 8005f68:	f7fe fc96 	bl	8004898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f6c:	480b      	ldr	r0, [pc, #44]	; (8005f9c <prvInitialiseTaskLists+0x74>)
 8005f6e:	f7fe fc93 	bl	8004898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f72:	4b0b      	ldr	r3, [pc, #44]	; (8005fa0 <prvInitialiseTaskLists+0x78>)
 8005f74:	4a05      	ldr	r2, [pc, #20]	; (8005f8c <prvInitialiseTaskLists+0x64>)
 8005f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f78:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <prvInitialiseTaskLists+0x7c>)
 8005f7a:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <prvInitialiseTaskLists+0x68>)
 8005f7c:	601a      	str	r2, [r3, #0]
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000ab8 	.word	0x20000ab8
 8005f8c:	20000b44 	.word	0x20000b44
 8005f90:	20000b58 	.word	0x20000b58
 8005f94:	20000b74 	.word	0x20000b74
 8005f98:	20000b88 	.word	0x20000b88
 8005f9c:	20000ba0 	.word	0x20000ba0
 8005fa0:	20000b6c 	.word	0x20000b6c
 8005fa4:	20000b70 	.word	0x20000b70

08005fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fae:	e019      	b.n	8005fe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fb0:	f000 fa94 	bl	80064dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fb4:	4b10      	ldr	r3, [pc, #64]	; (8005ff8 <prvCheckTasksWaitingTermination+0x50>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe fcf3 	bl	80049ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <prvCheckTasksWaitingTermination+0x54>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	4a0b      	ldr	r2, [pc, #44]	; (8005ffc <prvCheckTasksWaitingTermination+0x54>)
 8005fce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	4a0a      	ldr	r2, [pc, #40]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fda:	f000 fab3 	bl	8006544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f810 	bl	8006004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <prvCheckTasksWaitingTermination+0x58>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e1      	bne.n	8005fb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000b88 	.word	0x20000b88
 8005ffc:	20000bb4 	.word	0x20000bb4
 8006000:	20000b9c 	.word	0x20000b9c

08006004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006012:	2b00      	cmp	r3, #0
 8006014:	d108      	bne.n	8006028 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fc54 	bl	80068c8 <vPortFree>
				vPortFree( pxTCB );
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fc51 	bl	80068c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006026:	e01a      	b.n	800605e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800602e:	2b01      	cmp	r3, #1
 8006030:	d103      	bne.n	800603a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fc48 	bl	80068c8 <vPortFree>
	}
 8006038:	e011      	b.n	800605e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006040:	2b02      	cmp	r3, #2
 8006042:	d00c      	beq.n	800605e <prvDeleteTCB+0x5a>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	b672      	cpsid	i
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	b662      	cpsie	i
 8006058:	60fb      	str	r3, [r7, #12]
}
 800605a:	bf00      	nop
 800605c:	e7fe      	b.n	800605c <prvDeleteTCB+0x58>
	}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <prvResetNextTaskUnblockTime+0x38>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d104      	bne.n	8006082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006078:	4b0a      	ldr	r3, [pc, #40]	; (80060a4 <prvResetNextTaskUnblockTime+0x3c>)
 800607a:	f04f 32ff 	mov.w	r2, #4294967295
 800607e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006080:	e008      	b.n	8006094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <prvResetNextTaskUnblockTime+0x38>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000b6c 	.word	0x20000b6c
 80060a4:	20000bd4 	.word	0x20000bd4

080060a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <xTaskGetSchedulerState+0x34>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d102      	bne.n	80060bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060b6:	2301      	movs	r3, #1
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	e008      	b.n	80060ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060bc:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <xTaskGetSchedulerState+0x38>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060c4:	2302      	movs	r3, #2
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	e001      	b.n	80060ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060ce:	687b      	ldr	r3, [r7, #4]
	}
 80060d0:	4618      	mov	r0, r3
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr
 80060dc:	20000bc0 	.word	0x20000bc0
 80060e0:	20000bdc 	.word	0x20000bdc

080060e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d072      	beq.n	80061e0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060fa:	4b3c      	ldr	r3, [pc, #240]	; (80061ec <xTaskPriorityDisinherit+0x108>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	429a      	cmp	r2, r3
 8006102:	d00c      	beq.n	800611e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	b672      	cpsid	i
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	b662      	cpsie	i
 8006118:	60fb      	str	r3, [r7, #12]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10c      	bne.n	8006140 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	b672      	cpsid	i
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	b662      	cpsie	i
 800613a:	60bb      	str	r3, [r7, #8]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	1e5a      	subs	r2, r3, #1
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	429a      	cmp	r2, r3
 8006154:	d044      	beq.n	80061e0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800615a:	2b00      	cmp	r3, #0
 800615c:	d140      	bne.n	80061e0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3304      	adds	r3, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe fc22 	bl	80049ac <uxListRemove>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d115      	bne.n	800619a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	491f      	ldr	r1, [pc, #124]	; (80061f0 <xTaskPriorityDisinherit+0x10c>)
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	440b      	add	r3, r1
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTaskPriorityDisinherit+0xb6>
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	2201      	movs	r2, #1
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <xTaskPriorityDisinherit+0x110>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4013      	ands	r3, r2
 8006196:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <xTaskPriorityDisinherit+0x110>)
 8006198:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	f1c3 0207 	rsb	r2, r3, #7
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b2:	2201      	movs	r2, #1
 80061b4:	409a      	lsls	r2, r3
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <xTaskPriorityDisinherit+0x110>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <xTaskPriorityDisinherit+0x110>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <xTaskPriorityDisinherit+0x10c>)
 80061ce:	441a      	add	r2, r3
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe fb8b 	bl	80048f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061dc:	2301      	movs	r3, #1
 80061de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061e0:	697b      	ldr	r3, [r7, #20]
	}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000ab4 	.word	0x20000ab4
 80061f0:	20000ab8 	.word	0x20000ab8
 80061f4:	20000bbc 	.word	0x20000bbc

080061f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006202:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3304      	adds	r3, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f7fe fbcc 	bl	80049ac <uxListRemove>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	2201      	movs	r2, #1
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43da      	mvns	r2, r3
 8006228:	4b21      	ldr	r3, [pc, #132]	; (80062b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4013      	ands	r3, r2
 800622e:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006230:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d10a      	bne.n	8006250 <prvAddCurrentTaskToDelayedList+0x58>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	481a      	ldr	r0, [pc, #104]	; (80062b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800624a:	f7fe fb52 	bl	80048f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624e:	e026      	b.n	800629e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006258:	4b14      	ldr	r3, [pc, #80]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d209      	bcs.n	800627c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006268:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3304      	adds	r3, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f7fe fb60 	bl	800493a <vListInsert>
}
 800627a:	e010      	b.n	800629e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3304      	adds	r3, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4610      	mov	r0, r2
 800628a:	f7fe fb56 	bl	800493a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	d202      	bcs.n	800629e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006298:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6013      	str	r3, [r2, #0]
}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000bb8 	.word	0x20000bb8
 80062ac:	20000ab4 	.word	0x20000ab4
 80062b0:	20000bbc 	.word	0x20000bbc
 80062b4:	20000ba0 	.word	0x20000ba0
 80062b8:	20000b70 	.word	0x20000b70
 80062bc:	20000b6c 	.word	0x20000b6c
 80062c0:	20000bd4 	.word	0x20000bd4

080062c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3b04      	subs	r3, #4
 80062d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3b04      	subs	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062f4:	4a0c      	ldr	r2, [pc, #48]	; (8006328 <pxPortInitialiseStack+0x64>)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b14      	subs	r3, #20
 80062fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b04      	subs	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f06f 0202 	mvn.w	r2, #2
 8006312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3b20      	subs	r3, #32
 8006318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800631a:	68fb      	ldr	r3, [r7, #12]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr
 8006328:	0800632d 	.word	0x0800632d

0800632c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006336:	4b14      	ldr	r3, [pc, #80]	; (8006388 <prvTaskExitError+0x5c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d00c      	beq.n	800635a <prvTaskExitError+0x2e>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	60fb      	str	r3, [r7, #12]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <prvTaskExitError+0x2c>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	b672      	cpsid	i
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	b662      	cpsie	i
 800636e:	60bb      	str	r3, [r7, #8]
}
 8006370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006372:	bf00      	nop
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0fc      	beq.n	8006374 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	2000000c 	.word	0x2000000c
 800638c:	00000000 	.word	0x00000000

08006390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <pxCurrentTCBConst2>)
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	6808      	ldr	r0, [r1, #0]
 8006396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	f380 8809 	msr	PSP, r0
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8811 	msr	BASEPRI, r0
 80063aa:	4770      	bx	lr
 80063ac:	f3af 8000 	nop.w

080063b0 <pxCurrentTCBConst2>:
 80063b0:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop

080063b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063b8:	4808      	ldr	r0, [pc, #32]	; (80063dc <prvPortStartFirstTask+0x24>)
 80063ba:	6800      	ldr	r0, [r0, #0]
 80063bc:	6800      	ldr	r0, [r0, #0]
 80063be:	f380 8808 	msr	MSP, r0
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8814 	msr	CONTROL, r0
 80063ca:	b662      	cpsie	i
 80063cc:	b661      	cpsie	f
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	df00      	svc	0
 80063d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063da:	bf00      	nop
 80063dc:	e000ed08 	.word	0xe000ed08

080063e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063e6:	4b37      	ldr	r3, [pc, #220]	; (80064c4 <xPortStartScheduler+0xe4>)
 80063e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006400:	78fb      	ldrb	r3, [r7, #3]
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006408:	b2da      	uxtb	r2, r3
 800640a:	4b2f      	ldr	r3, [pc, #188]	; (80064c8 <xPortStartScheduler+0xe8>)
 800640c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800640e:	4b2f      	ldr	r3, [pc, #188]	; (80064cc <xPortStartScheduler+0xec>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006414:	e009      	b.n	800642a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006416:	4b2d      	ldr	r3, [pc, #180]	; (80064cc <xPortStartScheduler+0xec>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3b01      	subs	r3, #1
 800641c:	4a2b      	ldr	r2, [pc, #172]	; (80064cc <xPortStartScheduler+0xec>)
 800641e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	b2db      	uxtb	r3, r3
 8006428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642a:	78fb      	ldrb	r3, [r7, #3]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	2b80      	cmp	r3, #128	; 0x80
 8006434:	d0ef      	beq.n	8006416 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006436:	4b25      	ldr	r3, [pc, #148]	; (80064cc <xPortStartScheduler+0xec>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f1c3 0307 	rsb	r3, r3, #7
 800643e:	2b04      	cmp	r3, #4
 8006440:	d00c      	beq.n	800645c <xPortStartScheduler+0x7c>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006446:	b672      	cpsid	i
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	b662      	cpsie	i
 8006456:	60bb      	str	r3, [r7, #8]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <xPortStartScheduler+0xec>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	4a1a      	ldr	r2, [pc, #104]	; (80064cc <xPortStartScheduler+0xec>)
 8006464:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006466:	4b19      	ldr	r3, [pc, #100]	; (80064cc <xPortStartScheduler+0xec>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800646e:	4a17      	ldr	r2, [pc, #92]	; (80064cc <xPortStartScheduler+0xec>)
 8006470:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <xPortStartScheduler+0xf0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a14      	ldr	r2, [pc, #80]	; (80064d0 <xPortStartScheduler+0xf0>)
 8006480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006484:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <xPortStartScheduler+0xf0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a11      	ldr	r2, [pc, #68]	; (80064d0 <xPortStartScheduler+0xf0>)
 800648c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006490:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006492:	f000 f8dd 	bl	8006650 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <xPortStartScheduler+0xf4>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800649c:	f000 f8fc 	bl	8006698 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064a0:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <xPortStartScheduler+0xf8>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <xPortStartScheduler+0xf8>)
 80064a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064ac:	f7ff ff84 	bl	80063b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064b0:	f7ff fbb2 	bl	8005c18 <vTaskSwitchContext>
	prvTaskExitError();
 80064b4:	f7ff ff3a 	bl	800632c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	e000e400 	.word	0xe000e400
 80064c8:	20000be0 	.word	0x20000be0
 80064cc:	20000be4 	.word	0x20000be4
 80064d0:	e000ed20 	.word	0xe000ed20
 80064d4:	2000000c 	.word	0x2000000c
 80064d8:	e000ef34 	.word	0xe000ef34

080064dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	b672      	cpsid	i
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	b662      	cpsie	i
 80064f6:	607b      	str	r3, [r7, #4]
}
 80064f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <vPortEnterCritical+0x60>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3301      	adds	r3, #1
 8006500:	4a0e      	ldr	r2, [pc, #56]	; (800653c <vPortEnterCritical+0x60>)
 8006502:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006504:	4b0d      	ldr	r3, [pc, #52]	; (800653c <vPortEnterCritical+0x60>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d111      	bne.n	8006530 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <vPortEnterCritical+0x64>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <vPortEnterCritical+0x54>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	b672      	cpsid	i
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	b662      	cpsie	i
 800652a:	603b      	str	r3, [r7, #0]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <vPortEnterCritical+0x52>
	}
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800654a:	4b13      	ldr	r3, [pc, #76]	; (8006598 <vPortExitCritical+0x54>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10c      	bne.n	800656c <vPortExitCritical+0x28>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	b672      	cpsid	i
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	b662      	cpsie	i
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
 800656a:	e7fe      	b.n	800656a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <vPortExitCritical+0x54>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3b01      	subs	r3, #1
 8006572:	4a09      	ldr	r2, [pc, #36]	; (8006598 <vPortExitCritical+0x54>)
 8006574:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <vPortExitCritical+0x54>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <vPortExitCritical+0x46>
 800657e:	2300      	movs	r3, #0
 8006580:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f383 8811 	msr	BASEPRI, r3
}
 8006588:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	2000000c 	.word	0x2000000c
 800659c:	00000000 	.word	0x00000000

080065a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065a0:	f3ef 8009 	mrs	r0, PSP
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	4b15      	ldr	r3, [pc, #84]	; (8006600 <pxCurrentTCBConst>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f01e 0f10 	tst.w	lr, #16
 80065b0:	bf08      	it	eq
 80065b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ba:	6010      	str	r0, [r2, #0]
 80065bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065c4:	b672      	cpsid	i
 80065c6:	f380 8811 	msr	BASEPRI, r0
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	b662      	cpsie	i
 80065d4:	f7ff fb20 	bl	8005c18 <vTaskSwitchContext>
 80065d8:	f04f 0000 	mov.w	r0, #0
 80065dc:	f380 8811 	msr	BASEPRI, r0
 80065e0:	bc09      	pop	{r0, r3}
 80065e2:	6819      	ldr	r1, [r3, #0]
 80065e4:	6808      	ldr	r0, [r1, #0]
 80065e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ea:	f01e 0f10 	tst.w	lr, #16
 80065ee:	bf08      	it	eq
 80065f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065f4:	f380 8809 	msr	PSP, r0
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop

08006600 <pxCurrentTCBConst>:
 8006600:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop

08006608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	b672      	cpsid	i
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	b662      	cpsie	i
 8006622:	607b      	str	r3, [r7, #4]
}
 8006624:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006626:	f7ff fa3d 	bl	8005aa4 <xTaskIncrementTick>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <SysTick_Handler+0x44>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	2300      	movs	r3, #0
 800663a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	f383 8811 	msr	BASEPRI, r3
}
 8006642:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <vPortSetupTimerInterrupt+0x34>)
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <vPortSetupTimerInterrupt+0x38>)
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortSetupTimerInterrupt+0x3c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a0a      	ldr	r2, [pc, #40]	; (8006690 <vPortSetupTimerInterrupt+0x40>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	099b      	lsrs	r3, r3, #6
 800666c:	4a09      	ldr	r2, [pc, #36]	; (8006694 <vPortSetupTimerInterrupt+0x44>)
 800666e:	3b01      	subs	r3, #1
 8006670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006672:	4b04      	ldr	r3, [pc, #16]	; (8006684 <vPortSetupTimerInterrupt+0x34>)
 8006674:	2207      	movs	r2, #7
 8006676:	601a      	str	r2, [r3, #0]
}
 8006678:	bf00      	nop
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	e000e010 	.word	0xe000e010
 8006688:	e000e018 	.word	0xe000e018
 800668c:	20000000 	.word	0x20000000
 8006690:	10624dd3 	.word	0x10624dd3
 8006694:	e000e014 	.word	0xe000e014

08006698 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006698:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066a8 <vPortEnableVFP+0x10>
 800669c:	6801      	ldr	r1, [r0, #0]
 800669e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066a2:	6001      	str	r1, [r0, #0]
 80066a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066a6:	bf00      	nop
 80066a8:	e000ed88 	.word	0xe000ed88

080066ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066b2:	f3ef 8305 	mrs	r3, IPSR
 80066b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	d916      	bls.n	80066ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066be:	4a19      	ldr	r2, [pc, #100]	; (8006724 <vPortValidateInterruptPriority+0x78>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4413      	add	r3, r2
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066c8:	4b17      	ldr	r3, [pc, #92]	; (8006728 <vPortValidateInterruptPriority+0x7c>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	7afa      	ldrb	r2, [r7, #11]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d20c      	bcs.n	80066ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	b672      	cpsid	i
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	b662      	cpsie	i
 80066e6:	607b      	str	r3, [r7, #4]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <vPortValidateInterruptPriority+0x80>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066f4:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <vPortValidateInterruptPriority+0x84>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d90c      	bls.n	8006716 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	b672      	cpsid	i
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	b662      	cpsie	i
 8006710:	603b      	str	r3, [r7, #0]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <vPortValidateInterruptPriority+0x68>
	}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	e000e3f0 	.word	0xe000e3f0
 8006728:	20000be0 	.word	0x20000be0
 800672c:	e000ed0c 	.word	0xe000ed0c
 8006730:	20000be4 	.word	0x20000be4

08006734 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b08a      	sub	sp, #40	; 0x28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800673c:	2300      	movs	r3, #0
 800673e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006740:	f7ff f904 	bl	800594c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006744:	4b5b      	ldr	r3, [pc, #364]	; (80068b4 <pvPortMalloc+0x180>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800674c:	f000 f91a 	bl	8006984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006750:	4b59      	ldr	r3, [pc, #356]	; (80068b8 <pvPortMalloc+0x184>)
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4013      	ands	r3, r2
 8006758:	2b00      	cmp	r3, #0
 800675a:	f040 8092 	bne.w	8006882 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006764:	2208      	movs	r2, #8
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4413      	add	r3, r2
 800676a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f003 0307 	and.w	r3, r3, #7
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	3308      	adds	r3, #8
 800677e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <pvPortMalloc+0x70>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	b672      	cpsid	i
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	b662      	cpsie	i
 800679e:	617b      	str	r3, [r7, #20]
}
 80067a0:	bf00      	nop
 80067a2:	e7fe      	b.n	80067a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d06b      	beq.n	8006882 <pvPortMalloc+0x14e>
 80067aa:	4b44      	ldr	r3, [pc, #272]	; (80068bc <pvPortMalloc+0x188>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d866      	bhi.n	8006882 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067b4:	4b42      	ldr	r3, [pc, #264]	; (80068c0 <pvPortMalloc+0x18c>)
 80067b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067b8:	4b41      	ldr	r3, [pc, #260]	; (80068c0 <pvPortMalloc+0x18c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067be:	e004      	b.n	80067ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d903      	bls.n	80067dc <pvPortMalloc+0xa8>
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f1      	bne.n	80067c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067dc:	4b35      	ldr	r3, [pc, #212]	; (80068b4 <pvPortMalloc+0x180>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d04d      	beq.n	8006882 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2208      	movs	r2, #8
 80067ec:	4413      	add	r3, r2
 80067ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	1ad2      	subs	r2, r2, r3
 8006800:	2308      	movs	r3, #8
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	429a      	cmp	r2, r3
 8006806:	d921      	bls.n	800684c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4413      	add	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0307 	and.w	r3, r3, #7
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00c      	beq.n	8006834 <pvPortMalloc+0x100>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	b672      	cpsid	i
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	b662      	cpsie	i
 800682e:	613b      	str	r3, [r7, #16]
}
 8006830:	bf00      	nop
 8006832:	e7fe      	b.n	8006832 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006846:	69b8      	ldr	r0, [r7, #24]
 8006848:	f000 f8fe 	bl	8006a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <pvPortMalloc+0x188>)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	4a19      	ldr	r2, [pc, #100]	; (80068bc <pvPortMalloc+0x188>)
 8006858:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800685a:	4b18      	ldr	r3, [pc, #96]	; (80068bc <pvPortMalloc+0x188>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b19      	ldr	r3, [pc, #100]	; (80068c4 <pvPortMalloc+0x190>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	429a      	cmp	r2, r3
 8006864:	d203      	bcs.n	800686e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <pvPortMalloc+0x188>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <pvPortMalloc+0x190>)
 800686c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <pvPortMalloc+0x184>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	431a      	orrs	r2, r3
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006882:	f7ff f871 	bl	8005968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00c      	beq.n	80068aa <pvPortMalloc+0x176>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	b672      	cpsid	i
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	b662      	cpsie	i
 80068a4:	60fb      	str	r3, [r7, #12]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <pvPortMalloc+0x174>
	return pvReturn;
 80068aa:	69fb      	ldr	r3, [r7, #28]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	; 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200047f0 	.word	0x200047f0
 80068b8:	200047fc 	.word	0x200047fc
 80068bc:	200047f4 	.word	0x200047f4
 80068c0:	200047e8 	.word	0x200047e8
 80068c4:	200047f8 	.word	0x200047f8

080068c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d04c      	beq.n	8006974 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068da:	2308      	movs	r3, #8
 80068dc:	425b      	negs	r3, r3
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4413      	add	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b23      	ldr	r3, [pc, #140]	; (800697c <vPortFree+0xb4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4013      	ands	r3, r2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <vPortFree+0x48>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	b672      	cpsid	i
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	b662      	cpsie	i
 800690a:	60fb      	str	r3, [r7, #12]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00c      	beq.n	8006932 <vPortFree+0x6a>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	b672      	cpsid	i
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	b662      	cpsie	i
 800692c:	60bb      	str	r3, [r7, #8]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	4b11      	ldr	r3, [pc, #68]	; (800697c <vPortFree+0xb4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d019      	beq.n	8006974 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d115      	bne.n	8006974 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	4b0b      	ldr	r3, [pc, #44]	; (800697c <vPortFree+0xb4>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	43db      	mvns	r3, r3
 8006952:	401a      	ands	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006958:	f7fe fff8 	bl	800594c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <vPortFree+0xb8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4413      	add	r3, r2
 8006966:	4a06      	ldr	r2, [pc, #24]	; (8006980 <vPortFree+0xb8>)
 8006968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800696a:	6938      	ldr	r0, [r7, #16]
 800696c:	f000 f86c 	bl	8006a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006970:	f7fe fffa 	bl	8005968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006974:	bf00      	nop
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	200047fc 	.word	0x200047fc
 8006980:	200047f4 	.word	0x200047f4

08006984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800698a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800698e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006990:	4b27      	ldr	r3, [pc, #156]	; (8006a30 <prvHeapInit+0xac>)
 8006992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00c      	beq.n	80069b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <prvHeapInit+0xac>)
 80069b4:	4413      	add	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069bc:	4a1d      	ldr	r2, [pc, #116]	; (8006a34 <prvHeapInit+0xb0>)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069c2:	4b1c      	ldr	r3, [pc, #112]	; (8006a34 <prvHeapInit+0xb0>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	4413      	add	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069d0:	2208      	movs	r2, #8
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 0307 	bic.w	r3, r3, #7
 80069de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4a15      	ldr	r2, [pc, #84]	; (8006a38 <prvHeapInit+0xb4>)
 80069e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <prvHeapInit+0xb4>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2200      	movs	r2, #0
 80069ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ee:	4b12      	ldr	r3, [pc, #72]	; (8006a38 <prvHeapInit+0xb4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a04:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <prvHeapInit+0xb4>)
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a0a      	ldr	r2, [pc, #40]	; (8006a3c <prvHeapInit+0xb8>)
 8006a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <prvHeapInit+0xbc>)
 8006a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a1c:	4b09      	ldr	r3, [pc, #36]	; (8006a44 <prvHeapInit+0xc0>)
 8006a1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000be8 	.word	0x20000be8
 8006a34:	200047e8 	.word	0x200047e8
 8006a38:	200047f0 	.word	0x200047f0
 8006a3c:	200047f8 	.word	0x200047f8
 8006a40:	200047f4 	.word	0x200047f4
 8006a44:	200047fc 	.word	0x200047fc

08006a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a50:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <prvInsertBlockIntoFreeList+0xac>)
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e002      	b.n	8006a5c <prvInsertBlockIntoFreeList+0x14>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d8f7      	bhi.n	8006a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	4413      	add	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d108      	bne.n	8006a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d118      	bne.n	8006ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d00d      	beq.n	8006ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e008      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	; (8006af8 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	e003      	b.n	8006ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d002      	beq.n	8006ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ae6:	bf00      	nop
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	200047e8 	.word	0x200047e8
 8006af8:	200047f0 	.word	0x200047f0

08006afc <memset>:
 8006afc:	4402      	add	r2, r0
 8006afe:	4603      	mov	r3, r0
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d100      	bne.n	8006b06 <memset+0xa>
 8006b04:	4770      	bx	lr
 8006b06:	f803 1b01 	strb.w	r1, [r3], #1
 8006b0a:	e7f9      	b.n	8006b00 <memset+0x4>

08006b0c <__libc_init_array>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	4d0d      	ldr	r5, [pc, #52]	; (8006b44 <__libc_init_array+0x38>)
 8006b10:	4c0d      	ldr	r4, [pc, #52]	; (8006b48 <__libc_init_array+0x3c>)
 8006b12:	1b64      	subs	r4, r4, r5
 8006b14:	10a4      	asrs	r4, r4, #2
 8006b16:	2600      	movs	r6, #0
 8006b18:	42a6      	cmp	r6, r4
 8006b1a:	d109      	bne.n	8006b30 <__libc_init_array+0x24>
 8006b1c:	4d0b      	ldr	r5, [pc, #44]	; (8006b4c <__libc_init_array+0x40>)
 8006b1e:	4c0c      	ldr	r4, [pc, #48]	; (8006b50 <__libc_init_array+0x44>)
 8006b20:	f000 f826 	bl	8006b70 <_init>
 8006b24:	1b64      	subs	r4, r4, r5
 8006b26:	10a4      	asrs	r4, r4, #2
 8006b28:	2600      	movs	r6, #0
 8006b2a:	42a6      	cmp	r6, r4
 8006b2c:	d105      	bne.n	8006b3a <__libc_init_array+0x2e>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b34:	4798      	blx	r3
 8006b36:	3601      	adds	r6, #1
 8006b38:	e7ee      	b.n	8006b18 <__libc_init_array+0xc>
 8006b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b3e:	4798      	blx	r3
 8006b40:	3601      	adds	r6, #1
 8006b42:	e7f2      	b.n	8006b2a <__libc_init_array+0x1e>
 8006b44:	08006cac 	.word	0x08006cac
 8006b48:	08006cac 	.word	0x08006cac
 8006b4c:	08006cac 	.word	0x08006cac
 8006b50:	08006cb0 	.word	0x08006cb0

08006b54 <memcpy>:
 8006b54:	440a      	add	r2, r1
 8006b56:	4291      	cmp	r1, r2
 8006b58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b5c:	d100      	bne.n	8006b60 <memcpy+0xc>
 8006b5e:	4770      	bx	lr
 8006b60:	b510      	push	{r4, lr}
 8006b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b6a:	4291      	cmp	r1, r2
 8006b6c:	d1f9      	bne.n	8006b62 <memcpy+0xe>
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_init>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr

08006b7c <_fini>:
 8006b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7e:	bf00      	nop
 8006b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b82:	bc08      	pop	{r3}
 8006b84:	469e      	mov	lr, r3
 8006b86:	4770      	bx	lr
